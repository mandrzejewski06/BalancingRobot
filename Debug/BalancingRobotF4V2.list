
BalancingRobotF4V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001339c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  08013540  08013540  00023540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140a8  080140a8  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080140a8  080140a8  000240a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140b0  080140b0  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140b0  080140b0  000240b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140b4  080140b4  000240b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080140b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000500c  200001ec  080142a4  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00002800  200051f8  080142a4  000351f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002441c  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d7c  00000000  00000000  00054638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  000593b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  0005b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1f1  00000000  00000000  0005ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b89  00000000  00000000  00079c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aac88  00000000  00000000  0009c7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014745a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca4  00000000  00000000  001474ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013524 	.word	0x08013524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08013524 	.word	0x08013524

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <DRV8834_setRobotState>:
// Zmienne wewnętrzne biblioteki
static uint16_t maxSpeed = DRV8834_MOT_DEFAULT_MAX_SPEED;		// Maksymalna prędkość
static uint16_t maxFrequency = DRV8834_MOT_DEFAULT_MAX_FREQ;	// Maksymalna częstotliwość
static RoborState_t state;	// Stan robota
// Funkcje zapisu i odczytu zmiennych powyżej
void DRV8834_setRobotState(uint16_t st) { state = st;}
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <DRV8834_setRobotState+0x20>)
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000208 	.word	0x20000208

0800104c <DRV8834_setMaxSpeed>:
void DRV8834_setMaxSpeed(uint16_t spd) { maxSpeed = spd;}
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <DRV8834_setMaxSpeed+0x1c>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	8013      	strh	r3, [r2, #0]
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000000 	.word	0x20000000

0800106c <DRV8834_setMaxFreq>:
void DRV8834_setMaxFreq(uint16_t freq) { maxFrequency = freq; }
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <DRV8834_setMaxFreq+0x1c>)
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	8013      	strh	r3, [r2, #0]
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000002 	.word	0x20000002

0800108c <DRV8834_getRobotState>:
uint16_t DRV8834_getRobotState(void) { return state; }
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <DRV8834_getRobotState+0x14>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000208 	.word	0x20000208

080010a4 <DRV8834_getMaxSpeed>:
uint16_t DRV8834_getMaxSpeed(void) { return maxSpeed; }
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <DRV8834_getMaxSpeed+0x14>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <DRV8834_getMaxFreq>:
uint16_t DRV8834_getMaxFreq(void) { return maxFrequency; }
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <DRV8834_getMaxFreq+0x14>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000002 	.word	0x20000002

080010d4 <DRV8834_Init>:
// Funkcja inicjalizująca - przyjmuje wskaźnik na obiekt silnika, uchwyt (wskaźnik) do timera i numer kanału timera
void DRV8834_Init(StepMotor_t *stepMotor, TIM_HandleTypeDef *htim, uint32_t channel)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	stepMotor->PWM_timer = htim;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	61da      	str	r2, [r3, #28]
	stepMotor->PWM_timerChannel = channel;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	621a      	str	r2, [r3, #32]
	stepMotor->direction = __MOTOR_FWD;		// Domyślny kierunek prosto
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	stepMotor->last_counter = 0;			// Ostatnia wartość zliczania licznika to 0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DRV8834_InitPins>:
// Funkcja inicjalizująca piny, przyjmuje numer pinu i portu M0, M1 (mikrokrok) i DIR (kierunku)
void DRV8834_InitPins(StepMotor_t *stepMotor, uint16_t dirPin, GPIO_TypeDef* dirPort, uint16_t m0Pin, GPIO_TypeDef* m0Port, uint16_t m1Pin, GPIO_TypeDef* m1Port)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	461a      	mov	r2, r3
 8001110:	460b      	mov	r3, r1
 8001112:	817b      	strh	r3, [r7, #10]
 8001114:	4613      	mov	r3, r2
 8001116:	813b      	strh	r3, [r7, #8]
	stepMotor->step_motor_pins.DIR_PIN = dirPin;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	897a      	ldrh	r2, [r7, #10]
 800111c:	809a      	strh	r2, [r3, #4]
	stepMotor->step_motor_pins.DIR_PORT = dirPort;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]

	stepMotor->step_motor_pins.M0_PIN = m0Pin;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	893a      	ldrh	r2, [r7, #8]
 8001128:	819a      	strh	r2, [r3, #12]
	stepMotor->step_motor_pins.M0_PORT = m0Port;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	611a      	str	r2, [r3, #16]

	stepMotor->step_motor_pins.M1_PIN = m1Pin;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8bba      	ldrh	r2, [r7, #28]
 8001134:	829a      	strh	r2, [r3, #20]
	stepMotor->step_motor_pins.M1_PORT = m1Port;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a3a      	ldr	r2, [r7, #32]
 800113a:	619a      	str	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DeinitializePin>:
// Funkcja do deinicjalizacji pinu z wejścia w wyjście i na odwrót
// Przyjmuje numer portu, pinu oraz tryb jaki ma być ustawiony:
// GPIO_MODE_OUTPUT_PP lub GPIO_MODE_INPUT
void DeinitializePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint16_t Mode)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	803b      	strh	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

	if(Mode == GPIO_MODE_OUTPUT_PP)
 8001168:	883b      	ldrh	r3, [r7, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10e      	bne.n	800118c <DeinitializePin+0x44>
	{
		//HAL_GPIO_DeInit(GPIOx, GPIO_Pin); // CZY POTRZEBNE?
		GPIO_InitStruct.Pin = GPIO_Pin;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8001172:	883b      	ldrh	r3, [r7, #0]
 8001174:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f005 f9e3 	bl	8006550 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_Pin;
		GPIO_InitStruct.Mode = Mode;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 800118a:	e00e      	b.n	80011aa <DeinitializePin+0x62>
	else if (Mode == GPIO_MODE_INPUT)
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10b      	bne.n	80011aa <DeinitializePin+0x62>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f005 f9d3 	bl	8006550 <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <DRV8834_SetMicrostep>:
// Funkcja zmiany mikrokroku, przyjmuje wartość mikrokroku jaki ma być ustawiony
// silniki podczas zmiany muszą być zatrzymane, dozwolone wartości to
// 1, 2, 4, 8, 16, 32. Zwraca HAL_ERROR jeśli warunki nie zostały spełnione, jeśli wszystko ok zwraca HAL_OK
uint8_t DRV8834_SetMicrostep(StepMotor_t *stepMotor, uint8_t microstep)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
     *  1  Z    32
     *
     *  Z = high impedance mode (M0 is three-state)
     */
	// Jeśli silniki nie są w stanie STOPPED to zwróć HAL_ERROR
	if(state != STOPPED)
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <DRV8834_SetMicrostep+0x13c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <DRV8834_SetMicrostep+0x18>
	{
		return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e08d      	b.n	80012e8 <DRV8834_SetMicrostep+0x134>
	}
	// Ustawienie pinów zgodnie z zadaną wartością i wg tabeli powyżej
	switch(microstep)
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	2b1f      	cmp	r3, #31
 80011d2:	d86e      	bhi.n	80012b2 <DRV8834_SetMicrostep+0xfe>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <DRV8834_SetMicrostep+0x28>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	0800125d 	.word	0x0800125d
 80011e0:	0800127f 	.word	0x0800127f
 80011e4:	080012b3 	.word	0x080012b3
 80011e8:	080012a1 	.word	0x080012a1
 80011ec:	080012b3 	.word	0x080012b3
 80011f0:	080012b3 	.word	0x080012b3
 80011f4:	080012b3 	.word	0x080012b3
 80011f8:	0800125d 	.word	0x0800125d
 80011fc:	080012b3 	.word	0x080012b3
 8001200:	080012b3 	.word	0x080012b3
 8001204:	080012b3 	.word	0x080012b3
 8001208:	080012b3 	.word	0x080012b3
 800120c:	080012b3 	.word	0x080012b3
 8001210:	080012b3 	.word	0x080012b3
 8001214:	080012b3 	.word	0x080012b3
 8001218:	0800127f 	.word	0x0800127f
 800121c:	080012b3 	.word	0x080012b3
 8001220:	080012b3 	.word	0x080012b3
 8001224:	080012b3 	.word	0x080012b3
 8001228:	080012b3 	.word	0x080012b3
 800122c:	080012b3 	.word	0x080012b3
 8001230:	080012b3 	.word	0x080012b3
 8001234:	080012b3 	.word	0x080012b3
 8001238:	080012b3 	.word	0x080012b3
 800123c:	080012b3 	.word	0x080012b3
 8001240:	080012b3 	.word	0x080012b3
 8001244:	080012b3 	.word	0x080012b3
 8001248:	080012b3 	.word	0x080012b3
 800124c:	080012b3 	.word	0x080012b3
 8001250:	080012b3 	.word	0x080012b3
 8001254:	080012b3 	.word	0x080012b3
 8001258:	080012a1 	.word	0x080012a1
	{
	case 1:
	case 8:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6918      	ldr	r0, [r3, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	899b      	ldrh	r3, [r3, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff ff6e 	bl	8001148 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_RESET);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6918      	ldr	r0, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	899b      	ldrh	r3, [r3, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	4619      	mov	r1, r3
 8001278:	f005 faee 	bl	8006858 <HAL_GPIO_WritePin>
		break;
 800127c:	e01b      	b.n	80012b6 <DRV8834_SetMicrostep+0x102>
	case 2:
	case 16:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6918      	ldr	r0, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	899b      	ldrh	r3, [r3, #12]
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff ff5d 	bl	8001148 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_SET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6918      	ldr	r0, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	899b      	ldrh	r3, [r3, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f005 fadd 	bl	8006858 <HAL_GPIO_WritePin>
		break;
 800129e:	e00a      	b.n	80012b6 <DRV8834_SetMicrostep+0x102>
	case 4:
	case 32:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_INPUT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6918      	ldr	r0, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff ff4c 	bl	8001148 <DeinitializePin>
		break;
 80012b0:	e001      	b.n	80012b6 <DRV8834_SetMicrostep+0x102>
	default:
		return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e018      	b.n	80012e8 <DRV8834_SetMicrostep+0x134>
	}

	if(microstep < 8)
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	d808      	bhi.n	80012ce <DRV8834_SetMicrostep+0x11a>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_RESET);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6998      	ldr	r0, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8a9b      	ldrh	r3, [r3, #20]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f005 fac6 	bl	8006858 <HAL_GPIO_WritePin>
 80012cc:	e007      	b.n	80012de <DRV8834_SetMicrostep+0x12a>
	}
	else
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_SET);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6998      	ldr	r0, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8a9b      	ldrh	r3, [r3, #20]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	f005 fabd 	bl	8006858 <HAL_GPIO_WritePin>
	}
	// Przypisanie nowego mikrokroku do obiektu silnika
	stepMotor->microstep = microstep;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	78fa      	ldrb	r2, [r7, #3]
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000208 	.word	0x20000208

080012f4 <DRV8834_StopMotor>:
// Wprowadzenie silnika w stan STOPPED
void DRV8834_StopMotor(StepMotor_t *stepMotor)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	// TODO: wprowadzenie robota w stan STOPPED przed zatrzymaniem drugiego silnika, jak to rozwiązać
	//__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, 0); // CZY POTRZEBNE?
	HAL_TIM_PWM_Stop(stepMotor->PWM_timer, stepMotor->PWM_timerChannel); // Zastopuj timer
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f007 f978 	bl	80085fc <HAL_TIM_PWM_Stop>
	state = STOPPED;	// Wprowadź robota w stan STOPPED
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <DRV8834_StopMotor+0x28>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000208 	.word	0x20000208

08001320 <DRV8834_SetDirection>:
// Wewnętrzna funkcja do zmiany kierunku silnika
// Przyjmuje zadany kierunek obrotu silnika
static void DRV8834_SetDirection(StepMotor_t *stepMotor, StepMotorDirection_t dir)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	if((dir == __MOTOR_FWD) || (dir == __MOTOR_BACK))
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <DRV8834_SetDirection+0x18>
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10a      	bne.n	800134e <DRV8834_SetDirection+0x2e>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.DIR_PORT, stepMotor->step_motor_pins.DIR_PIN, dir);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6898      	ldr	r0, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4619      	mov	r1, r3
 8001344:	f005 fa88 	bl	8006858 <HAL_GPIO_WritePin>
		stepMotor->direction = dir;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	701a      	strb	r2, [r3, #0]
	}
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <DRV8834_SetSpeed>:
// Funkcja do zmiany prędkości silnika, przyjmuje wartość zadaną prędkości
void DRV8834_SetSpeed(StepMotor_t *stepMotor, int32_t speed)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	// Zmienne pomocnicze wartości do której zlicza licznik i aktualnej częstotliwości PWM
	uint32_t counter, freq;
	// Jeśli prędkość jest ujemna i aktualny kierunek jest prosto to zmień kierunek na wstecz
	if((speed < 0) && (stepMotor->direction == __MOTOR_FWD))
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da08      	bge.n	800137a <DRV8834_SetSpeed+0x22>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <DRV8834_SetSpeed+0x22>
	{
		DRV8834_SetDirection(stepMotor, __MOTOR_BACK);
 8001370:	2101      	movs	r1, #1
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffd4 	bl	8001320 <DRV8834_SetDirection>
 8001378:	e00a      	b.n	8001390 <DRV8834_SetSpeed+0x38>
	}
	// Odwrotnie niż poprzednio
	else if((speed > 0) && (stepMotor->direction == __MOTOR_BACK))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dd07      	ble.n	8001390 <DRV8834_SetSpeed+0x38>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d103      	bne.n	8001390 <DRV8834_SetSpeed+0x38>
	{
		DRV8834_SetDirection(stepMotor, __MOTOR_FWD);
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffc8 	bl	8001320 <DRV8834_SetDirection>
	}
	// Jeśli prędkość jest ujemna to wyznacz jej wartość bezwzględną
	if(speed < 0)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da04      	bge.n	80013a0 <DRV8834_SetSpeed+0x48>
	{
		speed = ABS(speed);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bfb8      	it	lt
 800139c:	425b      	neglt	r3, r3
 800139e:	603b      	str	r3, [r7, #0]
	}
	// Jeśli z jakiegoś powodu prędkość będzie większa niż ustawiony limit górny
	// to ustaw prędkość jako limit górny (maxSpeed)
	if(speed > maxSpeed)
 80013a0:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <DRV8834_SetSpeed+0x19c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	dd02      	ble.n	80013b2 <DRV8834_SetSpeed+0x5a>
	{
		speed = maxSpeed;
 80013ac:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <DRV8834_SetSpeed+0x19c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	603b      	str	r3, [r7, #0]
	}
	// Oblicz wymaganą częstotliwość PWM na podstawie stałych częstotliwości minimalnej i maks
	// oraz aktualnego mikrokroku (jako mnożnik) i zadanej prędkości
	freq = (speed * (stepMotor->microstep*(maxFrequency - DRV8834_MOT_MIN_FREQ))) / maxSpeed;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <DRV8834_SetSpeed+0x1a0>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <DRV8834_SetSpeed+0x19c>)
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
	// Obliczenie wymaganej wartości do której ma zliczać licznik aby realizować wyliczoną częstotliwość
#if USING_WHICH_TIMERS == APB1
	// Wyliczania na podstawie stałych wybranego procesora i timera
	if(freq != 0)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <DRV8834_SetSpeed+0x9e>
		counter = PCLK_PRESCALER*HAL_RCC_GetPCLK1Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
 80013da:	f006 fe9f 	bl	800811c <HAL_RCC_GetPCLK1Freq>
 80013de:	4603      	mov	r3, r0
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e001      	b.n	80013fa <DRV8834_SetSpeed+0xa2>
	else
		counter = 0;	// zabezpieczenie przed dzieleniem przez zero
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
		counter = PCLK_PRESCALER*HAL_RCC_GetPCLK2Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
#else
#error "Choose between APB1 timers or APB2 timers or reimplement code if using both"
#endif
	// Jeśli wartość aktualnego countera jest taki sam jak poprzednio to pomiń zmiane ustawień timera
	if(stepMotor->last_counter != counter)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d072      	beq.n	80014ea <DRV8834_SetSpeed+0x192>
	{
		// Jeśli counter jest zerowy to zatrzymaj timer ustawiając zerowe wartości
		if(counter == 0)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d131      	bne.n	800146e <DRV8834_SetSpeed+0x116>
		{
			__HAL_TIM_SET_COUNTER(stepMotor->PWM_timer, 0);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(stepMotor->PWM_timer, 0);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, 0);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <DRV8834_SetSpeed+0xe2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
 8001438:	e054      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b04      	cmp	r3, #4
 8001440:	d105      	bne.n	800144e <DRV8834_SetSpeed+0xf6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
 800144c:	e04a      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d105      	bne.n	8001462 <DRV8834_SetSpeed+0x10a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001460:	e040      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	e03a      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
		}
		// Jeśli jest różny od 0 to ustaw wartość do której ma zliczać jako counter - 1 (-1 bo zaczynamy od 0)
		else
		{
			__HAL_TIM_SET_COUNTER(stepMotor->PWM_timer, 0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(stepMotor->PWM_timer, counter - 1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	3a01      	subs	r2, #1
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	3a01      	subs	r2, #1
 800148c:	60da      	str	r2, [r3, #12]
			// zmiana stanu na niski w połowie zliczania, aby wypełnienie PWM było równe 50%
			__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, (counter/2) - 1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <DRV8834_SetSpeed+0x14e>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	085a      	lsrs	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
 80014a4:	e01e      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d107      	bne.n	80014be <DRV8834_SetSpeed+0x166>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	69d2      	ldr	r2, [r2, #28]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	6393      	str	r3, [r2, #56]	; 0x38
 80014bc:	e012      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d107      	bne.n	80014d6 <DRV8834_SetSpeed+0x17e>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	69d2      	ldr	r2, [r2, #28]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014d4:	e006      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	69d2      	ldr	r2, [r2, #28]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
		}
		// Przypisz aktualny counter do kolejnej iteracji wyliczeń timera
		stepMotor->last_counter = counter;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000002 	.word	0x20000002

080014fc <DRV8834_StartMotor>:
// Wystartuj silniki (ustawiany stan BALANCING robota) z zadaną prędkością
void DRV8834_StartMotor(StepMotor_t *stepMotor, int32_t speed)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	state = BALANCING;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <DRV8834_StartMotor+0x30>)
 8001508:	2205      	movs	r2, #5
 800150a:	701a      	strb	r2, [r3, #0]

	DRV8834_SetSpeed(stepMotor, speed);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff22 	bl	8001358 <DRV8834_SetSpeed>

	HAL_TIM_PWM_Start(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69da      	ldr	r2, [r3, #28]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f006 ffbc 	bl	800849c <HAL_TIM_PWM_Start>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000208 	.word	0x20000208

08001530 <LSM6_InitEx>:

// ********** FUNKCJA INICJALIZUJĄCA JEDNOSTKĘ MODUŁU LSM6 ********** //

// TODO: Dodać wykonanie funkcji enableDefault do funkcji inicjalizującej?
bool LSM6_InitEx(I2C_HandleTypeDef *i2c, LSM6_t *LSM6, deviceType device, sa0State sa0)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	460b      	mov	r3, r1
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	4613      	mov	r3, r2
 8001544:	71bb      	strb	r3, [r7, #6]
	// Inicjalizacja parametrów modułu
	LSM6->i2c = i2c;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
	LSM6->_device = device;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	711a      	strb	r2, [r3, #4]
	// TODO: usunąć poniższe zmienne, z io_timeout stworzyć globalną zmienną statyczną
	LSM6->io_timeout = DEFAULT_TIMEOUT;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	80da      	strh	r2, [r3, #6]
	LSM6->did_timeout = false;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
	LSM6->did_error = false;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2200      	movs	r2, #0
 8001564:	725a      	strb	r2, [r3, #9]

	// Jeśli któryś z parametrów ustawiony jest jako autoDetect, wykonaj autodetekcję urządzenia
	if (device == device_autoDetect || sa0 == sa0_autoDetect)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d002      	beq.n	8001572 <LSM6_InitEx+0x42>
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d132      	bne.n	80015d8 <LSM6_InitEx+0xa8>
	{
		// Jeśli deviceType ustawiono jako autoDetect lub sprecyzowano DS33 sprawdź czy to jest DS33
		if (device == device_autoDetect || device == device_DS33)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d002      	beq.n	800157e <LSM6_InitEx+0x4e>
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d124      	bne.n	80015c8 <LSM6_InitEx+0x98>
		{
			// Jeśli SA0 sprecyzowano jako stan wysoki lub ustawiono autodetekcję stanu, wyślij zapytanie
			// pod adres odpowiadający stanu wysokiemu SA0 i sprawdź czy w odpowiedzi ID będzie prawidłowe
			if (sa0 != sa0_low && testReg(LSM6, DS33_SA0_HIGH_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00f      	beq.n	80015a4 <LSM6_InitEx+0x74>
 8001584:	220f      	movs	r2, #15
 8001586:	216b      	movs	r1, #107	; 0x6b
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 f83b 	bl	8001604 <testReg>
 800158e:	4603      	mov	r3, r0
 8001590:	2b69      	cmp	r3, #105	; 0x69
 8001592:	d107      	bne.n	80015a4 <LSM6_InitEx+0x74>
			{
				// Ustaw parametry prawidłowo wykrytego urządzenia
				sa0 = sa0_high;
 8001594:	2301      	movs	r3, #1
 8001596:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d114      	bne.n	80015c8 <LSM6_InitEx+0x98>
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e011      	b.n	80015c8 <LSM6_InitEx+0x98>
			}
			// Jeśli SA0 sprecyzowano jako stan niski lub ustawiono autodetekcję stanu, wyślij zapytanie
			// pod adres odpowiadający stanu niskiemu SA0 i sprawdź czy w odpowiedzi ID będzie prawidłowe
			else if (sa0 != sa0_high && testReg(LSM6, DS33_SA0_LOW_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d00e      	beq.n	80015c8 <LSM6_InitEx+0x98>
 80015aa:	220f      	movs	r2, #15
 80015ac:	216a      	movs	r1, #106	; 0x6a
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f000 f828 	bl	8001604 <testReg>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b69      	cmp	r3, #105	; 0x69
 80015b8:	d106      	bne.n	80015c8 <LSM6_InitEx+0x98>
			{
				// Ustaw parametry prawidłowo wykrytego urządzenia
				sa0 = sa0_low;
 80015ba:	2300      	movs	r3, #0
 80015bc:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <LSM6_InitEx+0x98>
 80015c4:	2300      	movs	r3, #0
 80015c6:	71fb      	strb	r3, [r7, #7]
		}
		/* Tutaj dodawać kolejne else if, gdyby w przyszłości wyprodukowano moduł LSM6 z innym układem scalonym
		 */

		// Jeśli w tym kroku algorytmu nie udało się znaleźć urządzenia - zwróć błąd
		if (device == device_autoDetect || sa0 == sa0_autoDetect)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d002      	beq.n	80015d4 <LSM6_InitEx+0xa4>
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d101      	bne.n	80015d8 <LSM6_InitEx+0xa8>
		{
			return false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e011      	b.n	80015fc <LSM6_InitEx+0xcc>
		}
	}
	// Przypisz prawidłowo wykryty typ urządzenia
	LSM6->_device = device;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	79fa      	ldrb	r2, [r7, #7]
 80015dc:	711a      	strb	r2, [r3, #4]
	// Przypisz adres do urządzenia zgodnie ze stanem pinu SA0, zwróć błąd gdyby urządzenie nie było wykryte właściwe
	switch (device)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <LSM6_InitEx+0xca>
	{
		case device_DS33:
			LSM6->address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <LSM6_InitEx+0xbe>
 80015ea:	226b      	movs	r2, #107	; 0x6b
 80015ec:	e000      	b.n	80015f0 <LSM6_InitEx+0xc0>
 80015ee:	226a      	movs	r2, #106	; 0x6a
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	715a      	strb	r2, [r3, #5]
			break;
 80015f4:	bf00      	nop
		default:
			return false;
	}
	// Zwróć stan OK, jeśli wszystko przebiegło pomyślnie i urządzenie jest wykryte
	return true;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LSM6_InitEx+0xcc>
			return false;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <testReg>:

// ********** FUNKCJA TESTUJĄCA ID URZĄDZENIA POD WSKAZANYM ADRESEM ********** //
uint8_t testReg(LSM6_t *LSM6, uint8_t address, uint8_t reg)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af04      	add	r7, sp, #16
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
 8001610:	4613      	mov	r3, r2
 8001612:	70bb      	strb	r3, [r7, #2]
	uint8_t Value;

	// Jeśli poprawnie odczytano rejestr z ID zwróć to ID
	if (HAL_OK == HAL_I2C_Mem_Read(LSM6->i2c, (address)<<1, reg, I2C_MEMADD_SIZE_8BIT, &Value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	b29b      	uxth	r3, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	78bb      	ldrb	r3, [r7, #2]
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	88db      	ldrh	r3, [r3, #6]
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f107 030f 	add.w	r3, r7, #15
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	f005 fb7f 	bl	8006d38 <HAL_I2C_Mem_Read>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <testReg+0x40>
	{
		return Value;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	e000      	b.n	8001646 <testReg+0x42>
	}

	// Jeśli odczytanie rejestru zakończyło się błędem, zwróć error
	else
	{
		return false;
 8001644:	2300      	movs	r3, #0
	}
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <timeoutOccurred>:

// TODO: Zmienić implementacje funkcji timeout i error
bool timeoutOccurred(LSM6_t *LSM6)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_timeout;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7a1b      	ldrb	r3, [r3, #8]
 800165a:	73fb      	strb	r3, [r7, #15]
	LSM6->did_timeout = false;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	721a      	strb	r2, [r3, #8]
	return tmp;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <errorOccured>:

bool errorOccured(LSM6_t *LSM6)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_error;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7a5b      	ldrb	r3, [r3, #9]
 800167c:	73fb      	strb	r3, [r7, #15]
	LSM6->did_error = false;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	725a      	strb	r2, [r3, #9]
	return tmp;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <enableDefault>:
	return LSM6->io_timeout;
}

// ********** FUNKCJA USTAWIAJACA DOMYŚLNE PARAMETRY MODUŁU (WYJAŚNIONE PONIŻEJ) ********** //
void enableDefault(LSM6_t *LSM6)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	// Jeśli typ urządzenia to DS33, wtedy ustaw podane rejestry
	if (LSM6->_device == device_DS33)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11d      	bne.n	80016de <enableDefault+0x4c>
	{
	// Dla akcelerometru
	  // Aktywuj pomiar na osiach X, Y, Z
	  writeReg(LSM6, CTRL9_XL, 0x38);	// 0x38 = 0011 1000
 80016a2:	2238      	movs	r2, #56	; 0x38
 80016a4:	2118      	movs	r1, #24
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f81d 	bl	80016e6 <writeReg>
	  // Tryb pomiaru z częstotliwością 52Hz, zakres +-2g, antyaliasing 400Hz
	  writeReg(LSM6, CTRL1_XL, 0x30);	// 0x30 = 0011 0000
 80016ac:	2230      	movs	r2, #48	; 0x30
 80016ae:	2110      	movs	r1, #16
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f818 	bl	80016e6 <writeReg>
	  // Ustaw pin INT1 w stan wysoki, kiedy pomiar z akcelerometru będzie gotowy
	  writeReg(LSM6, INT1_CTRL, 0x01);	// 0x01 = 0000 0001
 80016b6:	2201      	movs	r2, #1
 80016b8:	210d      	movs	r1, #13
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f813 	bl	80016e6 <writeReg>

	// Dla żyroskopu
	  // Aktywuj pomiar na osiach X, Y, Z
	  writeReg(LSM6, CTRL10_C, 0x38);	// 0x38 = 0011 1000
 80016c0:	2238      	movs	r2, #56	; 0x38
 80016c2:	2119      	movs	r1, #25
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f80e 	bl	80016e6 <writeReg>
	  // Tryb pomiaru z częstotliwością 52Hz, zakres +-245dps
	  writeReg(LSM6, CTRL2_G, 0x30);	// 0x30 = 0011 0000
 80016ca:	2230      	movs	r2, #48	; 0x30
 80016cc:	2111      	movs	r1, #17
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f809 	bl	80016e6 <writeReg>
	  // Ustaw pin INT2 w stan wysoki, kiedy pomiar z żyroskopu będzie gotowy
	  writeReg(LSM6, INT2_CTRL, 0x02);	// 0x02 = 0000 0010
 80016d4:	2202      	movs	r2, #2
 80016d6:	210e      	movs	r1, #14
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f804 	bl	80016e6 <writeReg>

	// Wspólne
	  // Brak
	}
	// Tu dodawać kolejne else if w przypadku wyprodukowania modułu z innym układem scalonym
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <writeReg>:

// ********** FUNKCJA ZAPISUJĄCA WARTOŚĆ 8-BIT DO PODANEGO REJESTRU ********** //
void writeReg(LSM6_t *LSM6, uint8_t reg, uint8_t value)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b088      	sub	sp, #32
 80016ea:	af04      	add	r7, sp, #16
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	// Prześlij 8-bitów po I2C
	status = HAL_I2C_Mem_Write(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	795b      	ldrb	r3, [r3, #5]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b299      	uxth	r1, r3
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2301      	movs	r3, #1
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	1cbb      	adds	r3, r7, #2
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	f005 fa14 	bl	8006b44 <HAL_I2C_Mem_Write>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]

	// Sprawdź status transmisji
	// TODO: Przeimplementować timeout i error
	if(status == HAL_BUSY)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d102      	bne.n	800172c <writeReg+0x46>
	{
		LSM6->did_timeout = true;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	721a      	strb	r2, [r3, #8]
	}
	if(status == HAL_ERROR)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <writeReg+0x52>
	{
		LSM6->did_error = true;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	725a      	strb	r2, [r3, #9]
	}
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <readReg>:

// ********** FUNKCJA CZYTAJĄCA WARTOŚĆ 8-BIT Z PODANEGO REJESTRU ********** //
uint8_t readReg(LSM6_t *LSM6, uint8_t reg)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af04      	add	r7, sp, #16
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
	uint8_t value, status;

	// Odczytaj 8-bitów po I2C
	status = HAL_I2C_Mem_Read(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	795b      	ldrb	r3, [r3, #5]
 8001754:	b29b      	uxth	r3, r3
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	b299      	uxth	r1, r3
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	88db      	ldrh	r3, [r3, #6]
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f107 030e 	add.w	r3, r7, #14
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	f005 fae2 	bl	8006d38 <HAL_I2C_Mem_Read>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]

	// Sprawdź status transmisji
	// TODO: Przeimplementować timeout i error
	if(status == HAL_BUSY)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d104      	bne.n	8001788 <readReg+0x48>
	{
		LSM6->did_timeout = true;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	721a      	strb	r2, [r3, #8]
		return 0;
 8001784:	2300      	movs	r3, #0
 8001786:	e008      	b.n	800179a <readReg+0x5a>
	}
	if(status == HAL_ERROR)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d104      	bne.n	8001798 <readReg+0x58>
	{
		LSM6->did_error = true;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	725a      	strb	r2, [r3, #9]
		return 0;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <readReg+0x5a>
	}

	return value;
 8001798:	7bbb      	ldrb	r3, [r7, #14]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <readAcc>:

// ********** FUNKCJA CZYTAJĄCA OSTATNI POMIAR AKCELEROMETRU ********** //
uint8_t readAcc(LSM6_t *LSM6)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	// Po kolei odczytaj wartości dla każdej z osi (jest to wartość 16bit, więc odczytaj
	// najpierw bajt młodszy, potem starszy).
	uint8_t xla = readReg(LSM6, OUTX_L_XL);
 80017aa:	2128      	movs	r1, #40	; 0x28
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffc7 	bl	8001740 <readReg>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
	uint8_t xha = readReg(LSM6, OUTX_H_XL);
 80017b6:	2129      	movs	r1, #41	; 0x29
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffc1 	bl	8001740 <readReg>
 80017be:	4603      	mov	r3, r0
 80017c0:	73bb      	strb	r3, [r7, #14]
	uint8_t yla = readReg(LSM6, OUTY_L_XL);
 80017c2:	212a      	movs	r1, #42	; 0x2a
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffbb 	bl	8001740 <readReg>
 80017ca:	4603      	mov	r3, r0
 80017cc:	737b      	strb	r3, [r7, #13]
	uint8_t yha = readReg(LSM6, OUTY_H_XL);
 80017ce:	212b      	movs	r1, #43	; 0x2b
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffb5 	bl	8001740 <readReg>
 80017d6:	4603      	mov	r3, r0
 80017d8:	733b      	strb	r3, [r7, #12]
	uint8_t zla = readReg(LSM6, OUTZ_L_XL);
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffaf 	bl	8001740 <readReg>
 80017e2:	4603      	mov	r3, r0
 80017e4:	72fb      	strb	r3, [r7, #11]
	uint8_t zha = readReg(LSM6, OUTZ_H_XL);
 80017e6:	212d      	movs	r1, #45	; 0x2d
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffa9 	bl	8001740 <readReg>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72bb      	strb	r3, [r7, #10]

	// Sprawdź status transmisji
	// TODO: Przeimplementować timeout i error
	if (timeoutOccurred(LSM6) == true)
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff2b 	bl	800164e <timeoutOccurred>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <readAcc+0x60>
	{
		return HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	e035      	b.n	800186e <readAcc+0xcc>
	}
	if (errorOccured(LSM6) == true)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff34 	bl	8001670 <errorOccured>
 8001808:	4603      	mov	r3, r0
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <readAcc+0x70>
	{
		return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e02d      	b.n	800186e <readAcc+0xcc>
	}

	// Jeśli nie było błędów złóż ze sobą bajt młodszy i starszy każdej z osi i przypisz
	// wartości do wektora akcelerometru
	LSM6->accelerometer.x = (int16_t)(xha << 8 | xla);
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe97 	bl	8000554 <__aeabi_i2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	LSM6->accelerometer.y = (int16_t)(yha << 8 | yla);
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b21a      	sxth	r2, r3
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe88 	bl	8000554 <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	LSM6->accelerometer.z = (int16_t)(zha << 8 | zla);
 800184e:	7abb      	ldrb	r3, [r7, #10]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21b      	sxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe79 	bl	8000554 <__aeabi_i2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	e9c1 2308 	strd	r2, r3, [r1, #32]
	// Zwróć stan OK
	return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <readGyro>:

// ********** FUNKCJA CZYTAJĄCA OSTATNI POMIAR ŻYROSKOPU ********** //
uint8_t readGyro(LSM6_t *LSM6)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	// Po kolei odczytaj wartości dla każdej z osi (jest to wartość 16bit, więc odczytaj
	// najpierw bajt młodszy, potem starszy).
	uint8_t xlg = readReg(LSM6, OUTX_L_G);
 800187e:	2122      	movs	r1, #34	; 0x22
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff5d 	bl	8001740 <readReg>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
	uint8_t xhg = readReg(LSM6, OUTX_H_G);
 800188a:	2123      	movs	r1, #35	; 0x23
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff57 	bl	8001740 <readReg>
 8001892:	4603      	mov	r3, r0
 8001894:	73bb      	strb	r3, [r7, #14]
	uint8_t ylg = readReg(LSM6, OUTY_L_G);
 8001896:	2124      	movs	r1, #36	; 0x24
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff51 	bl	8001740 <readReg>
 800189e:	4603      	mov	r3, r0
 80018a0:	737b      	strb	r3, [r7, #13]
	uint8_t yhg = readReg(LSM6, OUTY_H_G);
 80018a2:	2125      	movs	r1, #37	; 0x25
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff4b 	bl	8001740 <readReg>
 80018aa:	4603      	mov	r3, r0
 80018ac:	733b      	strb	r3, [r7, #12]
	uint8_t zlg = readReg(LSM6, OUTZ_L_G);
 80018ae:	2126      	movs	r1, #38	; 0x26
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff45 	bl	8001740 <readReg>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]
	uint8_t zhg = readReg(LSM6, OUTZ_H_G);
 80018ba:	2127      	movs	r1, #39	; 0x27
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff3f 	bl	8001740 <readReg>
 80018c2:	4603      	mov	r3, r0
 80018c4:	72bb      	strb	r3, [r7, #10]

	// Sprawdź status transmisji
	// TODO: Przeimplementować timeout i error
	if (timeoutOccurred(LSM6) == true)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fec1 	bl	800164e <timeoutOccurred>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <readGyro+0x60>
	{
		return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e035      	b.n	8001942 <readGyro+0xcc>
	}
	if (errorOccured(LSM6) == true)
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff feca 	bl	8001670 <errorOccured>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <readGyro+0x70>
	{
		return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e02d      	b.n	8001942 <readGyro+0xcc>
	}

	// Jeśli nie było błędów złóż ze sobą bajt młodszy i starszy każdej z osi i przypisz
	// wartości do wektora żyroskopu
	LSM6->gyroscope.x = (int16_t)(xhg << 8 | xlg);
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe2d 	bl	8000554 <__aeabi_i2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	LSM6->gyroscope.y = (int16_t)(yhg << 8 | ylg);
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	7b7b      	ldrb	r3, [r7, #13]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe1e 	bl	8000554 <__aeabi_i2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	LSM6->gyroscope.z = (int16_t)(zhg << 8 | zlg);
 8001922:	7abb      	ldrb	r3, [r7, #10]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe0f 	bl	8000554 <__aeabi_i2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	// Zwróć stan OK
	return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <LSM6_Read>:

// ********** FUNKCJA CZYTAJĄCA ŻYROSKOP I AKCELEROMETR ********** //
uint8_t LSM6_Read(LSM6_t *LSM6)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	uint8_t status;

	// Odczytaj najpierw dane z akcelerometru
	if ((status = readAcc(LSM6)) != HAL_OK)
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff25 	bl	80017a2 <readAcc>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <LSM6_Read+0x1c>
	{
		return status;	// Jeśli wystąpił błąd, zwróć error
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	e00a      	b.n	800197c <LSM6_Read+0x32>
	}

	// Odczytaj dane z żyroskopu
	if ((status = readGyro(LSM6)) != HAL_OK)
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff85 	bl	8001876 <readGyro>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <LSM6_Read+0x30>
	{
		return status; // Jeśli wystąpił błąd, zwróć error
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	e000      	b.n	800197c <LSM6_Read+0x32>
	}
	// Jeśli oba odczyty są poprawne, zwróć stan OK
	return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <PID_Init>:
 */
#include "PID.h"

// ********** FUNKCJA INICJALIZUJĄCA ********** //
void PID_Init(PID_t *pid, float* Input, float* Output, float* Setpoint, float Kp, float Ki, float Kd, int POn, int ControllerDirection)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	61f8      	str	r0, [r7, #28]
 800198c:	61b9      	str	r1, [r7, #24]
 800198e:	617a      	str	r2, [r7, #20]
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	ed87 0a03 	vstr	s0, [r7, #12]
 8001996:	edc7 0a02 	vstr	s1, [r7, #8]
 800199a:	ed87 1a01 	vstr	s2, [r7, #4]
	// Przypisanie wskaźników
    pid->myOutput = Output;		// wyjście
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	621a      	str	r2, [r3, #32]
    pid->myInput = Input;		// wejście
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	61da      	str	r2, [r3, #28]
    pid->mySetpoint = Setpoint;	// nastawa
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
    // Przypisanie zmiennych początkowych
    pid->inAuto = false;		// tryb manualny, TODO: zmienić na inAuto = true?
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    pid->SampleTime = SAMPLE_TIME_DEFAULT;	// domyślny okres próbkowania
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2264      	movs	r2, #100	; 0x64
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
    PID_SetOutputLimits(pid, 0, 255);		// domyślny zakres wyjścia 0-255
 80019be:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80019f0 <PID_Init+0x6c>
 80019c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80019f4 <PID_Init+0x70>
 80019c6:	69f8      	ldr	r0, [r7, #28]
 80019c8:	f000 f98e 	bl	8001ce8 <PID_SetOutputLimits>
    PID_SetControllerDirection(pid, ControllerDirection);	// przypisanie kierunku zliczania
 80019cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019ce:	69f8      	ldr	r0, [r7, #28]
 80019d0:	f000 fa3e 	bl	8001e50 <PID_SetControllerDirection>
    PID_SetTunings(pid, Kp, Ki, Kd, POn);	// przypisanie nastaw
 80019d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019d6:	ed97 1a01 	vldr	s2, [r7, #4]
 80019da:	edd7 0a02 	vldr	s1, [r7, #8]
 80019de:	ed97 0a03 	vldr	s0, [r7, #12]
 80019e2:	69f8      	ldr	r0, [r7, #28]
 80019e4:	f000 f808 	bl	80019f8 <PID_SetTunings>
}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	437f0000 	.word	0x437f0000
 80019f4:	00000000 	.word	0x00000000

080019f8 <PID_SetTunings>:

// ********** FUNKCJA DO ZMIANY NASTAW ********** //
void PID_SetTunings(PID_t *pid, float Kp, float Ki, float Kd, int POn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6178      	str	r0, [r7, #20]
 8001a00:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a04:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a08:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a0c:	6079      	str	r1, [r7, #4]
   if (Kp<0 || Ki<0 || Kd<0) return; // jeśli któraś z nastaw jest mniejsza od 0, przerwij funkcję
 8001a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d468      	bmi.n	8001aee <PID_SetTunings+0xf6>
 8001a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	d461      	bmi.n	8001aee <PID_SetTunings+0xf6>
 8001a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	d45a      	bmi.n	8001aee <PID_SetTunings+0xf6>

   // Przypsanie typu członu proporcjonalnego
   pid->pOn = POn;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	765a      	strb	r2, [r3, #25]
   pid->pOnE = (POn == P_ON_ERROR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

   // Przypisanie do zmiennych dla użytkownika odpowiednich nastaw
   pid->dispKp = Kp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	601a      	str	r2, [r3, #0]
   pid->dispKi = Ki;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
   pid->dispKd = Kd;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	609a      	str	r2, [r3, #8]

   // Skalowanie nastaw - przypisanie do zmiennych używanych wewnątrz biblioteki przez algorytm PID_Compute
   float SampleTimeInSec = ((float)pid->SampleTime)/1000; // konwersja okresu próbkowania na sekundy
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a72:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001afc <PID_SetTunings+0x104>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	edc7 7a07 	vstr	s15, [r7, #28]
   pid->kp = Kp;	// człon proporcjonalny bez zmian
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	60da      	str	r2, [r3, #12]
   pid->ki = Ki * SampleTimeInSec;	// człon całkujący przeskalowany razy czas próbkowania
 8001a84:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	edc3 7a04 	vstr	s15, [r3, #16]
   pid->kd = Kd / SampleTimeInSec;	// człon różniczkujący dzielony przez czas próbkowania
 8001a96:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	edc3 7a05 	vstr	s15, [r3, #20]

   // Jeśli kierunek zliczania jest odwrotny - nastawy otrzymują przeciwne znaki (ujemne)
  if(pid->controllerDirection == REVERSE)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d11f      	bne.n	8001af0 <PID_SetTunings+0xf8>
   {
	  pid->kp = (0 - pid->kp);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b00 <PID_SetTunings+0x108>
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	edc3 7a03 	vstr	s15, [r3, #12]
	  pid->ki = (0 - pid->ki);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001b00 <PID_SetTunings+0x108>
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	edc3 7a04 	vstr	s15, [r3, #16]
	  pid->kd = (0 - pid->kd);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ade:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b00 <PID_SetTunings+0x108>
 8001ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	edc3 7a05 	vstr	s15, [r3, #20]
 8001aec:	e000      	b.n	8001af0 <PID_SetTunings+0xf8>
   if (Kp<0 || Ki<0 || Kd<0) return; // jeśli któraś z nastaw jest mniejsza od 0, przerwij funkcję
 8001aee:	bf00      	nop
   }
}
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	447a0000 	.word	0x447a0000
 8001b00:	00000000 	.word	0x00000000

08001b04 <setKp>:

void setKp(PID_t *pid, float kp)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	ed87 0a00 	vstr	s0, [r7]
	if(kp < 0)
 8001b10:	edd7 7a00 	vldr	s15, [r7]
 8001b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d414      	bmi.n	8001b48 <setKp+0x44>
		return;

	pid->kp = kp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	60da      	str	r2, [r3, #12]
	pid->dispKp = kp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	601a      	str	r2, [r3, #0]

	if(pid->controllerDirection == REVERSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10b      	bne.n	8001b4a <setKp+0x46>
		pid->kp = (0 - pid->kp);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b38:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b54 <setKp+0x50>
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	edc3 7a03 	vstr	s15, [r3, #12]
 8001b46:	e000      	b.n	8001b4a <setKp+0x46>
		return;
 8001b48:	bf00      	nop
}
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	00000000 	.word	0x00000000

08001b58 <setKi>:

void setKi(PID_t *pid, float ki)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	ed87 0a00 	vstr	s0, [r7]
	if(ki < 0)
 8001b64:	edd7 7a00 	vldr	s15, [r7]
 8001b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d434      	bmi.n	8001bdc <setKi+0x84>
		return;

	pid->dispKi = ki;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	605a      	str	r2, [r3, #4]
	pid->ki = ki * ((float) pid->SampleTime / 1000.0);
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f7fe fcfd 	bl	8000578 <__aeabi_f2d>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	460d      	mov	r5, r1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8e:	ee17 0a90 	vmov	r0, s15
 8001b92:	f7fe fcf1 	bl	8000578 <__aeabi_f2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <setKi+0x8c>)
 8001b9c:	f7fe fe6e 	bl	800087c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fd3e 	bl	8000628 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7ff f830 	bl	8000c18 <__aeabi_d2f>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]

	if(pid->controllerDirection == REVERSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7e1b      	ldrb	r3, [r3, #24]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10b      	bne.n	8001bde <setKi+0x86>
		pid->ki = (0 - pid->ki);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bcc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001be8 <setKi+0x90>
 8001bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edc3 7a04 	vstr	s15, [r3, #16]
 8001bda:	e000      	b.n	8001bde <setKi+0x86>
		return;
 8001bdc:	bf00      	nop
}
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bdb0      	pop	{r4, r5, r7, pc}
 8001be4:	408f4000 	.word	0x408f4000
 8001be8:	00000000 	.word	0x00000000

08001bec <setKd>:

void setKd(PID_t *pid, float kd)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	ed87 0a00 	vstr	s0, [r7]
	if(kd < 0)
 8001bf8:	edd7 7a00 	vldr	s15, [r7]
 8001bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d434      	bmi.n	8001c70 <setKd+0x84>
		return;

	pid->dispKd = kd;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	609a      	str	r2, [r3, #8]
	pid->kd = kd / ((float) pid->SampleTime / 1000.0);
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f7fe fcb3 	bl	8000578 <__aeabi_f2d>
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fca7 	bl	8000578 <__aeabi_f2d>
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <setKd+0x8c>)
 8001c30:	f7fe fe24 	bl	800087c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fe1e 	bl	800087c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ffe6 	bl	8000c18 <__aeabi_d2f>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	615a      	str	r2, [r3, #20]

	if(pid->controllerDirection == REVERSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7e1b      	ldrb	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d10b      	bne.n	8001c72 <setKd+0x86>
		pid->kd = (0 - pid->kd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c60:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001c7c <setKd+0x90>
 8001c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	edc3 7a05 	vstr	s15, [r3, #20]
 8001c6e:	e000      	b.n	8001c72 <setKd+0x86>
		return;
 8001c70:	bf00      	nop
}
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdb0      	pop	{r4, r5, r7, pc}
 8001c78:	408f4000 	.word	0x408f4000
 8001c7c:	00000000 	.word	0x00000000

08001c80 <PID_SetSampleTime>:

// ********** FUNKCJA DO ZMIANY CZASU PRÓBKOWANIA ********** //
void PID_SetSampleTime(PID_t *pid, int NewSampleTime)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	// Jeśli czas próbkowania nie jest dodatni to przerwij funkcję
   if (NewSampleTime > 0)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dd25      	ble.n	8001cdc <PID_SetSampleTime+0x5c>
   {
	  // oblicz proporcję nowego i starego czasu próbkowania
      float ratio  = (float) NewSampleTime / (float) pid->SampleTime;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001caa:	edc7 7a03 	vstr	s15, [r7, #12]
      // Przemnóż nastawy ki i kd zgodnie z nową proporcją
      pid->ki *= ratio;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	edc3 7a04 	vstr	s15, [r3, #16]
      pid->kd /= ratio;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001cc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	edc3 7a05 	vstr	s15, [r3, #20]
      // Przypisz nowy czas próbkowania do obiektu
      pid->SampleTime = (unsigned long) NewSampleTime;
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
   }
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <PID_SetOutputLimits>:

// ********** FUNKCJA DO ZMIANY ZAKRESU SYGNAŁU WYJŚCIOWEGO (STERUJĄCEGO) ********** //
void PID_SetOutputLimits(PID_t *pid, float Min, float Max)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cf4:	edc7 0a01 	vstr	s1, [r7, #4]
   // Jeśli minimum jest większe od maximum to przerwij funkcję
   if(Min >= Max) return;
 8001cf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	da4d      	bge.n	8001da6 <PID_SetOutputLimits+0xbe>
   // Przypisz nowe wartości zakresu do obiektu
   pid->outMin = Min;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
   pid->outMax = Max;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38

   // Jeśli PID jest w trybie automatycznym (algorytm PID_Compute) to przeskaluj wyjście,
   // gdyby obecna wartość przekroczyła nowy zakres
   if(pid->inAuto)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d043      	beq.n	8001da8 <PID_SetOutputLimits+0xc0>
   {
	   // Przeskaluj bezpośrednio wyjście regulatora
	   if(*(pid->myOutput) > pid->outMax) *(pid->myOutput) = pid->outMax;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	ed93 7a00 	vldr	s14, [r3]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	dd05      	ble.n	8001d44 <PID_SetOutputLimits+0x5c>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e010      	b.n	8001d66 <PID_SetOutputLimits+0x7e>
	   else if(*(pid->myOutput) < pid->outMin) *(pid->myOutput) = pid->outMin;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	d504      	bpl.n	8001d66 <PID_SetOutputLimits+0x7e>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d64:	601a      	str	r2, [r3, #0]
	   // Przeskaluj bezpośrednio zliczoną sumę członu całkującego
	   if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	dd04      	ble.n	8001d86 <PID_SetOutputLimits+0x9e>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
 8001d84:	e010      	b.n	8001da8 <PID_SetOutputLimits+0xc0>
	   else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d505      	bpl.n	8001da8 <PID_SetOutputLimits+0xc0>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
 8001da4:	e000      	b.n	8001da8 <PID_SetOutputLimits+0xc0>
   if(Min >= Max) return;
 8001da6:	bf00      	nop
   }
}
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PID_SetMode>:

// ********** FUNKCJA DO ZMIANY TRYBU REGULATORA ********** //
void PID_SetMode(PID_t *pid, int Mode)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
	// Sprawdź czy nowy tryb to tryb automatyczny
    bool newAuto = (Mode == AUTOMATIC);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	73fb      	strb	r3, [r7, #15]
    // Jeśli tak i poprzedni tryb był manualny
    if(newAuto && !pid->inAuto)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d035      	beq.n	8001e3c <PID_SetMode+0x8a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d130      	bne.n	8001e3c <PID_SetMode+0x8a>
    {
		// Przypisz obecną wartość wyjścia jako sumę członu całkującego
		pid->outputSum = *pid->myOutput;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
		// Jako ostatnie wejście przypisz aktualne wejście
		pid->lastError = *pid->mySetpoint - *pid->myInput;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// Jeśli suma członu całkującego przekracza któryś z zakresów to ogranicz tę sumę
		if(pid->outputSum > pid->outMax) pid->outputSum = pid->outMax;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	dd04      	ble.n	8001e1e <PID_SetMode+0x6c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e1c:	e00e      	b.n	8001e3c <PID_SetMode+0x8a>
		else if(pid->outputSum < pid->outMin) pid->outputSum = pid->outMin;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d503      	bpl.n	8001e3c <PID_SetMode+0x8a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
		// Nie ma potrzeby ograniczać samego wyjścia, gdyż będzie ono wyliczone przy
		// następnym wywołaniu funkcji PID_Compute
    }
	// Przypisz nowy tryb do obiektu
	pid->inAuto = newAuto;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PID_SetControllerDirection>:

// ********** FUNKCJA DO ZMIANY KIERUNKU ZLICZANIA ********** //
void PID_SetControllerDirection(PID_t *pid, int Direction)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	// Jeśli regulator jest w trybie auto i nastąpiła zmiana kierunku zliczania
	if(pid->inAuto && (Direction != pid->controllerDirection))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <PID_SetControllerDirection+0x5c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7e1b      	ldrb	r3, [r3, #24]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d01d      	beq.n	8001eac <PID_SetControllerDirection+0x5c>
	{
		// Zmień znak nastaw regulatora na przeciwny
		pid->kp = (0 - pid->kp);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e76:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ec0 <PID_SetControllerDirection+0x70>
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->ki = (0 - pid->ki);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ec0 <PID_SetControllerDirection+0x70>
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->kd = (0 - pid->kd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e9e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001ec0 <PID_SetControllerDirection+0x70>
 8001ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	// Przypisz nowy kierunek zliczania do obiektu
	pid->controllerDirection = Direction;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	00000000 	.word	0x00000000

08001ec4 <PID_Compute>:

// ********** FUNKCJA GŁÓWNA OBLICZAJĄCA WYJŚCIE REGULATORA ********** //
bool PID_Compute(PID_t *pid)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	// Jeśli funkcja jest wywołana w trybie manualnym to przerwij ją
	if(!pid->inAuto)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <PID_Compute+0x16>
	{
		return false;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e09f      	b.n	800201a <PID_Compute+0x156>
	}

	// Stwórz zmienne tymczasowe
	float input = *pid->myInput;	// Przypisz wejście (w przypadku gdyby zmieniło się w trakcie działania algorytmu)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	613b      	str	r3, [r7, #16]
	float error = *pid->mySetpoint - input;		// Oblicz uchyb
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef2:	edc7 7a03 	vstr	s15, [r7, #12]
	float dError = (error - pid->lastError);	// Oblicz różnicę uchybu obecnej i ostatniej iteracji
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001efc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f04:	edc7 7a02 	vstr	s15, [r7, #8]
	// Oblicz sumę członu całkującego
	pid->outputSum+= (pid->ki * error);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Jeśli P jest w trybie P_ON_MEASUREMENT
	if(!pid->pOnE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10e      	bne.n	8001f4e <PID_Compute+0x8a>
	{
		// od sumy członu całkującego odejmij wzmocnienie członu proporcjonalnego
		pid->outputSum-= pid->kp * dError;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}
	// Ogranicz tak obliczoną sumę do zakresów wyjściowych
	if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	dd04      	ble.n	8001f6e <PID_Compute+0xaa>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f6c:	e00e      	b.n	8001f8c <PID_Compute+0xc8>
	else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	d503      	bpl.n	8001f8c <PID_Compute+0xc8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

	// Jeśli P jest w trybie P_ON_ERROR to oblicz wyjście członu proporcjonalnego
	float output;
	if(pid->pOnE) output = pid->kp * error;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <PID_Compute+0xe6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	edc7 7a05 	vstr	s15, [r7, #20]
 8001fa8:	e002      	b.n	8001fb0 <PID_Compute+0xec>
	// W przeciwnym wypadku wyjście = 0 gdyż człon proporcjonalny był uwzględniony w sumie członu całkującego
	else output = 0;
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

	// Dodaj do wyjścia regulatora sumę oraz człon różniczkujący
	output += pid->outputSum + pid->kd * dError;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edd3 6a05 	vldr	s13, [r3, #20]
 8001fbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd0:	edc7 7a05 	vstr	s15, [r7, #20]

	// Jeśli wyjście wyszło poza zakres to ogranicz je
	if(output > pid->outMax) output = pid->outMax;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	dd03      	ble.n	8001ff0 <PID_Compute+0x12c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e00c      	b.n	800200a <PID_Compute+0x146>
	else if(output < pid->outMin) output = pid->outMin;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ff6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	d502      	bpl.n	800200a <PID_Compute+0x146>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	617b      	str	r3, [r7, #20]
	// Przypisz obliczoną wartość wyjścia do zmiennej użytkownika
	*pid->myOutput = output;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]
	// Zapamiętaj wartość obecnego uchybu to kolejnej iteracji
	pid->lastError = error;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

	return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800202e:	463b      	mov	r3, r7
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <MX_ADC1_Init+0xa0>)
 800203e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002046:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002056:	2200      	movs	r2, #0
 8002058:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800206c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800207a:	2201      	movs	r2, #1
 800207c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002088:	2201      	movs	r2, #1
 800208a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800208e:	f003 f983 	bl	8005398 <HAL_ADC_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002098:	f002 f8b8 	bl	800420c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800209c:	2301      	movs	r3, #1
 800209e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020a4:	2307      	movs	r3, #7
 80020a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_ADC1_Init+0x9c>)
 80020ae:	f003 fabb 	bl	8005628 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80020b8:	f002 f8a8 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000020c 	.word	0x2000020c
 80020c8:	40012000 	.word	0x40012000

080020cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <HAL_ADC_MspInit+0xdc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d157      	bne.n	800219e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_ADC_MspInit+0xe0>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_ADC_MspInit+0xe0>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_ADC_MspInit+0xe0>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_ADC_MspInit+0xe0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_ADC_MspInit+0xe0>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_ADC_MspInit+0xe0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002126:	2302      	movs	r3, #2
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	481d      	ldr	r0, [pc, #116]	; (80021b0 <HAL_ADC_MspInit+0xe4>)
 800213a:	f004 fa09 	bl	8006550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_ADC_MspInit+0xec>)
 8002142:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002164:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002168:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 800217e:	2200      	movs	r2, #0
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002184:	f003 fde2 	bl	8005d4c <HAL_DMA_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800218e:	f002 f83d 	bl	800420c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_ADC_MspInit+0xe8>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40012000 	.word	0x40012000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	20000254 	.word	0x20000254
 80021b8:	40026410 	.word	0x40026410

080021bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <MX_DMA_Init+0x4c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <MX_DMA_Init+0x4c>)
 80021cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MX_DMA_Init+0x4c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_DMA_Init+0x4c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <MX_DMA_Init+0x4c>)
 80021e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_DMA_Init+0x4c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]

}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	// Rejestracja Callbacków dla biblioteki parsera
	Parser_Register_PIDPrintCallback(Parser_PID_PrintCallback);
 8002210:	485d      	ldr	r0, [pc, #372]	; (8002388 <MX_FREERTOS_Init+0x17c>)
 8002212:	f002 f801 	bl	8004218 <Parser_Register_PIDPrintCallback>
	Parser_Register_IMUPrintCallback(Parser_IMU_PrintCallback);
 8002216:	485d      	ldr	r0, [pc, #372]	; (800238c <MX_FREERTOS_Init+0x180>)
 8002218:	f002 f80e 	bl	8004238 <Parser_Register_IMUPrintCallback>
	Parser_Register_MotorsPrintCallback(Parser_MOT_PrintCallback);
 800221c:	485c      	ldr	r0, [pc, #368]	; (8002390 <MX_FREERTOS_Init+0x184>)
 800221e:	f002 f81b 	bl	8004258 <Parser_Register_MotorsPrintCallback>
	Parser_Register_OtherPrintCallback(Parser_OTH_PrintCallback);
 8002222:	485c      	ldr	r0, [pc, #368]	; (8002394 <MX_FREERTOS_Init+0x188>)
 8002224:	f002 f828 	bl	8004278 <Parser_Register_OtherPrintCallback>
	Parser_Register_ReceiveLineCallback(Parser_ReceiveLineCallback);
 8002228:	485b      	ldr	r0, [pc, #364]	; (8002398 <MX_FREERTOS_Init+0x18c>)
 800222a:	f002 f835 	bl	8004298 <Parser_Register_ReceiveLineCallback>
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 800222e:	485b      	ldr	r0, [pc, #364]	; (800239c <MX_FREERTOS_Init+0x190>)
 8002230:	f008 fcc9 	bl	800abc6 <osMutexNew>
 8002234:	4603      	mov	r3, r0
 8002236:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <MX_FREERTOS_Init+0x194>)
 8002238:	6013      	str	r3, [r2, #0]

  /* creation of MutexRingBufferRx */
  MutexRingBufferRxHandle = osMutexNew(&MutexRingBufferRx_attributes);
 800223a:	485a      	ldr	r0, [pc, #360]	; (80023a4 <MX_FREERTOS_Init+0x198>)
 800223c:	f008 fcc3 	bl	800abc6 <osMutexNew>
 8002240:	4603      	mov	r3, r0
 8002242:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <MX_FREERTOS_Init+0x19c>)
 8002244:	6013      	str	r3, [r2, #0]

  /* creation of MutexRingBufferTx */
  MutexRingBufferTxHandle = osMutexNew(&MutexRingBufferTx_attributes);
 8002246:	4859      	ldr	r0, [pc, #356]	; (80023ac <MX_FREERTOS_Init+0x1a0>)
 8002248:	f008 fcbd 	bl	800abc6 <osMutexNew>
 800224c:	4603      	mov	r3, r0
 800224e:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <MX_FREERTOS_Init+0x1a4>)
 8002250:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreLSM6_DataReady */
  SemaphoreLSM6_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreLSM6_DataReady_attributes);
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <MX_FREERTOS_Init+0x1a8>)
 8002254:	2101      	movs	r1, #1
 8002256:	2001      	movs	r0, #1
 8002258:	f008 fdc3 	bl	800ade2 <osSemaphoreNew>
 800225c:	4603      	mov	r3, r0
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <MX_FREERTOS_Init+0x1ac>)
 8002260:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreADC_DataReady */
  SemaphoreADC_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreADC_DataReady_attributes);
 8002262:	4a56      	ldr	r2, [pc, #344]	; (80023bc <MX_FREERTOS_Init+0x1b0>)
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f008 fdbb 	bl	800ade2 <osSemaphoreNew>
 800226c:	4603      	mov	r3, r0
 800226e:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <MX_FREERTOS_Init+0x1b4>)
 8002270:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreUART_TxComplete */
  SemaphoreUART_TxCompleteHandle = osSemaphoreNew(1, 1, &SemaphoreUART_TxComplete_attributes);
 8002272:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <MX_FREERTOS_Init+0x1b8>)
 8002274:	2101      	movs	r1, #1
 8002276:	2001      	movs	r0, #1
 8002278:	f008 fdb3 	bl	800ade2 <osSemaphoreNew>
 800227c:	4603      	mov	r3, r0
 800227e:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <MX_FREERTOS_Init+0x1bc>)
 8002280:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsPID */
  SemaphoreFlagsPIDHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsPID_attributes);
 8002282:	4a52      	ldr	r2, [pc, #328]	; (80023cc <MX_FREERTOS_Init+0x1c0>)
 8002284:	2101      	movs	r1, #1
 8002286:	2001      	movs	r0, #1
 8002288:	f008 fdab 	bl	800ade2 <osSemaphoreNew>
 800228c:	4603      	mov	r3, r0
 800228e:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <MX_FREERTOS_Init+0x1c4>)
 8002290:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsIMU */
  SemaphoreFlagsIMUHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsIMU_attributes);
 8002292:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <MX_FREERTOS_Init+0x1c8>)
 8002294:	2101      	movs	r1, #1
 8002296:	2001      	movs	r0, #1
 8002298:	f008 fda3 	bl	800ade2 <osSemaphoreNew>
 800229c:	4603      	mov	r3, r0
 800229e:	4a4e      	ldr	r2, [pc, #312]	; (80023d8 <MX_FREERTOS_Init+0x1cc>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsMOT */
  SemaphoreFlagsMOTHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsMOT_attributes);
 80022a2:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <MX_FREERTOS_Init+0x1d0>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	2001      	movs	r0, #1
 80022a8:	f008 fd9b 	bl	800ade2 <osSemaphoreNew>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <MX_FREERTOS_Init+0x1d4>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsOTH */
  SemaphoreFlagsOTHHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsOTH_attributes);
 80022b2:	4a4c      	ldr	r2, [pc, #304]	; (80023e4 <MX_FREERTOS_Init+0x1d8>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2001      	movs	r0, #1
 80022b8:	f008 fd93 	bl	800ade2 <osSemaphoreNew>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <MX_FREERTOS_Init+0x1dc>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  // Ten semafor stworzony jest bez generowania z CubeMx, ponieważ domyślnie posiada 0 tokenów po starcie programu
  // i zwiększa ich ilość wraz z każdą dostepną linią do odczytu z Rx ring buffera
  SemRxLineAvailableHandle = osSemaphoreNew(31, 0, &SemRxLineAvailable_attributes);
 80022c2:	4a4a      	ldr	r2, [pc, #296]	; (80023ec <MX_FREERTOS_Init+0x1e0>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	201f      	movs	r0, #31
 80022c8:	f008 fd8b 	bl	800ade2 <osSemaphoreNew>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <MX_FREERTOS_Init+0x1e4>)
 80022d0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueInputPID */
  QueueInputPIDHandle = osMessageQueueNew (8, sizeof(float), &QueueInputPID_attributes);
 80022d2:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <MX_FREERTOS_Init+0x1e8>)
 80022d4:	2104      	movs	r1, #4
 80022d6:	2008      	movs	r0, #8
 80022d8:	f008 fea2 	bl	800b020 <osMessageQueueNew>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <MX_FREERTOS_Init+0x1ec>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* creation of QueueOutputPID */
  QueueOutputPIDHandle = osMessageQueueNew (8, sizeof(int16_t), &QueueOutputPID_attributes);
 80022e2:	4a46      	ldr	r2, [pc, #280]	; (80023fc <MX_FREERTOS_Init+0x1f0>)
 80022e4:	2102      	movs	r1, #2
 80022e6:	2008      	movs	r0, #8
 80022e8:	f008 fe9a 	bl	800b020 <osMessageQueueNew>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a44      	ldr	r2, [pc, #272]	; (8002400 <MX_FREERTOS_Init+0x1f4>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartPID */
  QueueUartPIDHandle = osMessageQueueNew (1, sizeof(float), &QueueUartPID_attributes);
 80022f2:	4a44      	ldr	r2, [pc, #272]	; (8002404 <MX_FREERTOS_Init+0x1f8>)
 80022f4:	2104      	movs	r1, #4
 80022f6:	2001      	movs	r0, #1
 80022f8:	f008 fe92 	bl	800b020 <osMessageQueueNew>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a42      	ldr	r2, [pc, #264]	; (8002408 <MX_FREERTOS_Init+0x1fc>)
 8002300:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartIMU */
  QueueUartIMUHandle = osMessageQueueNew (1, sizeof(float), &QueueUartIMU_attributes);
 8002302:	4a42      	ldr	r2, [pc, #264]	; (800240c <MX_FREERTOS_Init+0x200>)
 8002304:	2104      	movs	r1, #4
 8002306:	2001      	movs	r0, #1
 8002308:	f008 fe8a 	bl	800b020 <osMessageQueueNew>
 800230c:	4603      	mov	r3, r0
 800230e:	4a40      	ldr	r2, [pc, #256]	; (8002410 <MX_FREERTOS_Init+0x204>)
 8002310:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartMOT */
  QueueUartMOTHandle = osMessageQueueNew (1, sizeof(uint16_t), &QueueUartMOT_attributes);
 8002312:	4a40      	ldr	r2, [pc, #256]	; (8002414 <MX_FREERTOS_Init+0x208>)
 8002314:	2102      	movs	r1, #2
 8002316:	2001      	movs	r0, #1
 8002318:	f008 fe82 	bl	800b020 <osMessageQueueNew>
 800231c:	4603      	mov	r3, r0
 800231e:	4a3e      	ldr	r2, [pc, #248]	; (8002418 <MX_FREERTOS_Init+0x20c>)
 8002320:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartOTH */
  QueueUartOTHHandle = osMessageQueueNew (1, sizeof(float), &QueueUartOTH_attributes);
 8002322:	4a3e      	ldr	r2, [pc, #248]	; (800241c <MX_FREERTOS_Init+0x210>)
 8002324:	2104      	movs	r1, #4
 8002326:	2001      	movs	r0, #1
 8002328:	f008 fe7a 	bl	800b020 <osMessageQueueNew>
 800232c:	4603      	mov	r3, r0
 800232e:	4a3c      	ldr	r2, [pc, #240]	; (8002420 <MX_FREERTOS_Init+0x214>)
 8002330:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTReadTask */
  UARTReadTaskHandle = osThreadNew(StartUARTReadTask, NULL, &UARTReadTask_attributes);
 8002332:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <MX_FREERTOS_Init+0x218>)
 8002334:	2100      	movs	r1, #0
 8002336:	483c      	ldr	r0, [pc, #240]	; (8002428 <MX_FREERTOS_Init+0x21c>)
 8002338:	f008 fa6a 	bl	800a810 <osThreadNew>
 800233c:	4603      	mov	r3, r0
 800233e:	4a3b      	ldr	r2, [pc, #236]	; (800242c <MX_FREERTOS_Init+0x220>)
 8002340:	6013      	str	r3, [r2, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(StartIMU_Task, NULL, &IMU_Task_attributes);
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <MX_FREERTOS_Init+0x224>)
 8002344:	2100      	movs	r1, #0
 8002346:	483b      	ldr	r0, [pc, #236]	; (8002434 <MX_FREERTOS_Init+0x228>)
 8002348:	f008 fa62 	bl	800a810 <osThreadNew>
 800234c:	4603      	mov	r3, r0
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <MX_FREERTOS_Init+0x22c>)
 8002350:	6013      	str	r3, [r2, #0]

  /* creation of PIDTask */
  PIDTaskHandle = osThreadNew(StartPIDTask, NULL, &PIDTask_attributes);
 8002352:	4a3a      	ldr	r2, [pc, #232]	; (800243c <MX_FREERTOS_Init+0x230>)
 8002354:	2100      	movs	r1, #0
 8002356:	483a      	ldr	r0, [pc, #232]	; (8002440 <MX_FREERTOS_Init+0x234>)
 8002358:	f008 fa5a 	bl	800a810 <osThreadNew>
 800235c:	4603      	mov	r3, r0
 800235e:	4a39      	ldr	r2, [pc, #228]	; (8002444 <MX_FREERTOS_Init+0x238>)
 8002360:	6013      	str	r3, [r2, #0]

  /* creation of StepperMotorsTa */
  StepperMotorsTaHandle = osThreadNew(StartStepperMotorsTask, NULL, &StepperMotorsTa_attributes);
 8002362:	4a39      	ldr	r2, [pc, #228]	; (8002448 <MX_FREERTOS_Init+0x23c>)
 8002364:	2100      	movs	r1, #0
 8002366:	4839      	ldr	r0, [pc, #228]	; (800244c <MX_FREERTOS_Init+0x240>)
 8002368:	f008 fa52 	bl	800a810 <osThreadNew>
 800236c:	4603      	mov	r3, r0
 800236e:	4a38      	ldr	r2, [pc, #224]	; (8002450 <MX_FREERTOS_Init+0x244>)
 8002370:	6013      	str	r3, [r2, #0]

  /* creation of OtherTask */
  OtherTaskHandle = osThreadNew(StartOtherTask, NULL, &OtherTask_attributes);
 8002372:	4a38      	ldr	r2, [pc, #224]	; (8002454 <MX_FREERTOS_Init+0x248>)
 8002374:	2100      	movs	r1, #0
 8002376:	4838      	ldr	r0, [pc, #224]	; (8002458 <MX_FREERTOS_Init+0x24c>)
 8002378:	f008 fa4a 	bl	800a810 <osThreadNew>
 800237c:	4603      	mov	r3, r0
 800237e:	4a37      	ldr	r2, [pc, #220]	; (800245c <MX_FREERTOS_Init+0x250>)
 8002380:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	08003a51 	.word	0x08003a51
 800238c:	08003aa9 	.word	0x08003aa9
 8002390:	08003b01 	.word	0x08003b01
 8002394:	08003b5d 	.word	0x08003b5d
 8002398:	080039d9 	.word	0x080039d9
 800239c:	08013a80 	.word	0x08013a80
 80023a0:	200004fc 	.word	0x200004fc
 80023a4:	08013a90 	.word	0x08013a90
 80023a8:	20000500 	.word	0x20000500
 80023ac:	08013aa0 	.word	0x08013aa0
 80023b0:	20000504 	.word	0x20000504
 80023b4:	08013ab0 	.word	0x08013ab0
 80023b8:	20000508 	.word	0x20000508
 80023bc:	08013ac0 	.word	0x08013ac0
 80023c0:	2000050c 	.word	0x2000050c
 80023c4:	08013ad0 	.word	0x08013ad0
 80023c8:	20000510 	.word	0x20000510
 80023cc:	08013ae0 	.word	0x08013ae0
 80023d0:	20000514 	.word	0x20000514
 80023d4:	08013af0 	.word	0x08013af0
 80023d8:	20000518 	.word	0x20000518
 80023dc:	08013b00 	.word	0x08013b00
 80023e0:	2000051c 	.word	0x2000051c
 80023e4:	08013b10 	.word	0x08013b10
 80023e8:	20000520 	.word	0x20000520
 80023ec:	0801392c 	.word	0x0801392c
 80023f0:	200004cc 	.word	0x200004cc
 80023f4:	080139f0 	.word	0x080139f0
 80023f8:	200004e4 	.word	0x200004e4
 80023fc:	08013a08 	.word	0x08013a08
 8002400:	200004e8 	.word	0x200004e8
 8002404:	08013a20 	.word	0x08013a20
 8002408:	200004ec 	.word	0x200004ec
 800240c:	08013a38 	.word	0x08013a38
 8002410:	200004f0 	.word	0x200004f0
 8002414:	08013a50 	.word	0x08013a50
 8002418:	200004f4 	.word	0x200004f4
 800241c:	08013a68 	.word	0x08013a68
 8002420:	200004f8 	.word	0x200004f8
 8002424:	0801393c 	.word	0x0801393c
 8002428:	08002461 	.word	0x08002461
 800242c:	200004d0 	.word	0x200004d0
 8002430:	08013960 	.word	0x08013960
 8002434:	08002579 	.word	0x08002579
 8002438:	200004d4 	.word	0x200004d4
 800243c:	08013984 	.word	0x08013984
 8002440:	08002af9 	.word	0x08002af9
 8002444:	200004d8 	.word	0x200004d8
 8002448:	080139a8 	.word	0x080139a8
 800244c:	08003101 	.word	0x08003101
 8002450:	200004dc 	.word	0x200004dc
 8002454:	080139cc 	.word	0x080139cc
 8002458:	0800367d 	.word	0x0800367d
 800245c:	200004e0 	.word	0x200004e0

08002460 <StartUARTReadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTReadTask */
void StartUARTReadTask(void *argument)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTReadTask */
	// Ustawienie nasłuchu przez DMA linii Rx UART'a. Przerwanie wystąpi po odczycie TMP_DMAUART_BUFFER_SIZE danych
	// lub po wykryciu przestoju (przerwy, ciszy) na linii Rx (linia Rx w stanie IDLE).
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Tmp_Rx_Buffer, TMP_DMAUART_BUFFER_SIZE);
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	493b      	ldr	r1, [pc, #236]	; (8002558 <StartUARTReadTask+0xf8>)
 800246c:	483b      	ldr	r0, [pc, #236]	; (800255c <StartUARTReadTask+0xfc>)
 800246e:	f006 fffd 	bl	800946c <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
  for(;;)
  {
	  // Sprawdzenie czy jakieś linie są dostępne do odczytu z Rx RingBuffera
	  if (osSemaphoreAcquire(SemRxLineAvailableHandle, 0) == osOK)
 8002472:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <StartUARTReadTask+0x100>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f008 fd3b 	bl	800aef4 <osSemaphoreAcquire>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10e      	bne.n	80024a2 <StartUARTReadTask+0x42>
	  {
		  // Mutex dla bezpieczeństwa w przypadku gdyby jakies dane były aktualnie zapisywane przez DMA do Rx RingBuffera
		  osMutexAcquire(MutexRingBufferRxHandle, osWaitForever);
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <StartUARTReadTask+0x104>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	4618      	mov	r0, r3
 800248e:	f008 fc20 	bl	800acd2 <osMutexAcquire>
	  	  Parser_ParseLine();	// Parsuj jedną linie
 8002492:	f002 f9b7 	bl	8004804 <Parser_ParseLine>
		  osMutexRelease(MutexRingBufferRxHandle);
 8002496:	4b33      	ldr	r3, [pc, #204]	; (8002564 <StartUARTReadTask+0x104>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f008 fc64 	bl	800ad68 <osMutexRelease>
 80024a0:	e7e7      	b.n	8002472 <StartUARTReadTask+0x12>
	  }
	  // Sprawdzenie czy jakieś dane są aktualnie zapisywane do Tx RingBuffera
	  else if (osMutexAcquire(MutexRingBufferTxHandle, 0) == osOK)
 80024a2:	4b31      	ldr	r3, [pc, #196]	; (8002568 <StartUARTReadTask+0x108>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f008 fc12 	bl	800acd2 <osMutexAcquire>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d14d      	bne.n	8002550 <StartUARTReadTask+0xf0>
	  {
		  // Sprawdzenie czy w ogóle jakieś dane znajdują się w Tx RingBufferze, które można wysłać (sprawdzenie czy nie RingBuffer nie jest pusty)
		  if(isReadable(&Tx_RingBuffer))
 80024b4:	482d      	ldr	r0, [pc, #180]	; (800256c <StartUARTReadTask+0x10c>)
 80024b6:	f002 fa1d 	bl	80048f4 <isReadable>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03e      	beq.n	800253e <StartUARTReadTask+0xde>
		  {
			  // Sprawdzenie czy poprzednia wysyłka jednej linii przez DMA się zakończyła
			  if(osSemaphoreAcquire(SemaphoreUART_TxCompleteHandle, 0) == osOK)
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <StartUARTReadTask+0x110>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f008 fd14 	bl	800aef4 <osSemaphoreAcquire>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d12c      	bne.n	800252c <StartUARTReadTask+0xcc>
			  {
				  uint8_t i = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
				  // Pobierz jedną linię (komendę) do wysyłki przez DMA i UART
				  while((i < TMP_DMAUART_BUFFER_SIZE) && (RB_Read(&Tx_RingBuffer, &Tmp_Tx_Buffer[i]) == RB_OK))
 80024d6:	e00f      	b.n	80024f8 <StartUARTReadTask+0x98>
				  {
					  if(Tmp_Tx_Buffer[i] == '\n')
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	4a26      	ldr	r2, [pc, #152]	; (8002574 <StartUARTReadTask+0x114>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d107      	bne.n	80024f2 <StartUARTReadTask+0x92>
					  {
						  i++;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	3301      	adds	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
						  Tmp_Tx_Buffer[i] = '\0';
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	4a22      	ldr	r2, [pc, #136]	; (8002574 <StartUARTReadTask+0x114>)
 80024ec:	2100      	movs	r1, #0
 80024ee:	54d1      	strb	r1, [r2, r3]
						  break;
 80024f0:	e00f      	b.n	8002512 <StartUARTReadTask+0xb2>
					  }
					  i++;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
				  while((i < TMP_DMAUART_BUFFER_SIZE) && (RB_Read(&Tx_RingBuffer, &Tmp_Tx_Buffer[i]) == RB_OK))
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b3f      	cmp	r3, #63	; 0x3f
 80024fc:	d809      	bhi.n	8002512 <StartUARTReadTask+0xb2>
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <StartUARTReadTask+0x114>)
 8002502:	4413      	add	r3, r2
 8002504:	4619      	mov	r1, r3
 8002506:	4819      	ldr	r0, [pc, #100]	; (800256c <StartUARTReadTask+0x10c>)
 8002508:	f002 fa08 	bl	800491c <RB_Read>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0e2      	beq.n	80024d8 <StartUARTReadTask+0x78>
				  }
				  // Wyślij przez DMA i UART jedną komendę
				  HAL_UART_Transmit_DMA(&huart2, Tmp_Tx_Buffer, i);
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	4916      	ldr	r1, [pc, #88]	; (8002574 <StartUARTReadTask+0x114>)
 800251a:	4810      	ldr	r0, [pc, #64]	; (800255c <StartUARTReadTask+0xfc>)
 800251c:	f006 ff28 	bl	8009370 <HAL_UART_Transmit_DMA>
				  // Zwolnij Mutex umożliwiając dalszy zapis komend do RingBuffera
				  osMutexRelease(MutexRingBufferTxHandle);
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <StartUARTReadTask+0x108>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f008 fc1f 	bl	800ad68 <osMutexRelease>
 800252a:	e7a2      	b.n	8002472 <StartUARTReadTask+0x12>
			  }
			  else
			  {
				  osMutexRelease(MutexRingBufferTxHandle); // Zwolnij Mutex umożliwiając dalszy zapis komend do RingBuffera
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <StartUARTReadTask+0x108>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f008 fc19 	bl	800ad68 <osMutexRelease>
				  osDelay(1); // Umożliw wykonanie się taskowi o niższym priorytecie w najbliższej milisekundzie
 8002536:	2001      	movs	r0, #1
 8002538:	f008 fb2a 	bl	800ab90 <osDelay>
 800253c:	e799      	b.n	8002472 <StartUARTReadTask+0x12>
			  }
		  }
		  else
		  {
			  osMutexRelease(MutexRingBufferTxHandle); // Zwolnij Mutex umożliwiając dalszy zapis komend do RingBuffera
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <StartUARTReadTask+0x108>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f008 fc10 	bl	800ad68 <osMutexRelease>
			  osDelay(1);	// Umożliw wykonanie się taskowi o niższym priorytecie w najbliższej milisekundzie
 8002548:	2001      	movs	r0, #1
 800254a:	f008 fb21 	bl	800ab90 <osDelay>
 800254e:	e790      	b.n	8002472 <StartUARTReadTask+0x12>
		  }
	  }

	  else osDelay(1);	// Umożliw wykonanie się taskowi o niższym priorytecie w najbliższej milisekundzie
 8002550:	2001      	movs	r0, #1
 8002552:	f008 fb1d 	bl	800ab90 <osDelay>
	  if (osSemaphoreAcquire(SemRxLineAvailableHandle, 0) == osOK)
 8002556:	e78c      	b.n	8002472 <StartUARTReadTask+0x12>
 8002558:	200002b4 	.word	0x200002b4
 800255c:	200006d0 	.word	0x200006d0
 8002560:	200004cc 	.word	0x200004cc
 8002564:	20000500 	.word	0x20000500
 8002568:	20000504 	.word	0x20000504
 800256c:	20000400 	.word	0x20000400
 8002570:	20000510 	.word	0x20000510
 8002574:	200002f4 	.word	0x200002f4

08002578 <StartIMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU_Task */
void StartIMU_Task(void *argument)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b0a2      	sub	sp, #136	; 0x88
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU_Task */
	LSM6_t LSM6DS33;	// Stworzenie obiektu IMU
	float accAngle, outputAngle;
	float prevAngle = 0.0;
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float gyroX_Offset = IMU_GYRX_DEFAULT_OFFSET;
 8002588:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800258c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	float accY_Offset = IMU_ACCY_DEFAULT_OFFSET;
 8002590:	4b9f      	ldr	r3, [pc, #636]	; (8002810 <StartIMU_Task+0x298>)
 8002592:	67fb      	str	r3, [r7, #124]	; 0x7c
	float accZ_Offset = IMU_ACCZ_DEFAULT_OFFSET;
 8002594:	4b9f      	ldr	r3, [pc, #636]	; (8002814 <StartIMU_Task+0x29c>)
 8002596:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t flags;	// zmienna pomocnicza dla flag przesyłanych do zadania przez parser
	char cmd[16];	// Buffer pomocniczy do wysyłania wiadomości (komend) przez UART

	uint8_t autocalibrationStatus = 0;	// Status autokalibracji (1 - start kalibracji, 0 - ustawiane po wykonaniu autokalibracji)
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	uint8_t autocalibrationCounter = 0;	// Zmienna zliczająca liczbe wykonanych iteracji autokalibracji
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	// Zmienne pomocnicze do zliczania średniej z pomiarów do autokalibracji
	float tmpGyroX = 0;
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	673b      	str	r3, [r7, #112]	; 0x70
	float tmpAccY = 0;
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	float tmpAccZ = 0;
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	66bb      	str	r3, [r7, #104]	; 0x68

	// Po podłączeniu zasilania moduł IMU wymaga krótkiego czasu, dla własnej autoinicjalizacji. Nie można wtedy ustawiać w nim żadnych rejestrów
	osDelay(150*KERNEL_TICKS_FOR_MS);
 80025b6:	2096      	movs	r0, #150	; 0x96
 80025b8:	f008 faea 	bl	800ab90 <osDelay>

	// Po odczekaniu zablokuj dostęp do I2C dla innych zadań
	osMutexAcquire(MutexI2CHandle, osWaitForever);
 80025bc:	4b96      	ldr	r3, [pc, #600]	; (8002818 <StartIMU_Task+0x2a0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	4618      	mov	r0, r3
 80025c6:	f008 fb84 	bl	800acd2 <osMutexAcquire>
	// Sprawdź czy jest połączenie z IMU i zainicjalizuj obiekt
	if (LSM6_InitEx(&hi2c1, &LSM6DS33, device_autoDetect, sa0_autoDetect) == false)
 80025ca:	f107 0120 	add.w	r1, r7, #32
 80025ce:	2302      	movs	r3, #2
 80025d0:	2201      	movs	r2, #1
 80025d2:	4892      	ldr	r0, [pc, #584]	; (800281c <StartIMU_Task+0x2a4>)
 80025d4:	f7fe ffac 	bl	8001530 <LSM6_InitEx>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <StartIMU_Task+0x6e>
	{
		// Jeśli nie ma połączenia wyślij komunikat przez UART
		sendMessageToUART("#Błąd połączenia z akcelerometrem!\r\n");
 80025de:	4890      	ldr	r0, [pc, #576]	; (8002820 <StartIMU_Task+0x2a8>)
 80025e0:	f001 fc00 	bl	8003de4 <sendMessageToUART>
 80025e4:	e004      	b.n	80025f0 <StartIMU_Task+0x78>
	}
	else
	{
		// Jeśli jest połączenie ustaw rejestry konfiguracyjne (opis rejestrów wewnątrz poniższej funkcji)
		enableDefault(&LSM6DS33);
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f851 	bl	8001692 <enableDefault>
	}
	// Odblokuj dostęp do I2C dla innych zadań
	osMutexRelease(MutexI2CHandle);
 80025f0:	4b89      	ldr	r3, [pc, #548]	; (8002818 <StartIMU_Task+0x2a0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f008 fbb7 	bl	800ad68 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
	  // Sprawdź czy przyszło przerwanie od IMU oznaczające, że pomiar jest gotowy do odczytu
	if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, 20*KERNEL_TICKS_FOR_MS))
 80025fa:	4b8a      	ldr	r3, [pc, #552]	; (8002824 <StartIMU_Task+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2114      	movs	r1, #20
 8002600:	4618      	mov	r0, r3
 8002602:	f008 fc77 	bl	800aef4 <osSemaphoreAcquire>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 811d 	bne.w	8002848 <StartIMU_Task+0x2d0>
	{
		// Zablokuj dostęp do I2C dla innych zadań
		osMutexAcquire(MutexI2CHandle, osWaitForever);
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <StartIMU_Task+0x2a0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f04f 31ff 	mov.w	r1, #4294967295
 8002616:	4618      	mov	r0, r3
 8002618:	f008 fb5b 	bl	800acd2 <osMutexAcquire>
		// Odczytaj pomiar z żyrokopu i akcelerometru
		if(HAL_OK == LSM6_Read(&LSM6DS33))
 800261c:	f107 0320 	add.w	r3, r7, #32
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f992 	bl	800194a <LSM6_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8105 	bne.w	8002838 <StartIMU_Task+0x2c0>
		{
			// Jeśli odczyt pomiaru jest poprawny
			// Odblokuj I2C dla innych zadań
			osMutexRelease(MutexI2CHandle);
 800262e:	4b7a      	ldr	r3, [pc, #488]	; (8002818 <StartIMU_Task+0x2a0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f008 fb98 	bl	800ad68 <osMutexRelease>
			// Oblicz wartość kąta na podstawie akcelerometru
			accAngle = calculateAccAngle(LSM6DS33.accelerometer.y, LSM6DS33.accelerometer.z, accY_Offset, accZ_Offset);
 8002638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe faea 	bl	8000c18 <__aeabi_d2f>
 8002644:	4604      	mov	r4, r0
 8002646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe fae3 	bl	8000c18 <__aeabi_d2f>
 8002652:	4603      	mov	r3, r0
 8002654:	edd7 1a1e 	vldr	s3, [r7, #120]	; 0x78
 8002658:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 800265c:	ee00 3a90 	vmov	s1, r3
 8002660:	ee00 4a10 	vmov	s0, r4
 8002664:	f001 fb48 	bl	8003cf8 <calculateAccAngle>
 8002668:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			// Oblicz wartość kąta wykorzystując filtr komplementarny (wewnątrz zaszyto też pomiar kąta na podstawie żyroskopu)
			outputAngle = complementaryFilter(LSM6DS33.gyroscope.x, accAngle, prevAngle, gyroX_Offset);
 800266c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe fad0 	bl	8000c18 <__aeabi_d2f>
 8002678:	4603      	mov	r3, r0
 800267a:	edd7 1a20 	vldr	s3, [r7, #128]	; 0x80
 800267e:	ed97 1a21 	vldr	s2, [r7, #132]	; 0x84
 8002682:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8002686:	ee00 3a10 	vmov	s0, r3
 800268a:	f001 fac1 	bl	8003c10 <complementaryFilter>
 800268e:	eef0 7a40 	vmov.f32	s15, s0
 8002692:	edc7 7a07 	vstr	s15, [r7, #28]
			// Wrzuć obliczony kąt wychylenia do kolejki, z której korzysta regulator PID
			osMessageQueuePut(QueueInputPIDHandle, &outputAngle, 0, 0);
 8002696:	4b64      	ldr	r3, [pc, #400]	; (8002828 <StartIMU_Task+0x2b0>)
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	f107 011c 	add.w	r1, r7, #28
 800269e:	2300      	movs	r3, #0
 80026a0:	2200      	movs	r2, #0
 80026a2:	f008 fd31 	bl	800b108 <osMessageQueuePut>

			// Wyślij przez UART wartość wykonanego pomiaru kąta)
			sprintf(cmd, "ANG=%.1f\r\n", outputAngle);
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff65 	bl	8000578 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	f107 000c 	add.w	r0, r7, #12
 80026b6:	495d      	ldr	r1, [pc, #372]	; (800282c <StartIMU_Task+0x2b4>)
 80026b8:	f00d f80a 	bl	800f6d0 <siprintf>
			sendMessageToUART(cmd);
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 fb8f 	bl	8003de4 <sendMessageToUART>
			// Zapisz do pomocniczej zmienej wartość kąta, do obliczeń w kolejnej iteracji (jest to potrzebne do całkowania wartości żyroskopu)
			prevAngle = outputAngle;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			// Sprawdzenie czy nie otrzymano komendy autokalibracji lub czy kalibracja jest w trakcie wykonywania
			// Przed wykonaniem autokalibracji należy ustawić robota w pozycji idealnego balansu
			// Autokalibracja wyskaluje offsety tak, aby wartość kąta w tej pozycji wynosiłą 0 stopni
			if(autocalibrationStatus)
 80026cc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80b9 	beq.w	8002848 <StartIMU_Task+0x2d0>
			{
				// Dodawaj w każdej iteracji wartości dla wykorzystywanych osi
				tmpGyroX += (LSM6DS33.gyroscope.x*IMU_GYRO_SENSITIVITY);
 80026d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80026d8:	f7fd ff4e 	bl	8000578 <__aeabi_f2d>
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
 80026e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026e4:	a346      	add	r3, pc, #280	; (adr r3, 8002800 <StartIMU_Task+0x288>)
 80026e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ea:	f7fd ff9d 	bl	8000628 <__aeabi_dmul>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4620      	mov	r0, r4
 80026f4:	4629      	mov	r1, r5
 80026f6:	f7fd fde1 	bl	80002bc <__adddf3>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe fa89 	bl	8000c18 <__aeabi_d2f>
 8002706:	4603      	mov	r3, r0
 8002708:	673b      	str	r3, [r7, #112]	; 0x70
				tmpAccY  += (LSM6DS33.accelerometer.y*IMU_ACC_SENSITIVITY);
 800270a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800270c:	f7fd ff34 	bl	8000578 <__aeabi_f2d>
 8002710:	4604      	mov	r4, r0
 8002712:	460d      	mov	r5, r1
 8002714:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002718:	a33b      	add	r3, pc, #236	; (adr r3, 8002808 <StartIMU_Task+0x290>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd ff83 	bl	8000628 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd fdc7 	bl	80002bc <__adddf3>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa6f 	bl	8000c18 <__aeabi_d2f>
 800273a:	4603      	mov	r3, r0
 800273c:	66fb      	str	r3, [r7, #108]	; 0x6c
				tmpAccZ  += (LSM6DS33.accelerometer.z*IMU_ACC_SENSITIVITY);
 800273e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002740:	f7fd ff1a 	bl	8000578 <__aeabi_f2d>
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
 8002748:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800274c:	a32e      	add	r3, pc, #184	; (adr r3, 8002808 <StartIMU_Task+0x290>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd ff69 	bl	8000628 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f7fd fdad 	bl	80002bc <__adddf3>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe fa55 	bl	8000c18 <__aeabi_d2f>
 800276e:	4603      	mov	r3, r0
 8002770:	66bb      	str	r3, [r7, #104]	; 0x68
				autocalibrationCounter++;
 8002772:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002776:	3301      	adds	r3, #1
 8002778:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
				// Sprawdzenie czy wykonano zadaną liczbę iteracji (zebrano zadaną liczbę próbek)
				if(autocalibrationCounter == IMU_AUTOCALIB_ITERATONS)
 800277c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d161      	bne.n	8002848 <StartIMU_Task+0x2d0>
				{
					// Wylicz średnią z wszystkich próbek i zaktualizuj offsety
					gyroX_Offset = -(tmpGyroX / IMU_AUTOCALIB_ITERATONS);
 8002784:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002788:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002830 <StartIMU_Task+0x2b8>
 800278c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002790:	eef1 7a67 	vneg.f32	s15, s15
 8002794:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					accY_Offset  = -(tmpAccY  / IMU_AUTOCALIB_ITERATONS);
 8002798:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800279c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002830 <StartIMU_Task+0x2b8>
 80027a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a4:	eef1 7a67 	vneg.f32	s15, s15
 80027a8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					accZ_Offset  = -(tmpAccZ  / IMU_AUTOCALIB_ITERATONS) + 1; // Dodano 1, bo jest to oś na którą działa siła grawitacji (1g)
 80027ac:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027b0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002830 <StartIMU_Task+0x2b8>
 80027b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					// Wyzerowanie wszystkich zmiennych w przypadku kolenej autokalibracji
					autocalibrationCounter = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					autocalibrationStatus = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					tmpGyroX = 0;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	673b      	str	r3, [r7, #112]	; 0x70
					tmpAccY = 0;
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	66fb      	str	r3, [r7, #108]	; 0x6c
					tmpAccZ = 0;
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	66bb      	str	r3, [r7, #104]	; 0x68
					// Wyślij komendę, że autokalibracja się zakończyła
					sprintf(cmd, "CB=1\n");
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	4913      	ldr	r1, [pc, #76]	; (8002834 <StartIMU_Task+0x2bc>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00c ff71 	bl	800f6d0 <siprintf>
					sendMessageToUART(cmd);
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 faf6 	bl	8003de4 <sendMessageToUART>
 80027f8:	e026      	b.n	8002848 <StartIMU_Task+0x2d0>
 80027fa:	bf00      	nop
 80027fc:	f3af 8000 	nop.w
 8002800:	1eb851ec 	.word	0x1eb851ec
 8002804:	3f81eb85 	.word	0x3f81eb85
 8002808:	0a5accd5 	.word	0x0a5accd5
 800280c:	3f0ffb48 	.word	0x3f0ffb48
 8002810:	3d4ccccd 	.word	0x3d4ccccd
 8002814:	bca3d70a 	.word	0xbca3d70a
 8002818:	200004fc 	.word	0x200004fc
 800281c:	20000524 	.word	0x20000524
 8002820:	080136c4 	.word	0x080136c4
 8002824:	20000508 	.word	0x20000508
 8002828:	200004e4 	.word	0x200004e4
 800282c:	080136f0 	.word	0x080136f0
 8002830:	42c80000 	.word	0x42c80000
 8002834:	080136fc 	.word	0x080136fc
		}
		else
		{
			// Jeśli wystąpił błąd podczas odczytu z IMU to wyślij komunikat przez UART
			// i odblokuj I2C dla innych zadań
			osMutexRelease(MutexI2CHandle);
 8002838:	4ba3      	ldr	r3, [pc, #652]	; (8002ac8 <StartIMU_Task+0x550>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f008 fa93 	bl	800ad68 <osMutexRelease>
			sendMessageToUART("#Błąd odczytu akcelerometru!\r\n");
 8002842:	48a2      	ldr	r0, [pc, #648]	; (8002acc <StartIMU_Task+0x554>)
 8002844:	f001 face 	bl	8003de4 <sendMessageToUART>
		}
	}

	// Sprawdzenie czy otrzymano jakieś flagi (zapytania lub rozkazy zapisu do zmiennej)
	if(osThreadFlagsWait(IMU_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < IMU_FLAGS)
 8002848:	2200      	movs	r2, #0
 800284a:	2102      	movs	r1, #2
 800284c:	20ff      	movs	r0, #255	; 0xff
 800284e:	f008 f91e 	bl	800aa8e <osThreadFlagsWait>
 8002852:	4603      	mov	r3, r0
 8002854:	2bfe      	cmp	r3, #254	; 0xfe
 8002856:	f63f aed0 	bhi.w	80025fa <StartIMU_Task+0x82>
	{
		float tmp;
		uint8_t isSetFlag;
		// Pobranie otrzymanych flag
		flags = osThreadFlagsGet();
 800285a:	f008 f8f7 	bl	800aa4c <osThreadFlagsGet>
 800285e:	4603      	mov	r3, r0
 8002860:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

		// Sprawdzenie czy otrzymano flagę zapisu do danej zmiennej
		if((isSetFlag = CHECK_BIT(flags, PARSER_IMU_SET_FLAG)))
 8002864:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800287a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <StartIMU_Task+0x32c>
		{
			// Jeśli tak to pobierz wartość z kolejki
			osMessageQueueGet(QueueUartIMUHandle, &tmp, 0, 0);
 8002882:	4b93      	ldr	r3, [pc, #588]	; (8002ad0 <StartIMU_Task+0x558>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f107 0108 	add.w	r1, r7, #8
 800288a:	2300      	movs	r3, #0
 800288c:	2200      	movs	r2, #0
 800288e:	f008 fc9b 	bl	800b1c8 <osMessageQueueGet>
			// Wyczyść flagę zapisu globalnie i w lokalnej zmiennej
			osThreadFlagsClear(PARSER_IMU_SET_FLAG);
 8002892:	2080      	movs	r0, #128	; 0x80
 8002894:	f008 f89c 	bl	800a9d0 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_IMU_SET_FLAG);
 8002898:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800289c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		}

		// Sprawdź której zmiennej dotyczy flaga
		// Jeśli jest to komenda zapisu to przypisz wartość z kolejki do danej zmiennej
		// Jeśli jest to komenda odczytu to wyślij przez UART wartość tej zmiennej
		switch(flags)
 80028a4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80028a8:	3b01      	subs	r3, #1
 80028aa:	2b1f      	cmp	r3, #31
 80028ac:	f200 80fc 	bhi.w	8002aa8 <StartIMU_Task+0x530>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <StartIMU_Task+0x340>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	08002939 	.word	0x08002939
 80028bc:	0800296b 	.word	0x0800296b
 80028c0:	08002aa9 	.word	0x08002aa9
 80028c4:	08002999 	.word	0x08002999
 80028c8:	08002aa9 	.word	0x08002aa9
 80028cc:	08002aa9 	.word	0x08002aa9
 80028d0:	08002aa9 	.word	0x08002aa9
 80028d4:	08002a7f 	.word	0x08002a7f
 80028d8:	08002aa9 	.word	0x08002aa9
 80028dc:	08002aa9 	.word	0x08002aa9
 80028e0:	08002aa9 	.word	0x08002aa9
 80028e4:	08002aa9 	.word	0x08002aa9
 80028e8:	08002aa9 	.word	0x08002aa9
 80028ec:	08002aa9 	.word	0x08002aa9
 80028f0:	08002aa9 	.word	0x08002aa9
 80028f4:	080029fb 	.word	0x080029fb
 80028f8:	08002aa9 	.word	0x08002aa9
 80028fc:	08002aa9 	.word	0x08002aa9
 8002900:	08002aa9 	.word	0x08002aa9
 8002904:	08002aa9 	.word	0x08002aa9
 8002908:	08002aa9 	.word	0x08002aa9
 800290c:	08002aa9 	.word	0x08002aa9
 8002910:	08002aa9 	.word	0x08002aa9
 8002914:	08002aa9 	.word	0x08002aa9
 8002918:	08002aa9 	.word	0x08002aa9
 800291c:	08002aa9 	.word	0x08002aa9
 8002920:	08002aa9 	.word	0x08002aa9
 8002924:	08002aa9 	.word	0x08002aa9
 8002928:	08002aa9 	.word	0x08002aa9
 800292c:	08002aa9 	.word	0x08002aa9
 8002930:	08002aa9 	.word	0x08002aa9
 8002934:	080029c7 	.word	0x080029c7
		{
		case PARSER_IMU_GX_OFFSET_FLAG:
			if (isSetFlag) gyroX_Offset = tmp;
 8002938:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <StartIMU_Task+0x3d0>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			else { sprintf(cmd, "GX=%.3f\r\n", gyroX_Offset); sendMessageToUART(cmd); }
			break;
 8002946:	e0b4      	b.n	8002ab2 <StartIMU_Task+0x53a>
			else { sprintf(cmd, "GX=%.3f\r\n", gyroX_Offset); sendMessageToUART(cmd); }
 8002948:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800294c:	f7fd fe14 	bl	8000578 <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	f107 000c 	add.w	r0, r7, #12
 8002958:	495e      	ldr	r1, [pc, #376]	; (8002ad4 <StartIMU_Task+0x55c>)
 800295a:	f00c feb9 	bl	800f6d0 <siprintf>
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fa3e 	bl	8003de4 <sendMessageToUART>
			break;
 8002968:	e0a3      	b.n	8002ab2 <StartIMU_Task+0x53a>
		case PARSER_IMU_AY_OFFSET_FLAG:
			if (isSetFlag) accY_Offset = tmp;
 800296a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <StartIMU_Task+0x400>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	67fb      	str	r3, [r7, #124]	; 0x7c
			else { sprintf(cmd, "AY=%.3f\r\n", accY_Offset); sendMessageToUART(cmd); }
			break;
 8002976:	e09c      	b.n	8002ab2 <StartIMU_Task+0x53a>
			else { sprintf(cmd, "AY=%.3f\r\n", accY_Offset); sendMessageToUART(cmd); }
 8002978:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800297a:	f7fd fdfd 	bl	8000578 <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	f107 000c 	add.w	r0, r7, #12
 8002986:	4954      	ldr	r1, [pc, #336]	; (8002ad8 <StartIMU_Task+0x560>)
 8002988:	f00c fea2 	bl	800f6d0 <siprintf>
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fa27 	bl	8003de4 <sendMessageToUART>
			break;
 8002996:	e08c      	b.n	8002ab2 <StartIMU_Task+0x53a>
		case PARSER_IMU_AZ_OFFSET_FLAG:
			if (isSetFlag) accZ_Offset = tmp;
 8002998:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <StartIMU_Task+0x42e>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	67bb      	str	r3, [r7, #120]	; 0x78
			else { sprintf(cmd, "AZ=%.3f\r\n", accZ_Offset); sendMessageToUART(cmd); }
			break;
 80029a4:	e085      	b.n	8002ab2 <StartIMU_Task+0x53a>
			else { sprintf(cmd, "AZ=%.3f\r\n", accZ_Offset); sendMessageToUART(cmd); }
 80029a6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029a8:	f7fd fde6 	bl	8000578 <__aeabi_f2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	f107 000c 	add.w	r0, r7, #12
 80029b4:	4949      	ldr	r1, [pc, #292]	; (8002adc <StartIMU_Task+0x564>)
 80029b6:	f00c fe8b 	bl	800f6d0 <siprintf>
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 fa10 	bl	8003de4 <sendMessageToUART>
			break;
 80029c4:	e075      	b.n	8002ab2 <StartIMU_Task+0x53a>
		case PARSER_IMU_COMP_FILTER_FLAG:
			if (isSetFlag) COMP_FILTER_GAIN = tmp;
 80029c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <StartIMU_Task+0x45e>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4a43      	ldr	r2, [pc, #268]	; (8002ae0 <StartIMU_Task+0x568>)
 80029d2:	6013      	str	r3, [r2, #0]
			else { sprintf(cmd, "AZ=%.2f\r\n", COMP_FILTER_GAIN); sendMessageToUART(cmd); }
			break;
 80029d4:	e06d      	b.n	8002ab2 <StartIMU_Task+0x53a>
			else { sprintf(cmd, "AZ=%.2f\r\n", COMP_FILTER_GAIN); sendMessageToUART(cmd); }
 80029d6:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <StartIMU_Task+0x568>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdcc 	bl	8000578 <__aeabi_f2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	f107 000c 	add.w	r0, r7, #12
 80029e8:	493e      	ldr	r1, [pc, #248]	; (8002ae4 <StartIMU_Task+0x56c>)
 80029ea:	f00c fe71 	bl	800f6d0 <siprintf>
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f9f6 	bl	8003de4 <sendMessageToUART>
			break;
 80029f8:	e05b      	b.n	8002ab2 <StartIMU_Task+0x53a>
		case PARSER_IMU_CALIBRATION_FLAG:
			// Jeśli otrzymano komendę CB=1 zacznij autokalibrację
			if (isSetFlag && ((uint8_t) tmp == 1))
 80029fa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <StartIMU_Task+0x4be>
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0a:	edc7 7a00 	vstr	s15, [r7]
 8002a0e:	783b      	ldrb	r3, [r7, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10f      	bne.n	8002a36 <StartIMU_Task+0x4be>
			{
				// Sprawdź jeszcze czy robot znajduje się w stanie STOPPED
				if(DRV8834_getRobotState() == STOPPED) autocalibrationStatus = 1;
 8002a16:	f7fe fb39 	bl	800108c <DRV8834_getRobotState>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <StartIMU_Task+0x4b0>
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8002a26:	e029      	b.n	8002a7c <StartIMU_Task+0x504>
				else
				{
					// Jeśli nie jest w stanie STOPPED zwróć błąd
					sendMessageToUART("CB=0\r\n");
 8002a28:	482f      	ldr	r0, [pc, #188]	; (8002ae8 <StartIMU_Task+0x570>)
 8002a2a:	f001 f9db 	bl	8003de4 <sendMessageToUART>
					sendMessageToUART("#Wylacz silniki!\r\n");
 8002a2e:	482f      	ldr	r0, [pc, #188]	; (8002aec <StartIMU_Task+0x574>)
 8002a30:	f001 f9d8 	bl	8003de4 <sendMessageToUART>
				if(DRV8834_getRobotState() == STOPPED) autocalibrationStatus = 1;
 8002a34:	e022      	b.n	8002a7c <StartIMU_Task+0x504>
				}
			}
			// Jeśli otrzymano komendę CB=0 przerwij autokalibrację i wyzeruj wykorzystywane zmienne
			else if(isSetFlag && ((uint8_t) tmp == 0)) autocalibrationStatus = autocalibrationCounter = tmpAccY = tmpAccZ = tmpGyroX = 0;
 8002a36:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d036      	beq.n	8002aac <StartIMU_Task+0x534>
 8002a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a46:	edc7 7a00 	vstr	s15, [r7]
 8002a4a:	783b      	ldrb	r3, [r7, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d12c      	bne.n	8002aac <StartIMU_Task+0x534>
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	673b      	str	r3, [r7, #112]	; 0x70
 8002a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a60:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a68:	edc7 7a00 	vstr	s15, [r7]
 8002a6c:	783b      	ldrb	r3, [r7, #0]
 8002a6e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8002a72:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002a76:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8002a7a:	e017      	b.n	8002aac <StartIMU_Task+0x534>
 8002a7c:	e016      	b.n	8002aac <StartIMU_Task+0x534>
		case PARSER_IMU_ANGLE_FLAG: // Zmienna kąta wychylenia jest wysyłana cyklicznie, ale można ją odczytać też na żądanie (read only)
			if(!isSetFlag) { sprintf(cmd, "ANG=%.2f\r\n", outputAngle); sendMessageToUART(cmd); }
 8002a7e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <StartIMU_Task+0x538>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd75 	bl	8000578 <__aeabi_f2d>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	f107 000c 	add.w	r0, r7, #12
 8002a96:	4916      	ldr	r1, [pc, #88]	; (8002af0 <StartIMU_Task+0x578>)
 8002a98:	f00c fe1a 	bl	800f6d0 <siprintf>
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f99f 	bl	8003de4 <sendMessageToUART>
			break;
 8002aa6:	e003      	b.n	8002ab0 <StartIMU_Task+0x538>
		default: break;
 8002aa8:	bf00      	nop
 8002aaa:	e002      	b.n	8002ab2 <StartIMU_Task+0x53a>
			break;
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <StartIMU_Task+0x53a>
			break;
 8002ab0:	bf00      	nop
		}
		// Wyczyść flagę i odblokuj mutex umożliwiając ustawienie kolejnej flagi przez parser
		osThreadFlagsClear(flags);
 8002ab2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f007 ff8a 	bl	800a9d0 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsIMUHandle);
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <StartIMU_Task+0x57c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f008 fa69 	bl	800af98 <osSemaphoreRelease>
	if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, 20*KERNEL_TICKS_FOR_MS))
 8002ac6:	e598      	b.n	80025fa <StartIMU_Task+0x82>
 8002ac8:	200004fc 	.word	0x200004fc
 8002acc:	08013704 	.word	0x08013704
 8002ad0:	200004f0 	.word	0x200004f0
 8002ad4:	08013728 	.word	0x08013728
 8002ad8:	08013734 	.word	0x08013734
 8002adc:	08013740 	.word	0x08013740
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	0801374c 	.word	0x0801374c
 8002ae8:	08013758 	.word	0x08013758
 8002aec:	08013760 	.word	0x08013760
 8002af0:	08013774 	.word	0x08013774
 8002af4:	20000518 	.word	0x20000518

08002af8 <StartPIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void *argument)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	ed2d 8b02 	vpush	{d8}
 8002afe:	b0b1      	sub	sp, #196	; 0xc4
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
	PID_t PID1; // input - speed, output - angle_setpoint, setpoint - speed_setpoint
	PID_t PID2; // input - angle, output - speed, setpoint - angle_setpoint

	// Stworzenie zmiennych wykorzystywamych przez regulatory zgodnie z opisem powyżej
	float angle, speed;
	float angle_setpoint = PID_DEFAULT_SETPOINT;	// Przypisanie początkowej wartości nastawy
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
	float speed_setpoint = PID_DEFAULT_SETPOINT;	// Przypisanie początkowej wartości nastawy
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	623b      	str	r3, [r7, #32]
	uint16_t flags;		// zmienna pomocnicza dla flag przesyłanych do zadania przez parser
	int16_t queueSpeed;	// zmienna pomocnicza potrzebna do wysyłania wartości int16_t (a nie float) do kolejki zadania silników krokowych
	RoborState_t state;	// zmienna pomocnicza do przechowywania aktualnego stanu robota
	char cmd[16];		// Buffer pomocniczy do wysyłania wiadomości (komend) przez UART
	uint8_t robotMaxLean = PID_ROBOT_MAX_LEAN;				// Maks kąt wychylenia (jest to zakres wyjściowy dla PID1)
 8002b10:	2303      	movs	r3, #3
 8002b12:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
	uint8_t robotMovingSpeed = ROBOT_MOVING_SPEED;			// Docelowa prędkość (speed_setpoint) przy poruszaniu się do przodu i do tyłu
 8002b16:	231e      	movs	r3, #30
 8002b18:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
	uint8_t robotZeroHysteresis = ROBOT_ZERO_HYSTERESIS;	// Zakres prędkości, w którym prędkość jest sprowadzana do 0 (zapobiega to drganiu robota)
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

	// Inicjalizacja utworzonych regulatorów
	// Najpierw regulator kąta wychylenia PID2
	PID_Init(&PID2, &angle, &speed, &angle_setpoint, PID2_DEFAULT_KP, PID2_DEFAULT_KI,
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002b2e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002b32:	2400      	movs	r4, #0
 8002b34:	9401      	str	r4, [sp, #4]
 8002b36:	2401      	movs	r4, #1
 8002b38:	9400      	str	r4, [sp, #0]
 8002b3a:	ed9f 1ad9 	vldr	s2, [pc, #868]	; 8002ea0 <StartPIDTask+0x3a8>
 8002b3e:	eef3 0a08 	vmov.f32	s1, #56	; 0x41c00000  24.0
 8002b42:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002b46:	f7fe ff1d 	bl	8001984 <PID_Init>
			PID2_DEFAULT_KD, P_ON_ERROR, DIRECT);	// Tryb direct, bo przy zwiększaniu się kąta, regulator musi kontrować prędkością w tym samym kierunku
	PID_SetMode(&PID2, AUTOMATIC);	// Tryb automatyczny odblokowujący możliwość wywoływana funkcji PID_Compute()
 8002b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f92e 	bl	8001db2 <PID_SetMode>
	PID_SetSampleTime(&PID2, (uint32_t) ((1.0/(float)PID_SAMPLE_TIME) * 1000.0));	// Przeliczenie częstotliwości obliczeń na okres w [ms]
 8002b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b5a:	2113      	movs	r1, #19
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f88f 	bl	8001c80 <PID_SetSampleTime>
	PID_SetOutputLimits(&PID2, -DRV8834_getMaxSpeed(), DRV8834_getMaxSpeed());		// Zakres wyjściowy zależy od ustawionej maks prędkości silników
 8002b62:	f7fe fa9f 	bl	80010a4 <DRV8834_getMaxSpeed>
 8002b66:	4603      	mov	r3, r0
 8002b68:	425b      	negs	r3, r3
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002b72:	f7fe fa97 	bl	80010a4 <DRV8834_getMaxSpeed>
 8002b76:	4603      	mov	r3, r0
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b84:	eef0 0a67 	vmov.f32	s1, s15
 8002b88:	eeb0 0a48 	vmov.f32	s0, s16
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f8ab 	bl	8001ce8 <PID_SetOutputLimits>

	// Teraz regulator prędkości PID1
	PID_Init(&PID1, &speed, &angle_setpoint, &speed_setpoint, PID1_DEFAULT_KP, PID1_DEFAULT_KI,
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b9e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002ba2:	2401      	movs	r4, #1
 8002ba4:	9401      	str	r4, [sp, #4]
 8002ba6:	2401      	movs	r4, #1
 8002ba8:	9400      	str	r4, [sp, #0]
 8002baa:	ed9f 1abe 	vldr	s2, [pc, #760]	; 8002ea4 <StartPIDTask+0x3ac>
 8002bae:	eddf 0abe 	vldr	s1, [pc, #760]	; 8002ea8 <StartPIDTask+0x3b0>
 8002bb2:	ed9f 0abe 	vldr	s0, [pc, #760]	; 8002eac <StartPIDTask+0x3b4>
 8002bb6:	f7fe fee5 	bl	8001984 <PID_Init>
			PID1_DEFAULT_KD, P_ON_ERROR, REVERSE); // Tryb reverse, bo przy zwiększaniu prędkości, regulator musi kontrować nastawą kąta w przeciwnym kierunku
	PID_SetMode(&PID1, AUTOMATIC);
 8002bba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f8f6 	bl	8001db2 <PID_SetMode>
	PID_SetSampleTime(&PID1, (uint32_t) ((1.0/(float)PID_SAMPLE_TIME) * 1000.0));
 8002bc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bca:	2113      	movs	r1, #19
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f857 	bl	8001c80 <PID_SetSampleTime>
	PID_SetOutputLimits(&PID1, -robotMaxLean, robotMaxLean);	// Zakres wyjściowy zależy od ustawionej maks wartości wychylenia robota
 8002bd2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8002bd6:	425b      	negs	r3, r3
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be0:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8002be4:	ee07 3a10 	vmov	s14, r3
 8002be8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002bec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bf0:	eef0 0a47 	vmov.f32	s1, s14
 8002bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f875 	bl	8001ce8 <PID_SetOutputLimits>
  /* Infinite loop */
  for(;;)
  {
	  // Sprawdzenie czy można pobrać wartość kąta wychylenia z kolejki
	  if(osMessageQueueGet(QueueInputPIDHandle, &angle, NULL, 20*KERNEL_TICKS_FOR_MS) == osOK)
 8002bfe:	4bac      	ldr	r3, [pc, #688]	; (8002eb0 <StartPIDTask+0x3b8>)
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c06:	2314      	movs	r3, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f008 fadd 	bl	800b1c8 <osMessageQueueGet>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 809b 	bne.w	8002d4c <StartPIDTask+0x254>
	  {
		// Pobierz aktualny stan robota
		state = DRV8834_getRobotState();
 8002c16:	f7fe fa39 	bl	800108c <DRV8834_getRobotState>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
		// Sprawdź czy silniki nie są zastopowane
		if(state != STOPPED)
 8002c20:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <StartPIDTask+0x1ea>
		{
			// Sprawdź czy kąt jest na tyle mały, aby dało się jeszcze balansować
			if((angle < ROBOT_MAX_ANGLE) && (angle > -ROBOT_MAX_ANGLE))
 8002c28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c2c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002eb4 <StartPIDTask+0x3bc>
 8002c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	d531      	bpl.n	8002c9e <StartPIDTask+0x1a6>
 8002c3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c3e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002eb8 <StartPIDTask+0x3c0>
 8002c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	dd28      	ble.n	8002c9e <StartPIDTask+0x1a6>
			{
				// Wyznacz nastawę prędkości zgodnie z aktualnym stanem robota
				switch(state)
 8002c4c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <StartPIDTask+0x162>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d00a      	beq.n	8002c6e <StartPIDTask+0x176>
 8002c58:	e012      	b.n	8002c80 <StartPIDTask+0x188>
				{
				case FORWARD:
					speed_setpoint = -robotMovingSpeed;
 8002c5a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8002c5e:	425b      	negs	r3, r3
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c68:	edc7 7a08 	vstr	s15, [r7, #32]
					break;
 8002c6c:	e00c      	b.n	8002c88 <StartPIDTask+0x190>
				case BACKWARD:
					speed_setpoint = robotMovingSpeed;
 8002c6e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	edc7 7a08 	vstr	s15, [r7, #32]
					break;
 8002c7e:	e003      	b.n	8002c88 <StartPIDTask+0x190>
				case LEFT:
				case RIGHT:
				default:
					speed_setpoint = PID_DEFAULT_SETPOINT;
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
					break;
 8002c86:	bf00      	nop
				}
				// Wykonaj obliczenia, najpierw regulatora prędkości aby zaktualizować nastawę kąta wychylenia
				PID_Compute(&PID1);
 8002c88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f919 	bl	8001ec4 <PID_Compute>
				// Teraz oblicz prędkość na podstawie odczytu kąta z kolejki i zaktualizowanej nastawy
				PID_Compute(&PID2);
 8002c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f914 	bl	8001ec4 <PID_Compute>
 8002c9c:	e002      	b.n	8002ca4 <StartPIDTask+0x1ac>
			}
			else
			{	// Jeśli kąt jest na tyle duży, że nie da się balansować ustaw prękość na 0 (robot przewraca się)
				speed = 0;
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Jeśli obliczona prędkość jest bardzo niska to zredukuj ją do 0
			// Zapobiega to drganiom robota przy niskich prędkościach np. przy prędkościach do 0.1*maxSpeed
			if((speed < robotZeroHysteresis) && (speed > -robotZeroHysteresis))
 8002ca4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	dd14      	ble.n	8002ce8 <StartPIDTask+0x1f0>
 8002cbe:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ccc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	d506      	bpl.n	8002ce8 <StartPIDTask+0x1f0>
			{
				speed = 0;
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce0:	e002      	b.n	8002ce8 <StartPIDTask+0x1f0>
			}
		}
		else
		{	// Jeśli robot jest w stanie STOPPED to wyzeruj prędkość
			speed = 0;
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		// Rzutowanie zmiennoprzecinkowej prędkości na liczbę całkowitą
		queueSpeed = (int16_t) speed;
 8002ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf0:	ee17 3a90 	vmov	r3, s15
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	83fb      	strh	r3, [r7, #30]

		// Wysłanie aktualnych nastaw regulatorów przez UART
		sprintf(cmd, "P1+SP=%d\r\n", -(int)speed_setpoint);
 8002cf8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d00:	ee17 3a90 	vmov	r3, s15
 8002d04:	425a      	negs	r2, r3
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	496c      	ldr	r1, [pc, #432]	; (8002ebc <StartPIDTask+0x3c4>)
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f00c fcdf 	bl	800f6d0 <siprintf>
		sendMessageToUART(cmd);
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f864 	bl	8003de4 <sendMessageToUART>
		sprintf(cmd, "P2+SP=%.2f\r\n", angle_setpoint);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc2a 	bl	8000578 <__aeabi_f2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	f107 000c 	add.w	r0, r7, #12
 8002d2c:	4964      	ldr	r1, [pc, #400]	; (8002ec0 <StartPIDTask+0x3c8>)
 8002d2e:	f00c fccf 	bl	800f6d0 <siprintf>
		sendMessageToUART(cmd);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 f854 	bl	8003de4 <sendMessageToUART>

		// Wrzuć do kolejki dla silników krokowych wartość całkowitoliczbową prędkości
		osMessageQueuePut(QueueOutputPIDHandle, &queueSpeed, 0, 0);
 8002d3c:	4b61      	ldr	r3, [pc, #388]	; (8002ec4 <StartPIDTask+0x3cc>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	f107 011e 	add.w	r1, r7, #30
 8002d44:	2300      	movs	r3, #0
 8002d46:	2200      	movs	r2, #0
 8002d48:	f008 f9de 	bl	800b108 <osMessageQueuePut>
		pidMonitorSetpoint2 = speed_setpoint;
#endif
	  }

	  // Sprawdzenie czy otrzymano jakieś flagi (zapytania lub rozkazy zapisu do zmiennej)
	  if(osThreadFlagsWait(PID_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < PID_FLAGS)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2102      	movs	r1, #2
 8002d50:	20ff      	movs	r0, #255	; 0xff
 8002d52:	f007 fe9c 	bl	800aa8e <osThreadFlagsWait>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2bfe      	cmp	r3, #254	; 0xfe
 8002d5a:	f63f af50 	bhi.w	8002bfe <StartPIDTask+0x106>
	  {
		float tmp;
		uint8_t isSetFlag;
		uint8_t isPID2Flag;
		// Pobranie otrzymanych flag
		flags = osThreadFlagsGet();
 8002d5e:	f007 fe75 	bl	800aa4c <osThreadFlagsGet>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		// Sprawdzenie czy otrzymano flagę zapisu do danej zmiennej
		if((isSetFlag = CHECK_BIT(flags, PARSER_PID_SET_FLAG)))
 8002d68:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8002d7e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <StartPIDTask+0x2b0>
		{
			// Jeśli tak to pobierz wartość z kolejki
			osMessageQueueGet(QueueUartPIDHandle, &tmp, 0, 0);
 8002d86:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <StartPIDTask+0x3d0>)
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	f107 0108 	add.w	r1, r7, #8
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2200      	movs	r2, #0
 8002d92:	f008 fa19 	bl	800b1c8 <osMessageQueueGet>
			// Wyczyść flagę zapisu globalnie i w lokalnej zmiennej
			osThreadFlagsClear(PARSER_PID_SET_FLAG);
 8002d96:	2080      	movs	r0, #128	; 0x80
 8002d98:	f007 fe1a 	bl	800a9d0 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_PID_SET_FLAG);
 8002d9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		}
		// Sprawdzenie do którego regulatora odnosi się flaga
		if((isPID2Flag = CHECK_BIT(flags, PARSER_PID_PID2_FLAG)))
 8002da8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8002dbe:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <StartPIDTask+0x2e0>
		{
			osThreadFlagsClear(PARSER_PID_PID2_FLAG);
 8002dc6:	2008      	movs	r0, #8
 8002dc8:	f007 fe02 	bl	800a9d0 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_PID_PID2_FLAG);
 8002dcc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002dd0:	f023 0308 	bic.w	r3, r3, #8
 8002dd4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		}

		// Sprawdź której zmiennej dotyczy flaga
		// Jeśli jest to komenda zapisu to przypisz wartość z kolejki do danej zmiennej
		// Jeśli jest to komenda odczytu to wyślij przez UART wartość tej zmiennej
		switch(flags)
 8002dd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	dc49      	bgt.n	8002e74 <StartPIDTask+0x37c>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f340 816c 	ble.w	80030be <StartPIDTask+0x5c6>
 8002de6:	3b01      	subs	r3, #1
 8002de8:	2b1f      	cmp	r3, #31
 8002dea:	f200 8168 	bhi.w	80030be <StartPIDTask+0x5c6>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <StartPIDTask+0x2fc>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e7d 	.word	0x08002e7d
 8002df8:	08002f23 	.word	0x08002f23
 8002dfc:	080030bf 	.word	0x080030bf
 8002e00:	08002f9d 	.word	0x08002f9d
 8002e04:	080030bf 	.word	0x080030bf
 8002e08:	080030bf 	.word	0x080030bf
 8002e0c:	080030bf 	.word	0x080030bf
 8002e10:	080030bf 	.word	0x080030bf
 8002e14:	080030bf 	.word	0x080030bf
 8002e18:	080030bf 	.word	0x080030bf
 8002e1c:	080030bf 	.word	0x080030bf
 8002e20:	080030bf 	.word	0x080030bf
 8002e24:	080030bf 	.word	0x080030bf
 8002e28:	080030bf 	.word	0x080030bf
 8002e2c:	080030bf 	.word	0x080030bf
 8002e30:	08003017 	.word	0x08003017
 8002e34:	080030bf 	.word	0x080030bf
 8002e38:	080030bf 	.word	0x080030bf
 8002e3c:	080030bf 	.word	0x080030bf
 8002e40:	080030bf 	.word	0x080030bf
 8002e44:	080030bf 	.word	0x080030bf
 8002e48:	080030bf 	.word	0x080030bf
 8002e4c:	080030bf 	.word	0x080030bf
 8002e50:	080030bf 	.word	0x080030bf
 8002e54:	080030bf 	.word	0x080030bf
 8002e58:	080030bf 	.word	0x080030bf
 8002e5c:	080030bf 	.word	0x080030bf
 8002e60:	080030bf 	.word	0x080030bf
 8002e64:	080030bf 	.word	0x080030bf
 8002e68:	080030bf 	.word	0x080030bf
 8002e6c:	080030bf 	.word	0x080030bf
 8002e70:	0800304f 	.word	0x0800304f
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	f000 8106 	beq.w	8003086 <StartPIDTask+0x58e>
			break;
		case PARSER_PID_ZERO_HYST_FLAG:
			if (isSetFlag) robotZeroHysteresis = tmp;
			else { sprintf(cmd, "#ZH=%d\r\n", robotZeroHysteresis); sendMessageToUART(cmd); }
			break;
		default: break;
 8002e7a:	e120      	b.n	80030be <StartPIDTask+0x5c6>
			if (isSetFlag)
 8002e7c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02d      	beq.n	8002ee0 <StartPIDTask+0x3e8>
				isPID2Flag ? setKp(&PID2, tmp) : setKp(&PID1, tmp);
 8002e84:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01f      	beq.n	8002ecc <StartPIDTask+0x3d4>
 8002e8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e94:	eeb0 0a67 	vmov.f32	s0, s15
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fe33 	bl	8001b04 <setKp>
			break;
 8002e9e:	e10f      	b.n	80030c0 <StartPIDTask+0x5c8>
 8002ea0:	3ca3d70a 	.word	0x3ca3d70a
 8002ea4:	00000000 	.word	0x00000000
 8002ea8:	3dcccccd 	.word	0x3dcccccd
 8002eac:	3d4ccccd 	.word	0x3d4ccccd
 8002eb0:	200004e4 	.word	0x200004e4
 8002eb4:	42200000 	.word	0x42200000
 8002eb8:	c2200000 	.word	0xc2200000
 8002ebc:	08013780 	.word	0x08013780
 8002ec0:	0801378c 	.word	0x0801378c
 8002ec4:	200004e8 	.word	0x200004e8
 8002ec8:	200004ec 	.word	0x200004ec
				isPID2Flag ? setKp(&PID2, tmp) : setKp(&PID1, tmp);
 8002ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fe13 	bl	8001b04 <setKp>
			break;
 8002ede:	e0ef      	b.n	80030c0 <StartPIDTask+0x5c8>
				isPID2Flag ? sprintf(cmd, "P2+KP=%.3f\r\n", PID2.dispKp) : sprintf(cmd, "P1+KP=%.3f\r\n", PID1.dispKp);
 8002ee0:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <StartPIDTask+0x408>
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fb44 	bl	8000578 <__aeabi_f2d>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	f107 000c 	add.w	r0, r7, #12
 8002ef8:	4977      	ldr	r1, [pc, #476]	; (80030d8 <StartPIDTask+0x5e0>)
 8002efa:	f00c fbe9 	bl	800f6d0 <siprintf>
 8002efe:	e00a      	b.n	8002f16 <StartPIDTask+0x41e>
 8002f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb38 	bl	8000578 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	f107 000c 	add.w	r0, r7, #12
 8002f10:	4972      	ldr	r1, [pc, #456]	; (80030dc <StartPIDTask+0x5e4>)
 8002f12:	f00c fbdd 	bl	800f6d0 <siprintf>
				sendMessageToUART(cmd);
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 ff62 	bl	8003de4 <sendMessageToUART>
			break;
 8002f20:	e0ce      	b.n	80030c0 <StartPIDTask+0x5c8>
			if (isSetFlag)
 8002f22:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d017      	beq.n	8002f5a <StartPIDTask+0x462>
				isPID2Flag ? setKi(&PID2, tmp) : setKi(&PID1, tmp);
 8002f2a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <StartPIDTask+0x44e>
 8002f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fe0a 	bl	8001b58 <setKi>
			break;
 8002f44:	e0bc      	b.n	80030c0 <StartPIDTask+0x5c8>
				isPID2Flag ? setKi(&PID2, tmp) : setKi(&PID1, tmp);
 8002f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fe00 	bl	8001b58 <setKi>
			break;
 8002f58:	e0b2      	b.n	80030c0 <StartPIDTask+0x5c8>
				isPID2Flag ? sprintf(cmd, "P2+KI=%.3f\r\n", PID2.dispKi) : sprintf(cmd, "P1+KI=%.3f\r\n", PID1.dispKi);
 8002f5a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <StartPIDTask+0x482>
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fb07 	bl	8000578 <__aeabi_f2d>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	f107 000c 	add.w	r0, r7, #12
 8002f72:	495b      	ldr	r1, [pc, #364]	; (80030e0 <StartPIDTask+0x5e8>)
 8002f74:	f00c fbac 	bl	800f6d0 <siprintf>
 8002f78:	e00a      	b.n	8002f90 <StartPIDTask+0x498>
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fafb 	bl	8000578 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	f107 000c 	add.w	r0, r7, #12
 8002f8a:	4956      	ldr	r1, [pc, #344]	; (80030e4 <StartPIDTask+0x5ec>)
 8002f8c:	f00c fba0 	bl	800f6d0 <siprintf>
				sendMessageToUART(cmd);
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ff25 	bl	8003de4 <sendMessageToUART>
			break;
 8002f9a:	e091      	b.n	80030c0 <StartPIDTask+0x5c8>
			if (isSetFlag)
 8002f9c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <StartPIDTask+0x4dc>
				isPID2Flag ? setKd(&PID2, tmp) : setKd(&PID1, tmp);
 8002fa4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d009      	beq.n	8002fc0 <StartPIDTask+0x4c8>
 8002fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fe17 	bl	8001bec <setKd>
			break;
 8002fbe:	e07f      	b.n	80030c0 <StartPIDTask+0x5c8>
				isPID2Flag ? setKd(&PID2, tmp) : setKd(&PID1, tmp);
 8002fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fe0d 	bl	8001bec <setKd>
			break;
 8002fd2:	e075      	b.n	80030c0 <StartPIDTask+0x5c8>
				isPID2Flag ? sprintf(cmd, "P2+KD=%.3f\r\n", PID2.dispKd) : sprintf(cmd, "P1+KD=%.3f\r\n", PID1.dispKd);
 8002fd4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <StartPIDTask+0x4fc>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd faca 	bl	8000578 <__aeabi_f2d>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	f107 000c 	add.w	r0, r7, #12
 8002fec:	493e      	ldr	r1, [pc, #248]	; (80030e8 <StartPIDTask+0x5f0>)
 8002fee:	f00c fb6f 	bl	800f6d0 <siprintf>
 8002ff2:	e00a      	b.n	800300a <StartPIDTask+0x512>
 8002ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fabe 	bl	8000578 <__aeabi_f2d>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	f107 000c 	add.w	r0, r7, #12
 8003004:	4939      	ldr	r1, [pc, #228]	; (80030ec <StartPIDTask+0x5f4>)
 8003006:	f00c fb63 	bl	800f6d0 <siprintf>
				sendMessageToUART(cmd);
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fee8 	bl	8003de4 <sendMessageToUART>
			break;
 8003014:	e054      	b.n	80030c0 <StartPIDTask+0x5c8>
			if (isSetFlag) robotMaxLean = tmp;
 8003016:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <StartPIDTask+0x53a>
 800301e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003026:	edc7 7a00 	vstr	s15, [r7]
 800302a:	783b      	ldrb	r3, [r7, #0]
 800302c:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
			break;
 8003030:	e046      	b.n	80030c0 <StartPIDTask+0x5c8>
			else { sprintf(cmd, "#RML=%d\r\n", robotMaxLean); sendMessageToUART(cmd); }
 8003032:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	492d      	ldr	r1, [pc, #180]	; (80030f0 <StartPIDTask+0x5f8>)
 800303c:	4618      	mov	r0, r3
 800303e:	f00c fb47 	bl	800f6d0 <siprintf>
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fecc 	bl	8003de4 <sendMessageToUART>
			break;
 800304c:	e038      	b.n	80030c0 <StartPIDTask+0x5c8>
			if (isSetFlag) robotMovingSpeed = tmp;
 800304e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <StartPIDTask+0x572>
 8003056:	edd7 7a02 	vldr	s15, [r7, #8]
 800305a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800305e:	edc7 7a00 	vstr	s15, [r7]
 8003062:	783b      	ldrb	r3, [r7, #0]
 8003064:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			break;
 8003068:	e02a      	b.n	80030c0 <StartPIDTask+0x5c8>
			else { sprintf(cmd, "#RMS=%d\r\n", robotMovingSpeed); sendMessageToUART(cmd); }
 800306a:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	4920      	ldr	r1, [pc, #128]	; (80030f4 <StartPIDTask+0x5fc>)
 8003074:	4618      	mov	r0, r3
 8003076:	f00c fb2b 	bl	800f6d0 <siprintf>
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4618      	mov	r0, r3
 8003080:	f000 feb0 	bl	8003de4 <sendMessageToUART>
			break;
 8003084:	e01c      	b.n	80030c0 <StartPIDTask+0x5c8>
			if (isSetFlag) robotZeroHysteresis = tmp;
 8003086:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <StartPIDTask+0x5aa>
 800308e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003096:	edc7 7a00 	vstr	s15, [r7]
 800309a:	783b      	ldrb	r3, [r7, #0]
 800309c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
			break;
 80030a0:	e00e      	b.n	80030c0 <StartPIDTask+0x5c8>
			else { sprintf(cmd, "#ZH=%d\r\n", robotZeroHysteresis); sendMessageToUART(cmd); }
 80030a2:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	4913      	ldr	r1, [pc, #76]	; (80030f8 <StartPIDTask+0x600>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f00c fb0f 	bl	800f6d0 <siprintf>
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fe94 	bl	8003de4 <sendMessageToUART>
			break;
 80030bc:	e000      	b.n	80030c0 <StartPIDTask+0x5c8>
		default: break;
 80030be:	bf00      	nop
		}
		// Wyczyść flagę i odblokuj mutex umożliwiając ustawienie kolejnej flagi przez parser
		osThreadFlagsClear(flags);
 80030c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80030c4:	4618      	mov	r0, r3
 80030c6:	f007 fc83 	bl	800a9d0 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsPIDHandle);
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <StartPIDTask+0x604>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f007 ff62 	bl	800af98 <osSemaphoreRelease>
	  if(osMessageQueueGet(QueueInputPIDHandle, &angle, NULL, 20*KERNEL_TICKS_FOR_MS) == osOK)
 80030d4:	e593      	b.n	8002bfe <StartPIDTask+0x106>
 80030d6:	bf00      	nop
 80030d8:	0801379c 	.word	0x0801379c
 80030dc:	080137ac 	.word	0x080137ac
 80030e0:	080137bc 	.word	0x080137bc
 80030e4:	080137cc 	.word	0x080137cc
 80030e8:	080137dc 	.word	0x080137dc
 80030ec:	080137ec 	.word	0x080137ec
 80030f0:	080137fc 	.word	0x080137fc
 80030f4:	08013808 	.word	0x08013808
 80030f8:	08013814 	.word	0x08013814
 80030fc:	20000514 	.word	0x20000514

08003100 <StartStepperMotorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStepperMotorsTask */
void StartStepperMotorsTask(void *argument)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0a6      	sub	sp, #152	; 0x98
 8003104:	af04      	add	r7, sp, #16
 8003106:	6078      	str	r0, [r7, #4]
	// Stwórz obiekty dwóch silników krokowych (modułów DRV8834)
	StepMotor_t rightMotor;
	StepMotor_t leftMotor;

	// Ustaw początkowe prędkości na 0
	int16_t speed = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t speedLeft = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t speedRight = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	uint16_t flags; // Zmienna pomocnicza dla flag przesyłanych do zadania przez parser
	char cmd[16];	// Buffer pomocniczy do wysyłania wiadomości (komend) przez UART
	RoborState_t state;	// zmienna pomocnicza do przechowywania aktualnego stanu robota
	uint8_t statePrintDelay = 0;	// zmienna pomocnicza do rzadszego wysyłania przez UART stanu robota
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	uint8_t robotTurningSpeed = ROBOT_TURNING_SPEED;	// maks prędkośc obrotu robota w lewo i prawo
 800311e:	230f      	movs	r3, #15
 8003120:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

	// Inicjalizacji silników krokowych
	// Najpierw lewy silnik
	DRV8834_Init(&leftMotor, &htim2, TIM_CHANNEL_3);	// Wstępna inicjalizacja i przpisanie timera PWM
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	2208      	movs	r2, #8
 800312a:	49ce      	ldr	r1, [pc, #824]	; (8003464 <StartStepperMotorsTask+0x364>)
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd ffd1 	bl	80010d4 <DRV8834_Init>
	DRV8834_InitPins(&leftMotor, leftMotor_DIR_Pin, leftMotor_DIR_GPIO_Port,
 8003132:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003136:	4bcc      	ldr	r3, [pc, #816]	; (8003468 <StartStepperMotorsTask+0x368>)
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	2320      	movs	r3, #32
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	4bca      	ldr	r3, [pc, #808]	; (8003468 <StartStepperMotorsTask+0x368>)
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	4ac8      	ldr	r2, [pc, #800]	; (8003468 <StartStepperMotorsTask+0x368>)
 8003146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800314a:	f7fd ffdb 	bl	8001104 <DRV8834_InitPins>
			leftMotor_M0_Pin, leftMotor_M0_GPIO_Port, leftMotor_M1_Pin, leftMotor_M1_GPIO_Port);	// Przypisanie pinów GPIO
	DRV8834_SetMicrostep(&leftMotor, MOT_DEFAULT_MICROSTEP);	// Ustawienie domyślnego mikrokroku
 800314e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003152:	2104      	movs	r1, #4
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe f82d 	bl	80011b4 <DRV8834_SetMicrostep>
	// Następnie prawy silnik
	DRV8834_Init(&rightMotor, &htim4, TIM_CHANNEL_1);	// Wstępna inicjalizacja i przpisanie timera PWM
 800315a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800315e:	2200      	movs	r2, #0
 8003160:	49c2      	ldr	r1, [pc, #776]	; (800346c <StartStepperMotorsTask+0x36c>)
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd ffb6 	bl	80010d4 <DRV8834_Init>
	DRV8834_InitPins(&rightMotor, rightMotor_DIR_Pin, rightMotor_DIR_GPIO_Port,
 8003168:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800316c:	4bc0      	ldr	r3, [pc, #768]	; (8003470 <StartStepperMotorsTask+0x370>)
 800316e:	9302      	str	r3, [sp, #8]
 8003170:	2320      	movs	r3, #32
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	4bbe      	ldr	r3, [pc, #760]	; (8003470 <StartStepperMotorsTask+0x370>)
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2310      	movs	r3, #16
 800317a:	4abb      	ldr	r2, [pc, #748]	; (8003468 <StartStepperMotorsTask+0x368>)
 800317c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003180:	f7fd ffc0 	bl	8001104 <DRV8834_InitPins>
			rightMotor_M0_Pin, rightMotor_M0_GPIO_Port, rightMotor_M1_Pin, rightMotor_M1_GPIO_Port);	// Przypisanie pinów GPIO
	DRV8834_SetMicrostep(&rightMotor, MOT_DEFAULT_MICROSTEP);	// Ustawienie domyślnego mikrokroku
 8003184:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003188:	2104      	movs	r1, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe f812 	bl	80011b4 <DRV8834_SetMicrostep>
	// Wystartowanie silników (wprowadzenie w tryb BALANCING) z zerową prędkością
	DRV8834_StartMotor(&leftMotor, 0);
 8003190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe f9b0 	bl	80014fc <DRV8834_StartMotor>
	DRV8834_StartMotor(&rightMotor, 0);
 800319c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe f9aa 	bl	80014fc <DRV8834_StartMotor>
  /* Infinite loop */
  for(;;)
  {
	// Sprawdzenie czy w kolejce znajduje się nową wartość prędkości
	if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &speed, NULL, 20*KERNEL_TICKS_FOR_MS))
 80031a8:	4bb2      	ldr	r3, [pc, #712]	; (8003474 <StartStepperMotorsTask+0x374>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	f107 0122 	add.w	r1, r7, #34	; 0x22
 80031b0:	2314      	movs	r3, #20
 80031b2:	2200      	movs	r2, #0
 80031b4:	f008 f808 	bl	800b1c8 <osMessageQueueGet>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d178      	bne.n	80032b0 <StartStepperMotorsTask+0x1b0>
	{
		// Pobranie aktualnego stanu robota
		state = DRV8834_getRobotState();
 80031be:	f7fd ff65 	bl	800108c <DRV8834_getRobotState>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		// Przypisanie prędkości do silników zgodnie z aktualnym trybem robota
		switch(state)
 80031c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d002      	beq.n	80031d6 <StartStepperMotorsTask+0xd6>
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d015      	beq.n	8003200 <StartStepperMotorsTask+0x100>
 80031d4:	e029      	b.n	800322a <StartStepperMotorsTask+0x12a>
		{
		case LEFT:
			speedLeft = speed + robotTurningSpeed;
 80031d6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80031da:	b29a      	uxth	r2, r3
 80031dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			speedRight = speed - robotTurningSpeed;
 80031ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			break;
 80031fe:	e01b      	b.n	8003238 <StartStepperMotorsTask+0x138>
		case RIGHT:
			speedLeft = speed - robotTurningSpeed;
 8003200:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003204:	b29a      	uxth	r2, r3
 8003206:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800320a:	b29b      	uxth	r3, r3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			speedRight = speed + robotTurningSpeed;
 8003214:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8003218:	b29a      	uxth	r2, r3
 800321a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800321e:	b29b      	uxth	r3, r3
 8003220:	4413      	add	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			break;
 8003228:	e006      	b.n	8003238 <StartStepperMotorsTask+0x138>
		case FORWARD:
		case BACKWARD:
		default:
			speedLeft = speed;
 800322a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800322c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			speedRight = speed;
 8003230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003232:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			break;
 8003236:	bf00      	nop
		}

		// Jeśli robot nie znajduje się w stanie STOPPED zmień prędkość silników
		if(state != STOPPED)
 8003238:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <StartStepperMotorsTask+0x162>
		{
			DRV8834_SetSpeed(&leftMotor, -speedLeft);	// prędkość z "minusem", bo silniki fizycznie zamontowane są w odbiciu lustrzanym
 8003240:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8003244:	425a      	negs	r2, r3
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe f883 	bl	8001358 <DRV8834_SetSpeed>
			DRV8834_SetSpeed(&rightMotor, speedRight);
 8003252:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8003256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe f87b 	bl	8001358 <DRV8834_SetSpeed>
		}

		// Prześlij przez UART aktualną wartość prędkości
		sprintf(cmd, "SPD=%d\r\n", -(int)speed);
 8003262:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003266:	425a      	negs	r2, r3
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	4982      	ldr	r1, [pc, #520]	; (8003478 <StartStepperMotorsTask+0x378>)
 800326e:	4618      	mov	r0, r3
 8003270:	f00c fa2e 	bl	800f6d0 <siprintf>
		sendMessageToUART(cmd);
 8003274:	f107 0310 	add.w	r3, r7, #16
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fdb3 	bl	8003de4 <sendMessageToUART>
		// Prześlij przez UART aktualny stan robota co 25 iteracji algorytmu
		statePrintDelay++;
 800327e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8003282:	3301      	adds	r3, #1
 8003284:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		if(statePrintDelay >= 25)
 8003288:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800328c:	2b18      	cmp	r3, #24
 800328e:	d90f      	bls.n	80032b0 <StartStepperMotorsTask+0x1b0>
		{
			sprintf(cmd, "ST=%d\r\n", (int) state);
 8003290:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	4978      	ldr	r1, [pc, #480]	; (800347c <StartStepperMotorsTask+0x37c>)
 800329a:	4618      	mov	r0, r3
 800329c:	f00c fa18 	bl	800f6d0 <siprintf>
			sendMessageToUART(cmd);
 80032a0:	f107 0310 	add.w	r3, r7, #16
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fd9d 	bl	8003de4 <sendMessageToUART>
			statePrintDelay = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		}

	}

	// Sprawdzenie czy otrzymano jakieś flagi (zapytania lub rozkazy zapisu do zmiennej)
	if(osThreadFlagsWait(MOT_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < MOT_FLAGS)
 80032b0:	2200      	movs	r2, #0
 80032b2:	2102      	movs	r1, #2
 80032b4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032b8:	f007 fbe9 	bl	800aa8e <osThreadFlagsWait>
 80032bc:	4603      	mov	r3, r0
 80032be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f63f af70 	bhi.w	80031a8 <StartStepperMotorsTask+0xa8>
	{
	uint16_t tmp;
	uint8_t isSetFlag;
	// Pobranie otrzymanych flag
	flags = osThreadFlagsGet();
 80032c8:	f007 fbc0 	bl	800aa4c <osThreadFlagsGet>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	// Sprawdzenie czy otrzymano flagę zapisu do danej zmiennej
	if((isSetFlag = CHECK_BIT(flags, PARSER_MOT_SET_FLAG)))
 80032d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80032e8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d011      	beq.n	8003314 <StartStepperMotorsTask+0x214>
	{
		// Jeśli tak to pobierz wartość z kolejki
		osMessageQueueGet(QueueUartMOTHandle, &tmp, 0, 0);
 80032f0:	4b63      	ldr	r3, [pc, #396]	; (8003480 <StartStepperMotorsTask+0x380>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	f107 010e 	add.w	r1, r7, #14
 80032f8:	2300      	movs	r3, #0
 80032fa:	2200      	movs	r2, #0
 80032fc:	f007 ff64 	bl	800b1c8 <osMessageQueueGet>
		// Wyczyść flagę zapisu globalnie i w lokalnej zmiennej
		osThreadFlagsClear(PARSER_MOT_SET_FLAG);
 8003300:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003304:	f007 fb64 	bl	800a9d0 <osThreadFlagsClear>
		CLEAR_BIT(flags, PARSER_MOT_SET_FLAG);
 8003308:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800330c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003310:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	}

	// Sprawdź której zmiennej dotyczy flaga
	// Jeśli jest to komenda zapisu to przypisz wartość z kolejki do danej zmiennej
	// Jeśli jest to komenda odczytu to wyślij przez UART wartość tej zmiennej
	switch(flags)
 8003314:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	f000 811a 	beq.w	8003554 <StartStepperMotorsTask+0x454>
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003324:	f300 8180 	bgt.w	8003628 <StartStepperMotorsTask+0x528>
 8003328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332c:	f000 8168 	beq.w	8003600 <StartStepperMotorsTask+0x500>
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	f300 8178 	bgt.w	8003628 <StartStepperMotorsTask+0x528>
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	f000 814d 	beq.w	80035da <StartStepperMotorsTask+0x4da>
 8003340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003344:	f300 8170 	bgt.w	8003628 <StartStepperMotorsTask+0x528>
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	f000 8119 	beq.w	8003580 <StartStepperMotorsTask+0x480>
 800334e:	2b80      	cmp	r3, #128	; 0x80
 8003350:	f300 816a 	bgt.w	8003628 <StartStepperMotorsTask+0x528>
 8003354:	2b20      	cmp	r3, #32
 8003356:	dc49      	bgt.n	80033ec <StartStepperMotorsTask+0x2ec>
 8003358:	2b00      	cmp	r3, #0
 800335a:	f340 8165 	ble.w	8003628 <StartStepperMotorsTask+0x528>
 800335e:	3b01      	subs	r3, #1
 8003360:	2b1f      	cmp	r3, #31
 8003362:	f200 8161 	bhi.w	8003628 <StartStepperMotorsTask+0x528>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <StartStepperMotorsTask+0x26c>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033f5 	.word	0x080033f5
 8003370:	08003413 	.word	0x08003413
 8003374:	08003629 	.word	0x08003629
 8003378:	08003431 	.word	0x08003431
 800337c:	08003629 	.word	0x08003629
 8003380:	08003629 	.word	0x08003629
 8003384:	08003629 	.word	0x08003629
 8003388:	0800344f 	.word	0x0800344f
 800338c:	08003629 	.word	0x08003629
 8003390:	08003629 	.word	0x08003629
 8003394:	08003629 	.word	0x08003629
 8003398:	08003629 	.word	0x08003629
 800339c:	08003629 	.word	0x08003629
 80033a0:	08003629 	.word	0x08003629
 80033a4:	08003629 	.word	0x08003629
 80033a8:	0800348f 	.word	0x0800348f
 80033ac:	08003629 	.word	0x08003629
 80033b0:	08003629 	.word	0x08003629
 80033b4:	08003629 	.word	0x08003629
 80033b8:	08003629 	.word	0x08003629
 80033bc:	08003629 	.word	0x08003629
 80033c0:	08003629 	.word	0x08003629
 80033c4:	08003629 	.word	0x08003629
 80033c8:	08003629 	.word	0x08003629
 80033cc:	08003629 	.word	0x08003629
 80033d0:	08003629 	.word	0x08003629
 80033d4:	08003629 	.word	0x08003629
 80033d8:	08003629 	.word	0x08003629
 80033dc:	08003629 	.word	0x08003629
 80033e0:	08003629 	.word	0x08003629
 80033e4:	08003629 	.word	0x08003629
 80033e8:	080034f1 	.word	0x080034f1
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	f000 8098 	beq.w	8003522 <StartStepperMotorsTask+0x422>
		if (!isSetFlag) { sprintf(cmd, "SPD=%d\r\n", (int)speed); sendMessageToUART(cmd); }
		break;
	case PARSER_MOT_STATE_FLAG:	// zmienna wysyłana cyklicznie, lub na żądanie (read only)
		if (!isSetFlag) { sprintf(cmd, "ST=%d\r\n", (int)DRV8834_getRobotState()); sendMessageToUART(cmd); }
		break;
	default: break;
 80033f2:	e119      	b.n	8003628 <StartStepperMotorsTask+0x528>
		if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? FORWARD : BALANCING));	// 1 = FORWARD, 0 = BALANCING
 80033f4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8117 	beq.w	800362c <StartStepperMotorsTask+0x52c>
 80033fe:	89fb      	ldrh	r3, [r7, #14]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <StartStepperMotorsTask+0x308>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <StartStepperMotorsTask+0x30a>
 8003408:	2305      	movs	r3, #5
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fe0c 	bl	8001028 <DRV8834_setRobotState>
		break;
 8003410:	e10c      	b.n	800362c <StartStepperMotorsTask+0x52c>
		if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? BACKWARD : BALANCING));	// analogicznie j.w.
 8003412:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 810a 	beq.w	8003630 <StartStepperMotorsTask+0x530>
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <StartStepperMotorsTask+0x326>
 8003422:	2302      	movs	r3, #2
 8003424:	e000      	b.n	8003428 <StartStepperMotorsTask+0x328>
 8003426:	2305      	movs	r3, #5
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fdfd 	bl	8001028 <DRV8834_setRobotState>
		break;
 800342e:	e0ff      	b.n	8003630 <StartStepperMotorsTask+0x530>
		if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? LEFT : BALANCING));
 8003430:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80fd 	beq.w	8003634 <StartStepperMotorsTask+0x534>
 800343a:	89fb      	ldrh	r3, [r7, #14]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <StartStepperMotorsTask+0x344>
 8003440:	2303      	movs	r3, #3
 8003442:	e000      	b.n	8003446 <StartStepperMotorsTask+0x346>
 8003444:	2305      	movs	r3, #5
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fdee 	bl	8001028 <DRV8834_setRobotState>
		break;
 800344c:	e0f2      	b.n	8003634 <StartStepperMotorsTask+0x534>
		if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? RIGHT : BALANCING));
 800344e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80f0 	beq.w	8003638 <StartStepperMotorsTask+0x538>
 8003458:	89fb      	ldrh	r3, [r7, #14]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d012      	beq.n	8003484 <StartStepperMotorsTask+0x384>
 800345e:	2304      	movs	r3, #4
 8003460:	e011      	b.n	8003486 <StartStepperMotorsTask+0x386>
 8003462:	bf00      	nop
 8003464:	200005f8 	.word	0x200005f8
 8003468:	40020000 	.word	0x40020000
 800346c:	20000688 	.word	0x20000688
 8003470:	40020400 	.word	0x40020400
 8003474:	200004e8 	.word	0x200004e8
 8003478:	08013820 	.word	0x08013820
 800347c:	0801382c 	.word	0x0801382c
 8003480:	200004f4 	.word	0x200004f4
 8003484:	2305      	movs	r3, #5
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fdce 	bl	8001028 <DRV8834_setRobotState>
		break;
 800348c:	e0d4      	b.n	8003638 <StartStepperMotorsTask+0x538>
		if (isSetFlag)
 800348e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <StartStepperMotorsTask+0x3b8>
			DRV8834_SetMicrostep(&leftMotor, (uint8_t) tmp);
 8003496:	89fb      	ldrh	r3, [r7, #14]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fe87 	bl	80011b4 <DRV8834_SetMicrostep>
			DRV8834_SetMicrostep(&rightMotor, (uint8_t) tmp);
 80034a6:	89fb      	ldrh	r3, [r7, #14]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd fe7f 	bl	80011b4 <DRV8834_SetMicrostep>
		break;
 80034b6:	e0c6      	b.n	8003646 <StartStepperMotorsTask+0x546>
			if(leftMotor.microstep == rightMotor.microstep)
 80034b8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80034bc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d109      	bne.n	80034d8 <StartStepperMotorsTask+0x3d8>
				sprintf(cmd, "MST=%d\r\n", leftMotor.microstep);
 80034c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80034c8:	461a      	mov	r2, r3
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4963      	ldr	r1, [pc, #396]	; (800365c <StartStepperMotorsTask+0x55c>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00c f8fd 	bl	800f6d0 <siprintf>
 80034d6:	e005      	b.n	80034e4 <StartStepperMotorsTask+0x3e4>
				sprintf(cmd, "#ERROR\r\n");
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4960      	ldr	r1, [pc, #384]	; (8003660 <StartStepperMotorsTask+0x560>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f00c f8f6 	bl	800f6d0 <siprintf>
			sendMessageToUART(cmd);
 80034e4:	f107 0310 	add.w	r3, r7, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fc7b 	bl	8003de4 <sendMessageToUART>
		break;
 80034ee:	e0aa      	b.n	8003646 <StartStepperMotorsTask+0x546>
		if (isSetFlag) DRV8834_setMaxFreq((uint16_t) tmp);
 80034f0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <StartStepperMotorsTask+0x402>
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd fdb6 	bl	800106c <DRV8834_setMaxFreq>
		break;
 8003500:	e0a1      	b.n	8003646 <StartStepperMotorsTask+0x546>
		else { sprintf(cmd, "MF=%d\r\n", (int) DRV8834_getMaxFreq()); sendMessageToUART(cmd); }
 8003502:	f7fd fddb 	bl	80010bc <DRV8834_getMaxFreq>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	f107 0310 	add.w	r3, r7, #16
 800350e:	4955      	ldr	r1, [pc, #340]	; (8003664 <StartStepperMotorsTask+0x564>)
 8003510:	4618      	mov	r0, r3
 8003512:	f00c f8dd 	bl	800f6d0 <siprintf>
 8003516:	f107 0310 	add.w	r3, r7, #16
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fc62 	bl	8003de4 <sendMessageToUART>
		break;
 8003520:	e091      	b.n	8003646 <StartStepperMotorsTask+0x546>
		if (isSetFlag) DRV8834_setMaxSpeed((uint16_t) tmp);
 8003522:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <StartStepperMotorsTask+0x434>
 800352a:	89fb      	ldrh	r3, [r7, #14]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fd8d 	bl	800104c <DRV8834_setMaxSpeed>
		break;
 8003532:	e088      	b.n	8003646 <StartStepperMotorsTask+0x546>
		else { sprintf(cmd, "MSP=%d\r\n", (int) DRV8834_getMaxSpeed()); sendMessageToUART(cmd); }
 8003534:	f7fd fdb6 	bl	80010a4 <DRV8834_getMaxSpeed>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	f107 0310 	add.w	r3, r7, #16
 8003540:	4949      	ldr	r1, [pc, #292]	; (8003668 <StartStepperMotorsTask+0x568>)
 8003542:	4618      	mov	r0, r3
 8003544:	f00c f8c4 	bl	800f6d0 <siprintf>
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fc49 	bl	8003de4 <sendMessageToUART>
		break;
 8003552:	e078      	b.n	8003646 <StartStepperMotorsTask+0x546>
		if (isSetFlag) robotTurningSpeed = tmp;
 8003554:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <StartStepperMotorsTask+0x464>
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		break;
 8003562:	e070      	b.n	8003646 <StartStepperMotorsTask+0x546>
		else { sprintf(cmd, "TS=%d\r\n", (int) robotTurningSpeed); sendMessageToUART(cmd); }
 8003564:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	493f      	ldr	r1, [pc, #252]	; (800366c <StartStepperMotorsTask+0x56c>)
 800356e:	4618      	mov	r0, r3
 8003570:	f00c f8ae 	bl	800f6d0 <siprintf>
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc33 	bl	8003de4 <sendMessageToUART>
		break;
 800357e:	e062      	b.n	8003646 <StartStepperMotorsTask+0x546>
		if (isSetFlag)	// tylko zapis, jest to komenda z programu użytkownika aby zablokować lub odblokować silniki
 8003580:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003584:	2b00      	cmp	r3, #0
 8003586:	d059      	beq.n	800363c <StartStepperMotorsTask+0x53c>
			if(DRV8834_getRobotState() != STOPPED && ((uint8_t) tmp == 1))
 8003588:	f7fd fd80 	bl	800108c <DRV8834_getRobotState>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00e      	beq.n	80035b0 <StartStepperMotorsTask+0x4b0>
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d10a      	bne.n	80035b0 <StartStepperMotorsTask+0x4b0>
				{ DRV8834_StopMotor(&leftMotor); DRV8834_StopMotor(&rightMotor); }
 800359a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fea8 	bl	80012f4 <DRV8834_StopMotor>
 80035a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fea3 	bl	80012f4 <DRV8834_StopMotor>
		break;	// zmienna wysyłana cyklicznie, lub na żądanie (read only)
 80035ae:	e045      	b.n	800363c <StartStepperMotorsTask+0x53c>
			else if(((uint8_t) tmp == 0))	// Jeśli otrzymano BL=0 to wystartuj silniki z ostatnią obliczoną prędkością
 80035b0:	89fb      	ldrh	r3, [r7, #14]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d141      	bne.n	800363c <StartStepperMotorsTask+0x53c>
				{ DRV8834_StartMotor(&leftMotor, speedLeft); DRV8834_StartMotor(&rightMotor, speedRight); }
 80035b8:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 80035bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd ff9a 	bl	80014fc <DRV8834_StartMotor>
 80035c8:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80035cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd ff92 	bl	80014fc <DRV8834_StartMotor>
		break;	// zmienna wysyłana cyklicznie, lub na żądanie (read only)
 80035d8:	e030      	b.n	800363c <StartStepperMotorsTask+0x53c>
		if (!isSetFlag) { sprintf(cmd, "SPD=%d\r\n", (int)speed); sendMessageToUART(cmd); }
 80035da:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d12e      	bne.n	8003640 <StartStepperMotorsTask+0x540>
 80035e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80035e6:	461a      	mov	r2, r3
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	4920      	ldr	r1, [pc, #128]	; (8003670 <StartStepperMotorsTask+0x570>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f00c f86e 	bl	800f6d0 <siprintf>
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fbf3 	bl	8003de4 <sendMessageToUART>
		break;
 80035fe:	e01f      	b.n	8003640 <StartStepperMotorsTask+0x540>
		if (!isSetFlag) { sprintf(cmd, "ST=%d\r\n", (int)DRV8834_getRobotState()); sendMessageToUART(cmd); }
 8003600:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11d      	bne.n	8003644 <StartStepperMotorsTask+0x544>
 8003608:	f7fd fd40 	bl	800108c <DRV8834_getRobotState>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	4917      	ldr	r1, [pc, #92]	; (8003674 <StartStepperMotorsTask+0x574>)
 8003616:	4618      	mov	r0, r3
 8003618:	f00c f85a 	bl	800f6d0 <siprintf>
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fbdf 	bl	8003de4 <sendMessageToUART>
		break;
 8003626:	e00d      	b.n	8003644 <StartStepperMotorsTask+0x544>
	default: break;
 8003628:	bf00      	nop
 800362a:	e00c      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;
 800362c:	bf00      	nop
 800362e:	e00a      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;
 8003630:	bf00      	nop
 8003632:	e008      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;
 8003634:	bf00      	nop
 8003636:	e006      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;
 8003638:	bf00      	nop
 800363a:	e004      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;	// zmienna wysyłana cyklicznie, lub na żądanie (read only)
 800363c:	bf00      	nop
 800363e:	e002      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <StartStepperMotorsTask+0x546>
		break;
 8003644:	bf00      	nop
	}
	// Wyczyść flagę i odblokuj mutex umożliwiając ustawienie kolejnej flagi przez parser
	osThreadFlagsClear(flags);
 8003646:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800364a:	4618      	mov	r0, r3
 800364c:	f007 f9c0 	bl	800a9d0 <osThreadFlagsClear>
	osSemaphoreRelease(SemaphoreFlagsMOTHandle);
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <StartStepperMotorsTask+0x578>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f007 fc9f 	bl	800af98 <osSemaphoreRelease>
	if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &speed, NULL, 20*KERNEL_TICKS_FOR_MS))
 800365a:	e5a5      	b.n	80031a8 <StartStepperMotorsTask+0xa8>
 800365c:	08013834 	.word	0x08013834
 8003660:	08013840 	.word	0x08013840
 8003664:	0801384c 	.word	0x0801384c
 8003668:	08013854 	.word	0x08013854
 800366c:	08013860 	.word	0x08013860
 8003670:	08013820 	.word	0x08013820
 8003674:	0801382c 	.word	0x0801382c
 8003678:	2000051c 	.word	0x2000051c

0800367c <StartOtherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOtherTask */
void StartOtherTask(void *argument)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b092      	sub	sp, #72	; 0x48
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOtherTask */
	uint16_t batteryVoltageReadings[OTH_BAT_NUM_OF_READINGS];	// Tablica na próbki pomiaru napięcia baterii przez ADC
	float batteryVoltageMin = OTH_BAT_DEFAULT_MIN_V;	// minimalny poziom napięcia baterii (zeskalowany do zakresu od 0 do OTH_ADC_VDDA_VALUE)
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <StartOtherTask+0x210>)
 8003686:	647b      	str	r3, [r7, #68]	; 0x44
	// maksymalny poziom baterii zeskalowany analogicznie i ograniczony od góry przez OTH_ADC_VDDA_VALUE
	float batteryVoltageMax = ((OTH_BAT_DEFAULT_MAX_V > OTH_ADC_VDDA_VALUE) ? OTH_ADC_VDDA_VALUE : OTH_BAT_DEFAULT_MAX_V);
 8003688:	4b81      	ldr	r3, [pc, #516]	; (8003890 <StartOtherTask+0x214>)
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t batteryVoltageMean = 0;	// zmienna pomocnicza do obliczenia średniej z próbek
 800368c:	2300      	movs	r3, #0
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t batteryLevel = 0;	// przechowuje aktualny poziom baterii w %
 8003690:	2300      	movs	r3, #0
 8003692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t flags;	// Zmienna pomocnicza dla flag przesyłanych do zadania przez parser
	char cmd[16];	// Buffer pomocniczy do wysyłania wiadomości (komend) przez UART

	// Jako że semafor został utworzony z dostępnym 1 tokenem, trzeba go zabrać.
	// Semafor jest zwalniany gdy DMA zbierze odpowiednią liczbę próbek od ADC.
	osSemaphoreAcquire(SemaphoreADC_DataReadyHandle, osWaitForever);
 8003696:	4b7f      	ldr	r3, [pc, #508]	; (8003894 <StartOtherTask+0x218>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f04f 31ff 	mov.w	r1, #4294967295
 800369e:	4618      	mov	r0, r3
 80036a0:	f007 fc28 	bl	800aef4 <osSemaphoreAcquire>
	// Wystartowanie timera, który po odliczeniu 1s wywoła wykonanie pomiaru przez ADC
	HAL_TIM_Base_Start(&htim3);
 80036a4:	487c      	ldr	r0, [pc, #496]	; (8003898 <StartOtherTask+0x21c>)
 80036a6:	f004 fde3 	bl	8008270 <HAL_TIM_Base_Start>
	// Wystartowanie ADC z DMA. DMA po zebraniu OTH_BAT_NUM_OF_READINGS próbek, wywoła przerwanie
	// które zwolni semafor i wykonają się komendy z pętli nieskończonej tego tasku.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)batteryVoltageReadings, OTH_BAT_NUM_OF_READINGS);
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	220a      	movs	r2, #10
 80036b0:	4619      	mov	r1, r3
 80036b2:	487a      	ldr	r0, [pc, #488]	; (800389c <StartOtherTask+0x220>)
 80036b4:	f001 feb4 	bl	8005420 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	  // Czekaj aż DMA zbierze wszystkie próbki
	  if(osSemaphoreAcquire(SemaphoreADC_DataReadyHandle, 200*KERNEL_TICKS_FOR_MS) == osOK)
 80036b8:	4b76      	ldr	r3, [pc, #472]	; (8003894 <StartOtherTask+0x218>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	21c8      	movs	r1, #200	; 0xc8
 80036be:	4618      	mov	r0, r3
 80036c0:	f007 fc18 	bl	800aef4 <osSemaphoreAcquire>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d15f      	bne.n	800378a <StartOtherTask+0x10e>
	  {
		  float tmp;
		  batteryVoltageMean = 0;	// zeruj średnią z pomiarów (z wartości z poprzedniej iteracji)
 80036ca:	2300      	movs	r3, #0
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  // Oblicz średnią z zebranych próbek
		  for(uint8_t i=0; i<OTH_BAT_NUM_OF_READINGS; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80036d4:	e00f      	b.n	80036f6 <StartOtherTask+0x7a>
		  {
			  batteryVoltageMean += batteryVoltageReadings[i];
 80036d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	3348      	adds	r3, #72	; 0x48
 80036de:	443b      	add	r3, r7
 80036e0:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80036e4:	461a      	mov	r2, r3
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	4413      	add	r3, r2
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		  for(uint8_t i=0; i<OTH_BAT_NUM_OF_READINGS; i++)
 80036ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036f0:	3301      	adds	r3, #1
 80036f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80036f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036fa:	2b09      	cmp	r3, #9
 80036fc:	d9eb      	bls.n	80036d6 <StartOtherTask+0x5a>
		  }
		  batteryVoltageMean /= OTH_BAT_NUM_OF_READINGS;
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <StartOtherTask+0x224>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c

		  // Zeskaluj surową średnią wartość uzyskaną z ADC do zakresu napięciowego ADC
		  tmp = map(batteryVoltageMean, 0, OTH_ADC_MAX_VALUE, 0, OTH_ADC_VDDA_VALUE);
 800370a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003714:	ed9f 2a63 	vldr	s4, [pc, #396]	; 80038a4 <StartOtherTask+0x228>
 8003718:	eddf 1a63 	vldr	s3, [pc, #396]	; 80038a8 <StartOtherTask+0x22c>
 800371c:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80038ac <StartOtherTask+0x230>
 8003720:	eddf 0a61 	vldr	s1, [pc, #388]	; 80038a8 <StartOtherTask+0x22c>
 8003724:	eeb0 0a67 	vmov.f32	s0, s15
 8003728:	f000 fa44 	bl	8003bb4 <map>
 800372c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		  // Jeśli zeskalowana wartość jest mniejsza od min ustawionej wartości baterii to sprowadź ją do batteryVoltageMin
		  if(tmp < batteryVoltageMin)
 8003730:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003734:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	d501      	bpl.n	8003746 <StartOtherTask+0xca>
			  tmp = batteryVoltageMin;
 8003742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
		  // Oblicz poziom baterii w % skalując poziom napięcia na ADC do zakresu 0-100
		  batteryLevel = (uint8_t) map(tmp, batteryVoltageMin, batteryVoltageMax, 0, 100);
 8003746:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80038b0 <StartOtherTask+0x234>
 800374a:	eddf 1a57 	vldr	s3, [pc, #348]	; 80038a8 <StartOtherTask+0x22c>
 800374e:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 8003752:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8003756:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800375a:	f000 fa2b 	bl	8003bb4 <map>
 800375e:	eef0 7a40 	vmov.f32	s15, s0
 8003762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003766:	edc7 7a00 	vstr	s15, [r7]
 800376a:	783b      	ldrb	r3, [r7, #0]
 800376c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		  // Wyślij aktualny poziom baterii przez UART
		  sprintf(cmd, "BL=%d\r\n", (int) batteryLevel);
 8003770:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	494e      	ldr	r1, [pc, #312]	; (80038b4 <StartOtherTask+0x238>)
 800377a:	4618      	mov	r0, r3
 800377c:	f00b ffa8 	bl	800f6d0 <siprintf>
		  sendMessageToUART(cmd);
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fb2d 	bl	8003de4 <sendMessageToUART>
	  }

	  // Sprawdzenie czy otrzymano jakieś flagi (zapytania lub rozkazy zapisu do zmiennej)
	  if(osThreadFlagsWait(PID_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < PID_FLAGS)
 800378a:	2200      	movs	r2, #0
 800378c:	2102      	movs	r1, #2
 800378e:	20ff      	movs	r0, #255	; 0xff
 8003790:	f007 f97d 	bl	800aa8e <osThreadFlagsWait>
 8003794:	4603      	mov	r3, r0
 8003796:	2bfe      	cmp	r3, #254	; 0xfe
 8003798:	d88e      	bhi.n	80036b8 <StartOtherTask+0x3c>
	  {
		float tmp;
		uint8_t isSetFlag;
		// Pobranie otrzymanych flag
		flags = osThreadFlagsGet();
 800379a:	f007 f957 	bl	800aa4c <osThreadFlagsGet>
 800379e:	4603      	mov	r3, r0
 80037a0:	873b      	strh	r3, [r7, #56]	; 0x38

		// Sprawdzenie czy otrzymano flagę zapisu do danej zmiennej
		if((isSetFlag = CHECK_BIT(flags, PARSER_OTH_SET_FLAG)))
 80037a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80037b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <StartOtherTask+0x160>
		{
			osMessageQueueGet(QueueUartOTHHandle, &tmp, 0, 0);
 80037be:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <StartOtherTask+0x23c>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	f107 0108 	add.w	r1, r7, #8
 80037c6:	2300      	movs	r3, #0
 80037c8:	2200      	movs	r2, #0
 80037ca:	f007 fcfd 	bl	800b1c8 <osMessageQueueGet>
			osThreadFlagsClear(PARSER_OTH_SET_FLAG);
 80037ce:	2080      	movs	r0, #128	; 0x80
 80037d0:	f007 f8fe 	bl	800a9d0 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_OTH_SET_FLAG);
 80037d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037da:	873b      	strh	r3, [r7, #56]	; 0x38
		}

		// Sprawdź której zmiennej dotyczy flaga
		// Jeśli jest to komenda zapisu to przypisz wartość z kolejki do danej zmiennej
		// Jeśli jest to komenda odczytu to wyślij przez UART wartość tej zmiennej
		switch(flags)
 80037dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d02f      	beq.n	8003842 <StartOtherTask+0x1c6>
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	dc44      	bgt.n	8003870 <StartOtherTask+0x1f4>
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d002      	beq.n	80037f0 <StartOtherTask+0x174>
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d012      	beq.n	8003814 <StartOtherTask+0x198>
			if (isSetFlag) batteryVoltageMax = tmp;
			else {
				sprintf(cmd, "BMX=%.2f\r\n", batteryVoltageMax);
				sendMessageToUART(cmd); }
			break;
		default: break;
 80037ee:	e03f      	b.n	8003870 <StartOtherTask+0x1f4>
			if (!isSetFlag) { sprintf(cmd, "BL=%d\r\n", (int) batteryLevel); sendMessageToUART(cmd); }
 80037f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d13d      	bne.n	8003874 <StartOtherTask+0x1f8>
 80037f8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	492c      	ldr	r1, [pc, #176]	; (80038b4 <StartOtherTask+0x238>)
 8003802:	4618      	mov	r0, r3
 8003804:	f00b ff64 	bl	800f6d0 <siprintf>
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fae9 	bl	8003de4 <sendMessageToUART>
			break;
 8003812:	e02f      	b.n	8003874 <StartOtherTask+0x1f8>
			if (isSetFlag) batteryVoltageMin = tmp;
 8003814:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <StartOtherTask+0x1a6>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8003820:	e029      	b.n	8003876 <StartOtherTask+0x1fa>
			else { sprintf(cmd, "BMN=%.2f\r\n", batteryVoltageMin); sendMessageToUART(cmd); }
 8003822:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003824:	f7fc fea8 	bl	8000578 <__aeabi_f2d>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	f107 000c 	add.w	r0, r7, #12
 8003830:	4922      	ldr	r1, [pc, #136]	; (80038bc <StartOtherTask+0x240>)
 8003832:	f00b ff4d 	bl	800f6d0 <siprintf>
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fad2 	bl	8003de4 <sendMessageToUART>
			break;
 8003840:	e019      	b.n	8003876 <StartOtherTask+0x1fa>
			if (isSetFlag) batteryVoltageMax = tmp;
 8003842:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <StartOtherTask+0x1d4>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800384e:	e012      	b.n	8003876 <StartOtherTask+0x1fa>
				sprintf(cmd, "BMX=%.2f\r\n", batteryVoltageMax);
 8003850:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003852:	f7fc fe91 	bl	8000578 <__aeabi_f2d>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	f107 000c 	add.w	r0, r7, #12
 800385e:	4918      	ldr	r1, [pc, #96]	; (80038c0 <StartOtherTask+0x244>)
 8003860:	f00b ff36 	bl	800f6d0 <siprintf>
				sendMessageToUART(cmd); }
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fabb 	bl	8003de4 <sendMessageToUART>
			break;
 800386e:	e002      	b.n	8003876 <StartOtherTask+0x1fa>
		default: break;
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <StartOtherTask+0x1fa>
			break;
 8003874:	bf00      	nop
		}
		// Wyczyść flagę i odblokuj mutex umożliwiając ustawienie kolejnej flagi przez parser
		osThreadFlagsClear(flags);
 8003876:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003878:	4618      	mov	r0, r3
 800387a:	f007 f8a9 	bl	800a9d0 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsOTHHandle);
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <StartOtherTask+0x248>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f007 fb88 	bl	800af98 <osSemaphoreRelease>
	  if(osSemaphoreAcquire(SemaphoreADC_DataReadyHandle, 200*KERNEL_TICKS_FOR_MS) == osOK)
 8003888:	e716      	b.n	80036b8 <StartOtherTask+0x3c>
 800388a:	bf00      	nop
 800388c:	4005c28f 	.word	0x4005c28f
 8003890:	403b851f 	.word	0x403b851f
 8003894:	2000050c 	.word	0x2000050c
 8003898:	20000640 	.word	0x20000640
 800389c:	2000020c 	.word	0x2000020c
 80038a0:	cccccccd 	.word	0xcccccccd
 80038a4:	40533333 	.word	0x40533333
 80038a8:	00000000 	.word	0x00000000
 80038ac:	45800000 	.word	0x45800000
 80038b0:	42c80000 	.word	0x42c80000
 80038b4:	08013868 	.word	0x08013868
 80038b8:	200004f8 	.word	0x200004f8
 80038bc:	08013870 	.word	0x08013870
 80038c0:	0801387c 	.word	0x0801387c
 80038c4:	20000520 	.word	0x20000520

080038c8 <HAL_GPIO_EXTI_Callback>:

// ********************* SEKCJA PRZERWAŃ ********************* //

// Przerwania zewnętrzne
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
	// Przerwanie generowane gdy pomiar z akcelerometru jest gotowy
	if(GPIO_Pin == LSM6_Interrupt_Pin)
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d104      	bne.n	80038e4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		// Zwolnienie semafora odblokowujące zadanie odczytu pomiaru z IMU
		osSemaphoreRelease(SemaphoreLSM6_DataReadyHandle);
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <HAL_GPIO_EXTI_Callback+0x24>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f007 fb5a 	bl	800af98 <osSemaphoreRelease>
		;	// W praktyce przy częstotliwości pomiaru 52Hz potrzebne jest tylko jedno prerwanie, ponieważ oba pomiary są
			// gotowe niemal w identycznym czasie. Implementacje na obu przerwaniach można wykonać na flagach (większych
			// od tych wykorzystywanych przez parser). Można spróbować też implementacji na semaforze zliczającym.
	}
#endif
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000508 	.word	0x20000508

080038f0 <HAL_ADC_ConvCpltCallback>:

// Przerwanie od ADC (a raczej DMA) oznaczające zebranie wszystkich próbek pomiarowych
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a05      	ldr	r2, [pc, #20]	; (8003914 <HAL_ADC_ConvCpltCallback+0x24>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d104      	bne.n	800390c <HAL_ADC_ConvCpltCallback+0x1c>
	{
		// Zwolnienie semafora odblokowujące zadanie z pomiarem napięcia baterii
		osSemaphoreRelease(SemaphoreADC_DataReadyHandle);
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_ADC_ConvCpltCallback+0x28>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f007 fb46 	bl	800af98 <osSemaphoreRelease>
	}
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40012000 	.word	0x40012000
 8003918:	2000050c 	.word	0x2000050c

0800391c <HAL_UARTEx_RxEventCallback>:

// Przerwanie od UART Rx (i DMA) oznaczające, że jakieś dane są dostępne do odczytu w buforze DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a19      	ldr	r2, [pc, #100]	; (8003994 <HAL_UARTEx_RxEventCallback+0x78>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12b      	bne.n	800398a <HAL_UARTEx_RxEventCallback+0x6e>
	{
		// Zablokowanie dostępu do Rx RingBuffera mutexem
		osMutexAcquire(MutexRingBufferRxHandle, osWaitForever);
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_UARTEx_RxEventCallback+0x7c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f04f 31ff 	mov.w	r1, #4294967295
 800393a:	4618      	mov	r0, r3
 800393c:	f007 f9c9 	bl	800acd2 <osMutexAcquire>
		// Kopiuj znaki (bajty) do ring buffera
		for(uint16_t i=0; i<Size; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	81fb      	strh	r3, [r7, #14]
 8003944:	e013      	b.n	800396e <HAL_UARTEx_RxEventCallback+0x52>
		{
			RB_Write(&Rx_RingBuffer, Tmp_Rx_Buffer[i]);
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_UARTEx_RxEventCallback+0x80>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	4619      	mov	r1, r3
 800394e:	4814      	ldr	r0, [pc, #80]	; (80039a0 <HAL_UARTEx_RxEventCallback+0x84>)
 8003950:	f001 f812 	bl	8004978 <RB_Write>
			// Jeśli wykryto znak nowej linii, zwolnij jeden token semafora zliczającego dostępne komendy
			if(Tmp_Rx_Buffer[i] == '\n')
 8003954:	89fb      	ldrh	r3, [r7, #14]
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_UARTEx_RxEventCallback+0x80>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	2b0a      	cmp	r3, #10
 800395c:	d104      	bne.n	8003968 <HAL_UARTEx_RxEventCallback+0x4c>
			{
#if(USE_CUBE_MONITOR == 1)
				RxLines++;
#endif
				osSemaphoreRelease(SemRxLineAvailableHandle);
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_UARTEx_RxEventCallback+0x88>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f007 fb18 	bl	800af98 <osSemaphoreRelease>
		for(uint16_t i=0; i<Size; i++)
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	3301      	adds	r3, #1
 800396c:	81fb      	strh	r3, [r7, #14]
 800396e:	89fa      	ldrh	r2, [r7, #14]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3e7      	bcc.n	8003946 <HAL_UARTEx_RxEventCallback+0x2a>
			}
		}
		// Po odbiorze paczki danych, włącz z powrotem nasłuchiwanie przez DMA i odblokuj mutex
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Tmp_Rx_Buffer, TMP_DMAUART_BUFFER_SIZE);
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	4908      	ldr	r1, [pc, #32]	; (800399c <HAL_UARTEx_RxEventCallback+0x80>)
 800397a:	480b      	ldr	r0, [pc, #44]	; (80039a8 <HAL_UARTEx_RxEventCallback+0x8c>)
 800397c:	f005 fd76 	bl	800946c <HAL_UARTEx_ReceiveToIdle_DMA>
		osMutexRelease(MutexRingBufferRxHandle);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_UARTEx_RxEventCallback+0x7c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f007 f9ef 	bl	800ad68 <osMutexRelease>
	}
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40004400 	.word	0x40004400
 8003998:	20000500 	.word	0x20000500
 800399c:	200002b4 	.word	0x200002b4
 80039a0:	20000334 	.word	0x20000334
 80039a4:	200004cc 	.word	0x200004cc
 80039a8:	200006d0 	.word	0x200006d0

080039ac <HAL_UART_TxCpltCallback>:

// Przerwanie od UART Tx, oznaczające że ostatni transfer danych przez DMA zakończył się
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <HAL_UART_TxCpltCallback+0x24>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d104      	bne.n	80039c8 <HAL_UART_TxCpltCallback+0x1c>
	{
		// Zwolnienie semafora, odblokowujące możliwość wysłania kolejnej komendy przez UART Tx
		osSemaphoreRelease(SemaphoreUART_TxCompleteHandle);
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_UART_TxCpltCallback+0x28>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f007 fae8 	bl	800af98 <osSemaphoreRelease>
	}
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40004400 	.word	0x40004400
 80039d4:	20000510 	.word	0x20000510

080039d8 <Parser_ReceiveLineCallback>:

// ********************* SEKCJA CALLBACKÓW DLA BIBLIOTEK ********************* //

// Callback parsera - pobranie jednej linii (komendy) do sparsowania
Parser_StatusTypeDef Parser_ReceiveLineCallback(char* message)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	  uint8_t i = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
	  uint8_t character;

	  // Zablokuj dostęp do Rx RingBuffera
	  osMutexAcquire(MutexRingBufferRxHandle, osWaitForever);
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <Parser_ReceiveLineCallback+0x70>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	4618      	mov	r0, r3
 80039ee:	f007 f970 	bl	800acd2 <osMutexAcquire>
	  // Odczytaj jedną linie z Rx RingBuffera
	  while(RB_Read(&Rx_RingBuffer, &character) == RB_OK)
 80039f2:	e016      	b.n	8003a22 <Parser_ReceiveLineCallback+0x4a>
	  {
		  // Jeśli napotkano znak końca linii zakończ odczytywanie
		  if(character == '\n')
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	2b0a      	cmp	r3, #10
 80039f8:	d10b      	bne.n	8003a12 <Parser_ReceiveLineCallback+0x3a>
		  {
			  // Zamień znak końca linii na NULL
			  *(message + i) = 0;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
#if(USE_CUBE_MONITOR == 1)
			  RxLines--;
#endif
			  // Odblokuj mutex Rx RingBuffera
			  osMutexRelease(MutexRingBufferRxHandle);
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <Parser_ReceiveLineCallback+0x70>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f007 f9ad 	bl	800ad68 <osMutexRelease>
			  return PARSER_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e016      	b.n	8003a40 <Parser_ReceiveLineCallback+0x68>
		  }
		  // Jeśli nie napotkano znaku końca linii zapisuj do message kolejny znak
		  *(message + i) = character;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	7bba      	ldrb	r2, [r7, #14]
 8003a1a:	701a      	strb	r2, [r3, #0]
		  i++;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
	  while(RB_Read(&Rx_RingBuffer, &character) == RB_OK)
 8003a22:	f107 030e 	add.w	r3, r7, #14
 8003a26:	4619      	mov	r1, r3
 8003a28:	4808      	ldr	r0, [pc, #32]	; (8003a4c <Parser_ReceiveLineCallback+0x74>)
 8003a2a:	f000 ff77 	bl	800491c <RB_Read>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0df      	beq.n	80039f4 <Parser_ReceiveLineCallback+0x1c>
	  }
	  // Jeśli pętla zakończyła się bez napotkania znaku końca linii, to znaczy że
	  // RingBuffer jest pusty i wystąpił jakiś błąd w przesyłaniu komendy
	  osMutexRelease(MutexRingBufferRxHandle);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <Parser_ReceiveLineCallback+0x70>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f007 f995 	bl	800ad68 <osMutexRelease>
	  return PARSER_ERROR;
 8003a3e:	2303      	movs	r3, #3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000500 	.word	0x20000500
 8003a4c:	20000334 	.word	0x20000334

08003a50 <Parser_PID_PrintCallback>:

// Callbacki parsera - funkcje wysyłające flagi i wartości do zadań
void Parser_PID_PrintCallback(uint8_t flag, float value)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	ed87 0a00 	vstr	s0, [r7]
 8003a5c:	71fb      	strb	r3, [r7, #7]
	// Jeśli ustawiona jest flaga zapisu to wrzuć value do kolejki
	if(CHECK_BIT(flag, PARSER_PID_SET_FLAG))
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da07      	bge.n	8003a76 <Parser_PID_PrintCallback+0x26>
		osMessageQueuePut(QueueUartPIDHandle, &value, 0, osWaitForever);
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <Parser_PID_PrintCallback+0x4c>)
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	2200      	movs	r2, #0
 8003a72:	f007 fb49 	bl	800b108 <osMessageQueuePut>
	// Semafor blokujący ustawienie flag, jeśli poprzednie nie były jeszcze odczytane
	osSemaphoreAcquire(SemaphoreFlagsPIDHandle, osWaitForever);
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <Parser_PID_PrintCallback+0x50>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f007 fa38 	bl	800aef4 <osSemaphoreAcquire>
	// Ustaw odpowiednie flagi w zadaniu
	osThreadFlagsSet(PIDTaskHandle, flag);
 8003a84:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <Parser_PID_PrintCallback+0x54>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	79fa      	ldrb	r2, [r7, #7]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f006 ff51 	bl	800a934 <osThreadFlagsSet>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200004ec 	.word	0x200004ec
 8003aa0:	20000514 	.word	0x20000514
 8003aa4:	200004d8 	.word	0x200004d8

08003aa8 <Parser_IMU_PrintCallback>:
// Pozostałe callbacki są wykonane analogicznie, na osobnych kolejkach i zadaniach (flagach)
void Parser_IMU_PrintCallback(uint8_t flag, float value)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	ed87 0a00 	vstr	s0, [r7]
 8003ab4:	71fb      	strb	r3, [r7, #7]
	if(CHECK_BIT(flag, PARSER_IMU_SET_FLAG))
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da07      	bge.n	8003ace <Parser_IMU_PrintCallback+0x26>
		osMessageQueuePut(QueueUartIMUHandle, &value, 0, osWaitForever);
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <Parser_IMU_PrintCallback+0x4c>)
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f007 fb1d 	bl	800b108 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsIMUHandle, osWaitForever);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <Parser_IMU_PrintCallback+0x50>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f007 fa0c 	bl	800aef4 <osSemaphoreAcquire>
	osThreadFlagsSet(IMU_TaskHandle, flag);
 8003adc:	4b07      	ldr	r3, [pc, #28]	; (8003afc <Parser_IMU_PrintCallback+0x54>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	79fa      	ldrb	r2, [r7, #7]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f006 ff25 	bl	800a934 <osThreadFlagsSet>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200004f0 	.word	0x200004f0
 8003af8:	20000518 	.word	0x20000518
 8003afc:	200004d4 	.word	0x200004d4

08003b00 <Parser_MOT_PrintCallback>:

void Parser_MOT_PrintCallback(uint16_t flag, uint16_t value)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	80fb      	strh	r3, [r7, #6]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80bb      	strh	r3, [r7, #4]
	if(CHECK_BIT(flag, PARSER_MOT_SET_FLAG))
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <Parser_MOT_PrintCallback+0x2a>
		osMessageQueuePut(QueueUartMOTHandle, &value, 0, osWaitForever);
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <Parser_MOT_PrintCallback+0x50>)
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	1d39      	adds	r1, r7, #4
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	2200      	movs	r2, #0
 8003b26:	f007 faef 	bl	800b108 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsMOTHandle, osWaitForever);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <Parser_MOT_PrintCallback+0x54>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003b32:	4618      	mov	r0, r3
 8003b34:	f007 f9de 	bl	800aef4 <osSemaphoreAcquire>
	osThreadFlagsSet(StepperMotorsTaHandle, flag);
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <Parser_MOT_PrintCallback+0x58>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f006 fef7 	bl	800a934 <osThreadFlagsSet>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200004f4 	.word	0x200004f4
 8003b54:	2000051c 	.word	0x2000051c
 8003b58:	200004dc 	.word	0x200004dc

08003b5c <Parser_OTH_PrintCallback>:

void Parser_OTH_PrintCallback(uint8_t flag, float value)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	ed87 0a00 	vstr	s0, [r7]
 8003b68:	71fb      	strb	r3, [r7, #7]
	if(CHECK_BIT(flag, PARSER_OTH_SET_FLAG))
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da07      	bge.n	8003b82 <Parser_OTH_PrintCallback+0x26>
		osMessageQueuePut(QueueUartOTHHandle, &value, 0, osWaitForever);
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <Parser_OTH_PrintCallback+0x4c>)
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	4639      	mov	r1, r7
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f007 fac3 	bl	800b108 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsOTHHandle, osWaitForever);
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <Parser_OTH_PrintCallback+0x50>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f007 f9b2 	bl	800aef4 <osSemaphoreAcquire>
	osThreadFlagsSet(OtherTaskHandle, flag);
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <Parser_OTH_PrintCallback+0x54>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	79fa      	ldrb	r2, [r7, #7]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f006 fecb 	bl	800a934 <osThreadFlagsSet>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200004f8 	.word	0x200004f8
 8003bac:	20000520 	.word	0x20000520
 8003bb0:	200004e0 	.word	0x200004e0

08003bb4 <map>:

// ********************* SEKCJA INNYCH FUNKCJI ********************* //

// Funkcja skalująca wartość z jednego zakresu do drugiego zakresu
float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	ed87 0a05 	vstr	s0, [r7, #20]
 8003bbe:	edc7 0a04 	vstr	s1, [r7, #16]
 8003bc2:	ed87 1a03 	vstr	s2, [r7, #12]
 8003bc6:	edc7 1a02 	vstr	s3, [r7, #8]
 8003bca:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003bce:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bda:	edd7 6a01 	vldr	s13, [r7, #4]
 8003bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8003be2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003be6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bea:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	371c      	adds	r7, #28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <complementaryFilter>:

// Funkcja realizująca filtr komplementarny
float complementaryFilter(float gyroX, float accAngle, float prevAngle, float gx_off)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c1c:	edc7 0a02 	vstr	s1, [r7, #8]
 8003c20:	ed87 1a01 	vstr	s2, [r7, #4]
 8003c24:	edc7 1a00 	vstr	s3, [r7]
	return (COMP_FILTER_GAIN * (prevAngle + ((gyroX*IMU_GYRO_SENSITIVITY + gx_off)/IMU_SAMPLE_TIME)))
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <complementaryFilter+0xe0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fc fca3 	bl	8000578 <__aeabi_f2d>
 8003c32:	4604      	mov	r4, r0
 8003c34:	460d      	mov	r5, r1
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fc fc9e 	bl	8000578 <__aeabi_f2d>
 8003c3c:	4680      	mov	r8, r0
 8003c3e:	4689      	mov	r9, r1
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7fc fc99 	bl	8000578 <__aeabi_f2d>
 8003c46:	a328      	add	r3, pc, #160	; (adr r3, 8003ce8 <complementaryFilter+0xd8>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fcec 	bl	8000628 <__aeabi_dmul>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4692      	mov	sl, r2
 8003c56:	469b      	mov	fp, r3
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f7fc fc8d 	bl	8000578 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4650      	mov	r0, sl
 8003c64:	4659      	mov	r1, fp
 8003c66:	f7fc fb29 	bl	80002bc <__adddf3>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <complementaryFilter+0xe4>)
 8003c78:	f7fc fe00 	bl	800087c <__aeabi_ddiv>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4640      	mov	r0, r8
 8003c82:	4649      	mov	r1, r9
 8003c84:	f7fc fb1a 	bl	80002bc <__adddf3>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fcca 	bl	8000628 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4614      	mov	r4, r2
 8003c9a:	461d      	mov	r5, r3
			+ ((1 - COMP_FILTER_GAIN) * accAngle);
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <complementaryFilter+0xe0>)
 8003c9e:	edd3 7a00 	vldr	s15, [r3]
 8003ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	ee17 0a90 	vmov	r0, s15
 8003cb6:	f7fc fc5f 	bl	8000578 <__aeabi_f2d>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	f7fc fafb 	bl	80002bc <__adddf3>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fc ffa3 	bl	8000c18 <__aeabi_d2f>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	ee07 3a90 	vmov	s15, r3
}
 8003cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	1eb851ec 	.word	0x1eb851ec
 8003cec:	3f81eb85 	.word	0x3f81eb85
 8003cf0:	20000004 	.word	0x20000004
 8003cf4:	404a0000 	.word	0x404a0000

08003cf8 <calculateAccAngle>:

// Funkcja obliczająca kąt wychylenia tylko na podstawie wartości z akcelerometru
float calculateAccAngle(float accY, float accZ, float ay_off, float az_off)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	ed2d 8b02 	vpush	{d8}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d06:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d0a:	ed87 1a01 	vstr	s2, [r7, #4]
 8003d0e:	edc7 1a00 	vstr	s3, [r7]
	return (atan2((accY*IMU_ACC_SENSITIVITY + ay_off), (accZ*IMU_ACC_SENSITIVITY + az_off)) * 180.0/M_PI);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7fc fc30 	bl	8000578 <__aeabi_f2d>
 8003d18:	a330      	add	r3, pc, #192	; (adr r3, 8003ddc <calculateAccAngle+0xe4>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fc83 	bl	8000628 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4614      	mov	r4, r2
 8003d28:	461d      	mov	r5, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fc fc24 	bl	8000578 <__aeabi_f2d>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4620      	mov	r0, r4
 8003d36:	4629      	mov	r1, r5
 8003d38:	f7fc fac0 	bl	80002bc <__adddf3>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	ec43 2b18 	vmov	d8, r2, r3
 8003d44:	68b8      	ldr	r0, [r7, #8]
 8003d46:	f7fc fc17 	bl	8000578 <__aeabi_f2d>
 8003d4a:	a324      	add	r3, pc, #144	; (adr r3, 8003ddc <calculateAccAngle+0xe4>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fc6a 	bl	8000628 <__aeabi_dmul>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	6838      	ldr	r0, [r7, #0]
 8003d5e:	f7fc fc0b 	bl	8000578 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc faa7 	bl	80002bc <__adddf3>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	ec43 2b17 	vmov	d7, r2, r3
 8003d76:	eeb0 1a47 	vmov.f32	s2, s14
 8003d7a:	eef0 1a67 	vmov.f32	s3, s15
 8003d7e:	eeb0 0a48 	vmov.f32	s0, s16
 8003d82:	eef0 0a68 	vmov.f32	s1, s17
 8003d86:	f00f f955 	bl	8013034 <atan2>
 8003d8a:	ec51 0b10 	vmov	r0, r1, d0
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <calculateAccAngle+0xe0>)
 8003d94:	f7fc fc48 	bl	8000628 <__aeabi_dmul>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	a30b      	add	r3, pc, #44	; (adr r3, 8003dd0 <calculateAccAngle+0xd8>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fd69 	bl	800087c <__aeabi_ddiv>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	f7fc ff31 	bl	8000c18 <__aeabi_d2f>
 8003db6:	4603      	mov	r3, r0
 8003db8:	ee07 3a90 	vmov	s15, r3
}
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	ecbd 8b02 	vpop	{d8}
 8003dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	54442d18 	.word	0x54442d18
 8003dd4:	400921fb 	.word	0x400921fb
 8003dd8:	40668000 	.word	0x40668000
 8003ddc:	0a5accd5 	.word	0x0a5accd5
 8003de0:	3f0ffb48 	.word	0x3f0ffb48

08003de4 <sendMessageToUART>:

// Funkcja, dzięki której wszystkie taski mogą wysyłać komendy (komunikaty) przez UART
void sendMessageToUART(char* msg)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	// Zablokuj dostep do Tx RingBuffera mutexem
	osMutexAcquire(MutexRingBufferTxHandle, osWaitForever);
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <sendMessageToUART+0x58>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	4618      	mov	r0, r3
 8003df6:	f006 ff6c 	bl	800acd2 <osMutexAcquire>
	// Pobierz długość wiadomości
	uint8_t length = strlen(msg);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc f9fa 	bl	80001f4 <strlen>
 8003e00:	4603      	mov	r3, r0
 8003e02:	73bb      	strb	r3, [r7, #14]
	// Skopiuj ją do Tx RingBuffera
	for(uint8_t i = 0; i < length; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e00a      	b.n	8003e20 <sendMessageToUART+0x3c>
		RB_Write(&Tx_RingBuffer, (uint8_t) *(msg+i));
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	480a      	ldr	r0, [pc, #40]	; (8003e40 <sendMessageToUART+0x5c>)
 8003e16:	f000 fdaf 	bl	8004978 <RB_Write>
	for(uint8_t i = 0; i < length; i++)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3f0      	bcc.n	8003e0a <sendMessageToUART+0x26>
	// Oblokuj dostęp do Tx RingBuffera
	osMutexRelease(MutexRingBufferTxHandle);
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <sendMessageToUART+0x58>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f006 ff9b 	bl	800ad68 <osMutexRelease>
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000504 	.word	0x20000504
 8003e40:	20000400 	.word	0x20000400

08003e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a44      	ldr	r2, [pc, #272]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	6313      	str	r3, [r2, #48]	; 0x30
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a36      	ldr	r2, [pc, #216]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a2f      	ldr	r2, [pc, #188]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <MX_GPIO_Init+0x130>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin, GPIO_PIN_RESET);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f44f 7158 	mov.w	r1, #864	; 0x360
 8003ed0:	4829      	ldr	r0, [pc, #164]	; (8003f78 <MX_GPIO_Init+0x134>)
 8003ed2:	f002 fcc1 	bl	8006858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, rightMotor_M0_Pin|rightMotor_M1_Pin, GPIO_PIN_RESET);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2130      	movs	r1, #48	; 0x30
 8003eda:	4828      	ldr	r0, [pc, #160]	; (8003f7c <MX_GPIO_Init+0x138>)
 8003edc:	f002 fcbc 	bl	8006858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ee6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4822      	ldr	r0, [pc, #136]	; (8003f80 <MX_GPIO_Init+0x13c>)
 8003ef8:	f002 fb2a 	bl	8006550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin;
 8003efc:	f44f 7358 	mov.w	r3, #864	; 0x360
 8003f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	4619      	mov	r1, r3
 8003f14:	4818      	ldr	r0, [pc, #96]	; (8003f78 <MX_GPIO_Init+0x134>)
 8003f16:	f002 fb1b 	bl	8006550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt_Pin;
 8003f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4811      	ldr	r0, [pc, #68]	; (8003f78 <MX_GPIO_Init+0x134>)
 8003f32:	f002 fb0d 	bl	8006550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt2_Pin;
 8003f36:	2308      	movs	r3, #8
 8003f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt2_GPIO_Port, &GPIO_InitStruct);
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	4619      	mov	r1, r3
 8003f4a:	480c      	ldr	r0, [pc, #48]	; (8003f7c <MX_GPIO_Init+0x138>)
 8003f4c:	f002 fb00 	bl	8006550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = rightMotor_M0_Pin|rightMotor_M1_Pin;
 8003f50:	2330      	movs	r3, #48	; 0x30
 8003f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f54:	2301      	movs	r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	4805      	ldr	r0, [pc, #20]	; (8003f7c <MX_GPIO_Init+0x138>)
 8003f68:	f002 faf2 	bl	8006550 <HAL_GPIO_Init>

}
 8003f6c:	bf00      	nop
 8003f6e:	3728      	adds	r7, #40	; 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020000 	.word	0x40020000
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	40020800 	.word	0x40020800

08003f84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <MX_I2C1_Init+0x54>)
 8003f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003f90:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <MX_I2C1_Init+0x58>)
 8003f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fc0:	4804      	ldr	r0, [pc, #16]	; (8003fd4 <MX_I2C1_Init+0x50>)
 8003fc2:	f002 fc7b 	bl	80068bc <HAL_I2C_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fcc:	f000 f91e 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000524 	.word	0x20000524
 8003fd8:	40005400 	.word	0x40005400
 8003fdc:	00061a80 	.word	0x00061a80

08003fe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	; (8004064 <HAL_I2C_MspInit+0x84>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d12c      	bne.n	800405c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_I2C_MspInit+0x88>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_I2C_MspInit+0x88>)
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_I2C_MspInit+0x88>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800401e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004024:	2312      	movs	r3, #18
 8004026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004028:	2301      	movs	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402c:	2303      	movs	r3, #3
 800402e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004030:	2304      	movs	r3, #4
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4619      	mov	r1, r3
 800403a:	480c      	ldr	r0, [pc, #48]	; (800406c <HAL_I2C_MspInit+0x8c>)
 800403c:	f002 fa88 	bl	8006550 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_I2C_MspInit+0x88>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_I2C_MspInit+0x88>)
 800404a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800404e:	6413      	str	r3, [r2, #64]	; 0x40
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_I2C_MspInit+0x88>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40005400 	.word	0x40005400
 8004068:	40023800 	.word	0x40023800
 800406c:	40020400 	.word	0x40020400

08004070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004074:	f001 f94e 	bl	8005314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004078:	f000 f81a 	bl	80040b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800407c:	f7ff fee2 	bl	8003e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8004080:	f7fe f89c 	bl	80021bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004084:	f001 f846 	bl	8005114 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004088:	f7ff ff7c 	bl	8003f84 <MX_I2C1_Init>
  MX_TIM2_Init();
 800408c:	f000 fe5c 	bl	8004d48 <MX_TIM2_Init>
  MX_TIM4_Init();
 8004090:	f000 ff1e 	bl	8004ed0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8004094:	f7fd ffc8 	bl	8002028 <MX_ADC1_Init>
  MX_TIM3_Init();
 8004098:	f000 fecc 	bl	8004e34 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800409c:	f000 f870 	bl	8004180 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80040a0:	f006 fb6c 	bl	800a77c <osKernelInitialize>
  MX_FREERTOS_Init();
 80040a4:	f7fe f8b2 	bl	800220c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80040a8:	f006 fb8c 	bl	800a7c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040ac:	e7fe      	b.n	80040ac <main+0x3c>
	...

080040b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b094      	sub	sp, #80	; 0x50
 80040b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040b6:	f107 0320 	add.w	r3, r7, #32
 80040ba:	2230      	movs	r2, #48	; 0x30
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f00a fd85 	bl	800ebce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040c4:	f107 030c 	add.w	r3, r7, #12
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <SystemClock_Config+0xc8>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <SystemClock_Config+0xc8>)
 80040de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6413      	str	r3, [r2, #64]	; 0x40
 80040e4:	4b24      	ldr	r3, [pc, #144]	; (8004178 <SystemClock_Config+0xc8>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f0:	2300      	movs	r3, #0
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <SystemClock_Config+0xcc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a20      	ldr	r2, [pc, #128]	; (800417c <SystemClock_Config+0xcc>)
 80040fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <SystemClock_Config+0xcc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800410c:	2301      	movs	r3, #1
 800410e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004110:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004116:	2302      	movs	r3, #2
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800411a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004120:	2304      	movs	r3, #4
 8004122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004124:	2354      	movs	r3, #84	; 0x54
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004128:	2302      	movs	r3, #2
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800412c:	2304      	movs	r3, #4
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004130:	f107 0320 	add.w	r3, r7, #32
 8004134:	4618      	mov	r0, r3
 8004136:	f003 fb81 	bl	800783c <HAL_RCC_OscConfig>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004140:	f000 f864 	bl	800420c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004144:	230f      	movs	r3, #15
 8004146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004148:	2302      	movs	r3, #2
 800414a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fde3 	bl	8007d2c <HAL_RCC_ClockConfig>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800416c:	f000 f84e 	bl	800420c <Error_Handler>
  }
}
 8004170:	bf00      	nop
 8004172:	3750      	adds	r7, #80	; 0x50
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000

08004180 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004184:	2200      	movs	r2, #0
 8004186:	2105      	movs	r1, #5
 8004188:	2026      	movs	r0, #38	; 0x26
 800418a:	f001 fdb5 	bl	8005cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800418e:	2026      	movs	r0, #38	; 0x26
 8004190:	f001 fdce 	bl	8005d30 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004194:	2200      	movs	r2, #0
 8004196:	2105      	movs	r1, #5
 8004198:	2028      	movs	r0, #40	; 0x28
 800419a:	f001 fdad 	bl	8005cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800419e:	2028      	movs	r0, #40	; 0x28
 80041a0:	f001 fdc6 	bl	8005d30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2105      	movs	r1, #5
 80041a8:	2038      	movs	r0, #56	; 0x38
 80041aa:	f001 fda5 	bl	8005cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80041ae:	2038      	movs	r0, #56	; 0x38
 80041b0:	f001 fdbe 	bl	8005d30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	2105      	movs	r1, #5
 80041b8:	2011      	movs	r0, #17
 80041ba:	f001 fd9d 	bl	8005cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80041be:	2011      	movs	r0, #17
 80041c0:	f001 fdb6 	bl	8005d30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2105      	movs	r1, #5
 80041c8:	2010      	movs	r0, #16
 80041ca:	f001 fd95 	bl	8005cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80041ce:	2010      	movs	r0, #16
 80041d0:	f001 fdae 	bl	8005d30 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80041d4:	2200      	movs	r2, #0
 80041d6:	2105      	movs	r1, #5
 80041d8:	2009      	movs	r0, #9
 80041da:	f001 fd8d 	bl	8005cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80041de:	2009      	movs	r0, #9
 80041e0:	f001 fda6 	bl	8005d30 <HAL_NVIC_EnableIRQ>
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80041fa:	f001 f8ad 	bl	8005358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40014400 	.word	0x40014400

0800420c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004210:	b672      	cpsid	i
}
 8004212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004214:	e7fe      	b.n	8004214 <Error_Handler+0x8>
	...

08004218 <Parser_Register_PIDPrintCallback>:
// Wewnętrzny buffer dla jednej linii pobranej używając *Parser_ReceiveLine
static char BufferReceive[BUFFER_SIZE];

// Rejestrowanie callbacków
void Parser_Register_PIDPrintCallback(void *callback)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	Parser_PID_Print = callback;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a04      	ldr	r2, [pc, #16]	; (8004234 <Parser_Register_PIDPrintCallback+0x1c>)
 8004224:	6013      	str	r3, [r2, #0]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000578 	.word	0x20000578

08004238 <Parser_Register_IMUPrintCallback>:

void Parser_Register_IMUPrintCallback(void *callback)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	Parser_IMU_Print = callback;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <Parser_Register_IMUPrintCallback+0x1c>)
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000057c 	.word	0x2000057c

08004258 <Parser_Register_MotorsPrintCallback>:

void Parser_Register_MotorsPrintCallback(void *callback)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	Parser_Motors_Print = callback;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <Parser_Register_MotorsPrintCallback+0x1c>)
 8004264:	6013      	str	r3, [r2, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000580 	.word	0x20000580

08004278 <Parser_Register_OtherPrintCallback>:

void Parser_Register_OtherPrintCallback(void *callback)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	Parser_Other_Print = callback;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a04      	ldr	r2, [pc, #16]	; (8004294 <Parser_Register_OtherPrintCallback+0x1c>)
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000584 	.word	0x20000584

08004298 <Parser_Register_ReceiveLineCallback>:

void Parser_Register_ReceiveLineCallback(void *callback)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	Parser_ReceiveLine = callback;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <Parser_Register_ReceiveLineCallback+0x1c>)
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000588 	.word	0x20000588

080042b8 <Parser_GetFloatValue>:

// Wewnętrzna funkcja wyciągająca wartość float ze stringa
static Parser_StatusTypeDef Parser_GetFloatValue(float *value)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	// Pobranie do końca parsowanej linii
	char *ParsePointer = strtok(NULL, "\0");
 80042c0:	4921      	ldr	r1, [pc, #132]	; (8004348 <Parser_GetFloatValue+0x90>)
 80042c2:	2000      	movs	r0, #0
 80042c4:	f00c f896 	bl	80103f4 <strtok>
 80042c8:	60b8      	str	r0, [r7, #8]
	uint8_t i = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
	//Jeśli długość parsowanej linii wynosi 0 to znaczy że wykryto funkcję odczytu wartości
	if(strlen(ParsePointer) == 0) return PARSER_READ;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <Parser_GetFloatValue+0x22>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e031      	b.n	800433e <Parser_GetFloatValue+0x86>
	// Wykrycie liczby ujemnej
	if(ParsePointer[0] == '-') i++;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b2d      	cmp	r3, #45	; 0x2d
 80042e0:	d11a      	bne.n	8004318 <Parser_GetFloatValue+0x60>
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3301      	adds	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
	// Jeśli kolejne znaki nie są cyframi lub kropką zwróć błąd
	for( ; ParsePointer[i] != 0; i++)
 80042e8:	e016      	b.n	8004318 <Parser_GetFloatValue+0x60>
	{
		if((ParsePointer[i] < '0' || ParsePointer[i] > '9') && (ParsePointer[i] != '.'))
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b2f      	cmp	r3, #47	; 0x2f
 80042f4:	d905      	bls.n	8004302 <Parser_GetFloatValue+0x4a>
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b39      	cmp	r3, #57	; 0x39
 8004300:	d907      	bls.n	8004312 <Parser_GetFloatValue+0x5a>
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4413      	add	r3, r2
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b2e      	cmp	r3, #46	; 0x2e
 800430c:	d001      	beq.n	8004312 <Parser_GetFloatValue+0x5a>
		{
			return PARSER_ERROR;
 800430e:	2303      	movs	r3, #3
 8004310:	e015      	b.n	800433e <Parser_GetFloatValue+0x86>
	for( ; ParsePointer[i] != 0; i++)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	3301      	adds	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4413      	add	r3, r2
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e2      	bne.n	80042ea <Parser_GetFloatValue+0x32>
		}
	}
	// Przekształć string na postać float
	*value = atof(ParsePointer);
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f00a fb19 	bl	800e95c <atof>
 800432a:	ec53 2b10 	vmov	r2, r3, d0
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	f7fc fc71 	bl	8000c18 <__aeabi_d2f>
 8004336:	4602      	mov	r2, r0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
	// Zwróć informację, że należy nadpisać parsowaną zmienną wartością *value
	return PARSER_SET;
 800433c:	2302      	movs	r3, #2
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	08013888 	.word	0x08013888

0800434c <Parser_GetIntValue>:

// Wewnętrzna funkcja wyciagająca wartość int ze stringa
// Działa analogicznie jak funkcja powyżej
static Parser_StatusTypeDef Parser_GetIntValue(uint16_t *value)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, "\0");
 8004354:	491b      	ldr	r1, [pc, #108]	; (80043c4 <Parser_GetIntValue+0x78>)
 8004356:	2000      	movs	r0, #0
 8004358:	f00c f84c 	bl	80103f4 <strtok>
 800435c:	60b8      	str	r0, [r7, #8]
	uint8_t i = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]

	if(strlen(ParsePointer) == 0) return PARSER_READ;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <Parser_GetIntValue+0x22>
 800436a:	2301      	movs	r3, #1
 800436c:	e026      	b.n	80043bc <Parser_GetIntValue+0x70>
	if(ParsePointer[0] == '-') i++;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b2d      	cmp	r3, #45	; 0x2d
 8004374:	d114      	bne.n	80043a0 <Parser_GetIntValue+0x54>
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	3301      	adds	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]

	for( ; ParsePointer[i] != 0; i++)
 800437c:	e010      	b.n	80043a0 <Parser_GetIntValue+0x54>
	{
		if((ParsePointer[i] < '0' || ParsePointer[i] > '9'))
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b2f      	cmp	r3, #47	; 0x2f
 8004388:	d905      	bls.n	8004396 <Parser_GetIntValue+0x4a>
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4413      	add	r3, r2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b39      	cmp	r3, #57	; 0x39
 8004394:	d901      	bls.n	800439a <Parser_GetIntValue+0x4e>
		{
			return PARSER_ERROR;
 8004396:	2303      	movs	r3, #3
 8004398:	e010      	b.n	80043bc <Parser_GetIntValue+0x70>
	for( ; ParsePointer[i] != 0; i++)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3301      	adds	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e8      	bne.n	800437e <Parser_GetIntValue+0x32>
		}
	}

	*value = atoi(ParsePointer);
 80043ac:	68b8      	ldr	r0, [r7, #8]
 80043ae:	f00a fad8 	bl	800e962 <atoi>
 80043b2:	4603      	mov	r3, r0
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	801a      	strh	r2, [r3, #0]

	return PARSER_SET;
 80043ba:	2302      	movs	r3, #2
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	08013888 	.word	0x08013888

080043c8 <Parser_ParseOther>:

// Wewnętrzna funkcja parsująca komendę dla tasku z pomniejszymi funkcjonalnościami
static Parser_StatusTypeDef Parser_ParseOther(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	float value = 0;
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	603b      	str	r3, [r7, #0]
	char *ParsePointer = strtok(NULL, "=?");
 80043d4:	4925      	ldr	r1, [pc, #148]	; (800446c <Parser_ParseOther+0xa4>)
 80043d6:	2000      	movs	r0, #0
 80043d8:	f00c f80c 	bl	80103f4 <strtok>
 80043dc:	60b8      	str	r0, [r7, #8]
	// Sprawdzenie czy komenda ma zerową długość,
	// jesli tak zwróć błąd.
	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <Parser_ParseOther+0x22>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e03c      	b.n	8004464 <Parser_ParseOther+0x9c>

	// Sprawdzenie po kolei każdej możliwej komendy
	// i przypisanie odpowiedniej flagi zgodnej z komendą
	if(strcmp(ParsePointer, "BMX") == 0)	// Max poziom baterii
 80043ea:	4921      	ldr	r1, [pc, #132]	; (8004470 <Parser_ParseOther+0xa8>)
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f7fb fef7 	bl	80001e0 <strcmp>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <Parser_ParseOther+0x36>
	{
		flag = PARSER_OTH_BAT_MAXV_FLAG;
 80043f8:	2304      	movs	r3, #4
 80043fa:	81fb      	strh	r3, [r7, #14]
 80043fc:	e015      	b.n	800442a <Parser_ParseOther+0x62>
	}
	else if(strcmp(ParsePointer, "BMN") == 0)	// Min poziom baterii
 80043fe:	491d      	ldr	r1, [pc, #116]	; (8004474 <Parser_ParseOther+0xac>)
 8004400:	68b8      	ldr	r0, [r7, #8]
 8004402:	f7fb feed 	bl	80001e0 <strcmp>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <Parser_ParseOther+0x4a>
	{
		flag = PARSER_OTH_BAT_MINV_FLAG;
 800440c:	2302      	movs	r3, #2
 800440e:	81fb      	strh	r3, [r7, #14]
 8004410:	e00b      	b.n	800442a <Parser_ParseOther+0x62>
	}
	else if(strcmp(ParsePointer, "BL") == 0)	// Poziom baterii w % (read only)
 8004412:	4919      	ldr	r1, [pc, #100]	; (8004478 <Parser_ParseOther+0xb0>)
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f7fb fee3 	bl	80001e0 <strcmp>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <Parser_ParseOther+0x5e>
	{
		flag = PARSER_OTH_BAT_LEVL_FLAG;
 8004420:	2301      	movs	r3, #1
 8004422:	81fb      	strh	r3, [r7, #14]
 8004424:	e001      	b.n	800442a <Parser_ParseOther+0x62>
	}
	else return PARSER_ERROR;	// Jeśli nie wykryto żadnej komendy, zwróć błąd
 8004426:	2303      	movs	r3, #3
 8004428:	e01c      	b.n	8004464 <Parser_ParseOther+0x9c>
	// Sprawdź czy komenda zawiera wartość do zapisu czy jest to komenda odczytu
	status = Parser_GetFloatValue(&value);
 800442a:	463b      	mov	r3, r7
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff43 	bl	80042b8 <Parser_GetFloatValue>
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
	// Sprawdź czy powyższa funkcja nie zwróciła błędu
	if(status == PARSER_ERROR) return PARSER_ERROR;
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	2b03      	cmp	r3, #3
 800443a:	d101      	bne.n	8004440 <Parser_ParseOther+0x78>
 800443c:	2303      	movs	r3, #3
 800443e:	e011      	b.n	8004464 <Parser_ParseOther+0x9c>
	// Sprawdź czy wykryto komende zapisu do zmiennej i ustaw flagę zapisu
	else if(status == PARSER_SET) flag |= PARSER_OTH_SET_FLAG;
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d103      	bne.n	800444e <Parser_ParseOther+0x86>
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444c:	81fb      	strh	r3, [r7, #14]
	// Przekaż odpowiednią flagę i jeśli to zapis to także wartość do odpowiedniego tasku
	Parser_Other_Print(flag, value);
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <Parser_ParseOther+0xb4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	89fa      	ldrh	r2, [r7, #14]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	edd7 7a00 	vldr	s15, [r7]
 800445a:	eeb0 0a67 	vmov.f32	s0, s15
 800445e:	4610      	mov	r0, r2
 8004460:	4798      	blx	r3
	return PARSER_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	0801388c 	.word	0x0801388c
 8004470:	08013890 	.word	0x08013890
 8004474:	08013894 	.word	0x08013894
 8004478:	08013898 	.word	0x08013898
 800447c:	20000584 	.word	0x20000584

08004480 <Parser_ParseMotors>:

// Wewnętrzna funkcja parsująca komendę dla tasku sterującego silnikami krokowymi
// Działanie funkcji jest analogiczne jak powyższej
static Parser_StatusTypeDef Parser_ParseMotors(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	uint16_t value = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	80bb      	strh	r3, [r7, #4]
	char *ParsePointer = strtok(NULL, "=?");
 800448a:	494d      	ldr	r1, [pc, #308]	; (80045c0 <Parser_ParseMotors+0x140>)
 800448c:	2000      	movs	r0, #0
 800448e:	f00b ffb1 	bl	80103f4 <strtok>
 8004492:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <Parser_ParseMotors+0x20>
 800449c:	2303      	movs	r3, #3
 800449e:	e08b      	b.n	80045b8 <Parser_ParseMotors+0x138>

	if(strcmp(ParsePointer, "FWD") == 0)	// FWD=1 jazda prosto
 80044a0:	4948      	ldr	r1, [pc, #288]	; (80045c4 <Parser_ParseMotors+0x144>)
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f7fb fe9c 	bl	80001e0 <strcmp>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <Parser_ParseMotors+0x34>
	{										// FWD=0 wyłączenie jazdy prosto
		flag = PARSER_MOT_FRWD_FLAG;
 80044ae:	2301      	movs	r3, #1
 80044b0:	81fb      	strh	r3, [r7, #14]
 80044b2:	e068      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "BCK") == 0)	// BCK=1 jazda do tyłu
 80044b4:	4944      	ldr	r1, [pc, #272]	; (80045c8 <Parser_ParseMotors+0x148>)
 80044b6:	68b8      	ldr	r0, [r7, #8]
 80044b8:	f7fb fe92 	bl	80001e0 <strcmp>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <Parser_ParseMotors+0x48>
	{											// BCK=0 wyłączenie jazdy do tyłu
		flag = PARSER_MOT_BKWD_FLAG;
 80044c2:	2302      	movs	r3, #2
 80044c4:	81fb      	strh	r3, [r7, #14]
 80044c6:	e05e      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "LFT") == 0)	// LFT=1 obrót w lewo
 80044c8:	4940      	ldr	r1, [pc, #256]	; (80045cc <Parser_ParseMotors+0x14c>)
 80044ca:	68b8      	ldr	r0, [r7, #8]
 80044cc:	f7fb fe88 	bl	80001e0 <strcmp>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <Parser_ParseMotors+0x5c>
	{											// BCK=0 wyłączenie obrotu w lewo
		flag = PARSER_MOT_LEFT_FLAG;
 80044d6:	2304      	movs	r3, #4
 80044d8:	81fb      	strh	r3, [r7, #14]
 80044da:	e054      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "RGT") == 0)	// RGT=1 obrót w prawo
 80044dc:	493c      	ldr	r1, [pc, #240]	; (80045d0 <Parser_ParseMotors+0x150>)
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f7fb fe7e 	bl	80001e0 <strcmp>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <Parser_ParseMotors+0x70>
	{											// RGT=0 wyłączenie obrotu w prawo
		flag = PARSER_MOT_RGHT_FLAG;
 80044ea:	2308      	movs	r3, #8
 80044ec:	81fb      	strh	r3, [r7, #14]
 80044ee:	e04a      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "MST") == 0)	// Microstep (mikrokrok) silnika
 80044f0:	4938      	ldr	r1, [pc, #224]	; (80045d4 <Parser_ParseMotors+0x154>)
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f7fb fe74 	bl	80001e0 <strcmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <Parser_ParseMotors+0x84>
	{
		flag = PARSER_MOT_MICROSTEP_FLAG;
 80044fe:	2310      	movs	r3, #16
 8004500:	81fb      	strh	r3, [r7, #14]
 8004502:	e040      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "MF") == 0)	// Max częstotliwość impulsów
 8004504:	4934      	ldr	r1, [pc, #208]	; (80045d8 <Parser_ParseMotors+0x158>)
 8004506:	68b8      	ldr	r0, [r7, #8]
 8004508:	f7fb fe6a 	bl	80001e0 <strcmp>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <Parser_ParseMotors+0x98>
	{											// (Częstotliwość impulsów timera)
		flag = PARSER_MOT_MAXFREQ_FLAG;
 8004512:	2320      	movs	r3, #32
 8004514:	81fb      	strh	r3, [r7, #14]
 8004516:	e036      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "MSP") == 0)	// Max prędkość silników
 8004518:	4930      	ldr	r1, [pc, #192]	; (80045dc <Parser_ParseMotors+0x15c>)
 800451a:	68b8      	ldr	r0, [r7, #8]
 800451c:	f7fb fe60 	bl	80001e0 <strcmp>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <Parser_ParseMotors+0xac>
	{
		flag = PARSER_MOT_MAXSPED_FLAG;
 8004526:	2340      	movs	r3, #64	; 0x40
 8004528:	81fb      	strh	r3, [r7, #14]
 800452a:	e02c      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "BLK") == 0) 	// BLK=1 zatrzymanie silników
 800452c:	492c      	ldr	r1, [pc, #176]	; (80045e0 <Parser_ParseMotors+0x160>)
 800452e:	68b8      	ldr	r0, [r7, #8]
 8004530:	f7fb fe56 	bl	80001e0 <strcmp>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <Parser_ParseMotors+0xc0>
	{											// (wyłączenie timera)
		flag = PARSER_MOT_BLOCK_FLAG;			// BLK=0 wystartowanie silników
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	81fb      	strh	r3, [r7, #14]
 800453e:	e022      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "SPD") == 0)	// Aktualna prędkość silników
 8004540:	4928      	ldr	r1, [pc, #160]	; (80045e4 <Parser_ParseMotors+0x164>)
 8004542:	68b8      	ldr	r0, [r7, #8]
 8004544:	f7fb fe4c 	bl	80001e0 <strcmp>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <Parser_ParseMotors+0xd6>
	{											// (read only)
		flag = PARSER_MOT_SPEED_FLAG;
 800454e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004552:	81fb      	strh	r3, [r7, #14]
 8004554:	e017      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "ST") == 0)	// Aktualny stan robota (read only)
 8004556:	4924      	ldr	r1, [pc, #144]	; (80045e8 <Parser_ParseMotors+0x168>)
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f7fb fe41 	bl	80001e0 <strcmp>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <Parser_ParseMotors+0xec>
	{
		flag = PARSER_MOT_STATE_FLAG;
 8004564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004568:	81fb      	strh	r3, [r7, #14]
 800456a:	e00c      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else if(strcmp(ParsePointer, "TS") == 0)	// Szybkość robota podczas obrotu
 800456c:	491f      	ldr	r1, [pc, #124]	; (80045ec <Parser_ParseMotors+0x16c>)
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f7fb fe36 	bl	80001e0 <strcmp>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <Parser_ParseMotors+0x102>
	{
		flag = PARSER_MOT_TURN_SPEED_FLAG;
 800457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800457e:	81fb      	strh	r3, [r7, #14]
 8004580:	e001      	b.n	8004586 <Parser_ParseMotors+0x106>
	}
	else return PARSER_ERROR;
 8004582:	2303      	movs	r3, #3
 8004584:	e018      	b.n	80045b8 <Parser_ParseMotors+0x138>

	status = Parser_GetIntValue(&value);
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fedf 	bl	800434c <Parser_GetIntValue>
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d101      	bne.n	800459c <Parser_ParseMotors+0x11c>
 8004598:	2303      	movs	r3, #3
 800459a:	e00d      	b.n	80045b8 <Parser_ParseMotors+0x138>
	else if(status == PARSER_SET) flag |= PARSER_MOT_SET_FLAG;
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d103      	bne.n	80045aa <Parser_ParseMotors+0x12a>
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045a8:	81fb      	strh	r3, [r7, #14]

	Parser_Motors_Print(flag, value);
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <Parser_ParseMotors+0x170>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	88b9      	ldrh	r1, [r7, #4]
 80045b0:	89fa      	ldrh	r2, [r7, #14]
 80045b2:	4610      	mov	r0, r2
 80045b4:	4798      	blx	r3
	return PARSER_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	0801388c 	.word	0x0801388c
 80045c4:	0801389c 	.word	0x0801389c
 80045c8:	080138a0 	.word	0x080138a0
 80045cc:	080138a4 	.word	0x080138a4
 80045d0:	080138a8 	.word	0x080138a8
 80045d4:	080138ac 	.word	0x080138ac
 80045d8:	080138b0 	.word	0x080138b0
 80045dc:	080138b4 	.word	0x080138b4
 80045e0:	080138b8 	.word	0x080138b8
 80045e4:	080138bc 	.word	0x080138bc
 80045e8:	080138c0 	.word	0x080138c0
 80045ec:	080138c4 	.word	0x080138c4
 80045f0:	20000580 	.word	0x20000580

080045f4 <Parser_ParseIMU>:

// Wewnętrzna funkcja parsująca komendę dla tasku IMU z akcelerometrem i żyroskopem
// Działanie funkcji jest analogiczne jak powyższych
static Parser_StatusTypeDef Parser_ParseIMU(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	float value = 0;
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	603b      	str	r3, [r7, #0]
	char *ParsePointer = strtok(NULL, "=?");
 8004600:	4934      	ldr	r1, [pc, #208]	; (80046d4 <Parser_ParseIMU+0xe0>)
 8004602:	2000      	movs	r0, #0
 8004604:	f00b fef6 	bl	80103f4 <strtok>
 8004608:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <Parser_ParseIMU+0x22>
 8004612:	2303      	movs	r3, #3
 8004614:	e05a      	b.n	80046cc <Parser_ParseIMU+0xd8>

	if(strcmp(ParsePointer, "GX") == 0)		// Offset żyroskopu na osi X
 8004616:	4930      	ldr	r1, [pc, #192]	; (80046d8 <Parser_ParseIMU+0xe4>)
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f7fb fde1 	bl	80001e0 <strcmp>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <Parser_ParseIMU+0x36>
	{
		flag = PARSER_IMU_GX_OFFSET_FLAG;
 8004624:	2301      	movs	r3, #1
 8004626:	81fb      	strh	r3, [r7, #14]
 8004628:	e033      	b.n	8004692 <Parser_ParseIMU+0x9e>
	}
	else if(strcmp(ParsePointer, "AY") == 0)	// Offset akcelerometru na osi Y
 800462a:	492c      	ldr	r1, [pc, #176]	; (80046dc <Parser_ParseIMU+0xe8>)
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f7fb fdd7 	bl	80001e0 <strcmp>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <Parser_ParseIMU+0x4a>
	{
		flag = PARSER_IMU_AY_OFFSET_FLAG;
 8004638:	2302      	movs	r3, #2
 800463a:	81fb      	strh	r3, [r7, #14]
 800463c:	e029      	b.n	8004692 <Parser_ParseIMU+0x9e>
	}
	else if(strcmp(ParsePointer, "AZ") == 0)	// Offset akcelerometru na osi Z
 800463e:	4928      	ldr	r1, [pc, #160]	; (80046e0 <Parser_ParseIMU+0xec>)
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f7fb fdcd 	bl	80001e0 <strcmp>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <Parser_ParseIMU+0x5e>
	{
		flag = PARSER_IMU_AZ_OFFSET_FLAG;
 800464c:	2304      	movs	r3, #4
 800464e:	81fb      	strh	r3, [r7, #14]
 8004650:	e01f      	b.n	8004692 <Parser_ParseIMU+0x9e>
	}
	else if(strcmp(ParsePointer, "ANG") == 0)	// Aktualny kąt wychylenia (read only)
 8004652:	4924      	ldr	r1, [pc, #144]	; (80046e4 <Parser_ParseIMU+0xf0>)
 8004654:	68b8      	ldr	r0, [r7, #8]
 8004656:	f7fb fdc3 	bl	80001e0 <strcmp>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <Parser_ParseIMU+0x72>
	{
		flag = PARSER_IMU_ANGLE_FLAG;
 8004660:	2308      	movs	r3, #8
 8004662:	81fb      	strh	r3, [r7, #14]
 8004664:	e015      	b.n	8004692 <Parser_ParseIMU+0x9e>
	}
	else if(strcmp(ParsePointer, "CF") == 0)	// Współczynnik filtru komplementarnego
 8004666:	4920      	ldr	r1, [pc, #128]	; (80046e8 <Parser_ParseIMU+0xf4>)
 8004668:	68b8      	ldr	r0, [r7, #8]
 800466a:	f7fb fdb9 	bl	80001e0 <strcmp>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <Parser_ParseIMU+0x86>
	{
		flag = PARSER_IMU_COMP_FILTER_FLAG;
 8004674:	2320      	movs	r3, #32
 8004676:	81fb      	strh	r3, [r7, #14]
 8004678:	e00b      	b.n	8004692 <Parser_ParseIMU+0x9e>
	}
	else if(strcmp(ParsePointer, "CB") == 0)	// CB=1 wykonaj autokalibrację
 800467a:	491c      	ldr	r1, [pc, #112]	; (80046ec <Parser_ParseIMU+0xf8>)
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f7fb fdaf 	bl	80001e0 <strcmp>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <Parser_ParseIMU+0x9a>
	{											// CB=0 autokalibracja zakończona
		flag = PARSER_IMU_CALIBRATION_FLAG;		// CB=0 zwraca robot po poprawnej kalibracji
 8004688:	2310      	movs	r3, #16
 800468a:	81fb      	strh	r3, [r7, #14]
 800468c:	e001      	b.n	8004692 <Parser_ParseIMU+0x9e>
	}
	else return PARSER_ERROR;
 800468e:	2303      	movs	r3, #3
 8004690:	e01c      	b.n	80046cc <Parser_ParseIMU+0xd8>

	status = Parser_GetFloatValue(&value);
 8004692:	463b      	mov	r3, r7
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fe0f 	bl	80042b8 <Parser_GetFloatValue>
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d101      	bne.n	80046a8 <Parser_ParseIMU+0xb4>
 80046a4:	2303      	movs	r3, #3
 80046a6:	e011      	b.n	80046cc <Parser_ParseIMU+0xd8>
	else if(status == PARSER_SET) flag |= PARSER_IMU_SET_FLAG;
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d103      	bne.n	80046b6 <Parser_ParseIMU+0xc2>
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	81fb      	strh	r3, [r7, #14]

	Parser_IMU_Print(flag, value);
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <Parser_ParseIMU+0xfc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	89fa      	ldrh	r2, [r7, #14]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	edd7 7a00 	vldr	s15, [r7]
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	4610      	mov	r0, r2
 80046c8:	4798      	blx	r3
	return PARSER_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	0801388c 	.word	0x0801388c
 80046d8:	080138c8 	.word	0x080138c8
 80046dc:	080138cc 	.word	0x080138cc
 80046e0:	080138d0 	.word	0x080138d0
 80046e4:	080138d4 	.word	0x080138d4
 80046e8:	080138d8 	.word	0x080138d8
 80046ec:	080138dc 	.word	0x080138dc
 80046f0:	2000057c 	.word	0x2000057c

080046f4 <Parser_ParsePID>:
// Wewnętrzna funkcja parsująca komendę dla tasku PID
// Działanie funkcji jest analogiczne jak powyższych
// Różni się przyjmowaniem argumentu numeru regulatora
// pidNumber==1 regulator kąta wychylenia, ==2 regulator prędkości
static Parser_StatusTypeDef Parser_ParsePID(uint8_t pidNumber)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
	Parser_StatusTypeDef status;
	uint16_t flag;
	float value;
	char *ParsePointer = strtok(NULL, "=?");
 80046fe:	4939      	ldr	r1, [pc, #228]	; (80047e4 <Parser_ParsePID+0xf0>)
 8004700:	2000      	movs	r0, #0
 8004702:	f00b fe77 	bl	80103f4 <strtok>
 8004706:	6138      	str	r0, [r7, #16]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <Parser_ParsePID+0x20>
 8004710:	2303      	movs	r3, #3
 8004712:	e062      	b.n	80047da <Parser_ParsePID+0xe6>

	if(strcmp(ParsePointer, "KP") == 0)		// Wzmocnienie członu proporcjonalnego Kp
 8004714:	4934      	ldr	r1, [pc, #208]	; (80047e8 <Parser_ParsePID+0xf4>)
 8004716:	6938      	ldr	r0, [r7, #16]
 8004718:	f7fb fd62 	bl	80001e0 <strcmp>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <Parser_ParsePID+0x34>
	{
		flag = PARSER_PID_KP_FLAG;
 8004722:	2301      	movs	r3, #1
 8004724:	82fb      	strh	r3, [r7, #22]
 8004726:	e033      	b.n	8004790 <Parser_ParsePID+0x9c>
	}
	else if(strcmp(ParsePointer, "KI") == 0)	// Wzmocnienie członu całkującego Ki
 8004728:	4930      	ldr	r1, [pc, #192]	; (80047ec <Parser_ParsePID+0xf8>)
 800472a:	6938      	ldr	r0, [r7, #16]
 800472c:	f7fb fd58 	bl	80001e0 <strcmp>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <Parser_ParsePID+0x48>
	{
		flag = PARSER_PID_KI_FLAG;
 8004736:	2302      	movs	r3, #2
 8004738:	82fb      	strh	r3, [r7, #22]
 800473a:	e029      	b.n	8004790 <Parser_ParsePID+0x9c>
	}
	else if(strcmp(ParsePointer, "KD") == 0)	// Wzmocnienie członu różniczkującego Kd
 800473c:	492c      	ldr	r1, [pc, #176]	; (80047f0 <Parser_ParsePID+0xfc>)
 800473e:	6938      	ldr	r0, [r7, #16]
 8004740:	f7fb fd4e 	bl	80001e0 <strcmp>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <Parser_ParsePID+0x5c>
	{
		flag = PARSER_PID_KD_FLAG;
 800474a:	2304      	movs	r3, #4
 800474c:	82fb      	strh	r3, [r7, #22]
 800474e:	e01f      	b.n	8004790 <Parser_ParsePID+0x9c>
	}
	else if(strcmp(ParsePointer, "RML") == 0)	// Max pochylenie robota, które może
 8004750:	4928      	ldr	r1, [pc, #160]	; (80047f4 <Parser_ParsePID+0x100>)
 8004752:	6938      	ldr	r0, [r7, #16]
 8004754:	f7fb fd44 	bl	80001e0 <strcmp>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <Parser_ParsePID+0x70>
	{											// zadać regulator sterujący w funkcji
		flag = PARSER_PID_MAX_LEAN_FLAG;		// prędkości
 800475e:	2310      	movs	r3, #16
 8004760:	82fb      	strh	r3, [r7, #22]
 8004762:	e015      	b.n	8004790 <Parser_ParsePID+0x9c>
	}
	else if(strcmp(ParsePointer, "RMS") == 0)	// Prędkość z jaką docelowo ma jechać
 8004764:	4924      	ldr	r1, [pc, #144]	; (80047f8 <Parser_ParsePID+0x104>)
 8004766:	6938      	ldr	r0, [r7, #16]
 8004768:	f7fb fd3a 	bl	80001e0 <strcmp>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <Parser_ParsePID+0x84>
	{											// robot do przodu i do tyłu
		flag = PARSER_PID_MOV_SPEED_FLAG;
 8004772:	2320      	movs	r3, #32
 8004774:	82fb      	strh	r3, [r7, #22]
 8004776:	e00b      	b.n	8004790 <Parser_ParsePID+0x9c>
	}
	else if(strcmp(ParsePointer, "ZH") == 0)	// Histereza zerowej prędkości
 8004778:	4920      	ldr	r1, [pc, #128]	; (80047fc <Parser_ParsePID+0x108>)
 800477a:	6938      	ldr	r0, [r7, #16]
 800477c:	f7fb fd30 	bl	80001e0 <strcmp>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <Parser_ParsePID+0x98>
	{											// Jeśli będzie ustawiona np. na 5
		flag = PARSER_PID_ZERO_HYST_FLAG;		// to prędkość robota od -5 do 5
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	82fb      	strh	r3, [r7, #22]
 800478a:	e001      	b.n	8004790 <Parser_ParsePID+0x9c>
	}											// będzie sprowadzona do 0
	else return PARSER_ERROR;
 800478c:	2303      	movs	r3, #3
 800478e:	e024      	b.n	80047da <Parser_ParsePID+0xe6>

	status = Parser_GetFloatValue(&value);
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fd8f 	bl	80042b8 <Parser_GetFloatValue>
 800479a:	4603      	mov	r3, r0
 800479c:	73fb      	strb	r3, [r7, #15]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d101      	bne.n	80047a8 <Parser_ParsePID+0xb4>
 80047a4:	2303      	movs	r3, #3
 80047a6:	e018      	b.n	80047da <Parser_ParsePID+0xe6>
	else if(status == PARSER_SET) flag |= PARSER_PID_SET_FLAG;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d103      	bne.n	80047b6 <Parser_ParsePID+0xc2>
 80047ae:	8afb      	ldrh	r3, [r7, #22]
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	82fb      	strh	r3, [r7, #22]
	// Sprawdzenie do którego regulatora dana komenda się odnosi
	if(pidNumber == 2)
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d103      	bne.n	80047c4 <Parser_ParsePID+0xd0>
		flag |= PARSER_PID_PID2_FLAG;
 80047bc:	8afb      	ldrh	r3, [r7, #22]
 80047be:	f043 0308 	orr.w	r3, r3, #8
 80047c2:	82fb      	strh	r3, [r7, #22]

	Parser_PID_Print(flag, value);
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <Parser_ParsePID+0x10c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	8afa      	ldrh	r2, [r7, #22]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
	return PARSER_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	0801388c 	.word	0x0801388c
 80047e8:	080138e0 	.word	0x080138e0
 80047ec:	080138e4 	.word	0x080138e4
 80047f0:	080138e8 	.word	0x080138e8
 80047f4:	080138ec 	.word	0x080138ec
 80047f8:	080138f0 	.word	0x080138f0
 80047fc:	080138f4 	.word	0x080138f4
 8004800:	20000578 	.word	0x20000578

08004804 <Parser_ParseLine>:

// Główna funkcja, którą wywołuje użytkownik aby sparsować komendę (jedną linie)
Parser_StatusTypeDef Parser_ParseLine(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
	char *ParsePointer;
	Parser_StatusTypeDef status;
	// Pobranie jednej linii z buffera
	// Jeśli nie można tego zrobić zwróć błąd
	if(!Parser_ReceiveLine(BufferReceive))
 800480a:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <Parser_ParseLine+0xcc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4831      	ldr	r0, [pc, #196]	; (80048d4 <Parser_ParseLine+0xd0>)
 8004810:	4798      	blx	r3
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d155      	bne.n	80048c4 <Parser_ParseLine+0xc0>
	{
		ParsePointer = strtok(BufferReceive, "+");
 8004818:	492f      	ldr	r1, [pc, #188]	; (80048d8 <Parser_ParseLine+0xd4>)
 800481a:	482e      	ldr	r0, [pc, #184]	; (80048d4 <Parser_ParseLine+0xd0>)
 800481c:	f00b fdea 	bl	80103f4 <strtok>
 8004820:	6038      	str	r0, [r7, #0]
		// Sprawdzenie do którego tasku odnosi się komenda
		if(strcmp(ParsePointer, "P") == 0)	// Task PID
 8004822:	492e      	ldr	r1, [pc, #184]	; (80048dc <Parser_ParseLine+0xd8>)
 8004824:	6838      	ldr	r0, [r7, #0]
 8004826:	f7fb fcdb 	bl	80001e0 <strcmp>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d121      	bne.n	8004874 <Parser_ParseLine+0x70>
		{
			ParsePointer = strtok(NULL, "+");
 8004830:	4929      	ldr	r1, [pc, #164]	; (80048d8 <Parser_ParseLine+0xd4>)
 8004832:	2000      	movs	r0, #0
 8004834:	f00b fdde 	bl	80103f4 <strtok>
 8004838:	6038      	str	r0, [r7, #0]
			// Sprawdzenie do którego regulatora odnosi się komenda
			if(strcmp(ParsePointer, "1") == 0)	// 1 - regulator prędkości
 800483a:	4929      	ldr	r1, [pc, #164]	; (80048e0 <Parser_ParseLine+0xdc>)
 800483c:	6838      	ldr	r0, [r7, #0]
 800483e:	f7fb fccf 	bl	80001e0 <strcmp>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <Parser_ParseLine+0x50>
				status = Parser_ParsePID(1);
 8004848:	2001      	movs	r0, #1
 800484a:	f7ff ff53 	bl	80046f4 <Parser_ParsePID>
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
 8004852:	e035      	b.n	80048c0 <Parser_ParseLine+0xbc>
			else if(strcmp(ParsePointer, "2") == 0)	// 2 - regulator kąta wychylenia
 8004854:	4923      	ldr	r1, [pc, #140]	; (80048e4 <Parser_ParseLine+0xe0>)
 8004856:	6838      	ldr	r0, [r7, #0]
 8004858:	f7fb fcc2 	bl	80001e0 <strcmp>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d105      	bne.n	800486e <Parser_ParseLine+0x6a>
				status = Parser_ParsePID(2);
 8004862:	2002      	movs	r0, #2
 8004864:	f7ff ff46 	bl	80046f4 <Parser_ParsePID>
 8004868:	4603      	mov	r3, r0
 800486a:	71fb      	strb	r3, [r7, #7]
 800486c:	e028      	b.n	80048c0 <Parser_ParseLine+0xbc>
			else
				status = PARSER_ERROR;
 800486e:	2303      	movs	r3, #3
 8004870:	71fb      	strb	r3, [r7, #7]
 8004872:	e025      	b.n	80048c0 <Parser_ParseLine+0xbc>
		}
		else if(strcmp(ParsePointer, "I") == 0) // Task IMU
 8004874:	491c      	ldr	r1, [pc, #112]	; (80048e8 <Parser_ParseLine+0xe4>)
 8004876:	6838      	ldr	r0, [r7, #0]
 8004878:	f7fb fcb2 	bl	80001e0 <strcmp>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <Parser_ParseLine+0x88>
		{
			status = Parser_ParseIMU();
 8004882:	f7ff feb7 	bl	80045f4 <Parser_ParseIMU>
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
 800488a:	e019      	b.n	80048c0 <Parser_ParseLine+0xbc>
		}
		else if(strcmp(ParsePointer, "M") == 0)	// Task silników krokowych
 800488c:	4917      	ldr	r1, [pc, #92]	; (80048ec <Parser_ParseLine+0xe8>)
 800488e:	6838      	ldr	r0, [r7, #0]
 8004890:	f7fb fca6 	bl	80001e0 <strcmp>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <Parser_ParseLine+0xa0>
		{
			status = Parser_ParseMotors();
 800489a:	f7ff fdf1 	bl	8004480 <Parser_ParseMotors>
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	e00d      	b.n	80048c0 <Parser_ParseLine+0xbc>
		}
		else if(strcmp(ParsePointer, "O") == 0)	// Task pomniejszych funkcjonalności
 80048a4:	4912      	ldr	r1, [pc, #72]	; (80048f0 <Parser_ParseLine+0xec>)
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	f7fb fc9a 	bl	80001e0 <strcmp>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <Parser_ParseLine+0xb8>
		{
			status = Parser_ParseOther();
 80048b2:	f7ff fd89 	bl	80043c8 <Parser_ParseOther>
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
 80048ba:	e001      	b.n	80048c0 <Parser_ParseLine+0xbc>
		}
		else	// Jeśli nie tyczy się żadnego z dostepnych tasków zwróć błąd
		{
			return PARSER_ERROR;
 80048bc:	2303      	movs	r3, #3
 80048be:	e002      	b.n	80048c6 <Parser_ParseLine+0xc2>
		}
		// Zwróć status wykonania wewnętrznych parserów (np ParsePID itp.)
		return status;
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	e000      	b.n	80048c6 <Parser_ParseLine+0xc2>
	}
	return PARSER_ERROR;
 80048c4:	2303      	movs	r3, #3
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000588 	.word	0x20000588
 80048d4:	2000058c 	.word	0x2000058c
 80048d8:	080138f8 	.word	0x080138f8
 80048dc:	080138fc 	.word	0x080138fc
 80048e0:	08013900 	.word	0x08013900
 80048e4:	08013904 	.word	0x08013904
 80048e8:	08013908 	.word	0x08013908
 80048ec:	0801390c 	.word	0x0801390c
 80048f0:	08013910 	.word	0x08013910

080048f4 <isReadable>:
 */
#include "ring_buffer.h"

// Funkcja sprawdzająca czy jest coś do oczytu z buffera
RB_StatusTypeDef isReadable(RingBuffer_t *rb)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	// Jeśli head == tail to nie ma nic do odczytu
	return (rb->Head == rb->Tail) ? !RB_ERROR : !RB_OK;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	881a      	ldrh	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	885b      	ldrh	r3, [r3, #2]
 8004904:	429a      	cmp	r2, r3
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <RB_Read>:
// Funkcja odczytująca jeden bajt do zmiennej value
RB_StatusTypeDef RB_Read(RingBuffer_t *rb, uint8_t *Value)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	// Jeśli head==tail to nie można nic odczytać więc zwróć błąd
	if (rb->Tail == rb->Head)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	885a      	ldrh	r2, [r3, #2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d101      	bne.n	8004936 <RB_Read+0x1a>
		{
			return RB_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e018      	b.n	8004968 <RB_Read+0x4c>
		}
	// Przypisz do zmiennej użytkownika wartość z ring buffera
	// i zwiększ Tail o jeden
	*Value = rb->Buffer[rb->Tail];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	885b      	ldrh	r3, [r3, #2]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	791a      	ldrb	r2, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	701a      	strb	r2, [r3, #0]
	rb->Tail = (rb->Tail +1) % RING_BUFFER_SIZE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	885b      	ldrh	r3, [r3, #2]
 800494a:	3301      	adds	r3, #1
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <RB_Read+0x58>)
 800494e:	fb82 1203 	smull	r1, r2, r2, r3
 8004952:	1191      	asrs	r1, r2, #6
 8004954:	17da      	asrs	r2, r3, #31
 8004956:	1a8a      	subs	r2, r1, r2
 8004958:	21c8      	movs	r1, #200	; 0xc8
 800495a:	fb01 f202 	mul.w	r2, r1, r2
 800495e:	1a9a      	subs	r2, r3, r2
 8004960:	b292      	uxth	r2, r2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	805a      	strh	r2, [r3, #2]
	return RB_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	51eb851f 	.word	0x51eb851f

08004978 <RB_Write>:
// Funkcja zapisująca jeden bajt do ring buffera
RB_StatusTypeDef RB_Write(RingBuffer_t *rb, uint8_t Value)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
	// Zmienna pomocnicza, żeby sprawdzić czy head nie uderzy w Tail
	uint16_t TmpHead = (rb->Head +1) % RING_BUFFER_SIZE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <RB_Write+0x5c>)
 800498c:	fb82 1203 	smull	r1, r2, r2, r3
 8004990:	1191      	asrs	r1, r2, #6
 8004992:	17da      	asrs	r2, r3, #31
 8004994:	1a8a      	subs	r2, r1, r2
 8004996:	21c8      	movs	r1, #200	; 0xc8
 8004998:	fb01 f202 	mul.w	r2, r1, r2
 800499c:	1a9a      	subs	r2, r3, r2
 800499e:	4613      	mov	r3, r2
 80049a0:	81fb      	strh	r3, [r7, #14]
	// Jeśli tak to bufor jest pełny, zwróć błąd
	if (TmpHead == rb->Tail)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	885b      	ldrh	r3, [r3, #2]
 80049a6:	89fa      	ldrh	r2, [r7, #14]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d101      	bne.n	80049b0 <RB_Write+0x38>
	{
		return RB_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e00a      	b.n	80049c6 <RB_Write+0x4e>
	}
	// Jeśli nie jest pełny to zapisz wartość do ring buffera
	// i zwiększ Head o jeden
	rb->Buffer[rb->Head] = Value;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	711a      	strb	r2, [r3, #4]
	rb->Head = TmpHead;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	89fa      	ldrh	r2, [r7, #14]
 80049c2:	801a      	strh	r2, [r3, #0]
	return RB_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	51eb851f 	.word	0x51eb851f

080049d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <HAL_MspInit+0x54>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <HAL_MspInit+0x54>)
 80049e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049ec:	6453      	str	r3, [r2, #68]	; 0x44
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_MspInit+0x54>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_MspInit+0x54>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <HAL_MspInit+0x54>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_MspInit+0x54>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	210f      	movs	r1, #15
 8004a1a:	f06f 0001 	mvn.w	r0, #1
 8004a1e:	f001 f96b 	bl	8005cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800

08004a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	; 0x30
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004a40:	2200      	movs	r2, #0
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	2019      	movs	r0, #25
 8004a46:	f001 f957 	bl	8005cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a4a:	2019      	movs	r0, #25
 8004a4c:	f001 f970 	bl	8005d30 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <HAL_InitTick+0xa0>)
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <HAL_InitTick+0xa0>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <HAL_InitTick+0xa0>)
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a6c:	f107 0210 	add.w	r2, r7, #16
 8004a70:	f107 0314 	add.w	r3, r7, #20
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f003 fb78 	bl	800816c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f003 fb62 	bl	8008144 <HAL_RCC_GetPCLK2Freq>
 8004a80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <HAL_InitTick+0xa4>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	0c9b      	lsrs	r3, r3, #18
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004a92:	4a12      	ldr	r2, [pc, #72]	; (8004adc <HAL_InitTick+0xac>)
 8004a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a9c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004a9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8004ab0:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004ab2:	f003 fb8d 	bl	80081d0 <HAL_TIM_Base_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8004abc:	4806      	ldr	r0, [pc, #24]	; (8004ad8 <HAL_InitTick+0xa8>)
 8004abe:	f003 fc31 	bl	8008324 <HAL_TIM_Base_Start_IT>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	e000      	b.n	8004ac8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3730      	adds	r7, #48	; 0x30
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	431bde83 	.word	0x431bde83
 8004ad8:	200005ac 	.word	0x200005ac
 8004adc:	40014400 	.word	0x40014400

08004ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ae4:	e7fe      	b.n	8004ae4 <NMI_Handler+0x4>

08004ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aea:	e7fe      	b.n	8004aea <HardFault_Handler+0x4>

08004aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004af0:	e7fe      	b.n	8004af0 <MemManage_Handler+0x4>

08004af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004af2:	b480      	push	{r7}
 8004af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004af6:	e7fe      	b.n	8004af6 <BusFault_Handler+0x4>

08004af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004afc:	e7fe      	b.n	8004afc <UsageFault_Handler+0x4>

08004afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6_Interrupt2_Pin);
 8004b10:	2008      	movs	r0, #8
 8004b12:	f001 febb 	bl	800688c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004b20:	4802      	ldr	r0, [pc, #8]	; (8004b2c <DMA1_Stream5_IRQHandler+0x10>)
 8004b22:	f001 faab 	bl	800607c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000714 	.word	0x20000714

08004b30 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b34:	4802      	ldr	r0, [pc, #8]	; (8004b40 <DMA1_Stream6_IRQHandler+0x10>)
 8004b36:	f001 faa1 	bl	800607c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000774 	.word	0x20000774

08004b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004b48:	4802      	ldr	r0, [pc, #8]	; (8004b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004b4a:	f003 fdbb 	bl	80086c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	200005ac 	.word	0x200005ac

08004b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b5c:	4802      	ldr	r0, [pc, #8]	; (8004b68 <USART2_IRQHandler+0x10>)
 8004b5e:	f004 fceb 	bl	8009538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200006d0 	.word	0x200006d0

08004b6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6_Interrupt_Pin);
 8004b70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b74:	f001 fe8a 	bl	800688c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004b78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b7c:	f001 fe86 	bl	800688c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <DMA2_Stream0_IRQHandler+0x10>)
 8004b8a:	f001 fa77 	bl	800607c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000254 	.word	0x20000254

08004b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
	return 1;
 8004b9c:	2301      	movs	r3, #1
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_kill>:

int _kill(int pid, int sig)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004bb2:	f009 fedb 	bl	800e96c <__errno>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2216      	movs	r2, #22
 8004bba:	601a      	str	r2, [r3, #0]
	return -1;
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_exit>:

void _exit (int status)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ffe7 	bl	8004ba8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bda:	e7fe      	b.n	8004bda <_exit+0x12>

08004bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e00a      	b.n	8004c04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004bee:	f3af 8000 	nop.w
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	60ba      	str	r2, [r7, #8]
 8004bfa:	b2ca      	uxtb	r2, r1
 8004bfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3301      	adds	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dbf0      	blt.n	8004bee <_read+0x12>
	}

return len;
 8004c0c:	687b      	ldr	r3, [r7, #4]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e009      	b.n	8004c3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	60ba      	str	r2, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	dbf1      	blt.n	8004c28 <_write+0x12>
	}
	return len;
 8004c44:	687b      	ldr	r3, [r7, #4]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_close>:

int _close(int file)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
	return -1;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c76:	605a      	str	r2, [r3, #4]
	return 0;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <_isatty>:

int _isatty(int file)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
	return 1;
 8004c8e:	2301      	movs	r3, #1
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
	return 0;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <_sbrk+0x5c>)
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <_sbrk+0x60>)
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ccc:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <_sbrk+0x64>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <_sbrk+0x64>)
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <_sbrk+0x68>)
 8004cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <_sbrk+0x64>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d207      	bcs.n	8004cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ce8:	f009 fe40 	bl	800e96c <__errno>
 8004cec:	4603      	mov	r3, r0
 8004cee:	220c      	movs	r2, #12
 8004cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	e009      	b.n	8004d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <_sbrk+0x64>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <_sbrk+0x64>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <_sbrk+0x64>)
 8004d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20020000 	.word	0x20020000
 8004d18:	00002000 	.word	0x00002000
 8004d1c:	200005f4 	.word	0x200005f4
 8004d20:	200051f8 	.word	0x200051f8

08004d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <SystemInit+0x20>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <SystemInit+0x20>)
 8004d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	; 0x38
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d5c:	f107 0320 	add.w	r3, r7, #32
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	615a      	str	r2, [r3, #20]
 8004d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004d80:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004d82:	2253      	movs	r2, #83	; 0x53
 8004d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d86:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004d8c:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9a:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004da0:	4823      	ldr	r0, [pc, #140]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004da2:	f003 fa15 	bl	80081d0 <HAL_TIM_Base_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004dac:	f7ff fa2e 	bl	800420c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dba:	4619      	mov	r1, r3
 8004dbc:	481c      	ldr	r0, [pc, #112]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004dbe:	f003 fe4b 	bl	8008a58 <HAL_TIM_ConfigClockSource>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004dc8:	f7ff fa20 	bl	800420c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004dcc:	4818      	ldr	r0, [pc, #96]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004dce:	f003 fb0b 	bl	80083e8 <HAL_TIM_PWM_Init>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004dd8:	f7ff fa18 	bl	800420c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004de4:	f107 0320 	add.w	r3, r7, #32
 8004de8:	4619      	mov	r1, r3
 8004dea:	4811      	ldr	r0, [pc, #68]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004dec:	f004 f9f0 	bl	80091d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004df6:	f7ff fa09 	bl	800420c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dfa:	2360      	movs	r3, #96	; 0x60
 8004dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8004dfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	2208      	movs	r2, #8
 8004e10:	4619      	mov	r1, r3
 8004e12:	4807      	ldr	r0, [pc, #28]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004e14:	f003 fd5e 	bl	80088d4 <HAL_TIM_PWM_ConfigChannel>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004e1e:	f7ff f9f5 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e22:	4803      	ldr	r0, [pc, #12]	; (8004e30 <MX_TIM2_Init+0xe8>)
 8004e24:	f000 f918 	bl	8005058 <HAL_TIM_MspPostInit>

}
 8004e28:	bf00      	nop
 8004e2a:	3738      	adds	r7, #56	; 0x38
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	200005f8 	.word	0x200005f8

08004e34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e48:	463b      	mov	r3, r7
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <MX_TIM3_Init+0x98>)
 8004e54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e58:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e66:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e78:	4813      	ldr	r0, [pc, #76]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e7a:	f003 f9a9 	bl	80081d0 <HAL_TIM_Base_Init>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004e84:	f7ff f9c2 	bl	800420c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004e96:	f003 fddf 	bl	8008a58 <HAL_TIM_ConfigClockSource>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004ea0:	f7ff f9b4 	bl	800420c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004eac:	463b      	mov	r3, r7
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <MX_TIM3_Init+0x94>)
 8004eb2:	f004 f98d 	bl	80091d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004ebc:	f7ff f9a6 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ec0:	bf00      	nop
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000640 	.word	0x20000640
 8004ecc:	40000400 	.word	0x40000400

08004ed0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08e      	sub	sp, #56	; 0x38
 8004ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ee4:	f107 0320 	add.w	r3, r7, #32
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	611a      	str	r2, [r3, #16]
 8004efc:	615a      	str	r2, [r3, #20]
 8004efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f02:	4a2e      	ldr	r2, [pc, #184]	; (8004fbc <MX_TIM4_Init+0xec>)
 8004f04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f08:	2253      	movs	r2, #83	; 0x53
 8004f0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004f12:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f1a:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004f26:	4824      	ldr	r0, [pc, #144]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f28:	f003 f952 	bl	80081d0 <HAL_TIM_Base_Init>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004f32:	f7ff f96b 	bl	800420c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f40:	4619      	mov	r1, r3
 8004f42:	481d      	ldr	r0, [pc, #116]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f44:	f003 fd88 	bl	8008a58 <HAL_TIM_ConfigClockSource>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004f4e:	f7ff f95d 	bl	800420c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004f52:	4819      	ldr	r0, [pc, #100]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f54:	f003 fa48 	bl	80083e8 <HAL_TIM_PWM_Init>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004f5e:	f7ff f955 	bl	800420c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f6a:	f107 0320 	add.w	r3, r7, #32
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4811      	ldr	r0, [pc, #68]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f72:	f004 f92d 	bl	80091d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004f7c:	f7ff f946 	bl	800420c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f80:	2360      	movs	r3, #96	; 0x60
 8004f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8004f84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	2200      	movs	r2, #0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004f9a:	f003 fc9b 	bl	80088d4 <HAL_TIM_PWM_ConfigChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004fa4:	f7ff f932 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004fa8:	4803      	ldr	r0, [pc, #12]	; (8004fb8 <MX_TIM4_Init+0xe8>)
 8004faa:	f000 f855 	bl	8005058 <HAL_TIM_MspPostInit>

}
 8004fae:	bf00      	nop
 8004fb0:	3738      	adds	r7, #56	; 0x38
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000688 	.word	0x20000688
 8004fbc:	40000800 	.word	0x40000800

08004fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	4b1d      	ldr	r3, [pc, #116]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a1c      	ldr	r2, [pc, #112]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004fee:	e026      	b.n	800503e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIM_Base_MspInit+0x90>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	6413      	str	r3, [r2, #64]	; 0x40
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
}
 8005016:	e012      	b.n	800503e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <HAL_TIM_Base_MspInit+0x94>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10d      	bne.n	800503e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	6413      	str	r3, [r2, #64]	; 0x40
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_TIM_Base_MspInit+0x8c>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800

08005058 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005078:	d11f      	bne.n	80050ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <HAL_TIM_MspPostInit+0xb0>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <HAL_TIM_MspPostInit+0xb0>)
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	6313      	str	r3, [r2, #48]	; 0x30
 800508a:	4b1f      	ldr	r3, [pc, #124]	; (8005108 <HAL_TIM_MspPostInit+0xb0>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = leftMotor_STEP_Pin;
 8005096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509c:	2302      	movs	r3, #2
 800509e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	4619      	mov	r1, r3
 80050b2:	4816      	ldr	r0, [pc, #88]	; (800510c <HAL_TIM_MspPostInit+0xb4>)
 80050b4:	f001 fa4c 	bl	8006550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80050b8:	e022      	b.n	8005100 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a14      	ldr	r2, [pc, #80]	; (8005110 <HAL_TIM_MspPostInit+0xb8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d11d      	bne.n	8005100 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <HAL_TIM_MspPostInit+0xb0>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <HAL_TIM_MspPostInit+0xb0>)
 80050ce:	f043 0302 	orr.w	r3, r3, #2
 80050d2:	6313      	str	r3, [r2, #48]	; 0x30
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <HAL_TIM_MspPostInit+0xb0>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightMotor_STEP_Pin;
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e4:	2302      	movs	r3, #2
 80050e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ec:	2300      	movs	r3, #0
 80050ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80050f0:	2302      	movs	r3, #2
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4619      	mov	r1, r3
 80050fa:	4804      	ldr	r0, [pc, #16]	; (800510c <HAL_TIM_MspPostInit+0xb4>)
 80050fc:	f001 fa28 	bl	8006550 <HAL_GPIO_Init>
}
 8005100:	bf00      	nop
 8005102:	3728      	adds	r7, #40	; 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	40020400 	.word	0x40020400
 8005110:	40000800 	.word	0x40000800

08005114 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005118:	4b11      	ldr	r3, [pc, #68]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <MX_USART2_UART_Init+0x50>)
 800511c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005126:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005128:	2200      	movs	r2, #0
 800512a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800512e:	2200      	movs	r2, #0
 8005130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005134:	2200      	movs	r2, #0
 8005136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800513a:	220c      	movs	r2, #12
 800513c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005146:	2200      	movs	r2, #0
 8005148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800514a:	4805      	ldr	r0, [pc, #20]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800514c:	f004 f8c2 	bl	80092d4 <HAL_UART_Init>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005156:	f7ff f859 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	200006d0 	.word	0x200006d0
 8005164:	40004400 	.word	0x40004400

08005168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a47      	ldr	r2, [pc, #284]	; (80052a4 <HAL_UART_MspInit+0x13c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	f040 8088 	bne.w	800529c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	4b45      	ldr	r3, [pc, #276]	; (80052a8 <HAL_UART_MspInit+0x140>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	4a44      	ldr	r2, [pc, #272]	; (80052a8 <HAL_UART_MspInit+0x140>)
 8005196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519a:	6413      	str	r3, [r2, #64]	; 0x40
 800519c:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_UART_MspInit+0x140>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	4b3e      	ldr	r3, [pc, #248]	; (80052a8 <HAL_UART_MspInit+0x140>)
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <HAL_UART_MspInit+0x140>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6313      	str	r3, [r2, #48]	; 0x30
 80051b8:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <HAL_UART_MspInit+0x140>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80051c4:	230c      	movs	r3, #12
 80051c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d0:	2303      	movs	r3, #3
 80051d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051d4:	2307      	movs	r3, #7
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4619      	mov	r1, r3
 80051de:	4833      	ldr	r0, [pc, #204]	; (80052ac <HAL_UART_MspInit+0x144>)
 80051e0:	f001 f9b6 	bl	8006550 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_UART_MspInit+0x148>)
 80051e6:	4a33      	ldr	r2, [pc, #204]	; (80052b4 <HAL_UART_MspInit+0x14c>)
 80051e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80051ea:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_UART_MspInit+0x148>)
 80051ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_UART_MspInit+0x148>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_UART_MspInit+0x148>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_UART_MspInit+0x148>)
 8005200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005204:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005206:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_UART_MspInit+0x148>)
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800520c:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <HAL_UART_MspInit+0x148>)
 800520e:	2200      	movs	r2, #0
 8005210:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_UART_MspInit+0x148>)
 8005214:	2200      	movs	r2, #0
 8005216:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005218:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_UART_MspInit+0x148>)
 800521a:	2200      	movs	r2, #0
 800521c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_UART_MspInit+0x148>)
 8005220:	2200      	movs	r2, #0
 8005222:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005224:	4822      	ldr	r0, [pc, #136]	; (80052b0 <HAL_UART_MspInit+0x148>)
 8005226:	f000 fd91 	bl	8005d4c <HAL_DMA_Init>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005230:	f7fe ffec 	bl	800420c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_UART_MspInit+0x148>)
 8005238:	639a      	str	r2, [r3, #56]	; 0x38
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <HAL_UART_MspInit+0x148>)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005240:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005242:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <HAL_UART_MspInit+0x154>)
 8005244:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800524c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005250:	2240      	movs	r2, #64	; 0x40
 8005252:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005256:	2200      	movs	r2, #0
 8005258:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800525a:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_UART_MspInit+0x150>)
 800525c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005260:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005264:	2200      	movs	r2, #0
 8005266:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_UART_MspInit+0x150>)
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005270:	2200      	movs	r2, #0
 8005272:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005276:	2200      	movs	r2, #0
 8005278:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_UART_MspInit+0x150>)
 800527c:	2200      	movs	r2, #0
 800527e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005280:	480d      	ldr	r0, [pc, #52]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005282:	f000 fd63 	bl	8005d4c <HAL_DMA_Init>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800528c:	f7fe ffbe 	bl	800420c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005294:	635a      	str	r2, [r3, #52]	; 0x34
 8005296:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <HAL_UART_MspInit+0x150>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800529c:	bf00      	nop
 800529e:	3728      	adds	r7, #40	; 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40004400 	.word	0x40004400
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020000 	.word	0x40020000
 80052b0:	20000714 	.word	0x20000714
 80052b4:	40026088 	.word	0x40026088
 80052b8:	20000774 	.word	0x20000774
 80052bc:	400260a0 	.word	0x400260a0

080052c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80052c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052c4:	480d      	ldr	r0, [pc, #52]	; (80052fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052c6:	490e      	ldr	r1, [pc, #56]	; (8005300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052c8:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052cc:	e002      	b.n	80052d4 <LoopCopyDataInit>

080052ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052d2:	3304      	adds	r3, #4

080052d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052d8:	d3f9      	bcc.n	80052ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052da:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052dc:	4c0b      	ldr	r4, [pc, #44]	; (800530c <LoopFillZerobss+0x26>)
  movs r3, #0
 80052de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052e0:	e001      	b.n	80052e6 <LoopFillZerobss>

080052e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052e4:	3204      	adds	r2, #4

080052e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052e8:	d3fb      	bcc.n	80052e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052ea:	f7ff fd1b 	bl	8004d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ee:	f009 fc39 	bl	800eb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052f2:	f7fe febd 	bl	8004070 <main>
  bx  lr    
 80052f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80052f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005300:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8005304:	080140b8 	.word	0x080140b8
  ldr r2, =_sbss
 8005308:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800530c:	200051f8 	.word	0x200051f8

08005310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005310:	e7fe      	b.n	8005310 <ADC_IRQHandler>
	...

08005314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_Init+0x40>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a0d      	ldr	r2, [pc, #52]	; (8005354 <HAL_Init+0x40>)
 800531e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_Init+0x40>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <HAL_Init+0x40>)
 800532a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800532e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_Init+0x40>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_Init+0x40>)
 8005336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800533c:	2003      	movs	r0, #3
 800533e:	f000 fcd0 	bl	8005ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005342:	200f      	movs	r0, #15
 8005344:	f7ff fb74 	bl	8004a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005348:	f7ff fb46 	bl	80049d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023c00 	.word	0x40023c00

08005358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_IncTick+0x20>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_IncTick+0x24>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4413      	add	r3, r2
 8005368:	4a04      	ldr	r2, [pc, #16]	; (800537c <HAL_IncTick+0x24>)
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000010 	.word	0x20000010
 800537c:	200007d4 	.word	0x200007d4

08005380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return uwTick;
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <HAL_GetTick+0x14>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	200007d4 	.word	0x200007d4

08005398 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e033      	b.n	8005416 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fe88 	bl	80020cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d118      	bne.n	8005408 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053de:	f023 0302 	bic.w	r3, r3, #2
 80053e2:	f043 0202 	orr.w	r2, r3, #2
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa4e 	bl	800588c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
 8005406:	e001      	b.n	800540c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_ADC_Start_DMA+0x1e>
 800543a:	2302      	movs	r3, #2
 800543c:	e0ce      	b.n	80055dc <HAL_ADC_Start_DMA+0x1bc>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d018      	beq.n	8005486 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005464:	4b5f      	ldr	r3, [pc, #380]	; (80055e4 <HAL_ADC_Start_DMA+0x1c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5f      	ldr	r2, [pc, #380]	; (80055e8 <HAL_ADC_Start_DMA+0x1c8>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0c9a      	lsrs	r2, r3, #18
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005478:	e002      	b.n	8005480 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3b01      	subs	r3, #1
 800547e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f9      	bne.n	800547a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005494:	d107      	bne.n	80054a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	f040 8086 	bne.w	80055c2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d007      	beq.n	80054e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f4:	d106      	bne.n	8005504 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	f023 0206 	bic.w	r2, r3, #6
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
 8005502:	e002      	b.n	800550a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005512:	4b36      	ldr	r3, [pc, #216]	; (80055ec <HAL_ADC_Start_DMA+0x1cc>)
 8005514:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	4a35      	ldr	r2, [pc, #212]	; (80055f0 <HAL_ADC_Start_DMA+0x1d0>)
 800551c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	4a34      	ldr	r2, [pc, #208]	; (80055f4 <HAL_ADC_Start_DMA+0x1d4>)
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	4a33      	ldr	r2, [pc, #204]	; (80055f8 <HAL_ADC_Start_DMA+0x1d8>)
 800552c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005536:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005546:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005556:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	334c      	adds	r3, #76	; 0x4c
 8005562:	4619      	mov	r1, r3
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f000 fc9e 	bl	8005ea8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d129      	bne.n	80055da <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	e020      	b.n	80055da <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <HAL_ADC_Start_DMA+0x1dc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d11b      	bne.n	80055da <HAL_ADC_Start_DMA+0x1ba>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d114      	bne.n	80055da <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	e00b      	b.n	80055da <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f043 0210 	orr.w	r2, r3, #16
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f043 0201 	orr.w	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000008 	.word	0x20000008
 80055e8:	431bde83 	.word	0x431bde83
 80055ec:	40012300 	.word	0x40012300
 80055f0:	08005a85 	.word	0x08005a85
 80055f4:	08005b3f 	.word	0x08005b3f
 80055f8:	08005b5b 	.word	0x08005b5b
 80055fc:	40012000 	.word	0x40012000

08005600 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x1c>
 8005640:	2302      	movs	r3, #2
 8005642:	e113      	b.n	800586c <HAL_ADC_ConfigChannel+0x244>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b09      	cmp	r3, #9
 8005652:	d925      	bls.n	80056a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68d9      	ldr	r1, [r3, #12]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	3b1e      	subs	r3, #30
 800566a:	2207      	movs	r2, #7
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	43da      	mvns	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	400a      	ands	r2, r1
 8005678:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68d9      	ldr	r1, [r3, #12]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	4618      	mov	r0, r3
 800568c:	4603      	mov	r3, r0
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4403      	add	r3, r0
 8005692:	3b1e      	subs	r3, #30
 8005694:	409a      	lsls	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	e022      	b.n	80056e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6919      	ldr	r1, [r3, #16]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	4613      	mov	r3, r2
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	4413      	add	r3, r2
 80056b4:	2207      	movs	r2, #7
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43da      	mvns	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	400a      	ands	r2, r1
 80056c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6919      	ldr	r1, [r3, #16]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4618      	mov	r0, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	4403      	add	r3, r0
 80056dc:	409a      	lsls	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d824      	bhi.n	8005738 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	3b05      	subs	r3, #5
 8005700:	221f      	movs	r2, #31
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43da      	mvns	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	400a      	ands	r2, r1
 800570e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	4618      	mov	r0, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	3b05      	subs	r3, #5
 800572a:	fa00 f203 	lsl.w	r2, r0, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	635a      	str	r2, [r3, #52]	; 0x34
 8005736:	e04c      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d824      	bhi.n	800578a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	3b23      	subs	r3, #35	; 0x23
 8005752:	221f      	movs	r2, #31
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43da      	mvns	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	400a      	ands	r2, r1
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	4618      	mov	r0, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	3b23      	subs	r3, #35	; 0x23
 800577c:	fa00 f203 	lsl.w	r2, r0, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
 8005788:	e023      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	3b41      	subs	r3, #65	; 0x41
 800579c:	221f      	movs	r2, #31
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43da      	mvns	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	400a      	ands	r2, r1
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	4618      	mov	r0, r3
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	3b41      	subs	r3, #65	; 0x41
 80057c6:	fa00 f203 	lsl.w	r2, r0, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057d2:	4b29      	ldr	r3, [pc, #164]	; (8005878 <HAL_ADC_ConfigChannel+0x250>)
 80057d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a28      	ldr	r2, [pc, #160]	; (800587c <HAL_ADC_ConfigChannel+0x254>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10f      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x1d8>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b12      	cmp	r3, #18
 80057e6:	d10b      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1d      	ldr	r2, [pc, #116]	; (800587c <HAL_ADC_ConfigChannel+0x254>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d12b      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x23a>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_ADC_ConfigChannel+0x258>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <HAL_ADC_ConfigChannel+0x1f4>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b11      	cmp	r3, #17
 800581a:	d122      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a11      	ldr	r2, [pc, #68]	; (8005880 <HAL_ADC_ConfigChannel+0x258>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_ADC_ConfigChannel+0x25c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a11      	ldr	r2, [pc, #68]	; (8005888 <HAL_ADC_ConfigChannel+0x260>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	0c9a      	lsrs	r2, r3, #18
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005854:	e002      	b.n	800585c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3b01      	subs	r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f9      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40012300 	.word	0x40012300
 800587c:	40012000 	.word	0x40012000
 8005880:	10000012 	.word	0x10000012
 8005884:	20000008 	.word	0x20000008
 8005888:	431bde83 	.word	0x431bde83

0800588c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005894:	4b79      	ldr	r3, [pc, #484]	; (8005a7c <ADC_Init+0x1f0>)
 8005896:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6899      	ldr	r1, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <ADC_Init+0x1f4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d022      	beq.n	800596a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6899      	ldr	r1, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	e00f      	b.n	800598a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0202 	bic.w	r2, r2, #2
 8005998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6899      	ldr	r1, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7e1b      	ldrb	r3, [r3, #24]
 80059a4:	005a      	lsls	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	3b01      	subs	r3, #1
 80059e4:	035a      	lsls	r2, r3, #13
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	e007      	b.n	8005a00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	051a      	lsls	r2, r3, #20
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6899      	ldr	r1, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a42:	025a      	lsls	r2, r3, #9
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	029a      	lsls	r2, r3, #10
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40012300 	.word	0x40012300
 8005a80:	0f000001 	.word	0x0f000001

08005a84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d13c      	bne.n	8005b18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d12b      	bne.n	8005b10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d127      	bne.n	8005b10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d006      	beq.n	8005adc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d119      	bne.n	8005b10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0220 	bic.w	r2, r2, #32
 8005aea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f043 0201 	orr.w	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7fd feed 	bl	80038f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b16:	e00e      	b.n	8005b36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fd75 	bl	8005614 <HAL_ADC_ErrorCallback>
}
 8005b2a:	e004      	b.n	8005b36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fd57 	bl	8005600 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f043 0204 	orr.w	r2, r3, #4
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff fd4a 	bl	8005614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <__NVIC_SetPriorityGrouping+0x44>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bba:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <__NVIC_SetPriorityGrouping+0x44>)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	60d3      	str	r3, [r2, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <__NVIC_GetPriorityGrouping+0x18>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	f003 0307 	and.w	r3, r3, #7
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000ed00 	.word	0xe000ed00

08005bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	db0b      	blt.n	8005c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	f003 021f 	and.w	r2, r3, #31
 8005c04:	4907      	ldr	r1, [pc, #28]	; (8005c24 <__NVIC_EnableIRQ+0x38>)
 8005c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	e000e100 	.word	0xe000e100

08005c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	6039      	str	r1, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db0a      	blt.n	8005c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	490c      	ldr	r1, [pc, #48]	; (8005c74 <__NVIC_SetPriority+0x4c>)
 8005c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c46:	0112      	lsls	r2, r2, #4
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c50:	e00a      	b.n	8005c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4908      	ldr	r1, [pc, #32]	; (8005c78 <__NVIC_SetPriority+0x50>)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	3b04      	subs	r3, #4
 8005c60:	0112      	lsls	r2, r2, #4
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	440b      	add	r3, r1
 8005c66:	761a      	strb	r2, [r3, #24]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	e000e100 	.word	0xe000e100
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f1c3 0307 	rsb	r3, r3, #7
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	bf28      	it	cs
 8005c9a:	2304      	movcs	r3, #4
 8005c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d902      	bls.n	8005cac <NVIC_EncodePriority+0x30>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3b03      	subs	r3, #3
 8005caa:	e000      	b.n	8005cae <NVIC_EncodePriority+0x32>
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	43d9      	mvns	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd4:	4313      	orrs	r3, r2
         );
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3724      	adds	r7, #36	; 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ff4c 	bl	8005b88 <__NVIC_SetPriorityGrouping>
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d0a:	f7ff ff61 	bl	8005bd0 <__NVIC_GetPriorityGrouping>
 8005d0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	6978      	ldr	r0, [r7, #20]
 8005d16:	f7ff ffb1 	bl	8005c7c <NVIC_EncodePriority>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d20:	4611      	mov	r1, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ff80 	bl	8005c28 <__NVIC_SetPriority>
}
 8005d28:	bf00      	nop
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff ff54 	bl	8005bec <__NVIC_EnableIRQ>
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d58:	f7ff fb12 	bl	8005380 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e099      	b.n	8005e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d88:	e00f      	b.n	8005daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d8a:	f7ff faf9 	bl	8005380 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d908      	bls.n	8005daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2203      	movs	r2, #3
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e078      	b.n	8005e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e8      	bne.n	8005d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4b38      	ldr	r3, [pc, #224]	; (8005ea4 <HAL_DMA_Init+0x158>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d107      	bne.n	8005e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0307 	bic.w	r3, r3, #7
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d117      	bne.n	8005e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00e      	beq.n	8005e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fb01 	bl	8006458 <DMA_CheckFifoParam>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2240      	movs	r2, #64	; 0x40
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e016      	b.n	8005e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fab8 	bl	80063ec <DMA_CalcBaseAndBitshift>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e84:	223f      	movs	r2, #63	; 0x3f
 8005e86:	409a      	lsls	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	f010803f 	.word	0xf010803f

08005ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_DMA_Start_IT+0x26>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e040      	b.n	8005f50 <HAL_DMA_Start_IT+0xa8>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d12f      	bne.n	8005f42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fa4a 	bl	8006390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	223f      	movs	r2, #63	; 0x3f
 8005f02:	409a      	lsls	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0216 	orr.w	r2, r2, #22
 8005f16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0208 	orr.w	r2, r2, #8
 8005f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	e005      	b.n	8005f4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f66:	f7ff fa0b 	bl	8005380 <HAL_GetTick>
 8005f6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d008      	beq.n	8005f8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e052      	b.n	8006030 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0216 	bic.w	r2, r2, #22
 8005f98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <HAL_DMA_Abort+0x62>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0208 	bic.w	r2, r2, #8
 8005fc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fda:	e013      	b.n	8006004 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fdc:	f7ff f9d0 	bl	8005380 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d90c      	bls.n	8006004 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e015      	b.n	8006030 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e4      	bne.n	8005fdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	223f      	movs	r2, #63	; 0x3f
 8006018:	409a      	lsls	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d004      	beq.n	8006056 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2280      	movs	r2, #128	; 0x80
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e00c      	b.n	8006070 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2205      	movs	r2, #5
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006088:	4b8e      	ldr	r3, [pc, #568]	; (80062c4 <HAL_DMA_IRQHandler+0x248>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a8e      	ldr	r2, [pc, #568]	; (80062c8 <HAL_DMA_IRQHandler+0x24c>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	0a9b      	lsrs	r3, r3, #10
 8006094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	2208      	movs	r2, #8
 80060a8:	409a      	lsls	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01a      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d013      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0204 	bic.w	r2, r2, #4
 80060ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	2208      	movs	r2, #8
 80060d6:	409a      	lsls	r2, r3
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	f043 0201 	orr.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	2201      	movs	r2, #1
 80060ee:	409a      	lsls	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d012      	beq.n	800611e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610a:	2201      	movs	r2, #1
 800610c:	409a      	lsls	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	f043 0202 	orr.w	r2, r3, #2
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006122:	2204      	movs	r2, #4
 8006124:	409a      	lsls	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d012      	beq.n	8006154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	2204      	movs	r2, #4
 8006142:	409a      	lsls	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	f043 0204 	orr.w	r2, r3, #4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006158:	2210      	movs	r2, #16
 800615a:	409a      	lsls	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d043      	beq.n	80061ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d03c      	beq.n	80061ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	2210      	movs	r2, #16
 8006178:	409a      	lsls	r2, r3
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d018      	beq.n	80061be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d108      	bne.n	80061ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d024      	beq.n	80061ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	e01f      	b.n	80061ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
 80061bc:	e016      	b.n	80061ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0208 	bic.w	r2, r2, #8
 80061da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f0:	2220      	movs	r2, #32
 80061f2:	409a      	lsls	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 808f 	beq.w	800631c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8087 	beq.w	800631c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006212:	2220      	movs	r2, #32
 8006214:	409a      	lsls	r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b05      	cmp	r3, #5
 8006224:	d136      	bne.n	8006294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0216 	bic.w	r2, r2, #22
 8006234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_DMA_IRQHandler+0x1da>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0208 	bic.w	r2, r2, #8
 8006264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	223f      	movs	r2, #63	; 0x3f
 800626c:	409a      	lsls	r2, r3
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	2b00      	cmp	r3, #0
 8006288:	d07e      	beq.n	8006388 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
        }
        return;
 8006292:	e079      	b.n	8006388 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10d      	bne.n	80062cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d031      	beq.n	800631c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	e02c      	b.n	800631c <HAL_DMA_IRQHandler+0x2a0>
 80062c2:	bf00      	nop
 80062c4:	20000008 	.word	0x20000008
 80062c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d023      	beq.n	800631c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	e01e      	b.n	800631c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10f      	bne.n	800630c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0210 	bic.w	r2, r2, #16
 80062fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006320:	2b00      	cmp	r3, #0
 8006322:	d032      	beq.n	800638a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d022      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2205      	movs	r2, #5
 8006334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	3301      	adds	r3, #1
 800634c:	60bb      	str	r3, [r7, #8]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	d307      	bcc.n	8006364 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f2      	bne.n	8006348 <HAL_DMA_IRQHandler+0x2cc>
 8006362:	e000      	b.n	8006366 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006364:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
 8006386:	e000      	b.n	800638a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006388:	bf00      	nop
    }
  }
}
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d108      	bne.n	80063d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063ce:	e007      	b.n	80063e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]
}
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b10      	subs	r3, #16
 80063fc:	4a14      	ldr	r2, [pc, #80]	; (8006450 <DMA_CalcBaseAndBitshift+0x64>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006406:	4a13      	ldr	r2, [pc, #76]	; (8006454 <DMA_CalcBaseAndBitshift+0x68>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d909      	bls.n	800642e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	659a      	str	r2, [r3, #88]	; 0x58
 800642c:	e007      	b.n	800643e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	aaaaaaab 	.word	0xaaaaaaab
 8006454:	08013b38 	.word	0x08013b38

08006458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11f      	bne.n	80064b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d856      	bhi.n	8006526 <DMA_CheckFifoParam+0xce>
 8006478:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <DMA_CheckFifoParam+0x28>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	08006491 	.word	0x08006491
 8006484:	080064a3 	.word	0x080064a3
 8006488:	08006491 	.word	0x08006491
 800648c:	08006527 	.word	0x08006527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d046      	beq.n	800652a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a0:	e043      	b.n	800652a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064aa:	d140      	bne.n	800652e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b0:	e03d      	b.n	800652e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ba:	d121      	bne.n	8006500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d837      	bhi.n	8006532 <DMA_CheckFifoParam+0xda>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <DMA_CheckFifoParam+0x70>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064df 	.word	0x080064df
 80064d0:	080064d9 	.word	0x080064d9
 80064d4:	080064f1 	.word	0x080064f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      break;
 80064dc:	e030      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d025      	beq.n	8006536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ee:	e022      	b.n	8006536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064f8:	d11f      	bne.n	800653a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064fe:	e01c      	b.n	800653a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d903      	bls.n	800650e <DMA_CheckFifoParam+0xb6>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d003      	beq.n	8006514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800650c:	e018      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
      break;
 8006512:	e015      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
      break;
 8006524:	e00b      	b.n	800653e <DMA_CheckFifoParam+0xe6>
      break;
 8006526:	bf00      	nop
 8006528:	e00a      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 800652a:	bf00      	nop
 800652c:	e008      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 800652e:	bf00      	nop
 8006530:	e006      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 8006532:	bf00      	nop
 8006534:	e004      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;   
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 800653e:	bf00      	nop
    }
  } 
  
  return status; 
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e159      	b.n	8006820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800656c:	2201      	movs	r2, #1
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4013      	ands	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	429a      	cmp	r2, r3
 8006586:	f040 8148 	bne.w	800681a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d005      	beq.n	80065a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d130      	bne.n	8006604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	2203      	movs	r2, #3
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065d8:	2201      	movs	r2, #1
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	f003 0201 	and.w	r2, r3, #1
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	fa02 f303 	lsl.w	r3, r2, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d017      	beq.n	8006640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	2203      	movs	r2, #3
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	43db      	mvns	r3, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4013      	ands	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4313      	orrs	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d123      	bne.n	8006694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	08da      	lsrs	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3208      	adds	r2, #8
 8006654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	220f      	movs	r2, #15
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4013      	ands	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	08da      	lsrs	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3208      	adds	r2, #8
 800668e:	69b9      	ldr	r1, [r7, #24]
 8006690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	2203      	movs	r2, #3
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	43db      	mvns	r3, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0203 	and.w	r2, r3, #3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a2 	beq.w	800681a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	4b57      	ldr	r3, [pc, #348]	; (8006838 <HAL_GPIO_Init+0x2e8>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	4a56      	ldr	r2, [pc, #344]	; (8006838 <HAL_GPIO_Init+0x2e8>)
 80066e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066e4:	6453      	str	r3, [r2, #68]	; 0x44
 80066e6:	4b54      	ldr	r3, [pc, #336]	; (8006838 <HAL_GPIO_Init+0x2e8>)
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066f2:	4a52      	ldr	r2, [pc, #328]	; (800683c <HAL_GPIO_Init+0x2ec>)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	3302      	adds	r3, #2
 80066fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	220f      	movs	r2, #15
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a49      	ldr	r2, [pc, #292]	; (8006840 <HAL_GPIO_Init+0x2f0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d019      	beq.n	8006752 <HAL_GPIO_Init+0x202>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a48      	ldr	r2, [pc, #288]	; (8006844 <HAL_GPIO_Init+0x2f4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_GPIO_Init+0x1fe>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a47      	ldr	r2, [pc, #284]	; (8006848 <HAL_GPIO_Init+0x2f8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00d      	beq.n	800674a <HAL_GPIO_Init+0x1fa>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a46      	ldr	r2, [pc, #280]	; (800684c <HAL_GPIO_Init+0x2fc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <HAL_GPIO_Init+0x1f6>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a45      	ldr	r2, [pc, #276]	; (8006850 <HAL_GPIO_Init+0x300>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_GPIO_Init+0x1f2>
 800673e:	2304      	movs	r3, #4
 8006740:	e008      	b.n	8006754 <HAL_GPIO_Init+0x204>
 8006742:	2307      	movs	r3, #7
 8006744:	e006      	b.n	8006754 <HAL_GPIO_Init+0x204>
 8006746:	2303      	movs	r3, #3
 8006748:	e004      	b.n	8006754 <HAL_GPIO_Init+0x204>
 800674a:	2302      	movs	r3, #2
 800674c:	e002      	b.n	8006754 <HAL_GPIO_Init+0x204>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <HAL_GPIO_Init+0x204>
 8006752:	2300      	movs	r3, #0
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	f002 0203 	and.w	r2, r2, #3
 800675a:	0092      	lsls	r2, r2, #2
 800675c:	4093      	lsls	r3, r2
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006764:	4935      	ldr	r1, [pc, #212]	; (800683c <HAL_GPIO_Init+0x2ec>)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	3302      	adds	r3, #2
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <HAL_GPIO_Init+0x304>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	43db      	mvns	r3, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006796:	4a2f      	ldr	r2, [pc, #188]	; (8006854 <HAL_GPIO_Init+0x304>)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800679c:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <HAL_GPIO_Init+0x304>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4013      	ands	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067c0:	4a24      	ldr	r2, [pc, #144]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	43db      	mvns	r3, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067ea:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067f0:	4b18      	ldr	r3, [pc, #96]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4013      	ands	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006814:	4a0f      	ldr	r2, [pc, #60]	; (8006854 <HAL_GPIO_Init+0x304>)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2b0f      	cmp	r3, #15
 8006824:	f67f aea2 	bls.w	800656c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3724      	adds	r7, #36	; 0x24
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
 800683c:	40013800 	.word	0x40013800
 8006840:	40020000 	.word	0x40020000
 8006844:	40020400 	.word	0x40020400
 8006848:	40020800 	.word	0x40020800
 800684c:	40020c00 	.word	0x40020c00
 8006850:	40021000 	.word	0x40021000
 8006854:	40013c00 	.word	0x40013c00

08006858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
 8006864:	4613      	mov	r3, r2
 8006866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006868:	787b      	ldrb	r3, [r7, #1]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800686e:	887a      	ldrh	r2, [r7, #2]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006874:	e003      	b.n	800687e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006876:	887b      	ldrh	r3, [r7, #2]
 8006878:	041a      	lsls	r2, r3, #16
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	619a      	str	r2, [r3, #24]
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d006      	beq.n	80068b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068a2:	4a05      	ldr	r2, [pc, #20]	; (80068b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fd f80c 	bl	80038c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40013c00 	.word	0x40013c00

080068bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e12b      	b.n	8006b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fd fb7c 	bl	8003fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800690e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800691e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006920:	f001 fbfc 	bl	800811c <HAL_RCC_GetPCLK1Freq>
 8006924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4a81      	ldr	r2, [pc, #516]	; (8006b30 <HAL_I2C_Init+0x274>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d807      	bhi.n	8006940 <HAL_I2C_Init+0x84>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a80      	ldr	r2, [pc, #512]	; (8006b34 <HAL_I2C_Init+0x278>)
 8006934:	4293      	cmp	r3, r2
 8006936:	bf94      	ite	ls
 8006938:	2301      	movls	r3, #1
 800693a:	2300      	movhi	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e006      	b.n	800694e <HAL_I2C_Init+0x92>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a7d      	ldr	r2, [pc, #500]	; (8006b38 <HAL_I2C_Init+0x27c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	bf94      	ite	ls
 8006948:	2301      	movls	r3, #1
 800694a:	2300      	movhi	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0e7      	b.n	8006b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a78      	ldr	r2, [pc, #480]	; (8006b3c <HAL_I2C_Init+0x280>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	0c9b      	lsrs	r3, r3, #18
 8006960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a6a      	ldr	r2, [pc, #424]	; (8006b30 <HAL_I2C_Init+0x274>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <HAL_I2C_Init+0xd4>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3301      	adds	r3, #1
 800698e:	e009      	b.n	80069a4 <HAL_I2C_Init+0xe8>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	4a69      	ldr	r2, [pc, #420]	; (8006b40 <HAL_I2C_Init+0x284>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	3301      	adds	r3, #1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	495c      	ldr	r1, [pc, #368]	; (8006b30 <HAL_I2C_Init+0x274>)
 80069c0:	428b      	cmp	r3, r1
 80069c2:	d819      	bhi.n	80069f8 <HAL_I2C_Init+0x13c>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1e59      	subs	r1, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80069d2:	1c59      	adds	r1, r3, #1
 80069d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069d8:	400b      	ands	r3, r1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_I2C_Init+0x138>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1e59      	subs	r1, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80069ec:	3301      	adds	r3, #1
 80069ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f2:	e051      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 80069f4:	2304      	movs	r3, #4
 80069f6:	e04f      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d111      	bne.n	8006a24 <HAL_I2C_Init+0x168>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1e58      	subs	r0, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6859      	ldr	r1, [r3, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	440b      	add	r3, r1
 8006a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a12:	3301      	adds	r3, #1
 8006a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	e012      	b.n	8006a4a <HAL_I2C_Init+0x18e>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	1e58      	subs	r0, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6859      	ldr	r1, [r3, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	0099      	lsls	r1, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf0c      	ite	eq
 8006a44:	2301      	moveq	r3, #1
 8006a46:	2300      	movne	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_I2C_Init+0x196>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e022      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10e      	bne.n	8006a78 <HAL_I2C_Init+0x1bc>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1e58      	subs	r0, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	440b      	add	r3, r1
 8006a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	e00f      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1e58      	subs	r0, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	0099      	lsls	r1, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	6809      	ldr	r1, [r1, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6911      	ldr	r1, [r2, #16]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68d2      	ldr	r2, [r2, #12]
 8006ad2:	4311      	orrs	r1, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	000186a0 	.word	0x000186a0
 8006b34:	001e847f 	.word	0x001e847f
 8006b38:	003d08ff 	.word	0x003d08ff
 8006b3c:	431bde83 	.word	0x431bde83
 8006b40:	10624dd3 	.word	0x10624dd3

08006b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	461a      	mov	r2, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	817b      	strh	r3, [r7, #10]
 8006b56:	460b      	mov	r3, r1
 8006b58:	813b      	strh	r3, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b5e:	f7fe fc0f 	bl	8005380 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	f040 80d9 	bne.w	8006d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2319      	movs	r3, #25
 8006b78:	2201      	movs	r2, #1
 8006b7a:	496d      	ldr	r1, [pc, #436]	; (8006d30 <HAL_I2C_Mem_Write+0x1ec>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fc7f 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e0cc      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_I2C_Mem_Write+0x56>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0c5      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d007      	beq.n	8006bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2221      	movs	r2, #33	; 0x21
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a4d      	ldr	r2, [pc, #308]	; (8006d34 <HAL_I2C_Mem_Write+0x1f0>)
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c02:	88f8      	ldrh	r0, [r7, #6]
 8006c04:	893a      	ldrh	r2, [r7, #8]
 8006c06:	8979      	ldrh	r1, [r7, #10]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4603      	mov	r3, r0
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fab6 	bl	8007184 <I2C_RequestMemoryWrite>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d052      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e081      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fd00 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d107      	bne.n	8006c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e06b      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d11b      	bne.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d017      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1aa      	bne.n	8006c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fcec 	bl	80076ae <I2C_WaitOnBTFFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d107      	bne.n	8006cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e016      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e000      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	00100002 	.word	0x00100002
 8006d34:	ffff0000 	.word	0xffff0000

08006d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	817b      	strh	r3, [r7, #10]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	813b      	strh	r3, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d52:	f7fe fb15 	bl	8005380 <HAL_GetTick>
 8006d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	f040 8208 	bne.w	8007176 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2319      	movs	r3, #25
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	497b      	ldr	r1, [pc, #492]	; (8006f5c <HAL_I2C_Mem_Read+0x224>)
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fb85 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e1fb      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_I2C_Mem_Read+0x56>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e1f4      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d007      	beq.n	8006db4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2222      	movs	r2, #34	; 0x22
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2240      	movs	r2, #64	; 0x40
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a5b      	ldr	r2, [pc, #364]	; (8006f60 <HAL_I2C_Mem_Read+0x228>)
 8006df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006df6:	88f8      	ldrh	r0, [r7, #6]
 8006df8:	893a      	ldrh	r2, [r7, #8]
 8006dfa:	8979      	ldrh	r1, [r7, #10]
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4603      	mov	r3, r0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fa52 	bl	80072b0 <I2C_RequestMemoryRead>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e1b0      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d113      	bne.n	8006e46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	623b      	str	r3, [r7, #32]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e184      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d11b      	bne.n	8006e86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e164      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	e144      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006edc:	e138      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	f200 80f1 	bhi.w	80070ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d123      	bne.n	8006f38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fc1b 	bl	8007730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e139      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f36:	e10b      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d14e      	bne.n	8006fde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	2200      	movs	r2, #0
 8006f48:	4906      	ldr	r1, [pc, #24]	; (8006f64 <HAL_I2C_Mem_Read+0x22c>)
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fa98 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e10e      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
 8006f5a:	bf00      	nop
 8006f5c:	00100002 	.word	0x00100002
 8006f60:	ffff0000 	.word	0xffff0000
 8006f64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fdc:	e0b8      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4966      	ldr	r1, [pc, #408]	; (8007180 <HAL_I2C_Mem_Read+0x448>)
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fa49 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0bf      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	2200      	movs	r2, #0
 8007042:	494f      	ldr	r1, [pc, #316]	; (8007180 <HAL_I2C_Mem_Read+0x448>)
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fa1b 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e091      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070c8:	e042      	b.n	8007150 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fb2e 	bl	8007730 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e04c      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b04      	cmp	r3, #4
 800711c:	d118      	bne.n	8007150 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007154:	2b00      	cmp	r3, #0
 8007156:	f47f aec2 	bne.w	8006ede <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3728      	adds	r7, #40	; 0x28
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	00010004 	.word	0x00010004

08007184 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	817b      	strh	r3, [r7, #10]
 8007196:	460b      	mov	r3, r1
 8007198:	813b      	strh	r3, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f960 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d4:	d103      	bne.n	80071de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e05f      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071e2:	897b      	ldrh	r3, [r7, #10]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	492d      	ldr	r1, [pc, #180]	; (80072ac <I2C_RequestMemoryWrite+0x128>)
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f998 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e04c      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800721e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007220:	6a39      	ldr	r1, [r7, #32]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fa02 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b04      	cmp	r3, #4
 8007234:	d107      	bne.n	8007246 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e02b      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007250:	893b      	ldrh	r3, [r7, #8]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	611a      	str	r2, [r3, #16]
 800725a:	e021      	b.n	80072a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800725c:	893b      	ldrh	r3, [r7, #8]
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	b29b      	uxth	r3, r3
 8007262:	b2da      	uxtb	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800726a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726c:	6a39      	ldr	r1, [r7, #32]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f9dc 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2b04      	cmp	r3, #4
 8007280:	d107      	bne.n	8007292 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e005      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007296:	893b      	ldrh	r3, [r7, #8]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	00010002 	.word	0x00010002

080072b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	817b      	strh	r3, [r7, #10]
 80072c2:	460b      	mov	r3, r1
 80072c4:	813b      	strh	r3, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f8c2 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00d      	beq.n	800731e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007310:	d103      	bne.n	800731a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e0aa      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800732c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	6a3a      	ldr	r2, [r7, #32]
 8007332:	4952      	ldr	r1, [pc, #328]	; (800747c <I2C_RequestMemoryRead+0x1cc>)
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f8fa 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e097      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	6a39      	ldr	r1, [r7, #32]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f964 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b04      	cmp	r3, #4
 8007370:	d107      	bne.n	8007382 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e076      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d105      	bne.n	8007398 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800738c:	893b      	ldrh	r3, [r7, #8]
 800738e:	b2da      	uxtb	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	611a      	str	r2, [r3, #16]
 8007396:	e021      	b.n	80073dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007398:	893b      	ldrh	r3, [r7, #8]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	b29b      	uxth	r3, r3
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	6a39      	ldr	r1, [r7, #32]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f93e 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d107      	bne.n	80073ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e050      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073d2:	893b      	ldrh	r3, [r7, #8]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	6a39      	ldr	r1, [r7, #32]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f923 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00d      	beq.n	8007408 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d107      	bne.n	8007404 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007402:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e035      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007416:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	2200      	movs	r2, #0
 8007420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f82b 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743e:	d103      	bne.n	8007448 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e013      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800744c:	897b      	ldrh	r3, [r7, #10]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	4906      	ldr	r1, [pc, #24]	; (800747c <I2C_RequestMemoryRead+0x1cc>)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f863 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	00010002 	.word	0x00010002

08007480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007490:	e025      	b.n	80074de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d021      	beq.n	80074de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749a:	f7fd ff71 	bl	8005380 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d116      	bne.n	80074de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e023      	b.n	8007526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d10d      	bne.n	8007504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	43da      	mvns	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	e00c      	b.n	800751e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	43da      	mvns	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4013      	ands	r3, r2
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf0c      	ite	eq
 8007516:	2301      	moveq	r3, #1
 8007518:	2300      	movne	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	429a      	cmp	r2, r3
 8007522:	d0b6      	beq.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800753c:	e051      	b.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754c:	d123      	bne.n	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800755c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f043 0204 	orr.w	r2, r3, #4
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e046      	b.n	8007624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d021      	beq.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fd feef 	bl	8005380 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d116      	bne.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f043 0220 	orr.w	r2, r3, #32
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e020      	b.n	8007624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d10c      	bne.n	8007606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	43da      	mvns	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	e00b      	b.n	800761e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	43da      	mvns	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4013      	ands	r3, r2
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	bf14      	ite	ne
 8007618:	2301      	movne	r3, #1
 800761a:	2300      	moveq	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d18d      	bne.n	800753e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007638:	e02d      	b.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f8ce 	bl	80077dc <I2C_IsAcknowledgeFailed>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e02d      	b.n	80076a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d021      	beq.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007652:	f7fd fe95 	bl	8005380 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	429a      	cmp	r2, r3
 8007660:	d302      	bcc.n	8007668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d116      	bne.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e007      	b.n	80076a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d1ca      	bne.n	800763a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076ba:	e02d      	b.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f88d 	bl	80077dc <I2C_IsAcknowledgeFailed>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e02d      	b.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d021      	beq.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d4:	f7fd fe54 	bl	8005380 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d302      	bcc.n	80076ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d116      	bne.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e007      	b.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d1ca      	bne.n	80076bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800773c:	e042      	b.n	80077c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b10      	cmp	r3, #16
 800774a:	d119      	bne.n	8007780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0210 	mvn.w	r2, #16
 8007754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e029      	b.n	80077d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007780:	f7fd fdfe 	bl	8005380 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	d302      	bcc.n	8007796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d116      	bne.n	80077c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e007      	b.n	80077d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d1b5      	bne.n	800773e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f2:	d11b      	bne.n	800782c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	f043 0204 	orr.w	r2, r3, #4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e267      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d075      	beq.n	8007946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800785a:	4b88      	ldr	r3, [pc, #544]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	2b04      	cmp	r3, #4
 8007864:	d00c      	beq.n	8007880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007866:	4b85      	ldr	r3, [pc, #532]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800786e:	2b08      	cmp	r3, #8
 8007870:	d112      	bne.n	8007898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007872:	4b82      	ldr	r3, [pc, #520]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800787e:	d10b      	bne.n	8007898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007880:	4b7e      	ldr	r3, [pc, #504]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d05b      	beq.n	8007944 <HAL_RCC_OscConfig+0x108>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d157      	bne.n	8007944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e242      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a0:	d106      	bne.n	80078b0 <HAL_RCC_OscConfig+0x74>
 80078a2:	4b76      	ldr	r3, [pc, #472]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a75      	ldr	r2, [pc, #468]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	e01d      	b.n	80078ec <HAL_RCC_OscConfig+0xb0>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078b8:	d10c      	bne.n	80078d4 <HAL_RCC_OscConfig+0x98>
 80078ba:	4b70      	ldr	r3, [pc, #448]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a6f      	ldr	r2, [pc, #444]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a6c      	ldr	r2, [pc, #432]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	e00b      	b.n	80078ec <HAL_RCC_OscConfig+0xb0>
 80078d4:	4b69      	ldr	r3, [pc, #420]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a68      	ldr	r2, [pc, #416]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	4b66      	ldr	r3, [pc, #408]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a65      	ldr	r2, [pc, #404]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80078e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d013      	beq.n	800791c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f4:	f7fd fd44 	bl	8005380 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078fc:	f7fd fd40 	bl	8005380 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b64      	cmp	r3, #100	; 0x64
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e207      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800790e:	4b5b      	ldr	r3, [pc, #364]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f0      	beq.n	80078fc <HAL_RCC_OscConfig+0xc0>
 800791a:	e014      	b.n	8007946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800791c:	f7fd fd30 	bl	8005380 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007924:	f7fd fd2c 	bl	8005380 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	; 0x64
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e1f3      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007936:	4b51      	ldr	r3, [pc, #324]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0xe8>
 8007942:	e000      	b.n	8007946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d063      	beq.n	8007a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007952:	4b4a      	ldr	r3, [pc, #296]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 030c 	and.w	r3, r3, #12
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800795e:	4b47      	ldr	r3, [pc, #284]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007966:	2b08      	cmp	r3, #8
 8007968:	d11c      	bne.n	80079a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800796a:	4b44      	ldr	r3, [pc, #272]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d116      	bne.n	80079a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007976:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <HAL_RCC_OscConfig+0x152>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d001      	beq.n	800798e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e1c7      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798e:	4b3b      	ldr	r3, [pc, #236]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	4937      	ldr	r1, [pc, #220]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a2:	e03a      	b.n	8007a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d020      	beq.n	80079ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079ac:	4b34      	ldr	r3, [pc, #208]	; (8007a80 <HAL_RCC_OscConfig+0x244>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b2:	f7fd fce5 	bl	8005380 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079ba:	f7fd fce1 	bl	8005380 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e1a8      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079cc:	4b2b      	ldr	r3, [pc, #172]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0f0      	beq.n	80079ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d8:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	4925      	ldr	r1, [pc, #148]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	600b      	str	r3, [r1, #0]
 80079ec:	e015      	b.n	8007a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ee:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <HAL_RCC_OscConfig+0x244>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fd fcc4 	bl	8005380 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079fc:	f7fd fcc0 	bl	8005380 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e187      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a0e:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d036      	beq.n	8007a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d016      	beq.n	8007a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a2e:	4b15      	ldr	r3, [pc, #84]	; (8007a84 <HAL_RCC_OscConfig+0x248>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a34:	f7fd fca4 	bl	8005380 <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a3c:	f7fd fca0 	bl	8005380 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e167      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <HAL_RCC_OscConfig+0x240>)
 8007a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <HAL_RCC_OscConfig+0x200>
 8007a5a:	e01b      	b.n	8007a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a5c:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <HAL_RCC_OscConfig+0x248>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a62:	f7fd fc8d 	bl	8005380 <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a68:	e00e      	b.n	8007a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a6a:	f7fd fc89 	bl	8005380 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d907      	bls.n	8007a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e150      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	42470000 	.word	0x42470000
 8007a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a88:	4b88      	ldr	r3, [pc, #544]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1ea      	bne.n	8007a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8097 	beq.w	8007bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aa6:	4b81      	ldr	r3, [pc, #516]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10f      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	4b7d      	ldr	r3, [pc, #500]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	4a7c      	ldr	r2, [pc, #496]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac2:	4b7a      	ldr	r3, [pc, #488]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aca:	60bb      	str	r3, [r7, #8]
 8007acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad2:	4b77      	ldr	r3, [pc, #476]	; (8007cb0 <HAL_RCC_OscConfig+0x474>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d118      	bne.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ade:	4b74      	ldr	r3, [pc, #464]	; (8007cb0 <HAL_RCC_OscConfig+0x474>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a73      	ldr	r2, [pc, #460]	; (8007cb0 <HAL_RCC_OscConfig+0x474>)
 8007ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aea:	f7fd fc49 	bl	8005380 <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af2:	f7fd fc45 	bl	8005380 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e10c      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b04:	4b6a      	ldr	r3, [pc, #424]	; (8007cb0 <HAL_RCC_OscConfig+0x474>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0f0      	beq.n	8007af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d106      	bne.n	8007b26 <HAL_RCC_OscConfig+0x2ea>
 8007b18:	4b64      	ldr	r3, [pc, #400]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1c:	4a63      	ldr	r2, [pc, #396]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	6713      	str	r3, [r2, #112]	; 0x70
 8007b24:	e01c      	b.n	8007b60 <HAL_RCC_OscConfig+0x324>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCC_OscConfig+0x30c>
 8007b2e:	4b5f      	ldr	r3, [pc, #380]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	4a5e      	ldr	r2, [pc, #376]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b34:	f043 0304 	orr.w	r3, r3, #4
 8007b38:	6713      	str	r3, [r2, #112]	; 0x70
 8007b3a:	4b5c      	ldr	r3, [pc, #368]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	4a5b      	ldr	r2, [pc, #364]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	6713      	str	r3, [r2, #112]	; 0x70
 8007b46:	e00b      	b.n	8007b60 <HAL_RCC_OscConfig+0x324>
 8007b48:	4b58      	ldr	r3, [pc, #352]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	4a57      	ldr	r2, [pc, #348]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	6713      	str	r3, [r2, #112]	; 0x70
 8007b54:	4b55      	ldr	r3, [pc, #340]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b58:	4a54      	ldr	r2, [pc, #336]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b5a:	f023 0304 	bic.w	r3, r3, #4
 8007b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d015      	beq.n	8007b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b68:	f7fd fc0a 	bl	8005380 <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b70:	f7fd fc06 	bl	8005380 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e0cb      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b86:	4b49      	ldr	r3, [pc, #292]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ee      	beq.n	8007b70 <HAL_RCC_OscConfig+0x334>
 8007b92:	e014      	b.n	8007bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b94:	f7fd fbf4 	bl	8005380 <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b9c:	f7fd fbf0 	bl	8005380 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e0b5      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb2:	4b3e      	ldr	r3, [pc, #248]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1ee      	bne.n	8007b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d105      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc4:	4b39      	ldr	r3, [pc, #228]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	4a38      	ldr	r2, [pc, #224]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 80a1 	beq.w	8007d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bda:	4b34      	ldr	r3, [pc, #208]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 030c 	and.w	r3, r3, #12
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d05c      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d141      	bne.n	8007c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bee:	4b31      	ldr	r3, [pc, #196]	; (8007cb4 <HAL_RCC_OscConfig+0x478>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf4:	f7fd fbc4 	bl	8005380 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bfc:	f7fd fbc0 	bl	8005380 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e087      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0e:	4b27      	ldr	r3, [pc, #156]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69da      	ldr	r2, [r3, #28]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	019b      	lsls	r3, r3, #6
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	085b      	lsrs	r3, r3, #1
 8007c32:	3b01      	subs	r3, #1
 8007c34:	041b      	lsls	r3, r3, #16
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	061b      	lsls	r3, r3, #24
 8007c3e:	491b      	ldr	r1, [pc, #108]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <HAL_RCC_OscConfig+0x478>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c4a:	f7fd fb99 	bl	8005380 <HAL_GetTick>
 8007c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c52:	f7fd fb95 	bl	8005380 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e05c      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c64:	4b11      	ldr	r3, [pc, #68]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0f0      	beq.n	8007c52 <HAL_RCC_OscConfig+0x416>
 8007c70:	e054      	b.n	8007d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c72:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <HAL_RCC_OscConfig+0x478>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c78:	f7fd fb82 	bl	8005380 <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c80:	f7fd fb7e 	bl	8005380 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e045      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c92:	4b06      	ldr	r3, [pc, #24]	; (8007cac <HAL_RCC_OscConfig+0x470>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1f0      	bne.n	8007c80 <HAL_RCC_OscConfig+0x444>
 8007c9e:	e03d      	b.n	8007d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d107      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e038      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	40007000 	.word	0x40007000
 8007cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <HAL_RCC_OscConfig+0x4ec>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d028      	beq.n	8007d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d121      	bne.n	8007d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d11a      	bne.n	8007d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ce8:	4013      	ands	r3, r2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d111      	bne.n	8007d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	3b01      	subs	r3, #1
 8007d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d107      	bne.n	8007d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40023800 	.word	0x40023800

08007d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e0cc      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d40:	4b68      	ldr	r3, [pc, #416]	; (8007ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d90c      	bls.n	8007d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4e:	4b65      	ldr	r3, [pc, #404]	; (8007ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b63      	ldr	r3, [pc, #396]	; (8007ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0b8      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d020      	beq.n	8007db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d80:	4b59      	ldr	r3, [pc, #356]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4a58      	ldr	r2, [pc, #352]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d98:	4b53      	ldr	r3, [pc, #332]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4a52      	ldr	r2, [pc, #328]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da4:	4b50      	ldr	r3, [pc, #320]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	494d      	ldr	r1, [pc, #308]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d044      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d107      	bne.n	8007dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dca:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d119      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e07f      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d003      	beq.n	8007dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d107      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dea:	4b3f      	ldr	r3, [pc, #252]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e06f      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dfa:	4b3b      	ldr	r3, [pc, #236]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e067      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e0a:	4b37      	ldr	r3, [pc, #220]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f023 0203 	bic.w	r2, r3, #3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	4934      	ldr	r1, [pc, #208]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e1c:	f7fd fab0 	bl	8005380 <HAL_GetTick>
 8007e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e22:	e00a      	b.n	8007e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e24:	f7fd faac 	bl	8005380 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e04f      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 020c 	and.w	r2, r3, #12
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d1eb      	bne.n	8007e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e4c:	4b25      	ldr	r3, [pc, #148]	; (8007ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d20c      	bcs.n	8007e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5a:	4b22      	ldr	r3, [pc, #136]	; (8007ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e032      	b.n	8007eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e80:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	4916      	ldr	r1, [pc, #88]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e9e:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	490e      	ldr	r1, [pc, #56]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007eb2:	f000 f821 	bl	8007ef8 <HAL_RCC_GetSysClockFreq>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	091b      	lsrs	r3, r3, #4
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	490a      	ldr	r1, [pc, #40]	; (8007eec <HAL_RCC_ClockConfig+0x1c0>)
 8007ec4:	5ccb      	ldrb	r3, [r1, r3]
 8007ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eca:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fc fdac 	bl	8004a30 <HAL_InitTick>

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40023c00 	.word	0x40023c00
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	08013b20 	.word	0x08013b20
 8007ef0:	20000008 	.word	0x20000008
 8007ef4:	2000000c 	.word	0x2000000c

08007ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007efc:	b094      	sub	sp, #80	; 0x50
 8007efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	647b      	str	r3, [r7, #68]	; 0x44
 8007f04:	2300      	movs	r3, #0
 8007f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f08:	2300      	movs	r3, #0
 8007f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f10:	4b79      	ldr	r3, [pc, #484]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 030c 	and.w	r3, r3, #12
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d00d      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0x40>
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	f200 80e1 	bhi.w	80080e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <HAL_RCC_GetSysClockFreq+0x34>
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d003      	beq.n	8007f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f2a:	e0db      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f2c:	4b73      	ldr	r3, [pc, #460]	; (80080fc <HAL_RCC_GetSysClockFreq+0x204>)
 8007f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007f30:	e0db      	b.n	80080ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f32:	4b73      	ldr	r3, [pc, #460]	; (8008100 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f36:	e0d8      	b.n	80080ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f38:	4b6f      	ldr	r3, [pc, #444]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f42:	4b6d      	ldr	r3, [pc, #436]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d063      	beq.n	8008016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f4e:	4b6a      	ldr	r3, [pc, #424]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	099b      	lsrs	r3, r3, #6
 8007f54:	2200      	movs	r2, #0
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f60:	633b      	str	r3, [r7, #48]	; 0x30
 8007f62:	2300      	movs	r3, #0
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
 8007f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	f04f 0000 	mov.w	r0, #0
 8007f72:	f04f 0100 	mov.w	r1, #0
 8007f76:	0159      	lsls	r1, r3, #5
 8007f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f7c:	0150      	lsls	r0, r2, #5
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4621      	mov	r1, r4
 8007f84:	1a51      	subs	r1, r2, r1
 8007f86:	6139      	str	r1, [r7, #16]
 8007f88:	4629      	mov	r1, r5
 8007f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	018b      	lsls	r3, r1, #6
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fa6:	4651      	mov	r1, sl
 8007fa8:	018a      	lsls	r2, r1, #6
 8007faa:	4651      	mov	r1, sl
 8007fac:	ebb2 0801 	subs.w	r8, r2, r1
 8007fb0:	4659      	mov	r1, fp
 8007fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fca:	4690      	mov	r8, r2
 8007fcc:	4699      	mov	r9, r3
 8007fce:	4623      	mov	r3, r4
 8007fd0:	eb18 0303 	adds.w	r3, r8, r3
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	eb49 0303 	adc.w	r3, r9, r3
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fea:	4629      	mov	r1, r5
 8007fec:	024b      	lsls	r3, r1, #9
 8007fee:	4621      	mov	r1, r4
 8007ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	024a      	lsls	r2, r1, #9
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ffe:	2200      	movs	r2, #0
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
 8008002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008008:	f7f8 fe56 	bl	8000cb8 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4613      	mov	r3, r2
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008014:	e058      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008016:	4b38      	ldr	r3, [pc, #224]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	099b      	lsrs	r3, r3, #6
 800801c:	2200      	movs	r2, #0
 800801e:	4618      	mov	r0, r3
 8008020:	4611      	mov	r1, r2
 8008022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008026:	623b      	str	r3, [r7, #32]
 8008028:	2300      	movs	r3, #0
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
 800802c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008030:	4642      	mov	r2, r8
 8008032:	464b      	mov	r3, r9
 8008034:	f04f 0000 	mov.w	r0, #0
 8008038:	f04f 0100 	mov.w	r1, #0
 800803c:	0159      	lsls	r1, r3, #5
 800803e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008042:	0150      	lsls	r0, r2, #5
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4641      	mov	r1, r8
 800804a:	ebb2 0a01 	subs.w	sl, r2, r1
 800804e:	4649      	mov	r1, r9
 8008050:	eb63 0b01 	sbc.w	fp, r3, r1
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008068:	ebb2 040a 	subs.w	r4, r2, sl
 800806c:	eb63 050b 	sbc.w	r5, r3, fp
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	00eb      	lsls	r3, r5, #3
 800807a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800807e:	00e2      	lsls	r2, r4, #3
 8008080:	4614      	mov	r4, r2
 8008082:	461d      	mov	r5, r3
 8008084:	4643      	mov	r3, r8
 8008086:	18e3      	adds	r3, r4, r3
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	464b      	mov	r3, r9
 800808c:	eb45 0303 	adc.w	r3, r5, r3
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800809e:	4629      	mov	r1, r5
 80080a0:	028b      	lsls	r3, r1, #10
 80080a2:	4621      	mov	r1, r4
 80080a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080a8:	4621      	mov	r1, r4
 80080aa:	028a      	lsls	r2, r1, #10
 80080ac:	4610      	mov	r0, r2
 80080ae:	4619      	mov	r1, r3
 80080b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b2:	2200      	movs	r2, #0
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	61fa      	str	r2, [r7, #28]
 80080b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080bc:	f7f8 fdfc 	bl	8000cb8 <__aeabi_uldivmod>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4613      	mov	r3, r2
 80080c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	0c1b      	lsrs	r3, r3, #16
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	3301      	adds	r3, #1
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80080d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080e2:	e002      	b.n	80080ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <HAL_RCC_GetSysClockFreq+0x204>)
 80080e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3750      	adds	r7, #80	; 0x50
 80080f0:	46bd      	mov	sp, r7
 80080f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f6:	bf00      	nop
 80080f8:	40023800 	.word	0x40023800
 80080fc:	00f42400 	.word	0x00f42400
 8008100:	007a1200 	.word	0x007a1200

08008104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008108:	4b03      	ldr	r3, [pc, #12]	; (8008118 <HAL_RCC_GetHCLKFreq+0x14>)
 800810a:	681b      	ldr	r3, [r3, #0]
}
 800810c:	4618      	mov	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20000008 	.word	0x20000008

0800811c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008120:	f7ff fff0 	bl	8008104 <HAL_RCC_GetHCLKFreq>
 8008124:	4602      	mov	r2, r0
 8008126:	4b05      	ldr	r3, [pc, #20]	; (800813c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	0a9b      	lsrs	r3, r3, #10
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	4903      	ldr	r1, [pc, #12]	; (8008140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008132:	5ccb      	ldrb	r3, [r1, r3]
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008138:	4618      	mov	r0, r3
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40023800 	.word	0x40023800
 8008140:	08013b30 	.word	0x08013b30

08008144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008148:	f7ff ffdc 	bl	8008104 <HAL_RCC_GetHCLKFreq>
 800814c:	4602      	mov	r2, r0
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	0b5b      	lsrs	r3, r3, #13
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	4903      	ldr	r1, [pc, #12]	; (8008168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800815a:	5ccb      	ldrb	r3, [r1, r3]
 800815c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008160:	4618      	mov	r0, r3
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40023800 	.word	0x40023800
 8008168:	08013b30 	.word	0x08013b30

0800816c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220f      	movs	r2, #15
 800817a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800817c:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <HAL_RCC_GetClockConfig+0x5c>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f003 0203 	and.w	r2, r3, #3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008188:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <HAL_RCC_GetClockConfig+0x5c>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <HAL_RCC_GetClockConfig+0x5c>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <HAL_RCC_GetClockConfig+0x5c>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	08db      	lsrs	r3, r3, #3
 80081a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <HAL_RCC_GetClockConfig+0x60>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0207 	and.w	r2, r3, #7
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	601a      	str	r2, [r3, #0]
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40023800 	.word	0x40023800
 80081cc:	40023c00 	.word	0x40023c00

080081d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e041      	b.n	8008266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d106      	bne.n	80081fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fc fee2 	bl	8004fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f000 fd12 	bl	8008c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d001      	beq.n	8008288 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e03c      	b.n	8008302 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <HAL_TIM_Base_Start+0xa0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d018      	beq.n	80082cc <HAL_TIM_Base_Start+0x5c>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a2:	d013      	beq.n	80082cc <HAL_TIM_Base_Start+0x5c>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <HAL_TIM_Base_Start+0xa4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00e      	beq.n	80082cc <HAL_TIM_Base_Start+0x5c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a19      	ldr	r2, [pc, #100]	; (8008318 <HAL_TIM_Base_Start+0xa8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <HAL_TIM_Base_Start+0x5c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a17      	ldr	r2, [pc, #92]	; (800831c <HAL_TIM_Base_Start+0xac>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <HAL_TIM_Base_Start+0x5c>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a16      	ldr	r2, [pc, #88]	; (8008320 <HAL_TIM_Base_Start+0xb0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d111      	bne.n	80082f0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b06      	cmp	r3, #6
 80082dc:	d010      	beq.n	8008300 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0201 	orr.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ee:	e007      	b.n	8008300 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40014000 	.word	0x40014000

08008324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	d001      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e044      	b.n	80083c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d018      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x6c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008366:	d013      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x6c>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a1a      	ldr	r2, [pc, #104]	; (80083d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00e      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x6c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a19      	ldr	r2, [pc, #100]	; (80083dc <HAL_TIM_Base_Start_IT+0xb8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d009      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x6c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a17      	ldr	r2, [pc, #92]	; (80083e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d004      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x6c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a16      	ldr	r2, [pc, #88]	; (80083e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d111      	bne.n	80083b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b06      	cmp	r3, #6
 80083a0:	d010      	beq.n	80083c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0201 	orr.w	r2, r2, #1
 80083b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b2:	e007      	b.n	80083c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0201 	orr.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40000400 	.word	0x40000400
 80083dc:	40000800 	.word	0x40000800
 80083e0:	40000c00 	.word	0x40000c00
 80083e4:	40014000 	.word	0x40014000

080083e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e041      	b.n	800847e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f839 	bl	8008486 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3304      	adds	r3, #4
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f000 fc06 	bl	8008c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <HAL_TIM_PWM_Start+0x24>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	bf14      	ite	ne
 80084b8:	2301      	movne	r3, #1
 80084ba:	2300      	moveq	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	e022      	b.n	8008506 <HAL_TIM_PWM_Start+0x6a>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d109      	bne.n	80084da <HAL_TIM_PWM_Start+0x3e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	bf14      	ite	ne
 80084d2:	2301      	movne	r3, #1
 80084d4:	2300      	moveq	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	e015      	b.n	8008506 <HAL_TIM_PWM_Start+0x6a>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d109      	bne.n	80084f4 <HAL_TIM_PWM_Start+0x58>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	bf14      	ite	ne
 80084ec:	2301      	movne	r3, #1
 80084ee:	2300      	moveq	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	e008      	b.n	8008506 <HAL_TIM_PWM_Start+0x6a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	bf14      	ite	ne
 8008500:	2301      	movne	r3, #1
 8008502:	2300      	moveq	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e068      	b.n	80085e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <HAL_TIM_PWM_Start+0x82>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800851c:	e013      	b.n	8008546 <HAL_TIM_PWM_Start+0xaa>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b04      	cmp	r3, #4
 8008522:	d104      	bne.n	800852e <HAL_TIM_PWM_Start+0x92>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800852c:	e00b      	b.n	8008546 <HAL_TIM_PWM_Start+0xaa>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b08      	cmp	r3, #8
 8008532:	d104      	bne.n	800853e <HAL_TIM_PWM_Start+0xa2>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800853c:	e003      	b.n	8008546 <HAL_TIM_PWM_Start+0xaa>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2201      	movs	r2, #1
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fe18 	bl	8009184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a23      	ldr	r2, [pc, #140]	; (80085e8 <HAL_TIM_PWM_Start+0x14c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d107      	bne.n	800856e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800856c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <HAL_TIM_PWM_Start+0x14c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d018      	beq.n	80085aa <HAL_TIM_PWM_Start+0x10e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008580:	d013      	beq.n	80085aa <HAL_TIM_PWM_Start+0x10e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a19      	ldr	r2, [pc, #100]	; (80085ec <HAL_TIM_PWM_Start+0x150>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00e      	beq.n	80085aa <HAL_TIM_PWM_Start+0x10e>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a17      	ldr	r2, [pc, #92]	; (80085f0 <HAL_TIM_PWM_Start+0x154>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d009      	beq.n	80085aa <HAL_TIM_PWM_Start+0x10e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a16      	ldr	r2, [pc, #88]	; (80085f4 <HAL_TIM_PWM_Start+0x158>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d004      	beq.n	80085aa <HAL_TIM_PWM_Start+0x10e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a14      	ldr	r2, [pc, #80]	; (80085f8 <HAL_TIM_PWM_Start+0x15c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d111      	bne.n	80085ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b06      	cmp	r3, #6
 80085ba:	d010      	beq.n	80085de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0201 	orr.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085cc:	e007      	b.n	80085de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40010000 	.word	0x40010000
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800
 80085f4:	40000c00 	.word	0x40000c00
 80085f8:	40014000 	.word	0x40014000

080085fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fdb8 	bl	8009184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a29      	ldr	r2, [pc, #164]	; (80086c0 <HAL_TIM_PWM_Stop+0xc4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d117      	bne.n	800864e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6a1a      	ldr	r2, [r3, #32]
 8008624:	f241 1311 	movw	r3, #4369	; 0x1111
 8008628:	4013      	ands	r3, r2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10f      	bne.n	800864e <HAL_TIM_PWM_Stop+0x52>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6a1a      	ldr	r2, [r3, #32]
 8008634:	f240 4344 	movw	r3, #1092	; 0x444
 8008638:	4013      	ands	r3, r2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d107      	bne.n	800864e <HAL_TIM_PWM_Stop+0x52>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800864c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	f241 1311 	movw	r3, #4369	; 0x1111
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <HAL_TIM_PWM_Stop+0x82>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	f240 4344 	movw	r3, #1092	; 0x444
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d107      	bne.n	800867e <HAL_TIM_PWM_Stop+0x82>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0201 	bic.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d104      	bne.n	800868e <HAL_TIM_PWM_Stop+0x92>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800868c:	e013      	b.n	80086b6 <HAL_TIM_PWM_Stop+0xba>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b04      	cmp	r3, #4
 8008692:	d104      	bne.n	800869e <HAL_TIM_PWM_Stop+0xa2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800869c:	e00b      	b.n	80086b6 <HAL_TIM_PWM_Stop+0xba>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d104      	bne.n	80086ae <HAL_TIM_PWM_Stop+0xb2>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ac:	e003      	b.n	80086b6 <HAL_TIM_PWM_Stop+0xba>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40010000 	.word	0x40010000

080086c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d122      	bne.n	8008720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d11b      	bne.n	8008720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f06f 0202 	mvn.w	r2, #2
 80086f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fa77 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
 800870c:	e005      	b.n	800871a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa69 	bl	8008be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fa7a 	bl	8008c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b04      	cmp	r3, #4
 800872c:	d122      	bne.n	8008774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b04      	cmp	r3, #4
 800873a:	d11b      	bne.n	8008774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f06f 0204 	mvn.w	r2, #4
 8008744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2202      	movs	r2, #2
 800874a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa4d 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
 8008760:	e005      	b.n	800876e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa3f 	bl	8008be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa50 	bl	8008c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b08      	cmp	r3, #8
 8008780:	d122      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0308 	and.w	r3, r3, #8
 800878c:	2b08      	cmp	r3, #8
 800878e:	d11b      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0208 	mvn.w	r2, #8
 8008798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2204      	movs	r2, #4
 800879e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa23 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
 80087b4:	e005      	b.n	80087c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa15 	bl	8008be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fa26 	bl	8008c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0310 	and.w	r3, r3, #16
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d122      	bne.n	800881c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f003 0310 	and.w	r3, r3, #16
 80087e0:	2b10      	cmp	r3, #16
 80087e2:	d11b      	bne.n	800881c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f06f 0210 	mvn.w	r2, #16
 80087ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2208      	movs	r2, #8
 80087f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9f9 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
 8008808:	e005      	b.n	8008816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f9eb 	bl	8008be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f9fc 	bl	8008c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b01      	cmp	r3, #1
 8008828:	d10e      	bne.n	8008848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b01      	cmp	r3, #1
 8008836:	d107      	bne.n	8008848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f06f 0201 	mvn.w	r2, #1
 8008840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fb fcd0 	bl	80041e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008852:	2b80      	cmp	r3, #128	; 0x80
 8008854:	d10e      	bne.n	8008874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008860:	2b80      	cmp	r3, #128	; 0x80
 8008862:	d107      	bne.n	8008874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800886c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fd26 	bl	80092c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d10e      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b40      	cmp	r3, #64	; 0x40
 800888e:	d107      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f9c1 	bl	8008c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d10e      	bne.n	80088cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d107      	bne.n	80088cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f06f 0220 	mvn.w	r2, #32
 80088c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fcf0 	bl	80092ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e0ae      	b.n	8008a50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	f200 809f 	bhi.w	8008a40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	0800893d 	.word	0x0800893d
 800890c:	08008a41 	.word	0x08008a41
 8008910:	08008a41 	.word	0x08008a41
 8008914:	08008a41 	.word	0x08008a41
 8008918:	0800897d 	.word	0x0800897d
 800891c:	08008a41 	.word	0x08008a41
 8008920:	08008a41 	.word	0x08008a41
 8008924:	08008a41 	.word	0x08008a41
 8008928:	080089bf 	.word	0x080089bf
 800892c:	08008a41 	.word	0x08008a41
 8008930:	08008a41 	.word	0x08008a41
 8008934:	08008a41 	.word	0x08008a41
 8008938:	080089ff 	.word	0x080089ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f9f8 	bl	8008d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699a      	ldr	r2, [r3, #24]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0208 	orr.w	r2, r2, #8
 8008956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0204 	bic.w	r2, r2, #4
 8008966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6999      	ldr	r1, [r3, #24]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	619a      	str	r2, [r3, #24]
      break;
 800897a:	e064      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fa3e 	bl	8008e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6999      	ldr	r1, [r3, #24]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	021a      	lsls	r2, r3, #8
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	619a      	str	r2, [r3, #24]
      break;
 80089bc:	e043      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fa89 	bl	8008edc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69da      	ldr	r2, [r3, #28]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0208 	orr.w	r2, r2, #8
 80089d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0204 	bic.w	r2, r2, #4
 80089e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69d9      	ldr	r1, [r3, #28]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	691a      	ldr	r2, [r3, #16]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	61da      	str	r2, [r3, #28]
      break;
 80089fc:	e023      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fad3 	bl	8008fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69da      	ldr	r2, [r3, #28]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69d9      	ldr	r1, [r3, #28]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	021a      	lsls	r2, r3, #8
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	61da      	str	r2, [r3, #28]
      break;
 8008a3e:	e002      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	75fb      	strb	r3, [r7, #23]
      break;
 8008a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIM_ConfigClockSource+0x1c>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e0b4      	b.n	8008bde <HAL_TIM_ConfigClockSource+0x186>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aac:	d03e      	beq.n	8008b2c <HAL_TIM_ConfigClockSource+0xd4>
 8008aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab2:	f200 8087 	bhi.w	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aba:	f000 8086 	beq.w	8008bca <HAL_TIM_ConfigClockSource+0x172>
 8008abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac2:	d87f      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac4:	2b70      	cmp	r3, #112	; 0x70
 8008ac6:	d01a      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0xa6>
 8008ac8:	2b70      	cmp	r3, #112	; 0x70
 8008aca:	d87b      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008acc:	2b60      	cmp	r3, #96	; 0x60
 8008ace:	d050      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x11a>
 8008ad0:	2b60      	cmp	r3, #96	; 0x60
 8008ad2:	d877      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad4:	2b50      	cmp	r3, #80	; 0x50
 8008ad6:	d03c      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0xfa>
 8008ad8:	2b50      	cmp	r3, #80	; 0x50
 8008ada:	d873      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d058      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x13a>
 8008ae0:	2b40      	cmp	r3, #64	; 0x40
 8008ae2:	d86f      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ae4:	2b30      	cmp	r3, #48	; 0x30
 8008ae6:	d064      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ae8:	2b30      	cmp	r3, #48	; 0x30
 8008aea:	d86b      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	d060      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d867      	bhi.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d05c      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008af8:	2b10      	cmp	r3, #16
 8008afa:	d05a      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008afc:	e062      	b.n	8008bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6899      	ldr	r1, [r3, #8]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f000 fb19 	bl	8009144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	609a      	str	r2, [r3, #8]
      break;
 8008b2a:	e04f      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	6899      	ldr	r1, [r3, #8]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f000 fb02 	bl	8009144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b4e:	609a      	str	r2, [r3, #8]
      break;
 8008b50:	e03c      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	6859      	ldr	r1, [r3, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f000 fa76 	bl	8009050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2150      	movs	r1, #80	; 0x50
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 facf 	bl	800910e <TIM_ITRx_SetConfig>
      break;
 8008b70:	e02c      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6859      	ldr	r1, [r3, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f000 fa95 	bl	80090ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2160      	movs	r1, #96	; 0x60
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fabf 	bl	800910e <TIM_ITRx_SetConfig>
      break;
 8008b90:	e01c      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6859      	ldr	r1, [r3, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f000 fa56 	bl	8009050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2140      	movs	r1, #64	; 0x40
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 faaf 	bl	800910e <TIM_ITRx_SetConfig>
      break;
 8008bb0:	e00c      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	f000 faa6 	bl	800910e <TIM_ITRx_SetConfig>
      break;
 8008bc2:	e003      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc8:	e000      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a34      	ldr	r2, [pc, #208]	; (8008d1c <TIM_Base_SetConfig+0xe4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00f      	beq.n	8008c70 <TIM_Base_SetConfig+0x38>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c56:	d00b      	beq.n	8008c70 <TIM_Base_SetConfig+0x38>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a31      	ldr	r2, [pc, #196]	; (8008d20 <TIM_Base_SetConfig+0xe8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d007      	beq.n	8008c70 <TIM_Base_SetConfig+0x38>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a30      	ldr	r2, [pc, #192]	; (8008d24 <TIM_Base_SetConfig+0xec>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d003      	beq.n	8008c70 <TIM_Base_SetConfig+0x38>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a2f      	ldr	r2, [pc, #188]	; (8008d28 <TIM_Base_SetConfig+0xf0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d108      	bne.n	8008c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a25      	ldr	r2, [pc, #148]	; (8008d1c <TIM_Base_SetConfig+0xe4>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d01b      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c90:	d017      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a22      	ldr	r2, [pc, #136]	; (8008d20 <TIM_Base_SetConfig+0xe8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d013      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a21      	ldr	r2, [pc, #132]	; (8008d24 <TIM_Base_SetConfig+0xec>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00f      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a20      	ldr	r2, [pc, #128]	; (8008d28 <TIM_Base_SetConfig+0xf0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00b      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1f      	ldr	r2, [pc, #124]	; (8008d2c <TIM_Base_SetConfig+0xf4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d007      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a1e      	ldr	r2, [pc, #120]	; (8008d30 <TIM_Base_SetConfig+0xf8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d003      	beq.n	8008cc2 <TIM_Base_SetConfig+0x8a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a1d      	ldr	r2, [pc, #116]	; (8008d34 <TIM_Base_SetConfig+0xfc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d108      	bne.n	8008cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <TIM_Base_SetConfig+0xe4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d103      	bne.n	8008d08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	615a      	str	r2, [r3, #20]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400
 8008d34:	40014800 	.word	0x40014800

08008d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0201 	bic.w	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0303 	bic.w	r3, r3, #3
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f023 0302 	bic.w	r3, r3, #2
 8008d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <TIM_OC1_SetConfig+0xc8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d10c      	bne.n	8008dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f023 0308 	bic.w	r3, r3, #8
 8008d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f023 0304 	bic.w	r3, r3, #4
 8008dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <TIM_OC1_SetConfig+0xc8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d111      	bne.n	8008dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	621a      	str	r2, [r3, #32]
}
 8008df4:	bf00      	nop
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	40010000 	.word	0x40010000

08008e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	f023 0210 	bic.w	r2, r3, #16
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f023 0320 	bic.w	r3, r3, #32
 8008e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <TIM_OC2_SetConfig+0xd4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d10d      	bne.n	8008e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <TIM_OC2_SetConfig+0xd4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d113      	bne.n	8008eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	621a      	str	r2, [r3, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40010000 	.word	0x40010000

08008edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0303 	bic.w	r3, r3, #3
 8008f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a1d      	ldr	r2, [pc, #116]	; (8008fac <TIM_OC3_SetConfig+0xd0>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d10d      	bne.n	8008f56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a14      	ldr	r2, [pc, #80]	; (8008fac <TIM_OC3_SetConfig+0xd0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d113      	bne.n	8008f86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	621a      	str	r2, [r3, #32]
}
 8008fa0:	bf00      	nop
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40010000 	.word	0x40010000

08008fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	031b      	lsls	r3, r3, #12
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a10      	ldr	r2, [pc, #64]	; (800904c <TIM_OC4_SetConfig+0x9c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d109      	bne.n	8009024 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	019b      	lsls	r3, r3, #6
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	621a      	str	r2, [r3, #32]
}
 800903e:	bf00      	nop
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	40010000 	.word	0x40010000

08009050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f023 0201 	bic.w	r2, r3, #1
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800907a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f023 030a 	bic.w	r3, r3, #10
 800908c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4313      	orrs	r3, r2
 8009094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	621a      	str	r2, [r3, #32]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b087      	sub	sp, #28
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f023 0210 	bic.w	r2, r3, #16
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	031b      	lsls	r3, r3, #12
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800910e:	b480      	push	{r7}
 8009110:	b085      	sub	sp, #20
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	f043 0307 	orr.w	r3, r3, #7
 8009130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	609a      	str	r2, [r3, #8]
}
 8009138:	bf00      	nop
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800915e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	021a      	lsls	r2, r3, #8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	431a      	orrs	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4313      	orrs	r3, r2
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	609a      	str	r2, [r3, #8]
}
 8009178:	bf00      	nop
 800917a:	371c      	adds	r7, #28
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 031f 	and.w	r3, r3, #31
 8009196:	2201      	movs	r2, #1
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1a      	ldr	r2, [r3, #32]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	43db      	mvns	r3, r3
 80091a6:	401a      	ands	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1a      	ldr	r2, [r3, #32]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f003 031f 	and.w	r3, r3, #31
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	431a      	orrs	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	bf00      	nop
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e050      	b.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1c      	ldr	r2, [pc, #112]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d018      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	d013      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a18      	ldr	r2, [pc, #96]	; (800929c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00e      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a16      	ldr	r2, [pc, #88]	; (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a15      	ldr	r2, [pc, #84]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d004      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a13      	ldr	r2, [pc, #76]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d10c      	bne.n	8009278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4313      	orrs	r3, r2
 800926e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40010000 	.word	0x40010000
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	40014000 	.word	0x40014000

080092ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e03f      	b.n	8009366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fb ff34 	bl	8005168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2224      	movs	r2, #36	; 0x24
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 ff77 	bl	800a20c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800932c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	695a      	ldr	r2, [r3, #20]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800933c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800934c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2220      	movs	r2, #32
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08c      	sub	sp, #48	; 0x30
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b20      	cmp	r3, #32
 8009388:	d165      	bne.n	8009456 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <HAL_UART_Transmit_DMA+0x26>
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e05e      	b.n	8009458 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_UART_Transmit_DMA+0x38>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e057      	b.n	8009458 <HAL_UART_Transmit_DMA+0xe8>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	88fa      	ldrh	r2, [r7, #6]
 80093ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	88fa      	ldrh	r2, [r7, #6]
 80093c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2221      	movs	r2, #33	; 0x21
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d4:	4a22      	ldr	r2, [pc, #136]	; (8009460 <HAL_UART_Transmit_DMA+0xf0>)
 80093d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	4a21      	ldr	r2, [pc, #132]	; (8009464 <HAL_UART_Transmit_DMA+0xf4>)
 80093de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e4:	4a20      	ldr	r2, [pc, #128]	; (8009468 <HAL_UART_Transmit_DMA+0xf8>)
 80093e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	2200      	movs	r2, #0
 80093ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80093f0:	f107 0308 	add.w	r3, r7, #8
 80093f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	6819      	ldr	r1, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3304      	adds	r3, #4
 8009404:	461a      	mov	r2, r3
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	f7fc fd4e 	bl	8005ea8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009414:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3314      	adds	r3, #20
 8009424:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	617b      	str	r3, [r7, #20]
   return(result);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3314      	adds	r3, #20
 800943c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800943e:	627a      	str	r2, [r7, #36]	; 0x24
 8009440:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6a39      	ldr	r1, [r7, #32]
 8009444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	61fb      	str	r3, [r7, #28]
   return(result);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e5      	bne.n	800941e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	e000      	b.n	8009458 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009456:	2302      	movs	r3, #2
  }
}
 8009458:	4618      	mov	r0, r3
 800945a:	3730      	adds	r7, #48	; 0x30
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	08009aa5 	.word	0x08009aa5
 8009464:	08009b3f 	.word	0x08009b3f
 8009468:	08009cb7 	.word	0x08009cb7

0800946c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08c      	sub	sp, #48	; 0x30
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b20      	cmp	r3, #32
 8009484:	d152      	bne.n	800952c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800948c:	88fb      	ldrh	r3, [r7, #6]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e04b      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800949c:	2b01      	cmp	r3, #1
 800949e:	d101      	bne.n	80094a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80094a0:	2302      	movs	r3, #2
 80094a2:	e044      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2201      	movs	r2, #1
 80094b0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	461a      	mov	r2, r3
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fc47 	bl	8009d4c <UART_Start_Receive_DMA>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80094c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d12c      	bne.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d125      	bne.n	8009520 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094d4:	2300      	movs	r3, #0
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	617b      	str	r3, [r7, #20]
   return(result);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f043 0310 	orr.w	r3, r3, #16
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	330c      	adds	r3, #12
 8009508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800950a:	627a      	str	r2, [r7, #36]	; 0x24
 800950c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6a39      	ldr	r1, [r7, #32]
 8009510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	61fb      	str	r3, [r7, #28]
   return(result);
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e5      	bne.n	80094ea <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800951e:	e002      	b.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800952a:	e000      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800952c:	2302      	movs	r3, #2
  }
}
 800952e:	4618      	mov	r0, r3
 8009530:	3730      	adds	r7, #48	; 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b0ba      	sub	sp, #232	; 0xe8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800955e:	2300      	movs	r3, #0
 8009560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009564:	2300      	movs	r3, #0
 8009566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10f      	bne.n	800959e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800957e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <HAL_UART_IRQHandler+0x66>
 800958a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fd7d 	bl	800a096 <UART_Receive_IT>
      return;
 800959c:	e256      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800959e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80de 	beq.w	8009764 <HAL_UART_IRQHandler+0x22c>
 80095a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80d1 	beq.w	8009764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <HAL_UART_IRQHandler+0xae>
 80095ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	f043 0201 	orr.w	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <HAL_UART_IRQHandler+0xd2>
 80095f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	f043 0202 	orr.w	r2, r3, #2
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00b      	beq.n	800962e <HAL_UART_IRQHandler+0xf6>
 8009616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	f043 0204 	orr.w	r2, r3, #4
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009632:	f003 0308 	and.w	r3, r3, #8
 8009636:	2b00      	cmp	r3, #0
 8009638:	d011      	beq.n	800965e <HAL_UART_IRQHandler+0x126>
 800963a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d105      	bne.n	8009652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d005      	beq.n	800965e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	f043 0208 	orr.w	r2, r3, #8
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 81ed 	beq.w	8009a42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <HAL_UART_IRQHandler+0x14e>
 8009674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fd08 	bl	800a096 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009690:	2b40      	cmp	r3, #64	; 0x40
 8009692:	bf0c      	ite	eq
 8009694:	2301      	moveq	r3, #1
 8009696:	2300      	movne	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	f003 0308 	and.w	r3, r3, #8
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <HAL_UART_IRQHandler+0x17a>
 80096aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d04f      	beq.n	8009752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fc10 	bl	8009ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d141      	bne.n	800974a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3314      	adds	r3, #20
 80096cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3314      	adds	r3, #20
 80096ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800970a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1d9      	bne.n	80096c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d013      	beq.n	8009742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	4a7d      	ldr	r2, [pc, #500]	; (8009914 <HAL_UART_IRQHandler+0x3dc>)
 8009720:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	4618      	mov	r0, r3
 8009728:	f7fc fc86 	bl	8006038 <HAL_DMA_Abort_IT>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d016      	beq.n	8009760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009740:	e00e      	b.n	8009760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f9a4 	bl	8009a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	e00a      	b.n	8009760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f9a0 	bl	8009a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009750:	e006      	b.n	8009760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f99c 	bl	8009a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800975e:	e170      	b.n	8009a42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009760:	bf00      	nop
    return;
 8009762:	e16e      	b.n	8009a42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009768:	2b01      	cmp	r3, #1
 800976a:	f040 814a 	bne.w	8009a02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800976e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 8143 	beq.w	8009a02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 813c 	beq.w	8009a02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60bb      	str	r3, [r7, #8]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	60bb      	str	r3, [r7, #8]
 800979e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097aa:	2b40      	cmp	r3, #64	; 0x40
 80097ac:	f040 80b4 	bne.w	8009918 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8140 	beq.w	8009a46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f080 8139 	bcs.w	8009a46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e6:	f000 8088 	beq.w	80098fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800981a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800982e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1d9      	bne.n	80097ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3314      	adds	r3, #20
 800983c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3314      	adds	r3, #20
 8009856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800985a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800985e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800986c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e1      	bne.n	8009836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3314      	adds	r3, #20
 8009878:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3314      	adds	r3, #20
 8009892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009896:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800989c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e3      	bne.n	8009872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80098de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e3      	bne.n	80098b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fc fb2f 	bl	8005f58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009902:	b29b      	uxth	r3, r3
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	b29b      	uxth	r3, r3
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7fa f806 	bl	800391c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009910:	e099      	b.n	8009a46 <HAL_UART_IRQHandler+0x50e>
 8009912:	bf00      	nop
 8009914:	08009f9f 	.word	0x08009f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009920:	b29b      	uxth	r3, r3
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 808b 	beq.w	8009a4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 8086 	beq.w	8009a4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	330c      	adds	r3, #12
 8009944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330c      	adds	r3, #12
 800995e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009962:	647a      	str	r2, [r7, #68]	; 0x44
 8009964:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e3      	bne.n	800993e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3314      	adds	r3, #20
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	623b      	str	r3, [r7, #32]
   return(result);
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3314      	adds	r3, #20
 8009996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800999a:	633a      	str	r2, [r7, #48]	; 0x30
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e3      	bne.n	8009976 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	330c      	adds	r3, #12
 80099c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 0310 	bic.w	r3, r3, #16
 80099d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099e0:	61fa      	str	r2, [r7, #28]
 80099e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	69b9      	ldr	r1, [r7, #24]
 80099e6:	69fa      	ldr	r2, [r7, #28]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	617b      	str	r3, [r7, #20]
   return(result);
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e3      	bne.n	80099bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7f9 ff8e 	bl	800391c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a00:	e023      	b.n	8009a4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <HAL_UART_IRQHandler+0x4ea>
 8009a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fad3 	bl	8009fc6 <UART_Transmit_IT>
    return;
 8009a20:	e014      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00e      	beq.n	8009a4c <HAL_UART_IRQHandler+0x514>
 8009a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d008      	beq.n	8009a4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fb13 	bl	800a066 <UART_EndTransmit_IT>
    return;
 8009a40:	e004      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
    return;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
      return;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
      return;
 8009a4a:	bf00      	nop
  }
}
 8009a4c:	37e8      	adds	r7, #232	; 0xe8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop

08009a54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b090      	sub	sp, #64	; 0x40
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d137      	bne.n	8009b30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3314      	adds	r3, #20
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009adc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3314      	adds	r3, #20
 8009ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ae6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	330c      	adds	r3, #12
 8009b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
 8009b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	330c      	adds	r3, #12
 8009b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b1a:	61fa      	str	r2, [r7, #28]
 8009b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	69b9      	ldr	r1, [r7, #24]
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	617b      	str	r3, [r7, #20]
   return(result);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e5      	bne.n	8009afa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b2e:	e002      	b.n	8009b36 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009b30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009b32:	f7f9 ff3b 	bl	80039ac <HAL_UART_TxCpltCallback>
}
 8009b36:	bf00      	nop
 8009b38:	3740      	adds	r7, #64	; 0x40
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff ff81 	bl	8009a54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b52:	bf00      	nop
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b09c      	sub	sp, #112	; 0x70
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d172      	bne.n	8009c5c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b78:	2200      	movs	r2, #0
 8009b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	330c      	adds	r3, #12
 8009b82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	330c      	adds	r3, #12
 8009b9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e5      	bne.n	8009b7c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3314      	adds	r3, #20
 8009bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc2:	f023 0301 	bic.w	r3, r3, #1
 8009bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8009bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3314      	adds	r3, #20
 8009bce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bd0:	647a      	str	r2, [r7, #68]	; 0x44
 8009bd2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bd8:	e841 2300 	strex	r3, r2, [r1]
 8009bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1e5      	bne.n	8009bb0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3314      	adds	r3, #20
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	e853 3f00 	ldrex	r3, [r3]
 8009bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8009bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3314      	adds	r3, #20
 8009c02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c04:	633a      	str	r2, [r7, #48]	; 0x30
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0c:	e841 2300 	strex	r3, r2, [r1]
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1e5      	bne.n	8009be4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d119      	bne.n	8009c5c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	330c      	adds	r3, #12
 8009c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f023 0310 	bic.w	r3, r3, #16
 8009c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	330c      	adds	r3, #12
 8009c46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c48:	61fa      	str	r2, [r7, #28]
 8009c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	69b9      	ldr	r1, [r7, #24]
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	617b      	str	r3, [r7, #20]
   return(result);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d106      	bne.n	8009c72 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c6c:	f7f9 fe56 	bl	800391c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c70:	e002      	b.n	8009c78 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009c72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c74:	f7ff fef8 	bl	8009a68 <HAL_UART_RxCpltCallback>
}
 8009c78:	bf00      	nop
 8009c7a:	3770      	adds	r7, #112	; 0x70
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d108      	bne.n	8009ca8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c9a:	085b      	lsrs	r3, r3, #1
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7f9 fe3b 	bl	800391c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ca6:	e002      	b.n	8009cae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fee7 	bl	8009a7c <HAL_UART_RxHalfCpltCallback>
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	bf0c      	ite	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	2300      	movne	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b21      	cmp	r3, #33	; 0x21
 8009ce8:	d108      	bne.n	8009cfc <UART_DMAError+0x46>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009cf6:	68b8      	ldr	r0, [r7, #8]
 8009cf8:	f000 f8c6 	bl	8009e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d06:	2b40      	cmp	r3, #64	; 0x40
 8009d08:	bf0c      	ite	eq
 8009d0a:	2301      	moveq	r3, #1
 8009d0c:	2300      	movne	r3, #0
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b22      	cmp	r3, #34	; 0x22
 8009d1c:	d108      	bne.n	8009d30 <UART_DMAError+0x7a>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2200      	movs	r2, #0
 8009d28:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009d2a:	68b8      	ldr	r0, [r7, #8]
 8009d2c:	f000 f8d4 	bl	8009ed8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	f043 0210 	orr.w	r2, r3, #16
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d3c:	68b8      	ldr	r0, [r7, #8]
 8009d3e:	f7ff fea7 	bl	8009a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b098      	sub	sp, #96	; 0x60
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	88fa      	ldrh	r2, [r7, #6]
 8009d64:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2222      	movs	r2, #34	; 0x22
 8009d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	4a40      	ldr	r2, [pc, #256]	; (8009e7c <UART_Start_Receive_DMA+0x130>)
 8009d7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	4a3f      	ldr	r2, [pc, #252]	; (8009e80 <UART_Start_Receive_DMA+0x134>)
 8009d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d88:	4a3e      	ldr	r2, [pc, #248]	; (8009e84 <UART_Start_Receive_DMA+0x138>)
 8009d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	2200      	movs	r2, #0
 8009d92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d94:	f107 0308 	add.w	r3, r7, #8
 8009d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	88fb      	ldrh	r3, [r7, #6]
 8009dac:	f7fc f87c 	bl	8005ea8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009db0:	2300      	movs	r3, #0
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	613b      	str	r3, [r7, #16]
 8009dc4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d019      	beq.n	8009e0a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	330c      	adds	r3, #12
 8009ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dec:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	330c      	adds	r3, #12
 8009df4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009df6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009df8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e5      	bne.n	8009dd6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3314      	adds	r3, #20
 8009e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	f043 0301 	orr.w	r3, r3, #1
 8009e20:	657b      	str	r3, [r7, #84]	; 0x54
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3314      	adds	r3, #20
 8009e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e5      	bne.n	8009e0a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3314      	adds	r3, #20
 8009e44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e54:	653b      	str	r3, [r7, #80]	; 0x50
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e5e:	627a      	str	r2, [r7, #36]	; 0x24
 8009e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6a39      	ldr	r1, [r7, #32]
 8009e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e5      	bne.n	8009e3e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3760      	adds	r7, #96	; 0x60
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	08009b5b 	.word	0x08009b5b
 8009e80:	08009c81 	.word	0x08009c81
 8009e84:	08009cb7 	.word	0x08009cb7

08009e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b089      	sub	sp, #36	; 0x24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	330c      	adds	r3, #12
 8009e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ea6:	61fb      	str	r3, [r7, #28]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	330c      	adds	r3, #12
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	61ba      	str	r2, [r7, #24]
 8009eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	6979      	ldr	r1, [r7, #20]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	e841 2300 	strex	r3, r2, [r1]
 8009ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e5      	bne.n	8009e90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009ecc:	bf00      	nop
 8009ece:	3724      	adds	r7, #36	; 0x24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b095      	sub	sp, #84	; 0x54
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	330c      	adds	r3, #12
 8009efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f00:	643a      	str	r2, [r7, #64]	; 0x40
 8009f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e5      	bne.n	8009ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3314      	adds	r3, #20
 8009f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f023 0301 	bic.w	r3, r3, #1
 8009f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3314      	adds	r3, #20
 8009f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e5      	bne.n	8009f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d119      	bne.n	8009f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	e853 3f00 	ldrex	r3, [r3]
 8009f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f023 0310 	bic.w	r3, r3, #16
 8009f66:	647b      	str	r3, [r7, #68]	; 0x44
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f70:	61ba      	str	r2, [r7, #24]
 8009f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	6979      	ldr	r1, [r7, #20]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	e841 2300 	strex	r3, r2, [r1]
 8009f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e5      	bne.n	8009f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2220      	movs	r2, #32
 8009f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f92:	bf00      	nop
 8009f94:	3754      	adds	r7, #84	; 0x54
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fd69 	bl	8009a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b21      	cmp	r3, #33	; 0x21
 8009fd8:	d13e      	bne.n	800a058 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fe2:	d114      	bne.n	800a00e <UART_Transmit_IT+0x48>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d110      	bne.n	800a00e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a000:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	1c9a      	adds	r2, r3, #2
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	621a      	str	r2, [r3, #32]
 800a00c:	e008      	b.n	800a020 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	1c59      	adds	r1, r3, #1
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	6211      	str	r1, [r2, #32]
 800a018:	781a      	ldrb	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a024:	b29b      	uxth	r3, r3
 800a026:	3b01      	subs	r3, #1
 800a028:	b29b      	uxth	r3, r3
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4619      	mov	r1, r3
 800a02e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10f      	bne.n	800a054 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a042:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a052:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	e000      	b.n	800a05a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a058:	2302      	movs	r3, #2
  }
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a07c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7f9 fc90 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b08c      	sub	sp, #48	; 0x30
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b22      	cmp	r3, #34	; 0x22
 800a0a8:	f040 80ab 	bne.w	800a202 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b4:	d117      	bne.n	800a0e6 <UART_Receive_IT+0x50>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d113      	bne.n	800a0e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	629a      	str	r2, [r3, #40]	; 0x28
 800a0e4:	e026      	b.n	800a134 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f8:	d007      	beq.n	800a10a <UART_Receive_IT+0x74>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <UART_Receive_IT+0x82>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	b2da      	uxtb	r2, r3
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e008      	b.n	800a12a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a124:	b2da      	uxtb	r2, r3
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a138:	b29b      	uxth	r3, r3
 800a13a:	3b01      	subs	r3, #1
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	4619      	mov	r1, r3
 800a142:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a144:	2b00      	cmp	r3, #0
 800a146:	d15a      	bne.n	800a1fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0220 	bic.w	r2, r2, #32
 800a156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a166:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695a      	ldr	r2, [r3, #20]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0201 	bic.w	r2, r2, #1
 800a176:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a184:	2b01      	cmp	r3, #1
 800a186:	d135      	bne.n	800a1f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	330c      	adds	r3, #12
 800a194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	613b      	str	r3, [r7, #16]
   return(result);
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f023 0310 	bic.w	r3, r3, #16
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	330c      	adds	r3, #12
 800a1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ae:	623a      	str	r2, [r7, #32]
 800a1b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	69f9      	ldr	r1, [r7, #28]
 800a1b4:	6a3a      	ldr	r2, [r7, #32]
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e5      	bne.n	800a18e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b10      	cmp	r3, #16
 800a1ce:	d10a      	bne.n	800a1e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7f9 fb95 	bl	800391c <HAL_UARTEx_RxEventCallback>
 800a1f2:	e002      	b.n	800a1fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff fc37 	bl	8009a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e002      	b.n	800a204 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e000      	b.n	800a204 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a202:	2302      	movs	r3, #2
  }
}
 800a204:	4618      	mov	r0, r3
 800a206:	3730      	adds	r7, #48	; 0x30
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a20c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a210:	b0c0      	sub	sp, #256	; 0x100
 800a212:	af00      	add	r7, sp, #0
 800a214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a228:	68d9      	ldr	r1, [r3, #12]
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	ea40 0301 	orr.w	r3, r0, r1
 800a234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	431a      	orrs	r2, r3
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	431a      	orrs	r2, r3
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	4313      	orrs	r3, r2
 800a254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a264:	f021 010c 	bic.w	r1, r1, #12
 800a268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a272:	430b      	orrs	r3, r1
 800a274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a286:	6999      	ldr	r1, [r3, #24]
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	ea40 0301 	orr.w	r3, r0, r1
 800a292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	4b8f      	ldr	r3, [pc, #572]	; (800a4d8 <UART_SetConfig+0x2cc>)
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d005      	beq.n	800a2ac <UART_SetConfig+0xa0>
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	4b8d      	ldr	r3, [pc, #564]	; (800a4dc <UART_SetConfig+0x2d0>)
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d104      	bne.n	800a2b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2ac:	f7fd ff4a 	bl	8008144 <HAL_RCC_GetPCLK2Freq>
 800a2b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2b4:	e003      	b.n	800a2be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2b6:	f7fd ff31 	bl	800811c <HAL_RCC_GetPCLK1Freq>
 800a2ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2c8:	f040 810c 	bne.w	800a4e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2de:	4622      	mov	r2, r4
 800a2e0:	462b      	mov	r3, r5
 800a2e2:	1891      	adds	r1, r2, r2
 800a2e4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2e6:	415b      	adcs	r3, r3
 800a2e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	eb12 0801 	adds.w	r8, r2, r1
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	eb43 0901 	adc.w	r9, r3, r1
 800a2fa:	f04f 0200 	mov.w	r2, #0
 800a2fe:	f04f 0300 	mov.w	r3, #0
 800a302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a30a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a30e:	4690      	mov	r8, r2
 800a310:	4699      	mov	r9, r3
 800a312:	4623      	mov	r3, r4
 800a314:	eb18 0303 	adds.w	r3, r8, r3
 800a318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a31c:	462b      	mov	r3, r5
 800a31e:	eb49 0303 	adc.w	r3, r9, r3
 800a322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a33a:	460b      	mov	r3, r1
 800a33c:	18db      	adds	r3, r3, r3
 800a33e:	653b      	str	r3, [r7, #80]	; 0x50
 800a340:	4613      	mov	r3, r2
 800a342:	eb42 0303 	adc.w	r3, r2, r3
 800a346:	657b      	str	r3, [r7, #84]	; 0x54
 800a348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a34c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a350:	f7f6 fcb2 	bl	8000cb8 <__aeabi_uldivmod>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4b61      	ldr	r3, [pc, #388]	; (800a4e0 <UART_SetConfig+0x2d4>)
 800a35a:	fba3 2302 	umull	r2, r3, r3, r2
 800a35e:	095b      	lsrs	r3, r3, #5
 800a360:	011c      	lsls	r4, r3, #4
 800a362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a366:	2200      	movs	r2, #0
 800a368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a36c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a374:	4642      	mov	r2, r8
 800a376:	464b      	mov	r3, r9
 800a378:	1891      	adds	r1, r2, r2
 800a37a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a37c:	415b      	adcs	r3, r3
 800a37e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a384:	4641      	mov	r1, r8
 800a386:	eb12 0a01 	adds.w	sl, r2, r1
 800a38a:	4649      	mov	r1, r9
 800a38c:	eb43 0b01 	adc.w	fp, r3, r1
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 0300 	mov.w	r3, #0
 800a398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a39c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3a4:	4692      	mov	sl, r2
 800a3a6:	469b      	mov	fp, r3
 800a3a8:	4643      	mov	r3, r8
 800a3aa:	eb1a 0303 	adds.w	r3, sl, r3
 800a3ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a3b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	18db      	adds	r3, r3, r3
 800a3d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	eb42 0303 	adc.w	r3, r2, r3
 800a3dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3e6:	f7f6 fc67 	bl	8000cb8 <__aeabi_uldivmod>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	4b3b      	ldr	r3, [pc, #236]	; (800a4e0 <UART_SetConfig+0x2d4>)
 800a3f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	2264      	movs	r2, #100	; 0x64
 800a3fa:	fb02 f303 	mul.w	r3, r2, r3
 800a3fe:	1acb      	subs	r3, r1, r3
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a406:	4b36      	ldr	r3, [pc, #216]	; (800a4e0 <UART_SetConfig+0x2d4>)
 800a408:	fba3 2302 	umull	r2, r3, r3, r2
 800a40c:	095b      	lsrs	r3, r3, #5
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a414:	441c      	add	r4, r3
 800a416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a41a:	2200      	movs	r2, #0
 800a41c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	1891      	adds	r1, r2, r2
 800a42e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a430:	415b      	adcs	r3, r3
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a438:	4641      	mov	r1, r8
 800a43a:	1851      	adds	r1, r2, r1
 800a43c:	6339      	str	r1, [r7, #48]	; 0x30
 800a43e:	4649      	mov	r1, r9
 800a440:	414b      	adcs	r3, r1
 800a442:	637b      	str	r3, [r7, #52]	; 0x34
 800a444:	f04f 0200 	mov.w	r2, #0
 800a448:	f04f 0300 	mov.w	r3, #0
 800a44c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a450:	4659      	mov	r1, fp
 800a452:	00cb      	lsls	r3, r1, #3
 800a454:	4651      	mov	r1, sl
 800a456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a45a:	4651      	mov	r1, sl
 800a45c:	00ca      	lsls	r2, r1, #3
 800a45e:	4610      	mov	r0, r2
 800a460:	4619      	mov	r1, r3
 800a462:	4603      	mov	r3, r0
 800a464:	4642      	mov	r2, r8
 800a466:	189b      	adds	r3, r3, r2
 800a468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a46c:	464b      	mov	r3, r9
 800a46e:	460a      	mov	r2, r1
 800a470:	eb42 0303 	adc.w	r3, r2, r3
 800a474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a48c:	460b      	mov	r3, r1
 800a48e:	18db      	adds	r3, r3, r3
 800a490:	62bb      	str	r3, [r7, #40]	; 0x28
 800a492:	4613      	mov	r3, r2
 800a494:	eb42 0303 	adc.w	r3, r2, r3
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a49a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a49e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4a2:	f7f6 fc09 	bl	8000cb8 <__aeabi_uldivmod>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4b0d      	ldr	r3, [pc, #52]	; (800a4e0 <UART_SetConfig+0x2d4>)
 800a4ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b0:	095b      	lsrs	r3, r3, #5
 800a4b2:	2164      	movs	r1, #100	; 0x64
 800a4b4:	fb01 f303 	mul.w	r3, r1, r3
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	3332      	adds	r3, #50	; 0x32
 800a4be:	4a08      	ldr	r2, [pc, #32]	; (800a4e0 <UART_SetConfig+0x2d4>)
 800a4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c4:	095b      	lsrs	r3, r3, #5
 800a4c6:	f003 0207 	and.w	r2, r3, #7
 800a4ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4422      	add	r2, r4
 800a4d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4d4:	e105      	b.n	800a6e2 <UART_SetConfig+0x4d6>
 800a4d6:	bf00      	nop
 800a4d8:	40011000 	.word	0x40011000
 800a4dc:	40011400 	.word	0x40011400
 800a4e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	1891      	adds	r1, r2, r2
 800a4fc:	6239      	str	r1, [r7, #32]
 800a4fe:	415b      	adcs	r3, r3
 800a500:	627b      	str	r3, [r7, #36]	; 0x24
 800a502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a506:	4641      	mov	r1, r8
 800a508:	1854      	adds	r4, r2, r1
 800a50a:	4649      	mov	r1, r9
 800a50c:	eb43 0501 	adc.w	r5, r3, r1
 800a510:	f04f 0200 	mov.w	r2, #0
 800a514:	f04f 0300 	mov.w	r3, #0
 800a518:	00eb      	lsls	r3, r5, #3
 800a51a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a51e:	00e2      	lsls	r2, r4, #3
 800a520:	4614      	mov	r4, r2
 800a522:	461d      	mov	r5, r3
 800a524:	4643      	mov	r3, r8
 800a526:	18e3      	adds	r3, r4, r3
 800a528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a52c:	464b      	mov	r3, r9
 800a52e:	eb45 0303 	adc.w	r3, r5, r3
 800a532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a546:	f04f 0200 	mov.w	r2, #0
 800a54a:	f04f 0300 	mov.w	r3, #0
 800a54e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a552:	4629      	mov	r1, r5
 800a554:	008b      	lsls	r3, r1, #2
 800a556:	4621      	mov	r1, r4
 800a558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a55c:	4621      	mov	r1, r4
 800a55e:	008a      	lsls	r2, r1, #2
 800a560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a564:	f7f6 fba8 	bl	8000cb8 <__aeabi_uldivmod>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4b60      	ldr	r3, [pc, #384]	; (800a6f0 <UART_SetConfig+0x4e4>)
 800a56e:	fba3 2302 	umull	r2, r3, r3, r2
 800a572:	095b      	lsrs	r3, r3, #5
 800a574:	011c      	lsls	r4, r3, #4
 800a576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a588:	4642      	mov	r2, r8
 800a58a:	464b      	mov	r3, r9
 800a58c:	1891      	adds	r1, r2, r2
 800a58e:	61b9      	str	r1, [r7, #24]
 800a590:	415b      	adcs	r3, r3
 800a592:	61fb      	str	r3, [r7, #28]
 800a594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a598:	4641      	mov	r1, r8
 800a59a:	1851      	adds	r1, r2, r1
 800a59c:	6139      	str	r1, [r7, #16]
 800a59e:	4649      	mov	r1, r9
 800a5a0:	414b      	adcs	r3, r1
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	f04f 0300 	mov.w	r3, #0
 800a5ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5b0:	4659      	mov	r1, fp
 800a5b2:	00cb      	lsls	r3, r1, #3
 800a5b4:	4651      	mov	r1, sl
 800a5b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ba:	4651      	mov	r1, sl
 800a5bc:	00ca      	lsls	r2, r1, #3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	189b      	adds	r3, r3, r2
 800a5c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	460a      	mov	r2, r1
 800a5d0:	eb42 0303 	adc.w	r3, r2, r3
 800a5d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	f04f 0300 	mov.w	r3, #0
 800a5ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	008b      	lsls	r3, r1, #2
 800a5f4:	4641      	mov	r1, r8
 800a5f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	008a      	lsls	r2, r1, #2
 800a5fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a602:	f7f6 fb59 	bl	8000cb8 <__aeabi_uldivmod>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4b39      	ldr	r3, [pc, #228]	; (800a6f0 <UART_SetConfig+0x4e4>)
 800a60c:	fba3 1302 	umull	r1, r3, r3, r2
 800a610:	095b      	lsrs	r3, r3, #5
 800a612:	2164      	movs	r1, #100	; 0x64
 800a614:	fb01 f303 	mul.w	r3, r1, r3
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	3332      	adds	r3, #50	; 0x32
 800a61e:	4a34      	ldr	r2, [pc, #208]	; (800a6f0 <UART_SetConfig+0x4e4>)
 800a620:	fba2 2303 	umull	r2, r3, r2, r3
 800a624:	095b      	lsrs	r3, r3, #5
 800a626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a62a:	441c      	add	r4, r3
 800a62c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a630:	2200      	movs	r2, #0
 800a632:	673b      	str	r3, [r7, #112]	; 0x70
 800a634:	677a      	str	r2, [r7, #116]	; 0x74
 800a636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a63a:	4642      	mov	r2, r8
 800a63c:	464b      	mov	r3, r9
 800a63e:	1891      	adds	r1, r2, r2
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	415b      	adcs	r3, r3
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a64a:	4641      	mov	r1, r8
 800a64c:	1851      	adds	r1, r2, r1
 800a64e:	6039      	str	r1, [r7, #0]
 800a650:	4649      	mov	r1, r9
 800a652:	414b      	adcs	r3, r1
 800a654:	607b      	str	r3, [r7, #4]
 800a656:	f04f 0200 	mov.w	r2, #0
 800a65a:	f04f 0300 	mov.w	r3, #0
 800a65e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a662:	4659      	mov	r1, fp
 800a664:	00cb      	lsls	r3, r1, #3
 800a666:	4651      	mov	r1, sl
 800a668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a66c:	4651      	mov	r1, sl
 800a66e:	00ca      	lsls	r2, r1, #3
 800a670:	4610      	mov	r0, r2
 800a672:	4619      	mov	r1, r3
 800a674:	4603      	mov	r3, r0
 800a676:	4642      	mov	r2, r8
 800a678:	189b      	adds	r3, r3, r2
 800a67a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a67c:	464b      	mov	r3, r9
 800a67e:	460a      	mov	r2, r1
 800a680:	eb42 0303 	adc.w	r3, r2, r3
 800a684:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	663b      	str	r3, [r7, #96]	; 0x60
 800a690:	667a      	str	r2, [r7, #100]	; 0x64
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a69e:	4649      	mov	r1, r9
 800a6a0:	008b      	lsls	r3, r1, #2
 800a6a2:	4641      	mov	r1, r8
 800a6a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	008a      	lsls	r2, r1, #2
 800a6ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6b0:	f7f6 fb02 	bl	8000cb8 <__aeabi_uldivmod>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4b0d      	ldr	r3, [pc, #52]	; (800a6f0 <UART_SetConfig+0x4e4>)
 800a6ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2164      	movs	r1, #100	; 0x64
 800a6c2:	fb01 f303 	mul.w	r3, r1, r3
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	3332      	adds	r3, #50	; 0x32
 800a6cc:	4a08      	ldr	r2, [pc, #32]	; (800a6f0 <UART_SetConfig+0x4e4>)
 800a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d2:	095b      	lsrs	r3, r3, #5
 800a6d4:	f003 020f 	and.w	r2, r3, #15
 800a6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4422      	add	r2, r4
 800a6e0:	609a      	str	r2, [r3, #8]
}
 800a6e2:	bf00      	nop
 800a6e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6ee:	bf00      	nop
 800a6f0:	51eb851f 	.word	0x51eb851f

0800a6f4 <__NVIC_SetPriority>:
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	6039      	str	r1, [r7, #0]
 800a6fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a704:	2b00      	cmp	r3, #0
 800a706:	db0a      	blt.n	800a71e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	490c      	ldr	r1, [pc, #48]	; (800a740 <__NVIC_SetPriority+0x4c>)
 800a70e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a712:	0112      	lsls	r2, r2, #4
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	440b      	add	r3, r1
 800a718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a71c:	e00a      	b.n	800a734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	4908      	ldr	r1, [pc, #32]	; (800a744 <__NVIC_SetPriority+0x50>)
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	f003 030f 	and.w	r3, r3, #15
 800a72a:	3b04      	subs	r3, #4
 800a72c:	0112      	lsls	r2, r2, #4
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	440b      	add	r3, r1
 800a732:	761a      	strb	r2, [r3, #24]
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	e000e100 	.word	0xe000e100
 800a744:	e000ed00 	.word	0xe000ed00

0800a748 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <SysTick_Handler+0x1c>)
 800a74e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a750:	f002 fd9c 	bl	800d28c <xTaskGetSchedulerState>
 800a754:	4603      	mov	r3, r0
 800a756:	2b01      	cmp	r3, #1
 800a758:	d001      	beq.n	800a75e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a75a:	f003 fe85 	bl	800e468 <xPortSysTickHandler>
  }
}
 800a75e:	bf00      	nop
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	e000e010 	.word	0xe000e010

0800a768 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a76c:	2100      	movs	r1, #0
 800a76e:	f06f 0004 	mvn.w	r0, #4
 800a772:	f7ff ffbf 	bl	800a6f4 <__NVIC_SetPriority>
#endif
}
 800a776:	bf00      	nop
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a782:	f3ef 8305 	mrs	r3, IPSR
 800a786:	603b      	str	r3, [r7, #0]
  return(result);
 800a788:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a78e:	f06f 0305 	mvn.w	r3, #5
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	e00c      	b.n	800a7b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a796:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <osKernelInitialize+0x44>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a79e:	4b08      	ldr	r3, [pc, #32]	; (800a7c0 <osKernelInitialize+0x44>)
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	607b      	str	r3, [r7, #4]
 800a7a8:	e002      	b.n	800a7b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7b0:	687b      	ldr	r3, [r7, #4]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	200007d8 	.word	0x200007d8

0800a7c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ca:	f3ef 8305 	mrs	r3, IPSR
 800a7ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a7d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <osKernelStart+0x1a>
    stat = osErrorISR;
 800a7d6:	f06f 0305 	mvn.w	r3, #5
 800a7da:	607b      	str	r3, [r7, #4]
 800a7dc:	e010      	b.n	800a800 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <osKernelStart+0x48>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d109      	bne.n	800a7fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a7e6:	f7ff ffbf 	bl	800a768 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a7ea:	4b08      	ldr	r3, [pc, #32]	; (800a80c <osKernelStart+0x48>)
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a7f0:	f002 f8e0 	bl	800c9b4 <vTaskStartScheduler>
      stat = osOK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	607b      	str	r3, [r7, #4]
 800a7f8:	e002      	b.n	800a800 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a800:	687b      	ldr	r3, [r7, #4]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	200007d8 	.word	0x200007d8

0800a810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a810:	b580      	push	{r7, lr}
 800a812:	b08e      	sub	sp, #56	; 0x38
 800a814:	af04      	add	r7, sp, #16
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a820:	f3ef 8305 	mrs	r3, IPSR
 800a824:	617b      	str	r3, [r7, #20]
  return(result);
 800a826:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d17e      	bne.n	800a92a <osThreadNew+0x11a>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d07b      	beq.n	800a92a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a832:	2380      	movs	r3, #128	; 0x80
 800a834:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a836:	2318      	movs	r3, #24
 800a838:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a83e:	f04f 33ff 	mov.w	r3, #4294967295
 800a842:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d045      	beq.n	800a8d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <osThreadNew+0x48>
        name = attr->name;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d008      	beq.n	800a87e <osThreadNew+0x6e>
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	2b38      	cmp	r3, #56	; 0x38
 800a870:	d805      	bhi.n	800a87e <osThreadNew+0x6e>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <osThreadNew+0x72>
        return (NULL);
 800a87e:	2300      	movs	r3, #0
 800a880:	e054      	b.n	800a92c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	089b      	lsrs	r3, r3, #2
 800a890:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00e      	beq.n	800a8b8 <osThreadNew+0xa8>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	2bbb      	cmp	r3, #187	; 0xbb
 800a8a0:	d90a      	bls.n	800a8b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d006      	beq.n	800a8b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <osThreadNew+0xa8>
        mem = 1;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	61bb      	str	r3, [r7, #24]
 800a8b6:	e010      	b.n	800a8da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10c      	bne.n	800a8da <osThreadNew+0xca>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d108      	bne.n	800a8da <osThreadNew+0xca>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <osThreadNew+0xca>
          mem = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	e001      	b.n	800a8da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d110      	bne.n	800a902 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8e8:	9202      	str	r2, [sp, #8]
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6a3a      	ldr	r2, [r7, #32]
 800a8f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f001 fe70 	bl	800c5dc <xTaskCreateStatic>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	e013      	b.n	800a92a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d110      	bne.n	800a92a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	f107 0310 	add.w	r3, r7, #16
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 febb 	bl	800c696 <xTaskCreate>
 800a920:	4603      	mov	r3, r0
 800a922:	2b01      	cmp	r3, #1
 800a924:	d001      	beq.n	800a92a <osThreadNew+0x11a>
            hTask = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a92a:	693b      	ldr	r3, [r7, #16]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3728      	adds	r7, #40	; 0x28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af02      	add	r7, sp, #8
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <osThreadFlagsSet+0x1a>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	da03      	bge.n	800a956 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a94e:	f06f 0303 	mvn.w	r3, #3
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e035      	b.n	800a9c2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a95c:	f3ef 8305 	mrs	r3, IPSR
 800a960:	613b      	str	r3, [r7, #16]
  return(result);
 800a962:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01f      	beq.n	800a9a8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a968:	2300      	movs	r3, #0
 800a96a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	2300      	movs	r3, #0
 800a974:	2201      	movs	r2, #1
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6978      	ldr	r0, [r7, #20]
 800a97a:	f002 ff2f 	bl	800d7dc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a97e:	f107 030c 	add.w	r3, r7, #12
 800a982:	2200      	movs	r2, #0
 800a984:	9200      	str	r2, [sp, #0]
 800a986:	2200      	movs	r2, #0
 800a988:	2100      	movs	r1, #0
 800a98a:	6978      	ldr	r0, [r7, #20]
 800a98c:	f002 ff26 	bl	800d7dc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d015      	beq.n	800a9c2 <osThreadFlagsSet+0x8e>
 800a996:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <osThreadFlagsSet+0x98>)
 800a998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	e00c      	b.n	800a9c2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6978      	ldr	r0, [r7, #20]
 800a9b0:	f002 fe56 	bl	800d660 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a9b4:	f107 030c 	add.w	r3, r7, #12
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	6978      	ldr	r0, [r7, #20]
 800a9be:	f002 fe4f 	bl	800d660 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	e000ed04 	.word	0xe000ed04

0800a9d0 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9d8:	f3ef 8305 	mrs	r3, IPSR
 800a9dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9de:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800a9e4:	f06f 0305 	mvn.w	r3, #5
 800a9e8:	617b      	str	r3, [r7, #20]
 800a9ea:	e02a      	b.n	800aa42 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	da03      	bge.n	800a9fa <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a9f2:	f06f 0303 	mvn.w	r3, #3
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	e023      	b.n	800aa42 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800a9fa:	f002 fc37 	bl	800d26c <xTaskGetCurrentTaskHandle>
 800a9fe:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800aa00:	f107 0308 	add.w	r3, r7, #8
 800aa04:	2200      	movs	r2, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	6938      	ldr	r0, [r7, #16]
 800aa0a:	f002 fe29 	bl	800d660 <xTaskGenericNotify>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d113      	bne.n	800aa3c <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	43da      	mvns	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	2300      	movs	r3, #0
 800aa26:	2203      	movs	r2, #3
 800aa28:	6938      	ldr	r0, [r7, #16]
 800aa2a:	f002 fe19 	bl	800d660 <xTaskGenericNotify>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d006      	beq.n	800aa42 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	617b      	str	r3, [r7, #20]
 800aa3a:	e002      	b.n	800aa42 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800aa3c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa40:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800aa42:	697b      	ldr	r3, [r7, #20]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa52:	f3ef 8305 	mrs	r3, IPSR
 800aa56:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa58:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800aa5e:	f06f 0305 	mvn.w	r3, #5
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	e00e      	b.n	800aa84 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800aa66:	f002 fc01 	bl	800d26c <xTaskGetCurrentTaskHandle>
 800aa6a:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800aa6c:	1d3b      	adds	r3, r7, #4
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f002 fdf4 	bl	800d660 <xTaskGenericNotify>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d002      	beq.n	800aa84 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800aa84:	687b      	ldr	r3, [r7, #4]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b08c      	sub	sp, #48	; 0x30
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa9a:	f3ef 8305 	mrs	r3, IPSR
 800aa9e:	617b      	str	r3, [r7, #20]
  return(result);
 800aaa0:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800aaa6:	f06f 0305 	mvn.w	r3, #5
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaac:	e06b      	b.n	800ab86 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	da03      	bge.n	800aabc <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800aab4:	f06f 0303 	mvn.w	r3, #3
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaba:	e064      	b.n	800ab86 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <osThreadFlagsWait+0x3e>
      clear = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaca:	e001      	b.n	800aad0 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800aad8:	f002 f888 	bl	800cbec <xTaskGetTickCount>
 800aadc:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800aade:	f107 0210 	add.w	r2, r7, #16
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae6:	2000      	movs	r0, #0
 800aae8:	f002 fd5a 	bl	800d5a0 <xTaskNotifyWait>
 800aaec:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d137      	bne.n	800ab64 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800aaf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4013      	ands	r3, r2
 800aafa:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab00:	4313      	orrs	r3, r2
 800ab02:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00c      	beq.n	800ab28 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	4013      	ands	r3, r2
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d032      	beq.n	800ab80 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10f      	bne.n	800ab40 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ab20:	f06f 0302 	mvn.w	r3, #2
 800ab24:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800ab26:	e02e      	b.n	800ab86 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d128      	bne.n	800ab84 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ab38:	f06f 0302 	mvn.w	r3, #2
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800ab3e:	e022      	b.n	800ab86 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ab40:	f002 f854 	bl	800cbec <xTaskGetTickCount>
 800ab44:	4602      	mov	r2, r0
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d902      	bls.n	800ab5a <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
 800ab58:	e00e      	b.n	800ab78 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
 800ab62:	e009      	b.n	800ab78 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d103      	bne.n	800ab72 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ab6a:	f06f 0302 	mvn.w	r3, #2
 800ab6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab70:	e002      	b.n	800ab78 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ab72:	f06f 0301 	mvn.w	r3, #1
 800ab76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1af      	bne.n	800aade <osThreadFlagsWait+0x50>
 800ab7e:	e002      	b.n	800ab86 <osThreadFlagsWait+0xf8>
            break;
 800ab80:	bf00      	nop
 800ab82:	e000      	b.n	800ab86 <osThreadFlagsWait+0xf8>
            break;
 800ab84:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3730      	adds	r7, #48	; 0x30
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab98:	f3ef 8305 	mrs	r3, IPSR
 800ab9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <osDelay+0x1c>
    stat = osErrorISR;
 800aba4:	f06f 0305 	mvn.w	r3, #5
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e007      	b.n	800abbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <osDelay+0x2c>
      vTaskDelay(ticks);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 fec8 	bl	800c94c <vTaskDelay>
    }
  }

  return (stat);
 800abbc:	68fb      	ldr	r3, [r7, #12]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b088      	sub	sp, #32
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd2:	f3ef 8305 	mrs	r3, IPSR
 800abd6:	60bb      	str	r3, [r7, #8]
  return(result);
 800abd8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d174      	bne.n	800acc8 <osMutexNew+0x102>
    if (attr != NULL) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <osMutexNew+0x26>
      type = attr->attr_bits;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	61bb      	str	r3, [r7, #24]
 800abea:	e001      	b.n	800abf0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800abec:	2300      	movs	r3, #0
 800abee:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <osMutexNew+0x3a>
      rmtx = 1U;
 800abfa:	2301      	movs	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	e001      	b.n	800ac04 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d15c      	bne.n	800acc8 <osMutexNew+0x102>
      mem = -1;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d015      	beq.n	800ac46 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d006      	beq.n	800ac30 <osMutexNew+0x6a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	2b4f      	cmp	r3, #79	; 0x4f
 800ac28:	d902      	bls.n	800ac30 <osMutexNew+0x6a>
          mem = 1;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	613b      	str	r3, [r7, #16]
 800ac2e:	e00c      	b.n	800ac4a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d108      	bne.n	800ac4a <osMutexNew+0x84>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <osMutexNew+0x84>
            mem = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	e001      	b.n	800ac4a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d112      	bne.n	800ac76 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d007      	beq.n	800ac66 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	2004      	movs	r0, #4
 800ac5e:	f000 fd68 	bl	800b732 <xQueueCreateMutexStatic>
 800ac62:	61f8      	str	r0, [r7, #28]
 800ac64:	e016      	b.n	800ac94 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	f000 fd60 	bl	800b732 <xQueueCreateMutexStatic>
 800ac72:	61f8      	str	r0, [r7, #28]
 800ac74:	e00e      	b.n	800ac94 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ac82:	2004      	movs	r0, #4
 800ac84:	f000 fd3d 	bl	800b702 <xQueueCreateMutex>
 800ac88:	61f8      	str	r0, [r7, #28]
 800ac8a:	e003      	b.n	800ac94 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f000 fd38 	bl	800b702 <xQueueCreateMutex>
 800ac92:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00c      	beq.n	800acb4 <osMutexNew+0xee>
        if (attr != NULL) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <osMutexNew+0xe2>
          name = attr->name;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e001      	b.n	800acac <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800acac:	68f9      	ldr	r1, [r7, #12]
 800acae:	69f8      	ldr	r0, [r7, #28]
 800acb0:	f001 fc0c 	bl	800c4cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d006      	beq.n	800acc8 <osMutexNew+0x102>
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800acc8:	69fb      	ldr	r3, [r7, #28]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3720      	adds	r7, #32
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b086      	sub	sp, #24
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f023 0301 	bic.w	r3, r3, #1
 800ace2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800acec:	2300      	movs	r3, #0
 800acee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acf0:	f3ef 8305 	mrs	r3, IPSR
 800acf4:	60bb      	str	r3, [r7, #8]
  return(result);
 800acf6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800acfc:	f06f 0305 	mvn.w	r3, #5
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e02c      	b.n	800ad5e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ad0a:	f06f 0303 	mvn.w	r3, #3
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	e025      	b.n	800ad5e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d011      	beq.n	800ad3c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6938      	ldr	r0, [r7, #16]
 800ad1c:	f000 fd58 	bl	800b7d0 <xQueueTakeMutexRecursive>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d01b      	beq.n	800ad5e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ad2c:	f06f 0301 	mvn.w	r3, #1
 800ad30:	617b      	str	r3, [r7, #20]
 800ad32:	e014      	b.n	800ad5e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ad34:	f06f 0302 	mvn.w	r3, #2
 800ad38:	617b      	str	r3, [r7, #20]
 800ad3a:	e010      	b.n	800ad5e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6938      	ldr	r0, [r7, #16]
 800ad40:	f001 f8ec 	bl	800bf1c <xQueueSemaphoreTake>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d009      	beq.n	800ad5e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ad50:	f06f 0301 	mvn.w	r3, #1
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	e002      	b.n	800ad5e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ad58:	f06f 0302 	mvn.w	r3, #2
 800ad5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ad5e:	697b      	ldr	r3, [r7, #20]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f023 0301 	bic.w	r3, r3, #1
 800ad76:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad84:	f3ef 8305 	mrs	r3, IPSR
 800ad88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad8a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ad90:	f06f 0305 	mvn.w	r3, #5
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	e01f      	b.n	800add8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d103      	bne.n	800ada6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ad9e:	f06f 0303 	mvn.w	r3, #3
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	e018      	b.n	800add8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d009      	beq.n	800adc0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800adac:	6938      	ldr	r0, [r7, #16]
 800adae:	f000 fcdb 	bl	800b768 <xQueueGiveMutexRecursive>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d00f      	beq.n	800add8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800adb8:	f06f 0302 	mvn.w	r3, #2
 800adbc:	617b      	str	r3, [r7, #20]
 800adbe:	e00b      	b.n	800add8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800adc0:	2300      	movs	r3, #0
 800adc2:	2200      	movs	r2, #0
 800adc4:	2100      	movs	r1, #0
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f000 fda2 	bl	800b910 <xQueueGenericSend>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b01      	cmp	r3, #1
 800add0:	d002      	beq.n	800add8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800add2:	f06f 0302 	mvn.w	r3, #2
 800add6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800add8:	697b      	ldr	r3, [r7, #20]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b08a      	sub	sp, #40	; 0x28
 800ade6:	af02      	add	r7, sp, #8
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf2:	f3ef 8305 	mrs	r3, IPSR
 800adf6:	613b      	str	r3, [r7, #16]
  return(result);
 800adf8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d175      	bne.n	800aeea <osSemaphoreNew+0x108>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d072      	beq.n	800aeea <osSemaphoreNew+0x108>
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d86e      	bhi.n	800aeea <osSemaphoreNew+0x108>
    mem = -1;
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d015      	beq.n	800ae44 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d006      	beq.n	800ae2e <osSemaphoreNew+0x4c>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b4f      	cmp	r3, #79	; 0x4f
 800ae26:	d902      	bls.n	800ae2e <osSemaphoreNew+0x4c>
        mem = 1;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	61bb      	str	r3, [r7, #24]
 800ae2c:	e00c      	b.n	800ae48 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d108      	bne.n	800ae48 <osSemaphoreNew+0x66>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d104      	bne.n	800ae48 <osSemaphoreNew+0x66>
          mem = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	61bb      	str	r3, [r7, #24]
 800ae42:	e001      	b.n	800ae48 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d04c      	beq.n	800aeea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d128      	bne.n	800aea8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d10a      	bne.n	800ae72 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	2203      	movs	r2, #3
 800ae62:	9200      	str	r2, [sp, #0]
 800ae64:	2200      	movs	r2, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	2001      	movs	r0, #1
 800ae6a:	f000 fb5b 	bl	800b524 <xQueueGenericCreateStatic>
 800ae6e:	61f8      	str	r0, [r7, #28]
 800ae70:	e005      	b.n	800ae7e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ae72:	2203      	movs	r2, #3
 800ae74:	2100      	movs	r1, #0
 800ae76:	2001      	movs	r0, #1
 800ae78:	f000 fbcc 	bl	800b614 <xQueueGenericCreate>
 800ae7c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d022      	beq.n	800aeca <osSemaphoreNew+0xe8>
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d01f      	beq.n	800aeca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2100      	movs	r1, #0
 800ae90:	69f8      	ldr	r0, [r7, #28]
 800ae92:	f000 fd3d 	bl	800b910 <xQueueGenericSend>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d016      	beq.n	800aeca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ae9c:	69f8      	ldr	r0, [r7, #28]
 800ae9e:	f001 f9c9 	bl	800c234 <vQueueDelete>
            hSemaphore = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61fb      	str	r3, [r7, #28]
 800aea6:	e010      	b.n	800aeca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d108      	bne.n	800aec0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 fcc0 	bl	800b83c <xQueueCreateCountingSemaphoreStatic>
 800aebc:	61f8      	str	r0, [r7, #28]
 800aebe:	e004      	b.n	800aeca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fcf1 	bl	800b8aa <xQueueCreateCountingSemaphore>
 800aec8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00c      	beq.n	800aeea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <osSemaphoreNew+0xfc>
          name = attr->name;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	e001      	b.n	800aee2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aee2:	6979      	ldr	r1, [r7, #20]
 800aee4:	69f8      	ldr	r0, [r7, #28]
 800aee6:	f001 faf1 	bl	800c4cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aeea:	69fb      	ldr	r3, [r7, #28]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3720      	adds	r7, #32
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800af02:	2300      	movs	r3, #0
 800af04:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d103      	bne.n	800af14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800af0c:	f06f 0303 	mvn.w	r3, #3
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	e039      	b.n	800af88 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af14:	f3ef 8305 	mrs	r3, IPSR
 800af18:	60fb      	str	r3, [r7, #12]
  return(result);
 800af1a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d022      	beq.n	800af66 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800af26:	f06f 0303 	mvn.w	r3, #3
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	e02c      	b.n	800af88 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800af32:	f107 0308 	add.w	r3, r7, #8
 800af36:	461a      	mov	r2, r3
 800af38:	2100      	movs	r1, #0
 800af3a:	6938      	ldr	r0, [r7, #16]
 800af3c:	f001 f8fa 	bl	800c134 <xQueueReceiveFromISR>
 800af40:	4603      	mov	r3, r0
 800af42:	2b01      	cmp	r3, #1
 800af44:	d003      	beq.n	800af4e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800af46:	f06f 0302 	mvn.w	r3, #2
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e01c      	b.n	800af88 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d019      	beq.n	800af88 <osSemaphoreAcquire+0x94>
 800af54:	4b0f      	ldr	r3, [pc, #60]	; (800af94 <osSemaphoreAcquire+0xa0>)
 800af56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	e010      	b.n	800af88 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6938      	ldr	r0, [r7, #16]
 800af6a:	f000 ffd7 	bl	800bf1c <xQueueSemaphoreTake>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b01      	cmp	r3, #1
 800af72:	d009      	beq.n	800af88 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800af7a:	f06f 0301 	mvn.w	r3, #1
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	e002      	b.n	800af88 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800af82:	f06f 0302 	mvn.w	r3, #2
 800af86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800af88:	697b      	ldr	r3, [r7, #20]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800afae:	f06f 0303 	mvn.w	r3, #3
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	e02c      	b.n	800b010 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afb6:	f3ef 8305 	mrs	r3, IPSR
 800afba:	60fb      	str	r3, [r7, #12]
  return(result);
 800afbc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01a      	beq.n	800aff8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	4619      	mov	r1, r3
 800afcc:	6938      	ldr	r0, [r7, #16]
 800afce:	f000 fe38 	bl	800bc42 <xQueueGiveFromISR>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d003      	beq.n	800afe0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800afd8:	f06f 0302 	mvn.w	r3, #2
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e017      	b.n	800b010 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d014      	beq.n	800b010 <osSemaphoreRelease+0x78>
 800afe6:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <osSemaphoreRelease+0x84>)
 800afe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	e00b      	b.n	800b010 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aff8:	2300      	movs	r3, #0
 800affa:	2200      	movs	r2, #0
 800affc:	2100      	movs	r1, #0
 800affe:	6938      	ldr	r0, [r7, #16]
 800b000:	f000 fc86 	bl	800b910 <xQueueGenericSend>
 800b004:	4603      	mov	r3, r0
 800b006:	2b01      	cmp	r3, #1
 800b008:	d002      	beq.n	800b010 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b00a:	f06f 0302 	mvn.w	r3, #2
 800b00e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b010:	697b      	ldr	r3, [r7, #20]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3718      	adds	r7, #24
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	; 0x28
 800b024:	af02      	add	r7, sp, #8
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b030:	f3ef 8305 	mrs	r3, IPSR
 800b034:	613b      	str	r3, [r7, #16]
  return(result);
 800b036:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d15f      	bne.n	800b0fc <osMessageQueueNew+0xdc>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d05c      	beq.n	800b0fc <osMessageQueueNew+0xdc>
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d059      	beq.n	800b0fc <osMessageQueueNew+0xdc>
    mem = -1;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295
 800b04c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d029      	beq.n	800b0a8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d012      	beq.n	800b082 <osMessageQueueNew+0x62>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	2b4f      	cmp	r3, #79	; 0x4f
 800b062:	d90e      	bls.n	800b082 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	695a      	ldr	r2, [r3, #20]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	429a      	cmp	r2, r3
 800b07a:	d302      	bcc.n	800b082 <osMessageQueueNew+0x62>
        mem = 1;
 800b07c:	2301      	movs	r3, #1
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	e014      	b.n	800b0ac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d110      	bne.n	800b0ac <osMessageQueueNew+0x8c>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10c      	bne.n	800b0ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b096:	2b00      	cmp	r3, #0
 800b098:	d108      	bne.n	800b0ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d104      	bne.n	800b0ac <osMessageQueueNew+0x8c>
          mem = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
 800b0a6:	e001      	b.n	800b0ac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d10b      	bne.n	800b0ca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	9100      	str	r1, [sp, #0]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fa2f 	bl	800b524 <xQueueGenericCreateStatic>
 800b0c6:	61f8      	str	r0, [r7, #28]
 800b0c8:	e008      	b.n	800b0dc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d105      	bne.n	800b0dc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fa9d 	bl	800b614 <xQueueGenericCreate>
 800b0da:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00c      	beq.n	800b0fc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	617b      	str	r3, [r7, #20]
 800b0ee:	e001      	b.n	800b0f4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b0f4:	6979      	ldr	r1, [r7, #20]
 800b0f6:	69f8      	ldr	r0, [r7, #28]
 800b0f8:	f001 f9e8 	bl	800c4cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b0fc:	69fb      	ldr	r3, [r7, #28]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3720      	adds	r7, #32
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	603b      	str	r3, [r7, #0]
 800b114:	4613      	mov	r3, r2
 800b116:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b120:	f3ef 8305 	mrs	r3, IPSR
 800b124:	617b      	str	r3, [r7, #20]
  return(result);
 800b126:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d028      	beq.n	800b17e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d005      	beq.n	800b13e <osMessageQueuePut+0x36>
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <osMessageQueuePut+0x36>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b13e:	f06f 0303 	mvn.w	r3, #3
 800b142:	61fb      	str	r3, [r7, #28]
 800b144:	e038      	b.n	800b1b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b146:	2300      	movs	r3, #0
 800b148:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b14a:	f107 0210 	add.w	r2, r7, #16
 800b14e:	2300      	movs	r3, #0
 800b150:	68b9      	ldr	r1, [r7, #8]
 800b152:	69b8      	ldr	r0, [r7, #24]
 800b154:	f000 fcda 	bl	800bb0c <xQueueGenericSendFromISR>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d003      	beq.n	800b166 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b15e:	f06f 0302 	mvn.w	r3, #2
 800b162:	61fb      	str	r3, [r7, #28]
 800b164:	e028      	b.n	800b1b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d025      	beq.n	800b1b8 <osMessageQueuePut+0xb0>
 800b16c:	4b15      	ldr	r3, [pc, #84]	; (800b1c4 <osMessageQueuePut+0xbc>)
 800b16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	e01c      	b.n	800b1b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <osMessageQueuePut+0x82>
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b18a:	f06f 0303 	mvn.w	r3, #3
 800b18e:	61fb      	str	r3, [r7, #28]
 800b190:	e012      	b.n	800b1b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b192:	2300      	movs	r3, #0
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	69b8      	ldr	r0, [r7, #24]
 800b19a:	f000 fbb9 	bl	800b910 <xQueueGenericSend>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d009      	beq.n	800b1b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b1aa:	f06f 0301 	mvn.w	r3, #1
 800b1ae:	61fb      	str	r3, [r7, #28]
 800b1b0:	e002      	b.n	800b1b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b1b2:	f06f 0302 	mvn.w	r3, #2
 800b1b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b1b8:	69fb      	ldr	r3, [r7, #28]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	e000ed04 	.word	0xe000ed04

0800b1c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b088      	sub	sp, #32
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1de:	f3ef 8305 	mrs	r3, IPSR
 800b1e2:	617b      	str	r3, [r7, #20]
  return(result);
 800b1e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d028      	beq.n	800b23c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <osMessageQueueGet+0x34>
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <osMessageQueueGet+0x34>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b1fc:	f06f 0303 	mvn.w	r3, #3
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	e037      	b.n	800b274 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b204:	2300      	movs	r3, #0
 800b206:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b208:	f107 0310 	add.w	r3, r7, #16
 800b20c:	461a      	mov	r2, r3
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	69b8      	ldr	r0, [r7, #24]
 800b212:	f000 ff8f 	bl	800c134 <xQueueReceiveFromISR>
 800b216:	4603      	mov	r3, r0
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d003      	beq.n	800b224 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b21c:	f06f 0302 	mvn.w	r3, #2
 800b220:	61fb      	str	r3, [r7, #28]
 800b222:	e027      	b.n	800b274 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d024      	beq.n	800b274 <osMessageQueueGet+0xac>
 800b22a:	4b15      	ldr	r3, [pc, #84]	; (800b280 <osMessageQueueGet+0xb8>)
 800b22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	e01b      	b.n	800b274 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <osMessageQueueGet+0x80>
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d103      	bne.n	800b250 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b248:	f06f 0303 	mvn.w	r3, #3
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	e011      	b.n	800b274 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	69b8      	ldr	r0, [r7, #24]
 800b256:	f000 fd81 	bl	800bd5c <xQueueReceive>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d009      	beq.n	800b274 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b266:	f06f 0301 	mvn.w	r3, #1
 800b26a:	61fb      	str	r3, [r7, #28]
 800b26c:	e002      	b.n	800b274 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b26e:	f06f 0302 	mvn.w	r3, #2
 800b272:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b274:	69fb      	ldr	r3, [r7, #28]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3720      	adds	r7, #32
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	e000ed04 	.word	0xe000ed04

0800b284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	4a06      	ldr	r2, [pc, #24]	; (800b2b4 <vApplicationGetIdleTaskMemory+0x30>)
 800b29a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2280      	movs	r2, #128	; 0x80
 800b2a0:	601a      	str	r2, [r3, #0]
}
 800b2a2:	bf00      	nop
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	200007dc 	.word	0x200007dc
 800b2b4:	20000898 	.word	0x20000898

0800b2b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4a07      	ldr	r2, [pc, #28]	; (800b2e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	4a06      	ldr	r2, [pc, #24]	; (800b2e8 <vApplicationGetTimerTaskMemory+0x30>)
 800b2ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2d6:	601a      	str	r2, [r3, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	20000a98 	.word	0x20000a98
 800b2e8:	20000b54 	.word	0x20000b54

0800b2ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f103 0208 	add.w	r2, r3, #8
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f04f 32ff 	mov.w	r2, #4294967295
 800b304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f103 0208 	add.w	r2, r3, #8
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f103 0208 	add.w	r2, r3, #8
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]
}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a4:	d103      	bne.n	800b3ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	e00c      	b.n	800b3c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	e002      	b.n	800b3bc <vListInsert+0x2e>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d2f6      	bcs.n	800b3b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	601a      	str	r2, [r3, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	6892      	ldr	r2, [r2, #8]
 800b416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	6852      	ldr	r2, [r2, #4]
 800b420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d103      	bne.n	800b434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689a      	ldr	r2, [r3, #8]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	1e5a      	subs	r2, r3, #1
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b47e:	f002 ff61 	bl	800e344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48a:	68f9      	ldr	r1, [r7, #12]
 800b48c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b48e:	fb01 f303 	mul.w	r3, r1, r3
 800b492:	441a      	add	r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	68f9      	ldr	r1, [r7, #12]
 800b4b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4b4:	fb01 f303 	mul.w	r3, r1, r3
 800b4b8:	441a      	add	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	22ff      	movs	r2, #255	; 0xff
 800b4c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	22ff      	movs	r2, #255	; 0xff
 800b4ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d114      	bne.n	800b4fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d01a      	beq.n	800b512 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3310      	adds	r3, #16
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fd01 	bl	800cee8 <xTaskRemoveFromEventList>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d012      	beq.n	800b512 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <xQueueGenericReset+0xcc>)
 800b4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	e009      	b.n	800b512 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3310      	adds	r3, #16
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff fef2 	bl	800b2ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3324      	adds	r3, #36	; 0x24
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff feed 	bl	800b2ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b512:	f002 ff47 	bl	800e3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b516:	2301      	movs	r3, #1
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	e000ed04 	.word	0xe000ed04

0800b524 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b524:	b580      	push	{r7, lr}
 800b526:	b08e      	sub	sp, #56	; 0x38
 800b528:	af02      	add	r7, sp, #8
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <xQueueGenericCreateStatic+0x52>
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <xQueueGenericCreateStatic+0x56>
 800b576:	2301      	movs	r3, #1
 800b578:	e000      	b.n	800b57c <xQueueGenericCreateStatic+0x58>
 800b57a:	2300      	movs	r3, #0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10a      	bne.n	800b596 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	623b      	str	r3, [r7, #32]
}
 800b592:	bf00      	nop
 800b594:	e7fe      	b.n	800b594 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <xQueueGenericCreateStatic+0x7e>
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <xQueueGenericCreateStatic+0x82>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e000      	b.n	800b5a8 <xQueueGenericCreateStatic+0x84>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10a      	bne.n	800b5c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61fb      	str	r3, [r7, #28]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5c2:	2350      	movs	r3, #80	; 0x50
 800b5c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b50      	cmp	r3, #80	; 0x50
 800b5ca:	d00a      	beq.n	800b5e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	61bb      	str	r3, [r7, #24]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00d      	beq.n	800b60a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	4613      	mov	r3, r2
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	68b9      	ldr	r1, [r7, #8]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f83f 	bl	800b688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3730      	adds	r7, #48	; 0x30
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	; 0x28
 800b618:	af02      	add	r7, sp, #8
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	4613      	mov	r3, r2
 800b620:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	613b      	str	r3, [r7, #16]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	fb02 f303 	mul.w	r3, r2, r3
 800b646:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	3350      	adds	r3, #80	; 0x50
 800b64c:	4618      	mov	r0, r3
 800b64e:	f002 ff9b 	bl	800e588 <pvPortMalloc>
 800b652:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d011      	beq.n	800b67e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	3350      	adds	r3, #80	; 0x50
 800b662:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b66c:	79fa      	ldrb	r2, [r7, #7]
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	4613      	mov	r3, r2
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f805 	bl	800b688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b67e:	69bb      	ldr	r3, [r7, #24]
	}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d103      	bne.n	800b6a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	e002      	b.n	800b6aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	69b8      	ldr	r0, [r7, #24]
 800b6ba:	f7ff fecb 	bl	800b454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	78fa      	ldrb	r2, [r7, #3]
 800b6c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00e      	beq.n	800b6fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f90b 	bl	800b910 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b702:	b580      	push	{r7, lr}
 800b704:	b086      	sub	sp, #24
 800b706:	af00      	add	r7, sp, #0
 800b708:	4603      	mov	r3, r0
 800b70a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b70c:	2301      	movs	r3, #1
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	461a      	mov	r2, r3
 800b718:	6939      	ldr	r1, [r7, #16]
 800b71a:	6978      	ldr	r0, [r7, #20]
 800b71c:	f7ff ff7a 	bl	800b614 <xQueueGenericCreate>
 800b720:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f7ff ffd3 	bl	800b6ce <prvInitialiseMutex>

		return xNewQueue;
 800b728:	68fb      	ldr	r3, [r7, #12]
	}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3718      	adds	r7, #24
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b732:	b580      	push	{r7, lr}
 800b734:	b088      	sub	sp, #32
 800b736:	af02      	add	r7, sp, #8
 800b738:	4603      	mov	r3, r0
 800b73a:	6039      	str	r1, [r7, #0]
 800b73c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b73e:	2301      	movs	r3, #1
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	2300      	movs	r3, #0
 800b744:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2200      	movs	r2, #0
 800b74e:	6939      	ldr	r1, [r7, #16]
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f7ff fee7 	bl	800b524 <xQueueGenericCreateStatic>
 800b756:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff ffb8 	bl	800b6ce <prvInitialiseMutex>

		return xNewQueue;
 800b75e:	68fb      	ldr	r3, [r7, #12]
	}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b768:	b590      	push	{r4, r7, lr}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	60fb      	str	r3, [r7, #12]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	689c      	ldr	r4, [r3, #8]
 800b794:	f001 fd6a 	bl	800d26c <xTaskGetCurrentTaskHandle>
 800b798:	4603      	mov	r3, r0
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d111      	bne.n	800b7c2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	1e5a      	subs	r2, r3, #1
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d105      	bne.n	800b7bc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	6938      	ldr	r0, [r7, #16]
 800b7b8:	f000 f8aa 	bl	800b910 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	e001      	b.n	800b7c6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b7c6:	697b      	ldr	r3, [r7, #20]
	}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd90      	pop	{r4, r7, pc}

0800b7d0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60fb      	str	r3, [r7, #12]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	689c      	ldr	r4, [r3, #8]
 800b7fe:	f001 fd35 	bl	800d26c <xTaskGetCurrentTaskHandle>
 800b802:	4603      	mov	r3, r0
 800b804:	429c      	cmp	r4, r3
 800b806:	d107      	bne.n	800b818 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b812:	2301      	movs	r3, #1
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	e00c      	b.n	800b832 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6938      	ldr	r0, [r7, #16]
 800b81c:	f000 fb7e 	bl	800bf1c <xQueueSemaphoreTake>
 800b820:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b832:	697b      	ldr	r3, [r7, #20]
	}
 800b834:	4618      	mov	r0, r3
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd90      	pop	{r4, r7, pc}

0800b83c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08a      	sub	sp, #40	; 0x28
 800b840:	af02      	add	r7, sp, #8
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	61bb      	str	r3, [r7, #24]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d90a      	bls.n	800b882 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	617b      	str	r3, [r7, #20]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b882:	2302      	movs	r3, #2
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f7ff fe49 	bl	800b524 <xQueueGenericCreateStatic>
 800b892:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
	}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3720      	adds	r7, #32
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b086      	sub	sp, #24
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	613b      	str	r3, [r7, #16]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d90a      	bls.n	800b8ee <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	60fb      	str	r3, [r7, #12]
}
 800b8ea:	bf00      	nop
 800b8ec:	e7fe      	b.n	800b8ec <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff fe8e 	bl	800b614 <xQueueGenericCreate>
 800b8f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b906:	697b      	ldr	r3, [r7, #20]
	}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08e      	sub	sp, #56	; 0x38
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b91e:	2300      	movs	r3, #0
 800b920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueGenericSend+0x32>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d103      	bne.n	800b950 <xQueueGenericSend+0x40>
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <xQueueGenericSend+0x44>
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <xQueueGenericSend+0x46>
 800b954:	2300      	movs	r3, #0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10a      	bne.n	800b970 <xQueueGenericSend+0x60>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2b02      	cmp	r3, #2
 800b974:	d103      	bne.n	800b97e <xQueueGenericSend+0x6e>
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <xQueueGenericSend+0x72>
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <xQueueGenericSend+0x74>
 800b982:	2300      	movs	r3, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <xQueueGenericSend+0x8e>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	623b      	str	r3, [r7, #32]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b99e:	f001 fc75 	bl	800d28c <xTaskGetSchedulerState>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <xQueueGenericSend+0x9e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <xQueueGenericSend+0xa2>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueGenericSend+0xa4>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10a      	bne.n	800b9ce <xQueueGenericSend+0xbe>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	61fb      	str	r3, [r7, #28]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ce:	f002 fcb9 	bl	800e344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d302      	bcc.n	800b9e4 <xQueueGenericSend+0xd4>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d129      	bne.n	800ba38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ea:	f000 fc5e 	bl	800c2aa <prvCopyDataToQueue>
 800b9ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d010      	beq.n	800ba1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	3324      	adds	r3, #36	; 0x24
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f001 fa73 	bl	800cee8 <xTaskRemoveFromEventList>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d013      	beq.n	800ba30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba08:	4b3f      	ldr	r3, [pc, #252]	; (800bb08 <xQueueGenericSend+0x1f8>)
 800ba0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba0e:	601a      	str	r2, [r3, #0]
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	e00a      	b.n	800ba30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba20:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <xQueueGenericSend+0x1f8>)
 800ba22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba30:	f002 fcb8 	bl	800e3a4 <vPortExitCritical>
				return pdPASS;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e063      	b.n	800bb00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d103      	bne.n	800ba46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba3e:	f002 fcb1 	bl	800e3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	e05c      	b.n	800bb00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d106      	bne.n	800ba5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba4c:	f107 0314 	add.w	r3, r7, #20
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 faad 	bl	800cfb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba56:	2301      	movs	r3, #1
 800ba58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba5a:	f002 fca3 	bl	800e3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba5e:	f001 f819 	bl	800ca94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba62:	f002 fc6f 	bl	800e344 <vPortEnterCritical>
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba6c:	b25b      	sxtb	r3, r3
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba72:	d103      	bne.n	800ba7c <xQueueGenericSend+0x16c>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba88:	d103      	bne.n	800ba92 <xQueueGenericSend+0x182>
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba92:	f002 fc87 	bl	800e3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba96:	1d3a      	adds	r2, r7, #4
 800ba98:	f107 0314 	add.w	r3, r7, #20
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f001 fa9c 	bl	800cfdc <xTaskCheckForTimeOut>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d124      	bne.n	800baf4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800baaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baac:	f000 fcf5 	bl	800c49a <prvIsQueueFull>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d018      	beq.n	800bae8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	3310      	adds	r3, #16
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	4611      	mov	r1, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f001 f9c2 	bl	800ce48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bac6:	f000 fc80 	bl	800c3ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800baca:	f000 fff1 	bl	800cab0 <xTaskResumeAll>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f47f af7c 	bne.w	800b9ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <xQueueGenericSend+0x1f8>)
 800bad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	e772      	b.n	800b9ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baea:	f000 fc6e 	bl	800c3ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baee:	f000 ffdf 	bl	800cab0 <xTaskResumeAll>
 800baf2:	e76c      	b.n	800b9ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800baf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf6:	f000 fc68 	bl	800c3ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bafa:	f000 ffd9 	bl	800cab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bafe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3738      	adds	r7, #56	; 0x38
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	e000ed04 	.word	0xe000ed04

0800bb0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b090      	sub	sp, #64	; 0x40
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d103      	bne.n	800bb48 <xQueueGenericSendFromISR+0x3c>
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <xQueueGenericSendFromISR+0x40>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e000      	b.n	800bb4e <xQueueGenericSendFromISR+0x42>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d103      	bne.n	800bb76 <xQueueGenericSendFromISR+0x6a>
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <xQueueGenericSendFromISR+0x6e>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e000      	b.n	800bb7c <xQueueGenericSendFromISR+0x70>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10a      	bne.n	800bb96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	623b      	str	r3, [r7, #32]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb96:	f002 fcb7 	bl	800e508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb9a:	f3ef 8211 	mrs	r2, BASEPRI
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	61fa      	str	r2, [r7, #28]
 800bbb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d302      	bcc.n	800bbc8 <xQueueGenericSendFromISR+0xbc>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d12f      	bne.n	800bc28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbde:	f000 fb64 	bl	800c2aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbe2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbea:	d112      	bne.n	800bc12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d016      	beq.n	800bc22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	3324      	adds	r3, #36	; 0x24
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f001 f975 	bl	800cee8 <xTaskRemoveFromEventList>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00e      	beq.n	800bc22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	e007      	b.n	800bc22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc16:	3301      	adds	r3, #1
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	b25a      	sxtb	r2, r3
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc22:	2301      	movs	r3, #1
 800bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc26:	e001      	b.n	800bc2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3740      	adds	r7, #64	; 0x40
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b08e      	sub	sp, #56	; 0x38
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10a      	bne.n	800bc6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	623b      	str	r3, [r7, #32]
}
 800bc68:	bf00      	nop
 800bc6a:	e7fe      	b.n	800bc6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00a      	beq.n	800bc8a <xQueueGiveFromISR+0x48>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	61fb      	str	r3, [r7, #28]
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d103      	bne.n	800bc9a <xQueueGiveFromISR+0x58>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <xQueueGiveFromISR+0x5c>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <xQueueGiveFromISR+0x5e>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <xQueueGiveFromISR+0x78>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	61bb      	str	r3, [r7, #24]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcba:	f002 fc25 	bl	800e508 <vPortValidateInterruptPriority>
	__asm volatile
 800bcbe:	f3ef 8211 	mrs	r2, BASEPRI
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	617a      	str	r2, [r7, #20]
 800bcd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bcd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d22b      	bcs.n	800bd42 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d112      	bne.n	800bd2c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d016      	beq.n	800bd3c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	3324      	adds	r3, #36	; 0x24
 800bd12:	4618      	mov	r0, r3
 800bd14:	f001 f8e8 	bl	800cee8 <xTaskRemoveFromEventList>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00e      	beq.n	800bd3c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00b      	beq.n	800bd3c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2201      	movs	r2, #1
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	e007      	b.n	800bd3c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd30:	3301      	adds	r3, #1
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	b25a      	sxtb	r2, r3
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd40:	e001      	b.n	800bd46 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	637b      	str	r3, [r7, #52]	; 0x34
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f383 8811 	msr	BASEPRI, r3
}
 800bd50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3738      	adds	r7, #56	; 0x38
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08c      	sub	sp, #48	; 0x30
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10a      	bne.n	800bd8c <xQueueReceive+0x30>
	__asm volatile
 800bd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	623b      	str	r3, [r7, #32]
}
 800bd88:	bf00      	nop
 800bd8a:	e7fe      	b.n	800bd8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <xQueueReceive+0x3e>
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <xQueueReceive+0x42>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <xQueueReceive+0x44>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueReceive+0x5e>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	61fb      	str	r3, [r7, #28]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdba:	f001 fa67 	bl	800d28c <xTaskGetSchedulerState>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <xQueueReceive+0x6e>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <xQueueReceive+0x72>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <xQueueReceive+0x74>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10a      	bne.n	800bdea <xQueueReceive+0x8e>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	61bb      	str	r3, [r7, #24]
}
 800bde6:	bf00      	nop
 800bde8:	e7fe      	b.n	800bde8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdea:	f002 faab 	bl	800e344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01f      	beq.n	800be3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfe:	f000 fabe 	bl	800c37e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be04:	1e5a      	subs	r2, r3, #1
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00f      	beq.n	800be32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	3310      	adds	r3, #16
 800be16:	4618      	mov	r0, r3
 800be18:	f001 f866 	bl	800cee8 <xTaskRemoveFromEventList>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be22:	4b3d      	ldr	r3, [pc, #244]	; (800bf18 <xQueueReceive+0x1bc>)
 800be24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be32:	f002 fab7 	bl	800e3a4 <vPortExitCritical>
				return pdPASS;
 800be36:	2301      	movs	r3, #1
 800be38:	e069      	b.n	800bf0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d103      	bne.n	800be48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be40:	f002 fab0 	bl	800e3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be44:	2300      	movs	r3, #0
 800be46:	e062      	b.n	800bf0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d106      	bne.n	800be5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be4e:	f107 0310 	add.w	r3, r7, #16
 800be52:	4618      	mov	r0, r3
 800be54:	f001 f8ac 	bl	800cfb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be58:	2301      	movs	r3, #1
 800be5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be5c:	f002 faa2 	bl	800e3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be60:	f000 fe18 	bl	800ca94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be64:	f002 fa6e 	bl	800e344 <vPortEnterCritical>
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be6e:	b25b      	sxtb	r3, r3
 800be70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be74:	d103      	bne.n	800be7e <xQueueReceive+0x122>
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be84:	b25b      	sxtb	r3, r3
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8a:	d103      	bne.n	800be94 <xQueueReceive+0x138>
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be94:	f002 fa86 	bl	800e3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be98:	1d3a      	adds	r2, r7, #4
 800be9a:	f107 0310 	add.w	r3, r7, #16
 800be9e:	4611      	mov	r1, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 f89b 	bl	800cfdc <xTaskCheckForTimeOut>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d123      	bne.n	800bef4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beae:	f000 fade 	bl	800c46e <prvIsQueueEmpty>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d017      	beq.n	800bee8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	3324      	adds	r3, #36	; 0x24
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4611      	mov	r1, r2
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 ffc1 	bl	800ce48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec8:	f000 fa7f 	bl	800c3ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800becc:	f000 fdf0 	bl	800cab0 <xTaskResumeAll>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d189      	bne.n	800bdea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bed6:	4b10      	ldr	r3, [pc, #64]	; (800bf18 <xQueueReceive+0x1bc>)
 800bed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	e780      	b.n	800bdea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beea:	f000 fa6e 	bl	800c3ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beee:	f000 fddf 	bl	800cab0 <xTaskResumeAll>
 800bef2:	e77a      	b.n	800bdea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef6:	f000 fa68 	bl	800c3ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800befa:	f000 fdd9 	bl	800cab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800befe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf00:	f000 fab5 	bl	800c46e <prvIsQueueEmpty>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f43f af6f 	beq.w	800bdea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3730      	adds	r7, #48	; 0x30
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	e000ed04 	.word	0xe000ed04

0800bf1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	; 0x38
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	623b      	str	r3, [r7, #32]
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	61fb      	str	r3, [r7, #28]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf6c:	f001 f98e 	bl	800d28c <xTaskGetSchedulerState>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <xQueueSemaphoreTake+0x60>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d101      	bne.n	800bf80 <xQueueSemaphoreTake+0x64>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e000      	b.n	800bf82 <xQueueSemaphoreTake+0x66>
 800bf80:	2300      	movs	r3, #0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10a      	bne.n	800bf9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	61bb      	str	r3, [r7, #24]
}
 800bf98:	bf00      	nop
 800bf9a:	e7fe      	b.n	800bf9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf9c:	f002 f9d2 	bl	800e344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d024      	beq.n	800bff6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	1e5a      	subs	r2, r3, #1
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d104      	bne.n	800bfc6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bfbc:	f001 fadc 	bl	800d578 <pvTaskIncrementMutexHeldCount>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00f      	beq.n	800bfee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	3310      	adds	r3, #16
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 ff88 	bl	800cee8 <xTaskRemoveFromEventList>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d007      	beq.n	800bfee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfde:	4b54      	ldr	r3, [pc, #336]	; (800c130 <xQueueSemaphoreTake+0x214>)
 800bfe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfee:	f002 f9d9 	bl	800e3a4 <vPortExitCritical>
				return pdPASS;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e097      	b.n	800c126 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d111      	bne.n	800c020 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00a      	beq.n	800c018 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	617b      	str	r3, [r7, #20]
}
 800c014:	bf00      	nop
 800c016:	e7fe      	b.n	800c016 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c018:	f002 f9c4 	bl	800e3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c01c:	2300      	movs	r3, #0
 800c01e:	e082      	b.n	800c126 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c026:	f107 030c 	add.w	r3, r7, #12
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 ffc0 	bl	800cfb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c030:	2301      	movs	r3, #1
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c034:	f002 f9b6 	bl	800e3a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c038:	f000 fd2c 	bl	800ca94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c03c:	f002 f982 	bl	800e344 <vPortEnterCritical>
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c046:	b25b      	sxtb	r3, r3
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04c:	d103      	bne.n	800c056 <xQueueSemaphoreTake+0x13a>
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c05c:	b25b      	sxtb	r3, r3
 800c05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c062:	d103      	bne.n	800c06c <xQueueSemaphoreTake+0x150>
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c06c:	f002 f99a 	bl	800e3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c070:	463a      	mov	r2, r7
 800c072:	f107 030c 	add.w	r3, r7, #12
 800c076:	4611      	mov	r1, r2
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 ffaf 	bl	800cfdc <xTaskCheckForTimeOut>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d132      	bne.n	800c0ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c086:	f000 f9f2 	bl	800c46e <prvIsQueueEmpty>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d026      	beq.n	800c0de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d109      	bne.n	800c0ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c098:	f002 f954 	bl	800e344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f001 f911 	bl	800d2c8 <xTaskPriorityInherit>
 800c0a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c0a8:	f002 f97c 	bl	800e3a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	3324      	adds	r3, #36	; 0x24
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fec7 	bl	800ce48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0bc:	f000 f985 	bl	800c3ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0c0:	f000 fcf6 	bl	800cab0 <xTaskResumeAll>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f47f af68 	bne.w	800bf9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c0cc:	4b18      	ldr	r3, [pc, #96]	; (800c130 <xQueueSemaphoreTake+0x214>)
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	e75e      	b.n	800bf9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c0de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0e0:	f000 f973 	bl	800c3ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0e4:	f000 fce4 	bl	800cab0 <xTaskResumeAll>
 800c0e8:	e758      	b.n	800bf9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ec:	f000 f96d 	bl	800c3ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0f0:	f000 fcde 	bl	800cab0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f6:	f000 f9ba 	bl	800c46e <prvIsQueueEmpty>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f43f af4d 	beq.w	800bf9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00d      	beq.n	800c124 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c108:	f002 f91c 	bl	800e344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c10c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c10e:	f000 f8b4 	bl	800c27a <prvGetDisinheritPriorityAfterTimeout>
 800c112:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f001 f9aa 	bl	800d474 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c120:	f002 f940 	bl	800e3a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c126:	4618      	mov	r0, r3
 800c128:	3738      	adds	r7, #56	; 0x38
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	; 0x38
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	623b      	str	r3, [r7, #32]
}
 800c15c:	bf00      	nop
 800c15e:	e7fe      	b.n	800c15e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d103      	bne.n	800c16e <xQueueReceiveFromISR+0x3a>
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <xQueueReceiveFromISR+0x3e>
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <xQueueReceiveFromISR+0x40>
 800c172:	2300      	movs	r3, #0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10a      	bne.n	800c18e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	61fb      	str	r3, [r7, #28]
}
 800c18a:	bf00      	nop
 800c18c:	e7fe      	b.n	800c18c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c18e:	f002 f9bb 	bl	800e508 <vPortValidateInterruptPriority>
	__asm volatile
 800c192:	f3ef 8211 	mrs	r2, BASEPRI
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	61ba      	str	r2, [r7, #24]
 800c1a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c1aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d02f      	beq.n	800c21a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1c4:	68b9      	ldr	r1, [r7, #8]
 800c1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1c8:	f000 f8d9 	bl	800c37e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ce:	1e5a      	subs	r2, r3, #1
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c1d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1dc:	d112      	bne.n	800c204 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d016      	beq.n	800c214 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	3310      	adds	r3, #16
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fe7c 	bl	800cee8 <xTaskRemoveFromEventList>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00e      	beq.n	800c214 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00b      	beq.n	800c214 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	e007      	b.n	800c214 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c208:	3301      	adds	r3, #1
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	b25a      	sxtb	r2, r3
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c214:	2301      	movs	r3, #1
 800c216:	637b      	str	r3, [r7, #52]	; 0x34
 800c218:	e001      	b.n	800c21e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	637b      	str	r3, [r7, #52]	; 0x34
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	f383 8811 	msr	BASEPRI, r3
}
 800c228:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3738      	adds	r7, #56	; 0x38
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10a      	bne.n	800c25c <vQueueDelete+0x28>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	60bb      	str	r3, [r7, #8]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f95f 	bl	800c520 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f002 fa57 	bl	800e720 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c27a:	b480      	push	{r7}
 800c27c:	b085      	sub	sp, #20
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c286:	2b00      	cmp	r3, #0
 800c288:	d006      	beq.n	800c298 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	e001      	b.n	800c29c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c298:	2300      	movs	r3, #0
 800c29a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c29c:	68fb      	ldr	r3, [r7, #12]
	}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b086      	sub	sp, #24
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10d      	bne.n	800c2e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d14d      	bne.n	800c36c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f001 f85f 	bl	800d398 <xTaskPriorityDisinherit>
 800c2da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	609a      	str	r2, [r3, #8]
 800c2e2:	e043      	b.n	800c36c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d119      	bne.n	800c31e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6858      	ldr	r0, [r3, #4]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	68b9      	ldr	r1, [r7, #8]
 800c2f6:	f002 fc5c 	bl	800ebb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c302:	441a      	add	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	429a      	cmp	r2, r3
 800c312:	d32b      	bcc.n	800c36c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	605a      	str	r2, [r3, #4]
 800c31c:	e026      	b.n	800c36c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68d8      	ldr	r0, [r3, #12]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c326:	461a      	mov	r2, r3
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	f002 fc42 	bl	800ebb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	425b      	negs	r3, r3
 800c338:	441a      	add	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	68da      	ldr	r2, [r3, #12]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d207      	bcs.n	800c35a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	689a      	ldr	r2, [r3, #8]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c352:	425b      	negs	r3, r3
 800c354:	441a      	add	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d105      	bne.n	800c36c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	3b01      	subs	r3, #1
 800c36a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c374:	697b      	ldr	r3, [r7, #20]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3718      	adds	r7, #24
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d018      	beq.n	800c3c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68da      	ldr	r2, [r3, #12]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	441a      	add	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d303      	bcc.n	800c3b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68d9      	ldr	r1, [r3, #12]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	6838      	ldr	r0, [r7, #0]
 800c3be:	f002 fbf8 	bl	800ebb2 <memcpy>
	}
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3d2:	f001 ffb7 	bl	800e344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3de:	e011      	b.n	800c404 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d012      	beq.n	800c40e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3324      	adds	r3, #36	; 0x24
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 fd7b 	bl	800cee8 <xTaskRemoveFromEventList>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c3f8:	f000 fe52 	bl	800d0a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	b2db      	uxtb	r3, r3
 800c402:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dce9      	bgt.n	800c3e0 <prvUnlockQueue+0x16>
 800c40c:	e000      	b.n	800c410 <prvUnlockQueue+0x46>
					break;
 800c40e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	22ff      	movs	r2, #255	; 0xff
 800c414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c418:	f001 ffc4 	bl	800e3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c41c:	f001 ff92 	bl	800e344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c426:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c428:	e011      	b.n	800c44e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d012      	beq.n	800c458 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3310      	adds	r3, #16
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fd56 	bl	800cee8 <xTaskRemoveFromEventList>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c442:	f000 fe2d 	bl	800d0a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	3b01      	subs	r3, #1
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c44e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c452:	2b00      	cmp	r3, #0
 800c454:	dce9      	bgt.n	800c42a <prvUnlockQueue+0x60>
 800c456:	e000      	b.n	800c45a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c458:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	22ff      	movs	r2, #255	; 0xff
 800c45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c462:	f001 ff9f 	bl	800e3a4 <vPortExitCritical>
}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c476:	f001 ff65 	bl	800e344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d102      	bne.n	800c488 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c482:	2301      	movs	r3, #1
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	e001      	b.n	800c48c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c48c:	f001 ff8a 	bl	800e3a4 <vPortExitCritical>

	return xReturn;
 800c490:	68fb      	ldr	r3, [r7, #12]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4a2:	f001 ff4f 	bl	800e344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d102      	bne.n	800c4b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	60fb      	str	r3, [r7, #12]
 800c4b6:	e001      	b.n	800c4bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4bc:	f001 ff72 	bl	800e3a4 <vPortExitCritical>

	return xReturn;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
	...

0800c4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	e014      	b.n	800c506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4dc:	4a0f      	ldr	r2, [pc, #60]	; (800c51c <vQueueAddToRegistry+0x50>)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10b      	bne.n	800c500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4e8:	490c      	ldr	r1, [pc, #48]	; (800c51c <vQueueAddToRegistry+0x50>)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4f2:	4a0a      	ldr	r2, [pc, #40]	; (800c51c <vQueueAddToRegistry+0x50>)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4413      	add	r3, r2
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c4fe:	e006      	b.n	800c50e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3301      	adds	r3, #1
 800c504:	60fb      	str	r3, [r7, #12]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2b07      	cmp	r3, #7
 800c50a:	d9e7      	bls.n	800c4dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20000f54 	.word	0x20000f54

0800c520 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	e016      	b.n	800c55c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c52e:	4a10      	ldr	r2, [pc, #64]	; (800c570 <vQueueUnregisterQueue+0x50>)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	4413      	add	r3, r2
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d10b      	bne.n	800c556 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c53e:	4a0c      	ldr	r2, [pc, #48]	; (800c570 <vQueueUnregisterQueue+0x50>)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2100      	movs	r1, #0
 800c544:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c548:	4a09      	ldr	r2, [pc, #36]	; (800c570 <vQueueUnregisterQueue+0x50>)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4413      	add	r3, r2
 800c550:	2200      	movs	r2, #0
 800c552:	605a      	str	r2, [r3, #4]
				break;
 800c554:	e006      	b.n	800c564 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b07      	cmp	r3, #7
 800c560:	d9e5      	bls.n	800c52e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20000f54 	.word	0x20000f54

0800c574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c584:	f001 fede 	bl	800e344 <vPortEnterCritical>
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c58e:	b25b      	sxtb	r3, r3
 800c590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c594:	d103      	bne.n	800c59e <vQueueWaitForMessageRestricted+0x2a>
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a4:	b25b      	sxtb	r3, r3
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d103      	bne.n	800c5b4 <vQueueWaitForMessageRestricted+0x40>
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b4:	f001 fef6 	bl	800e3a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	3324      	adds	r3, #36	; 0x24
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 fc61 	bl	800ce90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	f7ff fefb 	bl	800c3ca <prvUnlockQueue>
	}
 800c5d4:	bf00      	nop
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08e      	sub	sp, #56	; 0x38
 800c5e0:	af04      	add	r7, sp, #16
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	623b      	str	r3, [r7, #32]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <xTaskCreateStatic+0x46>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	61fb      	str	r3, [r7, #28]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c622:	23bc      	movs	r3, #188	; 0xbc
 800c624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2bbc      	cmp	r3, #188	; 0xbc
 800c62a:	d00a      	beq.n	800c642 <xTaskCreateStatic+0x66>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	61bb      	str	r3, [r7, #24]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01e      	beq.n	800c688 <xTaskCreateStatic+0xac>
 800c64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d01b      	beq.n	800c688 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c658:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	2202      	movs	r2, #2
 800c65e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c662:	2300      	movs	r3, #0
 800c664:	9303      	str	r3, [sp, #12]
 800c666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c668:	9302      	str	r3, [sp, #8]
 800c66a:	f107 0314 	add.w	r3, r7, #20
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 f850 	bl	800c720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c682:	f000 f8f3 	bl	800c86c <prvAddNewTaskToReadyList>
 800c686:	e001      	b.n	800c68c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c688:	2300      	movs	r3, #0
 800c68a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c68c:	697b      	ldr	r3, [r7, #20]
	}
 800c68e:	4618      	mov	r0, r3
 800c690:	3728      	adds	r7, #40	; 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c696:	b580      	push	{r7, lr}
 800c698:	b08c      	sub	sp, #48	; 0x30
 800c69a:	af04      	add	r7, sp, #16
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	603b      	str	r3, [r7, #0]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6a6:	88fb      	ldrh	r3, [r7, #6]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f001 ff6c 	bl	800e588 <pvPortMalloc>
 800c6b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00e      	beq.n	800c6d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6b8:	20bc      	movs	r0, #188	; 0xbc
 800c6ba:	f001 ff65 	bl	800e588 <pvPortMalloc>
 800c6be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c6cc:	e005      	b.n	800c6da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6ce:	6978      	ldr	r0, [r7, #20]
 800c6d0:	f002 f826 	bl	800e720 <vPortFree>
 800c6d4:	e001      	b.n	800c6da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d017      	beq.n	800c710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6e8:	88fa      	ldrh	r2, [r7, #6]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9303      	str	r3, [sp, #12]
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	9302      	str	r3, [sp, #8]
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	68b9      	ldr	r1, [r7, #8]
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f000 f80e 	bl	800c720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c704:	69f8      	ldr	r0, [r7, #28]
 800c706:	f000 f8b1 	bl	800c86c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c70a:	2301      	movs	r3, #1
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	e002      	b.n	800c716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c710:	f04f 33ff 	mov.w	r3, #4294967295
 800c714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c716:	69bb      	ldr	r3, [r7, #24]
	}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	461a      	mov	r2, r3
 800c738:	21a5      	movs	r1, #165	; 0xa5
 800c73a:	f002 fa48 	bl	800ebce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c748:	3b01      	subs	r3, #1
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	f023 0307 	bic.w	r3, r3, #7
 800c756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	f003 0307 	and.w	r3, r3, #7
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00a      	beq.n	800c778 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	617b      	str	r3, [r7, #20]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01f      	beq.n	800c7be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c77e:	2300      	movs	r3, #0
 800c780:	61fb      	str	r3, [r7, #28]
 800c782:	e012      	b.n	800c7aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	4413      	add	r3, r2
 800c78a:	7819      	ldrb	r1, [r3, #0]
 800c78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	4413      	add	r3, r2
 800c792:	3334      	adds	r3, #52	; 0x34
 800c794:	460a      	mov	r2, r1
 800c796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	4413      	add	r3, r2
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d006      	beq.n	800c7b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	61fb      	str	r3, [r7, #28]
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	2b0f      	cmp	r3, #15
 800c7ae:	d9e9      	bls.n	800c784 <prvInitialiseNewTask+0x64>
 800c7b0:	e000      	b.n	800c7b4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c7b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7bc:	e003      	b.n	800c7c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	2b37      	cmp	r3, #55	; 0x37
 800c7ca:	d901      	bls.n	800c7d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7cc:	2337      	movs	r3, #55	; 0x37
 800c7ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	2200      	movs	r2, #0
 800c7e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fe fda0 	bl	800b32c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	3318      	adds	r3, #24
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fd9b 	bl	800b32c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	2200      	movs	r2, #0
 800c810:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c816:	2200      	movs	r2, #0
 800c818:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	3354      	adds	r3, #84	; 0x54
 800c820:	2260      	movs	r2, #96	; 0x60
 800c822:	2100      	movs	r1, #0
 800c824:	4618      	mov	r0, r3
 800c826:	f002 f9d2 	bl	800ebce <memset>
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	4a0c      	ldr	r2, [pc, #48]	; (800c860 <prvInitialiseNewTask+0x140>)
 800c82e:	659a      	str	r2, [r3, #88]	; 0x58
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	4a0c      	ldr	r2, [pc, #48]	; (800c864 <prvInitialiseNewTask+0x144>)
 800c834:	65da      	str	r2, [r3, #92]	; 0x5c
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	4a0b      	ldr	r2, [pc, #44]	; (800c868 <prvInitialiseNewTask+0x148>)
 800c83a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	69b8      	ldr	r0, [r7, #24]
 800c842:	f001 fc51 	bl	800e0e8 <pxPortInitialiseStack>
 800c846:	4602      	mov	r2, r0
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c856:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c858:	bf00      	nop
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	08013b60 	.word	0x08013b60
 800c864:	08013b80 	.word	0x08013b80
 800c868:	08013b40 	.word	0x08013b40

0800c86c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c874:	f001 fd66 	bl	800e344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c878:	4b2d      	ldr	r3, [pc, #180]	; (800c930 <prvAddNewTaskToReadyList+0xc4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3301      	adds	r3, #1
 800c87e:	4a2c      	ldr	r2, [pc, #176]	; (800c930 <prvAddNewTaskToReadyList+0xc4>)
 800c880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c882:	4b2c      	ldr	r3, [pc, #176]	; (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d109      	bne.n	800c89e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c88a:	4a2a      	ldr	r2, [pc, #168]	; (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c890:	4b27      	ldr	r3, [pc, #156]	; (800c930 <prvAddNewTaskToReadyList+0xc4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d110      	bne.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c898:	f000 fc26 	bl	800d0e8 <prvInitialiseTaskLists>
 800c89c:	e00d      	b.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c89e:	4b26      	ldr	r3, [pc, #152]	; (800c938 <prvAddNewTaskToReadyList+0xcc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d109      	bne.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8a6:	4b23      	ldr	r3, [pc, #140]	; (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d802      	bhi.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8b4:	4a1f      	ldr	r2, [pc, #124]	; (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8ba:	4b20      	ldr	r3, [pc, #128]	; (800c93c <prvAddNewTaskToReadyList+0xd0>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	4a1e      	ldr	r2, [pc, #120]	; (800c93c <prvAddNewTaskToReadyList+0xd0>)
 800c8c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c8c4:	4b1d      	ldr	r3, [pc, #116]	; (800c93c <prvAddNewTaskToReadyList+0xd0>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d0:	4b1b      	ldr	r3, [pc, #108]	; (800c940 <prvAddNewTaskToReadyList+0xd4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d903      	bls.n	800c8e0 <prvAddNewTaskToReadyList+0x74>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	4a18      	ldr	r2, [pc, #96]	; (800c940 <prvAddNewTaskToReadyList+0xd4>)
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4a15      	ldr	r2, [pc, #84]	; (800c944 <prvAddNewTaskToReadyList+0xd8>)
 800c8ee:	441a      	add	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe fd25 	bl	800b346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8fc:	f001 fd52 	bl	800e3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c900:	4b0d      	ldr	r3, [pc, #52]	; (800c938 <prvAddNewTaskToReadyList+0xcc>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00e      	beq.n	800c926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c912:	429a      	cmp	r2, r3
 800c914:	d207      	bcs.n	800c926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c916:	4b0c      	ldr	r3, [pc, #48]	; (800c948 <prvAddNewTaskToReadyList+0xdc>)
 800c918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20001468 	.word	0x20001468
 800c934:	20000f94 	.word	0x20000f94
 800c938:	20001474 	.word	0x20001474
 800c93c:	20001484 	.word	0x20001484
 800c940:	20001470 	.word	0x20001470
 800c944:	20000f98 	.word	0x20000f98
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d017      	beq.n	800c98e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c95e:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <vTaskDelay+0x60>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00a      	beq.n	800c97c <vTaskDelay+0x30>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	60bb      	str	r3, [r7, #8]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c97c:	f000 f88a 	bl	800ca94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c980:	2100      	movs	r1, #0
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f80e 	bl	800d9a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c988:	f000 f892 	bl	800cab0 <xTaskResumeAll>
 800c98c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d107      	bne.n	800c9a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c994:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <vTaskDelay+0x64>)
 800c996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9a4:	bf00      	nop
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	20001490 	.word	0x20001490
 800c9b0:	e000ed04 	.word	0xe000ed04

0800c9b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08a      	sub	sp, #40	; 0x28
 800c9b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9c2:	463a      	mov	r2, r7
 800c9c4:	1d39      	adds	r1, r7, #4
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fc5a 	bl	800b284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	9202      	str	r2, [sp, #8]
 800c9d8:	9301      	str	r3, [sp, #4]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	460a      	mov	r2, r1
 800c9e2:	4924      	ldr	r1, [pc, #144]	; (800ca74 <vTaskStartScheduler+0xc0>)
 800c9e4:	4824      	ldr	r0, [pc, #144]	; (800ca78 <vTaskStartScheduler+0xc4>)
 800c9e6:	f7ff fdf9 	bl	800c5dc <xTaskCreateStatic>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4a23      	ldr	r2, [pc, #140]	; (800ca7c <vTaskStartScheduler+0xc8>)
 800c9ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9f0:	4b22      	ldr	r3, [pc, #136]	; (800ca7c <vTaskStartScheduler+0xc8>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	e001      	b.n	800ca02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d102      	bne.n	800ca0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca08:	f001 f820 	bl	800da4c <xTimerCreateTimerTask>
 800ca0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d11b      	bne.n	800ca4c <vTaskStartScheduler+0x98>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	613b      	str	r3, [r7, #16]
}
 800ca26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca28:	4b15      	ldr	r3, [pc, #84]	; (800ca80 <vTaskStartScheduler+0xcc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3354      	adds	r3, #84	; 0x54
 800ca2e:	4a15      	ldr	r2, [pc, #84]	; (800ca84 <vTaskStartScheduler+0xd0>)
 800ca30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca32:	4b15      	ldr	r3, [pc, #84]	; (800ca88 <vTaskStartScheduler+0xd4>)
 800ca34:	f04f 32ff 	mov.w	r2, #4294967295
 800ca38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca3a:	4b14      	ldr	r3, [pc, #80]	; (800ca8c <vTaskStartScheduler+0xd8>)
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca40:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <vTaskStartScheduler+0xdc>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca46:	f001 fbdb 	bl	800e200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca4a:	e00e      	b.n	800ca6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca52:	d10a      	bne.n	800ca6a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	60fb      	str	r3, [r7, #12]
}
 800ca66:	bf00      	nop
 800ca68:	e7fe      	b.n	800ca68 <vTaskStartScheduler+0xb4>
}
 800ca6a:	bf00      	nop
 800ca6c:	3718      	adds	r7, #24
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	08013914 	.word	0x08013914
 800ca78:	0800d0b9 	.word	0x0800d0b9
 800ca7c:	2000148c 	.word	0x2000148c
 800ca80:	20000f94 	.word	0x20000f94
 800ca84:	20000018 	.word	0x20000018
 800ca88:	20001488 	.word	0x20001488
 800ca8c:	20001474 	.word	0x20001474
 800ca90:	2000146c 	.word	0x2000146c

0800ca94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca98:	4b04      	ldr	r3, [pc, #16]	; (800caac <vTaskSuspendAll+0x18>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	4a03      	ldr	r2, [pc, #12]	; (800caac <vTaskSuspendAll+0x18>)
 800caa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800caa2:	bf00      	nop
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	20001490 	.word	0x20001490

0800cab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800caba:	2300      	movs	r3, #0
 800cabc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cabe:	4b42      	ldr	r3, [pc, #264]	; (800cbc8 <xTaskResumeAll+0x118>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10a      	bne.n	800cadc <xTaskResumeAll+0x2c>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	603b      	str	r3, [r7, #0]
}
 800cad8:	bf00      	nop
 800cada:	e7fe      	b.n	800cada <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cadc:	f001 fc32 	bl	800e344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cae0:	4b39      	ldr	r3, [pc, #228]	; (800cbc8 <xTaskResumeAll+0x118>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	3b01      	subs	r3, #1
 800cae6:	4a38      	ldr	r2, [pc, #224]	; (800cbc8 <xTaskResumeAll+0x118>)
 800cae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caea:	4b37      	ldr	r3, [pc, #220]	; (800cbc8 <xTaskResumeAll+0x118>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d162      	bne.n	800cbb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800caf2:	4b36      	ldr	r3, [pc, #216]	; (800cbcc <xTaskResumeAll+0x11c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d05e      	beq.n	800cbb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cafa:	e02f      	b.n	800cb5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cafc:	4b34      	ldr	r3, [pc, #208]	; (800cbd0 <xTaskResumeAll+0x120>)
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3318      	adds	r3, #24
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fe fc79 	bl	800b400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3304      	adds	r3, #4
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fc74 	bl	800b400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4b2d      	ldr	r3, [pc, #180]	; (800cbd4 <xTaskResumeAll+0x124>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d903      	bls.n	800cb2c <xTaskResumeAll+0x7c>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb28:	4a2a      	ldr	r2, [pc, #168]	; (800cbd4 <xTaskResumeAll+0x124>)
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	4613      	mov	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4a27      	ldr	r2, [pc, #156]	; (800cbd8 <xTaskResumeAll+0x128>)
 800cb3a:	441a      	add	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7fe fbff 	bl	800b346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4c:	4b23      	ldr	r3, [pc, #140]	; (800cbdc <xTaskResumeAll+0x12c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d302      	bcc.n	800cb5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb56:	4b22      	ldr	r3, [pc, #136]	; (800cbe0 <xTaskResumeAll+0x130>)
 800cb58:	2201      	movs	r2, #1
 800cb5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	; (800cbd0 <xTaskResumeAll+0x120>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1cb      	bne.n	800cafc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb6a:	f000 fb5f 	bl	800d22c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb6e:	4b1d      	ldr	r3, [pc, #116]	; (800cbe4 <xTaskResumeAll+0x134>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d010      	beq.n	800cb9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb7a:	f000 f847 	bl	800cc0c <xTaskIncrementTick>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb84:	4b16      	ldr	r3, [pc, #88]	; (800cbe0 <xTaskResumeAll+0x130>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f1      	bne.n	800cb7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb96:	4b13      	ldr	r3, [pc, #76]	; (800cbe4 <xTaskResumeAll+0x134>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb9c:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <xTaskResumeAll+0x130>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d009      	beq.n	800cbb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cba4:	2301      	movs	r3, #1
 800cba6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cba8:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <xTaskResumeAll+0x138>)
 800cbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbae:	601a      	str	r2, [r3, #0]
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbb8:	f001 fbf4 	bl	800e3a4 <vPortExitCritical>

	return xAlreadyYielded;
 800cbbc:	68bb      	ldr	r3, [r7, #8]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20001490 	.word	0x20001490
 800cbcc:	20001468 	.word	0x20001468
 800cbd0:	20001428 	.word	0x20001428
 800cbd4:	20001470 	.word	0x20001470
 800cbd8:	20000f98 	.word	0x20000f98
 800cbdc:	20000f94 	.word	0x20000f94
 800cbe0:	2000147c 	.word	0x2000147c
 800cbe4:	20001478 	.word	0x20001478
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbf2:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <xTaskGetTickCount+0x1c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbf8:	687b      	ldr	r3, [r7, #4]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	2000146c 	.word	0x2000146c

0800cc0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc16:	4b4f      	ldr	r3, [pc, #316]	; (800cd54 <xTaskIncrementTick+0x148>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f040 808f 	bne.w	800cd3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc20:	4b4d      	ldr	r3, [pc, #308]	; (800cd58 <xTaskIncrementTick+0x14c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc28:	4a4b      	ldr	r2, [pc, #300]	; (800cd58 <xTaskIncrementTick+0x14c>)
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d120      	bne.n	800cc76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc34:	4b49      	ldr	r3, [pc, #292]	; (800cd5c <xTaskIncrementTick+0x150>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00a      	beq.n	800cc54 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	603b      	str	r3, [r7, #0]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <xTaskIncrementTick+0x46>
 800cc54:	4b41      	ldr	r3, [pc, #260]	; (800cd5c <xTaskIncrementTick+0x150>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	4b41      	ldr	r3, [pc, #260]	; (800cd60 <xTaskIncrementTick+0x154>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a3f      	ldr	r2, [pc, #252]	; (800cd5c <xTaskIncrementTick+0x150>)
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	4a3f      	ldr	r2, [pc, #252]	; (800cd60 <xTaskIncrementTick+0x154>)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	4b3e      	ldr	r3, [pc, #248]	; (800cd64 <xTaskIncrementTick+0x158>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	4a3d      	ldr	r2, [pc, #244]	; (800cd64 <xTaskIncrementTick+0x158>)
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	f000 fadb 	bl	800d22c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc76:	4b3c      	ldr	r3, [pc, #240]	; (800cd68 <xTaskIncrementTick+0x15c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d349      	bcc.n	800cd14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc80:	4b36      	ldr	r3, [pc, #216]	; (800cd5c <xTaskIncrementTick+0x150>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d104      	bne.n	800cc94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8a:	4b37      	ldr	r3, [pc, #220]	; (800cd68 <xTaskIncrementTick+0x15c>)
 800cc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc90:	601a      	str	r2, [r3, #0]
					break;
 800cc92:	e03f      	b.n	800cd14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc94:	4b31      	ldr	r3, [pc, #196]	; (800cd5c <xTaskIncrementTick+0x150>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d203      	bcs.n	800ccb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccac:	4a2e      	ldr	r2, [pc, #184]	; (800cd68 <xTaskIncrementTick+0x15c>)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccb2:	e02f      	b.n	800cd14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fe fba1 	bl	800b400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d004      	beq.n	800ccd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	3318      	adds	r3, #24
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe fb98 	bl	800b400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd4:	4b25      	ldr	r3, [pc, #148]	; (800cd6c <xTaskIncrementTick+0x160>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d903      	bls.n	800cce4 <xTaskIncrementTick+0xd8>
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce0:	4a22      	ldr	r2, [pc, #136]	; (800cd6c <xTaskIncrementTick+0x160>)
 800cce2:	6013      	str	r3, [r2, #0]
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4a1f      	ldr	r2, [pc, #124]	; (800cd70 <xTaskIncrementTick+0x164>)
 800ccf2:	441a      	add	r2, r3
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	f7fe fb23 	bl	800b346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd04:	4b1b      	ldr	r3, [pc, #108]	; (800cd74 <xTaskIncrementTick+0x168>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d3b8      	bcc.n	800cc80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd12:	e7b5      	b.n	800cc80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd14:	4b17      	ldr	r3, [pc, #92]	; (800cd74 <xTaskIncrementTick+0x168>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1a:	4915      	ldr	r1, [pc, #84]	; (800cd70 <xTaskIncrementTick+0x164>)
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4413      	add	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	440b      	add	r3, r1
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d901      	bls.n	800cd30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd30:	4b11      	ldr	r3, [pc, #68]	; (800cd78 <xTaskIncrementTick+0x16c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	617b      	str	r3, [r7, #20]
 800cd3c:	e004      	b.n	800cd48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd3e:	4b0f      	ldr	r3, [pc, #60]	; (800cd7c <xTaskIncrementTick+0x170>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	4a0d      	ldr	r2, [pc, #52]	; (800cd7c <xTaskIncrementTick+0x170>)
 800cd46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd48:	697b      	ldr	r3, [r7, #20]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	20001490 	.word	0x20001490
 800cd58:	2000146c 	.word	0x2000146c
 800cd5c:	20001420 	.word	0x20001420
 800cd60:	20001424 	.word	0x20001424
 800cd64:	20001480 	.word	0x20001480
 800cd68:	20001488 	.word	0x20001488
 800cd6c:	20001470 	.word	0x20001470
 800cd70:	20000f98 	.word	0x20000f98
 800cd74:	20000f94 	.word	0x20000f94
 800cd78:	2000147c 	.word	0x2000147c
 800cd7c:	20001478 	.word	0x20001478

0800cd80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd86:	4b2a      	ldr	r3, [pc, #168]	; (800ce30 <vTaskSwitchContext+0xb0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd8e:	4b29      	ldr	r3, [pc, #164]	; (800ce34 <vTaskSwitchContext+0xb4>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd94:	e046      	b.n	800ce24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd96:	4b27      	ldr	r3, [pc, #156]	; (800ce34 <vTaskSwitchContext+0xb4>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd9c:	4b26      	ldr	r3, [pc, #152]	; (800ce38 <vTaskSwitchContext+0xb8>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	60fb      	str	r3, [r7, #12]
 800cda2:	e010      	b.n	800cdc6 <vTaskSwitchContext+0x46>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10a      	bne.n	800cdc0 <vTaskSwitchContext+0x40>
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	607b      	str	r3, [r7, #4]
}
 800cdbc:	bf00      	nop
 800cdbe:	e7fe      	b.n	800cdbe <vTaskSwitchContext+0x3e>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	491d      	ldr	r1, [pc, #116]	; (800ce3c <vTaskSwitchContext+0xbc>)
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	440b      	add	r3, r1
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0e4      	beq.n	800cda4 <vTaskSwitchContext+0x24>
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	4613      	mov	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4a15      	ldr	r2, [pc, #84]	; (800ce3c <vTaskSwitchContext+0xbc>)
 800cde6:	4413      	add	r3, r2
 800cde8:	60bb      	str	r3, [r7, #8]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	605a      	str	r2, [r3, #4]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	3308      	adds	r3, #8
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d104      	bne.n	800ce0a <vTaskSwitchContext+0x8a>
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	605a      	str	r2, [r3, #4]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	4a0b      	ldr	r2, [pc, #44]	; (800ce40 <vTaskSwitchContext+0xc0>)
 800ce12:	6013      	str	r3, [r2, #0]
 800ce14:	4a08      	ldr	r2, [pc, #32]	; (800ce38 <vTaskSwitchContext+0xb8>)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce1a:	4b09      	ldr	r3, [pc, #36]	; (800ce40 <vTaskSwitchContext+0xc0>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	3354      	adds	r3, #84	; 0x54
 800ce20:	4a08      	ldr	r2, [pc, #32]	; (800ce44 <vTaskSwitchContext+0xc4>)
 800ce22:	6013      	str	r3, [r2, #0]
}
 800ce24:	bf00      	nop
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	20001490 	.word	0x20001490
 800ce34:	2000147c 	.word	0x2000147c
 800ce38:	20001470 	.word	0x20001470
 800ce3c:	20000f98 	.word	0x20000f98
 800ce40:	20000f94 	.word	0x20000f94
 800ce44:	20000018 	.word	0x20000018

0800ce48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	60fb      	str	r3, [r7, #12]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce6e:	4b07      	ldr	r3, [pc, #28]	; (800ce8c <vTaskPlaceOnEventList+0x44>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3318      	adds	r3, #24
 800ce74:	4619      	mov	r1, r3
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7fe fa89 	bl	800b38e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	6838      	ldr	r0, [r7, #0]
 800ce80:	f000 fd90 	bl	800d9a4 <prvAddCurrentTaskToDelayedList>
}
 800ce84:	bf00      	nop
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	20000f94 	.word	0x20000f94

0800ce90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10a      	bne.n	800ceb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	617b      	str	r3, [r7, #20]
}
 800ceb4:	bf00      	nop
 800ceb6:	e7fe      	b.n	800ceb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3318      	adds	r3, #24
 800cebe:	4619      	mov	r1, r3
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7fe fa40 	bl	800b346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cecc:	f04f 33ff 	mov.w	r3, #4294967295
 800ced0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	68b8      	ldr	r0, [r7, #8]
 800ced6:	f000 fd65 	bl	800d9a4 <prvAddCurrentTaskToDelayedList>
	}
 800ceda:	bf00      	nop
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	20000f94 	.word	0x20000f94

0800cee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10a      	bne.n	800cf14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	60fb      	str	r3, [r7, #12]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	3318      	adds	r3, #24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe fa71 	bl	800b400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf1e:	4b1e      	ldr	r3, [pc, #120]	; (800cf98 <xTaskRemoveFromEventList+0xb0>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d11d      	bne.n	800cf62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	3304      	adds	r3, #4
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe fa68 	bl	800b400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf34:	4b19      	ldr	r3, [pc, #100]	; (800cf9c <xTaskRemoveFromEventList+0xb4>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d903      	bls.n	800cf44 <xTaskRemoveFromEventList+0x5c>
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	4a16      	ldr	r2, [pc, #88]	; (800cf9c <xTaskRemoveFromEventList+0xb4>)
 800cf42:	6013      	str	r3, [r2, #0]
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf48:	4613      	mov	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4413      	add	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4a13      	ldr	r2, [pc, #76]	; (800cfa0 <xTaskRemoveFromEventList+0xb8>)
 800cf52:	441a      	add	r2, r3
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	3304      	adds	r3, #4
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	f7fe f9f3 	bl	800b346 <vListInsertEnd>
 800cf60:	e005      	b.n	800cf6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	3318      	adds	r3, #24
 800cf66:	4619      	mov	r1, r3
 800cf68:	480e      	ldr	r0, [pc, #56]	; (800cfa4 <xTaskRemoveFromEventList+0xbc>)
 800cf6a:	f7fe f9ec 	bl	800b346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf72:	4b0d      	ldr	r3, [pc, #52]	; (800cfa8 <xTaskRemoveFromEventList+0xc0>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d905      	bls.n	800cf88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <xTaskRemoveFromEventList+0xc4>)
 800cf82:	2201      	movs	r2, #1
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	e001      	b.n	800cf8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf8c:	697b      	ldr	r3, [r7, #20]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20001490 	.word	0x20001490
 800cf9c:	20001470 	.word	0x20001470
 800cfa0:	20000f98 	.word	0x20000f98
 800cfa4:	20001428 	.word	0x20001428
 800cfa8:	20000f94 	.word	0x20000f94
 800cfac:	2000147c 	.word	0x2000147c

0800cfb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfb8:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <vTaskInternalSetTimeOutState+0x24>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <vTaskInternalSetTimeOutState+0x28>)
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	605a      	str	r2, [r3, #4]
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	20001480 	.word	0x20001480
 800cfd8:	2000146c 	.word	0x2000146c

0800cfdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10a      	bne.n	800d002 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	613b      	str	r3, [r7, #16]
}
 800cffe:	bf00      	nop
 800d000:	e7fe      	b.n	800d000 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10a      	bne.n	800d01e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	60fb      	str	r3, [r7, #12]
}
 800d01a:	bf00      	nop
 800d01c:	e7fe      	b.n	800d01c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d01e:	f001 f991 	bl	800e344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d022:	4b1d      	ldr	r3, [pc, #116]	; (800d098 <xTaskCheckForTimeOut+0xbc>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	69ba      	ldr	r2, [r7, #24]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03a:	d102      	bne.n	800d042 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d03c:	2300      	movs	r3, #0
 800d03e:	61fb      	str	r3, [r7, #28]
 800d040:	e023      	b.n	800d08a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	4b15      	ldr	r3, [pc, #84]	; (800d09c <xTaskCheckForTimeOut+0xc0>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d007      	beq.n	800d05e <xTaskCheckForTimeOut+0x82>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	69ba      	ldr	r2, [r7, #24]
 800d054:	429a      	cmp	r2, r3
 800d056:	d302      	bcc.n	800d05e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d058:	2301      	movs	r3, #1
 800d05a:	61fb      	str	r3, [r7, #28]
 800d05c:	e015      	b.n	800d08a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	429a      	cmp	r2, r3
 800d066:	d20b      	bcs.n	800d080 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	1ad2      	subs	r2, r2, r3
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff ff9b 	bl	800cfb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d07a:	2300      	movs	r3, #0
 800d07c:	61fb      	str	r3, [r7, #28]
 800d07e:	e004      	b.n	800d08a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d086:	2301      	movs	r3, #1
 800d088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d08a:	f001 f98b 	bl	800e3a4 <vPortExitCritical>

	return xReturn;
 800d08e:	69fb      	ldr	r3, [r7, #28]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	2000146c 	.word	0x2000146c
 800d09c:	20001480 	.word	0x20001480

0800d0a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0a4:	4b03      	ldr	r3, [pc, #12]	; (800d0b4 <vTaskMissedYield+0x14>)
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	2000147c 	.word	0x2000147c

0800d0b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0c0:	f000 f852 	bl	800d168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0c4:	4b06      	ldr	r3, [pc, #24]	; (800d0e0 <prvIdleTask+0x28>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d9f9      	bls.n	800d0c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0cc:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <prvIdleTask+0x2c>)
 800d0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0dc:	e7f0      	b.n	800d0c0 <prvIdleTask+0x8>
 800d0de:	bf00      	nop
 800d0e0:	20000f98 	.word	0x20000f98
 800d0e4:	e000ed04 	.word	0xe000ed04

0800d0e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	607b      	str	r3, [r7, #4]
 800d0f2:	e00c      	b.n	800d10e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	4413      	add	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4a12      	ldr	r2, [pc, #72]	; (800d148 <prvInitialiseTaskLists+0x60>)
 800d100:	4413      	add	r3, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe f8f2 	bl	800b2ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	3301      	adds	r3, #1
 800d10c:	607b      	str	r3, [r7, #4]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b37      	cmp	r3, #55	; 0x37
 800d112:	d9ef      	bls.n	800d0f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d114:	480d      	ldr	r0, [pc, #52]	; (800d14c <prvInitialiseTaskLists+0x64>)
 800d116:	f7fe f8e9 	bl	800b2ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d11a:	480d      	ldr	r0, [pc, #52]	; (800d150 <prvInitialiseTaskLists+0x68>)
 800d11c:	f7fe f8e6 	bl	800b2ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d120:	480c      	ldr	r0, [pc, #48]	; (800d154 <prvInitialiseTaskLists+0x6c>)
 800d122:	f7fe f8e3 	bl	800b2ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d126:	480c      	ldr	r0, [pc, #48]	; (800d158 <prvInitialiseTaskLists+0x70>)
 800d128:	f7fe f8e0 	bl	800b2ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d12c:	480b      	ldr	r0, [pc, #44]	; (800d15c <prvInitialiseTaskLists+0x74>)
 800d12e:	f7fe f8dd 	bl	800b2ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d132:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <prvInitialiseTaskLists+0x78>)
 800d134:	4a05      	ldr	r2, [pc, #20]	; (800d14c <prvInitialiseTaskLists+0x64>)
 800d136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d138:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <prvInitialiseTaskLists+0x7c>)
 800d13a:	4a05      	ldr	r2, [pc, #20]	; (800d150 <prvInitialiseTaskLists+0x68>)
 800d13c:	601a      	str	r2, [r3, #0]
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20000f98 	.word	0x20000f98
 800d14c:	200013f8 	.word	0x200013f8
 800d150:	2000140c 	.word	0x2000140c
 800d154:	20001428 	.word	0x20001428
 800d158:	2000143c 	.word	0x2000143c
 800d15c:	20001454 	.word	0x20001454
 800d160:	20001420 	.word	0x20001420
 800d164:	20001424 	.word	0x20001424

0800d168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d16e:	e019      	b.n	800d1a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d170:	f001 f8e8 	bl	800e344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d174:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <prvCheckTasksWaitingTermination+0x50>)
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3304      	adds	r3, #4
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe f93d 	bl	800b400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d186:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <prvCheckTasksWaitingTermination+0x54>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	4a0b      	ldr	r2, [pc, #44]	; (800d1bc <prvCheckTasksWaitingTermination+0x54>)
 800d18e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d190:	4b0b      	ldr	r3, [pc, #44]	; (800d1c0 <prvCheckTasksWaitingTermination+0x58>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3b01      	subs	r3, #1
 800d196:	4a0a      	ldr	r2, [pc, #40]	; (800d1c0 <prvCheckTasksWaitingTermination+0x58>)
 800d198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d19a:	f001 f903 	bl	800e3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f810 	bl	800d1c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1a4:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <prvCheckTasksWaitingTermination+0x58>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e1      	bne.n	800d170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1ac:	bf00      	nop
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	2000143c 	.word	0x2000143c
 800d1bc:	20001468 	.word	0x20001468
 800d1c0:	20001450 	.word	0x20001450

0800d1c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	3354      	adds	r3, #84	; 0x54
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f002 fa11 	bl	800f5f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d108      	bne.n	800d1f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f001 fa9b 	bl	800e720 <vPortFree>
				vPortFree( pxTCB );
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 fa98 	bl	800e720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1f0:	e018      	b.n	800d224 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d103      	bne.n	800d204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f001 fa8f 	bl	800e720 <vPortFree>
	}
 800d202:	e00f      	b.n	800d224 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d00a      	beq.n	800d224 <prvDeleteTCB+0x60>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	60fb      	str	r3, [r7, #12]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <prvDeleteTCB+0x5e>
	}
 800d224:	bf00      	nop
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d232:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <prvResetNextTaskUnblockTime+0x38>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d104      	bne.n	800d246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <prvResetNextTaskUnblockTime+0x3c>)
 800d23e:	f04f 32ff 	mov.w	r2, #4294967295
 800d242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d244:	e008      	b.n	800d258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d246:	4b07      	ldr	r3, [pc, #28]	; (800d264 <prvResetNextTaskUnblockTime+0x38>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	4a04      	ldr	r2, [pc, #16]	; (800d268 <prvResetNextTaskUnblockTime+0x3c>)
 800d256:	6013      	str	r3, [r2, #0]
}
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	20001420 	.word	0x20001420
 800d268:	20001488 	.word	0x20001488

0800d26c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d272:	4b05      	ldr	r3, [pc, #20]	; (800d288 <xTaskGetCurrentTaskHandle+0x1c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d278:	687b      	ldr	r3, [r7, #4]
	}
 800d27a:	4618      	mov	r0, r3
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	20000f94 	.word	0x20000f94

0800d28c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d292:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <xTaskGetSchedulerState+0x34>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d29a:	2301      	movs	r3, #1
 800d29c:	607b      	str	r3, [r7, #4]
 800d29e:	e008      	b.n	800d2b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2a0:	4b08      	ldr	r3, [pc, #32]	; (800d2c4 <xTaskGetSchedulerState+0x38>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	607b      	str	r3, [r7, #4]
 800d2ac:	e001      	b.n	800d2b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2b2:	687b      	ldr	r3, [r7, #4]
	}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	20001474 	.word	0x20001474
 800d2c4:	20001490 	.word	0x20001490

0800d2c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d051      	beq.n	800d382 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e2:	4b2a      	ldr	r3, [pc, #168]	; (800d38c <xTaskPriorityInherit+0xc4>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d241      	bcs.n	800d370 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	db06      	blt.n	800d302 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2f4:	4b25      	ldr	r3, [pc, #148]	; (800d38c <xTaskPriorityInherit+0xc4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	6959      	ldr	r1, [r3, #20]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30a:	4613      	mov	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4a1f      	ldr	r2, [pc, #124]	; (800d390 <xTaskPriorityInherit+0xc8>)
 800d314:	4413      	add	r3, r2
 800d316:	4299      	cmp	r1, r3
 800d318:	d122      	bne.n	800d360 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	3304      	adds	r3, #4
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fe f86e 	bl	800b400 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d324:	4b19      	ldr	r3, [pc, #100]	; (800d38c <xTaskPriorityInherit+0xc4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d332:	4b18      	ldr	r3, [pc, #96]	; (800d394 <xTaskPriorityInherit+0xcc>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	429a      	cmp	r2, r3
 800d338:	d903      	bls.n	800d342 <xTaskPriorityInherit+0x7a>
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	4a15      	ldr	r2, [pc, #84]	; (800d394 <xTaskPriorityInherit+0xcc>)
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4a10      	ldr	r2, [pc, #64]	; (800d390 <xTaskPriorityInherit+0xc8>)
 800d350:	441a      	add	r2, r3
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	3304      	adds	r3, #4
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7fd fff4 	bl	800b346 <vListInsertEnd>
 800d35e:	e004      	b.n	800d36a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d360:	4b0a      	ldr	r3, [pc, #40]	; (800d38c <xTaskPriorityInherit+0xc4>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d36a:	2301      	movs	r3, #1
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	e008      	b.n	800d382 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d374:	4b05      	ldr	r3, [pc, #20]	; (800d38c <xTaskPriorityInherit+0xc4>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d201      	bcs.n	800d382 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d37e:	2301      	movs	r3, #1
 800d380:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d382:	68fb      	ldr	r3, [r7, #12]
	}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20000f94 	.word	0x20000f94
 800d390:	20000f98 	.word	0x20000f98
 800d394:	20001470 	.word	0x20001470

0800d398 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d056      	beq.n	800d45c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d3ae:	4b2e      	ldr	r3, [pc, #184]	; (800d468 <xTaskPriorityDisinherit+0xd0>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d00a      	beq.n	800d3ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	60fb      	str	r3, [r7, #12]
}
 800d3ca:	bf00      	nop
 800d3cc:	e7fe      	b.n	800d3cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10a      	bne.n	800d3ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	60bb      	str	r3, [r7, #8]
}
 800d3e8:	bf00      	nop
 800d3ea:	e7fe      	b.n	800d3ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f0:	1e5a      	subs	r2, r3, #1
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d02c      	beq.n	800d45c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d406:	2b00      	cmp	r3, #0
 800d408:	d128      	bne.n	800d45c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fd fff6 	bl	800b400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d420:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42c:	4b0f      	ldr	r3, [pc, #60]	; (800d46c <xTaskPriorityDisinherit+0xd4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d903      	bls.n	800d43c <xTaskPriorityDisinherit+0xa4>
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <xTaskPriorityDisinherit+0xd4>)
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4a09      	ldr	r2, [pc, #36]	; (800d470 <xTaskPriorityDisinherit+0xd8>)
 800d44a:	441a      	add	r2, r3
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	3304      	adds	r3, #4
 800d450:	4619      	mov	r1, r3
 800d452:	4610      	mov	r0, r2
 800d454:	f7fd ff77 	bl	800b346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d45c:	697b      	ldr	r3, [r7, #20]
	}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000f94 	.word	0x20000f94
 800d46c:	20001470 	.word	0x20001470
 800d470:	20000f98 	.word	0x20000f98

0800d474 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d482:	2301      	movs	r3, #1
 800d484:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d06a      	beq.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	60fb      	str	r3, [r7, #12]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d902      	bls.n	800d4ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	61fb      	str	r3, [r7, #28]
 800d4b8:	e002      	b.n	800d4c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	69fa      	ldr	r2, [r7, #28]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d04b      	beq.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d146      	bne.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4d4:	4b25      	ldr	r3, [pc, #148]	; (800d56c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d10a      	bne.n	800d4f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	60bb      	str	r3, [r7, #8]
}
 800d4f0:	bf00      	nop
 800d4f2:	e7fe      	b.n	800d4f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	69fa      	ldr	r2, [r7, #28]
 800d4fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	699b      	ldr	r3, [r3, #24]
 800d504:	2b00      	cmp	r3, #0
 800d506:	db04      	blt.n	800d512 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	6959      	ldr	r1, [r3, #20]
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4a13      	ldr	r2, [pc, #76]	; (800d570 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d522:	4413      	add	r3, r2
 800d524:	4299      	cmp	r1, r3
 800d526:	d11c      	bne.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fd ff67 	bl	800b400 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d536:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d903      	bls.n	800d546 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d542:	4a0c      	ldr	r2, [pc, #48]	; (800d574 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4a07      	ldr	r2, [pc, #28]	; (800d570 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d554:	441a      	add	r2, r3
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	3304      	adds	r3, #4
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f7fd fef2 	bl	800b346 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d562:	bf00      	nop
 800d564:	3720      	adds	r7, #32
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20000f94 	.word	0x20000f94
 800d570:	20000f98 	.word	0x20000f98
 800d574:	20001470 	.word	0x20001470

0800d578 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d578:	b480      	push	{r7}
 800d57a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d57c:	4b07      	ldr	r3, [pc, #28]	; (800d59c <pvTaskIncrementMutexHeldCount+0x24>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d004      	beq.n	800d58e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d584:	4b05      	ldr	r3, [pc, #20]	; (800d59c <pvTaskIncrementMutexHeldCount+0x24>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d58a:	3201      	adds	r2, #1
 800d58c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d58e:	4b03      	ldr	r3, [pc, #12]	; (800d59c <pvTaskIncrementMutexHeldCount+0x24>)
 800d590:	681b      	ldr	r3, [r3, #0]
	}
 800d592:	4618      	mov	r0, r3
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20000f94 	.word	0x20000f94

0800d5a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
 800d5ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d5ae:	f000 fec9 	bl	800e344 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d5b2:	4b29      	ldr	r3, [pc, #164]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d01c      	beq.n	800d5fa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d5c0:	4b25      	ldr	r3, [pc, #148]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	43d2      	mvns	r2, r2
 800d5cc:	400a      	ands	r2, r1
 800d5ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d5d2:	4b21      	ldr	r3, [pc, #132]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00b      	beq.n	800d5fa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	6838      	ldr	r0, [r7, #0]
 800d5e6:	f000 f9dd 	bl	800d9a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d5ea:	4b1c      	ldr	r3, [pc, #112]	; (800d65c <xTaskNotifyWait+0xbc>)
 800d5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f0:	601a      	str	r2, [r3, #0]
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d5fa:	f000 fed3 	bl	800e3a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d5fe:	f000 fea1 	bl	800e344 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d005      	beq.n	800d614 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d608:	4b13      	ldr	r3, [pc, #76]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d614:	4b10      	ldr	r3, [pc, #64]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d002      	beq.n	800d628 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d622:	2300      	movs	r3, #0
 800d624:	617b      	str	r3, [r7, #20]
 800d626:	e00a      	b.n	800d63e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d628:	4b0b      	ldr	r3, [pc, #44]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	43d2      	mvns	r2, r2
 800d634:	400a      	ands	r2, r1
 800d636:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800d63a:	2301      	movs	r3, #1
 800d63c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d63e:	4b06      	ldr	r3, [pc, #24]	; (800d658 <xTaskNotifyWait+0xb8>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2200      	movs	r2, #0
 800d644:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800d648:	f000 feac 	bl	800e3a4 <vPortExitCritical>

		return xReturn;
 800d64c:	697b      	ldr	r3, [r7, #20]
	}
 800d64e:	4618      	mov	r0, r3
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20000f94 	.word	0x20000f94
 800d65c:	e000ed04 	.word	0xe000ed04

0800d660 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	; 0x28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	603b      	str	r3, [r7, #0]
 800d66c:	4613      	mov	r3, r2
 800d66e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d670:	2301      	movs	r3, #1
 800d672:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10a      	bne.n	800d690 <xTaskGenericNotify+0x30>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	61bb      	str	r3, [r7, #24]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d694:	f000 fe56 	bl	800e344 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d004      	beq.n	800d6a8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d6ae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	2202      	movs	r2, #2
 800d6b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d6b8:	79fb      	ldrb	r3, [r7, #7]
 800d6ba:	2b04      	cmp	r3, #4
 800d6bc:	d82d      	bhi.n	800d71a <xTaskGenericNotify+0xba>
 800d6be:	a201      	add	r2, pc, #4	; (adr r2, 800d6c4 <xTaskGenericNotify+0x64>)
 800d6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c4:	0800d73d 	.word	0x0800d73d
 800d6c8:	0800d6d9 	.word	0x0800d6d9
 800d6cc:	0800d6eb 	.word	0x0800d6eb
 800d6d0:	0800d6fb 	.word	0x0800d6fb
 800d6d4:	0800d705 	.word	0x0800d705
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	431a      	orrs	r2, r3
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d6e8:	e02b      	b.n	800d742 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d6f8:	e023      	b.n	800d742 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d702:	e01e      	b.n	800d742 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d704:	7ffb      	ldrb	r3, [r7, #31]
 800d706:	2b02      	cmp	r3, #2
 800d708:	d004      	beq.n	800d714 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d712:	e016      	b.n	800d742 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d714:	2300      	movs	r3, #0
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d718:	e013      	b.n	800d742 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d00c      	beq.n	800d740 <xTaskGenericNotify+0xe0>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	617b      	str	r3, [r7, #20]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <xTaskGenericNotify+0xda>
					break;
 800d73c:	bf00      	nop
 800d73e:	e000      	b.n	800d742 <xTaskGenericNotify+0xe2>

					break;
 800d740:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d742:	7ffb      	ldrb	r3, [r7, #31]
 800d744:	2b01      	cmp	r3, #1
 800d746:	d13a      	bne.n	800d7be <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fd fe57 	bl	800b400 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d756:	4b1d      	ldr	r3, [pc, #116]	; (800d7cc <xTaskGenericNotify+0x16c>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d903      	bls.n	800d766 <xTaskGenericNotify+0x106>
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d762:	4a1a      	ldr	r2, [pc, #104]	; (800d7cc <xTaskGenericNotify+0x16c>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4a17      	ldr	r2, [pc, #92]	; (800d7d0 <xTaskGenericNotify+0x170>)
 800d774:	441a      	add	r2, r3
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	3304      	adds	r3, #4
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7fd fde2 	bl	800b346 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <xTaskGenericNotify+0x140>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	613b      	str	r3, [r7, #16]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <xTaskGenericNotify+0x174>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d907      	bls.n	800d7be <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d7ae:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <xTaskGenericNotify+0x178>)
 800d7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d7be:	f000 fdf1 	bl	800e3a4 <vPortExitCritical>

		return xReturn;
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3728      	adds	r7, #40	; 0x28
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20001470 	.word	0x20001470
 800d7d0:	20000f98 	.word	0x20000f98
 800d7d4:	20000f94 	.word	0x20000f94
 800d7d8:	e000ed04 	.word	0xe000ed04

0800d7dc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08e      	sub	sp, #56	; 0x38
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d80c:	f000 fe7c 	bl	800e508 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d814:	f3ef 8211 	mrs	r2, BASEPRI
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	623a      	str	r2, [r7, #32]
 800d82a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d82c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d82e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d004      	beq.n	800d840 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	2202      	movs	r2, #2
 800d84e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	2b04      	cmp	r3, #4
 800d856:	d82f      	bhi.n	800d8b8 <xTaskGenericNotifyFromISR+0xdc>
 800d858:	a201      	add	r2, pc, #4	; (adr r2, 800d860 <xTaskGenericNotifyFromISR+0x84>)
 800d85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85e:	bf00      	nop
 800d860:	0800d8db 	.word	0x0800d8db
 800d864:	0800d875 	.word	0x0800d875
 800d868:	0800d887 	.word	0x0800d887
 800d86c:	0800d897 	.word	0x0800d897
 800d870:	0800d8a1 	.word	0x0800d8a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	431a      	orrs	r2, r3
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d884:	e02c      	b.n	800d8e0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d894:	e024      	b.n	800d8e0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d89e:	e01f      	b.n	800d8e0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d8a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d004      	beq.n	800d8b2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d8b0:	e016      	b.n	800d8e0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d8b6:	e013      	b.n	800d8e0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d00c      	beq.n	800d8de <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	61bb      	str	r3, [r7, #24]
}
 800d8d6:	bf00      	nop
 800d8d8:	e7fe      	b.n	800d8d8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d8da:	bf00      	nop
 800d8dc:	e000      	b.n	800d8e0 <xTaskGenericNotifyFromISR+0x104>
					break;
 800d8de:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d8e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d146      	bne.n	800d976 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00a      	beq.n	800d906 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	617b      	str	r3, [r7, #20]
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d906:	4b21      	ldr	r3, [pc, #132]	; (800d98c <xTaskGenericNotifyFromISR+0x1b0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d11d      	bne.n	800d94a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d910:	3304      	adds	r3, #4
 800d912:	4618      	mov	r0, r3
 800d914:	f7fd fd74 	bl	800b400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d91c:	4b1c      	ldr	r3, [pc, #112]	; (800d990 <xTaskGenericNotifyFromISR+0x1b4>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	429a      	cmp	r2, r3
 800d922:	d903      	bls.n	800d92c <xTaskGenericNotifyFromISR+0x150>
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d928:	4a19      	ldr	r2, [pc, #100]	; (800d990 <xTaskGenericNotifyFromISR+0x1b4>)
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d930:	4613      	mov	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	4413      	add	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4a16      	ldr	r2, [pc, #88]	; (800d994 <xTaskGenericNotifyFromISR+0x1b8>)
 800d93a:	441a      	add	r2, r3
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	3304      	adds	r3, #4
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f7fd fcff 	bl	800b346 <vListInsertEnd>
 800d948:	e005      	b.n	800d956 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	3318      	adds	r3, #24
 800d94e:	4619      	mov	r1, r3
 800d950:	4811      	ldr	r0, [pc, #68]	; (800d998 <xTaskGenericNotifyFromISR+0x1bc>)
 800d952:	f7fd fcf8 	bl	800b346 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	4b10      	ldr	r3, [pc, #64]	; (800d99c <xTaskGenericNotifyFromISR+0x1c0>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	429a      	cmp	r2, r3
 800d962:	d908      	bls.n	800d976 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d966:	2b00      	cmp	r3, #0
 800d968:	d002      	beq.n	800d970 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d96c:	2201      	movs	r2, #1
 800d96e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d970:	4b0b      	ldr	r3, [pc, #44]	; (800d9a0 <xTaskGenericNotifyFromISR+0x1c4>)
 800d972:	2201      	movs	r2, #1
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	f383 8811 	msr	BASEPRI, r3
}
 800d980:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d984:	4618      	mov	r0, r3
 800d986:	3738      	adds	r7, #56	; 0x38
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	20001490 	.word	0x20001490
 800d990:	20001470 	.word	0x20001470
 800d994:	20000f98 	.word	0x20000f98
 800d998:	20001428 	.word	0x20001428
 800d99c:	20000f94 	.word	0x20000f94
 800d9a0:	2000147c 	.word	0x2000147c

0800d9a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9ae:	4b21      	ldr	r3, [pc, #132]	; (800da34 <prvAddCurrentTaskToDelayedList+0x90>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9b4:	4b20      	ldr	r3, [pc, #128]	; (800da38 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fd fd20 	bl	800b400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	d10a      	bne.n	800d9de <prvAddCurrentTaskToDelayedList+0x3a>
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d007      	beq.n	800d9de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ce:	4b1a      	ldr	r3, [pc, #104]	; (800da38 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4819      	ldr	r0, [pc, #100]	; (800da3c <prvAddCurrentTaskToDelayedList+0x98>)
 800d9d8:	f7fd fcb5 	bl	800b346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9dc:	e026      	b.n	800da2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9e6:	4b14      	ldr	r3, [pc, #80]	; (800da38 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68ba      	ldr	r2, [r7, #8]
 800d9ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d209      	bcs.n	800da0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9f6:	4b12      	ldr	r3, [pc, #72]	; (800da40 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	4b0f      	ldr	r3, [pc, #60]	; (800da38 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3304      	adds	r3, #4
 800da00:	4619      	mov	r1, r3
 800da02:	4610      	mov	r0, r2
 800da04:	f7fd fcc3 	bl	800b38e <vListInsert>
}
 800da08:	e010      	b.n	800da2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da0a:	4b0e      	ldr	r3, [pc, #56]	; (800da44 <prvAddCurrentTaskToDelayedList+0xa0>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <prvAddCurrentTaskToDelayedList+0x94>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	3304      	adds	r3, #4
 800da14:	4619      	mov	r1, r3
 800da16:	4610      	mov	r0, r2
 800da18:	f7fd fcb9 	bl	800b38e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da1c:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	429a      	cmp	r2, r3
 800da24:	d202      	bcs.n	800da2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800da26:	4a08      	ldr	r2, [pc, #32]	; (800da48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	6013      	str	r3, [r2, #0]
}
 800da2c:	bf00      	nop
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	2000146c 	.word	0x2000146c
 800da38:	20000f94 	.word	0x20000f94
 800da3c:	20001454 	.word	0x20001454
 800da40:	20001424 	.word	0x20001424
 800da44:	20001420 	.word	0x20001420
 800da48:	20001488 	.word	0x20001488

0800da4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b08a      	sub	sp, #40	; 0x28
 800da50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da52:	2300      	movs	r3, #0
 800da54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da56:	f000 fb07 	bl	800e068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da5a:	4b1c      	ldr	r3, [pc, #112]	; (800dacc <xTimerCreateTimerTask+0x80>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d021      	beq.n	800daa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da66:	2300      	movs	r3, #0
 800da68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da6a:	1d3a      	adds	r2, r7, #4
 800da6c:	f107 0108 	add.w	r1, r7, #8
 800da70:	f107 030c 	add.w	r3, r7, #12
 800da74:	4618      	mov	r0, r3
 800da76:	f7fd fc1f 	bl	800b2b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	9202      	str	r2, [sp, #8]
 800da82:	9301      	str	r3, [sp, #4]
 800da84:	2302      	movs	r3, #2
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	2300      	movs	r3, #0
 800da8a:	460a      	mov	r2, r1
 800da8c:	4910      	ldr	r1, [pc, #64]	; (800dad0 <xTimerCreateTimerTask+0x84>)
 800da8e:	4811      	ldr	r0, [pc, #68]	; (800dad4 <xTimerCreateTimerTask+0x88>)
 800da90:	f7fe fda4 	bl	800c5dc <xTaskCreateStatic>
 800da94:	4603      	mov	r3, r0
 800da96:	4a10      	ldr	r2, [pc, #64]	; (800dad8 <xTimerCreateTimerTask+0x8c>)
 800da98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da9a:	4b0f      	ldr	r3, [pc, #60]	; (800dad8 <xTimerCreateTimerTask+0x8c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800daa2:	2301      	movs	r3, #1
 800daa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10a      	bne.n	800dac2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	613b      	str	r3, [r7, #16]
}
 800dabe:	bf00      	nop
 800dac0:	e7fe      	b.n	800dac0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dac2:	697b      	ldr	r3, [r7, #20]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	200014c4 	.word	0x200014c4
 800dad0:	0801391c 	.word	0x0801391c
 800dad4:	0800dc11 	.word	0x0800dc11
 800dad8:	200014c8 	.word	0x200014c8

0800dadc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b08a      	sub	sp, #40	; 0x28
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
 800dae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800daea:	2300      	movs	r3, #0
 800daec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10a      	bne.n	800db0a <xTimerGenericCommand+0x2e>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	623b      	str	r3, [r7, #32]
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db0a:	4b1a      	ldr	r3, [pc, #104]	; (800db74 <xTimerGenericCommand+0x98>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d02a      	beq.n	800db68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b05      	cmp	r3, #5
 800db22:	dc18      	bgt.n	800db56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db24:	f7ff fbb2 	bl	800d28c <xTaskGetSchedulerState>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d109      	bne.n	800db42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db2e:	4b11      	ldr	r3, [pc, #68]	; (800db74 <xTimerGenericCommand+0x98>)
 800db30:	6818      	ldr	r0, [r3, #0]
 800db32:	f107 0110 	add.w	r1, r7, #16
 800db36:	2300      	movs	r3, #0
 800db38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db3a:	f7fd fee9 	bl	800b910 <xQueueGenericSend>
 800db3e:	6278      	str	r0, [r7, #36]	; 0x24
 800db40:	e012      	b.n	800db68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db42:	4b0c      	ldr	r3, [pc, #48]	; (800db74 <xTimerGenericCommand+0x98>)
 800db44:	6818      	ldr	r0, [r3, #0]
 800db46:	f107 0110 	add.w	r1, r7, #16
 800db4a:	2300      	movs	r3, #0
 800db4c:	2200      	movs	r2, #0
 800db4e:	f7fd fedf 	bl	800b910 <xQueueGenericSend>
 800db52:	6278      	str	r0, [r7, #36]	; 0x24
 800db54:	e008      	b.n	800db68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db56:	4b07      	ldr	r3, [pc, #28]	; (800db74 <xTimerGenericCommand+0x98>)
 800db58:	6818      	ldr	r0, [r3, #0]
 800db5a:	f107 0110 	add.w	r1, r7, #16
 800db5e:	2300      	movs	r3, #0
 800db60:	683a      	ldr	r2, [r7, #0]
 800db62:	f7fd ffd3 	bl	800bb0c <xQueueGenericSendFromISR>
 800db66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3728      	adds	r7, #40	; 0x28
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	200014c4 	.word	0x200014c4

0800db78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af02      	add	r7, sp, #8
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db82:	4b22      	ldr	r3, [pc, #136]	; (800dc0c <prvProcessExpiredTimer+0x94>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	3304      	adds	r3, #4
 800db90:	4618      	mov	r0, r3
 800db92:	f7fd fc35 	bl	800b400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db9c:	f003 0304 	and.w	r3, r3, #4
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d022      	beq.n	800dbea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	699a      	ldr	r2, [r3, #24]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	18d1      	adds	r1, r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	6978      	ldr	r0, [r7, #20]
 800dbb2:	f000 f8d1 	bl	800dd58 <prvInsertTimerInActiveList>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01f      	beq.n	800dbfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	6978      	ldr	r0, [r7, #20]
 800dbc8:	f7ff ff88 	bl	800dadc <xTimerGenericCommand>
 800dbcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d113      	bne.n	800dbfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	60fb      	str	r3, [r7, #12]
}
 800dbe6:	bf00      	nop
 800dbe8:	e7fe      	b.n	800dbe8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbf0:	f023 0301 	bic.w	r3, r3, #1
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	6a1b      	ldr	r3, [r3, #32]
 800dc00:	6978      	ldr	r0, [r7, #20]
 800dc02:	4798      	blx	r3
}
 800dc04:	bf00      	nop
 800dc06:	3718      	adds	r7, #24
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	200014bc 	.word	0x200014bc

0800dc10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc18:	f107 0308 	add.w	r3, r7, #8
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 f857 	bl	800dcd0 <prvGetNextExpireTime>
 800dc22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	4619      	mov	r1, r3
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f000 f803 	bl	800dc34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc2e:	f000 f8d5 	bl	800dddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc32:	e7f1      	b.n	800dc18 <prvTimerTask+0x8>

0800dc34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc3e:	f7fe ff29 	bl	800ca94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc42:	f107 0308 	add.w	r3, r7, #8
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 f866 	bl	800dd18 <prvSampleTimeNow>
 800dc4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d130      	bne.n	800dcb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10a      	bne.n	800dc70 <prvProcessTimerOrBlockTask+0x3c>
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d806      	bhi.n	800dc70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc62:	f7fe ff25 	bl	800cab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc66:	68f9      	ldr	r1, [r7, #12]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff ff85 	bl	800db78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc6e:	e024      	b.n	800dcba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d008      	beq.n	800dc88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc76:	4b13      	ldr	r3, [pc, #76]	; (800dcc4 <prvProcessTimerOrBlockTask+0x90>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <prvProcessTimerOrBlockTask+0x50>
 800dc80:	2301      	movs	r3, #1
 800dc82:	e000      	b.n	800dc86 <prvProcessTimerOrBlockTask+0x52>
 800dc84:	2300      	movs	r3, #0
 800dc86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc88:	4b0f      	ldr	r3, [pc, #60]	; (800dcc8 <prvProcessTimerOrBlockTask+0x94>)
 800dc8a:	6818      	ldr	r0, [r3, #0]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	4619      	mov	r1, r3
 800dc96:	f7fe fc6d 	bl	800c574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc9a:	f7fe ff09 	bl	800cab0 <xTaskResumeAll>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10a      	bne.n	800dcba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dca4:	4b09      	ldr	r3, [pc, #36]	; (800dccc <prvProcessTimerOrBlockTask+0x98>)
 800dca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
}
 800dcb4:	e001      	b.n	800dcba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dcb6:	f7fe fefb 	bl	800cab0 <xTaskResumeAll>
}
 800dcba:	bf00      	nop
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200014c0 	.word	0x200014c0
 800dcc8:	200014c4 	.word	0x200014c4
 800dccc:	e000ed04 	.word	0xe000ed04

0800dcd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dcd8:	4b0e      	ldr	r3, [pc, #56]	; (800dd14 <prvGetNextExpireTime+0x44>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d101      	bne.n	800dce6 <prvGetNextExpireTime+0x16>
 800dce2:	2201      	movs	r2, #1
 800dce4:	e000      	b.n	800dce8 <prvGetNextExpireTime+0x18>
 800dce6:	2200      	movs	r2, #0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d105      	bne.n	800dd00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dcf4:	4b07      	ldr	r3, [pc, #28]	; (800dd14 <prvGetNextExpireTime+0x44>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	e001      	b.n	800dd04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd00:	2300      	movs	r3, #0
 800dd02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd04:	68fb      	ldr	r3, [r7, #12]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	200014bc 	.word	0x200014bc

0800dd18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd20:	f7fe ff64 	bl	800cbec <xTaskGetTickCount>
 800dd24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd26:	4b0b      	ldr	r3, [pc, #44]	; (800dd54 <prvSampleTimeNow+0x3c>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d205      	bcs.n	800dd3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd30:	f000 f936 	bl	800dfa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	e002      	b.n	800dd42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd42:	4a04      	ldr	r2, [pc, #16]	; (800dd54 <prvSampleTimeNow+0x3c>)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd48:	68fb      	ldr	r3, [r7, #12]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	200014cc 	.word	0x200014cc

0800dd58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd66:	2300      	movs	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d812      	bhi.n	800dda4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	1ad2      	subs	r2, r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	699b      	ldr	r3, [r3, #24]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d302      	bcc.n	800dd92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	617b      	str	r3, [r7, #20]
 800dd90:	e01b      	b.n	800ddca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd92:	4b10      	ldr	r3, [pc, #64]	; (800ddd4 <prvInsertTimerInActiveList+0x7c>)
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	3304      	adds	r3, #4
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	f7fd faf6 	bl	800b38e <vListInsert>
 800dda2:	e012      	b.n	800ddca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d206      	bcs.n	800ddba <prvInsertTimerInActiveList+0x62>
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d302      	bcc.n	800ddba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	617b      	str	r3, [r7, #20]
 800ddb8:	e007      	b.n	800ddca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddba:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <prvInsertTimerInActiveList+0x80>)
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	f7fd fae2 	bl	800b38e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ddca:	697b      	ldr	r3, [r7, #20]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3718      	adds	r7, #24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	200014c0 	.word	0x200014c0
 800ddd8:	200014bc 	.word	0x200014bc

0800dddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08e      	sub	sp, #56	; 0x38
 800dde0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dde2:	e0ca      	b.n	800df7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	da18      	bge.n	800de1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ddea:	1d3b      	adds	r3, r7, #4
 800ddec:	3304      	adds	r3, #4
 800ddee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ddf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10a      	bne.n	800de0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	61fb      	str	r3, [r7, #28]
}
 800de08:	bf00      	nop
 800de0a:	e7fe      	b.n	800de0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de12:	6850      	ldr	r0, [r2, #4]
 800de14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de16:	6892      	ldr	r2, [r2, #8]
 800de18:	4611      	mov	r1, r2
 800de1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f2c0 80aa 	blt.w	800df78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d004      	beq.n	800de3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	3304      	adds	r3, #4
 800de34:	4618      	mov	r0, r3
 800de36:	f7fd fae3 	bl	800b400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de3a:	463b      	mov	r3, r7
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7ff ff6b 	bl	800dd18 <prvSampleTimeNow>
 800de42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b09      	cmp	r3, #9
 800de48:	f200 8097 	bhi.w	800df7a <prvProcessReceivedCommands+0x19e>
 800de4c:	a201      	add	r2, pc, #4	; (adr r2, 800de54 <prvProcessReceivedCommands+0x78>)
 800de4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de52:	bf00      	nop
 800de54:	0800de7d 	.word	0x0800de7d
 800de58:	0800de7d 	.word	0x0800de7d
 800de5c:	0800de7d 	.word	0x0800de7d
 800de60:	0800def1 	.word	0x0800def1
 800de64:	0800df05 	.word	0x0800df05
 800de68:	0800df4f 	.word	0x0800df4f
 800de6c:	0800de7d 	.word	0x0800de7d
 800de70:	0800de7d 	.word	0x0800de7d
 800de74:	0800def1 	.word	0x0800def1
 800de78:	0800df05 	.word	0x0800df05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de82:	f043 0301 	orr.w	r3, r3, #1
 800de86:	b2da      	uxtb	r2, r3
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	18d1      	adds	r1, r2, r3
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de9c:	f7ff ff5c 	bl	800dd58 <prvInsertTimerInActiveList>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d069      	beq.n	800df7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deb4:	f003 0304 	and.w	r3, r3, #4
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d05e      	beq.n	800df7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	699b      	ldr	r3, [r3, #24]
 800dec2:	441a      	add	r2, r3
 800dec4:	2300      	movs	r3, #0
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	2300      	movs	r3, #0
 800deca:	2100      	movs	r1, #0
 800decc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dece:	f7ff fe05 	bl	800dadc <xTimerGenericCommand>
 800ded2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d14f      	bne.n	800df7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	61bb      	str	r3, [r7, #24]
}
 800deec:	bf00      	nop
 800deee:	e7fe      	b.n	800deee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800def0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800def6:	f023 0301 	bic.w	r3, r3, #1
 800defa:	b2da      	uxtb	r2, r3
 800defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800df02:	e03a      	b.n	800df7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df0a:	f043 0301 	orr.w	r3, r3, #1
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	617b      	str	r3, [r7, #20]
}
 800df36:	bf00      	nop
 800df38:	e7fe      	b.n	800df38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3c:	699a      	ldr	r2, [r3, #24]
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	18d1      	adds	r1, r2, r3
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df48:	f7ff ff06 	bl	800dd58 <prvInsertTimerInActiveList>
					break;
 800df4c:	e015      	b.n	800df7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df54:	f003 0302 	and.w	r3, r3, #2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d103      	bne.n	800df64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df5e:	f000 fbdf 	bl	800e720 <vPortFree>
 800df62:	e00a      	b.n	800df7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df6a:	f023 0301 	bic.w	r3, r3, #1
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df76:	e000      	b.n	800df7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800df78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df7a:	4b08      	ldr	r3, [pc, #32]	; (800df9c <prvProcessReceivedCommands+0x1c0>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	1d39      	adds	r1, r7, #4
 800df80:	2200      	movs	r2, #0
 800df82:	4618      	mov	r0, r3
 800df84:	f7fd feea 	bl	800bd5c <xQueueReceive>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f47f af2a 	bne.w	800dde4 <prvProcessReceivedCommands+0x8>
	}
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	3730      	adds	r7, #48	; 0x30
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	200014c4 	.word	0x200014c4

0800dfa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfa6:	e048      	b.n	800e03a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfa8:	4b2d      	ldr	r3, [pc, #180]	; (800e060 <prvSwitchTimerLists+0xc0>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb2:	4b2b      	ldr	r3, [pc, #172]	; (800e060 <prvSwitchTimerLists+0xc0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fd fa1d 	bl	800b400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6a1b      	ldr	r3, [r3, #32]
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfd4:	f003 0304 	and.w	r3, r3, #4
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d02e      	beq.n	800e03a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d90e      	bls.n	800e00c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dffa:	4b19      	ldr	r3, [pc, #100]	; (800e060 <prvSwitchTimerLists+0xc0>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3304      	adds	r3, #4
 800e002:	4619      	mov	r1, r3
 800e004:	4610      	mov	r0, r2
 800e006:	f7fd f9c2 	bl	800b38e <vListInsert>
 800e00a:	e016      	b.n	800e03a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e00c:	2300      	movs	r3, #0
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	2300      	movs	r3, #0
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	2100      	movs	r1, #0
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7ff fd60 	bl	800dadc <xTimerGenericCommand>
 800e01c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10a      	bne.n	800e03a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e028:	f383 8811 	msr	BASEPRI, r3
 800e02c:	f3bf 8f6f 	isb	sy
 800e030:	f3bf 8f4f 	dsb	sy
 800e034:	603b      	str	r3, [r7, #0]
}
 800e036:	bf00      	nop
 800e038:	e7fe      	b.n	800e038 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e03a:	4b09      	ldr	r3, [pc, #36]	; (800e060 <prvSwitchTimerLists+0xc0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1b1      	bne.n	800dfa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e044:	4b06      	ldr	r3, [pc, #24]	; (800e060 <prvSwitchTimerLists+0xc0>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e04a:	4b06      	ldr	r3, [pc, #24]	; (800e064 <prvSwitchTimerLists+0xc4>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a04      	ldr	r2, [pc, #16]	; (800e060 <prvSwitchTimerLists+0xc0>)
 800e050:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e052:	4a04      	ldr	r2, [pc, #16]	; (800e064 <prvSwitchTimerLists+0xc4>)
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	6013      	str	r3, [r2, #0]
}
 800e058:	bf00      	nop
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	200014bc 	.word	0x200014bc
 800e064:	200014c0 	.word	0x200014c0

0800e068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e06e:	f000 f969 	bl	800e344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e072:	4b15      	ldr	r3, [pc, #84]	; (800e0c8 <prvCheckForValidListAndQueue+0x60>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d120      	bne.n	800e0bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e07a:	4814      	ldr	r0, [pc, #80]	; (800e0cc <prvCheckForValidListAndQueue+0x64>)
 800e07c:	f7fd f936 	bl	800b2ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e080:	4813      	ldr	r0, [pc, #76]	; (800e0d0 <prvCheckForValidListAndQueue+0x68>)
 800e082:	f7fd f933 	bl	800b2ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e086:	4b13      	ldr	r3, [pc, #76]	; (800e0d4 <prvCheckForValidListAndQueue+0x6c>)
 800e088:	4a10      	ldr	r2, [pc, #64]	; (800e0cc <prvCheckForValidListAndQueue+0x64>)
 800e08a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e08c:	4b12      	ldr	r3, [pc, #72]	; (800e0d8 <prvCheckForValidListAndQueue+0x70>)
 800e08e:	4a10      	ldr	r2, [pc, #64]	; (800e0d0 <prvCheckForValidListAndQueue+0x68>)
 800e090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e092:	2300      	movs	r3, #0
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	4b11      	ldr	r3, [pc, #68]	; (800e0dc <prvCheckForValidListAndQueue+0x74>)
 800e098:	4a11      	ldr	r2, [pc, #68]	; (800e0e0 <prvCheckForValidListAndQueue+0x78>)
 800e09a:	2110      	movs	r1, #16
 800e09c:	200a      	movs	r0, #10
 800e09e:	f7fd fa41 	bl	800b524 <xQueueGenericCreateStatic>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	4a08      	ldr	r2, [pc, #32]	; (800e0c8 <prvCheckForValidListAndQueue+0x60>)
 800e0a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e0a8:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <prvCheckForValidListAndQueue+0x60>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d005      	beq.n	800e0bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0b0:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <prvCheckForValidListAndQueue+0x60>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	490b      	ldr	r1, [pc, #44]	; (800e0e4 <prvCheckForValidListAndQueue+0x7c>)
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fe fa08 	bl	800c4cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0bc:	f000 f972 	bl	800e3a4 <vPortExitCritical>
}
 800e0c0:	bf00      	nop
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	200014c4 	.word	0x200014c4
 800e0cc:	20001494 	.word	0x20001494
 800e0d0:	200014a8 	.word	0x200014a8
 800e0d4:	200014bc 	.word	0x200014bc
 800e0d8:	200014c0 	.word	0x200014c0
 800e0dc:	20001570 	.word	0x20001570
 800e0e0:	200014d0 	.word	0x200014d0
 800e0e4:	08013924 	.word	0x08013924

0800e0e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3b04      	subs	r3, #4
 800e0f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3b04      	subs	r3, #4
 800e106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	f023 0201 	bic.w	r2, r3, #1
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	3b04      	subs	r3, #4
 800e116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e118:	4a0c      	ldr	r2, [pc, #48]	; (800e14c <pxPortInitialiseStack+0x64>)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3b14      	subs	r3, #20
 800e122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3b04      	subs	r3, #4
 800e12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f06f 0202 	mvn.w	r2, #2
 800e136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3b20      	subs	r3, #32
 800e13c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e13e:	68fb      	ldr	r3, [r7, #12]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3714      	adds	r7, #20
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr
 800e14c:	0800e151 	.word	0x0800e151

0800e150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e156:	2300      	movs	r3, #0
 800e158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e15a:	4b12      	ldr	r3, [pc, #72]	; (800e1a4 <prvTaskExitError+0x54>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e162:	d00a      	beq.n	800e17a <prvTaskExitError+0x2a>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	60fb      	str	r3, [r7, #12]
}
 800e176:	bf00      	nop
 800e178:	e7fe      	b.n	800e178 <prvTaskExitError+0x28>
	__asm volatile
 800e17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	60bb      	str	r3, [r7, #8]
}
 800e18c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e18e:	bf00      	nop
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0fc      	beq.n	800e190 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr
 800e1a4:	20000014 	.word	0x20000014
	...

0800e1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <pxCurrentTCBConst2>)
 800e1b2:	6819      	ldr	r1, [r3, #0]
 800e1b4:	6808      	ldr	r0, [r1, #0]
 800e1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ba:	f380 8809 	msr	PSP, r0
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f04f 0000 	mov.w	r0, #0
 800e1c6:	f380 8811 	msr	BASEPRI, r0
 800e1ca:	4770      	bx	lr
 800e1cc:	f3af 8000 	nop.w

0800e1d0 <pxCurrentTCBConst2>:
 800e1d0:	20000f94 	.word	0x20000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop

0800e1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1d8:	4808      	ldr	r0, [pc, #32]	; (800e1fc <prvPortStartFirstTask+0x24>)
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	6800      	ldr	r0, [r0, #0]
 800e1de:	f380 8808 	msr	MSP, r0
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f380 8814 	msr	CONTROL, r0
 800e1ea:	b662      	cpsie	i
 800e1ec:	b661      	cpsie	f
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	df00      	svc	0
 800e1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1fa:	bf00      	nop
 800e1fc:	e000ed08 	.word	0xe000ed08

0800e200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e206:	4b46      	ldr	r3, [pc, #280]	; (800e320 <xPortStartScheduler+0x120>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a46      	ldr	r2, [pc, #280]	; (800e324 <xPortStartScheduler+0x124>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d10a      	bne.n	800e226 <xPortStartScheduler+0x26>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	613b      	str	r3, [r7, #16]
}
 800e222:	bf00      	nop
 800e224:	e7fe      	b.n	800e224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e226:	4b3e      	ldr	r3, [pc, #248]	; (800e320 <xPortStartScheduler+0x120>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a3f      	ldr	r2, [pc, #252]	; (800e328 <xPortStartScheduler+0x128>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d10a      	bne.n	800e246 <xPortStartScheduler+0x46>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	60fb      	str	r3, [r7, #12]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e246:	4b39      	ldr	r3, [pc, #228]	; (800e32c <xPortStartScheduler+0x12c>)
 800e248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	22ff      	movs	r2, #255	; 0xff
 800e256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	4b31      	ldr	r3, [pc, #196]	; (800e330 <xPortStartScheduler+0x130>)
 800e26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e26e:	4b31      	ldr	r3, [pc, #196]	; (800e334 <xPortStartScheduler+0x134>)
 800e270:	2207      	movs	r2, #7
 800e272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e274:	e009      	b.n	800e28a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e276:	4b2f      	ldr	r3, [pc, #188]	; (800e334 <xPortStartScheduler+0x134>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3b01      	subs	r3, #1
 800e27c:	4a2d      	ldr	r2, [pc, #180]	; (800e334 <xPortStartScheduler+0x134>)
 800e27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e280:	78fb      	ldrb	r3, [r7, #3]
 800e282:	b2db      	uxtb	r3, r3
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	b2db      	uxtb	r3, r3
 800e288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e28a:	78fb      	ldrb	r3, [r7, #3]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e292:	2b80      	cmp	r3, #128	; 0x80
 800e294:	d0ef      	beq.n	800e276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e296:	4b27      	ldr	r3, [pc, #156]	; (800e334 <xPortStartScheduler+0x134>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f1c3 0307 	rsb	r3, r3, #7
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d00a      	beq.n	800e2b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	60bb      	str	r3, [r7, #8]
}
 800e2b4:	bf00      	nop
 800e2b6:	e7fe      	b.n	800e2b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2b8:	4b1e      	ldr	r3, [pc, #120]	; (800e334 <xPortStartScheduler+0x134>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	4a1d      	ldr	r2, [pc, #116]	; (800e334 <xPortStartScheduler+0x134>)
 800e2c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2c2:	4b1c      	ldr	r3, [pc, #112]	; (800e334 <xPortStartScheduler+0x134>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2ca:	4a1a      	ldr	r2, [pc, #104]	; (800e334 <xPortStartScheduler+0x134>)
 800e2cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2d6:	4b18      	ldr	r3, [pc, #96]	; (800e338 <xPortStartScheduler+0x138>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a17      	ldr	r2, [pc, #92]	; (800e338 <xPortStartScheduler+0x138>)
 800e2dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2e2:	4b15      	ldr	r3, [pc, #84]	; (800e338 <xPortStartScheduler+0x138>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a14      	ldr	r2, [pc, #80]	; (800e338 <xPortStartScheduler+0x138>)
 800e2e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2ee:	f000 f8dd 	bl	800e4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2f2:	4b12      	ldr	r3, [pc, #72]	; (800e33c <xPortStartScheduler+0x13c>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2f8:	f000 f8fc 	bl	800e4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2fc:	4b10      	ldr	r3, [pc, #64]	; (800e340 <xPortStartScheduler+0x140>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a0f      	ldr	r2, [pc, #60]	; (800e340 <xPortStartScheduler+0x140>)
 800e302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e308:	f7ff ff66 	bl	800e1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e30c:	f7fe fd38 	bl	800cd80 <vTaskSwitchContext>
	prvTaskExitError();
 800e310:	f7ff ff1e 	bl	800e150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3718      	adds	r7, #24
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	e000ed00 	.word	0xe000ed00
 800e324:	410fc271 	.word	0x410fc271
 800e328:	410fc270 	.word	0x410fc270
 800e32c:	e000e400 	.word	0xe000e400
 800e330:	200015c0 	.word	0x200015c0
 800e334:	200015c4 	.word	0x200015c4
 800e338:	e000ed20 	.word	0xe000ed20
 800e33c:	20000014 	.word	0x20000014
 800e340:	e000ef34 	.word	0xe000ef34

0800e344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	607b      	str	r3, [r7, #4]
}
 800e35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e35e:	4b0f      	ldr	r3, [pc, #60]	; (800e39c <vPortEnterCritical+0x58>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	3301      	adds	r3, #1
 800e364:	4a0d      	ldr	r2, [pc, #52]	; (800e39c <vPortEnterCritical+0x58>)
 800e366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e368:	4b0c      	ldr	r3, [pc, #48]	; (800e39c <vPortEnterCritical+0x58>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d10f      	bne.n	800e390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e370:	4b0b      	ldr	r3, [pc, #44]	; (800e3a0 <vPortEnterCritical+0x5c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00a      	beq.n	800e390 <vPortEnterCritical+0x4c>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
 800e38a:	603b      	str	r3, [r7, #0]
}
 800e38c:	bf00      	nop
 800e38e:	e7fe      	b.n	800e38e <vPortEnterCritical+0x4a>
	}
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	20000014 	.word	0x20000014
 800e3a0:	e000ed04 	.word	0xe000ed04

0800e3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3aa:	4b12      	ldr	r3, [pc, #72]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10a      	bne.n	800e3c8 <vPortExitCritical+0x24>
	__asm volatile
 800e3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	607b      	str	r3, [r7, #4]
}
 800e3c4:	bf00      	nop
 800e3c6:	e7fe      	b.n	800e3c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3c8:	4b0a      	ldr	r3, [pc, #40]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	4a09      	ldr	r2, [pc, #36]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3d2:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d105      	bne.n	800e3e6 <vPortExitCritical+0x42>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	f383 8811 	msr	BASEPRI, r3
}
 800e3e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3e6:	bf00      	nop
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	20000014 	.word	0x20000014
	...

0800e400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e400:	f3ef 8009 	mrs	r0, PSP
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	4b15      	ldr	r3, [pc, #84]	; (800e460 <pxCurrentTCBConst>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	f01e 0f10 	tst.w	lr, #16
 800e410:	bf08      	it	eq
 800e412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41a:	6010      	str	r0, [r2, #0]
 800e41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e424:	f380 8811 	msr	BASEPRI, r0
 800e428:	f3bf 8f4f 	dsb	sy
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f7fe fca6 	bl	800cd80 <vTaskSwitchContext>
 800e434:	f04f 0000 	mov.w	r0, #0
 800e438:	f380 8811 	msr	BASEPRI, r0
 800e43c:	bc09      	pop	{r0, r3}
 800e43e:	6819      	ldr	r1, [r3, #0]
 800e440:	6808      	ldr	r0, [r1, #0]
 800e442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e446:	f01e 0f10 	tst.w	lr, #16
 800e44a:	bf08      	it	eq
 800e44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e450:	f380 8809 	msr	PSP, r0
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	f3af 8000 	nop.w

0800e460 <pxCurrentTCBConst>:
 800e460:	20000f94 	.word	0x20000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop

0800e468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	607b      	str	r3, [r7, #4]
}
 800e480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e482:	f7fe fbc3 	bl	800cc0c <xTaskIncrementTick>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e48c:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <xPortSysTickHandler+0x40>)
 800e48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	2300      	movs	r3, #0
 800e496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f383 8811 	msr	BASEPRI, r3
}
 800e49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4a0:	bf00      	nop
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	e000ed04 	.word	0xe000ed04

0800e4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4b0:	4b0b      	ldr	r3, [pc, #44]	; (800e4e0 <vPortSetupTimerInterrupt+0x34>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4b6:	4b0b      	ldr	r3, [pc, #44]	; (800e4e4 <vPortSetupTimerInterrupt+0x38>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	; (800e4e8 <vPortSetupTimerInterrupt+0x3c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a0a      	ldr	r2, [pc, #40]	; (800e4ec <vPortSetupTimerInterrupt+0x40>)
 800e4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c6:	099b      	lsrs	r3, r3, #6
 800e4c8:	4a09      	ldr	r2, [pc, #36]	; (800e4f0 <vPortSetupTimerInterrupt+0x44>)
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4ce:	4b04      	ldr	r3, [pc, #16]	; (800e4e0 <vPortSetupTimerInterrupt+0x34>)
 800e4d0:	2207      	movs	r2, #7
 800e4d2:	601a      	str	r2, [r3, #0]
}
 800e4d4:	bf00      	nop
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	e000e010 	.word	0xe000e010
 800e4e4:	e000e018 	.word	0xe000e018
 800e4e8:	20000008 	.word	0x20000008
 800e4ec:	10624dd3 	.word	0x10624dd3
 800e4f0:	e000e014 	.word	0xe000e014

0800e4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e504 <vPortEnableVFP+0x10>
 800e4f8:	6801      	ldr	r1, [r0, #0]
 800e4fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4fe:	6001      	str	r1, [r0, #0]
 800e500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e502:	bf00      	nop
 800e504:	e000ed88 	.word	0xe000ed88

0800e508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e50e:	f3ef 8305 	mrs	r3, IPSR
 800e512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b0f      	cmp	r3, #15
 800e518:	d914      	bls.n	800e544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e51a:	4a17      	ldr	r2, [pc, #92]	; (800e578 <vPortValidateInterruptPriority+0x70>)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4413      	add	r3, r2
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e524:	4b15      	ldr	r3, [pc, #84]	; (800e57c <vPortValidateInterruptPriority+0x74>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	7afa      	ldrb	r2, [r7, #11]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d20a      	bcs.n	800e544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	607b      	str	r3, [r7, #4]
}
 800e540:	bf00      	nop
 800e542:	e7fe      	b.n	800e542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e544:	4b0e      	ldr	r3, [pc, #56]	; (800e580 <vPortValidateInterruptPriority+0x78>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e54c:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <vPortValidateInterruptPriority+0x7c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	429a      	cmp	r2, r3
 800e552:	d90a      	bls.n	800e56a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	603b      	str	r3, [r7, #0]
}
 800e566:	bf00      	nop
 800e568:	e7fe      	b.n	800e568 <vPortValidateInterruptPriority+0x60>
	}
 800e56a:	bf00      	nop
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	e000e3f0 	.word	0xe000e3f0
 800e57c:	200015c0 	.word	0x200015c0
 800e580:	e000ed0c 	.word	0xe000ed0c
 800e584:	200015c4 	.word	0x200015c4

0800e588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08a      	sub	sp, #40	; 0x28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e590:	2300      	movs	r3, #0
 800e592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e594:	f7fe fa7e 	bl	800ca94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e598:	4b5b      	ldr	r3, [pc, #364]	; (800e708 <pvPortMalloc+0x180>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e5a0:	f000 f920 	bl	800e7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5a4:	4b59      	ldr	r3, [pc, #356]	; (800e70c <pvPortMalloc+0x184>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f040 8093 	bne.w	800e6d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d01d      	beq.n	800e5f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4413      	add	r3, r2
 800e5be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f003 0307 	and.w	r3, r3, #7
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d014      	beq.n	800e5f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f023 0307 	bic.w	r3, r3, #7
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f003 0307 	and.w	r3, r3, #7
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00a      	beq.n	800e5f4 <pvPortMalloc+0x6c>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	617b      	str	r3, [r7, #20]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d06e      	beq.n	800e6d8 <pvPortMalloc+0x150>
 800e5fa:	4b45      	ldr	r3, [pc, #276]	; (800e710 <pvPortMalloc+0x188>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	429a      	cmp	r2, r3
 800e602:	d869      	bhi.n	800e6d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e604:	4b43      	ldr	r3, [pc, #268]	; (800e714 <pvPortMalloc+0x18c>)
 800e606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e608:	4b42      	ldr	r3, [pc, #264]	; (800e714 <pvPortMalloc+0x18c>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e60e:	e004      	b.n	800e61a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	429a      	cmp	r2, r3
 800e622:	d903      	bls.n	800e62c <pvPortMalloc+0xa4>
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1f1      	bne.n	800e610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e62c:	4b36      	ldr	r3, [pc, #216]	; (800e708 <pvPortMalloc+0x180>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e632:	429a      	cmp	r2, r3
 800e634:	d050      	beq.n	800e6d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e636:	6a3b      	ldr	r3, [r7, #32]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2208      	movs	r2, #8
 800e63c:	4413      	add	r3, r2
 800e63e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	6a3b      	ldr	r3, [r7, #32]
 800e646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	1ad2      	subs	r2, r2, r3
 800e650:	2308      	movs	r3, #8
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	429a      	cmp	r2, r3
 800e656:	d91f      	bls.n	800e698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4413      	add	r3, r2
 800e65e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	f003 0307 	and.w	r3, r3, #7
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00a      	beq.n	800e680 <pvPortMalloc+0xf8>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	613b      	str	r3, [r7, #16]
}
 800e67c:	bf00      	nop
 800e67e:	e7fe      	b.n	800e67e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	1ad2      	subs	r2, r2, r3
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e692:	69b8      	ldr	r0, [r7, #24]
 800e694:	f000 f908 	bl	800e8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e698:	4b1d      	ldr	r3, [pc, #116]	; (800e710 <pvPortMalloc+0x188>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	4a1b      	ldr	r2, [pc, #108]	; (800e710 <pvPortMalloc+0x188>)
 800e6a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e6a6:	4b1a      	ldr	r3, [pc, #104]	; (800e710 <pvPortMalloc+0x188>)
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <pvPortMalloc+0x190>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d203      	bcs.n	800e6ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6b2:	4b17      	ldr	r3, [pc, #92]	; (800e710 <pvPortMalloc+0x188>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a18      	ldr	r2, [pc, #96]	; (800e718 <pvPortMalloc+0x190>)
 800e6b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	4b13      	ldr	r3, [pc, #76]	; (800e70c <pvPortMalloc+0x184>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	431a      	orrs	r2, r3
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6ce:	4b13      	ldr	r3, [pc, #76]	; (800e71c <pvPortMalloc+0x194>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	4a11      	ldr	r2, [pc, #68]	; (800e71c <pvPortMalloc+0x194>)
 800e6d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6d8:	f7fe f9ea 	bl	800cab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	f003 0307 	and.w	r3, r3, #7
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <pvPortMalloc+0x174>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	60fb      	str	r3, [r7, #12]
}
 800e6f8:	bf00      	nop
 800e6fa:	e7fe      	b.n	800e6fa <pvPortMalloc+0x172>
	return pvReturn;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3728      	adds	r7, #40	; 0x28
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	200051d0 	.word	0x200051d0
 800e70c:	200051e4 	.word	0x200051e4
 800e710:	200051d4 	.word	0x200051d4
 800e714:	200051c8 	.word	0x200051c8
 800e718:	200051d8 	.word	0x200051d8
 800e71c:	200051dc 	.word	0x200051dc

0800e720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d04d      	beq.n	800e7ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e732:	2308      	movs	r3, #8
 800e734:	425b      	negs	r3, r3
 800e736:	697a      	ldr	r2, [r7, #20]
 800e738:	4413      	add	r3, r2
 800e73a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	685a      	ldr	r2, [r3, #4]
 800e744:	4b24      	ldr	r3, [pc, #144]	; (800e7d8 <vPortFree+0xb8>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4013      	ands	r3, r2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10a      	bne.n	800e764 <vPortFree+0x44>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	60fb      	str	r3, [r7, #12]
}
 800e760:	bf00      	nop
 800e762:	e7fe      	b.n	800e762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00a      	beq.n	800e782 <vPortFree+0x62>
	__asm volatile
 800e76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e770:	f383 8811 	msr	BASEPRI, r3
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	60bb      	str	r3, [r7, #8]
}
 800e77e:	bf00      	nop
 800e780:	e7fe      	b.n	800e780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	685a      	ldr	r2, [r3, #4]
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <vPortFree+0xb8>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4013      	ands	r3, r2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d01e      	beq.n	800e7ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d11a      	bne.n	800e7ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	4b0e      	ldr	r3, [pc, #56]	; (800e7d8 <vPortFree+0xb8>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	43db      	mvns	r3, r3
 800e7a2:	401a      	ands	r2, r3
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7a8:	f7fe f974 	bl	800ca94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <vPortFree+0xbc>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	4a09      	ldr	r2, [pc, #36]	; (800e7dc <vPortFree+0xbc>)
 800e7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7ba:	6938      	ldr	r0, [r7, #16]
 800e7bc:	f000 f874 	bl	800e8a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7c0:	4b07      	ldr	r3, [pc, #28]	; (800e7e0 <vPortFree+0xc0>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	4a06      	ldr	r2, [pc, #24]	; (800e7e0 <vPortFree+0xc0>)
 800e7c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7ca:	f7fe f971 	bl	800cab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7ce:	bf00      	nop
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	200051e4 	.word	0x200051e4
 800e7dc:	200051d4 	.word	0x200051d4
 800e7e0:	200051e0 	.word	0x200051e0

0800e7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7f0:	4b27      	ldr	r3, [pc, #156]	; (800e890 <prvHeapInit+0xac>)
 800e7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f003 0307 	and.w	r3, r3, #7
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00c      	beq.n	800e818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	3307      	adds	r3, #7
 800e802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f023 0307 	bic.w	r3, r3, #7
 800e80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	4a1f      	ldr	r2, [pc, #124]	; (800e890 <prvHeapInit+0xac>)
 800e814:	4413      	add	r3, r2
 800e816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e81c:	4a1d      	ldr	r2, [pc, #116]	; (800e894 <prvHeapInit+0xb0>)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e822:	4b1c      	ldr	r3, [pc, #112]	; (800e894 <prvHeapInit+0xb0>)
 800e824:	2200      	movs	r2, #0
 800e826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	4413      	add	r3, r2
 800e82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e830:	2208      	movs	r2, #8
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	1a9b      	subs	r3, r3, r2
 800e836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f023 0307 	bic.w	r3, r3, #7
 800e83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4a15      	ldr	r2, [pc, #84]	; (800e898 <prvHeapInit+0xb4>)
 800e844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e846:	4b14      	ldr	r3, [pc, #80]	; (800e898 <prvHeapInit+0xb4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2200      	movs	r2, #0
 800e84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e84e:	4b12      	ldr	r3, [pc, #72]	; (800e898 <prvHeapInit+0xb4>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2200      	movs	r2, #0
 800e854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	1ad2      	subs	r2, r2, r3
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e864:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <prvHeapInit+0xb4>)
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <prvHeapInit+0xb8>)
 800e872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	4a09      	ldr	r2, [pc, #36]	; (800e8a0 <prvHeapInit+0xbc>)
 800e87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e87c:	4b09      	ldr	r3, [pc, #36]	; (800e8a4 <prvHeapInit+0xc0>)
 800e87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	200015c8 	.word	0x200015c8
 800e894:	200051c8 	.word	0x200051c8
 800e898:	200051d0 	.word	0x200051d0
 800e89c:	200051d8 	.word	0x200051d8
 800e8a0:	200051d4 	.word	0x200051d4
 800e8a4:	200051e4 	.word	0x200051e4

0800e8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8b0:	4b28      	ldr	r3, [pc, #160]	; (800e954 <prvInsertBlockIntoFreeList+0xac>)
 800e8b2:	60fb      	str	r3, [r7, #12]
 800e8b4:	e002      	b.n	800e8bc <prvInsertBlockIntoFreeList+0x14>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	60fb      	str	r3, [r7, #12]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d8f7      	bhi.n	800e8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d108      	bne.n	800e8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	441a      	add	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	441a      	add	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d118      	bne.n	800e930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	4b15      	ldr	r3, [pc, #84]	; (800e958 <prvInsertBlockIntoFreeList+0xb0>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d00d      	beq.n	800e926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	441a      	add	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	e008      	b.n	800e938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e926:	4b0c      	ldr	r3, [pc, #48]	; (800e958 <prvInsertBlockIntoFreeList+0xb0>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	601a      	str	r2, [r3, #0]
 800e92e:	e003      	b.n	800e938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d002      	beq.n	800e946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e946:	bf00      	nop
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	200051c8 	.word	0x200051c8
 800e958:	200051d0 	.word	0x200051d0

0800e95c <atof>:
 800e95c:	2100      	movs	r1, #0
 800e95e:	f001 bd3d 	b.w	80103dc <strtod>

0800e962 <atoi>:
 800e962:	220a      	movs	r2, #10
 800e964:	2100      	movs	r1, #0
 800e966:	f001 be23 	b.w	80105b0 <strtol>
	...

0800e96c <__errno>:
 800e96c:	4b01      	ldr	r3, [pc, #4]	; (800e974 <__errno+0x8>)
 800e96e:	6818      	ldr	r0, [r3, #0]
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20000018 	.word	0x20000018

0800e978 <std>:
 800e978:	2300      	movs	r3, #0
 800e97a:	b510      	push	{r4, lr}
 800e97c:	4604      	mov	r4, r0
 800e97e:	e9c0 3300 	strd	r3, r3, [r0]
 800e982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e986:	6083      	str	r3, [r0, #8]
 800e988:	8181      	strh	r1, [r0, #12]
 800e98a:	6643      	str	r3, [r0, #100]	; 0x64
 800e98c:	81c2      	strh	r2, [r0, #14]
 800e98e:	6183      	str	r3, [r0, #24]
 800e990:	4619      	mov	r1, r3
 800e992:	2208      	movs	r2, #8
 800e994:	305c      	adds	r0, #92	; 0x5c
 800e996:	f000 f91a 	bl	800ebce <memset>
 800e99a:	4b05      	ldr	r3, [pc, #20]	; (800e9b0 <std+0x38>)
 800e99c:	6263      	str	r3, [r4, #36]	; 0x24
 800e99e:	4b05      	ldr	r3, [pc, #20]	; (800e9b4 <std+0x3c>)
 800e9a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9a2:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <std+0x40>)
 800e9a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9a6:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <std+0x44>)
 800e9a8:	6224      	str	r4, [r4, #32]
 800e9aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e9ac:	bd10      	pop	{r4, pc}
 800e9ae:	bf00      	nop
 800e9b0:	0800f711 	.word	0x0800f711
 800e9b4:	0800f733 	.word	0x0800f733
 800e9b8:	0800f76b 	.word	0x0800f76b
 800e9bc:	0800f78f 	.word	0x0800f78f

0800e9c0 <_cleanup_r>:
 800e9c0:	4901      	ldr	r1, [pc, #4]	; (800e9c8 <_cleanup_r+0x8>)
 800e9c2:	f000 b8af 	b.w	800eb24 <_fwalk_reent>
 800e9c6:	bf00      	nop
 800e9c8:	08011449 	.word	0x08011449

0800e9cc <__sfmoreglue>:
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	2268      	movs	r2, #104	; 0x68
 800e9d0:	1e4d      	subs	r5, r1, #1
 800e9d2:	4355      	muls	r5, r2
 800e9d4:	460e      	mov	r6, r1
 800e9d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9da:	f000 f921 	bl	800ec20 <_malloc_r>
 800e9de:	4604      	mov	r4, r0
 800e9e0:	b140      	cbz	r0, 800e9f4 <__sfmoreglue+0x28>
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e9e8:	300c      	adds	r0, #12
 800e9ea:	60a0      	str	r0, [r4, #8]
 800e9ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9f0:	f000 f8ed 	bl	800ebce <memset>
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}

0800e9f8 <__sfp_lock_acquire>:
 800e9f8:	4801      	ldr	r0, [pc, #4]	; (800ea00 <__sfp_lock_acquire+0x8>)
 800e9fa:	f000 b8d8 	b.w	800ebae <__retarget_lock_acquire_recursive>
 800e9fe:	bf00      	nop
 800ea00:	200051e9 	.word	0x200051e9

0800ea04 <__sfp_lock_release>:
 800ea04:	4801      	ldr	r0, [pc, #4]	; (800ea0c <__sfp_lock_release+0x8>)
 800ea06:	f000 b8d3 	b.w	800ebb0 <__retarget_lock_release_recursive>
 800ea0a:	bf00      	nop
 800ea0c:	200051e9 	.word	0x200051e9

0800ea10 <__sinit_lock_acquire>:
 800ea10:	4801      	ldr	r0, [pc, #4]	; (800ea18 <__sinit_lock_acquire+0x8>)
 800ea12:	f000 b8cc 	b.w	800ebae <__retarget_lock_acquire_recursive>
 800ea16:	bf00      	nop
 800ea18:	200051ea 	.word	0x200051ea

0800ea1c <__sinit_lock_release>:
 800ea1c:	4801      	ldr	r0, [pc, #4]	; (800ea24 <__sinit_lock_release+0x8>)
 800ea1e:	f000 b8c7 	b.w	800ebb0 <__retarget_lock_release_recursive>
 800ea22:	bf00      	nop
 800ea24:	200051ea 	.word	0x200051ea

0800ea28 <__sinit>:
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	f7ff fff0 	bl	800ea10 <__sinit_lock_acquire>
 800ea30:	69a3      	ldr	r3, [r4, #24]
 800ea32:	b11b      	cbz	r3, 800ea3c <__sinit+0x14>
 800ea34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea38:	f7ff bff0 	b.w	800ea1c <__sinit_lock_release>
 800ea3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea40:	6523      	str	r3, [r4, #80]	; 0x50
 800ea42:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <__sinit+0x68>)
 800ea44:	4a13      	ldr	r2, [pc, #76]	; (800ea94 <__sinit+0x6c>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea4a:	42a3      	cmp	r3, r4
 800ea4c:	bf04      	itt	eq
 800ea4e:	2301      	moveq	r3, #1
 800ea50:	61a3      	streq	r3, [r4, #24]
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 f820 	bl	800ea98 <__sfp>
 800ea58:	6060      	str	r0, [r4, #4]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f000 f81c 	bl	800ea98 <__sfp>
 800ea60:	60a0      	str	r0, [r4, #8]
 800ea62:	4620      	mov	r0, r4
 800ea64:	f000 f818 	bl	800ea98 <__sfp>
 800ea68:	2200      	movs	r2, #0
 800ea6a:	60e0      	str	r0, [r4, #12]
 800ea6c:	2104      	movs	r1, #4
 800ea6e:	6860      	ldr	r0, [r4, #4]
 800ea70:	f7ff ff82 	bl	800e978 <std>
 800ea74:	68a0      	ldr	r0, [r4, #8]
 800ea76:	2201      	movs	r2, #1
 800ea78:	2109      	movs	r1, #9
 800ea7a:	f7ff ff7d 	bl	800e978 <std>
 800ea7e:	68e0      	ldr	r0, [r4, #12]
 800ea80:	2202      	movs	r2, #2
 800ea82:	2112      	movs	r1, #18
 800ea84:	f7ff ff78 	bl	800e978 <std>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	61a3      	str	r3, [r4, #24]
 800ea8c:	e7d2      	b.n	800ea34 <__sinit+0xc>
 800ea8e:	bf00      	nop
 800ea90:	08013ba0 	.word	0x08013ba0
 800ea94:	0800e9c1 	.word	0x0800e9c1

0800ea98 <__sfp>:
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9a:	4607      	mov	r7, r0
 800ea9c:	f7ff ffac 	bl	800e9f8 <__sfp_lock_acquire>
 800eaa0:	4b1e      	ldr	r3, [pc, #120]	; (800eb1c <__sfp+0x84>)
 800eaa2:	681e      	ldr	r6, [r3, #0]
 800eaa4:	69b3      	ldr	r3, [r6, #24]
 800eaa6:	b913      	cbnz	r3, 800eaae <__sfp+0x16>
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7ff ffbd 	bl	800ea28 <__sinit>
 800eaae:	3648      	adds	r6, #72	; 0x48
 800eab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eab4:	3b01      	subs	r3, #1
 800eab6:	d503      	bpl.n	800eac0 <__sfp+0x28>
 800eab8:	6833      	ldr	r3, [r6, #0]
 800eaba:	b30b      	cbz	r3, 800eb00 <__sfp+0x68>
 800eabc:	6836      	ldr	r6, [r6, #0]
 800eabe:	e7f7      	b.n	800eab0 <__sfp+0x18>
 800eac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eac4:	b9d5      	cbnz	r5, 800eafc <__sfp+0x64>
 800eac6:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <__sfp+0x88>)
 800eac8:	60e3      	str	r3, [r4, #12]
 800eaca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eace:	6665      	str	r5, [r4, #100]	; 0x64
 800ead0:	f000 f86c 	bl	800ebac <__retarget_lock_init_recursive>
 800ead4:	f7ff ff96 	bl	800ea04 <__sfp_lock_release>
 800ead8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eadc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eae0:	6025      	str	r5, [r4, #0]
 800eae2:	61a5      	str	r5, [r4, #24]
 800eae4:	2208      	movs	r2, #8
 800eae6:	4629      	mov	r1, r5
 800eae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eaec:	f000 f86f 	bl	800ebce <memset>
 800eaf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eaf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eaf8:	4620      	mov	r0, r4
 800eafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eafc:	3468      	adds	r4, #104	; 0x68
 800eafe:	e7d9      	b.n	800eab4 <__sfp+0x1c>
 800eb00:	2104      	movs	r1, #4
 800eb02:	4638      	mov	r0, r7
 800eb04:	f7ff ff62 	bl	800e9cc <__sfmoreglue>
 800eb08:	4604      	mov	r4, r0
 800eb0a:	6030      	str	r0, [r6, #0]
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d1d5      	bne.n	800eabc <__sfp+0x24>
 800eb10:	f7ff ff78 	bl	800ea04 <__sfp_lock_release>
 800eb14:	230c      	movs	r3, #12
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	e7ee      	b.n	800eaf8 <__sfp+0x60>
 800eb1a:	bf00      	nop
 800eb1c:	08013ba0 	.word	0x08013ba0
 800eb20:	ffff0001 	.word	0xffff0001

0800eb24 <_fwalk_reent>:
 800eb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb28:	4606      	mov	r6, r0
 800eb2a:	4688      	mov	r8, r1
 800eb2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb30:	2700      	movs	r7, #0
 800eb32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb36:	f1b9 0901 	subs.w	r9, r9, #1
 800eb3a:	d505      	bpl.n	800eb48 <_fwalk_reent+0x24>
 800eb3c:	6824      	ldr	r4, [r4, #0]
 800eb3e:	2c00      	cmp	r4, #0
 800eb40:	d1f7      	bne.n	800eb32 <_fwalk_reent+0xe>
 800eb42:	4638      	mov	r0, r7
 800eb44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb48:	89ab      	ldrh	r3, [r5, #12]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d907      	bls.n	800eb5e <_fwalk_reent+0x3a>
 800eb4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb52:	3301      	adds	r3, #1
 800eb54:	d003      	beq.n	800eb5e <_fwalk_reent+0x3a>
 800eb56:	4629      	mov	r1, r5
 800eb58:	4630      	mov	r0, r6
 800eb5a:	47c0      	blx	r8
 800eb5c:	4307      	orrs	r7, r0
 800eb5e:	3568      	adds	r5, #104	; 0x68
 800eb60:	e7e9      	b.n	800eb36 <_fwalk_reent+0x12>
	...

0800eb64 <__libc_init_array>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4d0d      	ldr	r5, [pc, #52]	; (800eb9c <__libc_init_array+0x38>)
 800eb68:	4c0d      	ldr	r4, [pc, #52]	; (800eba0 <__libc_init_array+0x3c>)
 800eb6a:	1b64      	subs	r4, r4, r5
 800eb6c:	10a4      	asrs	r4, r4, #2
 800eb6e:	2600      	movs	r6, #0
 800eb70:	42a6      	cmp	r6, r4
 800eb72:	d109      	bne.n	800eb88 <__libc_init_array+0x24>
 800eb74:	4d0b      	ldr	r5, [pc, #44]	; (800eba4 <__libc_init_array+0x40>)
 800eb76:	4c0c      	ldr	r4, [pc, #48]	; (800eba8 <__libc_init_array+0x44>)
 800eb78:	f004 fcd4 	bl	8013524 <_init>
 800eb7c:	1b64      	subs	r4, r4, r5
 800eb7e:	10a4      	asrs	r4, r4, #2
 800eb80:	2600      	movs	r6, #0
 800eb82:	42a6      	cmp	r6, r4
 800eb84:	d105      	bne.n	800eb92 <__libc_init_array+0x2e>
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb8c:	4798      	blx	r3
 800eb8e:	3601      	adds	r6, #1
 800eb90:	e7ee      	b.n	800eb70 <__libc_init_array+0xc>
 800eb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb96:	4798      	blx	r3
 800eb98:	3601      	adds	r6, #1
 800eb9a:	e7f2      	b.n	800eb82 <__libc_init_array+0x1e>
 800eb9c:	080140b0 	.word	0x080140b0
 800eba0:	080140b0 	.word	0x080140b0
 800eba4:	080140b0 	.word	0x080140b0
 800eba8:	080140b4 	.word	0x080140b4

0800ebac <__retarget_lock_init_recursive>:
 800ebac:	4770      	bx	lr

0800ebae <__retarget_lock_acquire_recursive>:
 800ebae:	4770      	bx	lr

0800ebb0 <__retarget_lock_release_recursive>:
 800ebb0:	4770      	bx	lr

0800ebb2 <memcpy>:
 800ebb2:	440a      	add	r2, r1
 800ebb4:	4291      	cmp	r1, r2
 800ebb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebba:	d100      	bne.n	800ebbe <memcpy+0xc>
 800ebbc:	4770      	bx	lr
 800ebbe:	b510      	push	{r4, lr}
 800ebc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebc8:	4291      	cmp	r1, r2
 800ebca:	d1f9      	bne.n	800ebc0 <memcpy+0xe>
 800ebcc:	bd10      	pop	{r4, pc}

0800ebce <memset>:
 800ebce:	4402      	add	r2, r0
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d100      	bne.n	800ebd8 <memset+0xa>
 800ebd6:	4770      	bx	lr
 800ebd8:	f803 1b01 	strb.w	r1, [r3], #1
 800ebdc:	e7f9      	b.n	800ebd2 <memset+0x4>
	...

0800ebe0 <sbrk_aligned>:
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	4e0e      	ldr	r6, [pc, #56]	; (800ec1c <sbrk_aligned+0x3c>)
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	6831      	ldr	r1, [r6, #0]
 800ebe8:	4605      	mov	r5, r0
 800ebea:	b911      	cbnz	r1, 800ebf2 <sbrk_aligned+0x12>
 800ebec:	f000 fd60 	bl	800f6b0 <_sbrk_r>
 800ebf0:	6030      	str	r0, [r6, #0]
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f000 fd5b 	bl	800f6b0 <_sbrk_r>
 800ebfa:	1c43      	adds	r3, r0, #1
 800ebfc:	d00a      	beq.n	800ec14 <sbrk_aligned+0x34>
 800ebfe:	1cc4      	adds	r4, r0, #3
 800ec00:	f024 0403 	bic.w	r4, r4, #3
 800ec04:	42a0      	cmp	r0, r4
 800ec06:	d007      	beq.n	800ec18 <sbrk_aligned+0x38>
 800ec08:	1a21      	subs	r1, r4, r0
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f000 fd50 	bl	800f6b0 <_sbrk_r>
 800ec10:	3001      	adds	r0, #1
 800ec12:	d101      	bne.n	800ec18 <sbrk_aligned+0x38>
 800ec14:	f04f 34ff 	mov.w	r4, #4294967295
 800ec18:	4620      	mov	r0, r4
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}
 800ec1c:	200051f0 	.word	0x200051f0

0800ec20 <_malloc_r>:
 800ec20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec24:	1ccd      	adds	r5, r1, #3
 800ec26:	f025 0503 	bic.w	r5, r5, #3
 800ec2a:	3508      	adds	r5, #8
 800ec2c:	2d0c      	cmp	r5, #12
 800ec2e:	bf38      	it	cc
 800ec30:	250c      	movcc	r5, #12
 800ec32:	2d00      	cmp	r5, #0
 800ec34:	4607      	mov	r7, r0
 800ec36:	db01      	blt.n	800ec3c <_malloc_r+0x1c>
 800ec38:	42a9      	cmp	r1, r5
 800ec3a:	d905      	bls.n	800ec48 <_malloc_r+0x28>
 800ec3c:	230c      	movs	r3, #12
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	2600      	movs	r6, #0
 800ec42:	4630      	mov	r0, r6
 800ec44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec48:	4e2e      	ldr	r6, [pc, #184]	; (800ed04 <_malloc_r+0xe4>)
 800ec4a:	f002 ffeb 	bl	8011c24 <__malloc_lock>
 800ec4e:	6833      	ldr	r3, [r6, #0]
 800ec50:	461c      	mov	r4, r3
 800ec52:	bb34      	cbnz	r4, 800eca2 <_malloc_r+0x82>
 800ec54:	4629      	mov	r1, r5
 800ec56:	4638      	mov	r0, r7
 800ec58:	f7ff ffc2 	bl	800ebe0 <sbrk_aligned>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	4604      	mov	r4, r0
 800ec60:	d14d      	bne.n	800ecfe <_malloc_r+0xde>
 800ec62:	6834      	ldr	r4, [r6, #0]
 800ec64:	4626      	mov	r6, r4
 800ec66:	2e00      	cmp	r6, #0
 800ec68:	d140      	bne.n	800ecec <_malloc_r+0xcc>
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	4638      	mov	r0, r7
 800ec70:	eb04 0803 	add.w	r8, r4, r3
 800ec74:	f000 fd1c 	bl	800f6b0 <_sbrk_r>
 800ec78:	4580      	cmp	r8, r0
 800ec7a:	d13a      	bne.n	800ecf2 <_malloc_r+0xd2>
 800ec7c:	6821      	ldr	r1, [r4, #0]
 800ec7e:	3503      	adds	r5, #3
 800ec80:	1a6d      	subs	r5, r5, r1
 800ec82:	f025 0503 	bic.w	r5, r5, #3
 800ec86:	3508      	adds	r5, #8
 800ec88:	2d0c      	cmp	r5, #12
 800ec8a:	bf38      	it	cc
 800ec8c:	250c      	movcc	r5, #12
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4638      	mov	r0, r7
 800ec92:	f7ff ffa5 	bl	800ebe0 <sbrk_aligned>
 800ec96:	3001      	adds	r0, #1
 800ec98:	d02b      	beq.n	800ecf2 <_malloc_r+0xd2>
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	442b      	add	r3, r5
 800ec9e:	6023      	str	r3, [r4, #0]
 800eca0:	e00e      	b.n	800ecc0 <_malloc_r+0xa0>
 800eca2:	6822      	ldr	r2, [r4, #0]
 800eca4:	1b52      	subs	r2, r2, r5
 800eca6:	d41e      	bmi.n	800ece6 <_malloc_r+0xc6>
 800eca8:	2a0b      	cmp	r2, #11
 800ecaa:	d916      	bls.n	800ecda <_malloc_r+0xba>
 800ecac:	1961      	adds	r1, r4, r5
 800ecae:	42a3      	cmp	r3, r4
 800ecb0:	6025      	str	r5, [r4, #0]
 800ecb2:	bf18      	it	ne
 800ecb4:	6059      	strne	r1, [r3, #4]
 800ecb6:	6863      	ldr	r3, [r4, #4]
 800ecb8:	bf08      	it	eq
 800ecba:	6031      	streq	r1, [r6, #0]
 800ecbc:	5162      	str	r2, [r4, r5]
 800ecbe:	604b      	str	r3, [r1, #4]
 800ecc0:	4638      	mov	r0, r7
 800ecc2:	f104 060b 	add.w	r6, r4, #11
 800ecc6:	f002 ffb3 	bl	8011c30 <__malloc_unlock>
 800ecca:	f026 0607 	bic.w	r6, r6, #7
 800ecce:	1d23      	adds	r3, r4, #4
 800ecd0:	1af2      	subs	r2, r6, r3
 800ecd2:	d0b6      	beq.n	800ec42 <_malloc_r+0x22>
 800ecd4:	1b9b      	subs	r3, r3, r6
 800ecd6:	50a3      	str	r3, [r4, r2]
 800ecd8:	e7b3      	b.n	800ec42 <_malloc_r+0x22>
 800ecda:	6862      	ldr	r2, [r4, #4]
 800ecdc:	42a3      	cmp	r3, r4
 800ecde:	bf0c      	ite	eq
 800ece0:	6032      	streq	r2, [r6, #0]
 800ece2:	605a      	strne	r2, [r3, #4]
 800ece4:	e7ec      	b.n	800ecc0 <_malloc_r+0xa0>
 800ece6:	4623      	mov	r3, r4
 800ece8:	6864      	ldr	r4, [r4, #4]
 800ecea:	e7b2      	b.n	800ec52 <_malloc_r+0x32>
 800ecec:	4634      	mov	r4, r6
 800ecee:	6876      	ldr	r6, [r6, #4]
 800ecf0:	e7b9      	b.n	800ec66 <_malloc_r+0x46>
 800ecf2:	230c      	movs	r3, #12
 800ecf4:	603b      	str	r3, [r7, #0]
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	f002 ff9a 	bl	8011c30 <__malloc_unlock>
 800ecfc:	e7a1      	b.n	800ec42 <_malloc_r+0x22>
 800ecfe:	6025      	str	r5, [r4, #0]
 800ed00:	e7de      	b.n	800ecc0 <_malloc_r+0xa0>
 800ed02:	bf00      	nop
 800ed04:	200051ec 	.word	0x200051ec

0800ed08 <__cvt>:
 800ed08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed0c:	ec55 4b10 	vmov	r4, r5, d0
 800ed10:	2d00      	cmp	r5, #0
 800ed12:	460e      	mov	r6, r1
 800ed14:	4619      	mov	r1, r3
 800ed16:	462b      	mov	r3, r5
 800ed18:	bfbb      	ittet	lt
 800ed1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ed1e:	461d      	movlt	r5, r3
 800ed20:	2300      	movge	r3, #0
 800ed22:	232d      	movlt	r3, #45	; 0x2d
 800ed24:	700b      	strb	r3, [r1, #0]
 800ed26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed2c:	4691      	mov	r9, r2
 800ed2e:	f023 0820 	bic.w	r8, r3, #32
 800ed32:	bfbc      	itt	lt
 800ed34:	4622      	movlt	r2, r4
 800ed36:	4614      	movlt	r4, r2
 800ed38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed3c:	d005      	beq.n	800ed4a <__cvt+0x42>
 800ed3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ed42:	d100      	bne.n	800ed46 <__cvt+0x3e>
 800ed44:	3601      	adds	r6, #1
 800ed46:	2102      	movs	r1, #2
 800ed48:	e000      	b.n	800ed4c <__cvt+0x44>
 800ed4a:	2103      	movs	r1, #3
 800ed4c:	ab03      	add	r3, sp, #12
 800ed4e:	9301      	str	r3, [sp, #4]
 800ed50:	ab02      	add	r3, sp, #8
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	ec45 4b10 	vmov	d0, r4, r5
 800ed58:	4653      	mov	r3, sl
 800ed5a:	4632      	mov	r2, r6
 800ed5c:	f001 fd00 	bl	8010760 <_dtoa_r>
 800ed60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ed64:	4607      	mov	r7, r0
 800ed66:	d102      	bne.n	800ed6e <__cvt+0x66>
 800ed68:	f019 0f01 	tst.w	r9, #1
 800ed6c:	d022      	beq.n	800edb4 <__cvt+0xac>
 800ed6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed72:	eb07 0906 	add.w	r9, r7, r6
 800ed76:	d110      	bne.n	800ed9a <__cvt+0x92>
 800ed78:	783b      	ldrb	r3, [r7, #0]
 800ed7a:	2b30      	cmp	r3, #48	; 0x30
 800ed7c:	d10a      	bne.n	800ed94 <__cvt+0x8c>
 800ed7e:	2200      	movs	r2, #0
 800ed80:	2300      	movs	r3, #0
 800ed82:	4620      	mov	r0, r4
 800ed84:	4629      	mov	r1, r5
 800ed86:	f7f1 feb7 	bl	8000af8 <__aeabi_dcmpeq>
 800ed8a:	b918      	cbnz	r0, 800ed94 <__cvt+0x8c>
 800ed8c:	f1c6 0601 	rsb	r6, r6, #1
 800ed90:	f8ca 6000 	str.w	r6, [sl]
 800ed94:	f8da 3000 	ldr.w	r3, [sl]
 800ed98:	4499      	add	r9, r3
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	4629      	mov	r1, r5
 800eda2:	f7f1 fea9 	bl	8000af8 <__aeabi_dcmpeq>
 800eda6:	b108      	cbz	r0, 800edac <__cvt+0xa4>
 800eda8:	f8cd 900c 	str.w	r9, [sp, #12]
 800edac:	2230      	movs	r2, #48	; 0x30
 800edae:	9b03      	ldr	r3, [sp, #12]
 800edb0:	454b      	cmp	r3, r9
 800edb2:	d307      	bcc.n	800edc4 <__cvt+0xbc>
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800edb8:	1bdb      	subs	r3, r3, r7
 800edba:	4638      	mov	r0, r7
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	b004      	add	sp, #16
 800edc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc4:	1c59      	adds	r1, r3, #1
 800edc6:	9103      	str	r1, [sp, #12]
 800edc8:	701a      	strb	r2, [r3, #0]
 800edca:	e7f0      	b.n	800edae <__cvt+0xa6>

0800edcc <__exponent>:
 800edcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edce:	4603      	mov	r3, r0
 800edd0:	2900      	cmp	r1, #0
 800edd2:	bfb8      	it	lt
 800edd4:	4249      	neglt	r1, r1
 800edd6:	f803 2b02 	strb.w	r2, [r3], #2
 800edda:	bfb4      	ite	lt
 800eddc:	222d      	movlt	r2, #45	; 0x2d
 800edde:	222b      	movge	r2, #43	; 0x2b
 800ede0:	2909      	cmp	r1, #9
 800ede2:	7042      	strb	r2, [r0, #1]
 800ede4:	dd2a      	ble.n	800ee3c <__exponent+0x70>
 800ede6:	f10d 0407 	add.w	r4, sp, #7
 800edea:	46a4      	mov	ip, r4
 800edec:	270a      	movs	r7, #10
 800edee:	46a6      	mov	lr, r4
 800edf0:	460a      	mov	r2, r1
 800edf2:	fb91 f6f7 	sdiv	r6, r1, r7
 800edf6:	fb07 1516 	mls	r5, r7, r6, r1
 800edfa:	3530      	adds	r5, #48	; 0x30
 800edfc:	2a63      	cmp	r2, #99	; 0x63
 800edfe:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee06:	4631      	mov	r1, r6
 800ee08:	dcf1      	bgt.n	800edee <__exponent+0x22>
 800ee0a:	3130      	adds	r1, #48	; 0x30
 800ee0c:	f1ae 0502 	sub.w	r5, lr, #2
 800ee10:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee14:	1c44      	adds	r4, r0, #1
 800ee16:	4629      	mov	r1, r5
 800ee18:	4561      	cmp	r1, ip
 800ee1a:	d30a      	bcc.n	800ee32 <__exponent+0x66>
 800ee1c:	f10d 0209 	add.w	r2, sp, #9
 800ee20:	eba2 020e 	sub.w	r2, r2, lr
 800ee24:	4565      	cmp	r5, ip
 800ee26:	bf88      	it	hi
 800ee28:	2200      	movhi	r2, #0
 800ee2a:	4413      	add	r3, r2
 800ee2c:	1a18      	subs	r0, r3, r0
 800ee2e:	b003      	add	sp, #12
 800ee30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee36:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ee3a:	e7ed      	b.n	800ee18 <__exponent+0x4c>
 800ee3c:	2330      	movs	r3, #48	; 0x30
 800ee3e:	3130      	adds	r1, #48	; 0x30
 800ee40:	7083      	strb	r3, [r0, #2]
 800ee42:	70c1      	strb	r1, [r0, #3]
 800ee44:	1d03      	adds	r3, r0, #4
 800ee46:	e7f1      	b.n	800ee2c <__exponent+0x60>

0800ee48 <_printf_float>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	ed2d 8b02 	vpush	{d8}
 800ee50:	b08d      	sub	sp, #52	; 0x34
 800ee52:	460c      	mov	r4, r1
 800ee54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ee58:	4616      	mov	r6, r2
 800ee5a:	461f      	mov	r7, r3
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	f002 feb1 	bl	8011bc4 <_localeconv_r>
 800ee62:	f8d0 a000 	ldr.w	sl, [r0]
 800ee66:	4650      	mov	r0, sl
 800ee68:	f7f1 f9c4 	bl	80001f4 <strlen>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	9305      	str	r3, [sp, #20]
 800ee74:	f8d8 3000 	ldr.w	r3, [r8]
 800ee78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ee7c:	3307      	adds	r3, #7
 800ee7e:	f023 0307 	bic.w	r3, r3, #7
 800ee82:	f103 0208 	add.w	r2, r3, #8
 800ee86:	f8c8 2000 	str.w	r2, [r8]
 800ee8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ee92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ee96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee9a:	9307      	str	r3, [sp, #28]
 800ee9c:	f8cd 8018 	str.w	r8, [sp, #24]
 800eea0:	ee08 0a10 	vmov	s16, r0
 800eea4:	4b9f      	ldr	r3, [pc, #636]	; (800f124 <_printf_float+0x2dc>)
 800eea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeaa:	f04f 32ff 	mov.w	r2, #4294967295
 800eeae:	f7f1 fe55 	bl	8000b5c <__aeabi_dcmpun>
 800eeb2:	bb88      	cbnz	r0, 800ef18 <_printf_float+0xd0>
 800eeb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeb8:	4b9a      	ldr	r3, [pc, #616]	; (800f124 <_printf_float+0x2dc>)
 800eeba:	f04f 32ff 	mov.w	r2, #4294967295
 800eebe:	f7f1 fe2f 	bl	8000b20 <__aeabi_dcmple>
 800eec2:	bb48      	cbnz	r0, 800ef18 <_printf_float+0xd0>
 800eec4:	2200      	movs	r2, #0
 800eec6:	2300      	movs	r3, #0
 800eec8:	4640      	mov	r0, r8
 800eeca:	4649      	mov	r1, r9
 800eecc:	f7f1 fe1e 	bl	8000b0c <__aeabi_dcmplt>
 800eed0:	b110      	cbz	r0, 800eed8 <_printf_float+0x90>
 800eed2:	232d      	movs	r3, #45	; 0x2d
 800eed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eed8:	4b93      	ldr	r3, [pc, #588]	; (800f128 <_printf_float+0x2e0>)
 800eeda:	4894      	ldr	r0, [pc, #592]	; (800f12c <_printf_float+0x2e4>)
 800eedc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eee0:	bf94      	ite	ls
 800eee2:	4698      	movls	r8, r3
 800eee4:	4680      	movhi	r8, r0
 800eee6:	2303      	movs	r3, #3
 800eee8:	6123      	str	r3, [r4, #16]
 800eeea:	9b05      	ldr	r3, [sp, #20]
 800eeec:	f023 0204 	bic.w	r2, r3, #4
 800eef0:	6022      	str	r2, [r4, #0]
 800eef2:	f04f 0900 	mov.w	r9, #0
 800eef6:	9700      	str	r7, [sp, #0]
 800eef8:	4633      	mov	r3, r6
 800eefa:	aa0b      	add	r2, sp, #44	; 0x2c
 800eefc:	4621      	mov	r1, r4
 800eefe:	4628      	mov	r0, r5
 800ef00:	f000 f9d8 	bl	800f2b4 <_printf_common>
 800ef04:	3001      	adds	r0, #1
 800ef06:	f040 8090 	bne.w	800f02a <_printf_float+0x1e2>
 800ef0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0e:	b00d      	add	sp, #52	; 0x34
 800ef10:	ecbd 8b02 	vpop	{d8}
 800ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef18:	4642      	mov	r2, r8
 800ef1a:	464b      	mov	r3, r9
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	4649      	mov	r1, r9
 800ef20:	f7f1 fe1c 	bl	8000b5c <__aeabi_dcmpun>
 800ef24:	b140      	cbz	r0, 800ef38 <_printf_float+0xf0>
 800ef26:	464b      	mov	r3, r9
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	bfbc      	itt	lt
 800ef2c:	232d      	movlt	r3, #45	; 0x2d
 800ef2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ef32:	487f      	ldr	r0, [pc, #508]	; (800f130 <_printf_float+0x2e8>)
 800ef34:	4b7f      	ldr	r3, [pc, #508]	; (800f134 <_printf_float+0x2ec>)
 800ef36:	e7d1      	b.n	800eedc <_printf_float+0x94>
 800ef38:	6863      	ldr	r3, [r4, #4]
 800ef3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ef3e:	9206      	str	r2, [sp, #24]
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	d13f      	bne.n	800efc4 <_printf_float+0x17c>
 800ef44:	2306      	movs	r3, #6
 800ef46:	6063      	str	r3, [r4, #4]
 800ef48:	9b05      	ldr	r3, [sp, #20]
 800ef4a:	6861      	ldr	r1, [r4, #4]
 800ef4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ef50:	2300      	movs	r3, #0
 800ef52:	9303      	str	r3, [sp, #12]
 800ef54:	ab0a      	add	r3, sp, #40	; 0x28
 800ef56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ef5a:	ab09      	add	r3, sp, #36	; 0x24
 800ef5c:	ec49 8b10 	vmov	d0, r8, r9
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	6022      	str	r2, [r4, #0]
 800ef64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f7ff fecd 	bl	800ed08 <__cvt>
 800ef6e:	9b06      	ldr	r3, [sp, #24]
 800ef70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef72:	2b47      	cmp	r3, #71	; 0x47
 800ef74:	4680      	mov	r8, r0
 800ef76:	d108      	bne.n	800ef8a <_printf_float+0x142>
 800ef78:	1cc8      	adds	r0, r1, #3
 800ef7a:	db02      	blt.n	800ef82 <_printf_float+0x13a>
 800ef7c:	6863      	ldr	r3, [r4, #4]
 800ef7e:	4299      	cmp	r1, r3
 800ef80:	dd41      	ble.n	800f006 <_printf_float+0x1be>
 800ef82:	f1ab 0b02 	sub.w	fp, fp, #2
 800ef86:	fa5f fb8b 	uxtb.w	fp, fp
 800ef8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef8e:	d820      	bhi.n	800efd2 <_printf_float+0x18a>
 800ef90:	3901      	subs	r1, #1
 800ef92:	465a      	mov	r2, fp
 800ef94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef98:	9109      	str	r1, [sp, #36]	; 0x24
 800ef9a:	f7ff ff17 	bl	800edcc <__exponent>
 800ef9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efa0:	1813      	adds	r3, r2, r0
 800efa2:	2a01      	cmp	r2, #1
 800efa4:	4681      	mov	r9, r0
 800efa6:	6123      	str	r3, [r4, #16]
 800efa8:	dc02      	bgt.n	800efb0 <_printf_float+0x168>
 800efaa:	6822      	ldr	r2, [r4, #0]
 800efac:	07d2      	lsls	r2, r2, #31
 800efae:	d501      	bpl.n	800efb4 <_printf_float+0x16c>
 800efb0:	3301      	adds	r3, #1
 800efb2:	6123      	str	r3, [r4, #16]
 800efb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d09c      	beq.n	800eef6 <_printf_float+0xae>
 800efbc:	232d      	movs	r3, #45	; 0x2d
 800efbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efc2:	e798      	b.n	800eef6 <_printf_float+0xae>
 800efc4:	9a06      	ldr	r2, [sp, #24]
 800efc6:	2a47      	cmp	r2, #71	; 0x47
 800efc8:	d1be      	bne.n	800ef48 <_printf_float+0x100>
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1bc      	bne.n	800ef48 <_printf_float+0x100>
 800efce:	2301      	movs	r3, #1
 800efd0:	e7b9      	b.n	800ef46 <_printf_float+0xfe>
 800efd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800efd6:	d118      	bne.n	800f00a <_printf_float+0x1c2>
 800efd8:	2900      	cmp	r1, #0
 800efda:	6863      	ldr	r3, [r4, #4]
 800efdc:	dd0b      	ble.n	800eff6 <_printf_float+0x1ae>
 800efde:	6121      	str	r1, [r4, #16]
 800efe0:	b913      	cbnz	r3, 800efe8 <_printf_float+0x1a0>
 800efe2:	6822      	ldr	r2, [r4, #0]
 800efe4:	07d0      	lsls	r0, r2, #31
 800efe6:	d502      	bpl.n	800efee <_printf_float+0x1a6>
 800efe8:	3301      	adds	r3, #1
 800efea:	440b      	add	r3, r1
 800efec:	6123      	str	r3, [r4, #16]
 800efee:	65a1      	str	r1, [r4, #88]	; 0x58
 800eff0:	f04f 0900 	mov.w	r9, #0
 800eff4:	e7de      	b.n	800efb4 <_printf_float+0x16c>
 800eff6:	b913      	cbnz	r3, 800effe <_printf_float+0x1b6>
 800eff8:	6822      	ldr	r2, [r4, #0]
 800effa:	07d2      	lsls	r2, r2, #31
 800effc:	d501      	bpl.n	800f002 <_printf_float+0x1ba>
 800effe:	3302      	adds	r3, #2
 800f000:	e7f4      	b.n	800efec <_printf_float+0x1a4>
 800f002:	2301      	movs	r3, #1
 800f004:	e7f2      	b.n	800efec <_printf_float+0x1a4>
 800f006:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f00c:	4299      	cmp	r1, r3
 800f00e:	db05      	blt.n	800f01c <_printf_float+0x1d4>
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	6121      	str	r1, [r4, #16]
 800f014:	07d8      	lsls	r0, r3, #31
 800f016:	d5ea      	bpl.n	800efee <_printf_float+0x1a6>
 800f018:	1c4b      	adds	r3, r1, #1
 800f01a:	e7e7      	b.n	800efec <_printf_float+0x1a4>
 800f01c:	2900      	cmp	r1, #0
 800f01e:	bfd4      	ite	le
 800f020:	f1c1 0202 	rsble	r2, r1, #2
 800f024:	2201      	movgt	r2, #1
 800f026:	4413      	add	r3, r2
 800f028:	e7e0      	b.n	800efec <_printf_float+0x1a4>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	055a      	lsls	r2, r3, #21
 800f02e:	d407      	bmi.n	800f040 <_printf_float+0x1f8>
 800f030:	6923      	ldr	r3, [r4, #16]
 800f032:	4642      	mov	r2, r8
 800f034:	4631      	mov	r1, r6
 800f036:	4628      	mov	r0, r5
 800f038:	47b8      	blx	r7
 800f03a:	3001      	adds	r0, #1
 800f03c:	d12c      	bne.n	800f098 <_printf_float+0x250>
 800f03e:	e764      	b.n	800ef0a <_printf_float+0xc2>
 800f040:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f044:	f240 80e0 	bls.w	800f208 <_printf_float+0x3c0>
 800f048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f04c:	2200      	movs	r2, #0
 800f04e:	2300      	movs	r3, #0
 800f050:	f7f1 fd52 	bl	8000af8 <__aeabi_dcmpeq>
 800f054:	2800      	cmp	r0, #0
 800f056:	d034      	beq.n	800f0c2 <_printf_float+0x27a>
 800f058:	4a37      	ldr	r2, [pc, #220]	; (800f138 <_printf_float+0x2f0>)
 800f05a:	2301      	movs	r3, #1
 800f05c:	4631      	mov	r1, r6
 800f05e:	4628      	mov	r0, r5
 800f060:	47b8      	blx	r7
 800f062:	3001      	adds	r0, #1
 800f064:	f43f af51 	beq.w	800ef0a <_printf_float+0xc2>
 800f068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f06c:	429a      	cmp	r2, r3
 800f06e:	db02      	blt.n	800f076 <_printf_float+0x22e>
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	07d8      	lsls	r0, r3, #31
 800f074:	d510      	bpl.n	800f098 <_printf_float+0x250>
 800f076:	ee18 3a10 	vmov	r3, s16
 800f07a:	4652      	mov	r2, sl
 800f07c:	4631      	mov	r1, r6
 800f07e:	4628      	mov	r0, r5
 800f080:	47b8      	blx	r7
 800f082:	3001      	adds	r0, #1
 800f084:	f43f af41 	beq.w	800ef0a <_printf_float+0xc2>
 800f088:	f04f 0800 	mov.w	r8, #0
 800f08c:	f104 091a 	add.w	r9, r4, #26
 800f090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f092:	3b01      	subs	r3, #1
 800f094:	4543      	cmp	r3, r8
 800f096:	dc09      	bgt.n	800f0ac <_printf_float+0x264>
 800f098:	6823      	ldr	r3, [r4, #0]
 800f09a:	079b      	lsls	r3, r3, #30
 800f09c:	f100 8105 	bmi.w	800f2aa <_printf_float+0x462>
 800f0a0:	68e0      	ldr	r0, [r4, #12]
 800f0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0a4:	4298      	cmp	r0, r3
 800f0a6:	bfb8      	it	lt
 800f0a8:	4618      	movlt	r0, r3
 800f0aa:	e730      	b.n	800ef0e <_printf_float+0xc6>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	464a      	mov	r2, r9
 800f0b0:	4631      	mov	r1, r6
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	47b8      	blx	r7
 800f0b6:	3001      	adds	r0, #1
 800f0b8:	f43f af27 	beq.w	800ef0a <_printf_float+0xc2>
 800f0bc:	f108 0801 	add.w	r8, r8, #1
 800f0c0:	e7e6      	b.n	800f090 <_printf_float+0x248>
 800f0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	dc39      	bgt.n	800f13c <_printf_float+0x2f4>
 800f0c8:	4a1b      	ldr	r2, [pc, #108]	; (800f138 <_printf_float+0x2f0>)
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	47b8      	blx	r7
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	f43f af19 	beq.w	800ef0a <_printf_float+0xc2>
 800f0d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	d102      	bne.n	800f0e6 <_printf_float+0x29e>
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	07d9      	lsls	r1, r3, #31
 800f0e4:	d5d8      	bpl.n	800f098 <_printf_float+0x250>
 800f0e6:	ee18 3a10 	vmov	r3, s16
 800f0ea:	4652      	mov	r2, sl
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	47b8      	blx	r7
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	f43f af09 	beq.w	800ef0a <_printf_float+0xc2>
 800f0f8:	f04f 0900 	mov.w	r9, #0
 800f0fc:	f104 0a1a 	add.w	sl, r4, #26
 800f100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f102:	425b      	negs	r3, r3
 800f104:	454b      	cmp	r3, r9
 800f106:	dc01      	bgt.n	800f10c <_printf_float+0x2c4>
 800f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10a:	e792      	b.n	800f032 <_printf_float+0x1ea>
 800f10c:	2301      	movs	r3, #1
 800f10e:	4652      	mov	r2, sl
 800f110:	4631      	mov	r1, r6
 800f112:	4628      	mov	r0, r5
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	f43f aef7 	beq.w	800ef0a <_printf_float+0xc2>
 800f11c:	f109 0901 	add.w	r9, r9, #1
 800f120:	e7ee      	b.n	800f100 <_printf_float+0x2b8>
 800f122:	bf00      	nop
 800f124:	7fefffff 	.word	0x7fefffff
 800f128:	08013ba4 	.word	0x08013ba4
 800f12c:	08013ba8 	.word	0x08013ba8
 800f130:	08013bb0 	.word	0x08013bb0
 800f134:	08013bac 	.word	0x08013bac
 800f138:	08013bb4 	.word	0x08013bb4
 800f13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f13e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f140:	429a      	cmp	r2, r3
 800f142:	bfa8      	it	ge
 800f144:	461a      	movge	r2, r3
 800f146:	2a00      	cmp	r2, #0
 800f148:	4691      	mov	r9, r2
 800f14a:	dc37      	bgt.n	800f1bc <_printf_float+0x374>
 800f14c:	f04f 0b00 	mov.w	fp, #0
 800f150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f154:	f104 021a 	add.w	r2, r4, #26
 800f158:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f15a:	9305      	str	r3, [sp, #20]
 800f15c:	eba3 0309 	sub.w	r3, r3, r9
 800f160:	455b      	cmp	r3, fp
 800f162:	dc33      	bgt.n	800f1cc <_printf_float+0x384>
 800f164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f168:	429a      	cmp	r2, r3
 800f16a:	db3b      	blt.n	800f1e4 <_printf_float+0x39c>
 800f16c:	6823      	ldr	r3, [r4, #0]
 800f16e:	07da      	lsls	r2, r3, #31
 800f170:	d438      	bmi.n	800f1e4 <_printf_float+0x39c>
 800f172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f174:	9a05      	ldr	r2, [sp, #20]
 800f176:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f178:	1a9a      	subs	r2, r3, r2
 800f17a:	eba3 0901 	sub.w	r9, r3, r1
 800f17e:	4591      	cmp	r9, r2
 800f180:	bfa8      	it	ge
 800f182:	4691      	movge	r9, r2
 800f184:	f1b9 0f00 	cmp.w	r9, #0
 800f188:	dc35      	bgt.n	800f1f6 <_printf_float+0x3ae>
 800f18a:	f04f 0800 	mov.w	r8, #0
 800f18e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f192:	f104 0a1a 	add.w	sl, r4, #26
 800f196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f19a:	1a9b      	subs	r3, r3, r2
 800f19c:	eba3 0309 	sub.w	r3, r3, r9
 800f1a0:	4543      	cmp	r3, r8
 800f1a2:	f77f af79 	ble.w	800f098 <_printf_float+0x250>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4652      	mov	r2, sl
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	47b8      	blx	r7
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	f43f aeaa 	beq.w	800ef0a <_printf_float+0xc2>
 800f1b6:	f108 0801 	add.w	r8, r8, #1
 800f1ba:	e7ec      	b.n	800f196 <_printf_float+0x34e>
 800f1bc:	4613      	mov	r3, r2
 800f1be:	4631      	mov	r1, r6
 800f1c0:	4642      	mov	r2, r8
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	47b8      	blx	r7
 800f1c6:	3001      	adds	r0, #1
 800f1c8:	d1c0      	bne.n	800f14c <_printf_float+0x304>
 800f1ca:	e69e      	b.n	800ef0a <_printf_float+0xc2>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	9205      	str	r2, [sp, #20]
 800f1d4:	47b8      	blx	r7
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	f43f ae97 	beq.w	800ef0a <_printf_float+0xc2>
 800f1dc:	9a05      	ldr	r2, [sp, #20]
 800f1de:	f10b 0b01 	add.w	fp, fp, #1
 800f1e2:	e7b9      	b.n	800f158 <_printf_float+0x310>
 800f1e4:	ee18 3a10 	vmov	r3, s16
 800f1e8:	4652      	mov	r2, sl
 800f1ea:	4631      	mov	r1, r6
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	47b8      	blx	r7
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	d1be      	bne.n	800f172 <_printf_float+0x32a>
 800f1f4:	e689      	b.n	800ef0a <_printf_float+0xc2>
 800f1f6:	9a05      	ldr	r2, [sp, #20]
 800f1f8:	464b      	mov	r3, r9
 800f1fa:	4442      	add	r2, r8
 800f1fc:	4631      	mov	r1, r6
 800f1fe:	4628      	mov	r0, r5
 800f200:	47b8      	blx	r7
 800f202:	3001      	adds	r0, #1
 800f204:	d1c1      	bne.n	800f18a <_printf_float+0x342>
 800f206:	e680      	b.n	800ef0a <_printf_float+0xc2>
 800f208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f20a:	2a01      	cmp	r2, #1
 800f20c:	dc01      	bgt.n	800f212 <_printf_float+0x3ca>
 800f20e:	07db      	lsls	r3, r3, #31
 800f210:	d538      	bpl.n	800f284 <_printf_float+0x43c>
 800f212:	2301      	movs	r3, #1
 800f214:	4642      	mov	r2, r8
 800f216:	4631      	mov	r1, r6
 800f218:	4628      	mov	r0, r5
 800f21a:	47b8      	blx	r7
 800f21c:	3001      	adds	r0, #1
 800f21e:	f43f ae74 	beq.w	800ef0a <_printf_float+0xc2>
 800f222:	ee18 3a10 	vmov	r3, s16
 800f226:	4652      	mov	r2, sl
 800f228:	4631      	mov	r1, r6
 800f22a:	4628      	mov	r0, r5
 800f22c:	47b8      	blx	r7
 800f22e:	3001      	adds	r0, #1
 800f230:	f43f ae6b 	beq.w	800ef0a <_printf_float+0xc2>
 800f234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f238:	2200      	movs	r2, #0
 800f23a:	2300      	movs	r3, #0
 800f23c:	f7f1 fc5c 	bl	8000af8 <__aeabi_dcmpeq>
 800f240:	b9d8      	cbnz	r0, 800f27a <_printf_float+0x432>
 800f242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f244:	f108 0201 	add.w	r2, r8, #1
 800f248:	3b01      	subs	r3, #1
 800f24a:	4631      	mov	r1, r6
 800f24c:	4628      	mov	r0, r5
 800f24e:	47b8      	blx	r7
 800f250:	3001      	adds	r0, #1
 800f252:	d10e      	bne.n	800f272 <_printf_float+0x42a>
 800f254:	e659      	b.n	800ef0a <_printf_float+0xc2>
 800f256:	2301      	movs	r3, #1
 800f258:	4652      	mov	r2, sl
 800f25a:	4631      	mov	r1, r6
 800f25c:	4628      	mov	r0, r5
 800f25e:	47b8      	blx	r7
 800f260:	3001      	adds	r0, #1
 800f262:	f43f ae52 	beq.w	800ef0a <_printf_float+0xc2>
 800f266:	f108 0801 	add.w	r8, r8, #1
 800f26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26c:	3b01      	subs	r3, #1
 800f26e:	4543      	cmp	r3, r8
 800f270:	dcf1      	bgt.n	800f256 <_printf_float+0x40e>
 800f272:	464b      	mov	r3, r9
 800f274:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f278:	e6dc      	b.n	800f034 <_printf_float+0x1ec>
 800f27a:	f04f 0800 	mov.w	r8, #0
 800f27e:	f104 0a1a 	add.w	sl, r4, #26
 800f282:	e7f2      	b.n	800f26a <_printf_float+0x422>
 800f284:	2301      	movs	r3, #1
 800f286:	4642      	mov	r2, r8
 800f288:	e7df      	b.n	800f24a <_printf_float+0x402>
 800f28a:	2301      	movs	r3, #1
 800f28c:	464a      	mov	r2, r9
 800f28e:	4631      	mov	r1, r6
 800f290:	4628      	mov	r0, r5
 800f292:	47b8      	blx	r7
 800f294:	3001      	adds	r0, #1
 800f296:	f43f ae38 	beq.w	800ef0a <_printf_float+0xc2>
 800f29a:	f108 0801 	add.w	r8, r8, #1
 800f29e:	68e3      	ldr	r3, [r4, #12]
 800f2a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2a2:	1a5b      	subs	r3, r3, r1
 800f2a4:	4543      	cmp	r3, r8
 800f2a6:	dcf0      	bgt.n	800f28a <_printf_float+0x442>
 800f2a8:	e6fa      	b.n	800f0a0 <_printf_float+0x258>
 800f2aa:	f04f 0800 	mov.w	r8, #0
 800f2ae:	f104 0919 	add.w	r9, r4, #25
 800f2b2:	e7f4      	b.n	800f29e <_printf_float+0x456>

0800f2b4 <_printf_common>:
 800f2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b8:	4616      	mov	r6, r2
 800f2ba:	4699      	mov	r9, r3
 800f2bc:	688a      	ldr	r2, [r1, #8]
 800f2be:	690b      	ldr	r3, [r1, #16]
 800f2c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	bfb8      	it	lt
 800f2c8:	4613      	movlt	r3, r2
 800f2ca:	6033      	str	r3, [r6, #0]
 800f2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	b10a      	cbz	r2, 800f2da <_printf_common+0x26>
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	6033      	str	r3, [r6, #0]
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	0699      	lsls	r1, r3, #26
 800f2de:	bf42      	ittt	mi
 800f2e0:	6833      	ldrmi	r3, [r6, #0]
 800f2e2:	3302      	addmi	r3, #2
 800f2e4:	6033      	strmi	r3, [r6, #0]
 800f2e6:	6825      	ldr	r5, [r4, #0]
 800f2e8:	f015 0506 	ands.w	r5, r5, #6
 800f2ec:	d106      	bne.n	800f2fc <_printf_common+0x48>
 800f2ee:	f104 0a19 	add.w	sl, r4, #25
 800f2f2:	68e3      	ldr	r3, [r4, #12]
 800f2f4:	6832      	ldr	r2, [r6, #0]
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	42ab      	cmp	r3, r5
 800f2fa:	dc26      	bgt.n	800f34a <_printf_common+0x96>
 800f2fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f300:	1e13      	subs	r3, r2, #0
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	bf18      	it	ne
 800f306:	2301      	movne	r3, #1
 800f308:	0692      	lsls	r2, r2, #26
 800f30a:	d42b      	bmi.n	800f364 <_printf_common+0xb0>
 800f30c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f310:	4649      	mov	r1, r9
 800f312:	4638      	mov	r0, r7
 800f314:	47c0      	blx	r8
 800f316:	3001      	adds	r0, #1
 800f318:	d01e      	beq.n	800f358 <_printf_common+0xa4>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	68e5      	ldr	r5, [r4, #12]
 800f31e:	6832      	ldr	r2, [r6, #0]
 800f320:	f003 0306 	and.w	r3, r3, #6
 800f324:	2b04      	cmp	r3, #4
 800f326:	bf08      	it	eq
 800f328:	1aad      	subeq	r5, r5, r2
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	6922      	ldr	r2, [r4, #16]
 800f32e:	bf0c      	ite	eq
 800f330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f334:	2500      	movne	r5, #0
 800f336:	4293      	cmp	r3, r2
 800f338:	bfc4      	itt	gt
 800f33a:	1a9b      	subgt	r3, r3, r2
 800f33c:	18ed      	addgt	r5, r5, r3
 800f33e:	2600      	movs	r6, #0
 800f340:	341a      	adds	r4, #26
 800f342:	42b5      	cmp	r5, r6
 800f344:	d11a      	bne.n	800f37c <_printf_common+0xc8>
 800f346:	2000      	movs	r0, #0
 800f348:	e008      	b.n	800f35c <_printf_common+0xa8>
 800f34a:	2301      	movs	r3, #1
 800f34c:	4652      	mov	r2, sl
 800f34e:	4649      	mov	r1, r9
 800f350:	4638      	mov	r0, r7
 800f352:	47c0      	blx	r8
 800f354:	3001      	adds	r0, #1
 800f356:	d103      	bne.n	800f360 <_printf_common+0xac>
 800f358:	f04f 30ff 	mov.w	r0, #4294967295
 800f35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f360:	3501      	adds	r5, #1
 800f362:	e7c6      	b.n	800f2f2 <_printf_common+0x3e>
 800f364:	18e1      	adds	r1, r4, r3
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	2030      	movs	r0, #48	; 0x30
 800f36a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f36e:	4422      	add	r2, r4
 800f370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f378:	3302      	adds	r3, #2
 800f37a:	e7c7      	b.n	800f30c <_printf_common+0x58>
 800f37c:	2301      	movs	r3, #1
 800f37e:	4622      	mov	r2, r4
 800f380:	4649      	mov	r1, r9
 800f382:	4638      	mov	r0, r7
 800f384:	47c0      	blx	r8
 800f386:	3001      	adds	r0, #1
 800f388:	d0e6      	beq.n	800f358 <_printf_common+0xa4>
 800f38a:	3601      	adds	r6, #1
 800f38c:	e7d9      	b.n	800f342 <_printf_common+0x8e>
	...

0800f390 <_printf_i>:
 800f390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f394:	7e0f      	ldrb	r7, [r1, #24]
 800f396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f398:	2f78      	cmp	r7, #120	; 0x78
 800f39a:	4691      	mov	r9, r2
 800f39c:	4680      	mov	r8, r0
 800f39e:	460c      	mov	r4, r1
 800f3a0:	469a      	mov	sl, r3
 800f3a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3a6:	d807      	bhi.n	800f3b8 <_printf_i+0x28>
 800f3a8:	2f62      	cmp	r7, #98	; 0x62
 800f3aa:	d80a      	bhi.n	800f3c2 <_printf_i+0x32>
 800f3ac:	2f00      	cmp	r7, #0
 800f3ae:	f000 80d8 	beq.w	800f562 <_printf_i+0x1d2>
 800f3b2:	2f58      	cmp	r7, #88	; 0x58
 800f3b4:	f000 80a3 	beq.w	800f4fe <_printf_i+0x16e>
 800f3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3c0:	e03a      	b.n	800f438 <_printf_i+0xa8>
 800f3c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3c6:	2b15      	cmp	r3, #21
 800f3c8:	d8f6      	bhi.n	800f3b8 <_printf_i+0x28>
 800f3ca:	a101      	add	r1, pc, #4	; (adr r1, 800f3d0 <_printf_i+0x40>)
 800f3cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3d0:	0800f429 	.word	0x0800f429
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f3b9 	.word	0x0800f3b9
 800f3dc:	0800f3b9 	.word	0x0800f3b9
 800f3e0:	0800f3b9 	.word	0x0800f3b9
 800f3e4:	0800f3b9 	.word	0x0800f3b9
 800f3e8:	0800f43d 	.word	0x0800f43d
 800f3ec:	0800f3b9 	.word	0x0800f3b9
 800f3f0:	0800f3b9 	.word	0x0800f3b9
 800f3f4:	0800f3b9 	.word	0x0800f3b9
 800f3f8:	0800f3b9 	.word	0x0800f3b9
 800f3fc:	0800f549 	.word	0x0800f549
 800f400:	0800f46d 	.word	0x0800f46d
 800f404:	0800f52b 	.word	0x0800f52b
 800f408:	0800f3b9 	.word	0x0800f3b9
 800f40c:	0800f3b9 	.word	0x0800f3b9
 800f410:	0800f56b 	.word	0x0800f56b
 800f414:	0800f3b9 	.word	0x0800f3b9
 800f418:	0800f46d 	.word	0x0800f46d
 800f41c:	0800f3b9 	.word	0x0800f3b9
 800f420:	0800f3b9 	.word	0x0800f3b9
 800f424:	0800f533 	.word	0x0800f533
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	1d1a      	adds	r2, r3, #4
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	602a      	str	r2, [r5, #0]
 800f430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f438:	2301      	movs	r3, #1
 800f43a:	e0a3      	b.n	800f584 <_printf_i+0x1f4>
 800f43c:	6820      	ldr	r0, [r4, #0]
 800f43e:	6829      	ldr	r1, [r5, #0]
 800f440:	0606      	lsls	r6, r0, #24
 800f442:	f101 0304 	add.w	r3, r1, #4
 800f446:	d50a      	bpl.n	800f45e <_printf_i+0xce>
 800f448:	680e      	ldr	r6, [r1, #0]
 800f44a:	602b      	str	r3, [r5, #0]
 800f44c:	2e00      	cmp	r6, #0
 800f44e:	da03      	bge.n	800f458 <_printf_i+0xc8>
 800f450:	232d      	movs	r3, #45	; 0x2d
 800f452:	4276      	negs	r6, r6
 800f454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f458:	485e      	ldr	r0, [pc, #376]	; (800f5d4 <_printf_i+0x244>)
 800f45a:	230a      	movs	r3, #10
 800f45c:	e019      	b.n	800f492 <_printf_i+0x102>
 800f45e:	680e      	ldr	r6, [r1, #0]
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f466:	bf18      	it	ne
 800f468:	b236      	sxthne	r6, r6
 800f46a:	e7ef      	b.n	800f44c <_printf_i+0xbc>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	6820      	ldr	r0, [r4, #0]
 800f470:	1d19      	adds	r1, r3, #4
 800f472:	6029      	str	r1, [r5, #0]
 800f474:	0601      	lsls	r1, r0, #24
 800f476:	d501      	bpl.n	800f47c <_printf_i+0xec>
 800f478:	681e      	ldr	r6, [r3, #0]
 800f47a:	e002      	b.n	800f482 <_printf_i+0xf2>
 800f47c:	0646      	lsls	r6, r0, #25
 800f47e:	d5fb      	bpl.n	800f478 <_printf_i+0xe8>
 800f480:	881e      	ldrh	r6, [r3, #0]
 800f482:	4854      	ldr	r0, [pc, #336]	; (800f5d4 <_printf_i+0x244>)
 800f484:	2f6f      	cmp	r7, #111	; 0x6f
 800f486:	bf0c      	ite	eq
 800f488:	2308      	moveq	r3, #8
 800f48a:	230a      	movne	r3, #10
 800f48c:	2100      	movs	r1, #0
 800f48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f492:	6865      	ldr	r5, [r4, #4]
 800f494:	60a5      	str	r5, [r4, #8]
 800f496:	2d00      	cmp	r5, #0
 800f498:	bfa2      	ittt	ge
 800f49a:	6821      	ldrge	r1, [r4, #0]
 800f49c:	f021 0104 	bicge.w	r1, r1, #4
 800f4a0:	6021      	strge	r1, [r4, #0]
 800f4a2:	b90e      	cbnz	r6, 800f4a8 <_printf_i+0x118>
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	d04d      	beq.n	800f544 <_printf_i+0x1b4>
 800f4a8:	4615      	mov	r5, r2
 800f4aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4ae:	fb03 6711 	mls	r7, r3, r1, r6
 800f4b2:	5dc7      	ldrb	r7, [r0, r7]
 800f4b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f4b8:	4637      	mov	r7, r6
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	460e      	mov	r6, r1
 800f4be:	d9f4      	bls.n	800f4aa <_printf_i+0x11a>
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d10b      	bne.n	800f4dc <_printf_i+0x14c>
 800f4c4:	6823      	ldr	r3, [r4, #0]
 800f4c6:	07de      	lsls	r6, r3, #31
 800f4c8:	d508      	bpl.n	800f4dc <_printf_i+0x14c>
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	6861      	ldr	r1, [r4, #4]
 800f4ce:	4299      	cmp	r1, r3
 800f4d0:	bfde      	ittt	le
 800f4d2:	2330      	movle	r3, #48	; 0x30
 800f4d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f4dc:	1b52      	subs	r2, r2, r5
 800f4de:	6122      	str	r2, [r4, #16]
 800f4e0:	f8cd a000 	str.w	sl, [sp]
 800f4e4:	464b      	mov	r3, r9
 800f4e6:	aa03      	add	r2, sp, #12
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	f7ff fee2 	bl	800f2b4 <_printf_common>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d14c      	bne.n	800f58e <_printf_i+0x1fe>
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f8:	b004      	add	sp, #16
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	4835      	ldr	r0, [pc, #212]	; (800f5d4 <_printf_i+0x244>)
 800f500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f504:	6829      	ldr	r1, [r5, #0]
 800f506:	6823      	ldr	r3, [r4, #0]
 800f508:	f851 6b04 	ldr.w	r6, [r1], #4
 800f50c:	6029      	str	r1, [r5, #0]
 800f50e:	061d      	lsls	r5, r3, #24
 800f510:	d514      	bpl.n	800f53c <_printf_i+0x1ac>
 800f512:	07df      	lsls	r7, r3, #31
 800f514:	bf44      	itt	mi
 800f516:	f043 0320 	orrmi.w	r3, r3, #32
 800f51a:	6023      	strmi	r3, [r4, #0]
 800f51c:	b91e      	cbnz	r6, 800f526 <_printf_i+0x196>
 800f51e:	6823      	ldr	r3, [r4, #0]
 800f520:	f023 0320 	bic.w	r3, r3, #32
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	2310      	movs	r3, #16
 800f528:	e7b0      	b.n	800f48c <_printf_i+0xfc>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	f043 0320 	orr.w	r3, r3, #32
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	2378      	movs	r3, #120	; 0x78
 800f534:	4828      	ldr	r0, [pc, #160]	; (800f5d8 <_printf_i+0x248>)
 800f536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f53a:	e7e3      	b.n	800f504 <_printf_i+0x174>
 800f53c:	0659      	lsls	r1, r3, #25
 800f53e:	bf48      	it	mi
 800f540:	b2b6      	uxthmi	r6, r6
 800f542:	e7e6      	b.n	800f512 <_printf_i+0x182>
 800f544:	4615      	mov	r5, r2
 800f546:	e7bb      	b.n	800f4c0 <_printf_i+0x130>
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	6826      	ldr	r6, [r4, #0]
 800f54c:	6961      	ldr	r1, [r4, #20]
 800f54e:	1d18      	adds	r0, r3, #4
 800f550:	6028      	str	r0, [r5, #0]
 800f552:	0635      	lsls	r5, r6, #24
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	d501      	bpl.n	800f55c <_printf_i+0x1cc>
 800f558:	6019      	str	r1, [r3, #0]
 800f55a:	e002      	b.n	800f562 <_printf_i+0x1d2>
 800f55c:	0670      	lsls	r0, r6, #25
 800f55e:	d5fb      	bpl.n	800f558 <_printf_i+0x1c8>
 800f560:	8019      	strh	r1, [r3, #0]
 800f562:	2300      	movs	r3, #0
 800f564:	6123      	str	r3, [r4, #16]
 800f566:	4615      	mov	r5, r2
 800f568:	e7ba      	b.n	800f4e0 <_printf_i+0x150>
 800f56a:	682b      	ldr	r3, [r5, #0]
 800f56c:	1d1a      	adds	r2, r3, #4
 800f56e:	602a      	str	r2, [r5, #0]
 800f570:	681d      	ldr	r5, [r3, #0]
 800f572:	6862      	ldr	r2, [r4, #4]
 800f574:	2100      	movs	r1, #0
 800f576:	4628      	mov	r0, r5
 800f578:	f7f0 fe4a 	bl	8000210 <memchr>
 800f57c:	b108      	cbz	r0, 800f582 <_printf_i+0x1f2>
 800f57e:	1b40      	subs	r0, r0, r5
 800f580:	6060      	str	r0, [r4, #4]
 800f582:	6863      	ldr	r3, [r4, #4]
 800f584:	6123      	str	r3, [r4, #16]
 800f586:	2300      	movs	r3, #0
 800f588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f58c:	e7a8      	b.n	800f4e0 <_printf_i+0x150>
 800f58e:	6923      	ldr	r3, [r4, #16]
 800f590:	462a      	mov	r2, r5
 800f592:	4649      	mov	r1, r9
 800f594:	4640      	mov	r0, r8
 800f596:	47d0      	blx	sl
 800f598:	3001      	adds	r0, #1
 800f59a:	d0ab      	beq.n	800f4f4 <_printf_i+0x164>
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	079b      	lsls	r3, r3, #30
 800f5a0:	d413      	bmi.n	800f5ca <_printf_i+0x23a>
 800f5a2:	68e0      	ldr	r0, [r4, #12]
 800f5a4:	9b03      	ldr	r3, [sp, #12]
 800f5a6:	4298      	cmp	r0, r3
 800f5a8:	bfb8      	it	lt
 800f5aa:	4618      	movlt	r0, r3
 800f5ac:	e7a4      	b.n	800f4f8 <_printf_i+0x168>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4632      	mov	r2, r6
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	47d0      	blx	sl
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	d09b      	beq.n	800f4f4 <_printf_i+0x164>
 800f5bc:	3501      	adds	r5, #1
 800f5be:	68e3      	ldr	r3, [r4, #12]
 800f5c0:	9903      	ldr	r1, [sp, #12]
 800f5c2:	1a5b      	subs	r3, r3, r1
 800f5c4:	42ab      	cmp	r3, r5
 800f5c6:	dcf2      	bgt.n	800f5ae <_printf_i+0x21e>
 800f5c8:	e7eb      	b.n	800f5a2 <_printf_i+0x212>
 800f5ca:	2500      	movs	r5, #0
 800f5cc:	f104 0619 	add.w	r6, r4, #25
 800f5d0:	e7f5      	b.n	800f5be <_printf_i+0x22e>
 800f5d2:	bf00      	nop
 800f5d4:	08013bb6 	.word	0x08013bb6
 800f5d8:	08013bc7 	.word	0x08013bc7

0800f5dc <cleanup_glue>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	460c      	mov	r4, r1
 800f5e0:	6809      	ldr	r1, [r1, #0]
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	b109      	cbz	r1, 800f5ea <cleanup_glue+0xe>
 800f5e6:	f7ff fff9 	bl	800f5dc <cleanup_glue>
 800f5ea:	4621      	mov	r1, r4
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5f2:	f002 bffb 	b.w	80125ec <_free_r>
	...

0800f5f8 <_reclaim_reent>:
 800f5f8:	4b2c      	ldr	r3, [pc, #176]	; (800f6ac <_reclaim_reent+0xb4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4283      	cmp	r3, r0
 800f5fe:	b570      	push	{r4, r5, r6, lr}
 800f600:	4604      	mov	r4, r0
 800f602:	d051      	beq.n	800f6a8 <_reclaim_reent+0xb0>
 800f604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f606:	b143      	cbz	r3, 800f61a <_reclaim_reent+0x22>
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d14a      	bne.n	800f6a4 <_reclaim_reent+0xac>
 800f60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f610:	6819      	ldr	r1, [r3, #0]
 800f612:	b111      	cbz	r1, 800f61a <_reclaim_reent+0x22>
 800f614:	4620      	mov	r0, r4
 800f616:	f002 ffe9 	bl	80125ec <_free_r>
 800f61a:	6961      	ldr	r1, [r4, #20]
 800f61c:	b111      	cbz	r1, 800f624 <_reclaim_reent+0x2c>
 800f61e:	4620      	mov	r0, r4
 800f620:	f002 ffe4 	bl	80125ec <_free_r>
 800f624:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f626:	b111      	cbz	r1, 800f62e <_reclaim_reent+0x36>
 800f628:	4620      	mov	r0, r4
 800f62a:	f002 ffdf 	bl	80125ec <_free_r>
 800f62e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f630:	b111      	cbz	r1, 800f638 <_reclaim_reent+0x40>
 800f632:	4620      	mov	r0, r4
 800f634:	f002 ffda 	bl	80125ec <_free_r>
 800f638:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f63a:	b111      	cbz	r1, 800f642 <_reclaim_reent+0x4a>
 800f63c:	4620      	mov	r0, r4
 800f63e:	f002 ffd5 	bl	80125ec <_free_r>
 800f642:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f644:	b111      	cbz	r1, 800f64c <_reclaim_reent+0x54>
 800f646:	4620      	mov	r0, r4
 800f648:	f002 ffd0 	bl	80125ec <_free_r>
 800f64c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f64e:	b111      	cbz	r1, 800f656 <_reclaim_reent+0x5e>
 800f650:	4620      	mov	r0, r4
 800f652:	f002 ffcb 	bl	80125ec <_free_r>
 800f656:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f658:	b111      	cbz	r1, 800f660 <_reclaim_reent+0x68>
 800f65a:	4620      	mov	r0, r4
 800f65c:	f002 ffc6 	bl	80125ec <_free_r>
 800f660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f662:	b111      	cbz	r1, 800f66a <_reclaim_reent+0x72>
 800f664:	4620      	mov	r0, r4
 800f666:	f002 ffc1 	bl	80125ec <_free_r>
 800f66a:	69a3      	ldr	r3, [r4, #24]
 800f66c:	b1e3      	cbz	r3, 800f6a8 <_reclaim_reent+0xb0>
 800f66e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f670:	4620      	mov	r0, r4
 800f672:	4798      	blx	r3
 800f674:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f676:	b1b9      	cbz	r1, 800f6a8 <_reclaim_reent+0xb0>
 800f678:	4620      	mov	r0, r4
 800f67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f67e:	f7ff bfad 	b.w	800f5dc <cleanup_glue>
 800f682:	5949      	ldr	r1, [r1, r5]
 800f684:	b941      	cbnz	r1, 800f698 <_reclaim_reent+0xa0>
 800f686:	3504      	adds	r5, #4
 800f688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f68a:	2d80      	cmp	r5, #128	; 0x80
 800f68c:	68d9      	ldr	r1, [r3, #12]
 800f68e:	d1f8      	bne.n	800f682 <_reclaim_reent+0x8a>
 800f690:	4620      	mov	r0, r4
 800f692:	f002 ffab 	bl	80125ec <_free_r>
 800f696:	e7ba      	b.n	800f60e <_reclaim_reent+0x16>
 800f698:	680e      	ldr	r6, [r1, #0]
 800f69a:	4620      	mov	r0, r4
 800f69c:	f002 ffa6 	bl	80125ec <_free_r>
 800f6a0:	4631      	mov	r1, r6
 800f6a2:	e7ef      	b.n	800f684 <_reclaim_reent+0x8c>
 800f6a4:	2500      	movs	r5, #0
 800f6a6:	e7ef      	b.n	800f688 <_reclaim_reent+0x90>
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20000018 	.word	0x20000018

0800f6b0 <_sbrk_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4d06      	ldr	r5, [pc, #24]	; (800f6cc <_sbrk_r+0x1c>)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	4608      	mov	r0, r1
 800f6ba:	602b      	str	r3, [r5, #0]
 800f6bc:	f7f5 fafc 	bl	8004cb8 <_sbrk>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_sbrk_r+0x1a>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_sbrk_r+0x1a>
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	200051f4 	.word	0x200051f4

0800f6d0 <siprintf>:
 800f6d0:	b40e      	push	{r1, r2, r3}
 800f6d2:	b500      	push	{lr}
 800f6d4:	b09c      	sub	sp, #112	; 0x70
 800f6d6:	ab1d      	add	r3, sp, #116	; 0x74
 800f6d8:	9002      	str	r0, [sp, #8]
 800f6da:	9006      	str	r0, [sp, #24]
 800f6dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6e0:	4809      	ldr	r0, [pc, #36]	; (800f708 <siprintf+0x38>)
 800f6e2:	9107      	str	r1, [sp, #28]
 800f6e4:	9104      	str	r1, [sp, #16]
 800f6e6:	4909      	ldr	r1, [pc, #36]	; (800f70c <siprintf+0x3c>)
 800f6e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ec:	9105      	str	r1, [sp, #20]
 800f6ee:	6800      	ldr	r0, [r0, #0]
 800f6f0:	9301      	str	r3, [sp, #4]
 800f6f2:	a902      	add	r1, sp, #8
 800f6f4:	f003 f822 	bl	801273c <_svfiprintf_r>
 800f6f8:	9b02      	ldr	r3, [sp, #8]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	701a      	strb	r2, [r3, #0]
 800f6fe:	b01c      	add	sp, #112	; 0x70
 800f700:	f85d eb04 	ldr.w	lr, [sp], #4
 800f704:	b003      	add	sp, #12
 800f706:	4770      	bx	lr
 800f708:	20000018 	.word	0x20000018
 800f70c:	ffff0208 	.word	0xffff0208

0800f710 <__sread>:
 800f710:	b510      	push	{r4, lr}
 800f712:	460c      	mov	r4, r1
 800f714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f718:	f003 fa6a 	bl	8012bf0 <_read_r>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	bfab      	itete	ge
 800f720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f722:	89a3      	ldrhlt	r3, [r4, #12]
 800f724:	181b      	addge	r3, r3, r0
 800f726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f72a:	bfac      	ite	ge
 800f72c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f72e:	81a3      	strhlt	r3, [r4, #12]
 800f730:	bd10      	pop	{r4, pc}

0800f732 <__swrite>:
 800f732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f736:	461f      	mov	r7, r3
 800f738:	898b      	ldrh	r3, [r1, #12]
 800f73a:	05db      	lsls	r3, r3, #23
 800f73c:	4605      	mov	r5, r0
 800f73e:	460c      	mov	r4, r1
 800f740:	4616      	mov	r6, r2
 800f742:	d505      	bpl.n	800f750 <__swrite+0x1e>
 800f744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f748:	2302      	movs	r3, #2
 800f74a:	2200      	movs	r2, #0
 800f74c:	f002 fa3e 	bl	8011bcc <_lseek_r>
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f75a:	81a3      	strh	r3, [r4, #12]
 800f75c:	4632      	mov	r2, r6
 800f75e:	463b      	mov	r3, r7
 800f760:	4628      	mov	r0, r5
 800f762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f766:	f000 bf2d 	b.w	80105c4 <_write_r>

0800f76a <__sseek>:
 800f76a:	b510      	push	{r4, lr}
 800f76c:	460c      	mov	r4, r1
 800f76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f772:	f002 fa2b 	bl	8011bcc <_lseek_r>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	bf15      	itete	ne
 800f77c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f77e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f786:	81a3      	strheq	r3, [r4, #12]
 800f788:	bf18      	it	ne
 800f78a:	81a3      	strhne	r3, [r4, #12]
 800f78c:	bd10      	pop	{r4, pc}

0800f78e <__sclose>:
 800f78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f792:	f000 bf47 	b.w	8010624 <_close_r>

0800f796 <sulp>:
 800f796:	b570      	push	{r4, r5, r6, lr}
 800f798:	4604      	mov	r4, r0
 800f79a:	460d      	mov	r5, r1
 800f79c:	ec45 4b10 	vmov	d0, r4, r5
 800f7a0:	4616      	mov	r6, r2
 800f7a2:	f002 fdbd 	bl	8012320 <__ulp>
 800f7a6:	ec51 0b10 	vmov	r0, r1, d0
 800f7aa:	b17e      	cbz	r6, 800f7cc <sulp+0x36>
 800f7ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f7b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dd09      	ble.n	800f7cc <sulp+0x36>
 800f7b8:	051b      	lsls	r3, r3, #20
 800f7ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f7be:	2400      	movs	r4, #0
 800f7c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f7c4:	4622      	mov	r2, r4
 800f7c6:	462b      	mov	r3, r5
 800f7c8:	f7f0 ff2e 	bl	8000628 <__aeabi_dmul>
 800f7cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f7d0 <_strtod_l>:
 800f7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d4:	ed2d 8b02 	vpush	{d8}
 800f7d8:	b09d      	sub	sp, #116	; 0x74
 800f7da:	461f      	mov	r7, r3
 800f7dc:	2300      	movs	r3, #0
 800f7de:	9318      	str	r3, [sp, #96]	; 0x60
 800f7e0:	4ba2      	ldr	r3, [pc, #648]	; (800fa6c <_strtod_l+0x29c>)
 800f7e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	9305      	str	r3, [sp, #20]
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	4688      	mov	r8, r1
 800f7ee:	f7f0 fd01 	bl	80001f4 <strlen>
 800f7f2:	f04f 0a00 	mov.w	sl, #0
 800f7f6:	4605      	mov	r5, r0
 800f7f8:	f04f 0b00 	mov.w	fp, #0
 800f7fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f802:	781a      	ldrb	r2, [r3, #0]
 800f804:	2a2b      	cmp	r2, #43	; 0x2b
 800f806:	d04e      	beq.n	800f8a6 <_strtod_l+0xd6>
 800f808:	d83b      	bhi.n	800f882 <_strtod_l+0xb2>
 800f80a:	2a0d      	cmp	r2, #13
 800f80c:	d834      	bhi.n	800f878 <_strtod_l+0xa8>
 800f80e:	2a08      	cmp	r2, #8
 800f810:	d834      	bhi.n	800f87c <_strtod_l+0xac>
 800f812:	2a00      	cmp	r2, #0
 800f814:	d03e      	beq.n	800f894 <_strtod_l+0xc4>
 800f816:	2300      	movs	r3, #0
 800f818:	930a      	str	r3, [sp, #40]	; 0x28
 800f81a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f81c:	7833      	ldrb	r3, [r6, #0]
 800f81e:	2b30      	cmp	r3, #48	; 0x30
 800f820:	f040 80b0 	bne.w	800f984 <_strtod_l+0x1b4>
 800f824:	7873      	ldrb	r3, [r6, #1]
 800f826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f82a:	2b58      	cmp	r3, #88	; 0x58
 800f82c:	d168      	bne.n	800f900 <_strtod_l+0x130>
 800f82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	ab18      	add	r3, sp, #96	; 0x60
 800f834:	9702      	str	r7, [sp, #8]
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	4a8d      	ldr	r2, [pc, #564]	; (800fa70 <_strtod_l+0x2a0>)
 800f83a:	ab19      	add	r3, sp, #100	; 0x64
 800f83c:	a917      	add	r1, sp, #92	; 0x5c
 800f83e:	4620      	mov	r0, r4
 800f840:	f001 feb8 	bl	80115b4 <__gethex>
 800f844:	f010 0707 	ands.w	r7, r0, #7
 800f848:	4605      	mov	r5, r0
 800f84a:	d005      	beq.n	800f858 <_strtod_l+0x88>
 800f84c:	2f06      	cmp	r7, #6
 800f84e:	d12c      	bne.n	800f8aa <_strtod_l+0xda>
 800f850:	3601      	adds	r6, #1
 800f852:	2300      	movs	r3, #0
 800f854:	9617      	str	r6, [sp, #92]	; 0x5c
 800f856:	930a      	str	r3, [sp, #40]	; 0x28
 800f858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f040 8590 	bne.w	8010380 <_strtod_l+0xbb0>
 800f860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f862:	b1eb      	cbz	r3, 800f8a0 <_strtod_l+0xd0>
 800f864:	4652      	mov	r2, sl
 800f866:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f86a:	ec43 2b10 	vmov	d0, r2, r3
 800f86e:	b01d      	add	sp, #116	; 0x74
 800f870:	ecbd 8b02 	vpop	{d8}
 800f874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f878:	2a20      	cmp	r2, #32
 800f87a:	d1cc      	bne.n	800f816 <_strtod_l+0x46>
 800f87c:	3301      	adds	r3, #1
 800f87e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f880:	e7be      	b.n	800f800 <_strtod_l+0x30>
 800f882:	2a2d      	cmp	r2, #45	; 0x2d
 800f884:	d1c7      	bne.n	800f816 <_strtod_l+0x46>
 800f886:	2201      	movs	r2, #1
 800f888:	920a      	str	r2, [sp, #40]	; 0x28
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f88e:	785b      	ldrb	r3, [r3, #1]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1c2      	bne.n	800f81a <_strtod_l+0x4a>
 800f894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f896:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f040 856e 	bne.w	801037c <_strtod_l+0xbac>
 800f8a0:	4652      	mov	r2, sl
 800f8a2:	465b      	mov	r3, fp
 800f8a4:	e7e1      	b.n	800f86a <_strtod_l+0x9a>
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	e7ee      	b.n	800f888 <_strtod_l+0xb8>
 800f8aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f8ac:	b13a      	cbz	r2, 800f8be <_strtod_l+0xee>
 800f8ae:	2135      	movs	r1, #53	; 0x35
 800f8b0:	a81a      	add	r0, sp, #104	; 0x68
 800f8b2:	f002 fe40 	bl	8012536 <__copybits>
 800f8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f002 f9ff 	bl	8011cbc <_Bfree>
 800f8be:	3f01      	subs	r7, #1
 800f8c0:	2f04      	cmp	r7, #4
 800f8c2:	d806      	bhi.n	800f8d2 <_strtod_l+0x102>
 800f8c4:	e8df f007 	tbb	[pc, r7]
 800f8c8:	1714030a 	.word	0x1714030a
 800f8cc:	0a          	.byte	0x0a
 800f8cd:	00          	.byte	0x00
 800f8ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f8d2:	0728      	lsls	r0, r5, #28
 800f8d4:	d5c0      	bpl.n	800f858 <_strtod_l+0x88>
 800f8d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f8da:	e7bd      	b.n	800f858 <_strtod_l+0x88>
 800f8dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f8e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f8e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f8e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f8ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f8ee:	e7f0      	b.n	800f8d2 <_strtod_l+0x102>
 800f8f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fa74 <_strtod_l+0x2a4>
 800f8f4:	e7ed      	b.n	800f8d2 <_strtod_l+0x102>
 800f8f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f8fa:	f04f 3aff 	mov.w	sl, #4294967295
 800f8fe:	e7e8      	b.n	800f8d2 <_strtod_l+0x102>
 800f900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	9217      	str	r2, [sp, #92]	; 0x5c
 800f906:	785b      	ldrb	r3, [r3, #1]
 800f908:	2b30      	cmp	r3, #48	; 0x30
 800f90a:	d0f9      	beq.n	800f900 <_strtod_l+0x130>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d0a3      	beq.n	800f858 <_strtod_l+0x88>
 800f910:	2301      	movs	r3, #1
 800f912:	f04f 0900 	mov.w	r9, #0
 800f916:	9304      	str	r3, [sp, #16]
 800f918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f91a:	9308      	str	r3, [sp, #32]
 800f91c:	f8cd 901c 	str.w	r9, [sp, #28]
 800f920:	464f      	mov	r7, r9
 800f922:	220a      	movs	r2, #10
 800f924:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f926:	7806      	ldrb	r6, [r0, #0]
 800f928:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f92c:	b2d9      	uxtb	r1, r3
 800f92e:	2909      	cmp	r1, #9
 800f930:	d92a      	bls.n	800f988 <_strtod_l+0x1b8>
 800f932:	9905      	ldr	r1, [sp, #20]
 800f934:	462a      	mov	r2, r5
 800f936:	f003 f977 	bl	8012c28 <strncmp>
 800f93a:	b398      	cbz	r0, 800f9a4 <_strtod_l+0x1d4>
 800f93c:	2000      	movs	r0, #0
 800f93e:	4632      	mov	r2, r6
 800f940:	463d      	mov	r5, r7
 800f942:	9005      	str	r0, [sp, #20]
 800f944:	4603      	mov	r3, r0
 800f946:	2a65      	cmp	r2, #101	; 0x65
 800f948:	d001      	beq.n	800f94e <_strtod_l+0x17e>
 800f94a:	2a45      	cmp	r2, #69	; 0x45
 800f94c:	d118      	bne.n	800f980 <_strtod_l+0x1b0>
 800f94e:	b91d      	cbnz	r5, 800f958 <_strtod_l+0x188>
 800f950:	9a04      	ldr	r2, [sp, #16]
 800f952:	4302      	orrs	r2, r0
 800f954:	d09e      	beq.n	800f894 <_strtod_l+0xc4>
 800f956:	2500      	movs	r5, #0
 800f958:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f95c:	f108 0201 	add.w	r2, r8, #1
 800f960:	9217      	str	r2, [sp, #92]	; 0x5c
 800f962:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f966:	2a2b      	cmp	r2, #43	; 0x2b
 800f968:	d075      	beq.n	800fa56 <_strtod_l+0x286>
 800f96a:	2a2d      	cmp	r2, #45	; 0x2d
 800f96c:	d07b      	beq.n	800fa66 <_strtod_l+0x296>
 800f96e:	f04f 0c00 	mov.w	ip, #0
 800f972:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f976:	2909      	cmp	r1, #9
 800f978:	f240 8082 	bls.w	800fa80 <_strtod_l+0x2b0>
 800f97c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f980:	2600      	movs	r6, #0
 800f982:	e09d      	b.n	800fac0 <_strtod_l+0x2f0>
 800f984:	2300      	movs	r3, #0
 800f986:	e7c4      	b.n	800f912 <_strtod_l+0x142>
 800f988:	2f08      	cmp	r7, #8
 800f98a:	bfd8      	it	le
 800f98c:	9907      	ldrle	r1, [sp, #28]
 800f98e:	f100 0001 	add.w	r0, r0, #1
 800f992:	bfda      	itte	le
 800f994:	fb02 3301 	mlale	r3, r2, r1, r3
 800f998:	9307      	strle	r3, [sp, #28]
 800f99a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f99e:	3701      	adds	r7, #1
 800f9a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800f9a2:	e7bf      	b.n	800f924 <_strtod_l+0x154>
 800f9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9a6:	195a      	adds	r2, r3, r5
 800f9a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9aa:	5d5a      	ldrb	r2, [r3, r5]
 800f9ac:	2f00      	cmp	r7, #0
 800f9ae:	d037      	beq.n	800fa20 <_strtod_l+0x250>
 800f9b0:	9005      	str	r0, [sp, #20]
 800f9b2:	463d      	mov	r5, r7
 800f9b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f9b8:	2b09      	cmp	r3, #9
 800f9ba:	d912      	bls.n	800f9e2 <_strtod_l+0x212>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e7c2      	b.n	800f946 <_strtod_l+0x176>
 800f9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9c2:	1c5a      	adds	r2, r3, #1
 800f9c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9c6:	785a      	ldrb	r2, [r3, #1]
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	2a30      	cmp	r2, #48	; 0x30
 800f9cc:	d0f8      	beq.n	800f9c0 <_strtod_l+0x1f0>
 800f9ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f9d2:	2b08      	cmp	r3, #8
 800f9d4:	f200 84d9 	bhi.w	801038a <_strtod_l+0xbba>
 800f9d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9da:	9005      	str	r0, [sp, #20]
 800f9dc:	2000      	movs	r0, #0
 800f9de:	9308      	str	r3, [sp, #32]
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	3a30      	subs	r2, #48	; 0x30
 800f9e4:	f100 0301 	add.w	r3, r0, #1
 800f9e8:	d014      	beq.n	800fa14 <_strtod_l+0x244>
 800f9ea:	9905      	ldr	r1, [sp, #20]
 800f9ec:	4419      	add	r1, r3
 800f9ee:	9105      	str	r1, [sp, #20]
 800f9f0:	462b      	mov	r3, r5
 800f9f2:	eb00 0e05 	add.w	lr, r0, r5
 800f9f6:	210a      	movs	r1, #10
 800f9f8:	4573      	cmp	r3, lr
 800f9fa:	d113      	bne.n	800fa24 <_strtod_l+0x254>
 800f9fc:	182b      	adds	r3, r5, r0
 800f9fe:	2b08      	cmp	r3, #8
 800fa00:	f105 0501 	add.w	r5, r5, #1
 800fa04:	4405      	add	r5, r0
 800fa06:	dc1c      	bgt.n	800fa42 <_strtod_l+0x272>
 800fa08:	9907      	ldr	r1, [sp, #28]
 800fa0a:	230a      	movs	r3, #10
 800fa0c:	fb03 2301 	mla	r3, r3, r1, r2
 800fa10:	9307      	str	r3, [sp, #28]
 800fa12:	2300      	movs	r3, #0
 800fa14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa16:	1c51      	adds	r1, r2, #1
 800fa18:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa1a:	7852      	ldrb	r2, [r2, #1]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	e7c9      	b.n	800f9b4 <_strtod_l+0x1e4>
 800fa20:	4638      	mov	r0, r7
 800fa22:	e7d2      	b.n	800f9ca <_strtod_l+0x1fa>
 800fa24:	2b08      	cmp	r3, #8
 800fa26:	dc04      	bgt.n	800fa32 <_strtod_l+0x262>
 800fa28:	9e07      	ldr	r6, [sp, #28]
 800fa2a:	434e      	muls	r6, r1
 800fa2c:	9607      	str	r6, [sp, #28]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	e7e2      	b.n	800f9f8 <_strtod_l+0x228>
 800fa32:	f103 0c01 	add.w	ip, r3, #1
 800fa36:	f1bc 0f10 	cmp.w	ip, #16
 800fa3a:	bfd8      	it	le
 800fa3c:	fb01 f909 	mulle.w	r9, r1, r9
 800fa40:	e7f5      	b.n	800fa2e <_strtod_l+0x25e>
 800fa42:	2d10      	cmp	r5, #16
 800fa44:	bfdc      	itt	le
 800fa46:	230a      	movle	r3, #10
 800fa48:	fb03 2909 	mlale	r9, r3, r9, r2
 800fa4c:	e7e1      	b.n	800fa12 <_strtod_l+0x242>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	9305      	str	r3, [sp, #20]
 800fa52:	2301      	movs	r3, #1
 800fa54:	e77c      	b.n	800f950 <_strtod_l+0x180>
 800fa56:	f04f 0c00 	mov.w	ip, #0
 800fa5a:	f108 0202 	add.w	r2, r8, #2
 800fa5e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa60:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fa64:	e785      	b.n	800f972 <_strtod_l+0x1a2>
 800fa66:	f04f 0c01 	mov.w	ip, #1
 800fa6a:	e7f6      	b.n	800fa5a <_strtod_l+0x28a>
 800fa6c:	08013eb8 	.word	0x08013eb8
 800fa70:	08013bd8 	.word	0x08013bd8
 800fa74:	7ff00000 	.word	0x7ff00000
 800fa78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa7a:	1c51      	adds	r1, r2, #1
 800fa7c:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa7e:	7852      	ldrb	r2, [r2, #1]
 800fa80:	2a30      	cmp	r2, #48	; 0x30
 800fa82:	d0f9      	beq.n	800fa78 <_strtod_l+0x2a8>
 800fa84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fa88:	2908      	cmp	r1, #8
 800fa8a:	f63f af79 	bhi.w	800f980 <_strtod_l+0x1b0>
 800fa8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fa92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa94:	9206      	str	r2, [sp, #24]
 800fa96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa98:	1c51      	adds	r1, r2, #1
 800fa9a:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa9c:	7852      	ldrb	r2, [r2, #1]
 800fa9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800faa2:	2e09      	cmp	r6, #9
 800faa4:	d937      	bls.n	800fb16 <_strtod_l+0x346>
 800faa6:	9e06      	ldr	r6, [sp, #24]
 800faa8:	1b89      	subs	r1, r1, r6
 800faaa:	2908      	cmp	r1, #8
 800faac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fab0:	dc02      	bgt.n	800fab8 <_strtod_l+0x2e8>
 800fab2:	4576      	cmp	r6, lr
 800fab4:	bfa8      	it	ge
 800fab6:	4676      	movge	r6, lr
 800fab8:	f1bc 0f00 	cmp.w	ip, #0
 800fabc:	d000      	beq.n	800fac0 <_strtod_l+0x2f0>
 800fabe:	4276      	negs	r6, r6
 800fac0:	2d00      	cmp	r5, #0
 800fac2:	d14d      	bne.n	800fb60 <_strtod_l+0x390>
 800fac4:	9904      	ldr	r1, [sp, #16]
 800fac6:	4301      	orrs	r1, r0
 800fac8:	f47f aec6 	bne.w	800f858 <_strtod_l+0x88>
 800facc:	2b00      	cmp	r3, #0
 800face:	f47f aee1 	bne.w	800f894 <_strtod_l+0xc4>
 800fad2:	2a69      	cmp	r2, #105	; 0x69
 800fad4:	d027      	beq.n	800fb26 <_strtod_l+0x356>
 800fad6:	dc24      	bgt.n	800fb22 <_strtod_l+0x352>
 800fad8:	2a49      	cmp	r2, #73	; 0x49
 800fada:	d024      	beq.n	800fb26 <_strtod_l+0x356>
 800fadc:	2a4e      	cmp	r2, #78	; 0x4e
 800fade:	f47f aed9 	bne.w	800f894 <_strtod_l+0xc4>
 800fae2:	499f      	ldr	r1, [pc, #636]	; (800fd60 <_strtod_l+0x590>)
 800fae4:	a817      	add	r0, sp, #92	; 0x5c
 800fae6:	f001 ffbd 	bl	8011a64 <__match>
 800faea:	2800      	cmp	r0, #0
 800faec:	f43f aed2 	beq.w	800f894 <_strtod_l+0xc4>
 800faf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b28      	cmp	r3, #40	; 0x28
 800faf6:	d12d      	bne.n	800fb54 <_strtod_l+0x384>
 800faf8:	499a      	ldr	r1, [pc, #616]	; (800fd64 <_strtod_l+0x594>)
 800fafa:	aa1a      	add	r2, sp, #104	; 0x68
 800fafc:	a817      	add	r0, sp, #92	; 0x5c
 800fafe:	f001 ffc5 	bl	8011a8c <__hexnan>
 800fb02:	2805      	cmp	r0, #5
 800fb04:	d126      	bne.n	800fb54 <_strtod_l+0x384>
 800fb06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fb0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fb10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fb14:	e6a0      	b.n	800f858 <_strtod_l+0x88>
 800fb16:	210a      	movs	r1, #10
 800fb18:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fb1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fb20:	e7b9      	b.n	800fa96 <_strtod_l+0x2c6>
 800fb22:	2a6e      	cmp	r2, #110	; 0x6e
 800fb24:	e7db      	b.n	800fade <_strtod_l+0x30e>
 800fb26:	4990      	ldr	r1, [pc, #576]	; (800fd68 <_strtod_l+0x598>)
 800fb28:	a817      	add	r0, sp, #92	; 0x5c
 800fb2a:	f001 ff9b 	bl	8011a64 <__match>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f43f aeb0 	beq.w	800f894 <_strtod_l+0xc4>
 800fb34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb36:	498d      	ldr	r1, [pc, #564]	; (800fd6c <_strtod_l+0x59c>)
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	a817      	add	r0, sp, #92	; 0x5c
 800fb3c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb3e:	f001 ff91 	bl	8011a64 <__match>
 800fb42:	b910      	cbnz	r0, 800fb4a <_strtod_l+0x37a>
 800fb44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb46:	3301      	adds	r3, #1
 800fb48:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fd7c <_strtod_l+0x5ac>
 800fb4e:	f04f 0a00 	mov.w	sl, #0
 800fb52:	e681      	b.n	800f858 <_strtod_l+0x88>
 800fb54:	4886      	ldr	r0, [pc, #536]	; (800fd70 <_strtod_l+0x5a0>)
 800fb56:	f003 f85f 	bl	8012c18 <nan>
 800fb5a:	ec5b ab10 	vmov	sl, fp, d0
 800fb5e:	e67b      	b.n	800f858 <_strtod_l+0x88>
 800fb60:	9b05      	ldr	r3, [sp, #20]
 800fb62:	9807      	ldr	r0, [sp, #28]
 800fb64:	1af3      	subs	r3, r6, r3
 800fb66:	2f00      	cmp	r7, #0
 800fb68:	bf08      	it	eq
 800fb6a:	462f      	moveq	r7, r5
 800fb6c:	2d10      	cmp	r5, #16
 800fb6e:	9306      	str	r3, [sp, #24]
 800fb70:	46a8      	mov	r8, r5
 800fb72:	bfa8      	it	ge
 800fb74:	f04f 0810 	movge.w	r8, #16
 800fb78:	f7f0 fcdc 	bl	8000534 <__aeabi_ui2d>
 800fb7c:	2d09      	cmp	r5, #9
 800fb7e:	4682      	mov	sl, r0
 800fb80:	468b      	mov	fp, r1
 800fb82:	dd13      	ble.n	800fbac <_strtod_l+0x3dc>
 800fb84:	4b7b      	ldr	r3, [pc, #492]	; (800fd74 <_strtod_l+0x5a4>)
 800fb86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fb8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb8e:	f7f0 fd4b 	bl	8000628 <__aeabi_dmul>
 800fb92:	4682      	mov	sl, r0
 800fb94:	4648      	mov	r0, r9
 800fb96:	468b      	mov	fp, r1
 800fb98:	f7f0 fccc 	bl	8000534 <__aeabi_ui2d>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4650      	mov	r0, sl
 800fba2:	4659      	mov	r1, fp
 800fba4:	f7f0 fb8a 	bl	80002bc <__adddf3>
 800fba8:	4682      	mov	sl, r0
 800fbaa:	468b      	mov	fp, r1
 800fbac:	2d0f      	cmp	r5, #15
 800fbae:	dc38      	bgt.n	800fc22 <_strtod_l+0x452>
 800fbb0:	9b06      	ldr	r3, [sp, #24]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f43f ae50 	beq.w	800f858 <_strtod_l+0x88>
 800fbb8:	dd24      	ble.n	800fc04 <_strtod_l+0x434>
 800fbba:	2b16      	cmp	r3, #22
 800fbbc:	dc0b      	bgt.n	800fbd6 <_strtod_l+0x406>
 800fbbe:	496d      	ldr	r1, [pc, #436]	; (800fd74 <_strtod_l+0x5a4>)
 800fbc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbc8:	4652      	mov	r2, sl
 800fbca:	465b      	mov	r3, fp
 800fbcc:	f7f0 fd2c 	bl	8000628 <__aeabi_dmul>
 800fbd0:	4682      	mov	sl, r0
 800fbd2:	468b      	mov	fp, r1
 800fbd4:	e640      	b.n	800f858 <_strtod_l+0x88>
 800fbd6:	9a06      	ldr	r2, [sp, #24]
 800fbd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	db20      	blt.n	800fc22 <_strtod_l+0x452>
 800fbe0:	4c64      	ldr	r4, [pc, #400]	; (800fd74 <_strtod_l+0x5a4>)
 800fbe2:	f1c5 050f 	rsb	r5, r5, #15
 800fbe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fbea:	4652      	mov	r2, sl
 800fbec:	465b      	mov	r3, fp
 800fbee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf2:	f7f0 fd19 	bl	8000628 <__aeabi_dmul>
 800fbf6:	9b06      	ldr	r3, [sp, #24]
 800fbf8:	1b5d      	subs	r5, r3, r5
 800fbfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fbfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fc02:	e7e3      	b.n	800fbcc <_strtod_l+0x3fc>
 800fc04:	9b06      	ldr	r3, [sp, #24]
 800fc06:	3316      	adds	r3, #22
 800fc08:	db0b      	blt.n	800fc22 <_strtod_l+0x452>
 800fc0a:	9b05      	ldr	r3, [sp, #20]
 800fc0c:	1b9e      	subs	r6, r3, r6
 800fc0e:	4b59      	ldr	r3, [pc, #356]	; (800fd74 <_strtod_l+0x5a4>)
 800fc10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fc14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc18:	4650      	mov	r0, sl
 800fc1a:	4659      	mov	r1, fp
 800fc1c:	f7f0 fe2e 	bl	800087c <__aeabi_ddiv>
 800fc20:	e7d6      	b.n	800fbd0 <_strtod_l+0x400>
 800fc22:	9b06      	ldr	r3, [sp, #24]
 800fc24:	eba5 0808 	sub.w	r8, r5, r8
 800fc28:	4498      	add	r8, r3
 800fc2a:	f1b8 0f00 	cmp.w	r8, #0
 800fc2e:	dd74      	ble.n	800fd1a <_strtod_l+0x54a>
 800fc30:	f018 030f 	ands.w	r3, r8, #15
 800fc34:	d00a      	beq.n	800fc4c <_strtod_l+0x47c>
 800fc36:	494f      	ldr	r1, [pc, #316]	; (800fd74 <_strtod_l+0x5a4>)
 800fc38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc3c:	4652      	mov	r2, sl
 800fc3e:	465b      	mov	r3, fp
 800fc40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc44:	f7f0 fcf0 	bl	8000628 <__aeabi_dmul>
 800fc48:	4682      	mov	sl, r0
 800fc4a:	468b      	mov	fp, r1
 800fc4c:	f038 080f 	bics.w	r8, r8, #15
 800fc50:	d04f      	beq.n	800fcf2 <_strtod_l+0x522>
 800fc52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fc56:	dd22      	ble.n	800fc9e <_strtod_l+0x4ce>
 800fc58:	2500      	movs	r5, #0
 800fc5a:	462e      	mov	r6, r5
 800fc5c:	9507      	str	r5, [sp, #28]
 800fc5e:	9505      	str	r5, [sp, #20]
 800fc60:	2322      	movs	r3, #34	; 0x22
 800fc62:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fd7c <_strtod_l+0x5ac>
 800fc66:	6023      	str	r3, [r4, #0]
 800fc68:	f04f 0a00 	mov.w	sl, #0
 800fc6c:	9b07      	ldr	r3, [sp, #28]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f43f adf2 	beq.w	800f858 <_strtod_l+0x88>
 800fc74:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc76:	4620      	mov	r0, r4
 800fc78:	f002 f820 	bl	8011cbc <_Bfree>
 800fc7c:	9905      	ldr	r1, [sp, #20]
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f002 f81c 	bl	8011cbc <_Bfree>
 800fc84:	4631      	mov	r1, r6
 800fc86:	4620      	mov	r0, r4
 800fc88:	f002 f818 	bl	8011cbc <_Bfree>
 800fc8c:	9907      	ldr	r1, [sp, #28]
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f002 f814 	bl	8011cbc <_Bfree>
 800fc94:	4629      	mov	r1, r5
 800fc96:	4620      	mov	r0, r4
 800fc98:	f002 f810 	bl	8011cbc <_Bfree>
 800fc9c:	e5dc      	b.n	800f858 <_strtod_l+0x88>
 800fc9e:	4b36      	ldr	r3, [pc, #216]	; (800fd78 <_strtod_l+0x5a8>)
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	2300      	movs	r3, #0
 800fca4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fca8:	4650      	mov	r0, sl
 800fcaa:	4659      	mov	r1, fp
 800fcac:	4699      	mov	r9, r3
 800fcae:	f1b8 0f01 	cmp.w	r8, #1
 800fcb2:	dc21      	bgt.n	800fcf8 <_strtod_l+0x528>
 800fcb4:	b10b      	cbz	r3, 800fcba <_strtod_l+0x4ea>
 800fcb6:	4682      	mov	sl, r0
 800fcb8:	468b      	mov	fp, r1
 800fcba:	4b2f      	ldr	r3, [pc, #188]	; (800fd78 <_strtod_l+0x5a8>)
 800fcbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fcc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fcc4:	4652      	mov	r2, sl
 800fcc6:	465b      	mov	r3, fp
 800fcc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fccc:	f7f0 fcac 	bl	8000628 <__aeabi_dmul>
 800fcd0:	4b2a      	ldr	r3, [pc, #168]	; (800fd7c <_strtod_l+0x5ac>)
 800fcd2:	460a      	mov	r2, r1
 800fcd4:	400b      	ands	r3, r1
 800fcd6:	492a      	ldr	r1, [pc, #168]	; (800fd80 <_strtod_l+0x5b0>)
 800fcd8:	428b      	cmp	r3, r1
 800fcda:	4682      	mov	sl, r0
 800fcdc:	d8bc      	bhi.n	800fc58 <_strtod_l+0x488>
 800fcde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fce2:	428b      	cmp	r3, r1
 800fce4:	bf86      	itte	hi
 800fce6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fd84 <_strtod_l+0x5b4>
 800fcea:	f04f 3aff 	movhi.w	sl, #4294967295
 800fcee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	9304      	str	r3, [sp, #16]
 800fcf6:	e084      	b.n	800fe02 <_strtod_l+0x632>
 800fcf8:	f018 0f01 	tst.w	r8, #1
 800fcfc:	d005      	beq.n	800fd0a <_strtod_l+0x53a>
 800fcfe:	9b04      	ldr	r3, [sp, #16]
 800fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd04:	f7f0 fc90 	bl	8000628 <__aeabi_dmul>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	9a04      	ldr	r2, [sp, #16]
 800fd0c:	3208      	adds	r2, #8
 800fd0e:	f109 0901 	add.w	r9, r9, #1
 800fd12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fd16:	9204      	str	r2, [sp, #16]
 800fd18:	e7c9      	b.n	800fcae <_strtod_l+0x4de>
 800fd1a:	d0ea      	beq.n	800fcf2 <_strtod_l+0x522>
 800fd1c:	f1c8 0800 	rsb	r8, r8, #0
 800fd20:	f018 020f 	ands.w	r2, r8, #15
 800fd24:	d00a      	beq.n	800fd3c <_strtod_l+0x56c>
 800fd26:	4b13      	ldr	r3, [pc, #76]	; (800fd74 <_strtod_l+0x5a4>)
 800fd28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd2c:	4650      	mov	r0, sl
 800fd2e:	4659      	mov	r1, fp
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	f7f0 fda2 	bl	800087c <__aeabi_ddiv>
 800fd38:	4682      	mov	sl, r0
 800fd3a:	468b      	mov	fp, r1
 800fd3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fd40:	d0d7      	beq.n	800fcf2 <_strtod_l+0x522>
 800fd42:	f1b8 0f1f 	cmp.w	r8, #31
 800fd46:	dd1f      	ble.n	800fd88 <_strtod_l+0x5b8>
 800fd48:	2500      	movs	r5, #0
 800fd4a:	462e      	mov	r6, r5
 800fd4c:	9507      	str	r5, [sp, #28]
 800fd4e:	9505      	str	r5, [sp, #20]
 800fd50:	2322      	movs	r3, #34	; 0x22
 800fd52:	f04f 0a00 	mov.w	sl, #0
 800fd56:	f04f 0b00 	mov.w	fp, #0
 800fd5a:	6023      	str	r3, [r4, #0]
 800fd5c:	e786      	b.n	800fc6c <_strtod_l+0x49c>
 800fd5e:	bf00      	nop
 800fd60:	08013bb1 	.word	0x08013bb1
 800fd64:	08013bec 	.word	0x08013bec
 800fd68:	08013ba9 	.word	0x08013ba9
 800fd6c:	08013ddc 	.word	0x08013ddc
 800fd70:	08013cd7 	.word	0x08013cd7
 800fd74:	08013f50 	.word	0x08013f50
 800fd78:	08013f28 	.word	0x08013f28
 800fd7c:	7ff00000 	.word	0x7ff00000
 800fd80:	7ca00000 	.word	0x7ca00000
 800fd84:	7fefffff 	.word	0x7fefffff
 800fd88:	f018 0310 	ands.w	r3, r8, #16
 800fd8c:	bf18      	it	ne
 800fd8e:	236a      	movne	r3, #106	; 0x6a
 800fd90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010140 <_strtod_l+0x970>
 800fd94:	9304      	str	r3, [sp, #16]
 800fd96:	4650      	mov	r0, sl
 800fd98:	4659      	mov	r1, fp
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f018 0f01 	tst.w	r8, #1
 800fda0:	d004      	beq.n	800fdac <_strtod_l+0x5dc>
 800fda2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fda6:	f7f0 fc3f 	bl	8000628 <__aeabi_dmul>
 800fdaa:	2301      	movs	r3, #1
 800fdac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fdb0:	f109 0908 	add.w	r9, r9, #8
 800fdb4:	d1f2      	bne.n	800fd9c <_strtod_l+0x5cc>
 800fdb6:	b10b      	cbz	r3, 800fdbc <_strtod_l+0x5ec>
 800fdb8:	4682      	mov	sl, r0
 800fdba:	468b      	mov	fp, r1
 800fdbc:	9b04      	ldr	r3, [sp, #16]
 800fdbe:	b1c3      	cbz	r3, 800fdf2 <_strtod_l+0x622>
 800fdc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fdc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	4659      	mov	r1, fp
 800fdcc:	dd11      	ble.n	800fdf2 <_strtod_l+0x622>
 800fdce:	2b1f      	cmp	r3, #31
 800fdd0:	f340 8124 	ble.w	801001c <_strtod_l+0x84c>
 800fdd4:	2b34      	cmp	r3, #52	; 0x34
 800fdd6:	bfde      	ittt	le
 800fdd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fddc:	f04f 33ff 	movle.w	r3, #4294967295
 800fde0:	fa03 f202 	lslle.w	r2, r3, r2
 800fde4:	f04f 0a00 	mov.w	sl, #0
 800fde8:	bfcc      	ite	gt
 800fdea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fdee:	ea02 0b01 	andle.w	fp, r2, r1
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	4650      	mov	r0, sl
 800fdf8:	4659      	mov	r1, fp
 800fdfa:	f7f0 fe7d 	bl	8000af8 <__aeabi_dcmpeq>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d1a2      	bne.n	800fd48 <_strtod_l+0x578>
 800fe02:	9b07      	ldr	r3, [sp, #28]
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	9908      	ldr	r1, [sp, #32]
 800fe08:	462b      	mov	r3, r5
 800fe0a:	463a      	mov	r2, r7
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f001 ffbd 	bl	8011d8c <__s2b>
 800fe12:	9007      	str	r0, [sp, #28]
 800fe14:	2800      	cmp	r0, #0
 800fe16:	f43f af1f 	beq.w	800fc58 <_strtod_l+0x488>
 800fe1a:	9b05      	ldr	r3, [sp, #20]
 800fe1c:	1b9e      	subs	r6, r3, r6
 800fe1e:	9b06      	ldr	r3, [sp, #24]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	bfb4      	ite	lt
 800fe24:	4633      	movlt	r3, r6
 800fe26:	2300      	movge	r3, #0
 800fe28:	930c      	str	r3, [sp, #48]	; 0x30
 800fe2a:	9b06      	ldr	r3, [sp, #24]
 800fe2c:	2500      	movs	r5, #0
 800fe2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fe32:	9312      	str	r3, [sp, #72]	; 0x48
 800fe34:	462e      	mov	r6, r5
 800fe36:	9b07      	ldr	r3, [sp, #28]
 800fe38:	4620      	mov	r0, r4
 800fe3a:	6859      	ldr	r1, [r3, #4]
 800fe3c:	f001 fefe 	bl	8011c3c <_Balloc>
 800fe40:	9005      	str	r0, [sp, #20]
 800fe42:	2800      	cmp	r0, #0
 800fe44:	f43f af0c 	beq.w	800fc60 <_strtod_l+0x490>
 800fe48:	9b07      	ldr	r3, [sp, #28]
 800fe4a:	691a      	ldr	r2, [r3, #16]
 800fe4c:	3202      	adds	r2, #2
 800fe4e:	f103 010c 	add.w	r1, r3, #12
 800fe52:	0092      	lsls	r2, r2, #2
 800fe54:	300c      	adds	r0, #12
 800fe56:	f7fe feac 	bl	800ebb2 <memcpy>
 800fe5a:	ec4b ab10 	vmov	d0, sl, fp
 800fe5e:	aa1a      	add	r2, sp, #104	; 0x68
 800fe60:	a919      	add	r1, sp, #100	; 0x64
 800fe62:	4620      	mov	r0, r4
 800fe64:	f002 fad8 	bl	8012418 <__d2b>
 800fe68:	ec4b ab18 	vmov	d8, sl, fp
 800fe6c:	9018      	str	r0, [sp, #96]	; 0x60
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f43f aef6 	beq.w	800fc60 <_strtod_l+0x490>
 800fe74:	2101      	movs	r1, #1
 800fe76:	4620      	mov	r0, r4
 800fe78:	f002 f822 	bl	8011ec0 <__i2b>
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	f43f aeee 	beq.w	800fc60 <_strtod_l+0x490>
 800fe84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe86:	9904      	ldr	r1, [sp, #16]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	bfab      	itete	ge
 800fe8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fe8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fe90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fe92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fe96:	bfac      	ite	ge
 800fe98:	eb03 0902 	addge.w	r9, r3, r2
 800fe9c:	1ad7      	sublt	r7, r2, r3
 800fe9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fea0:	eba3 0801 	sub.w	r8, r3, r1
 800fea4:	4490      	add	r8, r2
 800fea6:	4ba1      	ldr	r3, [pc, #644]	; (801012c <_strtod_l+0x95c>)
 800fea8:	f108 38ff 	add.w	r8, r8, #4294967295
 800feac:	4598      	cmp	r8, r3
 800feae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800feb2:	f280 80c7 	bge.w	8010044 <_strtod_l+0x874>
 800feb6:	eba3 0308 	sub.w	r3, r3, r8
 800feba:	2b1f      	cmp	r3, #31
 800febc:	eba2 0203 	sub.w	r2, r2, r3
 800fec0:	f04f 0101 	mov.w	r1, #1
 800fec4:	f300 80b1 	bgt.w	801002a <_strtod_l+0x85a>
 800fec8:	fa01 f303 	lsl.w	r3, r1, r3
 800fecc:	930d      	str	r3, [sp, #52]	; 0x34
 800fece:	2300      	movs	r3, #0
 800fed0:	9308      	str	r3, [sp, #32]
 800fed2:	eb09 0802 	add.w	r8, r9, r2
 800fed6:	9b04      	ldr	r3, [sp, #16]
 800fed8:	45c1      	cmp	r9, r8
 800feda:	4417      	add	r7, r2
 800fedc:	441f      	add	r7, r3
 800fede:	464b      	mov	r3, r9
 800fee0:	bfa8      	it	ge
 800fee2:	4643      	movge	r3, r8
 800fee4:	42bb      	cmp	r3, r7
 800fee6:	bfa8      	it	ge
 800fee8:	463b      	movge	r3, r7
 800feea:	2b00      	cmp	r3, #0
 800feec:	bfc2      	ittt	gt
 800feee:	eba8 0803 	subgt.w	r8, r8, r3
 800fef2:	1aff      	subgt	r7, r7, r3
 800fef4:	eba9 0903 	subgt.w	r9, r9, r3
 800fef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	dd17      	ble.n	800ff2e <_strtod_l+0x75e>
 800fefe:	4631      	mov	r1, r6
 800ff00:	461a      	mov	r2, r3
 800ff02:	4620      	mov	r0, r4
 800ff04:	f002 f89c 	bl	8012040 <__pow5mult>
 800ff08:	4606      	mov	r6, r0
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	f43f aea8 	beq.w	800fc60 <_strtod_l+0x490>
 800ff10:	4601      	mov	r1, r0
 800ff12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ff14:	4620      	mov	r0, r4
 800ff16:	f001 ffe9 	bl	8011eec <__multiply>
 800ff1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	f43f ae9f 	beq.w	800fc60 <_strtod_l+0x490>
 800ff22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff24:	4620      	mov	r0, r4
 800ff26:	f001 fec9 	bl	8011cbc <_Bfree>
 800ff2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff2c:	9318      	str	r3, [sp, #96]	; 0x60
 800ff2e:	f1b8 0f00 	cmp.w	r8, #0
 800ff32:	f300 808c 	bgt.w	801004e <_strtod_l+0x87e>
 800ff36:	9b06      	ldr	r3, [sp, #24]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	dd08      	ble.n	800ff4e <_strtod_l+0x77e>
 800ff3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff3e:	9905      	ldr	r1, [sp, #20]
 800ff40:	4620      	mov	r0, r4
 800ff42:	f002 f87d 	bl	8012040 <__pow5mult>
 800ff46:	9005      	str	r0, [sp, #20]
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	f43f ae89 	beq.w	800fc60 <_strtod_l+0x490>
 800ff4e:	2f00      	cmp	r7, #0
 800ff50:	dd08      	ble.n	800ff64 <_strtod_l+0x794>
 800ff52:	9905      	ldr	r1, [sp, #20]
 800ff54:	463a      	mov	r2, r7
 800ff56:	4620      	mov	r0, r4
 800ff58:	f002 f8cc 	bl	80120f4 <__lshift>
 800ff5c:	9005      	str	r0, [sp, #20]
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	f43f ae7e 	beq.w	800fc60 <_strtod_l+0x490>
 800ff64:	f1b9 0f00 	cmp.w	r9, #0
 800ff68:	dd08      	ble.n	800ff7c <_strtod_l+0x7ac>
 800ff6a:	4631      	mov	r1, r6
 800ff6c:	464a      	mov	r2, r9
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f002 f8c0 	bl	80120f4 <__lshift>
 800ff74:	4606      	mov	r6, r0
 800ff76:	2800      	cmp	r0, #0
 800ff78:	f43f ae72 	beq.w	800fc60 <_strtod_l+0x490>
 800ff7c:	9a05      	ldr	r2, [sp, #20]
 800ff7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff80:	4620      	mov	r0, r4
 800ff82:	f002 f943 	bl	801220c <__mdiff>
 800ff86:	4605      	mov	r5, r0
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	f43f ae69 	beq.w	800fc60 <_strtod_l+0x490>
 800ff8e:	68c3      	ldr	r3, [r0, #12]
 800ff90:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff92:	2300      	movs	r3, #0
 800ff94:	60c3      	str	r3, [r0, #12]
 800ff96:	4631      	mov	r1, r6
 800ff98:	f002 f91c 	bl	80121d4 <__mcmp>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	da60      	bge.n	8010062 <_strtod_l+0x892>
 800ffa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffa2:	ea53 030a 	orrs.w	r3, r3, sl
 800ffa6:	f040 8082 	bne.w	80100ae <_strtod_l+0x8de>
 800ffaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d17d      	bne.n	80100ae <_strtod_l+0x8de>
 800ffb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ffb6:	0d1b      	lsrs	r3, r3, #20
 800ffb8:	051b      	lsls	r3, r3, #20
 800ffba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ffbe:	d976      	bls.n	80100ae <_strtod_l+0x8de>
 800ffc0:	696b      	ldr	r3, [r5, #20]
 800ffc2:	b913      	cbnz	r3, 800ffca <_strtod_l+0x7fa>
 800ffc4:	692b      	ldr	r3, [r5, #16]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	dd71      	ble.n	80100ae <_strtod_l+0x8de>
 800ffca:	4629      	mov	r1, r5
 800ffcc:	2201      	movs	r2, #1
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f002 f890 	bl	80120f4 <__lshift>
 800ffd4:	4631      	mov	r1, r6
 800ffd6:	4605      	mov	r5, r0
 800ffd8:	f002 f8fc 	bl	80121d4 <__mcmp>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	dd66      	ble.n	80100ae <_strtod_l+0x8de>
 800ffe0:	9904      	ldr	r1, [sp, #16]
 800ffe2:	4a53      	ldr	r2, [pc, #332]	; (8010130 <_strtod_l+0x960>)
 800ffe4:	465b      	mov	r3, fp
 800ffe6:	2900      	cmp	r1, #0
 800ffe8:	f000 8081 	beq.w	80100ee <_strtod_l+0x91e>
 800ffec:	ea02 010b 	and.w	r1, r2, fp
 800fff0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fff4:	dc7b      	bgt.n	80100ee <_strtod_l+0x91e>
 800fff6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fffa:	f77f aea9 	ble.w	800fd50 <_strtod_l+0x580>
 800fffe:	4b4d      	ldr	r3, [pc, #308]	; (8010134 <_strtod_l+0x964>)
 8010000:	4650      	mov	r0, sl
 8010002:	4659      	mov	r1, fp
 8010004:	2200      	movs	r2, #0
 8010006:	f7f0 fb0f 	bl	8000628 <__aeabi_dmul>
 801000a:	460b      	mov	r3, r1
 801000c:	4303      	orrs	r3, r0
 801000e:	bf08      	it	eq
 8010010:	2322      	moveq	r3, #34	; 0x22
 8010012:	4682      	mov	sl, r0
 8010014:	468b      	mov	fp, r1
 8010016:	bf08      	it	eq
 8010018:	6023      	streq	r3, [r4, #0]
 801001a:	e62b      	b.n	800fc74 <_strtod_l+0x4a4>
 801001c:	f04f 32ff 	mov.w	r2, #4294967295
 8010020:	fa02 f303 	lsl.w	r3, r2, r3
 8010024:	ea03 0a0a 	and.w	sl, r3, sl
 8010028:	e6e3      	b.n	800fdf2 <_strtod_l+0x622>
 801002a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801002e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010032:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010036:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801003a:	fa01 f308 	lsl.w	r3, r1, r8
 801003e:	9308      	str	r3, [sp, #32]
 8010040:	910d      	str	r1, [sp, #52]	; 0x34
 8010042:	e746      	b.n	800fed2 <_strtod_l+0x702>
 8010044:	2300      	movs	r3, #0
 8010046:	9308      	str	r3, [sp, #32]
 8010048:	2301      	movs	r3, #1
 801004a:	930d      	str	r3, [sp, #52]	; 0x34
 801004c:	e741      	b.n	800fed2 <_strtod_l+0x702>
 801004e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010050:	4642      	mov	r2, r8
 8010052:	4620      	mov	r0, r4
 8010054:	f002 f84e 	bl	80120f4 <__lshift>
 8010058:	9018      	str	r0, [sp, #96]	; 0x60
 801005a:	2800      	cmp	r0, #0
 801005c:	f47f af6b 	bne.w	800ff36 <_strtod_l+0x766>
 8010060:	e5fe      	b.n	800fc60 <_strtod_l+0x490>
 8010062:	465f      	mov	r7, fp
 8010064:	d16e      	bne.n	8010144 <_strtod_l+0x974>
 8010066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010068:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801006c:	b342      	cbz	r2, 80100c0 <_strtod_l+0x8f0>
 801006e:	4a32      	ldr	r2, [pc, #200]	; (8010138 <_strtod_l+0x968>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d128      	bne.n	80100c6 <_strtod_l+0x8f6>
 8010074:	9b04      	ldr	r3, [sp, #16]
 8010076:	4651      	mov	r1, sl
 8010078:	b1eb      	cbz	r3, 80100b6 <_strtod_l+0x8e6>
 801007a:	4b2d      	ldr	r3, [pc, #180]	; (8010130 <_strtod_l+0x960>)
 801007c:	403b      	ands	r3, r7
 801007e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010082:	f04f 32ff 	mov.w	r2, #4294967295
 8010086:	d819      	bhi.n	80100bc <_strtod_l+0x8ec>
 8010088:	0d1b      	lsrs	r3, r3, #20
 801008a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801008e:	fa02 f303 	lsl.w	r3, r2, r3
 8010092:	4299      	cmp	r1, r3
 8010094:	d117      	bne.n	80100c6 <_strtod_l+0x8f6>
 8010096:	4b29      	ldr	r3, [pc, #164]	; (801013c <_strtod_l+0x96c>)
 8010098:	429f      	cmp	r7, r3
 801009a:	d102      	bne.n	80100a2 <_strtod_l+0x8d2>
 801009c:	3101      	adds	r1, #1
 801009e:	f43f addf 	beq.w	800fc60 <_strtod_l+0x490>
 80100a2:	4b23      	ldr	r3, [pc, #140]	; (8010130 <_strtod_l+0x960>)
 80100a4:	403b      	ands	r3, r7
 80100a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80100aa:	f04f 0a00 	mov.w	sl, #0
 80100ae:	9b04      	ldr	r3, [sp, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1a4      	bne.n	800fffe <_strtod_l+0x82e>
 80100b4:	e5de      	b.n	800fc74 <_strtod_l+0x4a4>
 80100b6:	f04f 33ff 	mov.w	r3, #4294967295
 80100ba:	e7ea      	b.n	8010092 <_strtod_l+0x8c2>
 80100bc:	4613      	mov	r3, r2
 80100be:	e7e8      	b.n	8010092 <_strtod_l+0x8c2>
 80100c0:	ea53 030a 	orrs.w	r3, r3, sl
 80100c4:	d08c      	beq.n	800ffe0 <_strtod_l+0x810>
 80100c6:	9b08      	ldr	r3, [sp, #32]
 80100c8:	b1db      	cbz	r3, 8010102 <_strtod_l+0x932>
 80100ca:	423b      	tst	r3, r7
 80100cc:	d0ef      	beq.n	80100ae <_strtod_l+0x8de>
 80100ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d0:	9a04      	ldr	r2, [sp, #16]
 80100d2:	4650      	mov	r0, sl
 80100d4:	4659      	mov	r1, fp
 80100d6:	b1c3      	cbz	r3, 801010a <_strtod_l+0x93a>
 80100d8:	f7ff fb5d 	bl	800f796 <sulp>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	ec51 0b18 	vmov	r0, r1, d8
 80100e4:	f7f0 f8ea 	bl	80002bc <__adddf3>
 80100e8:	4682      	mov	sl, r0
 80100ea:	468b      	mov	fp, r1
 80100ec:	e7df      	b.n	80100ae <_strtod_l+0x8de>
 80100ee:	4013      	ands	r3, r2
 80100f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80100f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80100f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80100fc:	f04f 3aff 	mov.w	sl, #4294967295
 8010100:	e7d5      	b.n	80100ae <_strtod_l+0x8de>
 8010102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010104:	ea13 0f0a 	tst.w	r3, sl
 8010108:	e7e0      	b.n	80100cc <_strtod_l+0x8fc>
 801010a:	f7ff fb44 	bl	800f796 <sulp>
 801010e:	4602      	mov	r2, r0
 8010110:	460b      	mov	r3, r1
 8010112:	ec51 0b18 	vmov	r0, r1, d8
 8010116:	f7f0 f8cf 	bl	80002b8 <__aeabi_dsub>
 801011a:	2200      	movs	r2, #0
 801011c:	2300      	movs	r3, #0
 801011e:	4682      	mov	sl, r0
 8010120:	468b      	mov	fp, r1
 8010122:	f7f0 fce9 	bl	8000af8 <__aeabi_dcmpeq>
 8010126:	2800      	cmp	r0, #0
 8010128:	d0c1      	beq.n	80100ae <_strtod_l+0x8de>
 801012a:	e611      	b.n	800fd50 <_strtod_l+0x580>
 801012c:	fffffc02 	.word	0xfffffc02
 8010130:	7ff00000 	.word	0x7ff00000
 8010134:	39500000 	.word	0x39500000
 8010138:	000fffff 	.word	0x000fffff
 801013c:	7fefffff 	.word	0x7fefffff
 8010140:	08013c00 	.word	0x08013c00
 8010144:	4631      	mov	r1, r6
 8010146:	4628      	mov	r0, r5
 8010148:	f002 f9c2 	bl	80124d0 <__ratio>
 801014c:	ec59 8b10 	vmov	r8, r9, d0
 8010150:	ee10 0a10 	vmov	r0, s0
 8010154:	2200      	movs	r2, #0
 8010156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801015a:	4649      	mov	r1, r9
 801015c:	f7f0 fce0 	bl	8000b20 <__aeabi_dcmple>
 8010160:	2800      	cmp	r0, #0
 8010162:	d07a      	beq.n	801025a <_strtod_l+0xa8a>
 8010164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010166:	2b00      	cmp	r3, #0
 8010168:	d04a      	beq.n	8010200 <_strtod_l+0xa30>
 801016a:	4b95      	ldr	r3, [pc, #596]	; (80103c0 <_strtod_l+0xbf0>)
 801016c:	2200      	movs	r2, #0
 801016e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010172:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80103c0 <_strtod_l+0xbf0>
 8010176:	f04f 0800 	mov.w	r8, #0
 801017a:	4b92      	ldr	r3, [pc, #584]	; (80103c4 <_strtod_l+0xbf4>)
 801017c:	403b      	ands	r3, r7
 801017e:	930d      	str	r3, [sp, #52]	; 0x34
 8010180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010182:	4b91      	ldr	r3, [pc, #580]	; (80103c8 <_strtod_l+0xbf8>)
 8010184:	429a      	cmp	r2, r3
 8010186:	f040 80b0 	bne.w	80102ea <_strtod_l+0xb1a>
 801018a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801018e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010192:	ec4b ab10 	vmov	d0, sl, fp
 8010196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801019a:	f002 f8c1 	bl	8012320 <__ulp>
 801019e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101a2:	ec53 2b10 	vmov	r2, r3, d0
 80101a6:	f7f0 fa3f 	bl	8000628 <__aeabi_dmul>
 80101aa:	4652      	mov	r2, sl
 80101ac:	465b      	mov	r3, fp
 80101ae:	f7f0 f885 	bl	80002bc <__adddf3>
 80101b2:	460b      	mov	r3, r1
 80101b4:	4983      	ldr	r1, [pc, #524]	; (80103c4 <_strtod_l+0xbf4>)
 80101b6:	4a85      	ldr	r2, [pc, #532]	; (80103cc <_strtod_l+0xbfc>)
 80101b8:	4019      	ands	r1, r3
 80101ba:	4291      	cmp	r1, r2
 80101bc:	4682      	mov	sl, r0
 80101be:	d960      	bls.n	8010282 <_strtod_l+0xab2>
 80101c0:	ee18 3a90 	vmov	r3, s17
 80101c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d104      	bne.n	80101d6 <_strtod_l+0xa06>
 80101cc:	ee18 3a10 	vmov	r3, s16
 80101d0:	3301      	adds	r3, #1
 80101d2:	f43f ad45 	beq.w	800fc60 <_strtod_l+0x490>
 80101d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80103d8 <_strtod_l+0xc08>
 80101da:	f04f 3aff 	mov.w	sl, #4294967295
 80101de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80101e0:	4620      	mov	r0, r4
 80101e2:	f001 fd6b 	bl	8011cbc <_Bfree>
 80101e6:	9905      	ldr	r1, [sp, #20]
 80101e8:	4620      	mov	r0, r4
 80101ea:	f001 fd67 	bl	8011cbc <_Bfree>
 80101ee:	4631      	mov	r1, r6
 80101f0:	4620      	mov	r0, r4
 80101f2:	f001 fd63 	bl	8011cbc <_Bfree>
 80101f6:	4629      	mov	r1, r5
 80101f8:	4620      	mov	r0, r4
 80101fa:	f001 fd5f 	bl	8011cbc <_Bfree>
 80101fe:	e61a      	b.n	800fe36 <_strtod_l+0x666>
 8010200:	f1ba 0f00 	cmp.w	sl, #0
 8010204:	d11b      	bne.n	801023e <_strtod_l+0xa6e>
 8010206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801020a:	b9f3      	cbnz	r3, 801024a <_strtod_l+0xa7a>
 801020c:	4b6c      	ldr	r3, [pc, #432]	; (80103c0 <_strtod_l+0xbf0>)
 801020e:	2200      	movs	r2, #0
 8010210:	4640      	mov	r0, r8
 8010212:	4649      	mov	r1, r9
 8010214:	f7f0 fc7a 	bl	8000b0c <__aeabi_dcmplt>
 8010218:	b9d0      	cbnz	r0, 8010250 <_strtod_l+0xa80>
 801021a:	4640      	mov	r0, r8
 801021c:	4649      	mov	r1, r9
 801021e:	4b6c      	ldr	r3, [pc, #432]	; (80103d0 <_strtod_l+0xc00>)
 8010220:	2200      	movs	r2, #0
 8010222:	f7f0 fa01 	bl	8000628 <__aeabi_dmul>
 8010226:	4680      	mov	r8, r0
 8010228:	4689      	mov	r9, r1
 801022a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801022e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010232:	9315      	str	r3, [sp, #84]	; 0x54
 8010234:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801023c:	e79d      	b.n	801017a <_strtod_l+0x9aa>
 801023e:	f1ba 0f01 	cmp.w	sl, #1
 8010242:	d102      	bne.n	801024a <_strtod_l+0xa7a>
 8010244:	2f00      	cmp	r7, #0
 8010246:	f43f ad83 	beq.w	800fd50 <_strtod_l+0x580>
 801024a:	4b62      	ldr	r3, [pc, #392]	; (80103d4 <_strtod_l+0xc04>)
 801024c:	2200      	movs	r2, #0
 801024e:	e78e      	b.n	801016e <_strtod_l+0x99e>
 8010250:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80103d0 <_strtod_l+0xc00>
 8010254:	f04f 0800 	mov.w	r8, #0
 8010258:	e7e7      	b.n	801022a <_strtod_l+0xa5a>
 801025a:	4b5d      	ldr	r3, [pc, #372]	; (80103d0 <_strtod_l+0xc00>)
 801025c:	4640      	mov	r0, r8
 801025e:	4649      	mov	r1, r9
 8010260:	2200      	movs	r2, #0
 8010262:	f7f0 f9e1 	bl	8000628 <__aeabi_dmul>
 8010266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010268:	4680      	mov	r8, r0
 801026a:	4689      	mov	r9, r1
 801026c:	b933      	cbnz	r3, 801027c <_strtod_l+0xaac>
 801026e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010272:	900e      	str	r0, [sp, #56]	; 0x38
 8010274:	930f      	str	r3, [sp, #60]	; 0x3c
 8010276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801027a:	e7dd      	b.n	8010238 <_strtod_l+0xa68>
 801027c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010280:	e7f9      	b.n	8010276 <_strtod_l+0xaa6>
 8010282:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010286:	9b04      	ldr	r3, [sp, #16]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d1a8      	bne.n	80101de <_strtod_l+0xa0e>
 801028c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010292:	0d1b      	lsrs	r3, r3, #20
 8010294:	051b      	lsls	r3, r3, #20
 8010296:	429a      	cmp	r2, r3
 8010298:	d1a1      	bne.n	80101de <_strtod_l+0xa0e>
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7f0 fd23 	bl	8000ce8 <__aeabi_d2lz>
 80102a2:	f7f0 f993 	bl	80005cc <__aeabi_l2d>
 80102a6:	4602      	mov	r2, r0
 80102a8:	460b      	mov	r3, r1
 80102aa:	4640      	mov	r0, r8
 80102ac:	4649      	mov	r1, r9
 80102ae:	f7f0 f803 	bl	80002b8 <__aeabi_dsub>
 80102b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102b8:	ea43 030a 	orr.w	r3, r3, sl
 80102bc:	4313      	orrs	r3, r2
 80102be:	4680      	mov	r8, r0
 80102c0:	4689      	mov	r9, r1
 80102c2:	d055      	beq.n	8010370 <_strtod_l+0xba0>
 80102c4:	a336      	add	r3, pc, #216	; (adr r3, 80103a0 <_strtod_l+0xbd0>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	f7f0 fc1f 	bl	8000b0c <__aeabi_dcmplt>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f47f acd0 	bne.w	800fc74 <_strtod_l+0x4a4>
 80102d4:	a334      	add	r3, pc, #208	; (adr r3, 80103a8 <_strtod_l+0xbd8>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	4640      	mov	r0, r8
 80102dc:	4649      	mov	r1, r9
 80102de:	f7f0 fc33 	bl	8000b48 <__aeabi_dcmpgt>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	f43f af7b 	beq.w	80101de <_strtod_l+0xa0e>
 80102e8:	e4c4      	b.n	800fc74 <_strtod_l+0x4a4>
 80102ea:	9b04      	ldr	r3, [sp, #16]
 80102ec:	b333      	cbz	r3, 801033c <_strtod_l+0xb6c>
 80102ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102f4:	d822      	bhi.n	801033c <_strtod_l+0xb6c>
 80102f6:	a32e      	add	r3, pc, #184	; (adr r3, 80103b0 <_strtod_l+0xbe0>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	4640      	mov	r0, r8
 80102fe:	4649      	mov	r1, r9
 8010300:	f7f0 fc0e 	bl	8000b20 <__aeabi_dcmple>
 8010304:	b1a0      	cbz	r0, 8010330 <_strtod_l+0xb60>
 8010306:	4649      	mov	r1, r9
 8010308:	4640      	mov	r0, r8
 801030a:	f7f0 fc65 	bl	8000bd8 <__aeabi_d2uiz>
 801030e:	2801      	cmp	r0, #1
 8010310:	bf38      	it	cc
 8010312:	2001      	movcc	r0, #1
 8010314:	f7f0 f90e 	bl	8000534 <__aeabi_ui2d>
 8010318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801031a:	4680      	mov	r8, r0
 801031c:	4689      	mov	r9, r1
 801031e:	bb23      	cbnz	r3, 801036a <_strtod_l+0xb9a>
 8010320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010324:	9010      	str	r0, [sp, #64]	; 0x40
 8010326:	9311      	str	r3, [sp, #68]	; 0x44
 8010328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801032c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010334:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010338:	1a9b      	subs	r3, r3, r2
 801033a:	9309      	str	r3, [sp, #36]	; 0x24
 801033c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010340:	eeb0 0a48 	vmov.f32	s0, s16
 8010344:	eef0 0a68 	vmov.f32	s1, s17
 8010348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801034c:	f001 ffe8 	bl	8012320 <__ulp>
 8010350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010354:	ec53 2b10 	vmov	r2, r3, d0
 8010358:	f7f0 f966 	bl	8000628 <__aeabi_dmul>
 801035c:	ec53 2b18 	vmov	r2, r3, d8
 8010360:	f7ef ffac 	bl	80002bc <__adddf3>
 8010364:	4682      	mov	sl, r0
 8010366:	468b      	mov	fp, r1
 8010368:	e78d      	b.n	8010286 <_strtod_l+0xab6>
 801036a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801036e:	e7db      	b.n	8010328 <_strtod_l+0xb58>
 8010370:	a311      	add	r3, pc, #68	; (adr r3, 80103b8 <_strtod_l+0xbe8>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	f7f0 fbc9 	bl	8000b0c <__aeabi_dcmplt>
 801037a:	e7b2      	b.n	80102e2 <_strtod_l+0xb12>
 801037c:	2300      	movs	r3, #0
 801037e:	930a      	str	r3, [sp, #40]	; 0x28
 8010380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010384:	6013      	str	r3, [r2, #0]
 8010386:	f7ff ba6b 	b.w	800f860 <_strtod_l+0x90>
 801038a:	2a65      	cmp	r2, #101	; 0x65
 801038c:	f43f ab5f 	beq.w	800fa4e <_strtod_l+0x27e>
 8010390:	2a45      	cmp	r2, #69	; 0x45
 8010392:	f43f ab5c 	beq.w	800fa4e <_strtod_l+0x27e>
 8010396:	2301      	movs	r3, #1
 8010398:	f7ff bb94 	b.w	800fac4 <_strtod_l+0x2f4>
 801039c:	f3af 8000 	nop.w
 80103a0:	94a03595 	.word	0x94a03595
 80103a4:	3fdfffff 	.word	0x3fdfffff
 80103a8:	35afe535 	.word	0x35afe535
 80103ac:	3fe00000 	.word	0x3fe00000
 80103b0:	ffc00000 	.word	0xffc00000
 80103b4:	41dfffff 	.word	0x41dfffff
 80103b8:	94a03595 	.word	0x94a03595
 80103bc:	3fcfffff 	.word	0x3fcfffff
 80103c0:	3ff00000 	.word	0x3ff00000
 80103c4:	7ff00000 	.word	0x7ff00000
 80103c8:	7fe00000 	.word	0x7fe00000
 80103cc:	7c9fffff 	.word	0x7c9fffff
 80103d0:	3fe00000 	.word	0x3fe00000
 80103d4:	bff00000 	.word	0xbff00000
 80103d8:	7fefffff 	.word	0x7fefffff

080103dc <strtod>:
 80103dc:	460a      	mov	r2, r1
 80103de:	4601      	mov	r1, r0
 80103e0:	4802      	ldr	r0, [pc, #8]	; (80103ec <strtod+0x10>)
 80103e2:	4b03      	ldr	r3, [pc, #12]	; (80103f0 <strtod+0x14>)
 80103e4:	6800      	ldr	r0, [r0, #0]
 80103e6:	f7ff b9f3 	b.w	800f7d0 <_strtod_l>
 80103ea:	bf00      	nop
 80103ec:	20000018 	.word	0x20000018
 80103f0:	20000080 	.word	0x20000080

080103f4 <strtok>:
 80103f4:	4b16      	ldr	r3, [pc, #88]	; (8010450 <strtok+0x5c>)
 80103f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103f8:	681e      	ldr	r6, [r3, #0]
 80103fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80103fc:	4605      	mov	r5, r0
 80103fe:	b9fc      	cbnz	r4, 8010440 <strtok+0x4c>
 8010400:	2050      	movs	r0, #80	; 0x50
 8010402:	9101      	str	r1, [sp, #4]
 8010404:	f001 fbf4 	bl	8011bf0 <malloc>
 8010408:	9901      	ldr	r1, [sp, #4]
 801040a:	65b0      	str	r0, [r6, #88]	; 0x58
 801040c:	4602      	mov	r2, r0
 801040e:	b920      	cbnz	r0, 801041a <strtok+0x26>
 8010410:	4b10      	ldr	r3, [pc, #64]	; (8010454 <strtok+0x60>)
 8010412:	4811      	ldr	r0, [pc, #68]	; (8010458 <strtok+0x64>)
 8010414:	2157      	movs	r1, #87	; 0x57
 8010416:	f000 f8e7 	bl	80105e8 <__assert_func>
 801041a:	e9c0 4400 	strd	r4, r4, [r0]
 801041e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010422:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010426:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801042a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801042e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010432:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010436:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801043a:	6184      	str	r4, [r0, #24]
 801043c:	7704      	strb	r4, [r0, #28]
 801043e:	6244      	str	r4, [r0, #36]	; 0x24
 8010440:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8010442:	2301      	movs	r3, #1
 8010444:	4628      	mov	r0, r5
 8010446:	b002      	add	sp, #8
 8010448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801044c:	f000 b806 	b.w	801045c <__strtok_r>
 8010450:	20000018 	.word	0x20000018
 8010454:	08013c28 	.word	0x08013c28
 8010458:	08013c3f 	.word	0x08013c3f

0801045c <__strtok_r>:
 801045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801045e:	b908      	cbnz	r0, 8010464 <__strtok_r+0x8>
 8010460:	6810      	ldr	r0, [r2, #0]
 8010462:	b188      	cbz	r0, 8010488 <__strtok_r+0x2c>
 8010464:	4604      	mov	r4, r0
 8010466:	4620      	mov	r0, r4
 8010468:	f814 5b01 	ldrb.w	r5, [r4], #1
 801046c:	460f      	mov	r7, r1
 801046e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010472:	b91e      	cbnz	r6, 801047c <__strtok_r+0x20>
 8010474:	b965      	cbnz	r5, 8010490 <__strtok_r+0x34>
 8010476:	6015      	str	r5, [r2, #0]
 8010478:	4628      	mov	r0, r5
 801047a:	e005      	b.n	8010488 <__strtok_r+0x2c>
 801047c:	42b5      	cmp	r5, r6
 801047e:	d1f6      	bne.n	801046e <__strtok_r+0x12>
 8010480:	2b00      	cmp	r3, #0
 8010482:	d1f0      	bne.n	8010466 <__strtok_r+0xa>
 8010484:	6014      	str	r4, [r2, #0]
 8010486:	7003      	strb	r3, [r0, #0]
 8010488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801048a:	461c      	mov	r4, r3
 801048c:	e00c      	b.n	80104a8 <__strtok_r+0x4c>
 801048e:	b915      	cbnz	r5, 8010496 <__strtok_r+0x3a>
 8010490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010494:	460e      	mov	r6, r1
 8010496:	f816 5b01 	ldrb.w	r5, [r6], #1
 801049a:	42ab      	cmp	r3, r5
 801049c:	d1f7      	bne.n	801048e <__strtok_r+0x32>
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d0f3      	beq.n	801048a <__strtok_r+0x2e>
 80104a2:	2300      	movs	r3, #0
 80104a4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80104a8:	6014      	str	r4, [r2, #0]
 80104aa:	e7ed      	b.n	8010488 <__strtok_r+0x2c>

080104ac <_strtol_l.constprop.0>:
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b2:	d001      	beq.n	80104b8 <_strtol_l.constprop.0+0xc>
 80104b4:	2b24      	cmp	r3, #36	; 0x24
 80104b6:	d906      	bls.n	80104c6 <_strtol_l.constprop.0+0x1a>
 80104b8:	f7fe fa58 	bl	800e96c <__errno>
 80104bc:	2316      	movs	r3, #22
 80104be:	6003      	str	r3, [r0, #0]
 80104c0:	2000      	movs	r0, #0
 80104c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80105ac <_strtol_l.constprop.0+0x100>
 80104ca:	460d      	mov	r5, r1
 80104cc:	462e      	mov	r6, r5
 80104ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104d2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80104d6:	f017 0708 	ands.w	r7, r7, #8
 80104da:	d1f7      	bne.n	80104cc <_strtol_l.constprop.0+0x20>
 80104dc:	2c2d      	cmp	r4, #45	; 0x2d
 80104de:	d132      	bne.n	8010546 <_strtol_l.constprop.0+0x9a>
 80104e0:	782c      	ldrb	r4, [r5, #0]
 80104e2:	2701      	movs	r7, #1
 80104e4:	1cb5      	adds	r5, r6, #2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d05b      	beq.n	80105a2 <_strtol_l.constprop.0+0xf6>
 80104ea:	2b10      	cmp	r3, #16
 80104ec:	d109      	bne.n	8010502 <_strtol_l.constprop.0+0x56>
 80104ee:	2c30      	cmp	r4, #48	; 0x30
 80104f0:	d107      	bne.n	8010502 <_strtol_l.constprop.0+0x56>
 80104f2:	782c      	ldrb	r4, [r5, #0]
 80104f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80104f8:	2c58      	cmp	r4, #88	; 0x58
 80104fa:	d14d      	bne.n	8010598 <_strtol_l.constprop.0+0xec>
 80104fc:	786c      	ldrb	r4, [r5, #1]
 80104fe:	2310      	movs	r3, #16
 8010500:	3502      	adds	r5, #2
 8010502:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010506:	f108 38ff 	add.w	r8, r8, #4294967295
 801050a:	f04f 0c00 	mov.w	ip, #0
 801050e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010512:	4666      	mov	r6, ip
 8010514:	fb03 8a19 	mls	sl, r3, r9, r8
 8010518:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801051c:	f1be 0f09 	cmp.w	lr, #9
 8010520:	d816      	bhi.n	8010550 <_strtol_l.constprop.0+0xa4>
 8010522:	4674      	mov	r4, lr
 8010524:	42a3      	cmp	r3, r4
 8010526:	dd24      	ble.n	8010572 <_strtol_l.constprop.0+0xc6>
 8010528:	f1bc 0f00 	cmp.w	ip, #0
 801052c:	db1e      	blt.n	801056c <_strtol_l.constprop.0+0xc0>
 801052e:	45b1      	cmp	r9, r6
 8010530:	d31c      	bcc.n	801056c <_strtol_l.constprop.0+0xc0>
 8010532:	d101      	bne.n	8010538 <_strtol_l.constprop.0+0x8c>
 8010534:	45a2      	cmp	sl, r4
 8010536:	db19      	blt.n	801056c <_strtol_l.constprop.0+0xc0>
 8010538:	fb06 4603 	mla	r6, r6, r3, r4
 801053c:	f04f 0c01 	mov.w	ip, #1
 8010540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010544:	e7e8      	b.n	8010518 <_strtol_l.constprop.0+0x6c>
 8010546:	2c2b      	cmp	r4, #43	; 0x2b
 8010548:	bf04      	itt	eq
 801054a:	782c      	ldrbeq	r4, [r5, #0]
 801054c:	1cb5      	addeq	r5, r6, #2
 801054e:	e7ca      	b.n	80104e6 <_strtol_l.constprop.0+0x3a>
 8010550:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010554:	f1be 0f19 	cmp.w	lr, #25
 8010558:	d801      	bhi.n	801055e <_strtol_l.constprop.0+0xb2>
 801055a:	3c37      	subs	r4, #55	; 0x37
 801055c:	e7e2      	b.n	8010524 <_strtol_l.constprop.0+0x78>
 801055e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010562:	f1be 0f19 	cmp.w	lr, #25
 8010566:	d804      	bhi.n	8010572 <_strtol_l.constprop.0+0xc6>
 8010568:	3c57      	subs	r4, #87	; 0x57
 801056a:	e7db      	b.n	8010524 <_strtol_l.constprop.0+0x78>
 801056c:	f04f 3cff 	mov.w	ip, #4294967295
 8010570:	e7e6      	b.n	8010540 <_strtol_l.constprop.0+0x94>
 8010572:	f1bc 0f00 	cmp.w	ip, #0
 8010576:	da05      	bge.n	8010584 <_strtol_l.constprop.0+0xd8>
 8010578:	2322      	movs	r3, #34	; 0x22
 801057a:	6003      	str	r3, [r0, #0]
 801057c:	4646      	mov	r6, r8
 801057e:	b942      	cbnz	r2, 8010592 <_strtol_l.constprop.0+0xe6>
 8010580:	4630      	mov	r0, r6
 8010582:	e79e      	b.n	80104c2 <_strtol_l.constprop.0+0x16>
 8010584:	b107      	cbz	r7, 8010588 <_strtol_l.constprop.0+0xdc>
 8010586:	4276      	negs	r6, r6
 8010588:	2a00      	cmp	r2, #0
 801058a:	d0f9      	beq.n	8010580 <_strtol_l.constprop.0+0xd4>
 801058c:	f1bc 0f00 	cmp.w	ip, #0
 8010590:	d000      	beq.n	8010594 <_strtol_l.constprop.0+0xe8>
 8010592:	1e69      	subs	r1, r5, #1
 8010594:	6011      	str	r1, [r2, #0]
 8010596:	e7f3      	b.n	8010580 <_strtol_l.constprop.0+0xd4>
 8010598:	2430      	movs	r4, #48	; 0x30
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1b1      	bne.n	8010502 <_strtol_l.constprop.0+0x56>
 801059e:	2308      	movs	r3, #8
 80105a0:	e7af      	b.n	8010502 <_strtol_l.constprop.0+0x56>
 80105a2:	2c30      	cmp	r4, #48	; 0x30
 80105a4:	d0a5      	beq.n	80104f2 <_strtol_l.constprop.0+0x46>
 80105a6:	230a      	movs	r3, #10
 80105a8:	e7ab      	b.n	8010502 <_strtol_l.constprop.0+0x56>
 80105aa:	bf00      	nop
 80105ac:	08013cd9 	.word	0x08013cd9

080105b0 <strtol>:
 80105b0:	4613      	mov	r3, r2
 80105b2:	460a      	mov	r2, r1
 80105b4:	4601      	mov	r1, r0
 80105b6:	4802      	ldr	r0, [pc, #8]	; (80105c0 <strtol+0x10>)
 80105b8:	6800      	ldr	r0, [r0, #0]
 80105ba:	f7ff bf77 	b.w	80104ac <_strtol_l.constprop.0>
 80105be:	bf00      	nop
 80105c0:	20000018 	.word	0x20000018

080105c4 <_write_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4d07      	ldr	r5, [pc, #28]	; (80105e4 <_write_r+0x20>)
 80105c8:	4604      	mov	r4, r0
 80105ca:	4608      	mov	r0, r1
 80105cc:	4611      	mov	r1, r2
 80105ce:	2200      	movs	r2, #0
 80105d0:	602a      	str	r2, [r5, #0]
 80105d2:	461a      	mov	r2, r3
 80105d4:	f7f4 fb1f 	bl	8004c16 <_write>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d102      	bne.n	80105e2 <_write_r+0x1e>
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	b103      	cbz	r3, 80105e2 <_write_r+0x1e>
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	200051f4 	.word	0x200051f4

080105e8 <__assert_func>:
 80105e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105ea:	4614      	mov	r4, r2
 80105ec:	461a      	mov	r2, r3
 80105ee:	4b09      	ldr	r3, [pc, #36]	; (8010614 <__assert_func+0x2c>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4605      	mov	r5, r0
 80105f4:	68d8      	ldr	r0, [r3, #12]
 80105f6:	b14c      	cbz	r4, 801060c <__assert_func+0x24>
 80105f8:	4b07      	ldr	r3, [pc, #28]	; (8010618 <__assert_func+0x30>)
 80105fa:	9100      	str	r1, [sp, #0]
 80105fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010600:	4906      	ldr	r1, [pc, #24]	; (801061c <__assert_func+0x34>)
 8010602:	462b      	mov	r3, r5
 8010604:	f000 ff5c 	bl	80114c0 <fiprintf>
 8010608:	f002 fbf0 	bl	8012dec <abort>
 801060c:	4b04      	ldr	r3, [pc, #16]	; (8010620 <__assert_func+0x38>)
 801060e:	461c      	mov	r4, r3
 8010610:	e7f3      	b.n	80105fa <__assert_func+0x12>
 8010612:	bf00      	nop
 8010614:	20000018 	.word	0x20000018
 8010618:	08013c9c 	.word	0x08013c9c
 801061c:	08013ca9 	.word	0x08013ca9
 8010620:	08013cd7 	.word	0x08013cd7

08010624 <_close_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4d06      	ldr	r5, [pc, #24]	; (8010640 <_close_r+0x1c>)
 8010628:	2300      	movs	r3, #0
 801062a:	4604      	mov	r4, r0
 801062c:	4608      	mov	r0, r1
 801062e:	602b      	str	r3, [r5, #0]
 8010630:	f7f4 fb0d 	bl	8004c4e <_close>
 8010634:	1c43      	adds	r3, r0, #1
 8010636:	d102      	bne.n	801063e <_close_r+0x1a>
 8010638:	682b      	ldr	r3, [r5, #0]
 801063a:	b103      	cbz	r3, 801063e <_close_r+0x1a>
 801063c:	6023      	str	r3, [r4, #0]
 801063e:	bd38      	pop	{r3, r4, r5, pc}
 8010640:	200051f4 	.word	0x200051f4

08010644 <quorem>:
 8010644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010648:	6903      	ldr	r3, [r0, #16]
 801064a:	690c      	ldr	r4, [r1, #16]
 801064c:	42a3      	cmp	r3, r4
 801064e:	4607      	mov	r7, r0
 8010650:	f2c0 8081 	blt.w	8010756 <quorem+0x112>
 8010654:	3c01      	subs	r4, #1
 8010656:	f101 0814 	add.w	r8, r1, #20
 801065a:	f100 0514 	add.w	r5, r0, #20
 801065e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010662:	9301      	str	r3, [sp, #4]
 8010664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801066c:	3301      	adds	r3, #1
 801066e:	429a      	cmp	r2, r3
 8010670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010678:	fbb2 f6f3 	udiv	r6, r2, r3
 801067c:	d331      	bcc.n	80106e2 <quorem+0x9e>
 801067e:	f04f 0e00 	mov.w	lr, #0
 8010682:	4640      	mov	r0, r8
 8010684:	46ac      	mov	ip, r5
 8010686:	46f2      	mov	sl, lr
 8010688:	f850 2b04 	ldr.w	r2, [r0], #4
 801068c:	b293      	uxth	r3, r2
 801068e:	fb06 e303 	mla	r3, r6, r3, lr
 8010692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010696:	b29b      	uxth	r3, r3
 8010698:	ebaa 0303 	sub.w	r3, sl, r3
 801069c:	f8dc a000 	ldr.w	sl, [ip]
 80106a0:	0c12      	lsrs	r2, r2, #16
 80106a2:	fa13 f38a 	uxtah	r3, r3, sl
 80106a6:	fb06 e202 	mla	r2, r6, r2, lr
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	9b00      	ldr	r3, [sp, #0]
 80106ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80106b2:	b292      	uxth	r2, r2
 80106b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80106b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80106c0:	4581      	cmp	r9, r0
 80106c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106c6:	f84c 3b04 	str.w	r3, [ip], #4
 80106ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80106ce:	d2db      	bcs.n	8010688 <quorem+0x44>
 80106d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80106d4:	b92b      	cbnz	r3, 80106e2 <quorem+0x9e>
 80106d6:	9b01      	ldr	r3, [sp, #4]
 80106d8:	3b04      	subs	r3, #4
 80106da:	429d      	cmp	r5, r3
 80106dc:	461a      	mov	r2, r3
 80106de:	d32e      	bcc.n	801073e <quorem+0xfa>
 80106e0:	613c      	str	r4, [r7, #16]
 80106e2:	4638      	mov	r0, r7
 80106e4:	f001 fd76 	bl	80121d4 <__mcmp>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	db24      	blt.n	8010736 <quorem+0xf2>
 80106ec:	3601      	adds	r6, #1
 80106ee:	4628      	mov	r0, r5
 80106f0:	f04f 0c00 	mov.w	ip, #0
 80106f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80106f8:	f8d0 e000 	ldr.w	lr, [r0]
 80106fc:	b293      	uxth	r3, r2
 80106fe:	ebac 0303 	sub.w	r3, ip, r3
 8010702:	0c12      	lsrs	r2, r2, #16
 8010704:	fa13 f38e 	uxtah	r3, r3, lr
 8010708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801070c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010710:	b29b      	uxth	r3, r3
 8010712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010716:	45c1      	cmp	r9, r8
 8010718:	f840 3b04 	str.w	r3, [r0], #4
 801071c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010720:	d2e8      	bcs.n	80106f4 <quorem+0xb0>
 8010722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801072a:	b922      	cbnz	r2, 8010736 <quorem+0xf2>
 801072c:	3b04      	subs	r3, #4
 801072e:	429d      	cmp	r5, r3
 8010730:	461a      	mov	r2, r3
 8010732:	d30a      	bcc.n	801074a <quorem+0x106>
 8010734:	613c      	str	r4, [r7, #16]
 8010736:	4630      	mov	r0, r6
 8010738:	b003      	add	sp, #12
 801073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073e:	6812      	ldr	r2, [r2, #0]
 8010740:	3b04      	subs	r3, #4
 8010742:	2a00      	cmp	r2, #0
 8010744:	d1cc      	bne.n	80106e0 <quorem+0x9c>
 8010746:	3c01      	subs	r4, #1
 8010748:	e7c7      	b.n	80106da <quorem+0x96>
 801074a:	6812      	ldr	r2, [r2, #0]
 801074c:	3b04      	subs	r3, #4
 801074e:	2a00      	cmp	r2, #0
 8010750:	d1f0      	bne.n	8010734 <quorem+0xf0>
 8010752:	3c01      	subs	r4, #1
 8010754:	e7eb      	b.n	801072e <quorem+0xea>
 8010756:	2000      	movs	r0, #0
 8010758:	e7ee      	b.n	8010738 <quorem+0xf4>
 801075a:	0000      	movs	r0, r0
 801075c:	0000      	movs	r0, r0
	...

08010760 <_dtoa_r>:
 8010760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	ed2d 8b04 	vpush	{d8-d9}
 8010768:	ec57 6b10 	vmov	r6, r7, d0
 801076c:	b093      	sub	sp, #76	; 0x4c
 801076e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010774:	9106      	str	r1, [sp, #24]
 8010776:	ee10 aa10 	vmov	sl, s0
 801077a:	4604      	mov	r4, r0
 801077c:	9209      	str	r2, [sp, #36]	; 0x24
 801077e:	930c      	str	r3, [sp, #48]	; 0x30
 8010780:	46bb      	mov	fp, r7
 8010782:	b975      	cbnz	r5, 80107a2 <_dtoa_r+0x42>
 8010784:	2010      	movs	r0, #16
 8010786:	f001 fa33 	bl	8011bf0 <malloc>
 801078a:	4602      	mov	r2, r0
 801078c:	6260      	str	r0, [r4, #36]	; 0x24
 801078e:	b920      	cbnz	r0, 801079a <_dtoa_r+0x3a>
 8010790:	4ba7      	ldr	r3, [pc, #668]	; (8010a30 <_dtoa_r+0x2d0>)
 8010792:	21ea      	movs	r1, #234	; 0xea
 8010794:	48a7      	ldr	r0, [pc, #668]	; (8010a34 <_dtoa_r+0x2d4>)
 8010796:	f7ff ff27 	bl	80105e8 <__assert_func>
 801079a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801079e:	6005      	str	r5, [r0, #0]
 80107a0:	60c5      	str	r5, [r0, #12]
 80107a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107a4:	6819      	ldr	r1, [r3, #0]
 80107a6:	b151      	cbz	r1, 80107be <_dtoa_r+0x5e>
 80107a8:	685a      	ldr	r2, [r3, #4]
 80107aa:	604a      	str	r2, [r1, #4]
 80107ac:	2301      	movs	r3, #1
 80107ae:	4093      	lsls	r3, r2
 80107b0:	608b      	str	r3, [r1, #8]
 80107b2:	4620      	mov	r0, r4
 80107b4:	f001 fa82 	bl	8011cbc <_Bfree>
 80107b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107ba:	2200      	movs	r2, #0
 80107bc:	601a      	str	r2, [r3, #0]
 80107be:	1e3b      	subs	r3, r7, #0
 80107c0:	bfaa      	itet	ge
 80107c2:	2300      	movge	r3, #0
 80107c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80107c8:	f8c8 3000 	strge.w	r3, [r8]
 80107cc:	4b9a      	ldr	r3, [pc, #616]	; (8010a38 <_dtoa_r+0x2d8>)
 80107ce:	bfbc      	itt	lt
 80107d0:	2201      	movlt	r2, #1
 80107d2:	f8c8 2000 	strlt.w	r2, [r8]
 80107d6:	ea33 030b 	bics.w	r3, r3, fp
 80107da:	d11b      	bne.n	8010814 <_dtoa_r+0xb4>
 80107dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107de:	f242 730f 	movw	r3, #9999	; 0x270f
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107e8:	4333      	orrs	r3, r6
 80107ea:	f000 8592 	beq.w	8011312 <_dtoa_r+0xbb2>
 80107ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107f0:	b963      	cbnz	r3, 801080c <_dtoa_r+0xac>
 80107f2:	4b92      	ldr	r3, [pc, #584]	; (8010a3c <_dtoa_r+0x2dc>)
 80107f4:	e022      	b.n	801083c <_dtoa_r+0xdc>
 80107f6:	4b92      	ldr	r3, [pc, #584]	; (8010a40 <_dtoa_r+0x2e0>)
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	3308      	adds	r3, #8
 80107fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	9801      	ldr	r0, [sp, #4]
 8010802:	b013      	add	sp, #76	; 0x4c
 8010804:	ecbd 8b04 	vpop	{d8-d9}
 8010808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080c:	4b8b      	ldr	r3, [pc, #556]	; (8010a3c <_dtoa_r+0x2dc>)
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	3303      	adds	r3, #3
 8010812:	e7f3      	b.n	80107fc <_dtoa_r+0x9c>
 8010814:	2200      	movs	r2, #0
 8010816:	2300      	movs	r3, #0
 8010818:	4650      	mov	r0, sl
 801081a:	4659      	mov	r1, fp
 801081c:	f7f0 f96c 	bl	8000af8 <__aeabi_dcmpeq>
 8010820:	ec4b ab19 	vmov	d9, sl, fp
 8010824:	4680      	mov	r8, r0
 8010826:	b158      	cbz	r0, 8010840 <_dtoa_r+0xe0>
 8010828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801082a:	2301      	movs	r3, #1
 801082c:	6013      	str	r3, [r2, #0]
 801082e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010830:	2b00      	cmp	r3, #0
 8010832:	f000 856b 	beq.w	801130c <_dtoa_r+0xbac>
 8010836:	4883      	ldr	r0, [pc, #524]	; (8010a44 <_dtoa_r+0x2e4>)
 8010838:	6018      	str	r0, [r3, #0]
 801083a:	1e43      	subs	r3, r0, #1
 801083c:	9301      	str	r3, [sp, #4]
 801083e:	e7df      	b.n	8010800 <_dtoa_r+0xa0>
 8010840:	ec4b ab10 	vmov	d0, sl, fp
 8010844:	aa10      	add	r2, sp, #64	; 0x40
 8010846:	a911      	add	r1, sp, #68	; 0x44
 8010848:	4620      	mov	r0, r4
 801084a:	f001 fde5 	bl	8012418 <__d2b>
 801084e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010852:	ee08 0a10 	vmov	s16, r0
 8010856:	2d00      	cmp	r5, #0
 8010858:	f000 8084 	beq.w	8010964 <_dtoa_r+0x204>
 801085c:	ee19 3a90 	vmov	r3, s19
 8010860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010864:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010868:	4656      	mov	r6, sl
 801086a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801086e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010872:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010876:	4b74      	ldr	r3, [pc, #464]	; (8010a48 <_dtoa_r+0x2e8>)
 8010878:	2200      	movs	r2, #0
 801087a:	4630      	mov	r0, r6
 801087c:	4639      	mov	r1, r7
 801087e:	f7ef fd1b 	bl	80002b8 <__aeabi_dsub>
 8010882:	a365      	add	r3, pc, #404	; (adr r3, 8010a18 <_dtoa_r+0x2b8>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	f7ef fece 	bl	8000628 <__aeabi_dmul>
 801088c:	a364      	add	r3, pc, #400	; (adr r3, 8010a20 <_dtoa_r+0x2c0>)
 801088e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010892:	f7ef fd13 	bl	80002bc <__adddf3>
 8010896:	4606      	mov	r6, r0
 8010898:	4628      	mov	r0, r5
 801089a:	460f      	mov	r7, r1
 801089c:	f7ef fe5a 	bl	8000554 <__aeabi_i2d>
 80108a0:	a361      	add	r3, pc, #388	; (adr r3, 8010a28 <_dtoa_r+0x2c8>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	f7ef febf 	bl	8000628 <__aeabi_dmul>
 80108aa:	4602      	mov	r2, r0
 80108ac:	460b      	mov	r3, r1
 80108ae:	4630      	mov	r0, r6
 80108b0:	4639      	mov	r1, r7
 80108b2:	f7ef fd03 	bl	80002bc <__adddf3>
 80108b6:	4606      	mov	r6, r0
 80108b8:	460f      	mov	r7, r1
 80108ba:	f7f0 f965 	bl	8000b88 <__aeabi_d2iz>
 80108be:	2200      	movs	r2, #0
 80108c0:	9000      	str	r0, [sp, #0]
 80108c2:	2300      	movs	r3, #0
 80108c4:	4630      	mov	r0, r6
 80108c6:	4639      	mov	r1, r7
 80108c8:	f7f0 f920 	bl	8000b0c <__aeabi_dcmplt>
 80108cc:	b150      	cbz	r0, 80108e4 <_dtoa_r+0x184>
 80108ce:	9800      	ldr	r0, [sp, #0]
 80108d0:	f7ef fe40 	bl	8000554 <__aeabi_i2d>
 80108d4:	4632      	mov	r2, r6
 80108d6:	463b      	mov	r3, r7
 80108d8:	f7f0 f90e 	bl	8000af8 <__aeabi_dcmpeq>
 80108dc:	b910      	cbnz	r0, 80108e4 <_dtoa_r+0x184>
 80108de:	9b00      	ldr	r3, [sp, #0]
 80108e0:	3b01      	subs	r3, #1
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	9b00      	ldr	r3, [sp, #0]
 80108e6:	2b16      	cmp	r3, #22
 80108e8:	d85a      	bhi.n	80109a0 <_dtoa_r+0x240>
 80108ea:	9a00      	ldr	r2, [sp, #0]
 80108ec:	4b57      	ldr	r3, [pc, #348]	; (8010a4c <_dtoa_r+0x2ec>)
 80108ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f6:	ec51 0b19 	vmov	r0, r1, d9
 80108fa:	f7f0 f907 	bl	8000b0c <__aeabi_dcmplt>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d050      	beq.n	80109a4 <_dtoa_r+0x244>
 8010902:	9b00      	ldr	r3, [sp, #0]
 8010904:	3b01      	subs	r3, #1
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	2300      	movs	r3, #0
 801090a:	930b      	str	r3, [sp, #44]	; 0x2c
 801090c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801090e:	1b5d      	subs	r5, r3, r5
 8010910:	1e6b      	subs	r3, r5, #1
 8010912:	9305      	str	r3, [sp, #20]
 8010914:	bf45      	ittet	mi
 8010916:	f1c5 0301 	rsbmi	r3, r5, #1
 801091a:	9304      	strmi	r3, [sp, #16]
 801091c:	2300      	movpl	r3, #0
 801091e:	2300      	movmi	r3, #0
 8010920:	bf4c      	ite	mi
 8010922:	9305      	strmi	r3, [sp, #20]
 8010924:	9304      	strpl	r3, [sp, #16]
 8010926:	9b00      	ldr	r3, [sp, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	db3d      	blt.n	80109a8 <_dtoa_r+0x248>
 801092c:	9b05      	ldr	r3, [sp, #20]
 801092e:	9a00      	ldr	r2, [sp, #0]
 8010930:	920a      	str	r2, [sp, #40]	; 0x28
 8010932:	4413      	add	r3, r2
 8010934:	9305      	str	r3, [sp, #20]
 8010936:	2300      	movs	r3, #0
 8010938:	9307      	str	r3, [sp, #28]
 801093a:	9b06      	ldr	r3, [sp, #24]
 801093c:	2b09      	cmp	r3, #9
 801093e:	f200 8089 	bhi.w	8010a54 <_dtoa_r+0x2f4>
 8010942:	2b05      	cmp	r3, #5
 8010944:	bfc4      	itt	gt
 8010946:	3b04      	subgt	r3, #4
 8010948:	9306      	strgt	r3, [sp, #24]
 801094a:	9b06      	ldr	r3, [sp, #24]
 801094c:	f1a3 0302 	sub.w	r3, r3, #2
 8010950:	bfcc      	ite	gt
 8010952:	2500      	movgt	r5, #0
 8010954:	2501      	movle	r5, #1
 8010956:	2b03      	cmp	r3, #3
 8010958:	f200 8087 	bhi.w	8010a6a <_dtoa_r+0x30a>
 801095c:	e8df f003 	tbb	[pc, r3]
 8010960:	59383a2d 	.word	0x59383a2d
 8010964:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010968:	441d      	add	r5, r3
 801096a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801096e:	2b20      	cmp	r3, #32
 8010970:	bfc1      	itttt	gt
 8010972:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010976:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801097a:	fa0b f303 	lslgt.w	r3, fp, r3
 801097e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010982:	bfda      	itte	le
 8010984:	f1c3 0320 	rsble	r3, r3, #32
 8010988:	fa06 f003 	lslle.w	r0, r6, r3
 801098c:	4318      	orrgt	r0, r3
 801098e:	f7ef fdd1 	bl	8000534 <__aeabi_ui2d>
 8010992:	2301      	movs	r3, #1
 8010994:	4606      	mov	r6, r0
 8010996:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801099a:	3d01      	subs	r5, #1
 801099c:	930e      	str	r3, [sp, #56]	; 0x38
 801099e:	e76a      	b.n	8010876 <_dtoa_r+0x116>
 80109a0:	2301      	movs	r3, #1
 80109a2:	e7b2      	b.n	801090a <_dtoa_r+0x1aa>
 80109a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80109a6:	e7b1      	b.n	801090c <_dtoa_r+0x1ac>
 80109a8:	9b04      	ldr	r3, [sp, #16]
 80109aa:	9a00      	ldr	r2, [sp, #0]
 80109ac:	1a9b      	subs	r3, r3, r2
 80109ae:	9304      	str	r3, [sp, #16]
 80109b0:	4253      	negs	r3, r2
 80109b2:	9307      	str	r3, [sp, #28]
 80109b4:	2300      	movs	r3, #0
 80109b6:	930a      	str	r3, [sp, #40]	; 0x28
 80109b8:	e7bf      	b.n	801093a <_dtoa_r+0x1da>
 80109ba:	2300      	movs	r3, #0
 80109bc:	9308      	str	r3, [sp, #32]
 80109be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	dc55      	bgt.n	8010a70 <_dtoa_r+0x310>
 80109c4:	2301      	movs	r3, #1
 80109c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109ca:	461a      	mov	r2, r3
 80109cc:	9209      	str	r2, [sp, #36]	; 0x24
 80109ce:	e00c      	b.n	80109ea <_dtoa_r+0x28a>
 80109d0:	2301      	movs	r3, #1
 80109d2:	e7f3      	b.n	80109bc <_dtoa_r+0x25c>
 80109d4:	2300      	movs	r3, #0
 80109d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109d8:	9308      	str	r3, [sp, #32]
 80109da:	9b00      	ldr	r3, [sp, #0]
 80109dc:	4413      	add	r3, r2
 80109de:	9302      	str	r3, [sp, #8]
 80109e0:	3301      	adds	r3, #1
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	9303      	str	r3, [sp, #12]
 80109e6:	bfb8      	it	lt
 80109e8:	2301      	movlt	r3, #1
 80109ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80109ec:	2200      	movs	r2, #0
 80109ee:	6042      	str	r2, [r0, #4]
 80109f0:	2204      	movs	r2, #4
 80109f2:	f102 0614 	add.w	r6, r2, #20
 80109f6:	429e      	cmp	r6, r3
 80109f8:	6841      	ldr	r1, [r0, #4]
 80109fa:	d93d      	bls.n	8010a78 <_dtoa_r+0x318>
 80109fc:	4620      	mov	r0, r4
 80109fe:	f001 f91d 	bl	8011c3c <_Balloc>
 8010a02:	9001      	str	r0, [sp, #4]
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d13b      	bne.n	8010a80 <_dtoa_r+0x320>
 8010a08:	4b11      	ldr	r3, [pc, #68]	; (8010a50 <_dtoa_r+0x2f0>)
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010a10:	e6c0      	b.n	8010794 <_dtoa_r+0x34>
 8010a12:	2301      	movs	r3, #1
 8010a14:	e7df      	b.n	80109d6 <_dtoa_r+0x276>
 8010a16:	bf00      	nop
 8010a18:	636f4361 	.word	0x636f4361
 8010a1c:	3fd287a7 	.word	0x3fd287a7
 8010a20:	8b60c8b3 	.word	0x8b60c8b3
 8010a24:	3fc68a28 	.word	0x3fc68a28
 8010a28:	509f79fb 	.word	0x509f79fb
 8010a2c:	3fd34413 	.word	0x3fd34413
 8010a30:	08013c28 	.word	0x08013c28
 8010a34:	08013de6 	.word	0x08013de6
 8010a38:	7ff00000 	.word	0x7ff00000
 8010a3c:	08013de2 	.word	0x08013de2
 8010a40:	08013dd9 	.word	0x08013dd9
 8010a44:	08013bb5 	.word	0x08013bb5
 8010a48:	3ff80000 	.word	0x3ff80000
 8010a4c:	08013f50 	.word	0x08013f50
 8010a50:	08013e41 	.word	0x08013e41
 8010a54:	2501      	movs	r5, #1
 8010a56:	2300      	movs	r3, #0
 8010a58:	9306      	str	r3, [sp, #24]
 8010a5a:	9508      	str	r5, [sp, #32]
 8010a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a64:	2200      	movs	r2, #0
 8010a66:	2312      	movs	r3, #18
 8010a68:	e7b0      	b.n	80109cc <_dtoa_r+0x26c>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	9308      	str	r3, [sp, #32]
 8010a6e:	e7f5      	b.n	8010a5c <_dtoa_r+0x2fc>
 8010a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a76:	e7b8      	b.n	80109ea <_dtoa_r+0x28a>
 8010a78:	3101      	adds	r1, #1
 8010a7a:	6041      	str	r1, [r0, #4]
 8010a7c:	0052      	lsls	r2, r2, #1
 8010a7e:	e7b8      	b.n	80109f2 <_dtoa_r+0x292>
 8010a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a82:	9a01      	ldr	r2, [sp, #4]
 8010a84:	601a      	str	r2, [r3, #0]
 8010a86:	9b03      	ldr	r3, [sp, #12]
 8010a88:	2b0e      	cmp	r3, #14
 8010a8a:	f200 809d 	bhi.w	8010bc8 <_dtoa_r+0x468>
 8010a8e:	2d00      	cmp	r5, #0
 8010a90:	f000 809a 	beq.w	8010bc8 <_dtoa_r+0x468>
 8010a94:	9b00      	ldr	r3, [sp, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	dd32      	ble.n	8010b00 <_dtoa_r+0x3a0>
 8010a9a:	4ab7      	ldr	r2, [pc, #732]	; (8010d78 <_dtoa_r+0x618>)
 8010a9c:	f003 030f 	and.w	r3, r3, #15
 8010aa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010aa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010aa8:	9b00      	ldr	r3, [sp, #0]
 8010aaa:	05d8      	lsls	r0, r3, #23
 8010aac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010ab0:	d516      	bpl.n	8010ae0 <_dtoa_r+0x380>
 8010ab2:	4bb2      	ldr	r3, [pc, #712]	; (8010d7c <_dtoa_r+0x61c>)
 8010ab4:	ec51 0b19 	vmov	r0, r1, d9
 8010ab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010abc:	f7ef fede 	bl	800087c <__aeabi_ddiv>
 8010ac0:	f007 070f 	and.w	r7, r7, #15
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	468b      	mov	fp, r1
 8010ac8:	2503      	movs	r5, #3
 8010aca:	4eac      	ldr	r6, [pc, #688]	; (8010d7c <_dtoa_r+0x61c>)
 8010acc:	b957      	cbnz	r7, 8010ae4 <_dtoa_r+0x384>
 8010ace:	4642      	mov	r2, r8
 8010ad0:	464b      	mov	r3, r9
 8010ad2:	4650      	mov	r0, sl
 8010ad4:	4659      	mov	r1, fp
 8010ad6:	f7ef fed1 	bl	800087c <__aeabi_ddiv>
 8010ada:	4682      	mov	sl, r0
 8010adc:	468b      	mov	fp, r1
 8010ade:	e028      	b.n	8010b32 <_dtoa_r+0x3d2>
 8010ae0:	2502      	movs	r5, #2
 8010ae2:	e7f2      	b.n	8010aca <_dtoa_r+0x36a>
 8010ae4:	07f9      	lsls	r1, r7, #31
 8010ae6:	d508      	bpl.n	8010afa <_dtoa_r+0x39a>
 8010ae8:	4640      	mov	r0, r8
 8010aea:	4649      	mov	r1, r9
 8010aec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010af0:	f7ef fd9a 	bl	8000628 <__aeabi_dmul>
 8010af4:	3501      	adds	r5, #1
 8010af6:	4680      	mov	r8, r0
 8010af8:	4689      	mov	r9, r1
 8010afa:	107f      	asrs	r7, r7, #1
 8010afc:	3608      	adds	r6, #8
 8010afe:	e7e5      	b.n	8010acc <_dtoa_r+0x36c>
 8010b00:	f000 809b 	beq.w	8010c3a <_dtoa_r+0x4da>
 8010b04:	9b00      	ldr	r3, [sp, #0]
 8010b06:	4f9d      	ldr	r7, [pc, #628]	; (8010d7c <_dtoa_r+0x61c>)
 8010b08:	425e      	negs	r6, r3
 8010b0a:	4b9b      	ldr	r3, [pc, #620]	; (8010d78 <_dtoa_r+0x618>)
 8010b0c:	f006 020f 	and.w	r2, r6, #15
 8010b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b18:	ec51 0b19 	vmov	r0, r1, d9
 8010b1c:	f7ef fd84 	bl	8000628 <__aeabi_dmul>
 8010b20:	1136      	asrs	r6, r6, #4
 8010b22:	4682      	mov	sl, r0
 8010b24:	468b      	mov	fp, r1
 8010b26:	2300      	movs	r3, #0
 8010b28:	2502      	movs	r5, #2
 8010b2a:	2e00      	cmp	r6, #0
 8010b2c:	d17a      	bne.n	8010c24 <_dtoa_r+0x4c4>
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1d3      	bne.n	8010ada <_dtoa_r+0x37a>
 8010b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f000 8082 	beq.w	8010c3e <_dtoa_r+0x4de>
 8010b3a:	4b91      	ldr	r3, [pc, #580]	; (8010d80 <_dtoa_r+0x620>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	4650      	mov	r0, sl
 8010b40:	4659      	mov	r1, fp
 8010b42:	f7ef ffe3 	bl	8000b0c <__aeabi_dcmplt>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d079      	beq.n	8010c3e <_dtoa_r+0x4de>
 8010b4a:	9b03      	ldr	r3, [sp, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d076      	beq.n	8010c3e <_dtoa_r+0x4de>
 8010b50:	9b02      	ldr	r3, [sp, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	dd36      	ble.n	8010bc4 <_dtoa_r+0x464>
 8010b56:	9b00      	ldr	r3, [sp, #0]
 8010b58:	4650      	mov	r0, sl
 8010b5a:	4659      	mov	r1, fp
 8010b5c:	1e5f      	subs	r7, r3, #1
 8010b5e:	2200      	movs	r2, #0
 8010b60:	4b88      	ldr	r3, [pc, #544]	; (8010d84 <_dtoa_r+0x624>)
 8010b62:	f7ef fd61 	bl	8000628 <__aeabi_dmul>
 8010b66:	9e02      	ldr	r6, [sp, #8]
 8010b68:	4682      	mov	sl, r0
 8010b6a:	468b      	mov	fp, r1
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f7ef fcf0 	bl	8000554 <__aeabi_i2d>
 8010b74:	4652      	mov	r2, sl
 8010b76:	465b      	mov	r3, fp
 8010b78:	f7ef fd56 	bl	8000628 <__aeabi_dmul>
 8010b7c:	4b82      	ldr	r3, [pc, #520]	; (8010d88 <_dtoa_r+0x628>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f7ef fb9c 	bl	80002bc <__adddf3>
 8010b84:	46d0      	mov	r8, sl
 8010b86:	46d9      	mov	r9, fp
 8010b88:	4682      	mov	sl, r0
 8010b8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010b8e:	2e00      	cmp	r6, #0
 8010b90:	d158      	bne.n	8010c44 <_dtoa_r+0x4e4>
 8010b92:	4b7e      	ldr	r3, [pc, #504]	; (8010d8c <_dtoa_r+0x62c>)
 8010b94:	2200      	movs	r2, #0
 8010b96:	4640      	mov	r0, r8
 8010b98:	4649      	mov	r1, r9
 8010b9a:	f7ef fb8d 	bl	80002b8 <__aeabi_dsub>
 8010b9e:	4652      	mov	r2, sl
 8010ba0:	465b      	mov	r3, fp
 8010ba2:	4680      	mov	r8, r0
 8010ba4:	4689      	mov	r9, r1
 8010ba6:	f7ef ffcf 	bl	8000b48 <__aeabi_dcmpgt>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	f040 8295 	bne.w	80110da <_dtoa_r+0x97a>
 8010bb0:	4652      	mov	r2, sl
 8010bb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	4649      	mov	r1, r9
 8010bba:	f7ef ffa7 	bl	8000b0c <__aeabi_dcmplt>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	f040 8289 	bne.w	80110d6 <_dtoa_r+0x976>
 8010bc4:	ec5b ab19 	vmov	sl, fp, d9
 8010bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f2c0 8148 	blt.w	8010e60 <_dtoa_r+0x700>
 8010bd0:	9a00      	ldr	r2, [sp, #0]
 8010bd2:	2a0e      	cmp	r2, #14
 8010bd4:	f300 8144 	bgt.w	8010e60 <_dtoa_r+0x700>
 8010bd8:	4b67      	ldr	r3, [pc, #412]	; (8010d78 <_dtoa_r+0x618>)
 8010bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f280 80d5 	bge.w	8010d94 <_dtoa_r+0x634>
 8010bea:	9b03      	ldr	r3, [sp, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f300 80d1 	bgt.w	8010d94 <_dtoa_r+0x634>
 8010bf2:	f040 826f 	bne.w	80110d4 <_dtoa_r+0x974>
 8010bf6:	4b65      	ldr	r3, [pc, #404]	; (8010d8c <_dtoa_r+0x62c>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	4640      	mov	r0, r8
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	f7ef fd13 	bl	8000628 <__aeabi_dmul>
 8010c02:	4652      	mov	r2, sl
 8010c04:	465b      	mov	r3, fp
 8010c06:	f7ef ff95 	bl	8000b34 <__aeabi_dcmpge>
 8010c0a:	9e03      	ldr	r6, [sp, #12]
 8010c0c:	4637      	mov	r7, r6
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	f040 8245 	bne.w	801109e <_dtoa_r+0x93e>
 8010c14:	9d01      	ldr	r5, [sp, #4]
 8010c16:	2331      	movs	r3, #49	; 0x31
 8010c18:	f805 3b01 	strb.w	r3, [r5], #1
 8010c1c:	9b00      	ldr	r3, [sp, #0]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	e240      	b.n	80110a6 <_dtoa_r+0x946>
 8010c24:	07f2      	lsls	r2, r6, #31
 8010c26:	d505      	bpl.n	8010c34 <_dtoa_r+0x4d4>
 8010c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c2c:	f7ef fcfc 	bl	8000628 <__aeabi_dmul>
 8010c30:	3501      	adds	r5, #1
 8010c32:	2301      	movs	r3, #1
 8010c34:	1076      	asrs	r6, r6, #1
 8010c36:	3708      	adds	r7, #8
 8010c38:	e777      	b.n	8010b2a <_dtoa_r+0x3ca>
 8010c3a:	2502      	movs	r5, #2
 8010c3c:	e779      	b.n	8010b32 <_dtoa_r+0x3d2>
 8010c3e:	9f00      	ldr	r7, [sp, #0]
 8010c40:	9e03      	ldr	r6, [sp, #12]
 8010c42:	e794      	b.n	8010b6e <_dtoa_r+0x40e>
 8010c44:	9901      	ldr	r1, [sp, #4]
 8010c46:	4b4c      	ldr	r3, [pc, #304]	; (8010d78 <_dtoa_r+0x618>)
 8010c48:	4431      	add	r1, r6
 8010c4a:	910d      	str	r1, [sp, #52]	; 0x34
 8010c4c:	9908      	ldr	r1, [sp, #32]
 8010c4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c56:	2900      	cmp	r1, #0
 8010c58:	d043      	beq.n	8010ce2 <_dtoa_r+0x582>
 8010c5a:	494d      	ldr	r1, [pc, #308]	; (8010d90 <_dtoa_r+0x630>)
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	f7ef fe0d 	bl	800087c <__aeabi_ddiv>
 8010c62:	4652      	mov	r2, sl
 8010c64:	465b      	mov	r3, fp
 8010c66:	f7ef fb27 	bl	80002b8 <__aeabi_dsub>
 8010c6a:	9d01      	ldr	r5, [sp, #4]
 8010c6c:	4682      	mov	sl, r0
 8010c6e:	468b      	mov	fp, r1
 8010c70:	4649      	mov	r1, r9
 8010c72:	4640      	mov	r0, r8
 8010c74:	f7ef ff88 	bl	8000b88 <__aeabi_d2iz>
 8010c78:	4606      	mov	r6, r0
 8010c7a:	f7ef fc6b 	bl	8000554 <__aeabi_i2d>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	460b      	mov	r3, r1
 8010c82:	4640      	mov	r0, r8
 8010c84:	4649      	mov	r1, r9
 8010c86:	f7ef fb17 	bl	80002b8 <__aeabi_dsub>
 8010c8a:	3630      	adds	r6, #48	; 0x30
 8010c8c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c90:	4652      	mov	r2, sl
 8010c92:	465b      	mov	r3, fp
 8010c94:	4680      	mov	r8, r0
 8010c96:	4689      	mov	r9, r1
 8010c98:	f7ef ff38 	bl	8000b0c <__aeabi_dcmplt>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d163      	bne.n	8010d68 <_dtoa_r+0x608>
 8010ca0:	4642      	mov	r2, r8
 8010ca2:	464b      	mov	r3, r9
 8010ca4:	4936      	ldr	r1, [pc, #216]	; (8010d80 <_dtoa_r+0x620>)
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	f7ef fb06 	bl	80002b8 <__aeabi_dsub>
 8010cac:	4652      	mov	r2, sl
 8010cae:	465b      	mov	r3, fp
 8010cb0:	f7ef ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f040 80b5 	bne.w	8010e24 <_dtoa_r+0x6c4>
 8010cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cbc:	429d      	cmp	r5, r3
 8010cbe:	d081      	beq.n	8010bc4 <_dtoa_r+0x464>
 8010cc0:	4b30      	ldr	r3, [pc, #192]	; (8010d84 <_dtoa_r+0x624>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	4650      	mov	r0, sl
 8010cc6:	4659      	mov	r1, fp
 8010cc8:	f7ef fcae 	bl	8000628 <__aeabi_dmul>
 8010ccc:	4b2d      	ldr	r3, [pc, #180]	; (8010d84 <_dtoa_r+0x624>)
 8010cce:	4682      	mov	sl, r0
 8010cd0:	468b      	mov	fp, r1
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	4649      	mov	r1, r9
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f7ef fca6 	bl	8000628 <__aeabi_dmul>
 8010cdc:	4680      	mov	r8, r0
 8010cde:	4689      	mov	r9, r1
 8010ce0:	e7c6      	b.n	8010c70 <_dtoa_r+0x510>
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	4659      	mov	r1, fp
 8010ce6:	f7ef fc9f 	bl	8000628 <__aeabi_dmul>
 8010cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cec:	9d01      	ldr	r5, [sp, #4]
 8010cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cf0:	4682      	mov	sl, r0
 8010cf2:	468b      	mov	fp, r1
 8010cf4:	4649      	mov	r1, r9
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	f7ef ff46 	bl	8000b88 <__aeabi_d2iz>
 8010cfc:	4606      	mov	r6, r0
 8010cfe:	f7ef fc29 	bl	8000554 <__aeabi_i2d>
 8010d02:	3630      	adds	r6, #48	; 0x30
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	4640      	mov	r0, r8
 8010d0a:	4649      	mov	r1, r9
 8010d0c:	f7ef fad4 	bl	80002b8 <__aeabi_dsub>
 8010d10:	f805 6b01 	strb.w	r6, [r5], #1
 8010d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d16:	429d      	cmp	r5, r3
 8010d18:	4680      	mov	r8, r0
 8010d1a:	4689      	mov	r9, r1
 8010d1c:	f04f 0200 	mov.w	r2, #0
 8010d20:	d124      	bne.n	8010d6c <_dtoa_r+0x60c>
 8010d22:	4b1b      	ldr	r3, [pc, #108]	; (8010d90 <_dtoa_r+0x630>)
 8010d24:	4650      	mov	r0, sl
 8010d26:	4659      	mov	r1, fp
 8010d28:	f7ef fac8 	bl	80002bc <__adddf3>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4640      	mov	r0, r8
 8010d32:	4649      	mov	r1, r9
 8010d34:	f7ef ff08 	bl	8000b48 <__aeabi_dcmpgt>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d173      	bne.n	8010e24 <_dtoa_r+0x6c4>
 8010d3c:	4652      	mov	r2, sl
 8010d3e:	465b      	mov	r3, fp
 8010d40:	4913      	ldr	r1, [pc, #76]	; (8010d90 <_dtoa_r+0x630>)
 8010d42:	2000      	movs	r0, #0
 8010d44:	f7ef fab8 	bl	80002b8 <__aeabi_dsub>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	4640      	mov	r0, r8
 8010d4e:	4649      	mov	r1, r9
 8010d50:	f7ef fedc 	bl	8000b0c <__aeabi_dcmplt>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	f43f af35 	beq.w	8010bc4 <_dtoa_r+0x464>
 8010d5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010d5c:	1e6b      	subs	r3, r5, #1
 8010d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d64:	2b30      	cmp	r3, #48	; 0x30
 8010d66:	d0f8      	beq.n	8010d5a <_dtoa_r+0x5fa>
 8010d68:	9700      	str	r7, [sp, #0]
 8010d6a:	e049      	b.n	8010e00 <_dtoa_r+0x6a0>
 8010d6c:	4b05      	ldr	r3, [pc, #20]	; (8010d84 <_dtoa_r+0x624>)
 8010d6e:	f7ef fc5b 	bl	8000628 <__aeabi_dmul>
 8010d72:	4680      	mov	r8, r0
 8010d74:	4689      	mov	r9, r1
 8010d76:	e7bd      	b.n	8010cf4 <_dtoa_r+0x594>
 8010d78:	08013f50 	.word	0x08013f50
 8010d7c:	08013f28 	.word	0x08013f28
 8010d80:	3ff00000 	.word	0x3ff00000
 8010d84:	40240000 	.word	0x40240000
 8010d88:	401c0000 	.word	0x401c0000
 8010d8c:	40140000 	.word	0x40140000
 8010d90:	3fe00000 	.word	0x3fe00000
 8010d94:	9d01      	ldr	r5, [sp, #4]
 8010d96:	4656      	mov	r6, sl
 8010d98:	465f      	mov	r7, fp
 8010d9a:	4642      	mov	r2, r8
 8010d9c:	464b      	mov	r3, r9
 8010d9e:	4630      	mov	r0, r6
 8010da0:	4639      	mov	r1, r7
 8010da2:	f7ef fd6b 	bl	800087c <__aeabi_ddiv>
 8010da6:	f7ef feef 	bl	8000b88 <__aeabi_d2iz>
 8010daa:	4682      	mov	sl, r0
 8010dac:	f7ef fbd2 	bl	8000554 <__aeabi_i2d>
 8010db0:	4642      	mov	r2, r8
 8010db2:	464b      	mov	r3, r9
 8010db4:	f7ef fc38 	bl	8000628 <__aeabi_dmul>
 8010db8:	4602      	mov	r2, r0
 8010dba:	460b      	mov	r3, r1
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	4639      	mov	r1, r7
 8010dc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010dc4:	f7ef fa78 	bl	80002b8 <__aeabi_dsub>
 8010dc8:	f805 6b01 	strb.w	r6, [r5], #1
 8010dcc:	9e01      	ldr	r6, [sp, #4]
 8010dce:	9f03      	ldr	r7, [sp, #12]
 8010dd0:	1bae      	subs	r6, r5, r6
 8010dd2:	42b7      	cmp	r7, r6
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	d135      	bne.n	8010e46 <_dtoa_r+0x6e6>
 8010dda:	f7ef fa6f 	bl	80002bc <__adddf3>
 8010dde:	4642      	mov	r2, r8
 8010de0:	464b      	mov	r3, r9
 8010de2:	4606      	mov	r6, r0
 8010de4:	460f      	mov	r7, r1
 8010de6:	f7ef feaf 	bl	8000b48 <__aeabi_dcmpgt>
 8010dea:	b9d0      	cbnz	r0, 8010e22 <_dtoa_r+0x6c2>
 8010dec:	4642      	mov	r2, r8
 8010dee:	464b      	mov	r3, r9
 8010df0:	4630      	mov	r0, r6
 8010df2:	4639      	mov	r1, r7
 8010df4:	f7ef fe80 	bl	8000af8 <__aeabi_dcmpeq>
 8010df8:	b110      	cbz	r0, 8010e00 <_dtoa_r+0x6a0>
 8010dfa:	f01a 0f01 	tst.w	sl, #1
 8010dfe:	d110      	bne.n	8010e22 <_dtoa_r+0x6c2>
 8010e00:	4620      	mov	r0, r4
 8010e02:	ee18 1a10 	vmov	r1, s16
 8010e06:	f000 ff59 	bl	8011cbc <_Bfree>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9800      	ldr	r0, [sp, #0]
 8010e0e:	702b      	strb	r3, [r5, #0]
 8010e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e12:	3001      	adds	r0, #1
 8010e14:	6018      	str	r0, [r3, #0]
 8010e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f43f acf1 	beq.w	8010800 <_dtoa_r+0xa0>
 8010e1e:	601d      	str	r5, [r3, #0]
 8010e20:	e4ee      	b.n	8010800 <_dtoa_r+0xa0>
 8010e22:	9f00      	ldr	r7, [sp, #0]
 8010e24:	462b      	mov	r3, r5
 8010e26:	461d      	mov	r5, r3
 8010e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e2c:	2a39      	cmp	r2, #57	; 0x39
 8010e2e:	d106      	bne.n	8010e3e <_dtoa_r+0x6de>
 8010e30:	9a01      	ldr	r2, [sp, #4]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d1f7      	bne.n	8010e26 <_dtoa_r+0x6c6>
 8010e36:	9901      	ldr	r1, [sp, #4]
 8010e38:	2230      	movs	r2, #48	; 0x30
 8010e3a:	3701      	adds	r7, #1
 8010e3c:	700a      	strb	r2, [r1, #0]
 8010e3e:	781a      	ldrb	r2, [r3, #0]
 8010e40:	3201      	adds	r2, #1
 8010e42:	701a      	strb	r2, [r3, #0]
 8010e44:	e790      	b.n	8010d68 <_dtoa_r+0x608>
 8010e46:	4ba6      	ldr	r3, [pc, #664]	; (80110e0 <_dtoa_r+0x980>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f7ef fbed 	bl	8000628 <__aeabi_dmul>
 8010e4e:	2200      	movs	r2, #0
 8010e50:	2300      	movs	r3, #0
 8010e52:	4606      	mov	r6, r0
 8010e54:	460f      	mov	r7, r1
 8010e56:	f7ef fe4f 	bl	8000af8 <__aeabi_dcmpeq>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d09d      	beq.n	8010d9a <_dtoa_r+0x63a>
 8010e5e:	e7cf      	b.n	8010e00 <_dtoa_r+0x6a0>
 8010e60:	9a08      	ldr	r2, [sp, #32]
 8010e62:	2a00      	cmp	r2, #0
 8010e64:	f000 80d7 	beq.w	8011016 <_dtoa_r+0x8b6>
 8010e68:	9a06      	ldr	r2, [sp, #24]
 8010e6a:	2a01      	cmp	r2, #1
 8010e6c:	f300 80ba 	bgt.w	8010fe4 <_dtoa_r+0x884>
 8010e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	f000 80b2 	beq.w	8010fdc <_dtoa_r+0x87c>
 8010e78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e7c:	9e07      	ldr	r6, [sp, #28]
 8010e7e:	9d04      	ldr	r5, [sp, #16]
 8010e80:	9a04      	ldr	r2, [sp, #16]
 8010e82:	441a      	add	r2, r3
 8010e84:	9204      	str	r2, [sp, #16]
 8010e86:	9a05      	ldr	r2, [sp, #20]
 8010e88:	2101      	movs	r1, #1
 8010e8a:	441a      	add	r2, r3
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	9205      	str	r2, [sp, #20]
 8010e90:	f001 f816 	bl	8011ec0 <__i2b>
 8010e94:	4607      	mov	r7, r0
 8010e96:	2d00      	cmp	r5, #0
 8010e98:	dd0c      	ble.n	8010eb4 <_dtoa_r+0x754>
 8010e9a:	9b05      	ldr	r3, [sp, #20]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	dd09      	ble.n	8010eb4 <_dtoa_r+0x754>
 8010ea0:	42ab      	cmp	r3, r5
 8010ea2:	9a04      	ldr	r2, [sp, #16]
 8010ea4:	bfa8      	it	ge
 8010ea6:	462b      	movge	r3, r5
 8010ea8:	1ad2      	subs	r2, r2, r3
 8010eaa:	9204      	str	r2, [sp, #16]
 8010eac:	9a05      	ldr	r2, [sp, #20]
 8010eae:	1aed      	subs	r5, r5, r3
 8010eb0:	1ad3      	subs	r3, r2, r3
 8010eb2:	9305      	str	r3, [sp, #20]
 8010eb4:	9b07      	ldr	r3, [sp, #28]
 8010eb6:	b31b      	cbz	r3, 8010f00 <_dtoa_r+0x7a0>
 8010eb8:	9b08      	ldr	r3, [sp, #32]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 80af 	beq.w	801101e <_dtoa_r+0x8be>
 8010ec0:	2e00      	cmp	r6, #0
 8010ec2:	dd13      	ble.n	8010eec <_dtoa_r+0x78c>
 8010ec4:	4639      	mov	r1, r7
 8010ec6:	4632      	mov	r2, r6
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f001 f8b9 	bl	8012040 <__pow5mult>
 8010ece:	ee18 2a10 	vmov	r2, s16
 8010ed2:	4601      	mov	r1, r0
 8010ed4:	4607      	mov	r7, r0
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f001 f808 	bl	8011eec <__multiply>
 8010edc:	ee18 1a10 	vmov	r1, s16
 8010ee0:	4680      	mov	r8, r0
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 feea 	bl	8011cbc <_Bfree>
 8010ee8:	ee08 8a10 	vmov	s16, r8
 8010eec:	9b07      	ldr	r3, [sp, #28]
 8010eee:	1b9a      	subs	r2, r3, r6
 8010ef0:	d006      	beq.n	8010f00 <_dtoa_r+0x7a0>
 8010ef2:	ee18 1a10 	vmov	r1, s16
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f001 f8a2 	bl	8012040 <__pow5mult>
 8010efc:	ee08 0a10 	vmov	s16, r0
 8010f00:	2101      	movs	r1, #1
 8010f02:	4620      	mov	r0, r4
 8010f04:	f000 ffdc 	bl	8011ec0 <__i2b>
 8010f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	f340 8088 	ble.w	8011022 <_dtoa_r+0x8c2>
 8010f12:	461a      	mov	r2, r3
 8010f14:	4601      	mov	r1, r0
 8010f16:	4620      	mov	r0, r4
 8010f18:	f001 f892 	bl	8012040 <__pow5mult>
 8010f1c:	9b06      	ldr	r3, [sp, #24]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	4606      	mov	r6, r0
 8010f22:	f340 8081 	ble.w	8011028 <_dtoa_r+0x8c8>
 8010f26:	f04f 0800 	mov.w	r8, #0
 8010f2a:	6933      	ldr	r3, [r6, #16]
 8010f2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010f30:	6918      	ldr	r0, [r3, #16]
 8010f32:	f000 ff75 	bl	8011e20 <__hi0bits>
 8010f36:	f1c0 0020 	rsb	r0, r0, #32
 8010f3a:	9b05      	ldr	r3, [sp, #20]
 8010f3c:	4418      	add	r0, r3
 8010f3e:	f010 001f 	ands.w	r0, r0, #31
 8010f42:	f000 8092 	beq.w	801106a <_dtoa_r+0x90a>
 8010f46:	f1c0 0320 	rsb	r3, r0, #32
 8010f4a:	2b04      	cmp	r3, #4
 8010f4c:	f340 808a 	ble.w	8011064 <_dtoa_r+0x904>
 8010f50:	f1c0 001c 	rsb	r0, r0, #28
 8010f54:	9b04      	ldr	r3, [sp, #16]
 8010f56:	4403      	add	r3, r0
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	9b05      	ldr	r3, [sp, #20]
 8010f5c:	4403      	add	r3, r0
 8010f5e:	4405      	add	r5, r0
 8010f60:	9305      	str	r3, [sp, #20]
 8010f62:	9b04      	ldr	r3, [sp, #16]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	dd07      	ble.n	8010f78 <_dtoa_r+0x818>
 8010f68:	ee18 1a10 	vmov	r1, s16
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f001 f8c0 	bl	80120f4 <__lshift>
 8010f74:	ee08 0a10 	vmov	s16, r0
 8010f78:	9b05      	ldr	r3, [sp, #20]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	dd05      	ble.n	8010f8a <_dtoa_r+0x82a>
 8010f7e:	4631      	mov	r1, r6
 8010f80:	461a      	mov	r2, r3
 8010f82:	4620      	mov	r0, r4
 8010f84:	f001 f8b6 	bl	80120f4 <__lshift>
 8010f88:	4606      	mov	r6, r0
 8010f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d06e      	beq.n	801106e <_dtoa_r+0x90e>
 8010f90:	ee18 0a10 	vmov	r0, s16
 8010f94:	4631      	mov	r1, r6
 8010f96:	f001 f91d 	bl	80121d4 <__mcmp>
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	da67      	bge.n	801106e <_dtoa_r+0x90e>
 8010f9e:	9b00      	ldr	r3, [sp, #0]
 8010fa0:	3b01      	subs	r3, #1
 8010fa2:	ee18 1a10 	vmov	r1, s16
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	220a      	movs	r2, #10
 8010faa:	2300      	movs	r3, #0
 8010fac:	4620      	mov	r0, r4
 8010fae:	f000 fea7 	bl	8011d00 <__multadd>
 8010fb2:	9b08      	ldr	r3, [sp, #32]
 8010fb4:	ee08 0a10 	vmov	s16, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 81b1 	beq.w	8011320 <_dtoa_r+0xbc0>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	4639      	mov	r1, r7
 8010fc2:	220a      	movs	r2, #10
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f000 fe9b 	bl	8011d00 <__multadd>
 8010fca:	9b02      	ldr	r3, [sp, #8]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	4607      	mov	r7, r0
 8010fd0:	f300 808e 	bgt.w	80110f0 <_dtoa_r+0x990>
 8010fd4:	9b06      	ldr	r3, [sp, #24]
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	dc51      	bgt.n	801107e <_dtoa_r+0x91e>
 8010fda:	e089      	b.n	80110f0 <_dtoa_r+0x990>
 8010fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010fde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010fe2:	e74b      	b.n	8010e7c <_dtoa_r+0x71c>
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	1e5e      	subs	r6, r3, #1
 8010fe8:	9b07      	ldr	r3, [sp, #28]
 8010fea:	42b3      	cmp	r3, r6
 8010fec:	bfbf      	itttt	lt
 8010fee:	9b07      	ldrlt	r3, [sp, #28]
 8010ff0:	9607      	strlt	r6, [sp, #28]
 8010ff2:	1af2      	sublt	r2, r6, r3
 8010ff4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010ff6:	bfb6      	itet	lt
 8010ff8:	189b      	addlt	r3, r3, r2
 8010ffa:	1b9e      	subge	r6, r3, r6
 8010ffc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010ffe:	9b03      	ldr	r3, [sp, #12]
 8011000:	bfb8      	it	lt
 8011002:	2600      	movlt	r6, #0
 8011004:	2b00      	cmp	r3, #0
 8011006:	bfb7      	itett	lt
 8011008:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801100c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011010:	1a9d      	sublt	r5, r3, r2
 8011012:	2300      	movlt	r3, #0
 8011014:	e734      	b.n	8010e80 <_dtoa_r+0x720>
 8011016:	9e07      	ldr	r6, [sp, #28]
 8011018:	9d04      	ldr	r5, [sp, #16]
 801101a:	9f08      	ldr	r7, [sp, #32]
 801101c:	e73b      	b.n	8010e96 <_dtoa_r+0x736>
 801101e:	9a07      	ldr	r2, [sp, #28]
 8011020:	e767      	b.n	8010ef2 <_dtoa_r+0x792>
 8011022:	9b06      	ldr	r3, [sp, #24]
 8011024:	2b01      	cmp	r3, #1
 8011026:	dc18      	bgt.n	801105a <_dtoa_r+0x8fa>
 8011028:	f1ba 0f00 	cmp.w	sl, #0
 801102c:	d115      	bne.n	801105a <_dtoa_r+0x8fa>
 801102e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011032:	b993      	cbnz	r3, 801105a <_dtoa_r+0x8fa>
 8011034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011038:	0d1b      	lsrs	r3, r3, #20
 801103a:	051b      	lsls	r3, r3, #20
 801103c:	b183      	cbz	r3, 8011060 <_dtoa_r+0x900>
 801103e:	9b04      	ldr	r3, [sp, #16]
 8011040:	3301      	adds	r3, #1
 8011042:	9304      	str	r3, [sp, #16]
 8011044:	9b05      	ldr	r3, [sp, #20]
 8011046:	3301      	adds	r3, #1
 8011048:	9305      	str	r3, [sp, #20]
 801104a:	f04f 0801 	mov.w	r8, #1
 801104e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011050:	2b00      	cmp	r3, #0
 8011052:	f47f af6a 	bne.w	8010f2a <_dtoa_r+0x7ca>
 8011056:	2001      	movs	r0, #1
 8011058:	e76f      	b.n	8010f3a <_dtoa_r+0x7da>
 801105a:	f04f 0800 	mov.w	r8, #0
 801105e:	e7f6      	b.n	801104e <_dtoa_r+0x8ee>
 8011060:	4698      	mov	r8, r3
 8011062:	e7f4      	b.n	801104e <_dtoa_r+0x8ee>
 8011064:	f43f af7d 	beq.w	8010f62 <_dtoa_r+0x802>
 8011068:	4618      	mov	r0, r3
 801106a:	301c      	adds	r0, #28
 801106c:	e772      	b.n	8010f54 <_dtoa_r+0x7f4>
 801106e:	9b03      	ldr	r3, [sp, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	dc37      	bgt.n	80110e4 <_dtoa_r+0x984>
 8011074:	9b06      	ldr	r3, [sp, #24]
 8011076:	2b02      	cmp	r3, #2
 8011078:	dd34      	ble.n	80110e4 <_dtoa_r+0x984>
 801107a:	9b03      	ldr	r3, [sp, #12]
 801107c:	9302      	str	r3, [sp, #8]
 801107e:	9b02      	ldr	r3, [sp, #8]
 8011080:	b96b      	cbnz	r3, 801109e <_dtoa_r+0x93e>
 8011082:	4631      	mov	r1, r6
 8011084:	2205      	movs	r2, #5
 8011086:	4620      	mov	r0, r4
 8011088:	f000 fe3a 	bl	8011d00 <__multadd>
 801108c:	4601      	mov	r1, r0
 801108e:	4606      	mov	r6, r0
 8011090:	ee18 0a10 	vmov	r0, s16
 8011094:	f001 f89e 	bl	80121d4 <__mcmp>
 8011098:	2800      	cmp	r0, #0
 801109a:	f73f adbb 	bgt.w	8010c14 <_dtoa_r+0x4b4>
 801109e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a0:	9d01      	ldr	r5, [sp, #4]
 80110a2:	43db      	mvns	r3, r3
 80110a4:	9300      	str	r3, [sp, #0]
 80110a6:	f04f 0800 	mov.w	r8, #0
 80110aa:	4631      	mov	r1, r6
 80110ac:	4620      	mov	r0, r4
 80110ae:	f000 fe05 	bl	8011cbc <_Bfree>
 80110b2:	2f00      	cmp	r7, #0
 80110b4:	f43f aea4 	beq.w	8010e00 <_dtoa_r+0x6a0>
 80110b8:	f1b8 0f00 	cmp.w	r8, #0
 80110bc:	d005      	beq.n	80110ca <_dtoa_r+0x96a>
 80110be:	45b8      	cmp	r8, r7
 80110c0:	d003      	beq.n	80110ca <_dtoa_r+0x96a>
 80110c2:	4641      	mov	r1, r8
 80110c4:	4620      	mov	r0, r4
 80110c6:	f000 fdf9 	bl	8011cbc <_Bfree>
 80110ca:	4639      	mov	r1, r7
 80110cc:	4620      	mov	r0, r4
 80110ce:	f000 fdf5 	bl	8011cbc <_Bfree>
 80110d2:	e695      	b.n	8010e00 <_dtoa_r+0x6a0>
 80110d4:	2600      	movs	r6, #0
 80110d6:	4637      	mov	r7, r6
 80110d8:	e7e1      	b.n	801109e <_dtoa_r+0x93e>
 80110da:	9700      	str	r7, [sp, #0]
 80110dc:	4637      	mov	r7, r6
 80110de:	e599      	b.n	8010c14 <_dtoa_r+0x4b4>
 80110e0:	40240000 	.word	0x40240000
 80110e4:	9b08      	ldr	r3, [sp, #32]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f000 80ca 	beq.w	8011280 <_dtoa_r+0xb20>
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	9302      	str	r3, [sp, #8]
 80110f0:	2d00      	cmp	r5, #0
 80110f2:	dd05      	ble.n	8011100 <_dtoa_r+0x9a0>
 80110f4:	4639      	mov	r1, r7
 80110f6:	462a      	mov	r2, r5
 80110f8:	4620      	mov	r0, r4
 80110fa:	f000 fffb 	bl	80120f4 <__lshift>
 80110fe:	4607      	mov	r7, r0
 8011100:	f1b8 0f00 	cmp.w	r8, #0
 8011104:	d05b      	beq.n	80111be <_dtoa_r+0xa5e>
 8011106:	6879      	ldr	r1, [r7, #4]
 8011108:	4620      	mov	r0, r4
 801110a:	f000 fd97 	bl	8011c3c <_Balloc>
 801110e:	4605      	mov	r5, r0
 8011110:	b928      	cbnz	r0, 801111e <_dtoa_r+0x9be>
 8011112:	4b87      	ldr	r3, [pc, #540]	; (8011330 <_dtoa_r+0xbd0>)
 8011114:	4602      	mov	r2, r0
 8011116:	f240 21ea 	movw	r1, #746	; 0x2ea
 801111a:	f7ff bb3b 	b.w	8010794 <_dtoa_r+0x34>
 801111e:	693a      	ldr	r2, [r7, #16]
 8011120:	3202      	adds	r2, #2
 8011122:	0092      	lsls	r2, r2, #2
 8011124:	f107 010c 	add.w	r1, r7, #12
 8011128:	300c      	adds	r0, #12
 801112a:	f7fd fd42 	bl	800ebb2 <memcpy>
 801112e:	2201      	movs	r2, #1
 8011130:	4629      	mov	r1, r5
 8011132:	4620      	mov	r0, r4
 8011134:	f000 ffde 	bl	80120f4 <__lshift>
 8011138:	9b01      	ldr	r3, [sp, #4]
 801113a:	f103 0901 	add.w	r9, r3, #1
 801113e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011142:	4413      	add	r3, r2
 8011144:	9305      	str	r3, [sp, #20]
 8011146:	f00a 0301 	and.w	r3, sl, #1
 801114a:	46b8      	mov	r8, r7
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	4607      	mov	r7, r0
 8011150:	4631      	mov	r1, r6
 8011152:	ee18 0a10 	vmov	r0, s16
 8011156:	f7ff fa75 	bl	8010644 <quorem>
 801115a:	4641      	mov	r1, r8
 801115c:	9002      	str	r0, [sp, #8]
 801115e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011162:	ee18 0a10 	vmov	r0, s16
 8011166:	f001 f835 	bl	80121d4 <__mcmp>
 801116a:	463a      	mov	r2, r7
 801116c:	9003      	str	r0, [sp, #12]
 801116e:	4631      	mov	r1, r6
 8011170:	4620      	mov	r0, r4
 8011172:	f001 f84b 	bl	801220c <__mdiff>
 8011176:	68c2      	ldr	r2, [r0, #12]
 8011178:	f109 3bff 	add.w	fp, r9, #4294967295
 801117c:	4605      	mov	r5, r0
 801117e:	bb02      	cbnz	r2, 80111c2 <_dtoa_r+0xa62>
 8011180:	4601      	mov	r1, r0
 8011182:	ee18 0a10 	vmov	r0, s16
 8011186:	f001 f825 	bl	80121d4 <__mcmp>
 801118a:	4602      	mov	r2, r0
 801118c:	4629      	mov	r1, r5
 801118e:	4620      	mov	r0, r4
 8011190:	9207      	str	r2, [sp, #28]
 8011192:	f000 fd93 	bl	8011cbc <_Bfree>
 8011196:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801119a:	ea43 0102 	orr.w	r1, r3, r2
 801119e:	9b04      	ldr	r3, [sp, #16]
 80111a0:	430b      	orrs	r3, r1
 80111a2:	464d      	mov	r5, r9
 80111a4:	d10f      	bne.n	80111c6 <_dtoa_r+0xa66>
 80111a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80111aa:	d02a      	beq.n	8011202 <_dtoa_r+0xaa2>
 80111ac:	9b03      	ldr	r3, [sp, #12]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	dd02      	ble.n	80111b8 <_dtoa_r+0xa58>
 80111b2:	9b02      	ldr	r3, [sp, #8]
 80111b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80111b8:	f88b a000 	strb.w	sl, [fp]
 80111bc:	e775      	b.n	80110aa <_dtoa_r+0x94a>
 80111be:	4638      	mov	r0, r7
 80111c0:	e7ba      	b.n	8011138 <_dtoa_r+0x9d8>
 80111c2:	2201      	movs	r2, #1
 80111c4:	e7e2      	b.n	801118c <_dtoa_r+0xa2c>
 80111c6:	9b03      	ldr	r3, [sp, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	db04      	blt.n	80111d6 <_dtoa_r+0xa76>
 80111cc:	9906      	ldr	r1, [sp, #24]
 80111ce:	430b      	orrs	r3, r1
 80111d0:	9904      	ldr	r1, [sp, #16]
 80111d2:	430b      	orrs	r3, r1
 80111d4:	d122      	bne.n	801121c <_dtoa_r+0xabc>
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	ddee      	ble.n	80111b8 <_dtoa_r+0xa58>
 80111da:	ee18 1a10 	vmov	r1, s16
 80111de:	2201      	movs	r2, #1
 80111e0:	4620      	mov	r0, r4
 80111e2:	f000 ff87 	bl	80120f4 <__lshift>
 80111e6:	4631      	mov	r1, r6
 80111e8:	ee08 0a10 	vmov	s16, r0
 80111ec:	f000 fff2 	bl	80121d4 <__mcmp>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	dc03      	bgt.n	80111fc <_dtoa_r+0xa9c>
 80111f4:	d1e0      	bne.n	80111b8 <_dtoa_r+0xa58>
 80111f6:	f01a 0f01 	tst.w	sl, #1
 80111fa:	d0dd      	beq.n	80111b8 <_dtoa_r+0xa58>
 80111fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011200:	d1d7      	bne.n	80111b2 <_dtoa_r+0xa52>
 8011202:	2339      	movs	r3, #57	; 0x39
 8011204:	f88b 3000 	strb.w	r3, [fp]
 8011208:	462b      	mov	r3, r5
 801120a:	461d      	mov	r5, r3
 801120c:	3b01      	subs	r3, #1
 801120e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011212:	2a39      	cmp	r2, #57	; 0x39
 8011214:	d071      	beq.n	80112fa <_dtoa_r+0xb9a>
 8011216:	3201      	adds	r2, #1
 8011218:	701a      	strb	r2, [r3, #0]
 801121a:	e746      	b.n	80110aa <_dtoa_r+0x94a>
 801121c:	2a00      	cmp	r2, #0
 801121e:	dd07      	ble.n	8011230 <_dtoa_r+0xad0>
 8011220:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011224:	d0ed      	beq.n	8011202 <_dtoa_r+0xaa2>
 8011226:	f10a 0301 	add.w	r3, sl, #1
 801122a:	f88b 3000 	strb.w	r3, [fp]
 801122e:	e73c      	b.n	80110aa <_dtoa_r+0x94a>
 8011230:	9b05      	ldr	r3, [sp, #20]
 8011232:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011236:	4599      	cmp	r9, r3
 8011238:	d047      	beq.n	80112ca <_dtoa_r+0xb6a>
 801123a:	ee18 1a10 	vmov	r1, s16
 801123e:	2300      	movs	r3, #0
 8011240:	220a      	movs	r2, #10
 8011242:	4620      	mov	r0, r4
 8011244:	f000 fd5c 	bl	8011d00 <__multadd>
 8011248:	45b8      	cmp	r8, r7
 801124a:	ee08 0a10 	vmov	s16, r0
 801124e:	f04f 0300 	mov.w	r3, #0
 8011252:	f04f 020a 	mov.w	r2, #10
 8011256:	4641      	mov	r1, r8
 8011258:	4620      	mov	r0, r4
 801125a:	d106      	bne.n	801126a <_dtoa_r+0xb0a>
 801125c:	f000 fd50 	bl	8011d00 <__multadd>
 8011260:	4680      	mov	r8, r0
 8011262:	4607      	mov	r7, r0
 8011264:	f109 0901 	add.w	r9, r9, #1
 8011268:	e772      	b.n	8011150 <_dtoa_r+0x9f0>
 801126a:	f000 fd49 	bl	8011d00 <__multadd>
 801126e:	4639      	mov	r1, r7
 8011270:	4680      	mov	r8, r0
 8011272:	2300      	movs	r3, #0
 8011274:	220a      	movs	r2, #10
 8011276:	4620      	mov	r0, r4
 8011278:	f000 fd42 	bl	8011d00 <__multadd>
 801127c:	4607      	mov	r7, r0
 801127e:	e7f1      	b.n	8011264 <_dtoa_r+0xb04>
 8011280:	9b03      	ldr	r3, [sp, #12]
 8011282:	9302      	str	r3, [sp, #8]
 8011284:	9d01      	ldr	r5, [sp, #4]
 8011286:	ee18 0a10 	vmov	r0, s16
 801128a:	4631      	mov	r1, r6
 801128c:	f7ff f9da 	bl	8010644 <quorem>
 8011290:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011294:	9b01      	ldr	r3, [sp, #4]
 8011296:	f805 ab01 	strb.w	sl, [r5], #1
 801129a:	1aea      	subs	r2, r5, r3
 801129c:	9b02      	ldr	r3, [sp, #8]
 801129e:	4293      	cmp	r3, r2
 80112a0:	dd09      	ble.n	80112b6 <_dtoa_r+0xb56>
 80112a2:	ee18 1a10 	vmov	r1, s16
 80112a6:	2300      	movs	r3, #0
 80112a8:	220a      	movs	r2, #10
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 fd28 	bl	8011d00 <__multadd>
 80112b0:	ee08 0a10 	vmov	s16, r0
 80112b4:	e7e7      	b.n	8011286 <_dtoa_r+0xb26>
 80112b6:	9b02      	ldr	r3, [sp, #8]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	bfc8      	it	gt
 80112bc:	461d      	movgt	r5, r3
 80112be:	9b01      	ldr	r3, [sp, #4]
 80112c0:	bfd8      	it	le
 80112c2:	2501      	movle	r5, #1
 80112c4:	441d      	add	r5, r3
 80112c6:	f04f 0800 	mov.w	r8, #0
 80112ca:	ee18 1a10 	vmov	r1, s16
 80112ce:	2201      	movs	r2, #1
 80112d0:	4620      	mov	r0, r4
 80112d2:	f000 ff0f 	bl	80120f4 <__lshift>
 80112d6:	4631      	mov	r1, r6
 80112d8:	ee08 0a10 	vmov	s16, r0
 80112dc:	f000 ff7a 	bl	80121d4 <__mcmp>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	dc91      	bgt.n	8011208 <_dtoa_r+0xaa8>
 80112e4:	d102      	bne.n	80112ec <_dtoa_r+0xb8c>
 80112e6:	f01a 0f01 	tst.w	sl, #1
 80112ea:	d18d      	bne.n	8011208 <_dtoa_r+0xaa8>
 80112ec:	462b      	mov	r3, r5
 80112ee:	461d      	mov	r5, r3
 80112f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112f4:	2a30      	cmp	r2, #48	; 0x30
 80112f6:	d0fa      	beq.n	80112ee <_dtoa_r+0xb8e>
 80112f8:	e6d7      	b.n	80110aa <_dtoa_r+0x94a>
 80112fa:	9a01      	ldr	r2, [sp, #4]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d184      	bne.n	801120a <_dtoa_r+0xaaa>
 8011300:	9b00      	ldr	r3, [sp, #0]
 8011302:	3301      	adds	r3, #1
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	2331      	movs	r3, #49	; 0x31
 8011308:	7013      	strb	r3, [r2, #0]
 801130a:	e6ce      	b.n	80110aa <_dtoa_r+0x94a>
 801130c:	4b09      	ldr	r3, [pc, #36]	; (8011334 <_dtoa_r+0xbd4>)
 801130e:	f7ff ba95 	b.w	801083c <_dtoa_r+0xdc>
 8011312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011314:	2b00      	cmp	r3, #0
 8011316:	f47f aa6e 	bne.w	80107f6 <_dtoa_r+0x96>
 801131a:	4b07      	ldr	r3, [pc, #28]	; (8011338 <_dtoa_r+0xbd8>)
 801131c:	f7ff ba8e 	b.w	801083c <_dtoa_r+0xdc>
 8011320:	9b02      	ldr	r3, [sp, #8]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dcae      	bgt.n	8011284 <_dtoa_r+0xb24>
 8011326:	9b06      	ldr	r3, [sp, #24]
 8011328:	2b02      	cmp	r3, #2
 801132a:	f73f aea8 	bgt.w	801107e <_dtoa_r+0x91e>
 801132e:	e7a9      	b.n	8011284 <_dtoa_r+0xb24>
 8011330:	08013e41 	.word	0x08013e41
 8011334:	08013bb4 	.word	0x08013bb4
 8011338:	08013dd9 	.word	0x08013dd9

0801133c <__sflush_r>:
 801133c:	898a      	ldrh	r2, [r1, #12]
 801133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011342:	4605      	mov	r5, r0
 8011344:	0710      	lsls	r0, r2, #28
 8011346:	460c      	mov	r4, r1
 8011348:	d458      	bmi.n	80113fc <__sflush_r+0xc0>
 801134a:	684b      	ldr	r3, [r1, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	dc05      	bgt.n	801135c <__sflush_r+0x20>
 8011350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011352:	2b00      	cmp	r3, #0
 8011354:	dc02      	bgt.n	801135c <__sflush_r+0x20>
 8011356:	2000      	movs	r0, #0
 8011358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801135c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801135e:	2e00      	cmp	r6, #0
 8011360:	d0f9      	beq.n	8011356 <__sflush_r+0x1a>
 8011362:	2300      	movs	r3, #0
 8011364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011368:	682f      	ldr	r7, [r5, #0]
 801136a:	602b      	str	r3, [r5, #0]
 801136c:	d032      	beq.n	80113d4 <__sflush_r+0x98>
 801136e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	075a      	lsls	r2, r3, #29
 8011374:	d505      	bpl.n	8011382 <__sflush_r+0x46>
 8011376:	6863      	ldr	r3, [r4, #4]
 8011378:	1ac0      	subs	r0, r0, r3
 801137a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801137c:	b10b      	cbz	r3, 8011382 <__sflush_r+0x46>
 801137e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011380:	1ac0      	subs	r0, r0, r3
 8011382:	2300      	movs	r3, #0
 8011384:	4602      	mov	r2, r0
 8011386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011388:	6a21      	ldr	r1, [r4, #32]
 801138a:	4628      	mov	r0, r5
 801138c:	47b0      	blx	r6
 801138e:	1c43      	adds	r3, r0, #1
 8011390:	89a3      	ldrh	r3, [r4, #12]
 8011392:	d106      	bne.n	80113a2 <__sflush_r+0x66>
 8011394:	6829      	ldr	r1, [r5, #0]
 8011396:	291d      	cmp	r1, #29
 8011398:	d82c      	bhi.n	80113f4 <__sflush_r+0xb8>
 801139a:	4a2a      	ldr	r2, [pc, #168]	; (8011444 <__sflush_r+0x108>)
 801139c:	40ca      	lsrs	r2, r1
 801139e:	07d6      	lsls	r6, r2, #31
 80113a0:	d528      	bpl.n	80113f4 <__sflush_r+0xb8>
 80113a2:	2200      	movs	r2, #0
 80113a4:	6062      	str	r2, [r4, #4]
 80113a6:	04d9      	lsls	r1, r3, #19
 80113a8:	6922      	ldr	r2, [r4, #16]
 80113aa:	6022      	str	r2, [r4, #0]
 80113ac:	d504      	bpl.n	80113b8 <__sflush_r+0x7c>
 80113ae:	1c42      	adds	r2, r0, #1
 80113b0:	d101      	bne.n	80113b6 <__sflush_r+0x7a>
 80113b2:	682b      	ldr	r3, [r5, #0]
 80113b4:	b903      	cbnz	r3, 80113b8 <__sflush_r+0x7c>
 80113b6:	6560      	str	r0, [r4, #84]	; 0x54
 80113b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ba:	602f      	str	r7, [r5, #0]
 80113bc:	2900      	cmp	r1, #0
 80113be:	d0ca      	beq.n	8011356 <__sflush_r+0x1a>
 80113c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113c4:	4299      	cmp	r1, r3
 80113c6:	d002      	beq.n	80113ce <__sflush_r+0x92>
 80113c8:	4628      	mov	r0, r5
 80113ca:	f001 f90f 	bl	80125ec <_free_r>
 80113ce:	2000      	movs	r0, #0
 80113d0:	6360      	str	r0, [r4, #52]	; 0x34
 80113d2:	e7c1      	b.n	8011358 <__sflush_r+0x1c>
 80113d4:	6a21      	ldr	r1, [r4, #32]
 80113d6:	2301      	movs	r3, #1
 80113d8:	4628      	mov	r0, r5
 80113da:	47b0      	blx	r6
 80113dc:	1c41      	adds	r1, r0, #1
 80113de:	d1c7      	bne.n	8011370 <__sflush_r+0x34>
 80113e0:	682b      	ldr	r3, [r5, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d0c4      	beq.n	8011370 <__sflush_r+0x34>
 80113e6:	2b1d      	cmp	r3, #29
 80113e8:	d001      	beq.n	80113ee <__sflush_r+0xb2>
 80113ea:	2b16      	cmp	r3, #22
 80113ec:	d101      	bne.n	80113f2 <__sflush_r+0xb6>
 80113ee:	602f      	str	r7, [r5, #0]
 80113f0:	e7b1      	b.n	8011356 <__sflush_r+0x1a>
 80113f2:	89a3      	ldrh	r3, [r4, #12]
 80113f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113f8:	81a3      	strh	r3, [r4, #12]
 80113fa:	e7ad      	b.n	8011358 <__sflush_r+0x1c>
 80113fc:	690f      	ldr	r7, [r1, #16]
 80113fe:	2f00      	cmp	r7, #0
 8011400:	d0a9      	beq.n	8011356 <__sflush_r+0x1a>
 8011402:	0793      	lsls	r3, r2, #30
 8011404:	680e      	ldr	r6, [r1, #0]
 8011406:	bf08      	it	eq
 8011408:	694b      	ldreq	r3, [r1, #20]
 801140a:	600f      	str	r7, [r1, #0]
 801140c:	bf18      	it	ne
 801140e:	2300      	movne	r3, #0
 8011410:	eba6 0807 	sub.w	r8, r6, r7
 8011414:	608b      	str	r3, [r1, #8]
 8011416:	f1b8 0f00 	cmp.w	r8, #0
 801141a:	dd9c      	ble.n	8011356 <__sflush_r+0x1a>
 801141c:	6a21      	ldr	r1, [r4, #32]
 801141e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011420:	4643      	mov	r3, r8
 8011422:	463a      	mov	r2, r7
 8011424:	4628      	mov	r0, r5
 8011426:	47b0      	blx	r6
 8011428:	2800      	cmp	r0, #0
 801142a:	dc06      	bgt.n	801143a <__sflush_r+0xfe>
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011432:	81a3      	strh	r3, [r4, #12]
 8011434:	f04f 30ff 	mov.w	r0, #4294967295
 8011438:	e78e      	b.n	8011358 <__sflush_r+0x1c>
 801143a:	4407      	add	r7, r0
 801143c:	eba8 0800 	sub.w	r8, r8, r0
 8011440:	e7e9      	b.n	8011416 <__sflush_r+0xda>
 8011442:	bf00      	nop
 8011444:	20400001 	.word	0x20400001

08011448 <_fflush_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	690b      	ldr	r3, [r1, #16]
 801144c:	4605      	mov	r5, r0
 801144e:	460c      	mov	r4, r1
 8011450:	b913      	cbnz	r3, 8011458 <_fflush_r+0x10>
 8011452:	2500      	movs	r5, #0
 8011454:	4628      	mov	r0, r5
 8011456:	bd38      	pop	{r3, r4, r5, pc}
 8011458:	b118      	cbz	r0, 8011462 <_fflush_r+0x1a>
 801145a:	6983      	ldr	r3, [r0, #24]
 801145c:	b90b      	cbnz	r3, 8011462 <_fflush_r+0x1a>
 801145e:	f7fd fae3 	bl	800ea28 <__sinit>
 8011462:	4b14      	ldr	r3, [pc, #80]	; (80114b4 <_fflush_r+0x6c>)
 8011464:	429c      	cmp	r4, r3
 8011466:	d11b      	bne.n	80114a0 <_fflush_r+0x58>
 8011468:	686c      	ldr	r4, [r5, #4]
 801146a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d0ef      	beq.n	8011452 <_fflush_r+0xa>
 8011472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011474:	07d0      	lsls	r0, r2, #31
 8011476:	d404      	bmi.n	8011482 <_fflush_r+0x3a>
 8011478:	0599      	lsls	r1, r3, #22
 801147a:	d402      	bmi.n	8011482 <_fflush_r+0x3a>
 801147c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801147e:	f7fd fb96 	bl	800ebae <__retarget_lock_acquire_recursive>
 8011482:	4628      	mov	r0, r5
 8011484:	4621      	mov	r1, r4
 8011486:	f7ff ff59 	bl	801133c <__sflush_r>
 801148a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801148c:	07da      	lsls	r2, r3, #31
 801148e:	4605      	mov	r5, r0
 8011490:	d4e0      	bmi.n	8011454 <_fflush_r+0xc>
 8011492:	89a3      	ldrh	r3, [r4, #12]
 8011494:	059b      	lsls	r3, r3, #22
 8011496:	d4dd      	bmi.n	8011454 <_fflush_r+0xc>
 8011498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801149a:	f7fd fb89 	bl	800ebb0 <__retarget_lock_release_recursive>
 801149e:	e7d9      	b.n	8011454 <_fflush_r+0xc>
 80114a0:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <_fflush_r+0x70>)
 80114a2:	429c      	cmp	r4, r3
 80114a4:	d101      	bne.n	80114aa <_fflush_r+0x62>
 80114a6:	68ac      	ldr	r4, [r5, #8]
 80114a8:	e7df      	b.n	801146a <_fflush_r+0x22>
 80114aa:	4b04      	ldr	r3, [pc, #16]	; (80114bc <_fflush_r+0x74>)
 80114ac:	429c      	cmp	r4, r3
 80114ae:	bf08      	it	eq
 80114b0:	68ec      	ldreq	r4, [r5, #12]
 80114b2:	e7da      	b.n	801146a <_fflush_r+0x22>
 80114b4:	08013b60 	.word	0x08013b60
 80114b8:	08013b80 	.word	0x08013b80
 80114bc:	08013b40 	.word	0x08013b40

080114c0 <fiprintf>:
 80114c0:	b40e      	push	{r1, r2, r3}
 80114c2:	b503      	push	{r0, r1, lr}
 80114c4:	4601      	mov	r1, r0
 80114c6:	ab03      	add	r3, sp, #12
 80114c8:	4805      	ldr	r0, [pc, #20]	; (80114e0 <fiprintf+0x20>)
 80114ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ce:	6800      	ldr	r0, [r0, #0]
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	f001 fa5d 	bl	8012990 <_vfiprintf_r>
 80114d6:	b002      	add	sp, #8
 80114d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114dc:	b003      	add	sp, #12
 80114de:	4770      	bx	lr
 80114e0:	20000018 	.word	0x20000018

080114e4 <rshift>:
 80114e4:	6903      	ldr	r3, [r0, #16]
 80114e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80114ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80114f2:	f100 0414 	add.w	r4, r0, #20
 80114f6:	dd45      	ble.n	8011584 <rshift+0xa0>
 80114f8:	f011 011f 	ands.w	r1, r1, #31
 80114fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011500:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011504:	d10c      	bne.n	8011520 <rshift+0x3c>
 8011506:	f100 0710 	add.w	r7, r0, #16
 801150a:	4629      	mov	r1, r5
 801150c:	42b1      	cmp	r1, r6
 801150e:	d334      	bcc.n	801157a <rshift+0x96>
 8011510:	1a9b      	subs	r3, r3, r2
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	1eea      	subs	r2, r5, #3
 8011516:	4296      	cmp	r6, r2
 8011518:	bf38      	it	cc
 801151a:	2300      	movcc	r3, #0
 801151c:	4423      	add	r3, r4
 801151e:	e015      	b.n	801154c <rshift+0x68>
 8011520:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011524:	f1c1 0820 	rsb	r8, r1, #32
 8011528:	40cf      	lsrs	r7, r1
 801152a:	f105 0e04 	add.w	lr, r5, #4
 801152e:	46a1      	mov	r9, r4
 8011530:	4576      	cmp	r6, lr
 8011532:	46f4      	mov	ip, lr
 8011534:	d815      	bhi.n	8011562 <rshift+0x7e>
 8011536:	1a9a      	subs	r2, r3, r2
 8011538:	0092      	lsls	r2, r2, #2
 801153a:	3a04      	subs	r2, #4
 801153c:	3501      	adds	r5, #1
 801153e:	42ae      	cmp	r6, r5
 8011540:	bf38      	it	cc
 8011542:	2200      	movcc	r2, #0
 8011544:	18a3      	adds	r3, r4, r2
 8011546:	50a7      	str	r7, [r4, r2]
 8011548:	b107      	cbz	r7, 801154c <rshift+0x68>
 801154a:	3304      	adds	r3, #4
 801154c:	1b1a      	subs	r2, r3, r4
 801154e:	42a3      	cmp	r3, r4
 8011550:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011554:	bf08      	it	eq
 8011556:	2300      	moveq	r3, #0
 8011558:	6102      	str	r2, [r0, #16]
 801155a:	bf08      	it	eq
 801155c:	6143      	streq	r3, [r0, #20]
 801155e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011562:	f8dc c000 	ldr.w	ip, [ip]
 8011566:	fa0c fc08 	lsl.w	ip, ip, r8
 801156a:	ea4c 0707 	orr.w	r7, ip, r7
 801156e:	f849 7b04 	str.w	r7, [r9], #4
 8011572:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011576:	40cf      	lsrs	r7, r1
 8011578:	e7da      	b.n	8011530 <rshift+0x4c>
 801157a:	f851 cb04 	ldr.w	ip, [r1], #4
 801157e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011582:	e7c3      	b.n	801150c <rshift+0x28>
 8011584:	4623      	mov	r3, r4
 8011586:	e7e1      	b.n	801154c <rshift+0x68>

08011588 <__hexdig_fun>:
 8011588:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801158c:	2b09      	cmp	r3, #9
 801158e:	d802      	bhi.n	8011596 <__hexdig_fun+0xe>
 8011590:	3820      	subs	r0, #32
 8011592:	b2c0      	uxtb	r0, r0
 8011594:	4770      	bx	lr
 8011596:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801159a:	2b05      	cmp	r3, #5
 801159c:	d801      	bhi.n	80115a2 <__hexdig_fun+0x1a>
 801159e:	3847      	subs	r0, #71	; 0x47
 80115a0:	e7f7      	b.n	8011592 <__hexdig_fun+0xa>
 80115a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80115a6:	2b05      	cmp	r3, #5
 80115a8:	d801      	bhi.n	80115ae <__hexdig_fun+0x26>
 80115aa:	3827      	subs	r0, #39	; 0x27
 80115ac:	e7f1      	b.n	8011592 <__hexdig_fun+0xa>
 80115ae:	2000      	movs	r0, #0
 80115b0:	4770      	bx	lr
	...

080115b4 <__gethex>:
 80115b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b8:	ed2d 8b02 	vpush	{d8}
 80115bc:	b089      	sub	sp, #36	; 0x24
 80115be:	ee08 0a10 	vmov	s16, r0
 80115c2:	9304      	str	r3, [sp, #16]
 80115c4:	4bb4      	ldr	r3, [pc, #720]	; (8011898 <__gethex+0x2e4>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	9301      	str	r3, [sp, #4]
 80115ca:	4618      	mov	r0, r3
 80115cc:	468b      	mov	fp, r1
 80115ce:	4690      	mov	r8, r2
 80115d0:	f7ee fe10 	bl	80001f4 <strlen>
 80115d4:	9b01      	ldr	r3, [sp, #4]
 80115d6:	f8db 2000 	ldr.w	r2, [fp]
 80115da:	4403      	add	r3, r0
 80115dc:	4682      	mov	sl, r0
 80115de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80115e2:	9305      	str	r3, [sp, #20]
 80115e4:	1c93      	adds	r3, r2, #2
 80115e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80115ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80115ee:	32fe      	adds	r2, #254	; 0xfe
 80115f0:	18d1      	adds	r1, r2, r3
 80115f2:	461f      	mov	r7, r3
 80115f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115f8:	9100      	str	r1, [sp, #0]
 80115fa:	2830      	cmp	r0, #48	; 0x30
 80115fc:	d0f8      	beq.n	80115f0 <__gethex+0x3c>
 80115fe:	f7ff ffc3 	bl	8011588 <__hexdig_fun>
 8011602:	4604      	mov	r4, r0
 8011604:	2800      	cmp	r0, #0
 8011606:	d13a      	bne.n	801167e <__gethex+0xca>
 8011608:	9901      	ldr	r1, [sp, #4]
 801160a:	4652      	mov	r2, sl
 801160c:	4638      	mov	r0, r7
 801160e:	f001 fb0b 	bl	8012c28 <strncmp>
 8011612:	4605      	mov	r5, r0
 8011614:	2800      	cmp	r0, #0
 8011616:	d168      	bne.n	80116ea <__gethex+0x136>
 8011618:	f817 000a 	ldrb.w	r0, [r7, sl]
 801161c:	eb07 060a 	add.w	r6, r7, sl
 8011620:	f7ff ffb2 	bl	8011588 <__hexdig_fun>
 8011624:	2800      	cmp	r0, #0
 8011626:	d062      	beq.n	80116ee <__gethex+0x13a>
 8011628:	4633      	mov	r3, r6
 801162a:	7818      	ldrb	r0, [r3, #0]
 801162c:	2830      	cmp	r0, #48	; 0x30
 801162e:	461f      	mov	r7, r3
 8011630:	f103 0301 	add.w	r3, r3, #1
 8011634:	d0f9      	beq.n	801162a <__gethex+0x76>
 8011636:	f7ff ffa7 	bl	8011588 <__hexdig_fun>
 801163a:	2301      	movs	r3, #1
 801163c:	fab0 f480 	clz	r4, r0
 8011640:	0964      	lsrs	r4, r4, #5
 8011642:	4635      	mov	r5, r6
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	463a      	mov	r2, r7
 8011648:	4616      	mov	r6, r2
 801164a:	3201      	adds	r2, #1
 801164c:	7830      	ldrb	r0, [r6, #0]
 801164e:	f7ff ff9b 	bl	8011588 <__hexdig_fun>
 8011652:	2800      	cmp	r0, #0
 8011654:	d1f8      	bne.n	8011648 <__gethex+0x94>
 8011656:	9901      	ldr	r1, [sp, #4]
 8011658:	4652      	mov	r2, sl
 801165a:	4630      	mov	r0, r6
 801165c:	f001 fae4 	bl	8012c28 <strncmp>
 8011660:	b980      	cbnz	r0, 8011684 <__gethex+0xd0>
 8011662:	b94d      	cbnz	r5, 8011678 <__gethex+0xc4>
 8011664:	eb06 050a 	add.w	r5, r6, sl
 8011668:	462a      	mov	r2, r5
 801166a:	4616      	mov	r6, r2
 801166c:	3201      	adds	r2, #1
 801166e:	7830      	ldrb	r0, [r6, #0]
 8011670:	f7ff ff8a 	bl	8011588 <__hexdig_fun>
 8011674:	2800      	cmp	r0, #0
 8011676:	d1f8      	bne.n	801166a <__gethex+0xb6>
 8011678:	1bad      	subs	r5, r5, r6
 801167a:	00ad      	lsls	r5, r5, #2
 801167c:	e004      	b.n	8011688 <__gethex+0xd4>
 801167e:	2400      	movs	r4, #0
 8011680:	4625      	mov	r5, r4
 8011682:	e7e0      	b.n	8011646 <__gethex+0x92>
 8011684:	2d00      	cmp	r5, #0
 8011686:	d1f7      	bne.n	8011678 <__gethex+0xc4>
 8011688:	7833      	ldrb	r3, [r6, #0]
 801168a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801168e:	2b50      	cmp	r3, #80	; 0x50
 8011690:	d13b      	bne.n	801170a <__gethex+0x156>
 8011692:	7873      	ldrb	r3, [r6, #1]
 8011694:	2b2b      	cmp	r3, #43	; 0x2b
 8011696:	d02c      	beq.n	80116f2 <__gethex+0x13e>
 8011698:	2b2d      	cmp	r3, #45	; 0x2d
 801169a:	d02e      	beq.n	80116fa <__gethex+0x146>
 801169c:	1c71      	adds	r1, r6, #1
 801169e:	f04f 0900 	mov.w	r9, #0
 80116a2:	7808      	ldrb	r0, [r1, #0]
 80116a4:	f7ff ff70 	bl	8011588 <__hexdig_fun>
 80116a8:	1e43      	subs	r3, r0, #1
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	2b18      	cmp	r3, #24
 80116ae:	d82c      	bhi.n	801170a <__gethex+0x156>
 80116b0:	f1a0 0210 	sub.w	r2, r0, #16
 80116b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116b8:	f7ff ff66 	bl	8011588 <__hexdig_fun>
 80116bc:	1e43      	subs	r3, r0, #1
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	2b18      	cmp	r3, #24
 80116c2:	d91d      	bls.n	8011700 <__gethex+0x14c>
 80116c4:	f1b9 0f00 	cmp.w	r9, #0
 80116c8:	d000      	beq.n	80116cc <__gethex+0x118>
 80116ca:	4252      	negs	r2, r2
 80116cc:	4415      	add	r5, r2
 80116ce:	f8cb 1000 	str.w	r1, [fp]
 80116d2:	b1e4      	cbz	r4, 801170e <__gethex+0x15a>
 80116d4:	9b00      	ldr	r3, [sp, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	bf14      	ite	ne
 80116da:	2700      	movne	r7, #0
 80116dc:	2706      	moveq	r7, #6
 80116de:	4638      	mov	r0, r7
 80116e0:	b009      	add	sp, #36	; 0x24
 80116e2:	ecbd 8b02 	vpop	{d8}
 80116e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ea:	463e      	mov	r6, r7
 80116ec:	4625      	mov	r5, r4
 80116ee:	2401      	movs	r4, #1
 80116f0:	e7ca      	b.n	8011688 <__gethex+0xd4>
 80116f2:	f04f 0900 	mov.w	r9, #0
 80116f6:	1cb1      	adds	r1, r6, #2
 80116f8:	e7d3      	b.n	80116a2 <__gethex+0xee>
 80116fa:	f04f 0901 	mov.w	r9, #1
 80116fe:	e7fa      	b.n	80116f6 <__gethex+0x142>
 8011700:	230a      	movs	r3, #10
 8011702:	fb03 0202 	mla	r2, r3, r2, r0
 8011706:	3a10      	subs	r2, #16
 8011708:	e7d4      	b.n	80116b4 <__gethex+0x100>
 801170a:	4631      	mov	r1, r6
 801170c:	e7df      	b.n	80116ce <__gethex+0x11a>
 801170e:	1bf3      	subs	r3, r6, r7
 8011710:	3b01      	subs	r3, #1
 8011712:	4621      	mov	r1, r4
 8011714:	2b07      	cmp	r3, #7
 8011716:	dc0b      	bgt.n	8011730 <__gethex+0x17c>
 8011718:	ee18 0a10 	vmov	r0, s16
 801171c:	f000 fa8e 	bl	8011c3c <_Balloc>
 8011720:	4604      	mov	r4, r0
 8011722:	b940      	cbnz	r0, 8011736 <__gethex+0x182>
 8011724:	4b5d      	ldr	r3, [pc, #372]	; (801189c <__gethex+0x2e8>)
 8011726:	4602      	mov	r2, r0
 8011728:	21de      	movs	r1, #222	; 0xde
 801172a:	485d      	ldr	r0, [pc, #372]	; (80118a0 <__gethex+0x2ec>)
 801172c:	f7fe ff5c 	bl	80105e8 <__assert_func>
 8011730:	3101      	adds	r1, #1
 8011732:	105b      	asrs	r3, r3, #1
 8011734:	e7ee      	b.n	8011714 <__gethex+0x160>
 8011736:	f100 0914 	add.w	r9, r0, #20
 801173a:	f04f 0b00 	mov.w	fp, #0
 801173e:	f1ca 0301 	rsb	r3, sl, #1
 8011742:	f8cd 9008 	str.w	r9, [sp, #8]
 8011746:	f8cd b000 	str.w	fp, [sp]
 801174a:	9306      	str	r3, [sp, #24]
 801174c:	42b7      	cmp	r7, r6
 801174e:	d340      	bcc.n	80117d2 <__gethex+0x21e>
 8011750:	9802      	ldr	r0, [sp, #8]
 8011752:	9b00      	ldr	r3, [sp, #0]
 8011754:	f840 3b04 	str.w	r3, [r0], #4
 8011758:	eba0 0009 	sub.w	r0, r0, r9
 801175c:	1080      	asrs	r0, r0, #2
 801175e:	0146      	lsls	r6, r0, #5
 8011760:	6120      	str	r0, [r4, #16]
 8011762:	4618      	mov	r0, r3
 8011764:	f000 fb5c 	bl	8011e20 <__hi0bits>
 8011768:	1a30      	subs	r0, r6, r0
 801176a:	f8d8 6000 	ldr.w	r6, [r8]
 801176e:	42b0      	cmp	r0, r6
 8011770:	dd63      	ble.n	801183a <__gethex+0x286>
 8011772:	1b87      	subs	r7, r0, r6
 8011774:	4639      	mov	r1, r7
 8011776:	4620      	mov	r0, r4
 8011778:	f000 ff00 	bl	801257c <__any_on>
 801177c:	4682      	mov	sl, r0
 801177e:	b1a8      	cbz	r0, 80117ac <__gethex+0x1f8>
 8011780:	1e7b      	subs	r3, r7, #1
 8011782:	1159      	asrs	r1, r3, #5
 8011784:	f003 021f 	and.w	r2, r3, #31
 8011788:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801178c:	f04f 0a01 	mov.w	sl, #1
 8011790:	fa0a f202 	lsl.w	r2, sl, r2
 8011794:	420a      	tst	r2, r1
 8011796:	d009      	beq.n	80117ac <__gethex+0x1f8>
 8011798:	4553      	cmp	r3, sl
 801179a:	dd05      	ble.n	80117a8 <__gethex+0x1f4>
 801179c:	1eb9      	subs	r1, r7, #2
 801179e:	4620      	mov	r0, r4
 80117a0:	f000 feec 	bl	801257c <__any_on>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	d145      	bne.n	8011834 <__gethex+0x280>
 80117a8:	f04f 0a02 	mov.w	sl, #2
 80117ac:	4639      	mov	r1, r7
 80117ae:	4620      	mov	r0, r4
 80117b0:	f7ff fe98 	bl	80114e4 <rshift>
 80117b4:	443d      	add	r5, r7
 80117b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117ba:	42ab      	cmp	r3, r5
 80117bc:	da4c      	bge.n	8011858 <__gethex+0x2a4>
 80117be:	ee18 0a10 	vmov	r0, s16
 80117c2:	4621      	mov	r1, r4
 80117c4:	f000 fa7a 	bl	8011cbc <_Bfree>
 80117c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117ca:	2300      	movs	r3, #0
 80117cc:	6013      	str	r3, [r2, #0]
 80117ce:	27a3      	movs	r7, #163	; 0xa3
 80117d0:	e785      	b.n	80116de <__gethex+0x12a>
 80117d2:	1e73      	subs	r3, r6, #1
 80117d4:	9a05      	ldr	r2, [sp, #20]
 80117d6:	9303      	str	r3, [sp, #12]
 80117d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117dc:	4293      	cmp	r3, r2
 80117de:	d019      	beq.n	8011814 <__gethex+0x260>
 80117e0:	f1bb 0f20 	cmp.w	fp, #32
 80117e4:	d107      	bne.n	80117f6 <__gethex+0x242>
 80117e6:	9b02      	ldr	r3, [sp, #8]
 80117e8:	9a00      	ldr	r2, [sp, #0]
 80117ea:	f843 2b04 	str.w	r2, [r3], #4
 80117ee:	9302      	str	r3, [sp, #8]
 80117f0:	2300      	movs	r3, #0
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	469b      	mov	fp, r3
 80117f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80117fa:	f7ff fec5 	bl	8011588 <__hexdig_fun>
 80117fe:	9b00      	ldr	r3, [sp, #0]
 8011800:	f000 000f 	and.w	r0, r0, #15
 8011804:	fa00 f00b 	lsl.w	r0, r0, fp
 8011808:	4303      	orrs	r3, r0
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	f10b 0b04 	add.w	fp, fp, #4
 8011810:	9b03      	ldr	r3, [sp, #12]
 8011812:	e00d      	b.n	8011830 <__gethex+0x27c>
 8011814:	9b03      	ldr	r3, [sp, #12]
 8011816:	9a06      	ldr	r2, [sp, #24]
 8011818:	4413      	add	r3, r2
 801181a:	42bb      	cmp	r3, r7
 801181c:	d3e0      	bcc.n	80117e0 <__gethex+0x22c>
 801181e:	4618      	mov	r0, r3
 8011820:	9901      	ldr	r1, [sp, #4]
 8011822:	9307      	str	r3, [sp, #28]
 8011824:	4652      	mov	r2, sl
 8011826:	f001 f9ff 	bl	8012c28 <strncmp>
 801182a:	9b07      	ldr	r3, [sp, #28]
 801182c:	2800      	cmp	r0, #0
 801182e:	d1d7      	bne.n	80117e0 <__gethex+0x22c>
 8011830:	461e      	mov	r6, r3
 8011832:	e78b      	b.n	801174c <__gethex+0x198>
 8011834:	f04f 0a03 	mov.w	sl, #3
 8011838:	e7b8      	b.n	80117ac <__gethex+0x1f8>
 801183a:	da0a      	bge.n	8011852 <__gethex+0x29e>
 801183c:	1a37      	subs	r7, r6, r0
 801183e:	4621      	mov	r1, r4
 8011840:	ee18 0a10 	vmov	r0, s16
 8011844:	463a      	mov	r2, r7
 8011846:	f000 fc55 	bl	80120f4 <__lshift>
 801184a:	1bed      	subs	r5, r5, r7
 801184c:	4604      	mov	r4, r0
 801184e:	f100 0914 	add.w	r9, r0, #20
 8011852:	f04f 0a00 	mov.w	sl, #0
 8011856:	e7ae      	b.n	80117b6 <__gethex+0x202>
 8011858:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801185c:	42a8      	cmp	r0, r5
 801185e:	dd72      	ble.n	8011946 <__gethex+0x392>
 8011860:	1b45      	subs	r5, r0, r5
 8011862:	42ae      	cmp	r6, r5
 8011864:	dc36      	bgt.n	80118d4 <__gethex+0x320>
 8011866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801186a:	2b02      	cmp	r3, #2
 801186c:	d02a      	beq.n	80118c4 <__gethex+0x310>
 801186e:	2b03      	cmp	r3, #3
 8011870:	d02c      	beq.n	80118cc <__gethex+0x318>
 8011872:	2b01      	cmp	r3, #1
 8011874:	d11c      	bne.n	80118b0 <__gethex+0x2fc>
 8011876:	42ae      	cmp	r6, r5
 8011878:	d11a      	bne.n	80118b0 <__gethex+0x2fc>
 801187a:	2e01      	cmp	r6, #1
 801187c:	d112      	bne.n	80118a4 <__gethex+0x2f0>
 801187e:	9a04      	ldr	r2, [sp, #16]
 8011880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011884:	6013      	str	r3, [r2, #0]
 8011886:	2301      	movs	r3, #1
 8011888:	6123      	str	r3, [r4, #16]
 801188a:	f8c9 3000 	str.w	r3, [r9]
 801188e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011890:	2762      	movs	r7, #98	; 0x62
 8011892:	601c      	str	r4, [r3, #0]
 8011894:	e723      	b.n	80116de <__gethex+0x12a>
 8011896:	bf00      	nop
 8011898:	08013eb8 	.word	0x08013eb8
 801189c:	08013e41 	.word	0x08013e41
 80118a0:	08013e52 	.word	0x08013e52
 80118a4:	1e71      	subs	r1, r6, #1
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fe68 	bl	801257c <__any_on>
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d1e6      	bne.n	801187e <__gethex+0x2ca>
 80118b0:	ee18 0a10 	vmov	r0, s16
 80118b4:	4621      	mov	r1, r4
 80118b6:	f000 fa01 	bl	8011cbc <_Bfree>
 80118ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80118bc:	2300      	movs	r3, #0
 80118be:	6013      	str	r3, [r2, #0]
 80118c0:	2750      	movs	r7, #80	; 0x50
 80118c2:	e70c      	b.n	80116de <__gethex+0x12a>
 80118c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d1f2      	bne.n	80118b0 <__gethex+0x2fc>
 80118ca:	e7d8      	b.n	801187e <__gethex+0x2ca>
 80118cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1d5      	bne.n	801187e <__gethex+0x2ca>
 80118d2:	e7ed      	b.n	80118b0 <__gethex+0x2fc>
 80118d4:	1e6f      	subs	r7, r5, #1
 80118d6:	f1ba 0f00 	cmp.w	sl, #0
 80118da:	d131      	bne.n	8011940 <__gethex+0x38c>
 80118dc:	b127      	cbz	r7, 80118e8 <__gethex+0x334>
 80118de:	4639      	mov	r1, r7
 80118e0:	4620      	mov	r0, r4
 80118e2:	f000 fe4b 	bl	801257c <__any_on>
 80118e6:	4682      	mov	sl, r0
 80118e8:	117b      	asrs	r3, r7, #5
 80118ea:	2101      	movs	r1, #1
 80118ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80118f0:	f007 071f 	and.w	r7, r7, #31
 80118f4:	fa01 f707 	lsl.w	r7, r1, r7
 80118f8:	421f      	tst	r7, r3
 80118fa:	4629      	mov	r1, r5
 80118fc:	4620      	mov	r0, r4
 80118fe:	bf18      	it	ne
 8011900:	f04a 0a02 	orrne.w	sl, sl, #2
 8011904:	1b76      	subs	r6, r6, r5
 8011906:	f7ff fded 	bl	80114e4 <rshift>
 801190a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801190e:	2702      	movs	r7, #2
 8011910:	f1ba 0f00 	cmp.w	sl, #0
 8011914:	d048      	beq.n	80119a8 <__gethex+0x3f4>
 8011916:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801191a:	2b02      	cmp	r3, #2
 801191c:	d015      	beq.n	801194a <__gethex+0x396>
 801191e:	2b03      	cmp	r3, #3
 8011920:	d017      	beq.n	8011952 <__gethex+0x39e>
 8011922:	2b01      	cmp	r3, #1
 8011924:	d109      	bne.n	801193a <__gethex+0x386>
 8011926:	f01a 0f02 	tst.w	sl, #2
 801192a:	d006      	beq.n	801193a <__gethex+0x386>
 801192c:	f8d9 0000 	ldr.w	r0, [r9]
 8011930:	ea4a 0a00 	orr.w	sl, sl, r0
 8011934:	f01a 0f01 	tst.w	sl, #1
 8011938:	d10e      	bne.n	8011958 <__gethex+0x3a4>
 801193a:	f047 0710 	orr.w	r7, r7, #16
 801193e:	e033      	b.n	80119a8 <__gethex+0x3f4>
 8011940:	f04f 0a01 	mov.w	sl, #1
 8011944:	e7d0      	b.n	80118e8 <__gethex+0x334>
 8011946:	2701      	movs	r7, #1
 8011948:	e7e2      	b.n	8011910 <__gethex+0x35c>
 801194a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801194c:	f1c3 0301 	rsb	r3, r3, #1
 8011950:	9315      	str	r3, [sp, #84]	; 0x54
 8011952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011954:	2b00      	cmp	r3, #0
 8011956:	d0f0      	beq.n	801193a <__gethex+0x386>
 8011958:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801195c:	f104 0314 	add.w	r3, r4, #20
 8011960:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011964:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011968:	f04f 0c00 	mov.w	ip, #0
 801196c:	4618      	mov	r0, r3
 801196e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011972:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011976:	d01c      	beq.n	80119b2 <__gethex+0x3fe>
 8011978:	3201      	adds	r2, #1
 801197a:	6002      	str	r2, [r0, #0]
 801197c:	2f02      	cmp	r7, #2
 801197e:	f104 0314 	add.w	r3, r4, #20
 8011982:	d13f      	bne.n	8011a04 <__gethex+0x450>
 8011984:	f8d8 2000 	ldr.w	r2, [r8]
 8011988:	3a01      	subs	r2, #1
 801198a:	42b2      	cmp	r2, r6
 801198c:	d10a      	bne.n	80119a4 <__gethex+0x3f0>
 801198e:	1171      	asrs	r1, r6, #5
 8011990:	2201      	movs	r2, #1
 8011992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011996:	f006 061f 	and.w	r6, r6, #31
 801199a:	fa02 f606 	lsl.w	r6, r2, r6
 801199e:	421e      	tst	r6, r3
 80119a0:	bf18      	it	ne
 80119a2:	4617      	movne	r7, r2
 80119a4:	f047 0720 	orr.w	r7, r7, #32
 80119a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119aa:	601c      	str	r4, [r3, #0]
 80119ac:	9b04      	ldr	r3, [sp, #16]
 80119ae:	601d      	str	r5, [r3, #0]
 80119b0:	e695      	b.n	80116de <__gethex+0x12a>
 80119b2:	4299      	cmp	r1, r3
 80119b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80119b8:	d8d8      	bhi.n	801196c <__gethex+0x3b8>
 80119ba:	68a3      	ldr	r3, [r4, #8]
 80119bc:	459b      	cmp	fp, r3
 80119be:	db19      	blt.n	80119f4 <__gethex+0x440>
 80119c0:	6861      	ldr	r1, [r4, #4]
 80119c2:	ee18 0a10 	vmov	r0, s16
 80119c6:	3101      	adds	r1, #1
 80119c8:	f000 f938 	bl	8011c3c <_Balloc>
 80119cc:	4681      	mov	r9, r0
 80119ce:	b918      	cbnz	r0, 80119d8 <__gethex+0x424>
 80119d0:	4b1a      	ldr	r3, [pc, #104]	; (8011a3c <__gethex+0x488>)
 80119d2:	4602      	mov	r2, r0
 80119d4:	2184      	movs	r1, #132	; 0x84
 80119d6:	e6a8      	b.n	801172a <__gethex+0x176>
 80119d8:	6922      	ldr	r2, [r4, #16]
 80119da:	3202      	adds	r2, #2
 80119dc:	f104 010c 	add.w	r1, r4, #12
 80119e0:	0092      	lsls	r2, r2, #2
 80119e2:	300c      	adds	r0, #12
 80119e4:	f7fd f8e5 	bl	800ebb2 <memcpy>
 80119e8:	4621      	mov	r1, r4
 80119ea:	ee18 0a10 	vmov	r0, s16
 80119ee:	f000 f965 	bl	8011cbc <_Bfree>
 80119f2:	464c      	mov	r4, r9
 80119f4:	6923      	ldr	r3, [r4, #16]
 80119f6:	1c5a      	adds	r2, r3, #1
 80119f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119fc:	6122      	str	r2, [r4, #16]
 80119fe:	2201      	movs	r2, #1
 8011a00:	615a      	str	r2, [r3, #20]
 8011a02:	e7bb      	b.n	801197c <__gethex+0x3c8>
 8011a04:	6922      	ldr	r2, [r4, #16]
 8011a06:	455a      	cmp	r2, fp
 8011a08:	dd0b      	ble.n	8011a22 <__gethex+0x46e>
 8011a0a:	2101      	movs	r1, #1
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f7ff fd69 	bl	80114e4 <rshift>
 8011a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a16:	3501      	adds	r5, #1
 8011a18:	42ab      	cmp	r3, r5
 8011a1a:	f6ff aed0 	blt.w	80117be <__gethex+0x20a>
 8011a1e:	2701      	movs	r7, #1
 8011a20:	e7c0      	b.n	80119a4 <__gethex+0x3f0>
 8011a22:	f016 061f 	ands.w	r6, r6, #31
 8011a26:	d0fa      	beq.n	8011a1e <__gethex+0x46a>
 8011a28:	4453      	add	r3, sl
 8011a2a:	f1c6 0620 	rsb	r6, r6, #32
 8011a2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a32:	f000 f9f5 	bl	8011e20 <__hi0bits>
 8011a36:	42b0      	cmp	r0, r6
 8011a38:	dbe7      	blt.n	8011a0a <__gethex+0x456>
 8011a3a:	e7f0      	b.n	8011a1e <__gethex+0x46a>
 8011a3c:	08013e41 	.word	0x08013e41

08011a40 <L_shift>:
 8011a40:	f1c2 0208 	rsb	r2, r2, #8
 8011a44:	0092      	lsls	r2, r2, #2
 8011a46:	b570      	push	{r4, r5, r6, lr}
 8011a48:	f1c2 0620 	rsb	r6, r2, #32
 8011a4c:	6843      	ldr	r3, [r0, #4]
 8011a4e:	6804      	ldr	r4, [r0, #0]
 8011a50:	fa03 f506 	lsl.w	r5, r3, r6
 8011a54:	432c      	orrs	r4, r5
 8011a56:	40d3      	lsrs	r3, r2
 8011a58:	6004      	str	r4, [r0, #0]
 8011a5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a5e:	4288      	cmp	r0, r1
 8011a60:	d3f4      	bcc.n	8011a4c <L_shift+0xc>
 8011a62:	bd70      	pop	{r4, r5, r6, pc}

08011a64 <__match>:
 8011a64:	b530      	push	{r4, r5, lr}
 8011a66:	6803      	ldr	r3, [r0, #0]
 8011a68:	3301      	adds	r3, #1
 8011a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a6e:	b914      	cbnz	r4, 8011a76 <__match+0x12>
 8011a70:	6003      	str	r3, [r0, #0]
 8011a72:	2001      	movs	r0, #1
 8011a74:	bd30      	pop	{r4, r5, pc}
 8011a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a7e:	2d19      	cmp	r5, #25
 8011a80:	bf98      	it	ls
 8011a82:	3220      	addls	r2, #32
 8011a84:	42a2      	cmp	r2, r4
 8011a86:	d0f0      	beq.n	8011a6a <__match+0x6>
 8011a88:	2000      	movs	r0, #0
 8011a8a:	e7f3      	b.n	8011a74 <__match+0x10>

08011a8c <__hexnan>:
 8011a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a90:	680b      	ldr	r3, [r1, #0]
 8011a92:	115e      	asrs	r6, r3, #5
 8011a94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a98:	f013 031f 	ands.w	r3, r3, #31
 8011a9c:	b087      	sub	sp, #28
 8011a9e:	bf18      	it	ne
 8011aa0:	3604      	addne	r6, #4
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	1f37      	subs	r7, r6, #4
 8011aa6:	4690      	mov	r8, r2
 8011aa8:	6802      	ldr	r2, [r0, #0]
 8011aaa:	9301      	str	r3, [sp, #4]
 8011aac:	4682      	mov	sl, r0
 8011aae:	f846 5c04 	str.w	r5, [r6, #-4]
 8011ab2:	46b9      	mov	r9, r7
 8011ab4:	463c      	mov	r4, r7
 8011ab6:	9502      	str	r5, [sp, #8]
 8011ab8:	46ab      	mov	fp, r5
 8011aba:	7851      	ldrb	r1, [r2, #1]
 8011abc:	1c53      	adds	r3, r2, #1
 8011abe:	9303      	str	r3, [sp, #12]
 8011ac0:	b341      	cbz	r1, 8011b14 <__hexnan+0x88>
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	9205      	str	r2, [sp, #20]
 8011ac6:	9104      	str	r1, [sp, #16]
 8011ac8:	f7ff fd5e 	bl	8011588 <__hexdig_fun>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	d14f      	bne.n	8011b70 <__hexnan+0xe4>
 8011ad0:	9904      	ldr	r1, [sp, #16]
 8011ad2:	9a05      	ldr	r2, [sp, #20]
 8011ad4:	2920      	cmp	r1, #32
 8011ad6:	d818      	bhi.n	8011b0a <__hexnan+0x7e>
 8011ad8:	9b02      	ldr	r3, [sp, #8]
 8011ada:	459b      	cmp	fp, r3
 8011adc:	dd13      	ble.n	8011b06 <__hexnan+0x7a>
 8011ade:	454c      	cmp	r4, r9
 8011ae0:	d206      	bcs.n	8011af0 <__hexnan+0x64>
 8011ae2:	2d07      	cmp	r5, #7
 8011ae4:	dc04      	bgt.n	8011af0 <__hexnan+0x64>
 8011ae6:	462a      	mov	r2, r5
 8011ae8:	4649      	mov	r1, r9
 8011aea:	4620      	mov	r0, r4
 8011aec:	f7ff ffa8 	bl	8011a40 <L_shift>
 8011af0:	4544      	cmp	r4, r8
 8011af2:	d950      	bls.n	8011b96 <__hexnan+0x10a>
 8011af4:	2300      	movs	r3, #0
 8011af6:	f1a4 0904 	sub.w	r9, r4, #4
 8011afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8011afe:	f8cd b008 	str.w	fp, [sp, #8]
 8011b02:	464c      	mov	r4, r9
 8011b04:	461d      	mov	r5, r3
 8011b06:	9a03      	ldr	r2, [sp, #12]
 8011b08:	e7d7      	b.n	8011aba <__hexnan+0x2e>
 8011b0a:	2929      	cmp	r1, #41	; 0x29
 8011b0c:	d156      	bne.n	8011bbc <__hexnan+0x130>
 8011b0e:	3202      	adds	r2, #2
 8011b10:	f8ca 2000 	str.w	r2, [sl]
 8011b14:	f1bb 0f00 	cmp.w	fp, #0
 8011b18:	d050      	beq.n	8011bbc <__hexnan+0x130>
 8011b1a:	454c      	cmp	r4, r9
 8011b1c:	d206      	bcs.n	8011b2c <__hexnan+0xa0>
 8011b1e:	2d07      	cmp	r5, #7
 8011b20:	dc04      	bgt.n	8011b2c <__hexnan+0xa0>
 8011b22:	462a      	mov	r2, r5
 8011b24:	4649      	mov	r1, r9
 8011b26:	4620      	mov	r0, r4
 8011b28:	f7ff ff8a 	bl	8011a40 <L_shift>
 8011b2c:	4544      	cmp	r4, r8
 8011b2e:	d934      	bls.n	8011b9a <__hexnan+0x10e>
 8011b30:	f1a8 0204 	sub.w	r2, r8, #4
 8011b34:	4623      	mov	r3, r4
 8011b36:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b3e:	429f      	cmp	r7, r3
 8011b40:	d2f9      	bcs.n	8011b36 <__hexnan+0xaa>
 8011b42:	1b3b      	subs	r3, r7, r4
 8011b44:	f023 0303 	bic.w	r3, r3, #3
 8011b48:	3304      	adds	r3, #4
 8011b4a:	3401      	adds	r4, #1
 8011b4c:	3e03      	subs	r6, #3
 8011b4e:	42b4      	cmp	r4, r6
 8011b50:	bf88      	it	hi
 8011b52:	2304      	movhi	r3, #4
 8011b54:	4443      	add	r3, r8
 8011b56:	2200      	movs	r2, #0
 8011b58:	f843 2b04 	str.w	r2, [r3], #4
 8011b5c:	429f      	cmp	r7, r3
 8011b5e:	d2fb      	bcs.n	8011b58 <__hexnan+0xcc>
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	b91b      	cbnz	r3, 8011b6c <__hexnan+0xe0>
 8011b64:	4547      	cmp	r7, r8
 8011b66:	d127      	bne.n	8011bb8 <__hexnan+0x12c>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	603b      	str	r3, [r7, #0]
 8011b6c:	2005      	movs	r0, #5
 8011b6e:	e026      	b.n	8011bbe <__hexnan+0x132>
 8011b70:	3501      	adds	r5, #1
 8011b72:	2d08      	cmp	r5, #8
 8011b74:	f10b 0b01 	add.w	fp, fp, #1
 8011b78:	dd06      	ble.n	8011b88 <__hexnan+0xfc>
 8011b7a:	4544      	cmp	r4, r8
 8011b7c:	d9c3      	bls.n	8011b06 <__hexnan+0x7a>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b84:	2501      	movs	r5, #1
 8011b86:	3c04      	subs	r4, #4
 8011b88:	6822      	ldr	r2, [r4, #0]
 8011b8a:	f000 000f 	and.w	r0, r0, #15
 8011b8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b92:	6022      	str	r2, [r4, #0]
 8011b94:	e7b7      	b.n	8011b06 <__hexnan+0x7a>
 8011b96:	2508      	movs	r5, #8
 8011b98:	e7b5      	b.n	8011b06 <__hexnan+0x7a>
 8011b9a:	9b01      	ldr	r3, [sp, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d0df      	beq.n	8011b60 <__hexnan+0xd4>
 8011ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba4:	f1c3 0320 	rsb	r3, r3, #32
 8011ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8011bac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bb0:	401a      	ands	r2, r3
 8011bb2:	f846 2c04 	str.w	r2, [r6, #-4]
 8011bb6:	e7d3      	b.n	8011b60 <__hexnan+0xd4>
 8011bb8:	3f04      	subs	r7, #4
 8011bba:	e7d1      	b.n	8011b60 <__hexnan+0xd4>
 8011bbc:	2004      	movs	r0, #4
 8011bbe:	b007      	add	sp, #28
 8011bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bc4 <_localeconv_r>:
 8011bc4:	4800      	ldr	r0, [pc, #0]	; (8011bc8 <_localeconv_r+0x4>)
 8011bc6:	4770      	bx	lr
 8011bc8:	20000170 	.word	0x20000170

08011bcc <_lseek_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4d07      	ldr	r5, [pc, #28]	; (8011bec <_lseek_r+0x20>)
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	4608      	mov	r0, r1
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	602a      	str	r2, [r5, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	f7f3 f85e 	bl	8004c9c <_lseek>
 8011be0:	1c43      	adds	r3, r0, #1
 8011be2:	d102      	bne.n	8011bea <_lseek_r+0x1e>
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	b103      	cbz	r3, 8011bea <_lseek_r+0x1e>
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	bd38      	pop	{r3, r4, r5, pc}
 8011bec:	200051f4 	.word	0x200051f4

08011bf0 <malloc>:
 8011bf0:	4b02      	ldr	r3, [pc, #8]	; (8011bfc <malloc+0xc>)
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	6818      	ldr	r0, [r3, #0]
 8011bf6:	f7fd b813 	b.w	800ec20 <_malloc_r>
 8011bfa:	bf00      	nop
 8011bfc:	20000018 	.word	0x20000018

08011c00 <__ascii_mbtowc>:
 8011c00:	b082      	sub	sp, #8
 8011c02:	b901      	cbnz	r1, 8011c06 <__ascii_mbtowc+0x6>
 8011c04:	a901      	add	r1, sp, #4
 8011c06:	b142      	cbz	r2, 8011c1a <__ascii_mbtowc+0x1a>
 8011c08:	b14b      	cbz	r3, 8011c1e <__ascii_mbtowc+0x1e>
 8011c0a:	7813      	ldrb	r3, [r2, #0]
 8011c0c:	600b      	str	r3, [r1, #0]
 8011c0e:	7812      	ldrb	r2, [r2, #0]
 8011c10:	1e10      	subs	r0, r2, #0
 8011c12:	bf18      	it	ne
 8011c14:	2001      	movne	r0, #1
 8011c16:	b002      	add	sp, #8
 8011c18:	4770      	bx	lr
 8011c1a:	4610      	mov	r0, r2
 8011c1c:	e7fb      	b.n	8011c16 <__ascii_mbtowc+0x16>
 8011c1e:	f06f 0001 	mvn.w	r0, #1
 8011c22:	e7f8      	b.n	8011c16 <__ascii_mbtowc+0x16>

08011c24 <__malloc_lock>:
 8011c24:	4801      	ldr	r0, [pc, #4]	; (8011c2c <__malloc_lock+0x8>)
 8011c26:	f7fc bfc2 	b.w	800ebae <__retarget_lock_acquire_recursive>
 8011c2a:	bf00      	nop
 8011c2c:	200051e8 	.word	0x200051e8

08011c30 <__malloc_unlock>:
 8011c30:	4801      	ldr	r0, [pc, #4]	; (8011c38 <__malloc_unlock+0x8>)
 8011c32:	f7fc bfbd 	b.w	800ebb0 <__retarget_lock_release_recursive>
 8011c36:	bf00      	nop
 8011c38:	200051e8 	.word	0x200051e8

08011c3c <_Balloc>:
 8011c3c:	b570      	push	{r4, r5, r6, lr}
 8011c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c40:	4604      	mov	r4, r0
 8011c42:	460d      	mov	r5, r1
 8011c44:	b976      	cbnz	r6, 8011c64 <_Balloc+0x28>
 8011c46:	2010      	movs	r0, #16
 8011c48:	f7ff ffd2 	bl	8011bf0 <malloc>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	6260      	str	r0, [r4, #36]	; 0x24
 8011c50:	b920      	cbnz	r0, 8011c5c <_Balloc+0x20>
 8011c52:	4b18      	ldr	r3, [pc, #96]	; (8011cb4 <_Balloc+0x78>)
 8011c54:	4818      	ldr	r0, [pc, #96]	; (8011cb8 <_Balloc+0x7c>)
 8011c56:	2166      	movs	r1, #102	; 0x66
 8011c58:	f7fe fcc6 	bl	80105e8 <__assert_func>
 8011c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c60:	6006      	str	r6, [r0, #0]
 8011c62:	60c6      	str	r6, [r0, #12]
 8011c64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c66:	68f3      	ldr	r3, [r6, #12]
 8011c68:	b183      	cbz	r3, 8011c8c <_Balloc+0x50>
 8011c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c72:	b9b8      	cbnz	r0, 8011ca4 <_Balloc+0x68>
 8011c74:	2101      	movs	r1, #1
 8011c76:	fa01 f605 	lsl.w	r6, r1, r5
 8011c7a:	1d72      	adds	r2, r6, #5
 8011c7c:	0092      	lsls	r2, r2, #2
 8011c7e:	4620      	mov	r0, r4
 8011c80:	f000 fc9d 	bl	80125be <_calloc_r>
 8011c84:	b160      	cbz	r0, 8011ca0 <_Balloc+0x64>
 8011c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c8a:	e00e      	b.n	8011caa <_Balloc+0x6e>
 8011c8c:	2221      	movs	r2, #33	; 0x21
 8011c8e:	2104      	movs	r1, #4
 8011c90:	4620      	mov	r0, r4
 8011c92:	f000 fc94 	bl	80125be <_calloc_r>
 8011c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c98:	60f0      	str	r0, [r6, #12]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d1e4      	bne.n	8011c6a <_Balloc+0x2e>
 8011ca0:	2000      	movs	r0, #0
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	6802      	ldr	r2, [r0, #0]
 8011ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011caa:	2300      	movs	r3, #0
 8011cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011cb0:	e7f7      	b.n	8011ca2 <_Balloc+0x66>
 8011cb2:	bf00      	nop
 8011cb4:	08013c28 	.word	0x08013c28
 8011cb8:	08013ecc 	.word	0x08013ecc

08011cbc <_Bfree>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011cc0:	4605      	mov	r5, r0
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	b976      	cbnz	r6, 8011ce4 <_Bfree+0x28>
 8011cc6:	2010      	movs	r0, #16
 8011cc8:	f7ff ff92 	bl	8011bf0 <malloc>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	6268      	str	r0, [r5, #36]	; 0x24
 8011cd0:	b920      	cbnz	r0, 8011cdc <_Bfree+0x20>
 8011cd2:	4b09      	ldr	r3, [pc, #36]	; (8011cf8 <_Bfree+0x3c>)
 8011cd4:	4809      	ldr	r0, [pc, #36]	; (8011cfc <_Bfree+0x40>)
 8011cd6:	218a      	movs	r1, #138	; 0x8a
 8011cd8:	f7fe fc86 	bl	80105e8 <__assert_func>
 8011cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ce0:	6006      	str	r6, [r0, #0]
 8011ce2:	60c6      	str	r6, [r0, #12]
 8011ce4:	b13c      	cbz	r4, 8011cf6 <_Bfree+0x3a>
 8011ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ce8:	6862      	ldr	r2, [r4, #4]
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011cf0:	6021      	str	r1, [r4, #0]
 8011cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
 8011cf8:	08013c28 	.word	0x08013c28
 8011cfc:	08013ecc 	.word	0x08013ecc

08011d00 <__multadd>:
 8011d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d04:	690d      	ldr	r5, [r1, #16]
 8011d06:	4607      	mov	r7, r0
 8011d08:	460c      	mov	r4, r1
 8011d0a:	461e      	mov	r6, r3
 8011d0c:	f101 0c14 	add.w	ip, r1, #20
 8011d10:	2000      	movs	r0, #0
 8011d12:	f8dc 3000 	ldr.w	r3, [ip]
 8011d16:	b299      	uxth	r1, r3
 8011d18:	fb02 6101 	mla	r1, r2, r1, r6
 8011d1c:	0c1e      	lsrs	r6, r3, #16
 8011d1e:	0c0b      	lsrs	r3, r1, #16
 8011d20:	fb02 3306 	mla	r3, r2, r6, r3
 8011d24:	b289      	uxth	r1, r1
 8011d26:	3001      	adds	r0, #1
 8011d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d2c:	4285      	cmp	r5, r0
 8011d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8011d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d36:	dcec      	bgt.n	8011d12 <__multadd+0x12>
 8011d38:	b30e      	cbz	r6, 8011d7e <__multadd+0x7e>
 8011d3a:	68a3      	ldr	r3, [r4, #8]
 8011d3c:	42ab      	cmp	r3, r5
 8011d3e:	dc19      	bgt.n	8011d74 <__multadd+0x74>
 8011d40:	6861      	ldr	r1, [r4, #4]
 8011d42:	4638      	mov	r0, r7
 8011d44:	3101      	adds	r1, #1
 8011d46:	f7ff ff79 	bl	8011c3c <_Balloc>
 8011d4a:	4680      	mov	r8, r0
 8011d4c:	b928      	cbnz	r0, 8011d5a <__multadd+0x5a>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	4b0c      	ldr	r3, [pc, #48]	; (8011d84 <__multadd+0x84>)
 8011d52:	480d      	ldr	r0, [pc, #52]	; (8011d88 <__multadd+0x88>)
 8011d54:	21b5      	movs	r1, #181	; 0xb5
 8011d56:	f7fe fc47 	bl	80105e8 <__assert_func>
 8011d5a:	6922      	ldr	r2, [r4, #16]
 8011d5c:	3202      	adds	r2, #2
 8011d5e:	f104 010c 	add.w	r1, r4, #12
 8011d62:	0092      	lsls	r2, r2, #2
 8011d64:	300c      	adds	r0, #12
 8011d66:	f7fc ff24 	bl	800ebb2 <memcpy>
 8011d6a:	4621      	mov	r1, r4
 8011d6c:	4638      	mov	r0, r7
 8011d6e:	f7ff ffa5 	bl	8011cbc <_Bfree>
 8011d72:	4644      	mov	r4, r8
 8011d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d78:	3501      	adds	r5, #1
 8011d7a:	615e      	str	r6, [r3, #20]
 8011d7c:	6125      	str	r5, [r4, #16]
 8011d7e:	4620      	mov	r0, r4
 8011d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d84:	08013e41 	.word	0x08013e41
 8011d88:	08013ecc 	.word	0x08013ecc

08011d8c <__s2b>:
 8011d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d90:	460c      	mov	r4, r1
 8011d92:	4615      	mov	r5, r2
 8011d94:	461f      	mov	r7, r3
 8011d96:	2209      	movs	r2, #9
 8011d98:	3308      	adds	r3, #8
 8011d9a:	4606      	mov	r6, r0
 8011d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011da0:	2100      	movs	r1, #0
 8011da2:	2201      	movs	r2, #1
 8011da4:	429a      	cmp	r2, r3
 8011da6:	db09      	blt.n	8011dbc <__s2b+0x30>
 8011da8:	4630      	mov	r0, r6
 8011daa:	f7ff ff47 	bl	8011c3c <_Balloc>
 8011dae:	b940      	cbnz	r0, 8011dc2 <__s2b+0x36>
 8011db0:	4602      	mov	r2, r0
 8011db2:	4b19      	ldr	r3, [pc, #100]	; (8011e18 <__s2b+0x8c>)
 8011db4:	4819      	ldr	r0, [pc, #100]	; (8011e1c <__s2b+0x90>)
 8011db6:	21ce      	movs	r1, #206	; 0xce
 8011db8:	f7fe fc16 	bl	80105e8 <__assert_func>
 8011dbc:	0052      	lsls	r2, r2, #1
 8011dbe:	3101      	adds	r1, #1
 8011dc0:	e7f0      	b.n	8011da4 <__s2b+0x18>
 8011dc2:	9b08      	ldr	r3, [sp, #32]
 8011dc4:	6143      	str	r3, [r0, #20]
 8011dc6:	2d09      	cmp	r5, #9
 8011dc8:	f04f 0301 	mov.w	r3, #1
 8011dcc:	6103      	str	r3, [r0, #16]
 8011dce:	dd16      	ble.n	8011dfe <__s2b+0x72>
 8011dd0:	f104 0909 	add.w	r9, r4, #9
 8011dd4:	46c8      	mov	r8, r9
 8011dd6:	442c      	add	r4, r5
 8011dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011ddc:	4601      	mov	r1, r0
 8011dde:	3b30      	subs	r3, #48	; 0x30
 8011de0:	220a      	movs	r2, #10
 8011de2:	4630      	mov	r0, r6
 8011de4:	f7ff ff8c 	bl	8011d00 <__multadd>
 8011de8:	45a0      	cmp	r8, r4
 8011dea:	d1f5      	bne.n	8011dd8 <__s2b+0x4c>
 8011dec:	f1a5 0408 	sub.w	r4, r5, #8
 8011df0:	444c      	add	r4, r9
 8011df2:	1b2d      	subs	r5, r5, r4
 8011df4:	1963      	adds	r3, r4, r5
 8011df6:	42bb      	cmp	r3, r7
 8011df8:	db04      	blt.n	8011e04 <__s2b+0x78>
 8011dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dfe:	340a      	adds	r4, #10
 8011e00:	2509      	movs	r5, #9
 8011e02:	e7f6      	b.n	8011df2 <__s2b+0x66>
 8011e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e08:	4601      	mov	r1, r0
 8011e0a:	3b30      	subs	r3, #48	; 0x30
 8011e0c:	220a      	movs	r2, #10
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff ff76 	bl	8011d00 <__multadd>
 8011e14:	e7ee      	b.n	8011df4 <__s2b+0x68>
 8011e16:	bf00      	nop
 8011e18:	08013e41 	.word	0x08013e41
 8011e1c:	08013ecc 	.word	0x08013ecc

08011e20 <__hi0bits>:
 8011e20:	0c03      	lsrs	r3, r0, #16
 8011e22:	041b      	lsls	r3, r3, #16
 8011e24:	b9d3      	cbnz	r3, 8011e5c <__hi0bits+0x3c>
 8011e26:	0400      	lsls	r0, r0, #16
 8011e28:	2310      	movs	r3, #16
 8011e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011e2e:	bf04      	itt	eq
 8011e30:	0200      	lsleq	r0, r0, #8
 8011e32:	3308      	addeq	r3, #8
 8011e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011e38:	bf04      	itt	eq
 8011e3a:	0100      	lsleq	r0, r0, #4
 8011e3c:	3304      	addeq	r3, #4
 8011e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e42:	bf04      	itt	eq
 8011e44:	0080      	lsleq	r0, r0, #2
 8011e46:	3302      	addeq	r3, #2
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	db05      	blt.n	8011e58 <__hi0bits+0x38>
 8011e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e50:	f103 0301 	add.w	r3, r3, #1
 8011e54:	bf08      	it	eq
 8011e56:	2320      	moveq	r3, #32
 8011e58:	4618      	mov	r0, r3
 8011e5a:	4770      	bx	lr
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	e7e4      	b.n	8011e2a <__hi0bits+0xa>

08011e60 <__lo0bits>:
 8011e60:	6803      	ldr	r3, [r0, #0]
 8011e62:	f013 0207 	ands.w	r2, r3, #7
 8011e66:	4601      	mov	r1, r0
 8011e68:	d00b      	beq.n	8011e82 <__lo0bits+0x22>
 8011e6a:	07da      	lsls	r2, r3, #31
 8011e6c:	d423      	bmi.n	8011eb6 <__lo0bits+0x56>
 8011e6e:	0798      	lsls	r0, r3, #30
 8011e70:	bf49      	itett	mi
 8011e72:	085b      	lsrmi	r3, r3, #1
 8011e74:	089b      	lsrpl	r3, r3, #2
 8011e76:	2001      	movmi	r0, #1
 8011e78:	600b      	strmi	r3, [r1, #0]
 8011e7a:	bf5c      	itt	pl
 8011e7c:	600b      	strpl	r3, [r1, #0]
 8011e7e:	2002      	movpl	r0, #2
 8011e80:	4770      	bx	lr
 8011e82:	b298      	uxth	r0, r3
 8011e84:	b9a8      	cbnz	r0, 8011eb2 <__lo0bits+0x52>
 8011e86:	0c1b      	lsrs	r3, r3, #16
 8011e88:	2010      	movs	r0, #16
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	b90a      	cbnz	r2, 8011e92 <__lo0bits+0x32>
 8011e8e:	3008      	adds	r0, #8
 8011e90:	0a1b      	lsrs	r3, r3, #8
 8011e92:	071a      	lsls	r2, r3, #28
 8011e94:	bf04      	itt	eq
 8011e96:	091b      	lsreq	r3, r3, #4
 8011e98:	3004      	addeq	r0, #4
 8011e9a:	079a      	lsls	r2, r3, #30
 8011e9c:	bf04      	itt	eq
 8011e9e:	089b      	lsreq	r3, r3, #2
 8011ea0:	3002      	addeq	r0, #2
 8011ea2:	07da      	lsls	r2, r3, #31
 8011ea4:	d403      	bmi.n	8011eae <__lo0bits+0x4e>
 8011ea6:	085b      	lsrs	r3, r3, #1
 8011ea8:	f100 0001 	add.w	r0, r0, #1
 8011eac:	d005      	beq.n	8011eba <__lo0bits+0x5a>
 8011eae:	600b      	str	r3, [r1, #0]
 8011eb0:	4770      	bx	lr
 8011eb2:	4610      	mov	r0, r2
 8011eb4:	e7e9      	b.n	8011e8a <__lo0bits+0x2a>
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	4770      	bx	lr
 8011eba:	2020      	movs	r0, #32
 8011ebc:	4770      	bx	lr
	...

08011ec0 <__i2b>:
 8011ec0:	b510      	push	{r4, lr}
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	f7ff feb9 	bl	8011c3c <_Balloc>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	b928      	cbnz	r0, 8011eda <__i2b+0x1a>
 8011ece:	4b05      	ldr	r3, [pc, #20]	; (8011ee4 <__i2b+0x24>)
 8011ed0:	4805      	ldr	r0, [pc, #20]	; (8011ee8 <__i2b+0x28>)
 8011ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011ed6:	f7fe fb87 	bl	80105e8 <__assert_func>
 8011eda:	2301      	movs	r3, #1
 8011edc:	6144      	str	r4, [r0, #20]
 8011ede:	6103      	str	r3, [r0, #16]
 8011ee0:	bd10      	pop	{r4, pc}
 8011ee2:	bf00      	nop
 8011ee4:	08013e41 	.word	0x08013e41
 8011ee8:	08013ecc 	.word	0x08013ecc

08011eec <__multiply>:
 8011eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef0:	4691      	mov	r9, r2
 8011ef2:	690a      	ldr	r2, [r1, #16]
 8011ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	bfb8      	it	lt
 8011efc:	460b      	movlt	r3, r1
 8011efe:	460c      	mov	r4, r1
 8011f00:	bfbc      	itt	lt
 8011f02:	464c      	movlt	r4, r9
 8011f04:	4699      	movlt	r9, r3
 8011f06:	6927      	ldr	r7, [r4, #16]
 8011f08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f0c:	68a3      	ldr	r3, [r4, #8]
 8011f0e:	6861      	ldr	r1, [r4, #4]
 8011f10:	eb07 060a 	add.w	r6, r7, sl
 8011f14:	42b3      	cmp	r3, r6
 8011f16:	b085      	sub	sp, #20
 8011f18:	bfb8      	it	lt
 8011f1a:	3101      	addlt	r1, #1
 8011f1c:	f7ff fe8e 	bl	8011c3c <_Balloc>
 8011f20:	b930      	cbnz	r0, 8011f30 <__multiply+0x44>
 8011f22:	4602      	mov	r2, r0
 8011f24:	4b44      	ldr	r3, [pc, #272]	; (8012038 <__multiply+0x14c>)
 8011f26:	4845      	ldr	r0, [pc, #276]	; (801203c <__multiply+0x150>)
 8011f28:	f240 115d 	movw	r1, #349	; 0x15d
 8011f2c:	f7fe fb5c 	bl	80105e8 <__assert_func>
 8011f30:	f100 0514 	add.w	r5, r0, #20
 8011f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f38:	462b      	mov	r3, r5
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	4543      	cmp	r3, r8
 8011f3e:	d321      	bcc.n	8011f84 <__multiply+0x98>
 8011f40:	f104 0314 	add.w	r3, r4, #20
 8011f44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f48:	f109 0314 	add.w	r3, r9, #20
 8011f4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f50:	9202      	str	r2, [sp, #8]
 8011f52:	1b3a      	subs	r2, r7, r4
 8011f54:	3a15      	subs	r2, #21
 8011f56:	f022 0203 	bic.w	r2, r2, #3
 8011f5a:	3204      	adds	r2, #4
 8011f5c:	f104 0115 	add.w	r1, r4, #21
 8011f60:	428f      	cmp	r7, r1
 8011f62:	bf38      	it	cc
 8011f64:	2204      	movcc	r2, #4
 8011f66:	9201      	str	r2, [sp, #4]
 8011f68:	9a02      	ldr	r2, [sp, #8]
 8011f6a:	9303      	str	r3, [sp, #12]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d80c      	bhi.n	8011f8a <__multiply+0x9e>
 8011f70:	2e00      	cmp	r6, #0
 8011f72:	dd03      	ble.n	8011f7c <__multiply+0x90>
 8011f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d05a      	beq.n	8012032 <__multiply+0x146>
 8011f7c:	6106      	str	r6, [r0, #16]
 8011f7e:	b005      	add	sp, #20
 8011f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f84:	f843 2b04 	str.w	r2, [r3], #4
 8011f88:	e7d8      	b.n	8011f3c <__multiply+0x50>
 8011f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f8e:	f1ba 0f00 	cmp.w	sl, #0
 8011f92:	d024      	beq.n	8011fde <__multiply+0xf2>
 8011f94:	f104 0e14 	add.w	lr, r4, #20
 8011f98:	46a9      	mov	r9, r5
 8011f9a:	f04f 0c00 	mov.w	ip, #0
 8011f9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011fa2:	f8d9 1000 	ldr.w	r1, [r9]
 8011fa6:	fa1f fb82 	uxth.w	fp, r2
 8011faa:	b289      	uxth	r1, r1
 8011fac:	fb0a 110b 	mla	r1, sl, fp, r1
 8011fb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8011fb8:	4461      	add	r1, ip
 8011fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011fbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8011fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011fc6:	b289      	uxth	r1, r1
 8011fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011fcc:	4577      	cmp	r7, lr
 8011fce:	f849 1b04 	str.w	r1, [r9], #4
 8011fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011fd6:	d8e2      	bhi.n	8011f9e <__multiply+0xb2>
 8011fd8:	9a01      	ldr	r2, [sp, #4]
 8011fda:	f845 c002 	str.w	ip, [r5, r2]
 8011fde:	9a03      	ldr	r2, [sp, #12]
 8011fe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011fe4:	3304      	adds	r3, #4
 8011fe6:	f1b9 0f00 	cmp.w	r9, #0
 8011fea:	d020      	beq.n	801202e <__multiply+0x142>
 8011fec:	6829      	ldr	r1, [r5, #0]
 8011fee:	f104 0c14 	add.w	ip, r4, #20
 8011ff2:	46ae      	mov	lr, r5
 8011ff4:	f04f 0a00 	mov.w	sl, #0
 8011ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8011ffc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012000:	fb09 220b 	mla	r2, r9, fp, r2
 8012004:	4492      	add	sl, r2
 8012006:	b289      	uxth	r1, r1
 8012008:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801200c:	f84e 1b04 	str.w	r1, [lr], #4
 8012010:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012014:	f8be 1000 	ldrh.w	r1, [lr]
 8012018:	0c12      	lsrs	r2, r2, #16
 801201a:	fb09 1102 	mla	r1, r9, r2, r1
 801201e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012022:	4567      	cmp	r7, ip
 8012024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012028:	d8e6      	bhi.n	8011ff8 <__multiply+0x10c>
 801202a:	9a01      	ldr	r2, [sp, #4]
 801202c:	50a9      	str	r1, [r5, r2]
 801202e:	3504      	adds	r5, #4
 8012030:	e79a      	b.n	8011f68 <__multiply+0x7c>
 8012032:	3e01      	subs	r6, #1
 8012034:	e79c      	b.n	8011f70 <__multiply+0x84>
 8012036:	bf00      	nop
 8012038:	08013e41 	.word	0x08013e41
 801203c:	08013ecc 	.word	0x08013ecc

08012040 <__pow5mult>:
 8012040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012044:	4615      	mov	r5, r2
 8012046:	f012 0203 	ands.w	r2, r2, #3
 801204a:	4606      	mov	r6, r0
 801204c:	460f      	mov	r7, r1
 801204e:	d007      	beq.n	8012060 <__pow5mult+0x20>
 8012050:	4c25      	ldr	r4, [pc, #148]	; (80120e8 <__pow5mult+0xa8>)
 8012052:	3a01      	subs	r2, #1
 8012054:	2300      	movs	r3, #0
 8012056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801205a:	f7ff fe51 	bl	8011d00 <__multadd>
 801205e:	4607      	mov	r7, r0
 8012060:	10ad      	asrs	r5, r5, #2
 8012062:	d03d      	beq.n	80120e0 <__pow5mult+0xa0>
 8012064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012066:	b97c      	cbnz	r4, 8012088 <__pow5mult+0x48>
 8012068:	2010      	movs	r0, #16
 801206a:	f7ff fdc1 	bl	8011bf0 <malloc>
 801206e:	4602      	mov	r2, r0
 8012070:	6270      	str	r0, [r6, #36]	; 0x24
 8012072:	b928      	cbnz	r0, 8012080 <__pow5mult+0x40>
 8012074:	4b1d      	ldr	r3, [pc, #116]	; (80120ec <__pow5mult+0xac>)
 8012076:	481e      	ldr	r0, [pc, #120]	; (80120f0 <__pow5mult+0xb0>)
 8012078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801207c:	f7fe fab4 	bl	80105e8 <__assert_func>
 8012080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012084:	6004      	str	r4, [r0, #0]
 8012086:	60c4      	str	r4, [r0, #12]
 8012088:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801208c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012090:	b94c      	cbnz	r4, 80120a6 <__pow5mult+0x66>
 8012092:	f240 2171 	movw	r1, #625	; 0x271
 8012096:	4630      	mov	r0, r6
 8012098:	f7ff ff12 	bl	8011ec0 <__i2b>
 801209c:	2300      	movs	r3, #0
 801209e:	f8c8 0008 	str.w	r0, [r8, #8]
 80120a2:	4604      	mov	r4, r0
 80120a4:	6003      	str	r3, [r0, #0]
 80120a6:	f04f 0900 	mov.w	r9, #0
 80120aa:	07eb      	lsls	r3, r5, #31
 80120ac:	d50a      	bpl.n	80120c4 <__pow5mult+0x84>
 80120ae:	4639      	mov	r1, r7
 80120b0:	4622      	mov	r2, r4
 80120b2:	4630      	mov	r0, r6
 80120b4:	f7ff ff1a 	bl	8011eec <__multiply>
 80120b8:	4639      	mov	r1, r7
 80120ba:	4680      	mov	r8, r0
 80120bc:	4630      	mov	r0, r6
 80120be:	f7ff fdfd 	bl	8011cbc <_Bfree>
 80120c2:	4647      	mov	r7, r8
 80120c4:	106d      	asrs	r5, r5, #1
 80120c6:	d00b      	beq.n	80120e0 <__pow5mult+0xa0>
 80120c8:	6820      	ldr	r0, [r4, #0]
 80120ca:	b938      	cbnz	r0, 80120dc <__pow5mult+0x9c>
 80120cc:	4622      	mov	r2, r4
 80120ce:	4621      	mov	r1, r4
 80120d0:	4630      	mov	r0, r6
 80120d2:	f7ff ff0b 	bl	8011eec <__multiply>
 80120d6:	6020      	str	r0, [r4, #0]
 80120d8:	f8c0 9000 	str.w	r9, [r0]
 80120dc:	4604      	mov	r4, r0
 80120de:	e7e4      	b.n	80120aa <__pow5mult+0x6a>
 80120e0:	4638      	mov	r0, r7
 80120e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120e6:	bf00      	nop
 80120e8:	08014018 	.word	0x08014018
 80120ec:	08013c28 	.word	0x08013c28
 80120f0:	08013ecc 	.word	0x08013ecc

080120f4 <__lshift>:
 80120f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120f8:	460c      	mov	r4, r1
 80120fa:	6849      	ldr	r1, [r1, #4]
 80120fc:	6923      	ldr	r3, [r4, #16]
 80120fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	4607      	mov	r7, r0
 8012106:	4691      	mov	r9, r2
 8012108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801210c:	f108 0601 	add.w	r6, r8, #1
 8012110:	42b3      	cmp	r3, r6
 8012112:	db0b      	blt.n	801212c <__lshift+0x38>
 8012114:	4638      	mov	r0, r7
 8012116:	f7ff fd91 	bl	8011c3c <_Balloc>
 801211a:	4605      	mov	r5, r0
 801211c:	b948      	cbnz	r0, 8012132 <__lshift+0x3e>
 801211e:	4602      	mov	r2, r0
 8012120:	4b2a      	ldr	r3, [pc, #168]	; (80121cc <__lshift+0xd8>)
 8012122:	482b      	ldr	r0, [pc, #172]	; (80121d0 <__lshift+0xdc>)
 8012124:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012128:	f7fe fa5e 	bl	80105e8 <__assert_func>
 801212c:	3101      	adds	r1, #1
 801212e:	005b      	lsls	r3, r3, #1
 8012130:	e7ee      	b.n	8012110 <__lshift+0x1c>
 8012132:	2300      	movs	r3, #0
 8012134:	f100 0114 	add.w	r1, r0, #20
 8012138:	f100 0210 	add.w	r2, r0, #16
 801213c:	4618      	mov	r0, r3
 801213e:	4553      	cmp	r3, sl
 8012140:	db37      	blt.n	80121b2 <__lshift+0xbe>
 8012142:	6920      	ldr	r0, [r4, #16]
 8012144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012148:	f104 0314 	add.w	r3, r4, #20
 801214c:	f019 091f 	ands.w	r9, r9, #31
 8012150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012158:	d02f      	beq.n	80121ba <__lshift+0xc6>
 801215a:	f1c9 0e20 	rsb	lr, r9, #32
 801215e:	468a      	mov	sl, r1
 8012160:	f04f 0c00 	mov.w	ip, #0
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	fa02 f209 	lsl.w	r2, r2, r9
 801216a:	ea42 020c 	orr.w	r2, r2, ip
 801216e:	f84a 2b04 	str.w	r2, [sl], #4
 8012172:	f853 2b04 	ldr.w	r2, [r3], #4
 8012176:	4298      	cmp	r0, r3
 8012178:	fa22 fc0e 	lsr.w	ip, r2, lr
 801217c:	d8f2      	bhi.n	8012164 <__lshift+0x70>
 801217e:	1b03      	subs	r3, r0, r4
 8012180:	3b15      	subs	r3, #21
 8012182:	f023 0303 	bic.w	r3, r3, #3
 8012186:	3304      	adds	r3, #4
 8012188:	f104 0215 	add.w	r2, r4, #21
 801218c:	4290      	cmp	r0, r2
 801218e:	bf38      	it	cc
 8012190:	2304      	movcc	r3, #4
 8012192:	f841 c003 	str.w	ip, [r1, r3]
 8012196:	f1bc 0f00 	cmp.w	ip, #0
 801219a:	d001      	beq.n	80121a0 <__lshift+0xac>
 801219c:	f108 0602 	add.w	r6, r8, #2
 80121a0:	3e01      	subs	r6, #1
 80121a2:	4638      	mov	r0, r7
 80121a4:	612e      	str	r6, [r5, #16]
 80121a6:	4621      	mov	r1, r4
 80121a8:	f7ff fd88 	bl	8011cbc <_Bfree>
 80121ac:	4628      	mov	r0, r5
 80121ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80121b6:	3301      	adds	r3, #1
 80121b8:	e7c1      	b.n	801213e <__lshift+0x4a>
 80121ba:	3904      	subs	r1, #4
 80121bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80121c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80121c4:	4298      	cmp	r0, r3
 80121c6:	d8f9      	bhi.n	80121bc <__lshift+0xc8>
 80121c8:	e7ea      	b.n	80121a0 <__lshift+0xac>
 80121ca:	bf00      	nop
 80121cc:	08013e41 	.word	0x08013e41
 80121d0:	08013ecc 	.word	0x08013ecc

080121d4 <__mcmp>:
 80121d4:	b530      	push	{r4, r5, lr}
 80121d6:	6902      	ldr	r2, [r0, #16]
 80121d8:	690c      	ldr	r4, [r1, #16]
 80121da:	1b12      	subs	r2, r2, r4
 80121dc:	d10e      	bne.n	80121fc <__mcmp+0x28>
 80121de:	f100 0314 	add.w	r3, r0, #20
 80121e2:	3114      	adds	r1, #20
 80121e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80121e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80121ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80121f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80121f4:	42a5      	cmp	r5, r4
 80121f6:	d003      	beq.n	8012200 <__mcmp+0x2c>
 80121f8:	d305      	bcc.n	8012206 <__mcmp+0x32>
 80121fa:	2201      	movs	r2, #1
 80121fc:	4610      	mov	r0, r2
 80121fe:	bd30      	pop	{r4, r5, pc}
 8012200:	4283      	cmp	r3, r0
 8012202:	d3f3      	bcc.n	80121ec <__mcmp+0x18>
 8012204:	e7fa      	b.n	80121fc <__mcmp+0x28>
 8012206:	f04f 32ff 	mov.w	r2, #4294967295
 801220a:	e7f7      	b.n	80121fc <__mcmp+0x28>

0801220c <__mdiff>:
 801220c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012210:	460c      	mov	r4, r1
 8012212:	4606      	mov	r6, r0
 8012214:	4611      	mov	r1, r2
 8012216:	4620      	mov	r0, r4
 8012218:	4690      	mov	r8, r2
 801221a:	f7ff ffdb 	bl	80121d4 <__mcmp>
 801221e:	1e05      	subs	r5, r0, #0
 8012220:	d110      	bne.n	8012244 <__mdiff+0x38>
 8012222:	4629      	mov	r1, r5
 8012224:	4630      	mov	r0, r6
 8012226:	f7ff fd09 	bl	8011c3c <_Balloc>
 801222a:	b930      	cbnz	r0, 801223a <__mdiff+0x2e>
 801222c:	4b3a      	ldr	r3, [pc, #232]	; (8012318 <__mdiff+0x10c>)
 801222e:	4602      	mov	r2, r0
 8012230:	f240 2132 	movw	r1, #562	; 0x232
 8012234:	4839      	ldr	r0, [pc, #228]	; (801231c <__mdiff+0x110>)
 8012236:	f7fe f9d7 	bl	80105e8 <__assert_func>
 801223a:	2301      	movs	r3, #1
 801223c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012244:	bfa4      	itt	ge
 8012246:	4643      	movge	r3, r8
 8012248:	46a0      	movge	r8, r4
 801224a:	4630      	mov	r0, r6
 801224c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012250:	bfa6      	itte	ge
 8012252:	461c      	movge	r4, r3
 8012254:	2500      	movge	r5, #0
 8012256:	2501      	movlt	r5, #1
 8012258:	f7ff fcf0 	bl	8011c3c <_Balloc>
 801225c:	b920      	cbnz	r0, 8012268 <__mdiff+0x5c>
 801225e:	4b2e      	ldr	r3, [pc, #184]	; (8012318 <__mdiff+0x10c>)
 8012260:	4602      	mov	r2, r0
 8012262:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012266:	e7e5      	b.n	8012234 <__mdiff+0x28>
 8012268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801226c:	6926      	ldr	r6, [r4, #16]
 801226e:	60c5      	str	r5, [r0, #12]
 8012270:	f104 0914 	add.w	r9, r4, #20
 8012274:	f108 0514 	add.w	r5, r8, #20
 8012278:	f100 0e14 	add.w	lr, r0, #20
 801227c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012284:	f108 0210 	add.w	r2, r8, #16
 8012288:	46f2      	mov	sl, lr
 801228a:	2100      	movs	r1, #0
 801228c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012294:	fa1f f883 	uxth.w	r8, r3
 8012298:	fa11 f18b 	uxtah	r1, r1, fp
 801229c:	0c1b      	lsrs	r3, r3, #16
 801229e:	eba1 0808 	sub.w	r8, r1, r8
 80122a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80122a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80122aa:	fa1f f888 	uxth.w	r8, r8
 80122ae:	1419      	asrs	r1, r3, #16
 80122b0:	454e      	cmp	r6, r9
 80122b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80122b6:	f84a 3b04 	str.w	r3, [sl], #4
 80122ba:	d8e7      	bhi.n	801228c <__mdiff+0x80>
 80122bc:	1b33      	subs	r3, r6, r4
 80122be:	3b15      	subs	r3, #21
 80122c0:	f023 0303 	bic.w	r3, r3, #3
 80122c4:	3304      	adds	r3, #4
 80122c6:	3415      	adds	r4, #21
 80122c8:	42a6      	cmp	r6, r4
 80122ca:	bf38      	it	cc
 80122cc:	2304      	movcc	r3, #4
 80122ce:	441d      	add	r5, r3
 80122d0:	4473      	add	r3, lr
 80122d2:	469e      	mov	lr, r3
 80122d4:	462e      	mov	r6, r5
 80122d6:	4566      	cmp	r6, ip
 80122d8:	d30e      	bcc.n	80122f8 <__mdiff+0xec>
 80122da:	f10c 0203 	add.w	r2, ip, #3
 80122de:	1b52      	subs	r2, r2, r5
 80122e0:	f022 0203 	bic.w	r2, r2, #3
 80122e4:	3d03      	subs	r5, #3
 80122e6:	45ac      	cmp	ip, r5
 80122e8:	bf38      	it	cc
 80122ea:	2200      	movcc	r2, #0
 80122ec:	441a      	add	r2, r3
 80122ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80122f2:	b17b      	cbz	r3, 8012314 <__mdiff+0x108>
 80122f4:	6107      	str	r7, [r0, #16]
 80122f6:	e7a3      	b.n	8012240 <__mdiff+0x34>
 80122f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80122fc:	fa11 f288 	uxtah	r2, r1, r8
 8012300:	1414      	asrs	r4, r2, #16
 8012302:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012306:	b292      	uxth	r2, r2
 8012308:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801230c:	f84e 2b04 	str.w	r2, [lr], #4
 8012310:	1421      	asrs	r1, r4, #16
 8012312:	e7e0      	b.n	80122d6 <__mdiff+0xca>
 8012314:	3f01      	subs	r7, #1
 8012316:	e7ea      	b.n	80122ee <__mdiff+0xe2>
 8012318:	08013e41 	.word	0x08013e41
 801231c:	08013ecc 	.word	0x08013ecc

08012320 <__ulp>:
 8012320:	b082      	sub	sp, #8
 8012322:	ed8d 0b00 	vstr	d0, [sp]
 8012326:	9b01      	ldr	r3, [sp, #4]
 8012328:	4912      	ldr	r1, [pc, #72]	; (8012374 <__ulp+0x54>)
 801232a:	4019      	ands	r1, r3
 801232c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012330:	2900      	cmp	r1, #0
 8012332:	dd05      	ble.n	8012340 <__ulp+0x20>
 8012334:	2200      	movs	r2, #0
 8012336:	460b      	mov	r3, r1
 8012338:	ec43 2b10 	vmov	d0, r2, r3
 801233c:	b002      	add	sp, #8
 801233e:	4770      	bx	lr
 8012340:	4249      	negs	r1, r1
 8012342:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012346:	ea4f 5021 	mov.w	r0, r1, asr #20
 801234a:	f04f 0200 	mov.w	r2, #0
 801234e:	f04f 0300 	mov.w	r3, #0
 8012352:	da04      	bge.n	801235e <__ulp+0x3e>
 8012354:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012358:	fa41 f300 	asr.w	r3, r1, r0
 801235c:	e7ec      	b.n	8012338 <__ulp+0x18>
 801235e:	f1a0 0114 	sub.w	r1, r0, #20
 8012362:	291e      	cmp	r1, #30
 8012364:	bfda      	itte	le
 8012366:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801236a:	fa20 f101 	lsrle.w	r1, r0, r1
 801236e:	2101      	movgt	r1, #1
 8012370:	460a      	mov	r2, r1
 8012372:	e7e1      	b.n	8012338 <__ulp+0x18>
 8012374:	7ff00000 	.word	0x7ff00000

08012378 <__b2d>:
 8012378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237a:	6905      	ldr	r5, [r0, #16]
 801237c:	f100 0714 	add.w	r7, r0, #20
 8012380:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012384:	1f2e      	subs	r6, r5, #4
 8012386:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801238a:	4620      	mov	r0, r4
 801238c:	f7ff fd48 	bl	8011e20 <__hi0bits>
 8012390:	f1c0 0320 	rsb	r3, r0, #32
 8012394:	280a      	cmp	r0, #10
 8012396:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012414 <__b2d+0x9c>
 801239a:	600b      	str	r3, [r1, #0]
 801239c:	dc14      	bgt.n	80123c8 <__b2d+0x50>
 801239e:	f1c0 0e0b 	rsb	lr, r0, #11
 80123a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80123a6:	42b7      	cmp	r7, r6
 80123a8:	ea41 030c 	orr.w	r3, r1, ip
 80123ac:	bf34      	ite	cc
 80123ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80123b2:	2100      	movcs	r1, #0
 80123b4:	3015      	adds	r0, #21
 80123b6:	fa04 f000 	lsl.w	r0, r4, r0
 80123ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80123be:	ea40 0201 	orr.w	r2, r0, r1
 80123c2:	ec43 2b10 	vmov	d0, r2, r3
 80123c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c8:	42b7      	cmp	r7, r6
 80123ca:	bf3a      	itte	cc
 80123cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80123d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80123d4:	2100      	movcs	r1, #0
 80123d6:	380b      	subs	r0, #11
 80123d8:	d017      	beq.n	801240a <__b2d+0x92>
 80123da:	f1c0 0c20 	rsb	ip, r0, #32
 80123de:	fa04 f500 	lsl.w	r5, r4, r0
 80123e2:	42be      	cmp	r6, r7
 80123e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80123e8:	ea45 0504 	orr.w	r5, r5, r4
 80123ec:	bf8c      	ite	hi
 80123ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80123f2:	2400      	movls	r4, #0
 80123f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80123f8:	fa01 f000 	lsl.w	r0, r1, r0
 80123fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8012400:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012404:	ea40 0204 	orr.w	r2, r0, r4
 8012408:	e7db      	b.n	80123c2 <__b2d+0x4a>
 801240a:	ea44 030c 	orr.w	r3, r4, ip
 801240e:	460a      	mov	r2, r1
 8012410:	e7d7      	b.n	80123c2 <__b2d+0x4a>
 8012412:	bf00      	nop
 8012414:	3ff00000 	.word	0x3ff00000

08012418 <__d2b>:
 8012418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801241c:	4689      	mov	r9, r1
 801241e:	2101      	movs	r1, #1
 8012420:	ec57 6b10 	vmov	r6, r7, d0
 8012424:	4690      	mov	r8, r2
 8012426:	f7ff fc09 	bl	8011c3c <_Balloc>
 801242a:	4604      	mov	r4, r0
 801242c:	b930      	cbnz	r0, 801243c <__d2b+0x24>
 801242e:	4602      	mov	r2, r0
 8012430:	4b25      	ldr	r3, [pc, #148]	; (80124c8 <__d2b+0xb0>)
 8012432:	4826      	ldr	r0, [pc, #152]	; (80124cc <__d2b+0xb4>)
 8012434:	f240 310a 	movw	r1, #778	; 0x30a
 8012438:	f7fe f8d6 	bl	80105e8 <__assert_func>
 801243c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012444:	bb35      	cbnz	r5, 8012494 <__d2b+0x7c>
 8012446:	2e00      	cmp	r6, #0
 8012448:	9301      	str	r3, [sp, #4]
 801244a:	d028      	beq.n	801249e <__d2b+0x86>
 801244c:	4668      	mov	r0, sp
 801244e:	9600      	str	r6, [sp, #0]
 8012450:	f7ff fd06 	bl	8011e60 <__lo0bits>
 8012454:	9900      	ldr	r1, [sp, #0]
 8012456:	b300      	cbz	r0, 801249a <__d2b+0x82>
 8012458:	9a01      	ldr	r2, [sp, #4]
 801245a:	f1c0 0320 	rsb	r3, r0, #32
 801245e:	fa02 f303 	lsl.w	r3, r2, r3
 8012462:	430b      	orrs	r3, r1
 8012464:	40c2      	lsrs	r2, r0
 8012466:	6163      	str	r3, [r4, #20]
 8012468:	9201      	str	r2, [sp, #4]
 801246a:	9b01      	ldr	r3, [sp, #4]
 801246c:	61a3      	str	r3, [r4, #24]
 801246e:	2b00      	cmp	r3, #0
 8012470:	bf14      	ite	ne
 8012472:	2202      	movne	r2, #2
 8012474:	2201      	moveq	r2, #1
 8012476:	6122      	str	r2, [r4, #16]
 8012478:	b1d5      	cbz	r5, 80124b0 <__d2b+0x98>
 801247a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801247e:	4405      	add	r5, r0
 8012480:	f8c9 5000 	str.w	r5, [r9]
 8012484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012488:	f8c8 0000 	str.w	r0, [r8]
 801248c:	4620      	mov	r0, r4
 801248e:	b003      	add	sp, #12
 8012490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012498:	e7d5      	b.n	8012446 <__d2b+0x2e>
 801249a:	6161      	str	r1, [r4, #20]
 801249c:	e7e5      	b.n	801246a <__d2b+0x52>
 801249e:	a801      	add	r0, sp, #4
 80124a0:	f7ff fcde 	bl	8011e60 <__lo0bits>
 80124a4:	9b01      	ldr	r3, [sp, #4]
 80124a6:	6163      	str	r3, [r4, #20]
 80124a8:	2201      	movs	r2, #1
 80124aa:	6122      	str	r2, [r4, #16]
 80124ac:	3020      	adds	r0, #32
 80124ae:	e7e3      	b.n	8012478 <__d2b+0x60>
 80124b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80124b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80124b8:	f8c9 0000 	str.w	r0, [r9]
 80124bc:	6918      	ldr	r0, [r3, #16]
 80124be:	f7ff fcaf 	bl	8011e20 <__hi0bits>
 80124c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80124c6:	e7df      	b.n	8012488 <__d2b+0x70>
 80124c8:	08013e41 	.word	0x08013e41
 80124cc:	08013ecc 	.word	0x08013ecc

080124d0 <__ratio>:
 80124d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d4:	4688      	mov	r8, r1
 80124d6:	4669      	mov	r1, sp
 80124d8:	4681      	mov	r9, r0
 80124da:	f7ff ff4d 	bl	8012378 <__b2d>
 80124de:	a901      	add	r1, sp, #4
 80124e0:	4640      	mov	r0, r8
 80124e2:	ec55 4b10 	vmov	r4, r5, d0
 80124e6:	f7ff ff47 	bl	8012378 <__b2d>
 80124ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80124f2:	eba3 0c02 	sub.w	ip, r3, r2
 80124f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124fa:	1a9b      	subs	r3, r3, r2
 80124fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012500:	ec51 0b10 	vmov	r0, r1, d0
 8012504:	2b00      	cmp	r3, #0
 8012506:	bfd6      	itet	le
 8012508:	460a      	movle	r2, r1
 801250a:	462a      	movgt	r2, r5
 801250c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012510:	468b      	mov	fp, r1
 8012512:	462f      	mov	r7, r5
 8012514:	bfd4      	ite	le
 8012516:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801251a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801251e:	4620      	mov	r0, r4
 8012520:	ee10 2a10 	vmov	r2, s0
 8012524:	465b      	mov	r3, fp
 8012526:	4639      	mov	r1, r7
 8012528:	f7ee f9a8 	bl	800087c <__aeabi_ddiv>
 801252c:	ec41 0b10 	vmov	d0, r0, r1
 8012530:	b003      	add	sp, #12
 8012532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012536 <__copybits>:
 8012536:	3901      	subs	r1, #1
 8012538:	b570      	push	{r4, r5, r6, lr}
 801253a:	1149      	asrs	r1, r1, #5
 801253c:	6914      	ldr	r4, [r2, #16]
 801253e:	3101      	adds	r1, #1
 8012540:	f102 0314 	add.w	r3, r2, #20
 8012544:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012548:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801254c:	1f05      	subs	r5, r0, #4
 801254e:	42a3      	cmp	r3, r4
 8012550:	d30c      	bcc.n	801256c <__copybits+0x36>
 8012552:	1aa3      	subs	r3, r4, r2
 8012554:	3b11      	subs	r3, #17
 8012556:	f023 0303 	bic.w	r3, r3, #3
 801255a:	3211      	adds	r2, #17
 801255c:	42a2      	cmp	r2, r4
 801255e:	bf88      	it	hi
 8012560:	2300      	movhi	r3, #0
 8012562:	4418      	add	r0, r3
 8012564:	2300      	movs	r3, #0
 8012566:	4288      	cmp	r0, r1
 8012568:	d305      	bcc.n	8012576 <__copybits+0x40>
 801256a:	bd70      	pop	{r4, r5, r6, pc}
 801256c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012570:	f845 6f04 	str.w	r6, [r5, #4]!
 8012574:	e7eb      	b.n	801254e <__copybits+0x18>
 8012576:	f840 3b04 	str.w	r3, [r0], #4
 801257a:	e7f4      	b.n	8012566 <__copybits+0x30>

0801257c <__any_on>:
 801257c:	f100 0214 	add.w	r2, r0, #20
 8012580:	6900      	ldr	r0, [r0, #16]
 8012582:	114b      	asrs	r3, r1, #5
 8012584:	4298      	cmp	r0, r3
 8012586:	b510      	push	{r4, lr}
 8012588:	db11      	blt.n	80125ae <__any_on+0x32>
 801258a:	dd0a      	ble.n	80125a2 <__any_on+0x26>
 801258c:	f011 011f 	ands.w	r1, r1, #31
 8012590:	d007      	beq.n	80125a2 <__any_on+0x26>
 8012592:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012596:	fa24 f001 	lsr.w	r0, r4, r1
 801259a:	fa00 f101 	lsl.w	r1, r0, r1
 801259e:	428c      	cmp	r4, r1
 80125a0:	d10b      	bne.n	80125ba <__any_on+0x3e>
 80125a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d803      	bhi.n	80125b2 <__any_on+0x36>
 80125aa:	2000      	movs	r0, #0
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	4603      	mov	r3, r0
 80125b0:	e7f7      	b.n	80125a2 <__any_on+0x26>
 80125b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80125b6:	2900      	cmp	r1, #0
 80125b8:	d0f5      	beq.n	80125a6 <__any_on+0x2a>
 80125ba:	2001      	movs	r0, #1
 80125bc:	e7f6      	b.n	80125ac <__any_on+0x30>

080125be <_calloc_r>:
 80125be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125c0:	fba1 2402 	umull	r2, r4, r1, r2
 80125c4:	b94c      	cbnz	r4, 80125da <_calloc_r+0x1c>
 80125c6:	4611      	mov	r1, r2
 80125c8:	9201      	str	r2, [sp, #4]
 80125ca:	f7fc fb29 	bl	800ec20 <_malloc_r>
 80125ce:	9a01      	ldr	r2, [sp, #4]
 80125d0:	4605      	mov	r5, r0
 80125d2:	b930      	cbnz	r0, 80125e2 <_calloc_r+0x24>
 80125d4:	4628      	mov	r0, r5
 80125d6:	b003      	add	sp, #12
 80125d8:	bd30      	pop	{r4, r5, pc}
 80125da:	220c      	movs	r2, #12
 80125dc:	6002      	str	r2, [r0, #0]
 80125de:	2500      	movs	r5, #0
 80125e0:	e7f8      	b.n	80125d4 <_calloc_r+0x16>
 80125e2:	4621      	mov	r1, r4
 80125e4:	f7fc faf3 	bl	800ebce <memset>
 80125e8:	e7f4      	b.n	80125d4 <_calloc_r+0x16>
	...

080125ec <_free_r>:
 80125ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125ee:	2900      	cmp	r1, #0
 80125f0:	d044      	beq.n	801267c <_free_r+0x90>
 80125f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125f6:	9001      	str	r0, [sp, #4]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f1a1 0404 	sub.w	r4, r1, #4
 80125fe:	bfb8      	it	lt
 8012600:	18e4      	addlt	r4, r4, r3
 8012602:	f7ff fb0f 	bl	8011c24 <__malloc_lock>
 8012606:	4a1e      	ldr	r2, [pc, #120]	; (8012680 <_free_r+0x94>)
 8012608:	9801      	ldr	r0, [sp, #4]
 801260a:	6813      	ldr	r3, [r2, #0]
 801260c:	b933      	cbnz	r3, 801261c <_free_r+0x30>
 801260e:	6063      	str	r3, [r4, #4]
 8012610:	6014      	str	r4, [r2, #0]
 8012612:	b003      	add	sp, #12
 8012614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012618:	f7ff bb0a 	b.w	8011c30 <__malloc_unlock>
 801261c:	42a3      	cmp	r3, r4
 801261e:	d908      	bls.n	8012632 <_free_r+0x46>
 8012620:	6825      	ldr	r5, [r4, #0]
 8012622:	1961      	adds	r1, r4, r5
 8012624:	428b      	cmp	r3, r1
 8012626:	bf01      	itttt	eq
 8012628:	6819      	ldreq	r1, [r3, #0]
 801262a:	685b      	ldreq	r3, [r3, #4]
 801262c:	1949      	addeq	r1, r1, r5
 801262e:	6021      	streq	r1, [r4, #0]
 8012630:	e7ed      	b.n	801260e <_free_r+0x22>
 8012632:	461a      	mov	r2, r3
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	b10b      	cbz	r3, 801263c <_free_r+0x50>
 8012638:	42a3      	cmp	r3, r4
 801263a:	d9fa      	bls.n	8012632 <_free_r+0x46>
 801263c:	6811      	ldr	r1, [r2, #0]
 801263e:	1855      	adds	r5, r2, r1
 8012640:	42a5      	cmp	r5, r4
 8012642:	d10b      	bne.n	801265c <_free_r+0x70>
 8012644:	6824      	ldr	r4, [r4, #0]
 8012646:	4421      	add	r1, r4
 8012648:	1854      	adds	r4, r2, r1
 801264a:	42a3      	cmp	r3, r4
 801264c:	6011      	str	r1, [r2, #0]
 801264e:	d1e0      	bne.n	8012612 <_free_r+0x26>
 8012650:	681c      	ldr	r4, [r3, #0]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	6053      	str	r3, [r2, #4]
 8012656:	4421      	add	r1, r4
 8012658:	6011      	str	r1, [r2, #0]
 801265a:	e7da      	b.n	8012612 <_free_r+0x26>
 801265c:	d902      	bls.n	8012664 <_free_r+0x78>
 801265e:	230c      	movs	r3, #12
 8012660:	6003      	str	r3, [r0, #0]
 8012662:	e7d6      	b.n	8012612 <_free_r+0x26>
 8012664:	6825      	ldr	r5, [r4, #0]
 8012666:	1961      	adds	r1, r4, r5
 8012668:	428b      	cmp	r3, r1
 801266a:	bf04      	itt	eq
 801266c:	6819      	ldreq	r1, [r3, #0]
 801266e:	685b      	ldreq	r3, [r3, #4]
 8012670:	6063      	str	r3, [r4, #4]
 8012672:	bf04      	itt	eq
 8012674:	1949      	addeq	r1, r1, r5
 8012676:	6021      	streq	r1, [r4, #0]
 8012678:	6054      	str	r4, [r2, #4]
 801267a:	e7ca      	b.n	8012612 <_free_r+0x26>
 801267c:	b003      	add	sp, #12
 801267e:	bd30      	pop	{r4, r5, pc}
 8012680:	200051ec 	.word	0x200051ec

08012684 <__ssputs_r>:
 8012684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012688:	688e      	ldr	r6, [r1, #8]
 801268a:	429e      	cmp	r6, r3
 801268c:	4682      	mov	sl, r0
 801268e:	460c      	mov	r4, r1
 8012690:	4690      	mov	r8, r2
 8012692:	461f      	mov	r7, r3
 8012694:	d838      	bhi.n	8012708 <__ssputs_r+0x84>
 8012696:	898a      	ldrh	r2, [r1, #12]
 8012698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801269c:	d032      	beq.n	8012704 <__ssputs_r+0x80>
 801269e:	6825      	ldr	r5, [r4, #0]
 80126a0:	6909      	ldr	r1, [r1, #16]
 80126a2:	eba5 0901 	sub.w	r9, r5, r1
 80126a6:	6965      	ldr	r5, [r4, #20]
 80126a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80126b0:	3301      	adds	r3, #1
 80126b2:	444b      	add	r3, r9
 80126b4:	106d      	asrs	r5, r5, #1
 80126b6:	429d      	cmp	r5, r3
 80126b8:	bf38      	it	cc
 80126ba:	461d      	movcc	r5, r3
 80126bc:	0553      	lsls	r3, r2, #21
 80126be:	d531      	bpl.n	8012724 <__ssputs_r+0xa0>
 80126c0:	4629      	mov	r1, r5
 80126c2:	f7fc faad 	bl	800ec20 <_malloc_r>
 80126c6:	4606      	mov	r6, r0
 80126c8:	b950      	cbnz	r0, 80126e0 <__ssputs_r+0x5c>
 80126ca:	230c      	movs	r3, #12
 80126cc:	f8ca 3000 	str.w	r3, [sl]
 80126d0:	89a3      	ldrh	r3, [r4, #12]
 80126d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126d6:	81a3      	strh	r3, [r4, #12]
 80126d8:	f04f 30ff 	mov.w	r0, #4294967295
 80126dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126e0:	6921      	ldr	r1, [r4, #16]
 80126e2:	464a      	mov	r2, r9
 80126e4:	f7fc fa65 	bl	800ebb2 <memcpy>
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80126ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126f2:	81a3      	strh	r3, [r4, #12]
 80126f4:	6126      	str	r6, [r4, #16]
 80126f6:	6165      	str	r5, [r4, #20]
 80126f8:	444e      	add	r6, r9
 80126fa:	eba5 0509 	sub.w	r5, r5, r9
 80126fe:	6026      	str	r6, [r4, #0]
 8012700:	60a5      	str	r5, [r4, #8]
 8012702:	463e      	mov	r6, r7
 8012704:	42be      	cmp	r6, r7
 8012706:	d900      	bls.n	801270a <__ssputs_r+0x86>
 8012708:	463e      	mov	r6, r7
 801270a:	6820      	ldr	r0, [r4, #0]
 801270c:	4632      	mov	r2, r6
 801270e:	4641      	mov	r1, r8
 8012710:	f000 fbd8 	bl	8012ec4 <memmove>
 8012714:	68a3      	ldr	r3, [r4, #8]
 8012716:	1b9b      	subs	r3, r3, r6
 8012718:	60a3      	str	r3, [r4, #8]
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	4433      	add	r3, r6
 801271e:	6023      	str	r3, [r4, #0]
 8012720:	2000      	movs	r0, #0
 8012722:	e7db      	b.n	80126dc <__ssputs_r+0x58>
 8012724:	462a      	mov	r2, r5
 8012726:	f000 fbe7 	bl	8012ef8 <_realloc_r>
 801272a:	4606      	mov	r6, r0
 801272c:	2800      	cmp	r0, #0
 801272e:	d1e1      	bne.n	80126f4 <__ssputs_r+0x70>
 8012730:	6921      	ldr	r1, [r4, #16]
 8012732:	4650      	mov	r0, sl
 8012734:	f7ff ff5a 	bl	80125ec <_free_r>
 8012738:	e7c7      	b.n	80126ca <__ssputs_r+0x46>
	...

0801273c <_svfiprintf_r>:
 801273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012740:	4698      	mov	r8, r3
 8012742:	898b      	ldrh	r3, [r1, #12]
 8012744:	061b      	lsls	r3, r3, #24
 8012746:	b09d      	sub	sp, #116	; 0x74
 8012748:	4607      	mov	r7, r0
 801274a:	460d      	mov	r5, r1
 801274c:	4614      	mov	r4, r2
 801274e:	d50e      	bpl.n	801276e <_svfiprintf_r+0x32>
 8012750:	690b      	ldr	r3, [r1, #16]
 8012752:	b963      	cbnz	r3, 801276e <_svfiprintf_r+0x32>
 8012754:	2140      	movs	r1, #64	; 0x40
 8012756:	f7fc fa63 	bl	800ec20 <_malloc_r>
 801275a:	6028      	str	r0, [r5, #0]
 801275c:	6128      	str	r0, [r5, #16]
 801275e:	b920      	cbnz	r0, 801276a <_svfiprintf_r+0x2e>
 8012760:	230c      	movs	r3, #12
 8012762:	603b      	str	r3, [r7, #0]
 8012764:	f04f 30ff 	mov.w	r0, #4294967295
 8012768:	e0d1      	b.n	801290e <_svfiprintf_r+0x1d2>
 801276a:	2340      	movs	r3, #64	; 0x40
 801276c:	616b      	str	r3, [r5, #20]
 801276e:	2300      	movs	r3, #0
 8012770:	9309      	str	r3, [sp, #36]	; 0x24
 8012772:	2320      	movs	r3, #32
 8012774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012778:	f8cd 800c 	str.w	r8, [sp, #12]
 801277c:	2330      	movs	r3, #48	; 0x30
 801277e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012928 <_svfiprintf_r+0x1ec>
 8012782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012786:	f04f 0901 	mov.w	r9, #1
 801278a:	4623      	mov	r3, r4
 801278c:	469a      	mov	sl, r3
 801278e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012792:	b10a      	cbz	r2, 8012798 <_svfiprintf_r+0x5c>
 8012794:	2a25      	cmp	r2, #37	; 0x25
 8012796:	d1f9      	bne.n	801278c <_svfiprintf_r+0x50>
 8012798:	ebba 0b04 	subs.w	fp, sl, r4
 801279c:	d00b      	beq.n	80127b6 <_svfiprintf_r+0x7a>
 801279e:	465b      	mov	r3, fp
 80127a0:	4622      	mov	r2, r4
 80127a2:	4629      	mov	r1, r5
 80127a4:	4638      	mov	r0, r7
 80127a6:	f7ff ff6d 	bl	8012684 <__ssputs_r>
 80127aa:	3001      	adds	r0, #1
 80127ac:	f000 80aa 	beq.w	8012904 <_svfiprintf_r+0x1c8>
 80127b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127b2:	445a      	add	r2, fp
 80127b4:	9209      	str	r2, [sp, #36]	; 0x24
 80127b6:	f89a 3000 	ldrb.w	r3, [sl]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f000 80a2 	beq.w	8012904 <_svfiprintf_r+0x1c8>
 80127c0:	2300      	movs	r3, #0
 80127c2:	f04f 32ff 	mov.w	r2, #4294967295
 80127c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127ca:	f10a 0a01 	add.w	sl, sl, #1
 80127ce:	9304      	str	r3, [sp, #16]
 80127d0:	9307      	str	r3, [sp, #28]
 80127d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127d6:	931a      	str	r3, [sp, #104]	; 0x68
 80127d8:	4654      	mov	r4, sl
 80127da:	2205      	movs	r2, #5
 80127dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127e0:	4851      	ldr	r0, [pc, #324]	; (8012928 <_svfiprintf_r+0x1ec>)
 80127e2:	f7ed fd15 	bl	8000210 <memchr>
 80127e6:	9a04      	ldr	r2, [sp, #16]
 80127e8:	b9d8      	cbnz	r0, 8012822 <_svfiprintf_r+0xe6>
 80127ea:	06d0      	lsls	r0, r2, #27
 80127ec:	bf44      	itt	mi
 80127ee:	2320      	movmi	r3, #32
 80127f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127f4:	0711      	lsls	r1, r2, #28
 80127f6:	bf44      	itt	mi
 80127f8:	232b      	movmi	r3, #43	; 0x2b
 80127fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012802:	2b2a      	cmp	r3, #42	; 0x2a
 8012804:	d015      	beq.n	8012832 <_svfiprintf_r+0xf6>
 8012806:	9a07      	ldr	r2, [sp, #28]
 8012808:	4654      	mov	r4, sl
 801280a:	2000      	movs	r0, #0
 801280c:	f04f 0c0a 	mov.w	ip, #10
 8012810:	4621      	mov	r1, r4
 8012812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012816:	3b30      	subs	r3, #48	; 0x30
 8012818:	2b09      	cmp	r3, #9
 801281a:	d94e      	bls.n	80128ba <_svfiprintf_r+0x17e>
 801281c:	b1b0      	cbz	r0, 801284c <_svfiprintf_r+0x110>
 801281e:	9207      	str	r2, [sp, #28]
 8012820:	e014      	b.n	801284c <_svfiprintf_r+0x110>
 8012822:	eba0 0308 	sub.w	r3, r0, r8
 8012826:	fa09 f303 	lsl.w	r3, r9, r3
 801282a:	4313      	orrs	r3, r2
 801282c:	9304      	str	r3, [sp, #16]
 801282e:	46a2      	mov	sl, r4
 8012830:	e7d2      	b.n	80127d8 <_svfiprintf_r+0x9c>
 8012832:	9b03      	ldr	r3, [sp, #12]
 8012834:	1d19      	adds	r1, r3, #4
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	9103      	str	r1, [sp, #12]
 801283a:	2b00      	cmp	r3, #0
 801283c:	bfbb      	ittet	lt
 801283e:	425b      	neglt	r3, r3
 8012840:	f042 0202 	orrlt.w	r2, r2, #2
 8012844:	9307      	strge	r3, [sp, #28]
 8012846:	9307      	strlt	r3, [sp, #28]
 8012848:	bfb8      	it	lt
 801284a:	9204      	strlt	r2, [sp, #16]
 801284c:	7823      	ldrb	r3, [r4, #0]
 801284e:	2b2e      	cmp	r3, #46	; 0x2e
 8012850:	d10c      	bne.n	801286c <_svfiprintf_r+0x130>
 8012852:	7863      	ldrb	r3, [r4, #1]
 8012854:	2b2a      	cmp	r3, #42	; 0x2a
 8012856:	d135      	bne.n	80128c4 <_svfiprintf_r+0x188>
 8012858:	9b03      	ldr	r3, [sp, #12]
 801285a:	1d1a      	adds	r2, r3, #4
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	9203      	str	r2, [sp, #12]
 8012860:	2b00      	cmp	r3, #0
 8012862:	bfb8      	it	lt
 8012864:	f04f 33ff 	movlt.w	r3, #4294967295
 8012868:	3402      	adds	r4, #2
 801286a:	9305      	str	r3, [sp, #20]
 801286c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012938 <_svfiprintf_r+0x1fc>
 8012870:	7821      	ldrb	r1, [r4, #0]
 8012872:	2203      	movs	r2, #3
 8012874:	4650      	mov	r0, sl
 8012876:	f7ed fccb 	bl	8000210 <memchr>
 801287a:	b140      	cbz	r0, 801288e <_svfiprintf_r+0x152>
 801287c:	2340      	movs	r3, #64	; 0x40
 801287e:	eba0 000a 	sub.w	r0, r0, sl
 8012882:	fa03 f000 	lsl.w	r0, r3, r0
 8012886:	9b04      	ldr	r3, [sp, #16]
 8012888:	4303      	orrs	r3, r0
 801288a:	3401      	adds	r4, #1
 801288c:	9304      	str	r3, [sp, #16]
 801288e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012892:	4826      	ldr	r0, [pc, #152]	; (801292c <_svfiprintf_r+0x1f0>)
 8012894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012898:	2206      	movs	r2, #6
 801289a:	f7ed fcb9 	bl	8000210 <memchr>
 801289e:	2800      	cmp	r0, #0
 80128a0:	d038      	beq.n	8012914 <_svfiprintf_r+0x1d8>
 80128a2:	4b23      	ldr	r3, [pc, #140]	; (8012930 <_svfiprintf_r+0x1f4>)
 80128a4:	bb1b      	cbnz	r3, 80128ee <_svfiprintf_r+0x1b2>
 80128a6:	9b03      	ldr	r3, [sp, #12]
 80128a8:	3307      	adds	r3, #7
 80128aa:	f023 0307 	bic.w	r3, r3, #7
 80128ae:	3308      	adds	r3, #8
 80128b0:	9303      	str	r3, [sp, #12]
 80128b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128b4:	4433      	add	r3, r6
 80128b6:	9309      	str	r3, [sp, #36]	; 0x24
 80128b8:	e767      	b.n	801278a <_svfiprintf_r+0x4e>
 80128ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80128be:	460c      	mov	r4, r1
 80128c0:	2001      	movs	r0, #1
 80128c2:	e7a5      	b.n	8012810 <_svfiprintf_r+0xd4>
 80128c4:	2300      	movs	r3, #0
 80128c6:	3401      	adds	r4, #1
 80128c8:	9305      	str	r3, [sp, #20]
 80128ca:	4619      	mov	r1, r3
 80128cc:	f04f 0c0a 	mov.w	ip, #10
 80128d0:	4620      	mov	r0, r4
 80128d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128d6:	3a30      	subs	r2, #48	; 0x30
 80128d8:	2a09      	cmp	r2, #9
 80128da:	d903      	bls.n	80128e4 <_svfiprintf_r+0x1a8>
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d0c5      	beq.n	801286c <_svfiprintf_r+0x130>
 80128e0:	9105      	str	r1, [sp, #20]
 80128e2:	e7c3      	b.n	801286c <_svfiprintf_r+0x130>
 80128e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80128e8:	4604      	mov	r4, r0
 80128ea:	2301      	movs	r3, #1
 80128ec:	e7f0      	b.n	80128d0 <_svfiprintf_r+0x194>
 80128ee:	ab03      	add	r3, sp, #12
 80128f0:	9300      	str	r3, [sp, #0]
 80128f2:	462a      	mov	r2, r5
 80128f4:	4b0f      	ldr	r3, [pc, #60]	; (8012934 <_svfiprintf_r+0x1f8>)
 80128f6:	a904      	add	r1, sp, #16
 80128f8:	4638      	mov	r0, r7
 80128fa:	f7fc faa5 	bl	800ee48 <_printf_float>
 80128fe:	1c42      	adds	r2, r0, #1
 8012900:	4606      	mov	r6, r0
 8012902:	d1d6      	bne.n	80128b2 <_svfiprintf_r+0x176>
 8012904:	89ab      	ldrh	r3, [r5, #12]
 8012906:	065b      	lsls	r3, r3, #25
 8012908:	f53f af2c 	bmi.w	8012764 <_svfiprintf_r+0x28>
 801290c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801290e:	b01d      	add	sp, #116	; 0x74
 8012910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012914:	ab03      	add	r3, sp, #12
 8012916:	9300      	str	r3, [sp, #0]
 8012918:	462a      	mov	r2, r5
 801291a:	4b06      	ldr	r3, [pc, #24]	; (8012934 <_svfiprintf_r+0x1f8>)
 801291c:	a904      	add	r1, sp, #16
 801291e:	4638      	mov	r0, r7
 8012920:	f7fc fd36 	bl	800f390 <_printf_i>
 8012924:	e7eb      	b.n	80128fe <_svfiprintf_r+0x1c2>
 8012926:	bf00      	nop
 8012928:	08014024 	.word	0x08014024
 801292c:	0801402e 	.word	0x0801402e
 8012930:	0800ee49 	.word	0x0800ee49
 8012934:	08012685 	.word	0x08012685
 8012938:	0801402a 	.word	0x0801402a

0801293c <__sfputc_r>:
 801293c:	6893      	ldr	r3, [r2, #8]
 801293e:	3b01      	subs	r3, #1
 8012940:	2b00      	cmp	r3, #0
 8012942:	b410      	push	{r4}
 8012944:	6093      	str	r3, [r2, #8]
 8012946:	da08      	bge.n	801295a <__sfputc_r+0x1e>
 8012948:	6994      	ldr	r4, [r2, #24]
 801294a:	42a3      	cmp	r3, r4
 801294c:	db01      	blt.n	8012952 <__sfputc_r+0x16>
 801294e:	290a      	cmp	r1, #10
 8012950:	d103      	bne.n	801295a <__sfputc_r+0x1e>
 8012952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012956:	f000 b97b 	b.w	8012c50 <__swbuf_r>
 801295a:	6813      	ldr	r3, [r2, #0]
 801295c:	1c58      	adds	r0, r3, #1
 801295e:	6010      	str	r0, [r2, #0]
 8012960:	7019      	strb	r1, [r3, #0]
 8012962:	4608      	mov	r0, r1
 8012964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012968:	4770      	bx	lr

0801296a <__sfputs_r>:
 801296a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801296c:	4606      	mov	r6, r0
 801296e:	460f      	mov	r7, r1
 8012970:	4614      	mov	r4, r2
 8012972:	18d5      	adds	r5, r2, r3
 8012974:	42ac      	cmp	r4, r5
 8012976:	d101      	bne.n	801297c <__sfputs_r+0x12>
 8012978:	2000      	movs	r0, #0
 801297a:	e007      	b.n	801298c <__sfputs_r+0x22>
 801297c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012980:	463a      	mov	r2, r7
 8012982:	4630      	mov	r0, r6
 8012984:	f7ff ffda 	bl	801293c <__sfputc_r>
 8012988:	1c43      	adds	r3, r0, #1
 801298a:	d1f3      	bne.n	8012974 <__sfputs_r+0xa>
 801298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012990 <_vfiprintf_r>:
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	460d      	mov	r5, r1
 8012996:	b09d      	sub	sp, #116	; 0x74
 8012998:	4614      	mov	r4, r2
 801299a:	4698      	mov	r8, r3
 801299c:	4606      	mov	r6, r0
 801299e:	b118      	cbz	r0, 80129a8 <_vfiprintf_r+0x18>
 80129a0:	6983      	ldr	r3, [r0, #24]
 80129a2:	b90b      	cbnz	r3, 80129a8 <_vfiprintf_r+0x18>
 80129a4:	f7fc f840 	bl	800ea28 <__sinit>
 80129a8:	4b89      	ldr	r3, [pc, #548]	; (8012bd0 <_vfiprintf_r+0x240>)
 80129aa:	429d      	cmp	r5, r3
 80129ac:	d11b      	bne.n	80129e6 <_vfiprintf_r+0x56>
 80129ae:	6875      	ldr	r5, [r6, #4]
 80129b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129b2:	07d9      	lsls	r1, r3, #31
 80129b4:	d405      	bmi.n	80129c2 <_vfiprintf_r+0x32>
 80129b6:	89ab      	ldrh	r3, [r5, #12]
 80129b8:	059a      	lsls	r2, r3, #22
 80129ba:	d402      	bmi.n	80129c2 <_vfiprintf_r+0x32>
 80129bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129be:	f7fc f8f6 	bl	800ebae <__retarget_lock_acquire_recursive>
 80129c2:	89ab      	ldrh	r3, [r5, #12]
 80129c4:	071b      	lsls	r3, r3, #28
 80129c6:	d501      	bpl.n	80129cc <_vfiprintf_r+0x3c>
 80129c8:	692b      	ldr	r3, [r5, #16]
 80129ca:	b9eb      	cbnz	r3, 8012a08 <_vfiprintf_r+0x78>
 80129cc:	4629      	mov	r1, r5
 80129ce:	4630      	mov	r0, r6
 80129d0:	f000 f99e 	bl	8012d10 <__swsetup_r>
 80129d4:	b1c0      	cbz	r0, 8012a08 <_vfiprintf_r+0x78>
 80129d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129d8:	07dc      	lsls	r4, r3, #31
 80129da:	d50e      	bpl.n	80129fa <_vfiprintf_r+0x6a>
 80129dc:	f04f 30ff 	mov.w	r0, #4294967295
 80129e0:	b01d      	add	sp, #116	; 0x74
 80129e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e6:	4b7b      	ldr	r3, [pc, #492]	; (8012bd4 <_vfiprintf_r+0x244>)
 80129e8:	429d      	cmp	r5, r3
 80129ea:	d101      	bne.n	80129f0 <_vfiprintf_r+0x60>
 80129ec:	68b5      	ldr	r5, [r6, #8]
 80129ee:	e7df      	b.n	80129b0 <_vfiprintf_r+0x20>
 80129f0:	4b79      	ldr	r3, [pc, #484]	; (8012bd8 <_vfiprintf_r+0x248>)
 80129f2:	429d      	cmp	r5, r3
 80129f4:	bf08      	it	eq
 80129f6:	68f5      	ldreq	r5, [r6, #12]
 80129f8:	e7da      	b.n	80129b0 <_vfiprintf_r+0x20>
 80129fa:	89ab      	ldrh	r3, [r5, #12]
 80129fc:	0598      	lsls	r0, r3, #22
 80129fe:	d4ed      	bmi.n	80129dc <_vfiprintf_r+0x4c>
 8012a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a02:	f7fc f8d5 	bl	800ebb0 <__retarget_lock_release_recursive>
 8012a06:	e7e9      	b.n	80129dc <_vfiprintf_r+0x4c>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a0c:	2320      	movs	r3, #32
 8012a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a16:	2330      	movs	r3, #48	; 0x30
 8012a18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012bdc <_vfiprintf_r+0x24c>
 8012a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a20:	f04f 0901 	mov.w	r9, #1
 8012a24:	4623      	mov	r3, r4
 8012a26:	469a      	mov	sl, r3
 8012a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a2c:	b10a      	cbz	r2, 8012a32 <_vfiprintf_r+0xa2>
 8012a2e:	2a25      	cmp	r2, #37	; 0x25
 8012a30:	d1f9      	bne.n	8012a26 <_vfiprintf_r+0x96>
 8012a32:	ebba 0b04 	subs.w	fp, sl, r4
 8012a36:	d00b      	beq.n	8012a50 <_vfiprintf_r+0xc0>
 8012a38:	465b      	mov	r3, fp
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	4629      	mov	r1, r5
 8012a3e:	4630      	mov	r0, r6
 8012a40:	f7ff ff93 	bl	801296a <__sfputs_r>
 8012a44:	3001      	adds	r0, #1
 8012a46:	f000 80aa 	beq.w	8012b9e <_vfiprintf_r+0x20e>
 8012a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a4c:	445a      	add	r2, fp
 8012a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8012a50:	f89a 3000 	ldrb.w	r3, [sl]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f000 80a2 	beq.w	8012b9e <_vfiprintf_r+0x20e>
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a64:	f10a 0a01 	add.w	sl, sl, #1
 8012a68:	9304      	str	r3, [sp, #16]
 8012a6a:	9307      	str	r3, [sp, #28]
 8012a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a70:	931a      	str	r3, [sp, #104]	; 0x68
 8012a72:	4654      	mov	r4, sl
 8012a74:	2205      	movs	r2, #5
 8012a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a7a:	4858      	ldr	r0, [pc, #352]	; (8012bdc <_vfiprintf_r+0x24c>)
 8012a7c:	f7ed fbc8 	bl	8000210 <memchr>
 8012a80:	9a04      	ldr	r2, [sp, #16]
 8012a82:	b9d8      	cbnz	r0, 8012abc <_vfiprintf_r+0x12c>
 8012a84:	06d1      	lsls	r1, r2, #27
 8012a86:	bf44      	itt	mi
 8012a88:	2320      	movmi	r3, #32
 8012a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a8e:	0713      	lsls	r3, r2, #28
 8012a90:	bf44      	itt	mi
 8012a92:	232b      	movmi	r3, #43	; 0x2b
 8012a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a98:	f89a 3000 	ldrb.w	r3, [sl]
 8012a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a9e:	d015      	beq.n	8012acc <_vfiprintf_r+0x13c>
 8012aa0:	9a07      	ldr	r2, [sp, #28]
 8012aa2:	4654      	mov	r4, sl
 8012aa4:	2000      	movs	r0, #0
 8012aa6:	f04f 0c0a 	mov.w	ip, #10
 8012aaa:	4621      	mov	r1, r4
 8012aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ab0:	3b30      	subs	r3, #48	; 0x30
 8012ab2:	2b09      	cmp	r3, #9
 8012ab4:	d94e      	bls.n	8012b54 <_vfiprintf_r+0x1c4>
 8012ab6:	b1b0      	cbz	r0, 8012ae6 <_vfiprintf_r+0x156>
 8012ab8:	9207      	str	r2, [sp, #28]
 8012aba:	e014      	b.n	8012ae6 <_vfiprintf_r+0x156>
 8012abc:	eba0 0308 	sub.w	r3, r0, r8
 8012ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	9304      	str	r3, [sp, #16]
 8012ac8:	46a2      	mov	sl, r4
 8012aca:	e7d2      	b.n	8012a72 <_vfiprintf_r+0xe2>
 8012acc:	9b03      	ldr	r3, [sp, #12]
 8012ace:	1d19      	adds	r1, r3, #4
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	9103      	str	r1, [sp, #12]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	bfbb      	ittet	lt
 8012ad8:	425b      	neglt	r3, r3
 8012ada:	f042 0202 	orrlt.w	r2, r2, #2
 8012ade:	9307      	strge	r3, [sp, #28]
 8012ae0:	9307      	strlt	r3, [sp, #28]
 8012ae2:	bfb8      	it	lt
 8012ae4:	9204      	strlt	r2, [sp, #16]
 8012ae6:	7823      	ldrb	r3, [r4, #0]
 8012ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8012aea:	d10c      	bne.n	8012b06 <_vfiprintf_r+0x176>
 8012aec:	7863      	ldrb	r3, [r4, #1]
 8012aee:	2b2a      	cmp	r3, #42	; 0x2a
 8012af0:	d135      	bne.n	8012b5e <_vfiprintf_r+0x1ce>
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	1d1a      	adds	r2, r3, #4
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	9203      	str	r2, [sp, #12]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	bfb8      	it	lt
 8012afe:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b02:	3402      	adds	r4, #2
 8012b04:	9305      	str	r3, [sp, #20]
 8012b06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012bec <_vfiprintf_r+0x25c>
 8012b0a:	7821      	ldrb	r1, [r4, #0]
 8012b0c:	2203      	movs	r2, #3
 8012b0e:	4650      	mov	r0, sl
 8012b10:	f7ed fb7e 	bl	8000210 <memchr>
 8012b14:	b140      	cbz	r0, 8012b28 <_vfiprintf_r+0x198>
 8012b16:	2340      	movs	r3, #64	; 0x40
 8012b18:	eba0 000a 	sub.w	r0, r0, sl
 8012b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8012b20:	9b04      	ldr	r3, [sp, #16]
 8012b22:	4303      	orrs	r3, r0
 8012b24:	3401      	adds	r4, #1
 8012b26:	9304      	str	r3, [sp, #16]
 8012b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b2c:	482c      	ldr	r0, [pc, #176]	; (8012be0 <_vfiprintf_r+0x250>)
 8012b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b32:	2206      	movs	r2, #6
 8012b34:	f7ed fb6c 	bl	8000210 <memchr>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d03f      	beq.n	8012bbc <_vfiprintf_r+0x22c>
 8012b3c:	4b29      	ldr	r3, [pc, #164]	; (8012be4 <_vfiprintf_r+0x254>)
 8012b3e:	bb1b      	cbnz	r3, 8012b88 <_vfiprintf_r+0x1f8>
 8012b40:	9b03      	ldr	r3, [sp, #12]
 8012b42:	3307      	adds	r3, #7
 8012b44:	f023 0307 	bic.w	r3, r3, #7
 8012b48:	3308      	adds	r3, #8
 8012b4a:	9303      	str	r3, [sp, #12]
 8012b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b4e:	443b      	add	r3, r7
 8012b50:	9309      	str	r3, [sp, #36]	; 0x24
 8012b52:	e767      	b.n	8012a24 <_vfiprintf_r+0x94>
 8012b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b58:	460c      	mov	r4, r1
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	e7a5      	b.n	8012aaa <_vfiprintf_r+0x11a>
 8012b5e:	2300      	movs	r3, #0
 8012b60:	3401      	adds	r4, #1
 8012b62:	9305      	str	r3, [sp, #20]
 8012b64:	4619      	mov	r1, r3
 8012b66:	f04f 0c0a 	mov.w	ip, #10
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b70:	3a30      	subs	r2, #48	; 0x30
 8012b72:	2a09      	cmp	r2, #9
 8012b74:	d903      	bls.n	8012b7e <_vfiprintf_r+0x1ee>
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d0c5      	beq.n	8012b06 <_vfiprintf_r+0x176>
 8012b7a:	9105      	str	r1, [sp, #20]
 8012b7c:	e7c3      	b.n	8012b06 <_vfiprintf_r+0x176>
 8012b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b82:	4604      	mov	r4, r0
 8012b84:	2301      	movs	r3, #1
 8012b86:	e7f0      	b.n	8012b6a <_vfiprintf_r+0x1da>
 8012b88:	ab03      	add	r3, sp, #12
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	462a      	mov	r2, r5
 8012b8e:	4b16      	ldr	r3, [pc, #88]	; (8012be8 <_vfiprintf_r+0x258>)
 8012b90:	a904      	add	r1, sp, #16
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7fc f958 	bl	800ee48 <_printf_float>
 8012b98:	4607      	mov	r7, r0
 8012b9a:	1c78      	adds	r0, r7, #1
 8012b9c:	d1d6      	bne.n	8012b4c <_vfiprintf_r+0x1bc>
 8012b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ba0:	07d9      	lsls	r1, r3, #31
 8012ba2:	d405      	bmi.n	8012bb0 <_vfiprintf_r+0x220>
 8012ba4:	89ab      	ldrh	r3, [r5, #12]
 8012ba6:	059a      	lsls	r2, r3, #22
 8012ba8:	d402      	bmi.n	8012bb0 <_vfiprintf_r+0x220>
 8012baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bac:	f7fc f800 	bl	800ebb0 <__retarget_lock_release_recursive>
 8012bb0:	89ab      	ldrh	r3, [r5, #12]
 8012bb2:	065b      	lsls	r3, r3, #25
 8012bb4:	f53f af12 	bmi.w	80129dc <_vfiprintf_r+0x4c>
 8012bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bba:	e711      	b.n	80129e0 <_vfiprintf_r+0x50>
 8012bbc:	ab03      	add	r3, sp, #12
 8012bbe:	9300      	str	r3, [sp, #0]
 8012bc0:	462a      	mov	r2, r5
 8012bc2:	4b09      	ldr	r3, [pc, #36]	; (8012be8 <_vfiprintf_r+0x258>)
 8012bc4:	a904      	add	r1, sp, #16
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f7fc fbe2 	bl	800f390 <_printf_i>
 8012bcc:	e7e4      	b.n	8012b98 <_vfiprintf_r+0x208>
 8012bce:	bf00      	nop
 8012bd0:	08013b60 	.word	0x08013b60
 8012bd4:	08013b80 	.word	0x08013b80
 8012bd8:	08013b40 	.word	0x08013b40
 8012bdc:	08014024 	.word	0x08014024
 8012be0:	0801402e 	.word	0x0801402e
 8012be4:	0800ee49 	.word	0x0800ee49
 8012be8:	0801296b 	.word	0x0801296b
 8012bec:	0801402a 	.word	0x0801402a

08012bf0 <_read_r>:
 8012bf0:	b538      	push	{r3, r4, r5, lr}
 8012bf2:	4d07      	ldr	r5, [pc, #28]	; (8012c10 <_read_r+0x20>)
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	4608      	mov	r0, r1
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	602a      	str	r2, [r5, #0]
 8012bfe:	461a      	mov	r2, r3
 8012c00:	f7f1 ffec 	bl	8004bdc <_read>
 8012c04:	1c43      	adds	r3, r0, #1
 8012c06:	d102      	bne.n	8012c0e <_read_r+0x1e>
 8012c08:	682b      	ldr	r3, [r5, #0]
 8012c0a:	b103      	cbz	r3, 8012c0e <_read_r+0x1e>
 8012c0c:	6023      	str	r3, [r4, #0]
 8012c0e:	bd38      	pop	{r3, r4, r5, pc}
 8012c10:	200051f4 	.word	0x200051f4
 8012c14:	00000000 	.word	0x00000000

08012c18 <nan>:
 8012c18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012c20 <nan+0x8>
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	00000000 	.word	0x00000000
 8012c24:	7ff80000 	.word	0x7ff80000

08012c28 <strncmp>:
 8012c28:	b510      	push	{r4, lr}
 8012c2a:	b17a      	cbz	r2, 8012c4c <strncmp+0x24>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	3901      	subs	r1, #1
 8012c30:	1884      	adds	r4, r0, r2
 8012c32:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012c3a:	4290      	cmp	r0, r2
 8012c3c:	d101      	bne.n	8012c42 <strncmp+0x1a>
 8012c3e:	42a3      	cmp	r3, r4
 8012c40:	d101      	bne.n	8012c46 <strncmp+0x1e>
 8012c42:	1a80      	subs	r0, r0, r2
 8012c44:	bd10      	pop	{r4, pc}
 8012c46:	2800      	cmp	r0, #0
 8012c48:	d1f3      	bne.n	8012c32 <strncmp+0xa>
 8012c4a:	e7fa      	b.n	8012c42 <strncmp+0x1a>
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	e7f9      	b.n	8012c44 <strncmp+0x1c>

08012c50 <__swbuf_r>:
 8012c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c52:	460e      	mov	r6, r1
 8012c54:	4614      	mov	r4, r2
 8012c56:	4605      	mov	r5, r0
 8012c58:	b118      	cbz	r0, 8012c62 <__swbuf_r+0x12>
 8012c5a:	6983      	ldr	r3, [r0, #24]
 8012c5c:	b90b      	cbnz	r3, 8012c62 <__swbuf_r+0x12>
 8012c5e:	f7fb fee3 	bl	800ea28 <__sinit>
 8012c62:	4b21      	ldr	r3, [pc, #132]	; (8012ce8 <__swbuf_r+0x98>)
 8012c64:	429c      	cmp	r4, r3
 8012c66:	d12b      	bne.n	8012cc0 <__swbuf_r+0x70>
 8012c68:	686c      	ldr	r4, [r5, #4]
 8012c6a:	69a3      	ldr	r3, [r4, #24]
 8012c6c:	60a3      	str	r3, [r4, #8]
 8012c6e:	89a3      	ldrh	r3, [r4, #12]
 8012c70:	071a      	lsls	r2, r3, #28
 8012c72:	d52f      	bpl.n	8012cd4 <__swbuf_r+0x84>
 8012c74:	6923      	ldr	r3, [r4, #16]
 8012c76:	b36b      	cbz	r3, 8012cd4 <__swbuf_r+0x84>
 8012c78:	6923      	ldr	r3, [r4, #16]
 8012c7a:	6820      	ldr	r0, [r4, #0]
 8012c7c:	1ac0      	subs	r0, r0, r3
 8012c7e:	6963      	ldr	r3, [r4, #20]
 8012c80:	b2f6      	uxtb	r6, r6
 8012c82:	4283      	cmp	r3, r0
 8012c84:	4637      	mov	r7, r6
 8012c86:	dc04      	bgt.n	8012c92 <__swbuf_r+0x42>
 8012c88:	4621      	mov	r1, r4
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f7fe fbdc 	bl	8011448 <_fflush_r>
 8012c90:	bb30      	cbnz	r0, 8012ce0 <__swbuf_r+0x90>
 8012c92:	68a3      	ldr	r3, [r4, #8]
 8012c94:	3b01      	subs	r3, #1
 8012c96:	60a3      	str	r3, [r4, #8]
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	1c5a      	adds	r2, r3, #1
 8012c9c:	6022      	str	r2, [r4, #0]
 8012c9e:	701e      	strb	r6, [r3, #0]
 8012ca0:	6963      	ldr	r3, [r4, #20]
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	4283      	cmp	r3, r0
 8012ca6:	d004      	beq.n	8012cb2 <__swbuf_r+0x62>
 8012ca8:	89a3      	ldrh	r3, [r4, #12]
 8012caa:	07db      	lsls	r3, r3, #31
 8012cac:	d506      	bpl.n	8012cbc <__swbuf_r+0x6c>
 8012cae:	2e0a      	cmp	r6, #10
 8012cb0:	d104      	bne.n	8012cbc <__swbuf_r+0x6c>
 8012cb2:	4621      	mov	r1, r4
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f7fe fbc7 	bl	8011448 <_fflush_r>
 8012cba:	b988      	cbnz	r0, 8012ce0 <__swbuf_r+0x90>
 8012cbc:	4638      	mov	r0, r7
 8012cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cc0:	4b0a      	ldr	r3, [pc, #40]	; (8012cec <__swbuf_r+0x9c>)
 8012cc2:	429c      	cmp	r4, r3
 8012cc4:	d101      	bne.n	8012cca <__swbuf_r+0x7a>
 8012cc6:	68ac      	ldr	r4, [r5, #8]
 8012cc8:	e7cf      	b.n	8012c6a <__swbuf_r+0x1a>
 8012cca:	4b09      	ldr	r3, [pc, #36]	; (8012cf0 <__swbuf_r+0xa0>)
 8012ccc:	429c      	cmp	r4, r3
 8012cce:	bf08      	it	eq
 8012cd0:	68ec      	ldreq	r4, [r5, #12]
 8012cd2:	e7ca      	b.n	8012c6a <__swbuf_r+0x1a>
 8012cd4:	4621      	mov	r1, r4
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f000 f81a 	bl	8012d10 <__swsetup_r>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d0cb      	beq.n	8012c78 <__swbuf_r+0x28>
 8012ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8012ce4:	e7ea      	b.n	8012cbc <__swbuf_r+0x6c>
 8012ce6:	bf00      	nop
 8012ce8:	08013b60 	.word	0x08013b60
 8012cec:	08013b80 	.word	0x08013b80
 8012cf0:	08013b40 	.word	0x08013b40

08012cf4 <__ascii_wctomb>:
 8012cf4:	b149      	cbz	r1, 8012d0a <__ascii_wctomb+0x16>
 8012cf6:	2aff      	cmp	r2, #255	; 0xff
 8012cf8:	bf85      	ittet	hi
 8012cfa:	238a      	movhi	r3, #138	; 0x8a
 8012cfc:	6003      	strhi	r3, [r0, #0]
 8012cfe:	700a      	strbls	r2, [r1, #0]
 8012d00:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d04:	bf98      	it	ls
 8012d06:	2001      	movls	r0, #1
 8012d08:	4770      	bx	lr
 8012d0a:	4608      	mov	r0, r1
 8012d0c:	4770      	bx	lr
	...

08012d10 <__swsetup_r>:
 8012d10:	4b32      	ldr	r3, [pc, #200]	; (8012ddc <__swsetup_r+0xcc>)
 8012d12:	b570      	push	{r4, r5, r6, lr}
 8012d14:	681d      	ldr	r5, [r3, #0]
 8012d16:	4606      	mov	r6, r0
 8012d18:	460c      	mov	r4, r1
 8012d1a:	b125      	cbz	r5, 8012d26 <__swsetup_r+0x16>
 8012d1c:	69ab      	ldr	r3, [r5, #24]
 8012d1e:	b913      	cbnz	r3, 8012d26 <__swsetup_r+0x16>
 8012d20:	4628      	mov	r0, r5
 8012d22:	f7fb fe81 	bl	800ea28 <__sinit>
 8012d26:	4b2e      	ldr	r3, [pc, #184]	; (8012de0 <__swsetup_r+0xd0>)
 8012d28:	429c      	cmp	r4, r3
 8012d2a:	d10f      	bne.n	8012d4c <__swsetup_r+0x3c>
 8012d2c:	686c      	ldr	r4, [r5, #4]
 8012d2e:	89a3      	ldrh	r3, [r4, #12]
 8012d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d34:	0719      	lsls	r1, r3, #28
 8012d36:	d42c      	bmi.n	8012d92 <__swsetup_r+0x82>
 8012d38:	06dd      	lsls	r5, r3, #27
 8012d3a:	d411      	bmi.n	8012d60 <__swsetup_r+0x50>
 8012d3c:	2309      	movs	r3, #9
 8012d3e:	6033      	str	r3, [r6, #0]
 8012d40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d44:	81a3      	strh	r3, [r4, #12]
 8012d46:	f04f 30ff 	mov.w	r0, #4294967295
 8012d4a:	e03e      	b.n	8012dca <__swsetup_r+0xba>
 8012d4c:	4b25      	ldr	r3, [pc, #148]	; (8012de4 <__swsetup_r+0xd4>)
 8012d4e:	429c      	cmp	r4, r3
 8012d50:	d101      	bne.n	8012d56 <__swsetup_r+0x46>
 8012d52:	68ac      	ldr	r4, [r5, #8]
 8012d54:	e7eb      	b.n	8012d2e <__swsetup_r+0x1e>
 8012d56:	4b24      	ldr	r3, [pc, #144]	; (8012de8 <__swsetup_r+0xd8>)
 8012d58:	429c      	cmp	r4, r3
 8012d5a:	bf08      	it	eq
 8012d5c:	68ec      	ldreq	r4, [r5, #12]
 8012d5e:	e7e6      	b.n	8012d2e <__swsetup_r+0x1e>
 8012d60:	0758      	lsls	r0, r3, #29
 8012d62:	d512      	bpl.n	8012d8a <__swsetup_r+0x7a>
 8012d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d66:	b141      	cbz	r1, 8012d7a <__swsetup_r+0x6a>
 8012d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d6c:	4299      	cmp	r1, r3
 8012d6e:	d002      	beq.n	8012d76 <__swsetup_r+0x66>
 8012d70:	4630      	mov	r0, r6
 8012d72:	f7ff fc3b 	bl	80125ec <_free_r>
 8012d76:	2300      	movs	r3, #0
 8012d78:	6363      	str	r3, [r4, #52]	; 0x34
 8012d7a:	89a3      	ldrh	r3, [r4, #12]
 8012d7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d80:	81a3      	strh	r3, [r4, #12]
 8012d82:	2300      	movs	r3, #0
 8012d84:	6063      	str	r3, [r4, #4]
 8012d86:	6923      	ldr	r3, [r4, #16]
 8012d88:	6023      	str	r3, [r4, #0]
 8012d8a:	89a3      	ldrh	r3, [r4, #12]
 8012d8c:	f043 0308 	orr.w	r3, r3, #8
 8012d90:	81a3      	strh	r3, [r4, #12]
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	b94b      	cbnz	r3, 8012daa <__swsetup_r+0x9a>
 8012d96:	89a3      	ldrh	r3, [r4, #12]
 8012d98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012da0:	d003      	beq.n	8012daa <__swsetup_r+0x9a>
 8012da2:	4621      	mov	r1, r4
 8012da4:	4630      	mov	r0, r6
 8012da6:	f000 f84d 	bl	8012e44 <__smakebuf_r>
 8012daa:	89a0      	ldrh	r0, [r4, #12]
 8012dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012db0:	f010 0301 	ands.w	r3, r0, #1
 8012db4:	d00a      	beq.n	8012dcc <__swsetup_r+0xbc>
 8012db6:	2300      	movs	r3, #0
 8012db8:	60a3      	str	r3, [r4, #8]
 8012dba:	6963      	ldr	r3, [r4, #20]
 8012dbc:	425b      	negs	r3, r3
 8012dbe:	61a3      	str	r3, [r4, #24]
 8012dc0:	6923      	ldr	r3, [r4, #16]
 8012dc2:	b943      	cbnz	r3, 8012dd6 <__swsetup_r+0xc6>
 8012dc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012dc8:	d1ba      	bne.n	8012d40 <__swsetup_r+0x30>
 8012dca:	bd70      	pop	{r4, r5, r6, pc}
 8012dcc:	0781      	lsls	r1, r0, #30
 8012dce:	bf58      	it	pl
 8012dd0:	6963      	ldrpl	r3, [r4, #20]
 8012dd2:	60a3      	str	r3, [r4, #8]
 8012dd4:	e7f4      	b.n	8012dc0 <__swsetup_r+0xb0>
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	e7f7      	b.n	8012dca <__swsetup_r+0xba>
 8012dda:	bf00      	nop
 8012ddc:	20000018 	.word	0x20000018
 8012de0:	08013b60 	.word	0x08013b60
 8012de4:	08013b80 	.word	0x08013b80
 8012de8:	08013b40 	.word	0x08013b40

08012dec <abort>:
 8012dec:	b508      	push	{r3, lr}
 8012dee:	2006      	movs	r0, #6
 8012df0:	f000 f8da 	bl	8012fa8 <raise>
 8012df4:	2001      	movs	r0, #1
 8012df6:	f7f1 fee7 	bl	8004bc8 <_exit>

08012dfa <__swhatbuf_r>:
 8012dfa:	b570      	push	{r4, r5, r6, lr}
 8012dfc:	460e      	mov	r6, r1
 8012dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e02:	2900      	cmp	r1, #0
 8012e04:	b096      	sub	sp, #88	; 0x58
 8012e06:	4614      	mov	r4, r2
 8012e08:	461d      	mov	r5, r3
 8012e0a:	da08      	bge.n	8012e1e <__swhatbuf_r+0x24>
 8012e0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012e10:	2200      	movs	r2, #0
 8012e12:	602a      	str	r2, [r5, #0]
 8012e14:	061a      	lsls	r2, r3, #24
 8012e16:	d410      	bmi.n	8012e3a <__swhatbuf_r+0x40>
 8012e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e1c:	e00e      	b.n	8012e3c <__swhatbuf_r+0x42>
 8012e1e:	466a      	mov	r2, sp
 8012e20:	f000 f8de 	bl	8012fe0 <_fstat_r>
 8012e24:	2800      	cmp	r0, #0
 8012e26:	dbf1      	blt.n	8012e0c <__swhatbuf_r+0x12>
 8012e28:	9a01      	ldr	r2, [sp, #4]
 8012e2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012e2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012e32:	425a      	negs	r2, r3
 8012e34:	415a      	adcs	r2, r3
 8012e36:	602a      	str	r2, [r5, #0]
 8012e38:	e7ee      	b.n	8012e18 <__swhatbuf_r+0x1e>
 8012e3a:	2340      	movs	r3, #64	; 0x40
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	6023      	str	r3, [r4, #0]
 8012e40:	b016      	add	sp, #88	; 0x58
 8012e42:	bd70      	pop	{r4, r5, r6, pc}

08012e44 <__smakebuf_r>:
 8012e44:	898b      	ldrh	r3, [r1, #12]
 8012e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e48:	079d      	lsls	r5, r3, #30
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460c      	mov	r4, r1
 8012e4e:	d507      	bpl.n	8012e60 <__smakebuf_r+0x1c>
 8012e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e54:	6023      	str	r3, [r4, #0]
 8012e56:	6123      	str	r3, [r4, #16]
 8012e58:	2301      	movs	r3, #1
 8012e5a:	6163      	str	r3, [r4, #20]
 8012e5c:	b002      	add	sp, #8
 8012e5e:	bd70      	pop	{r4, r5, r6, pc}
 8012e60:	ab01      	add	r3, sp, #4
 8012e62:	466a      	mov	r2, sp
 8012e64:	f7ff ffc9 	bl	8012dfa <__swhatbuf_r>
 8012e68:	9900      	ldr	r1, [sp, #0]
 8012e6a:	4605      	mov	r5, r0
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f7fb fed7 	bl	800ec20 <_malloc_r>
 8012e72:	b948      	cbnz	r0, 8012e88 <__smakebuf_r+0x44>
 8012e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e78:	059a      	lsls	r2, r3, #22
 8012e7a:	d4ef      	bmi.n	8012e5c <__smakebuf_r+0x18>
 8012e7c:	f023 0303 	bic.w	r3, r3, #3
 8012e80:	f043 0302 	orr.w	r3, r3, #2
 8012e84:	81a3      	strh	r3, [r4, #12]
 8012e86:	e7e3      	b.n	8012e50 <__smakebuf_r+0xc>
 8012e88:	4b0d      	ldr	r3, [pc, #52]	; (8012ec0 <__smakebuf_r+0x7c>)
 8012e8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e8c:	89a3      	ldrh	r3, [r4, #12]
 8012e8e:	6020      	str	r0, [r4, #0]
 8012e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e94:	81a3      	strh	r3, [r4, #12]
 8012e96:	9b00      	ldr	r3, [sp, #0]
 8012e98:	6163      	str	r3, [r4, #20]
 8012e9a:	9b01      	ldr	r3, [sp, #4]
 8012e9c:	6120      	str	r0, [r4, #16]
 8012e9e:	b15b      	cbz	r3, 8012eb8 <__smakebuf_r+0x74>
 8012ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f000 f8ad 	bl	8013004 <_isatty_r>
 8012eaa:	b128      	cbz	r0, 8012eb8 <__smakebuf_r+0x74>
 8012eac:	89a3      	ldrh	r3, [r4, #12]
 8012eae:	f023 0303 	bic.w	r3, r3, #3
 8012eb2:	f043 0301 	orr.w	r3, r3, #1
 8012eb6:	81a3      	strh	r3, [r4, #12]
 8012eb8:	89a0      	ldrh	r0, [r4, #12]
 8012eba:	4305      	orrs	r5, r0
 8012ebc:	81a5      	strh	r5, [r4, #12]
 8012ebe:	e7cd      	b.n	8012e5c <__smakebuf_r+0x18>
 8012ec0:	0800e9c1 	.word	0x0800e9c1

08012ec4 <memmove>:
 8012ec4:	4288      	cmp	r0, r1
 8012ec6:	b510      	push	{r4, lr}
 8012ec8:	eb01 0402 	add.w	r4, r1, r2
 8012ecc:	d902      	bls.n	8012ed4 <memmove+0x10>
 8012ece:	4284      	cmp	r4, r0
 8012ed0:	4623      	mov	r3, r4
 8012ed2:	d807      	bhi.n	8012ee4 <memmove+0x20>
 8012ed4:	1e43      	subs	r3, r0, #1
 8012ed6:	42a1      	cmp	r1, r4
 8012ed8:	d008      	beq.n	8012eec <memmove+0x28>
 8012eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ee2:	e7f8      	b.n	8012ed6 <memmove+0x12>
 8012ee4:	4402      	add	r2, r0
 8012ee6:	4601      	mov	r1, r0
 8012ee8:	428a      	cmp	r2, r1
 8012eea:	d100      	bne.n	8012eee <memmove+0x2a>
 8012eec:	bd10      	pop	{r4, pc}
 8012eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ef6:	e7f7      	b.n	8012ee8 <memmove+0x24>

08012ef8 <_realloc_r>:
 8012ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012efc:	4680      	mov	r8, r0
 8012efe:	4614      	mov	r4, r2
 8012f00:	460e      	mov	r6, r1
 8012f02:	b921      	cbnz	r1, 8012f0e <_realloc_r+0x16>
 8012f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f08:	4611      	mov	r1, r2
 8012f0a:	f7fb be89 	b.w	800ec20 <_malloc_r>
 8012f0e:	b92a      	cbnz	r2, 8012f1c <_realloc_r+0x24>
 8012f10:	f7ff fb6c 	bl	80125ec <_free_r>
 8012f14:	4625      	mov	r5, r4
 8012f16:	4628      	mov	r0, r5
 8012f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f1c:	f000 f882 	bl	8013024 <_malloc_usable_size_r>
 8012f20:	4284      	cmp	r4, r0
 8012f22:	4607      	mov	r7, r0
 8012f24:	d802      	bhi.n	8012f2c <_realloc_r+0x34>
 8012f26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f2a:	d812      	bhi.n	8012f52 <_realloc_r+0x5a>
 8012f2c:	4621      	mov	r1, r4
 8012f2e:	4640      	mov	r0, r8
 8012f30:	f7fb fe76 	bl	800ec20 <_malloc_r>
 8012f34:	4605      	mov	r5, r0
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d0ed      	beq.n	8012f16 <_realloc_r+0x1e>
 8012f3a:	42bc      	cmp	r4, r7
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	4631      	mov	r1, r6
 8012f40:	bf28      	it	cs
 8012f42:	463a      	movcs	r2, r7
 8012f44:	f7fb fe35 	bl	800ebb2 <memcpy>
 8012f48:	4631      	mov	r1, r6
 8012f4a:	4640      	mov	r0, r8
 8012f4c:	f7ff fb4e 	bl	80125ec <_free_r>
 8012f50:	e7e1      	b.n	8012f16 <_realloc_r+0x1e>
 8012f52:	4635      	mov	r5, r6
 8012f54:	e7df      	b.n	8012f16 <_realloc_r+0x1e>

08012f56 <_raise_r>:
 8012f56:	291f      	cmp	r1, #31
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	460d      	mov	r5, r1
 8012f5e:	d904      	bls.n	8012f6a <_raise_r+0x14>
 8012f60:	2316      	movs	r3, #22
 8012f62:	6003      	str	r3, [r0, #0]
 8012f64:	f04f 30ff 	mov.w	r0, #4294967295
 8012f68:	bd38      	pop	{r3, r4, r5, pc}
 8012f6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012f6c:	b112      	cbz	r2, 8012f74 <_raise_r+0x1e>
 8012f6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f72:	b94b      	cbnz	r3, 8012f88 <_raise_r+0x32>
 8012f74:	4620      	mov	r0, r4
 8012f76:	f000 f831 	bl	8012fdc <_getpid_r>
 8012f7a:	462a      	mov	r2, r5
 8012f7c:	4601      	mov	r1, r0
 8012f7e:	4620      	mov	r0, r4
 8012f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f84:	f000 b818 	b.w	8012fb8 <_kill_r>
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d00a      	beq.n	8012fa2 <_raise_r+0x4c>
 8012f8c:	1c59      	adds	r1, r3, #1
 8012f8e:	d103      	bne.n	8012f98 <_raise_r+0x42>
 8012f90:	2316      	movs	r3, #22
 8012f92:	6003      	str	r3, [r0, #0]
 8012f94:	2001      	movs	r0, #1
 8012f96:	e7e7      	b.n	8012f68 <_raise_r+0x12>
 8012f98:	2400      	movs	r4, #0
 8012f9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	4798      	blx	r3
 8012fa2:	2000      	movs	r0, #0
 8012fa4:	e7e0      	b.n	8012f68 <_raise_r+0x12>
	...

08012fa8 <raise>:
 8012fa8:	4b02      	ldr	r3, [pc, #8]	; (8012fb4 <raise+0xc>)
 8012faa:	4601      	mov	r1, r0
 8012fac:	6818      	ldr	r0, [r3, #0]
 8012fae:	f7ff bfd2 	b.w	8012f56 <_raise_r>
 8012fb2:	bf00      	nop
 8012fb4:	20000018 	.word	0x20000018

08012fb8 <_kill_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4d07      	ldr	r5, [pc, #28]	; (8012fd8 <_kill_r+0x20>)
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	4608      	mov	r0, r1
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	602b      	str	r3, [r5, #0]
 8012fc6:	f7f1 fdef 	bl	8004ba8 <_kill>
 8012fca:	1c43      	adds	r3, r0, #1
 8012fcc:	d102      	bne.n	8012fd4 <_kill_r+0x1c>
 8012fce:	682b      	ldr	r3, [r5, #0]
 8012fd0:	b103      	cbz	r3, 8012fd4 <_kill_r+0x1c>
 8012fd2:	6023      	str	r3, [r4, #0]
 8012fd4:	bd38      	pop	{r3, r4, r5, pc}
 8012fd6:	bf00      	nop
 8012fd8:	200051f4 	.word	0x200051f4

08012fdc <_getpid_r>:
 8012fdc:	f7f1 bddc 	b.w	8004b98 <_getpid>

08012fe0 <_fstat_r>:
 8012fe0:	b538      	push	{r3, r4, r5, lr}
 8012fe2:	4d07      	ldr	r5, [pc, #28]	; (8013000 <_fstat_r+0x20>)
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	4608      	mov	r0, r1
 8012fea:	4611      	mov	r1, r2
 8012fec:	602b      	str	r3, [r5, #0]
 8012fee:	f7f1 fe3a 	bl	8004c66 <_fstat>
 8012ff2:	1c43      	adds	r3, r0, #1
 8012ff4:	d102      	bne.n	8012ffc <_fstat_r+0x1c>
 8012ff6:	682b      	ldr	r3, [r5, #0]
 8012ff8:	b103      	cbz	r3, 8012ffc <_fstat_r+0x1c>
 8012ffa:	6023      	str	r3, [r4, #0]
 8012ffc:	bd38      	pop	{r3, r4, r5, pc}
 8012ffe:	bf00      	nop
 8013000:	200051f4 	.word	0x200051f4

08013004 <_isatty_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	4d06      	ldr	r5, [pc, #24]	; (8013020 <_isatty_r+0x1c>)
 8013008:	2300      	movs	r3, #0
 801300a:	4604      	mov	r4, r0
 801300c:	4608      	mov	r0, r1
 801300e:	602b      	str	r3, [r5, #0]
 8013010:	f7f1 fe39 	bl	8004c86 <_isatty>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d102      	bne.n	801301e <_isatty_r+0x1a>
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	b103      	cbz	r3, 801301e <_isatty_r+0x1a>
 801301c:	6023      	str	r3, [r4, #0]
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	200051f4 	.word	0x200051f4

08013024 <_malloc_usable_size_r>:
 8013024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013028:	1f18      	subs	r0, r3, #4
 801302a:	2b00      	cmp	r3, #0
 801302c:	bfbc      	itt	lt
 801302e:	580b      	ldrlt	r3, [r1, r0]
 8013030:	18c0      	addlt	r0, r0, r3
 8013032:	4770      	bx	lr

08013034 <atan2>:
 8013034:	f000 b800 	b.w	8013038 <__ieee754_atan2>

08013038 <__ieee754_atan2>:
 8013038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801303c:	ec57 6b11 	vmov	r6, r7, d1
 8013040:	4273      	negs	r3, r6
 8013042:	f8df e184 	ldr.w	lr, [pc, #388]	; 80131c8 <__ieee754_atan2+0x190>
 8013046:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801304a:	4333      	orrs	r3, r6
 801304c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013050:	4573      	cmp	r3, lr
 8013052:	ec51 0b10 	vmov	r0, r1, d0
 8013056:	ee11 8a10 	vmov	r8, s2
 801305a:	d80a      	bhi.n	8013072 <__ieee754_atan2+0x3a>
 801305c:	4244      	negs	r4, r0
 801305e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013062:	4304      	orrs	r4, r0
 8013064:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013068:	4574      	cmp	r4, lr
 801306a:	ee10 9a10 	vmov	r9, s0
 801306e:	468c      	mov	ip, r1
 8013070:	d907      	bls.n	8013082 <__ieee754_atan2+0x4a>
 8013072:	4632      	mov	r2, r6
 8013074:	463b      	mov	r3, r7
 8013076:	f7ed f921 	bl	80002bc <__adddf3>
 801307a:	ec41 0b10 	vmov	d0, r0, r1
 801307e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013082:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013086:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801308a:	4334      	orrs	r4, r6
 801308c:	d103      	bne.n	8013096 <__ieee754_atan2+0x5e>
 801308e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013092:	f000 b89d 	b.w	80131d0 <atan>
 8013096:	17bc      	asrs	r4, r7, #30
 8013098:	f004 0402 	and.w	r4, r4, #2
 801309c:	ea53 0909 	orrs.w	r9, r3, r9
 80130a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80130a4:	d107      	bne.n	80130b6 <__ieee754_atan2+0x7e>
 80130a6:	2c02      	cmp	r4, #2
 80130a8:	d060      	beq.n	801316c <__ieee754_atan2+0x134>
 80130aa:	2c03      	cmp	r4, #3
 80130ac:	d1e5      	bne.n	801307a <__ieee754_atan2+0x42>
 80130ae:	a142      	add	r1, pc, #264	; (adr r1, 80131b8 <__ieee754_atan2+0x180>)
 80130b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130b4:	e7e1      	b.n	801307a <__ieee754_atan2+0x42>
 80130b6:	ea52 0808 	orrs.w	r8, r2, r8
 80130ba:	d106      	bne.n	80130ca <__ieee754_atan2+0x92>
 80130bc:	f1bc 0f00 	cmp.w	ip, #0
 80130c0:	da5f      	bge.n	8013182 <__ieee754_atan2+0x14a>
 80130c2:	a13f      	add	r1, pc, #252	; (adr r1, 80131c0 <__ieee754_atan2+0x188>)
 80130c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130c8:	e7d7      	b.n	801307a <__ieee754_atan2+0x42>
 80130ca:	4572      	cmp	r2, lr
 80130cc:	d10f      	bne.n	80130ee <__ieee754_atan2+0xb6>
 80130ce:	4293      	cmp	r3, r2
 80130d0:	f104 34ff 	add.w	r4, r4, #4294967295
 80130d4:	d107      	bne.n	80130e6 <__ieee754_atan2+0xae>
 80130d6:	2c02      	cmp	r4, #2
 80130d8:	d84c      	bhi.n	8013174 <__ieee754_atan2+0x13c>
 80130da:	4b35      	ldr	r3, [pc, #212]	; (80131b0 <__ieee754_atan2+0x178>)
 80130dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80130e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80130e4:	e7c9      	b.n	801307a <__ieee754_atan2+0x42>
 80130e6:	2c02      	cmp	r4, #2
 80130e8:	d848      	bhi.n	801317c <__ieee754_atan2+0x144>
 80130ea:	4b32      	ldr	r3, [pc, #200]	; (80131b4 <__ieee754_atan2+0x17c>)
 80130ec:	e7f6      	b.n	80130dc <__ieee754_atan2+0xa4>
 80130ee:	4573      	cmp	r3, lr
 80130f0:	d0e4      	beq.n	80130bc <__ieee754_atan2+0x84>
 80130f2:	1a9b      	subs	r3, r3, r2
 80130f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80130f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80130fc:	da1e      	bge.n	801313c <__ieee754_atan2+0x104>
 80130fe:	2f00      	cmp	r7, #0
 8013100:	da01      	bge.n	8013106 <__ieee754_atan2+0xce>
 8013102:	323c      	adds	r2, #60	; 0x3c
 8013104:	db1e      	blt.n	8013144 <__ieee754_atan2+0x10c>
 8013106:	4632      	mov	r2, r6
 8013108:	463b      	mov	r3, r7
 801310a:	f7ed fbb7 	bl	800087c <__aeabi_ddiv>
 801310e:	ec41 0b10 	vmov	d0, r0, r1
 8013112:	f000 f9fd 	bl	8013510 <fabs>
 8013116:	f000 f85b 	bl	80131d0 <atan>
 801311a:	ec51 0b10 	vmov	r0, r1, d0
 801311e:	2c01      	cmp	r4, #1
 8013120:	d013      	beq.n	801314a <__ieee754_atan2+0x112>
 8013122:	2c02      	cmp	r4, #2
 8013124:	d015      	beq.n	8013152 <__ieee754_atan2+0x11a>
 8013126:	2c00      	cmp	r4, #0
 8013128:	d0a7      	beq.n	801307a <__ieee754_atan2+0x42>
 801312a:	a319      	add	r3, pc, #100	; (adr r3, 8013190 <__ieee754_atan2+0x158>)
 801312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013130:	f7ed f8c2 	bl	80002b8 <__aeabi_dsub>
 8013134:	a318      	add	r3, pc, #96	; (adr r3, 8013198 <__ieee754_atan2+0x160>)
 8013136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313a:	e014      	b.n	8013166 <__ieee754_atan2+0x12e>
 801313c:	a118      	add	r1, pc, #96	; (adr r1, 80131a0 <__ieee754_atan2+0x168>)
 801313e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013142:	e7ec      	b.n	801311e <__ieee754_atan2+0xe6>
 8013144:	2000      	movs	r0, #0
 8013146:	2100      	movs	r1, #0
 8013148:	e7e9      	b.n	801311e <__ieee754_atan2+0xe6>
 801314a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801314e:	4619      	mov	r1, r3
 8013150:	e793      	b.n	801307a <__ieee754_atan2+0x42>
 8013152:	a30f      	add	r3, pc, #60	; (adr r3, 8013190 <__ieee754_atan2+0x158>)
 8013154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013158:	f7ed f8ae 	bl	80002b8 <__aeabi_dsub>
 801315c:	4602      	mov	r2, r0
 801315e:	460b      	mov	r3, r1
 8013160:	a10d      	add	r1, pc, #52	; (adr r1, 8013198 <__ieee754_atan2+0x160>)
 8013162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013166:	f7ed f8a7 	bl	80002b8 <__aeabi_dsub>
 801316a:	e786      	b.n	801307a <__ieee754_atan2+0x42>
 801316c:	a10a      	add	r1, pc, #40	; (adr r1, 8013198 <__ieee754_atan2+0x160>)
 801316e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013172:	e782      	b.n	801307a <__ieee754_atan2+0x42>
 8013174:	a10c      	add	r1, pc, #48	; (adr r1, 80131a8 <__ieee754_atan2+0x170>)
 8013176:	e9d1 0100 	ldrd	r0, r1, [r1]
 801317a:	e77e      	b.n	801307a <__ieee754_atan2+0x42>
 801317c:	2000      	movs	r0, #0
 801317e:	2100      	movs	r1, #0
 8013180:	e77b      	b.n	801307a <__ieee754_atan2+0x42>
 8013182:	a107      	add	r1, pc, #28	; (adr r1, 80131a0 <__ieee754_atan2+0x168>)
 8013184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013188:	e777      	b.n	801307a <__ieee754_atan2+0x42>
 801318a:	bf00      	nop
 801318c:	f3af 8000 	nop.w
 8013190:	33145c07 	.word	0x33145c07
 8013194:	3ca1a626 	.word	0x3ca1a626
 8013198:	54442d18 	.word	0x54442d18
 801319c:	400921fb 	.word	0x400921fb
 80131a0:	54442d18 	.word	0x54442d18
 80131a4:	3ff921fb 	.word	0x3ff921fb
 80131a8:	54442d18 	.word	0x54442d18
 80131ac:	3fe921fb 	.word	0x3fe921fb
 80131b0:	08014038 	.word	0x08014038
 80131b4:	08014050 	.word	0x08014050
 80131b8:	54442d18 	.word	0x54442d18
 80131bc:	c00921fb 	.word	0xc00921fb
 80131c0:	54442d18 	.word	0x54442d18
 80131c4:	bff921fb 	.word	0xbff921fb
 80131c8:	7ff00000 	.word	0x7ff00000
 80131cc:	00000000 	.word	0x00000000

080131d0 <atan>:
 80131d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d4:	ec55 4b10 	vmov	r4, r5, d0
 80131d8:	4bc3      	ldr	r3, [pc, #780]	; (80134e8 <atan+0x318>)
 80131da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80131de:	429e      	cmp	r6, r3
 80131e0:	46ab      	mov	fp, r5
 80131e2:	dd18      	ble.n	8013216 <atan+0x46>
 80131e4:	4bc1      	ldr	r3, [pc, #772]	; (80134ec <atan+0x31c>)
 80131e6:	429e      	cmp	r6, r3
 80131e8:	dc01      	bgt.n	80131ee <atan+0x1e>
 80131ea:	d109      	bne.n	8013200 <atan+0x30>
 80131ec:	b144      	cbz	r4, 8013200 <atan+0x30>
 80131ee:	4622      	mov	r2, r4
 80131f0:	462b      	mov	r3, r5
 80131f2:	4620      	mov	r0, r4
 80131f4:	4629      	mov	r1, r5
 80131f6:	f7ed f861 	bl	80002bc <__adddf3>
 80131fa:	4604      	mov	r4, r0
 80131fc:	460d      	mov	r5, r1
 80131fe:	e006      	b.n	801320e <atan+0x3e>
 8013200:	f1bb 0f00 	cmp.w	fp, #0
 8013204:	f300 8131 	bgt.w	801346a <atan+0x29a>
 8013208:	a59b      	add	r5, pc, #620	; (adr r5, 8013478 <atan+0x2a8>)
 801320a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801320e:	ec45 4b10 	vmov	d0, r4, r5
 8013212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013216:	4bb6      	ldr	r3, [pc, #728]	; (80134f0 <atan+0x320>)
 8013218:	429e      	cmp	r6, r3
 801321a:	dc14      	bgt.n	8013246 <atan+0x76>
 801321c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013220:	429e      	cmp	r6, r3
 8013222:	dc0d      	bgt.n	8013240 <atan+0x70>
 8013224:	a396      	add	r3, pc, #600	; (adr r3, 8013480 <atan+0x2b0>)
 8013226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322a:	ee10 0a10 	vmov	r0, s0
 801322e:	4629      	mov	r1, r5
 8013230:	f7ed f844 	bl	80002bc <__adddf3>
 8013234:	4baf      	ldr	r3, [pc, #700]	; (80134f4 <atan+0x324>)
 8013236:	2200      	movs	r2, #0
 8013238:	f7ed fc86 	bl	8000b48 <__aeabi_dcmpgt>
 801323c:	2800      	cmp	r0, #0
 801323e:	d1e6      	bne.n	801320e <atan+0x3e>
 8013240:	f04f 3aff 	mov.w	sl, #4294967295
 8013244:	e02b      	b.n	801329e <atan+0xce>
 8013246:	f000 f963 	bl	8013510 <fabs>
 801324a:	4bab      	ldr	r3, [pc, #684]	; (80134f8 <atan+0x328>)
 801324c:	429e      	cmp	r6, r3
 801324e:	ec55 4b10 	vmov	r4, r5, d0
 8013252:	f300 80bf 	bgt.w	80133d4 <atan+0x204>
 8013256:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801325a:	429e      	cmp	r6, r3
 801325c:	f300 80a0 	bgt.w	80133a0 <atan+0x1d0>
 8013260:	ee10 2a10 	vmov	r2, s0
 8013264:	ee10 0a10 	vmov	r0, s0
 8013268:	462b      	mov	r3, r5
 801326a:	4629      	mov	r1, r5
 801326c:	f7ed f826 	bl	80002bc <__adddf3>
 8013270:	4ba0      	ldr	r3, [pc, #640]	; (80134f4 <atan+0x324>)
 8013272:	2200      	movs	r2, #0
 8013274:	f7ed f820 	bl	80002b8 <__aeabi_dsub>
 8013278:	2200      	movs	r2, #0
 801327a:	4606      	mov	r6, r0
 801327c:	460f      	mov	r7, r1
 801327e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013282:	4620      	mov	r0, r4
 8013284:	4629      	mov	r1, r5
 8013286:	f7ed f819 	bl	80002bc <__adddf3>
 801328a:	4602      	mov	r2, r0
 801328c:	460b      	mov	r3, r1
 801328e:	4630      	mov	r0, r6
 8013290:	4639      	mov	r1, r7
 8013292:	f7ed faf3 	bl	800087c <__aeabi_ddiv>
 8013296:	f04f 0a00 	mov.w	sl, #0
 801329a:	4604      	mov	r4, r0
 801329c:	460d      	mov	r5, r1
 801329e:	4622      	mov	r2, r4
 80132a0:	462b      	mov	r3, r5
 80132a2:	4620      	mov	r0, r4
 80132a4:	4629      	mov	r1, r5
 80132a6:	f7ed f9bf 	bl	8000628 <__aeabi_dmul>
 80132aa:	4602      	mov	r2, r0
 80132ac:	460b      	mov	r3, r1
 80132ae:	4680      	mov	r8, r0
 80132b0:	4689      	mov	r9, r1
 80132b2:	f7ed f9b9 	bl	8000628 <__aeabi_dmul>
 80132b6:	a374      	add	r3, pc, #464	; (adr r3, 8013488 <atan+0x2b8>)
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	4606      	mov	r6, r0
 80132be:	460f      	mov	r7, r1
 80132c0:	f7ed f9b2 	bl	8000628 <__aeabi_dmul>
 80132c4:	a372      	add	r3, pc, #456	; (adr r3, 8013490 <atan+0x2c0>)
 80132c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ca:	f7ec fff7 	bl	80002bc <__adddf3>
 80132ce:	4632      	mov	r2, r6
 80132d0:	463b      	mov	r3, r7
 80132d2:	f7ed f9a9 	bl	8000628 <__aeabi_dmul>
 80132d6:	a370      	add	r3, pc, #448	; (adr r3, 8013498 <atan+0x2c8>)
 80132d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132dc:	f7ec ffee 	bl	80002bc <__adddf3>
 80132e0:	4632      	mov	r2, r6
 80132e2:	463b      	mov	r3, r7
 80132e4:	f7ed f9a0 	bl	8000628 <__aeabi_dmul>
 80132e8:	a36d      	add	r3, pc, #436	; (adr r3, 80134a0 <atan+0x2d0>)
 80132ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ee:	f7ec ffe5 	bl	80002bc <__adddf3>
 80132f2:	4632      	mov	r2, r6
 80132f4:	463b      	mov	r3, r7
 80132f6:	f7ed f997 	bl	8000628 <__aeabi_dmul>
 80132fa:	a36b      	add	r3, pc, #428	; (adr r3, 80134a8 <atan+0x2d8>)
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	f7ec ffdc 	bl	80002bc <__adddf3>
 8013304:	4632      	mov	r2, r6
 8013306:	463b      	mov	r3, r7
 8013308:	f7ed f98e 	bl	8000628 <__aeabi_dmul>
 801330c:	a368      	add	r3, pc, #416	; (adr r3, 80134b0 <atan+0x2e0>)
 801330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013312:	f7ec ffd3 	bl	80002bc <__adddf3>
 8013316:	4642      	mov	r2, r8
 8013318:	464b      	mov	r3, r9
 801331a:	f7ed f985 	bl	8000628 <__aeabi_dmul>
 801331e:	a366      	add	r3, pc, #408	; (adr r3, 80134b8 <atan+0x2e8>)
 8013320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013324:	4680      	mov	r8, r0
 8013326:	4689      	mov	r9, r1
 8013328:	4630      	mov	r0, r6
 801332a:	4639      	mov	r1, r7
 801332c:	f7ed f97c 	bl	8000628 <__aeabi_dmul>
 8013330:	a363      	add	r3, pc, #396	; (adr r3, 80134c0 <atan+0x2f0>)
 8013332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013336:	f7ec ffbf 	bl	80002b8 <__aeabi_dsub>
 801333a:	4632      	mov	r2, r6
 801333c:	463b      	mov	r3, r7
 801333e:	f7ed f973 	bl	8000628 <__aeabi_dmul>
 8013342:	a361      	add	r3, pc, #388	; (adr r3, 80134c8 <atan+0x2f8>)
 8013344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013348:	f7ec ffb6 	bl	80002b8 <__aeabi_dsub>
 801334c:	4632      	mov	r2, r6
 801334e:	463b      	mov	r3, r7
 8013350:	f7ed f96a 	bl	8000628 <__aeabi_dmul>
 8013354:	a35e      	add	r3, pc, #376	; (adr r3, 80134d0 <atan+0x300>)
 8013356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335a:	f7ec ffad 	bl	80002b8 <__aeabi_dsub>
 801335e:	4632      	mov	r2, r6
 8013360:	463b      	mov	r3, r7
 8013362:	f7ed f961 	bl	8000628 <__aeabi_dmul>
 8013366:	a35c      	add	r3, pc, #368	; (adr r3, 80134d8 <atan+0x308>)
 8013368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336c:	f7ec ffa4 	bl	80002b8 <__aeabi_dsub>
 8013370:	4632      	mov	r2, r6
 8013372:	463b      	mov	r3, r7
 8013374:	f7ed f958 	bl	8000628 <__aeabi_dmul>
 8013378:	4602      	mov	r2, r0
 801337a:	460b      	mov	r3, r1
 801337c:	4640      	mov	r0, r8
 801337e:	4649      	mov	r1, r9
 8013380:	f7ec ff9c 	bl	80002bc <__adddf3>
 8013384:	4622      	mov	r2, r4
 8013386:	462b      	mov	r3, r5
 8013388:	f7ed f94e 	bl	8000628 <__aeabi_dmul>
 801338c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013390:	4602      	mov	r2, r0
 8013392:	460b      	mov	r3, r1
 8013394:	d14b      	bne.n	801342e <atan+0x25e>
 8013396:	4620      	mov	r0, r4
 8013398:	4629      	mov	r1, r5
 801339a:	f7ec ff8d 	bl	80002b8 <__aeabi_dsub>
 801339e:	e72c      	b.n	80131fa <atan+0x2a>
 80133a0:	ee10 0a10 	vmov	r0, s0
 80133a4:	4b53      	ldr	r3, [pc, #332]	; (80134f4 <atan+0x324>)
 80133a6:	2200      	movs	r2, #0
 80133a8:	4629      	mov	r1, r5
 80133aa:	f7ec ff85 	bl	80002b8 <__aeabi_dsub>
 80133ae:	4b51      	ldr	r3, [pc, #324]	; (80134f4 <atan+0x324>)
 80133b0:	4606      	mov	r6, r0
 80133b2:	460f      	mov	r7, r1
 80133b4:	2200      	movs	r2, #0
 80133b6:	4620      	mov	r0, r4
 80133b8:	4629      	mov	r1, r5
 80133ba:	f7ec ff7f 	bl	80002bc <__adddf3>
 80133be:	4602      	mov	r2, r0
 80133c0:	460b      	mov	r3, r1
 80133c2:	4630      	mov	r0, r6
 80133c4:	4639      	mov	r1, r7
 80133c6:	f7ed fa59 	bl	800087c <__aeabi_ddiv>
 80133ca:	f04f 0a01 	mov.w	sl, #1
 80133ce:	4604      	mov	r4, r0
 80133d0:	460d      	mov	r5, r1
 80133d2:	e764      	b.n	801329e <atan+0xce>
 80133d4:	4b49      	ldr	r3, [pc, #292]	; (80134fc <atan+0x32c>)
 80133d6:	429e      	cmp	r6, r3
 80133d8:	da1d      	bge.n	8013416 <atan+0x246>
 80133da:	ee10 0a10 	vmov	r0, s0
 80133de:	4b48      	ldr	r3, [pc, #288]	; (8013500 <atan+0x330>)
 80133e0:	2200      	movs	r2, #0
 80133e2:	4629      	mov	r1, r5
 80133e4:	f7ec ff68 	bl	80002b8 <__aeabi_dsub>
 80133e8:	4b45      	ldr	r3, [pc, #276]	; (8013500 <atan+0x330>)
 80133ea:	4606      	mov	r6, r0
 80133ec:	460f      	mov	r7, r1
 80133ee:	2200      	movs	r2, #0
 80133f0:	4620      	mov	r0, r4
 80133f2:	4629      	mov	r1, r5
 80133f4:	f7ed f918 	bl	8000628 <__aeabi_dmul>
 80133f8:	4b3e      	ldr	r3, [pc, #248]	; (80134f4 <atan+0x324>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	f7ec ff5e 	bl	80002bc <__adddf3>
 8013400:	4602      	mov	r2, r0
 8013402:	460b      	mov	r3, r1
 8013404:	4630      	mov	r0, r6
 8013406:	4639      	mov	r1, r7
 8013408:	f7ed fa38 	bl	800087c <__aeabi_ddiv>
 801340c:	f04f 0a02 	mov.w	sl, #2
 8013410:	4604      	mov	r4, r0
 8013412:	460d      	mov	r5, r1
 8013414:	e743      	b.n	801329e <atan+0xce>
 8013416:	462b      	mov	r3, r5
 8013418:	ee10 2a10 	vmov	r2, s0
 801341c:	4939      	ldr	r1, [pc, #228]	; (8013504 <atan+0x334>)
 801341e:	2000      	movs	r0, #0
 8013420:	f7ed fa2c 	bl	800087c <__aeabi_ddiv>
 8013424:	f04f 0a03 	mov.w	sl, #3
 8013428:	4604      	mov	r4, r0
 801342a:	460d      	mov	r5, r1
 801342c:	e737      	b.n	801329e <atan+0xce>
 801342e:	4b36      	ldr	r3, [pc, #216]	; (8013508 <atan+0x338>)
 8013430:	4e36      	ldr	r6, [pc, #216]	; (801350c <atan+0x33c>)
 8013432:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013436:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801343a:	e9da 2300 	ldrd	r2, r3, [sl]
 801343e:	f7ec ff3b 	bl	80002b8 <__aeabi_dsub>
 8013442:	4622      	mov	r2, r4
 8013444:	462b      	mov	r3, r5
 8013446:	f7ec ff37 	bl	80002b8 <__aeabi_dsub>
 801344a:	4602      	mov	r2, r0
 801344c:	460b      	mov	r3, r1
 801344e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013452:	f7ec ff31 	bl	80002b8 <__aeabi_dsub>
 8013456:	f1bb 0f00 	cmp.w	fp, #0
 801345a:	4604      	mov	r4, r0
 801345c:	460d      	mov	r5, r1
 801345e:	f6bf aed6 	bge.w	801320e <atan+0x3e>
 8013462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013466:	461d      	mov	r5, r3
 8013468:	e6d1      	b.n	801320e <atan+0x3e>
 801346a:	a51d      	add	r5, pc, #116	; (adr r5, 80134e0 <atan+0x310>)
 801346c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013470:	e6cd      	b.n	801320e <atan+0x3e>
 8013472:	bf00      	nop
 8013474:	f3af 8000 	nop.w
 8013478:	54442d18 	.word	0x54442d18
 801347c:	bff921fb 	.word	0xbff921fb
 8013480:	8800759c 	.word	0x8800759c
 8013484:	7e37e43c 	.word	0x7e37e43c
 8013488:	e322da11 	.word	0xe322da11
 801348c:	3f90ad3a 	.word	0x3f90ad3a
 8013490:	24760deb 	.word	0x24760deb
 8013494:	3fa97b4b 	.word	0x3fa97b4b
 8013498:	a0d03d51 	.word	0xa0d03d51
 801349c:	3fb10d66 	.word	0x3fb10d66
 80134a0:	c54c206e 	.word	0xc54c206e
 80134a4:	3fb745cd 	.word	0x3fb745cd
 80134a8:	920083ff 	.word	0x920083ff
 80134ac:	3fc24924 	.word	0x3fc24924
 80134b0:	5555550d 	.word	0x5555550d
 80134b4:	3fd55555 	.word	0x3fd55555
 80134b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80134bc:	bfa2b444 	.word	0xbfa2b444
 80134c0:	52defd9a 	.word	0x52defd9a
 80134c4:	3fadde2d 	.word	0x3fadde2d
 80134c8:	af749a6d 	.word	0xaf749a6d
 80134cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80134d0:	fe231671 	.word	0xfe231671
 80134d4:	3fbc71c6 	.word	0x3fbc71c6
 80134d8:	9998ebc4 	.word	0x9998ebc4
 80134dc:	3fc99999 	.word	0x3fc99999
 80134e0:	54442d18 	.word	0x54442d18
 80134e4:	3ff921fb 	.word	0x3ff921fb
 80134e8:	440fffff 	.word	0x440fffff
 80134ec:	7ff00000 	.word	0x7ff00000
 80134f0:	3fdbffff 	.word	0x3fdbffff
 80134f4:	3ff00000 	.word	0x3ff00000
 80134f8:	3ff2ffff 	.word	0x3ff2ffff
 80134fc:	40038000 	.word	0x40038000
 8013500:	3ff80000 	.word	0x3ff80000
 8013504:	bff00000 	.word	0xbff00000
 8013508:	08014088 	.word	0x08014088
 801350c:	08014068 	.word	0x08014068

08013510 <fabs>:
 8013510:	ec51 0b10 	vmov	r0, r1, d0
 8013514:	ee10 2a10 	vmov	r2, s0
 8013518:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801351c:	ec43 2b10 	vmov	d0, r2, r3
 8013520:	4770      	bx	lr
	...

08013524 <_init>:
 8013524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013526:	bf00      	nop
 8013528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801352a:	bc08      	pop	{r3}
 801352c:	469e      	mov	lr, r3
 801352e:	4770      	bx	lr

08013530 <_fini>:
 8013530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013532:	bf00      	nop
 8013534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013536:	bc08      	pop	{r3}
 8013538:	469e      	mov	lr, r3
 801353a:	4770      	bx	lr
