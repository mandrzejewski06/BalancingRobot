
BalancingRobotF4V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  08013120  08013120  00023120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bd8  08013bd8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013bd8  08013bd8  00023bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013be0  08013be0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013be0  08013be0  00023be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013be4  08013be4  00023be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08013be8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000501c  200001e8  08013dd0  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00002804  20005204  08013dd0  00035204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002433f  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d69  00000000  00000000  00054557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  000592c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a38  00000000  00000000  0005aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d145  00000000  00000000  0005c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000229c7  00000000  00000000  00079a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab04  00000000  00000000  0009c43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146f40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c30  00000000  00000000  00146f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013104 	.word	0x08013104

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08013104 	.word	0x08013104

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <DRV8834_setRobotState>:
static uint16_t maxFrequency = DRV8834_MOT_DEFAULT_MAX_FREQ;
static RoborState_t state;



void DRV8834_setRobotState(uint16_t st) { state = st;}
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <DRV8834_setRobotState+0x20>)
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000204 	.word	0x20000204

0800104c <DRV8834_setMaxSpeed>:
void DRV8834_setMaxSpeed(uint16_t spd) { maxSpeed = spd;}
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <DRV8834_setMaxSpeed+0x1c>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	8013      	strh	r3, [r2, #0]
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000000 	.word	0x20000000

0800106c <DRV8834_setMaxFreq>:
void DRV8834_setMaxFreq(uint16_t freq) { maxFrequency = freq; }
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <DRV8834_setMaxFreq+0x1c>)
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	8013      	strh	r3, [r2, #0]
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000002 	.word	0x20000002

0800108c <DRV8834_getRobotState>:
uint16_t DRV8834_getRobotState(void) { return state; }
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <DRV8834_getRobotState+0x14>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000204 	.word	0x20000204

080010a4 <DRV8834_getMaxSpeed>:
uint16_t DRV8834_getMaxSpeed(void) { return maxSpeed; }
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <DRV8834_getMaxSpeed+0x14>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <DRV8834_getMaxFreq>:
uint16_t DRV8834_getMaxFreq(void) { return maxFrequency; }
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <DRV8834_getMaxFreq+0x14>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000002 	.word	0x20000002

080010d4 <DRV8834_Init>:

void DRV8834_Init(StepMotor_t *stepMotor, TIM_HandleTypeDef *htim, uint32_t channel)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	stepMotor->PWM_timer = htim;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	61da      	str	r2, [r3, #28]
	stepMotor->PWM_timerChannel = channel;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	621a      	str	r2, [r3, #32]
	stepMotor->direction = __MOTOR_FWD;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	stepMotor->last_counter = 0;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DRV8834_InitPins>:

void DRV8834_InitPins(StepMotor_t *stepMotor, uint16_t dirPin, GPIO_TypeDef* dirPort, uint16_t m0Pin, GPIO_TypeDef* m0Port, uint16_t m1Pin, GPIO_TypeDef* m1Port)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	461a      	mov	r2, r3
 8001110:	460b      	mov	r3, r1
 8001112:	817b      	strh	r3, [r7, #10]
 8001114:	4613      	mov	r3, r2
 8001116:	813b      	strh	r3, [r7, #8]
	stepMotor->step_motor_pins.DIR_PIN = dirPin;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	897a      	ldrh	r2, [r7, #10]
 800111c:	809a      	strh	r2, [r3, #4]
	stepMotor->step_motor_pins.DIR_PORT = dirPort;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]

	stepMotor->step_motor_pins.M0_PIN = m0Pin;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	893a      	ldrh	r2, [r7, #8]
 8001128:	819a      	strh	r2, [r3, #12]
	stepMotor->step_motor_pins.M0_PORT = m0Port;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	611a      	str	r2, [r3, #16]

	stepMotor->step_motor_pins.M1_PIN = m1Pin;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8bba      	ldrh	r2, [r7, #28]
 8001134:	829a      	strh	r2, [r3, #20]
	stepMotor->step_motor_pins.M1_PORT = m1Port;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a3a      	ldr	r2, [r7, #32]
 800113a:	619a      	str	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DeinitializePin>:

void DeinitializePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint16_t Mode)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	803b      	strh	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

	if(Mode == GPIO_MODE_OUTPUT_PP)
 8001168:	883b      	ldrh	r3, [r7, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10e      	bne.n	800118c <DeinitializePin+0x44>
	{
		//HAL_GPIO_DeInit(GPIOx, GPIO_Pin); // CZY POTRZEBNE?
		GPIO_InitStruct.Pin = GPIO_Pin;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8001172:	883b      	ldrh	r3, [r7, #0]
 8001174:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f004 ffd7 	bl	8006138 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_Pin;
		GPIO_InitStruct.Mode = Mode;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 800118a:	e00e      	b.n	80011aa <DeinitializePin+0x62>
	else if (Mode == GPIO_MODE_INPUT)
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10b      	bne.n	80011aa <DeinitializePin+0x62>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f004 ffc7 	bl	8006138 <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <DRV8834_SetMicrostep>:

uint8_t DRV8834_SetMicrostep(StepMotor_t *stepMotor, uint8_t microstep)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
     *  1  Z    32
     *
     *  Z = high impedance mode (M0 is three-state)
     */

	if(state != STOPPED)
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <DRV8834_SetMicrostep+0x13c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <DRV8834_SetMicrostep+0x18>
	{
		return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e08d      	b.n	80012e8 <DRV8834_SetMicrostep+0x134>
	}

	switch(microstep)
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	2b1f      	cmp	r3, #31
 80011d2:	d86e      	bhi.n	80012b2 <DRV8834_SetMicrostep+0xfe>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <DRV8834_SetMicrostep+0x28>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	0800125d 	.word	0x0800125d
 80011e0:	0800127f 	.word	0x0800127f
 80011e4:	080012b3 	.word	0x080012b3
 80011e8:	080012a1 	.word	0x080012a1
 80011ec:	080012b3 	.word	0x080012b3
 80011f0:	080012b3 	.word	0x080012b3
 80011f4:	080012b3 	.word	0x080012b3
 80011f8:	0800125d 	.word	0x0800125d
 80011fc:	080012b3 	.word	0x080012b3
 8001200:	080012b3 	.word	0x080012b3
 8001204:	080012b3 	.word	0x080012b3
 8001208:	080012b3 	.word	0x080012b3
 800120c:	080012b3 	.word	0x080012b3
 8001210:	080012b3 	.word	0x080012b3
 8001214:	080012b3 	.word	0x080012b3
 8001218:	0800127f 	.word	0x0800127f
 800121c:	080012b3 	.word	0x080012b3
 8001220:	080012b3 	.word	0x080012b3
 8001224:	080012b3 	.word	0x080012b3
 8001228:	080012b3 	.word	0x080012b3
 800122c:	080012b3 	.word	0x080012b3
 8001230:	080012b3 	.word	0x080012b3
 8001234:	080012b3 	.word	0x080012b3
 8001238:	080012b3 	.word	0x080012b3
 800123c:	080012b3 	.word	0x080012b3
 8001240:	080012b3 	.word	0x080012b3
 8001244:	080012b3 	.word	0x080012b3
 8001248:	080012b3 	.word	0x080012b3
 800124c:	080012b3 	.word	0x080012b3
 8001250:	080012b3 	.word	0x080012b3
 8001254:	080012b3 	.word	0x080012b3
 8001258:	080012a1 	.word	0x080012a1
	{
	case 1:
	case 8:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6918      	ldr	r0, [r3, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	899b      	ldrh	r3, [r3, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff ff6e 	bl	8001148 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_RESET);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6918      	ldr	r0, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	899b      	ldrh	r3, [r3, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	4619      	mov	r1, r3
 8001278:	f005 f8e2 	bl	8006440 <HAL_GPIO_WritePin>
		break;
 800127c:	e01b      	b.n	80012b6 <DRV8834_SetMicrostep+0x102>
	case 2:
	case 16:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6918      	ldr	r0, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	899b      	ldrh	r3, [r3, #12]
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff ff5d 	bl	8001148 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_SET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6918      	ldr	r0, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	899b      	ldrh	r3, [r3, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f005 f8d1 	bl	8006440 <HAL_GPIO_WritePin>
		break;
 800129e:	e00a      	b.n	80012b6 <DRV8834_SetMicrostep+0x102>
	case 4:
	case 32:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_INPUT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6918      	ldr	r0, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff ff4c 	bl	8001148 <DeinitializePin>
		break;
 80012b0:	e001      	b.n	80012b6 <DRV8834_SetMicrostep+0x102>
	default:
		return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e018      	b.n	80012e8 <DRV8834_SetMicrostep+0x134>
	}

	if(microstep < 8)
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	d808      	bhi.n	80012ce <DRV8834_SetMicrostep+0x11a>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_RESET);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6998      	ldr	r0, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8a9b      	ldrh	r3, [r3, #20]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f005 f8ba 	bl	8006440 <HAL_GPIO_WritePin>
 80012cc:	e007      	b.n	80012de <DRV8834_SetMicrostep+0x12a>
	}
	else
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_SET);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6998      	ldr	r0, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8a9b      	ldrh	r3, [r3, #20]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	f005 f8b1 	bl	8006440 <HAL_GPIO_WritePin>
	}

	stepMotor->microstep = microstep;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	78fa      	ldrb	r2, [r7, #3]
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000204 	.word	0x20000204

080012f4 <DRV8834_StopMotor>:

void DRV8834_StopMotor(StepMotor_t *stepMotor)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, 0); // CZY POTRZEBNE?
	HAL_TIM_PWM_Stop(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f006 ff6c 	bl	80081e4 <HAL_TIM_PWM_Stop>
	state = STOPPED;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <DRV8834_StopMotor+0x28>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000204 	.word	0x20000204

08001320 <DRV8834_SetDirection>:

static void DRV8834_SetDirection(StepMotor_t *stepMotor, StepMotorDirection_t dir)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	if((dir == __MOTOR_FWD) || (dir == __MOTOR_BACK))
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <DRV8834_SetDirection+0x18>
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10a      	bne.n	800134e <DRV8834_SetDirection+0x2e>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.DIR_PORT, stepMotor->step_motor_pins.DIR_PIN, dir);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6898      	ldr	r0, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4619      	mov	r1, r3
 8001344:	f005 f87c 	bl	8006440 <HAL_GPIO_WritePin>
		stepMotor->direction = dir;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	701a      	strb	r2, [r3, #0]
	}
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <DRV8834_SetSpeed>:

void DRV8834_SetSpeed(StepMotor_t *stepMotor, int32_t speed)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if((speed < 0) && (stepMotor->direction == __MOTOR_FWD))
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da08      	bge.n	800137a <DRV8834_SetSpeed+0x22>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <DRV8834_SetSpeed+0x22>
	{
		DRV8834_SetDirection(stepMotor, __MOTOR_BACK);
 8001370:	2101      	movs	r1, #1
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffd4 	bl	8001320 <DRV8834_SetDirection>
 8001378:	e00a      	b.n	8001390 <DRV8834_SetSpeed+0x38>
	}
	else if((speed > 0) && (stepMotor->direction == __MOTOR_BACK))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dd07      	ble.n	8001390 <DRV8834_SetSpeed+0x38>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d103      	bne.n	8001390 <DRV8834_SetSpeed+0x38>
	{
		DRV8834_SetDirection(stepMotor, __MOTOR_FWD);
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffc8 	bl	8001320 <DRV8834_SetDirection>
	}

	if(speed < 0)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da04      	bge.n	80013a0 <DRV8834_SetSpeed+0x48>
	{
		speed = ABS(speed);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bfb8      	it	lt
 800139c:	425b      	neglt	r3, r3
 800139e:	603b      	str	r3, [r7, #0]
	}
	if(speed > maxSpeed)
 80013a0:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <DRV8834_SetSpeed+0x19c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	dd02      	ble.n	80013b2 <DRV8834_SetSpeed+0x5a>
	{
		speed = maxSpeed;
 80013ac:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <DRV8834_SetSpeed+0x19c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	603b      	str	r3, [r7, #0]
	}

	freq = (speed * (stepMotor->microstep*(maxFrequency - DRV8834_MOT_MIN_FREQ))) / maxSpeed;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <DRV8834_SetSpeed+0x1a0>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <DRV8834_SetSpeed+0x19c>)
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]

#if USING_WHICH_TIMERS == APB1
	if(freq != 0)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <DRV8834_SetSpeed+0x9e>
		counter = PCLK_PRESCALER*HAL_RCC_GetPCLK1Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
 80013da:	f006 fc93 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 80013de:	4603      	mov	r3, r0
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e001      	b.n	80013fa <DRV8834_SetSpeed+0xa2>
	else
		counter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
#elif USING_WHICH_TIMERS == APB2
		counter = PCLK_PRESCALER*HAL_RCC_GetPCLK2Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
#else
#error "Choose between APB1 timers or APB2 timers or reimplement code if using both"
#endif
	if(stepMotor->last_counter != counter)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d072      	beq.n	80014ea <DRV8834_SetSpeed+0x192>
	{
		if(counter == 0)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d131      	bne.n	800146e <DRV8834_SetSpeed+0x116>
		{
			__HAL_TIM_SET_COUNTER(stepMotor->PWM_timer, 0);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(stepMotor->PWM_timer, 0);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, 0);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <DRV8834_SetSpeed+0xe2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
 8001438:	e054      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b04      	cmp	r3, #4
 8001440:	d105      	bne.n	800144e <DRV8834_SetSpeed+0xf6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
 800144c:	e04a      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d105      	bne.n	8001462 <DRV8834_SetSpeed+0x10a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001460:	e040      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	e03a      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
		}
		else
		{
			__HAL_TIM_SET_COUNTER(stepMotor->PWM_timer, 0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_AUTORELOAD(stepMotor->PWM_timer, counter - 1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	3a01      	subs	r2, #1
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	3a01      	subs	r2, #1
 800148c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, (counter/2) - 1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <DRV8834_SetSpeed+0x14e>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	085a      	lsrs	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
 80014a4:	e01e      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d107      	bne.n	80014be <DRV8834_SetSpeed+0x166>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	69d2      	ldr	r2, [r2, #28]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	6393      	str	r3, [r2, #56]	; 0x38
 80014bc:	e012      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d107      	bne.n	80014d6 <DRV8834_SetSpeed+0x17e>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	69d2      	ldr	r2, [r2, #28]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014d4:	e006      	b.n	80014e4 <DRV8834_SetSpeed+0x18c>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	69d2      	ldr	r2, [r2, #28]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
		}
		stepMotor->last_counter = counter;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000002 	.word	0x20000002

080014fc <DRV8834_StartMotor>:

void DRV8834_StartMotor(StepMotor_t *stepMotor, int32_t speed)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	state = BALANCING;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <DRV8834_StartMotor+0x30>)
 8001508:	2205      	movs	r2, #5
 800150a:	701a      	strb	r2, [r3, #0]

	DRV8834_SetSpeed(stepMotor, speed);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff22 	bl	8001358 <DRV8834_SetSpeed>

	HAL_TIM_PWM_Start(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69da      	ldr	r2, [r3, #28]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f006 fdb0 	bl	8008084 <HAL_TIM_PWM_Start>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000204 	.word	0x20000204

08001530 <LSM6_InitEx>:
#include "LSM6.h"
#include "main.h"
#include "math.h"

bool LSM6_InitEx(I2C_HandleTypeDef *i2c, LSM6_t *LSM6, deviceType device, sa0State sa0)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	460b      	mov	r3, r1
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	4613      	mov	r3, r2
 8001544:	71bb      	strb	r3, [r7, #6]
	LSM6->i2c = i2c;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
	LSM6->_device = device;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	711a      	strb	r2, [r3, #4]
	LSM6->io_timeout = DEFAULT_TIMEOUT;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	80da      	strh	r2, [r3, #6]
	LSM6->did_timeout = false;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
	LSM6->did_error = false;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2200      	movs	r2, #0
 8001564:	725a      	strb	r2, [r3, #9]

	// perform auto-detection unless device type and SA0 state were both specified
	if (device == device_autoDetect || sa0 == sa0_autoDetect)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d002      	beq.n	8001572 <LSM6_InitEx+0x42>
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d12f      	bne.n	80015d2 <LSM6_InitEx+0xa2>
	{
		// check for LSM6DS33 if device is unidentified or was specified to be this type
		if (device == device_autoDetect || device == device_DS33)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d002      	beq.n	800157e <LSM6_InitEx+0x4e>
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d124      	bne.n	80015c8 <LSM6_InitEx+0x98>
		{
			// check SA0 high address unless SA0 was specified to be low
			if (sa0 != sa0_low && testReg(LSM6, DS33_SA0_HIGH_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00f      	beq.n	80015a4 <LSM6_InitEx+0x74>
 8001584:	220f      	movs	r2, #15
 8001586:	216b      	movs	r1, #107	; 0x6b
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 f83b 	bl	8001604 <testReg>
 800158e:	4603      	mov	r3, r0
 8001590:	2b69      	cmp	r3, #105	; 0x69
 8001592:	d107      	bne.n	80015a4 <LSM6_InitEx+0x74>
			{
				sa0 = sa0_high;
 8001594:	2301      	movs	r3, #1
 8001596:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d114      	bne.n	80015c8 <LSM6_InitEx+0x98>
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e011      	b.n	80015c8 <LSM6_InitEx+0x98>
			}
			// check SA0 low address unless SA0 was specified to be high
			else if (sa0 != sa0_high && testReg(LSM6, DS33_SA0_LOW_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d00e      	beq.n	80015c8 <LSM6_InitEx+0x98>
 80015aa:	220f      	movs	r2, #15
 80015ac:	216a      	movs	r1, #106	; 0x6a
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f000 f828 	bl	8001604 <testReg>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b69      	cmp	r3, #105	; 0x69
 80015b8:	d106      	bne.n	80015c8 <LSM6_InitEx+0x98>
			{
				sa0 = sa0_low;
 80015ba:	2300      	movs	r3, #0
 80015bc:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <LSM6_InitEx+0x98>
 80015c4:	2300      	movs	r3, #0
 80015c6:	71fb      	strb	r3, [r7, #7]
			}
		}

		// make sure device and SA0 were successfully detected; otherwise, indicate failure
		if (sa0 == sa0_autoDetect)
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <LSM6_InitEx+0xa2>
		{
			return false;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e014      	b.n	80015fc <LSM6_InitEx+0xcc>
		}
	}

	LSM6->_device = device;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	711a      	strb	r2, [r3, #4]

	switch (device)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <LSM6_InitEx+0xb4>
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d009      	beq.n	80015f6 <LSM6_InitEx+0xc6>
 80015e2:	e00a      	b.n	80015fa <LSM6_InitEx+0xca>
	{
		case device_DS33:
			LSM6->address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <LSM6_InitEx+0xbe>
 80015ea:	226b      	movs	r2, #107	; 0x6b
 80015ec:	e000      	b.n	80015f0 <LSM6_InitEx+0xc0>
 80015ee:	226a      	movs	r2, #106	; 0x6a
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	715a      	strb	r2, [r3, #5]
			break;
 80015f4:	e001      	b.n	80015fa <LSM6_InitEx+0xca>
		case device_autoDetect:
			return false;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <LSM6_InitEx+0xcc>
	}

	return true;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <testReg>:

// Returns chip id if communication is established, return 0 if not
uint8_t testReg(LSM6_t *LSM6, uint8_t address, uint8_t reg)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af04      	add	r7, sp, #16
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
 8001610:	4613      	mov	r3, r2
 8001612:	70bb      	strb	r3, [r7, #2]
	uint8_t Value;

	if (HAL_OK == HAL_I2C_Mem_Read(LSM6->i2c, (address)<<1, reg, 1, &Value, 1, LSM6->io_timeout))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	b29b      	uxth	r3, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	78bb      	ldrb	r3, [r7, #2]
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	88db      	ldrh	r3, [r3, #6]
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f107 030f 	add.w	r3, r7, #15
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	f005 f973 	bl	8006920 <HAL_I2C_Mem_Read>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <testReg+0x40>
	{
		return Value;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	e000      	b.n	8001646 <testReg+0x42>
	}
	else
	{
		return false;
 8001644:	2300      	movs	r3, #0
	}
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <timeoutOccurred>:

// Did a timeout occur in readAcc(), readGyro(), or read() since the last call to timeoutOccurred()?
bool timeoutOccurred(LSM6_t *LSM6)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_timeout;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7a1b      	ldrb	r3, [r3, #8]
 800165a:	73fb      	strb	r3, [r7, #15]
	LSM6->did_timeout = false;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	721a      	strb	r2, [r3, #8]
	return tmp;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <errorOccured>:
// Did an error occur in readAcc(), readGyro(), or read() since the last call to errorOccurred()?
bool errorOccured(LSM6_t *LSM6)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_error;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7a5b      	ldrb	r3, [r3, #9]
 800167c:	73fb      	strb	r3, [r7, #15]
	LSM6->did_error = false;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	725a      	strb	r2, [r3, #9]
	return tmp;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <enableDefault>:
{
	return LSM6->io_timeout;
}

void enableDefault(LSM6_t *LSM6)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	if (LSM6->_device == device_DS33)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11d      	bne.n	80016de <enableDefault+0x4c>
	{
	// Accelerometer
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (+/-2 g full scale)
	  writeReg(LSM6, CTRL9_XL, 0x38);	// Accelerometer X, Y, Z axes enabled
 80016a2:	2238      	movs	r2, #56	; 0x38
 80016a4:	2118      	movs	r1, #24
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f81d 	bl	80016e6 <writeReg>
	  writeReg(LSM6, CTRL1_XL, 0x30);	// Accelerometer = 52hz
 80016ac:	2230      	movs	r2, #48	; 0x30
 80016ae:	2110      	movs	r1, #16
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f818 	bl	80016e6 <writeReg>
	  writeReg(LSM6, INT1_CTRL, 0x01);	// Accelerometer data ready interrupt on INT1
 80016b6:	2201      	movs	r2, #1
 80016b8:	210d      	movs	r1, #13
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f813 	bl	80016e6 <writeReg>

	// Gyroscope
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (245 dps)
	  writeReg(LSM6, CTRL10_C, 0x38);	// Gyroscope X, Y, Z axes enabled
 80016c0:	2238      	movs	r2, #56	; 0x38
 80016c2:	2119      	movs	r1, #25
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f80e 	bl	80016e6 <writeReg>
	  writeReg(LSM6, CTRL2_G, 0x30);	// Gyroscope = 52hz
 80016ca:	2230      	movs	r2, #48	; 0x30
 80016cc:	2111      	movs	r1, #17
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f809 	bl	80016e6 <writeReg>
	  writeReg(LSM6, INT2_CTRL, 0x02);	// Gyroscope data ready interrupt on INT2
 80016d4:	2202      	movs	r2, #2
 80016d6:	210e      	movs	r1, #14
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f804 	bl	80016e6 <writeReg>
	// Common
	// 0x04 = 0b00000100
	// IF_INC = 1 (automatically increment register address)
	// writeReg(CTRL3_C, 0x04);
	}
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <writeReg>:

// Write 8-bits
void writeReg(LSM6_t *LSM6, uint8_t reg, uint8_t value)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b088      	sub	sp, #32
 80016ea:	af04      	add	r7, sp, #16
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	// Write 8-bits
	status = HAL_I2C_Mem_Write(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	795b      	ldrb	r3, [r3, #5]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b299      	uxth	r1, r3
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2301      	movs	r3, #1
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	1cbb      	adds	r3, r7, #2
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	f005 f808 	bl	800672c <HAL_I2C_Mem_Write>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d102      	bne.n	800172c <writeReg+0x46>
	{
		LSM6->did_timeout = true;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	721a      	strb	r2, [r3, #8]
	}
	if(status == HAL_ERROR)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <writeReg+0x52>
	{
		LSM6->did_error = true;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	725a      	strb	r2, [r3, #9]
	}
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <readReg>:

// Read 8-bits
uint8_t readReg(LSM6_t *LSM6, uint8_t reg)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af04      	add	r7, sp, #16
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
	uint8_t value, status;

	// Read 8 bits
	status = HAL_I2C_Mem_Read(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	795b      	ldrb	r3, [r3, #5]
 8001754:	b29b      	uxth	r3, r3
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	b299      	uxth	r1, r3
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	88db      	ldrh	r3, [r3, #6]
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f107 030e 	add.w	r3, r7, #14
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	f005 f8d6 	bl	8006920 <HAL_I2C_Mem_Read>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d104      	bne.n	8001788 <readReg+0x48>
	{
		LSM6->did_timeout = true;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	721a      	strb	r2, [r3, #8]
		return 0;
 8001784:	2300      	movs	r3, #0
 8001786:	e008      	b.n	800179a <readReg+0x5a>
	}
	if(status == HAL_ERROR)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d104      	bne.n	8001798 <readReg+0x58>
	{
		LSM6->did_error = true;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	725a      	strb	r2, [r3, #9]
		return 0;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <readReg+0x5a>
	}

	return value;
 8001798:	7bbb      	ldrb	r3, [r7, #14]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <readAcc>:

uint8_t readAcc(LSM6_t *LSM6)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xla = readReg(LSM6, OUTX_L_XL);
 80017aa:	2128      	movs	r1, #40	; 0x28
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffc7 	bl	8001740 <readReg>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
	uint8_t xha = readReg(LSM6, OUTX_H_XL);
 80017b6:	2129      	movs	r1, #41	; 0x29
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffc1 	bl	8001740 <readReg>
 80017be:	4603      	mov	r3, r0
 80017c0:	73bb      	strb	r3, [r7, #14]
	uint8_t yla = readReg(LSM6, OUTY_L_XL);
 80017c2:	212a      	movs	r1, #42	; 0x2a
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffbb 	bl	8001740 <readReg>
 80017ca:	4603      	mov	r3, r0
 80017cc:	737b      	strb	r3, [r7, #13]
	uint8_t yha = readReg(LSM6, OUTY_H_XL);
 80017ce:	212b      	movs	r1, #43	; 0x2b
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffb5 	bl	8001740 <readReg>
 80017d6:	4603      	mov	r3, r0
 80017d8:	733b      	strb	r3, [r7, #12]
	uint8_t zla = readReg(LSM6, OUTZ_L_XL);
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffaf 	bl	8001740 <readReg>
 80017e2:	4603      	mov	r3, r0
 80017e4:	72fb      	strb	r3, [r7, #11]
	uint8_t zha = readReg(LSM6, OUTZ_H_XL);
 80017e6:	212d      	movs	r1, #45	; 0x2d
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffa9 	bl	8001740 <readReg>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff2b 	bl	800164e <timeoutOccurred>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <readAcc+0x60>
	{
		return HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	e035      	b.n	800186e <readAcc+0xcc>
	}
	if (errorOccured(LSM6) == true)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff34 	bl	8001670 <errorOccured>
 8001808:	4603      	mov	r3, r0
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <readAcc+0x70>
	{
		return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e02d      	b.n	800186e <readAcc+0xcc>
	}

	// combine high and low bytes
	LSM6->accelerometer.x = (int16_t)(xha << 8 | xla);
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe97 	bl	8000554 <__aeabi_i2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	LSM6->accelerometer.y = (int16_t)(yha << 8 | yla);
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b21a      	sxth	r2, r3
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe88 	bl	8000554 <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	LSM6->accelerometer.z = (int16_t)(zha << 8 | zla);
 800184e:	7abb      	ldrb	r3, [r7, #10]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21b      	sxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe79 	bl	8000554 <__aeabi_i2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	e9c1 2308 	strd	r2, r3, [r1, #32]

	return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <readGyro>:

uint8_t readGyro(LSM6_t *LSM6)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xlg = readReg(LSM6, OUTX_L_G);
 800187e:	2122      	movs	r1, #34	; 0x22
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff5d 	bl	8001740 <readReg>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
	uint8_t xhg = readReg(LSM6, OUTX_H_G);
 800188a:	2123      	movs	r1, #35	; 0x23
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff57 	bl	8001740 <readReg>
 8001892:	4603      	mov	r3, r0
 8001894:	73bb      	strb	r3, [r7, #14]
	uint8_t ylg = readReg(LSM6, OUTY_L_G);
 8001896:	2124      	movs	r1, #36	; 0x24
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff51 	bl	8001740 <readReg>
 800189e:	4603      	mov	r3, r0
 80018a0:	737b      	strb	r3, [r7, #13]
	uint8_t yhg = readReg(LSM6, OUTY_H_G);
 80018a2:	2125      	movs	r1, #37	; 0x25
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff4b 	bl	8001740 <readReg>
 80018aa:	4603      	mov	r3, r0
 80018ac:	733b      	strb	r3, [r7, #12]
	uint8_t zlg = readReg(LSM6, OUTZ_L_G);
 80018ae:	2126      	movs	r1, #38	; 0x26
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff45 	bl	8001740 <readReg>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]
	uint8_t zhg = readReg(LSM6, OUTZ_H_G);
 80018ba:	2127      	movs	r1, #39	; 0x27
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff3f 	bl	8001740 <readReg>
 80018c2:	4603      	mov	r3, r0
 80018c4:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fec1 	bl	800164e <timeoutOccurred>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <readGyro+0x60>
	{
		return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e035      	b.n	8001942 <readGyro+0xcc>
	}
	if (errorOccured(LSM6) == true)
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff feca 	bl	8001670 <errorOccured>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <readGyro+0x70>
	{
		return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e02d      	b.n	8001942 <readGyro+0xcc>
	}

	// combine high and low bytes
	LSM6->gyroscope.x = (int16_t)(xhg << 8 | xlg);
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe2d 	bl	8000554 <__aeabi_i2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	LSM6->gyroscope.y = (int16_t)(yhg << 8 | ylg);
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	7b7b      	ldrb	r3, [r7, #13]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe1e 	bl	8000554 <__aeabi_i2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	LSM6->gyroscope.z = (int16_t)(zhg << 8 | zlg);
 8001922:	7abb      	ldrb	r3, [r7, #10]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe0f 	bl	8000554 <__aeabi_i2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <LSM6_Read>:

// Main function to read LSM6 data
uint8_t LSM6_Read(LSM6_t *LSM6)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	uint8_t status;

	// Read accelerometer data
	if ((status = readAcc(LSM6)) != HAL_OK)
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff25 	bl	80017a2 <readAcc>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <LSM6_Read+0x1c>
	{
		return status;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	e00a      	b.n	800197c <LSM6_Read+0x32>
	}

	// Read gyroscope data
	if ((status = readGyro(LSM6)) != HAL_OK)
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff85 	bl	8001876 <readGyro>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <LSM6_Read+0x30>
	{
		return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	e000      	b.n	800197c <LSM6_Read+0x32>
	}

	return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <PID_Init>:
 *      Author: mand2
 */
#include "PID.h"

void PID_Init(PID_t *pid, float* Input, float* Output, float* Setpoint, float Kp, float Ki, float Kd, int POn, int ControllerDirection)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	61f8      	str	r0, [r7, #28]
 800198c:	61b9      	str	r1, [r7, #24]
 800198e:	617a      	str	r2, [r7, #20]
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	ed87 0a03 	vstr	s0, [r7, #12]
 8001996:	edc7 0a02 	vstr	s1, [r7, #8]
 800199a:	ed87 1a01 	vstr	s2, [r7, #4]
    pid->myOutput = Output;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	621a      	str	r2, [r3, #32]
    pid->myInput = Input;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	61da      	str	r2, [r3, #28]
    pid->mySetpoint = Setpoint;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
    pid->inAuto = false;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    pid->SampleTime = 50;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2232      	movs	r2, #50	; 0x32
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30

    PID_SetOutputLimits(pid, 0, 255);				//default output limit
 80019be:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80019f0 <PID_Init+0x6c>
 80019c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80019f4 <PID_Init+0x70>
 80019c6:	69f8      	ldr	r0, [r7, #28]
 80019c8:	f000 f8d0 	bl	8001b6c <PID_SetOutputLimits>
    PID_SetControllerDirection(pid, ControllerDirection);
 80019cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019ce:	69f8      	ldr	r0, [r7, #28]
 80019d0:	f000 f978 	bl	8001cc4 <PID_SetControllerDirection>
    PID_SetTunings(pid, Kp, Ki, Kd, POn);
 80019d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019d6:	ed97 1a01 	vldr	s2, [r7, #4]
 80019da:	edd7 0a02 	vldr	s1, [r7, #8]
 80019de:	ed97 0a03 	vldr	s0, [r7, #12]
 80019e2:	69f8      	ldr	r0, [r7, #28]
 80019e4:	f000 f808 	bl	80019f8 <PID_SetTunings>
}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	437f0000 	.word	0x437f0000
 80019f4:	00000000 	.word	0x00000000

080019f8 <PID_SetTunings>:

void PID_SetTunings(PID_t *pid, float Kp, float Ki, float Kd, int POn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6178      	str	r0, [r7, #20]
 8001a00:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a04:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a08:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a0c:	6079      	str	r1, [r7, #4]
   if (Kp<0 || Ki<0 || Kd<0) return;
 8001a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d468      	bmi.n	8001aee <PID_SetTunings+0xf6>
 8001a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	d461      	bmi.n	8001aee <PID_SetTunings+0xf6>
 8001a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	d45a      	bmi.n	8001aee <PID_SetTunings+0xf6>

   pid->pOn = POn;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	765a      	strb	r2, [r3, #25]
   pid->pOnE = (POn == P_ON_ERROR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

   pid->dispKp = Kp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	601a      	str	r2, [r3, #0]
   pid->dispKi = Ki;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
   pid->dispKd = Kd;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	609a      	str	r2, [r3, #8]

   float SampleTimeInSec = ((float)pid->SampleTime)/1000;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a72:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001afc <PID_SetTunings+0x104>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	edc7 7a07 	vstr	s15, [r7, #28]
   pid->kp = Kp;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	60da      	str	r2, [r3, #12]
   pid->ki = Ki * SampleTimeInSec;
 8001a84:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	edc3 7a04 	vstr	s15, [r3, #16]
   pid->kd = Kd / SampleTimeInSec;
 8001a96:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	edc3 7a05 	vstr	s15, [r3, #20]

  if(pid->controllerDirection == REVERSE)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d11f      	bne.n	8001af0 <PID_SetTunings+0xf8>
   {
	  pid->kp = (0 - pid->kp);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b00 <PID_SetTunings+0x108>
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	edc3 7a03 	vstr	s15, [r3, #12]
	  pid->ki = (0 - pid->ki);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001b00 <PID_SetTunings+0x108>
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	edc3 7a04 	vstr	s15, [r3, #16]
	  pid->kd = (0 - pid->kd);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ade:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b00 <PID_SetTunings+0x108>
 8001ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	edc3 7a05 	vstr	s15, [r3, #20]
 8001aec:	e000      	b.n	8001af0 <PID_SetTunings+0xf8>
   if (Kp<0 || Ki<0 || Kd<0) return;
 8001aee:	bf00      	nop
   }
}
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	447a0000 	.word	0x447a0000
 8001b00:	00000000 	.word	0x00000000

08001b04 <PID_SetSampleTime>:

void PID_SetSampleTime(PID_t *pid, int NewSampleTime)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dd25      	ble.n	8001b60 <PID_SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)pid->SampleTime;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8001b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2e:	edc7 7a03 	vstr	s15, [r7, #12]
      pid->ki *= ratio;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	edc3 7a04 	vstr	s15, [r3, #16]
      pid->kd /= ratio;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edc3 7a05 	vstr	s15, [r3, #20]
      pid->SampleTime = (unsigned long)NewSampleTime;
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
   }
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <PID_SetOutputLimits>:

void PID_SetOutputLimits(PID_t *pid, float Min, float Max)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b78:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min >= Max) return;
 8001b7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	da4d      	bge.n	8001c2a <PID_SetOutputLimits+0xbe>
   pid->outMin = Min;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
   pid->outMax = Max;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38

   if(pid->inAuto)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d043      	beq.n	8001c2c <PID_SetOutputLimits+0xc0>
   {
	   if(*(pid->myOutput) > pid->outMax) *(pid->myOutput) = pid->outMax;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	ed93 7a00 	vldr	s14, [r3]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	dd05      	ble.n	8001bc8 <PID_SetOutputLimits+0x5c>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e010      	b.n	8001bea <PID_SetOutputLimits+0x7e>
	   else if(*(pid->myOutput) < pid->outMin) *(pid->myOutput) = pid->outMin;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d504      	bpl.n	8001bea <PID_SetOutputLimits+0x7e>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001be8:	601a      	str	r2, [r3, #0]

	   if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	dd04      	ble.n	8001c0a <PID_SetOutputLimits+0x9e>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
 8001c08:	e010      	b.n	8001c2c <PID_SetOutputLimits+0xc0>
	   else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	d505      	bpl.n	8001c2c <PID_SetOutputLimits+0xc0>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
 8001c28:	e000      	b.n	8001c2c <PID_SetOutputLimits+0xc0>
   if(Min >= Max) return;
 8001c2a:	bf00      	nop
   }
}
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PID_SetMode>:

void PID_SetMode(PID_t *pid, int Mode)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !pid->inAuto)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d02d      	beq.n	8001cb0 <PID_SetMode+0x7a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d128      	bne.n	8001cb0 <PID_SetMode+0x7a>
    {  /*we just went from manual to auto*/
    	pid->outputSum = *pid->myOutput;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
    	pid->lastInput = *pid->myInput;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
	   if(pid->outputSum > pid->outMax) pid->outputSum = pid->outMax;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	dd04      	ble.n	8001c92 <PID_SetMode+0x5c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c90:	e00e      	b.n	8001cb0 <PID_SetMode+0x7a>
	   else if(pid->outputSum < pid->outMin) pid->outputSum = pid->outMin;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	d503      	bpl.n	8001cb0 <PID_SetMode+0x7a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
    }
    pid->inAuto = newAuto;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PID_SetControllerDirection>:

void PID_SetControllerDirection(PID_t *pid, int Direction)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
   if(pid->inAuto && (Direction != pid->controllerDirection))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d023      	beq.n	8001d20 <PID_SetControllerDirection+0x5c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e1b      	ldrb	r3, [r3, #24]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <PID_SetControllerDirection+0x5c>
   {
	   pid->kp = (0 - pid->kp);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001d34 <PID_SetControllerDirection+0x70>
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edc3 7a03 	vstr	s15, [r3, #12]
	   pid->ki = (0 - pid->ki);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cfe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001d34 <PID_SetControllerDirection+0x70>
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edc3 7a04 	vstr	s15, [r3, #16]
	   pid->kd = (0 - pid->kd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d12:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001d34 <PID_SetControllerDirection+0x70>
 8001d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	edc3 7a05 	vstr	s15, [r3, #20]
   }
   pid->controllerDirection = Direction;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	00000000 	.word	0x00000000

08001d38 <PID_Compute>:

bool PID_Compute(PID_t *pid)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
   if(!pid->inAuto)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <PID_Compute+0x16>
   {
	   return false;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e09f      	b.n	8001e8e <PID_Compute+0x156>
   }

      /*Compute all the working error variables*/
      float input = *pid->myInput;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
      float error = *pid->mySetpoint - input;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d66:	edc7 7a03 	vstr	s15, [r7, #12]
      float dInput = (input - pid->lastInput);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a02 	vstr	s15, [r7, #8]
      pid->outputSum+= (pid->ki * error);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pid->pOnE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10e      	bne.n	8001dc2 <PID_Compute+0x8a>
	  {
    	  pid->outputSum-= pid->kp * dInput;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	edd3 6a03 	vldr	s13, [r3, #12]
 8001db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  }

      if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	dd04      	ble.n	8001de2 <PID_Compute+0xaa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
 8001de0:	e00e      	b.n	8001e00 <PID_Compute+0xc8>
      else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d503      	bpl.n	8001e00 <PID_Compute+0xc8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /*Add Proportional on Error, if P_ON_E is specified*/
	  float output;
      if(pid->pOnE) output = pid->kp * error;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <PID_Compute+0xe6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e10:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	edc7 7a05 	vstr	s15, [r7, #20]
 8001e1c:	e002      	b.n	8001e24 <PID_Compute+0xec>
      else output = 0;
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

      /*Compute Rest of PID Output*/
      output += pid->outputSum - pid->kd * dInput;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001e30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e44:	edc7 7a05 	vstr	s15, [r7, #20]

      if(output > pid->outMax) output = pid->outMax;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001e4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd03      	ble.n	8001e64 <PID_Compute+0x12c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e00c      	b.n	8001e7e <PID_Compute+0x146>
      else if(output < pid->outMin) output = pid->outMin;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d502      	bpl.n	8001e7e <PID_Compute+0x146>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7c:	617b      	str	r3, [r7, #20]
      *pid->myOutput = output;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]

      /*Remember some variables for next time*/
      pid->lastInput = input;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      return true;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <MX_ADC1_Init+0xa0>)
 8001eb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001eb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001f02:	f003 f83d 	bl	8004f80 <HAL_ADC_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001f0c:	f001 ffda 	bl	8003ec4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f14:	2301      	movs	r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f18:	2307      	movs	r3, #7
 8001f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_ADC1_Init+0x9c>)
 8001f22:	f003 f975 	bl	8005210 <HAL_ADC_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001f2c:	f001 ffca 	bl	8003ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000208 	.word	0x20000208
 8001f3c:	40012000 	.word	0x40012000

08001f40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_ADC_MspInit+0xdc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d157      	bne.n	8002012 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_ADC_MspInit+0xe0>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <HAL_ADC_MspInit+0xe0>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_ADC_MspInit+0xe0>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_ADC_MspInit+0xe0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a26      	ldr	r2, [pc, #152]	; (8002020 <HAL_ADC_MspInit+0xe0>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_ADC_MspInit+0xe0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	481d      	ldr	r0, [pc, #116]	; (8002024 <HAL_ADC_MspInit+0xe4>)
 8001fae:	f004 f8c3 	bl	8006138 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_ADC_MspInit+0xec>)
 8001fb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 8001ff8:	f003 fc9c 	bl	8005934 <HAL_DMA_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002002:	f001 ff5f 	bl	8003ec4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
 800200c:	4a06      	ldr	r2, [pc, #24]	; (8002028 <HAL_ADC_MspInit+0xe8>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40012000 	.word	0x40012000
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	20000250 	.word	0x20000250
 800202c:	40026410 	.word	0x40026410

08002030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_DMA_Init+0x4c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <MX_DMA_Init+0x4c>)
 8002040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <MX_DMA_Init+0x4c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_DMA_Init+0x4c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <MX_DMA_Init+0x4c>)
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_DMA_Init+0x4c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]

}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800

08002080 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	Parser_Register_PIDPrintCallback(Parser_PID_PrintCallback);
 8002084:	485d      	ldr	r0, [pc, #372]	; (80021fc <MX_FREERTOS_Init+0x17c>)
 8002086:	f001 ff23 	bl	8003ed0 <Parser_Register_PIDPrintCallback>
	Parser_Register_IMUPrintCallback(Parser_IMU_PrintCallback);
 800208a:	485d      	ldr	r0, [pc, #372]	; (8002200 <MX_FREERTOS_Init+0x180>)
 800208c:	f001 ff30 	bl	8003ef0 <Parser_Register_IMUPrintCallback>
	Parser_Register_MotorsPrintCallback(Parser_MOT_PrintCallback);
 8002090:	485c      	ldr	r0, [pc, #368]	; (8002204 <MX_FREERTOS_Init+0x184>)
 8002092:	f001 ff3d 	bl	8003f10 <Parser_Register_MotorsPrintCallback>
	Parser_Register_OtherPrintCallback(Parser_OTH_PrintCallback);
 8002096:	485c      	ldr	r0, [pc, #368]	; (8002208 <MX_FREERTOS_Init+0x188>)
 8002098:	f001 ff4a 	bl	8003f30 <Parser_Register_OtherPrintCallback>
	Parser_Register_ReceiveLineCallback(Parser_ReceiveLineCallback);
 800209c:	485b      	ldr	r0, [pc, #364]	; (800220c <MX_FREERTOS_Init+0x18c>)
 800209e:	f001 ff57 	bl	8003f50 <Parser_Register_ReceiveLineCallback>
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 80020a2:	485b      	ldr	r0, [pc, #364]	; (8002210 <MX_FREERTOS_Init+0x190>)
 80020a4:	f008 fb83 	bl	800a7ae <osMutexNew>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a5a      	ldr	r2, [pc, #360]	; (8002214 <MX_FREERTOS_Init+0x194>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* creation of MutexRingBufferRx */
  MutexRingBufferRxHandle = osMutexNew(&MutexRingBufferRx_attributes);
 80020ae:	485a      	ldr	r0, [pc, #360]	; (8002218 <MX_FREERTOS_Init+0x198>)
 80020b0:	f008 fb7d 	bl	800a7ae <osMutexNew>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a59      	ldr	r2, [pc, #356]	; (800221c <MX_FREERTOS_Init+0x19c>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* creation of MutexRingBufferTx */
  MutexRingBufferTxHandle = osMutexNew(&MutexRingBufferTx_attributes);
 80020ba:	4859      	ldr	r0, [pc, #356]	; (8002220 <MX_FREERTOS_Init+0x1a0>)
 80020bc:	f008 fb77 	bl	800a7ae <osMutexNew>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a58      	ldr	r2, [pc, #352]	; (8002224 <MX_FREERTOS_Init+0x1a4>)
 80020c4:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreLSM6_DataReady */
  SemaphoreLSM6_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreLSM6_DataReady_attributes);
 80020c6:	4a58      	ldr	r2, [pc, #352]	; (8002228 <MX_FREERTOS_Init+0x1a8>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	2001      	movs	r0, #1
 80020cc:	f008 fc7d 	bl	800a9ca <osSemaphoreNew>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <MX_FREERTOS_Init+0x1ac>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreADC_DataReady */
  SemaphoreADC_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreADC_DataReady_attributes);
 80020d6:	4a56      	ldr	r2, [pc, #344]	; (8002230 <MX_FREERTOS_Init+0x1b0>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2001      	movs	r0, #1
 80020dc:	f008 fc75 	bl	800a9ca <osSemaphoreNew>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a54      	ldr	r2, [pc, #336]	; (8002234 <MX_FREERTOS_Init+0x1b4>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreUART_TxComplete */
  SemaphoreUART_TxCompleteHandle = osSemaphoreNew(1, 1, &SemaphoreUART_TxComplete_attributes);
 80020e6:	4a54      	ldr	r2, [pc, #336]	; (8002238 <MX_FREERTOS_Init+0x1b8>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2001      	movs	r0, #1
 80020ec:	f008 fc6d 	bl	800a9ca <osSemaphoreNew>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a52      	ldr	r2, [pc, #328]	; (800223c <MX_FREERTOS_Init+0x1bc>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsPID */
  SemaphoreFlagsPIDHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsPID_attributes);
 80020f6:	4a52      	ldr	r2, [pc, #328]	; (8002240 <MX_FREERTOS_Init+0x1c0>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	2001      	movs	r0, #1
 80020fc:	f008 fc65 	bl	800a9ca <osSemaphoreNew>
 8002100:	4603      	mov	r3, r0
 8002102:	4a50      	ldr	r2, [pc, #320]	; (8002244 <MX_FREERTOS_Init+0x1c4>)
 8002104:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsIMU */
  SemaphoreFlagsIMUHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsIMU_attributes);
 8002106:	4a50      	ldr	r2, [pc, #320]	; (8002248 <MX_FREERTOS_Init+0x1c8>)
 8002108:	2101      	movs	r1, #1
 800210a:	2001      	movs	r0, #1
 800210c:	f008 fc5d 	bl	800a9ca <osSemaphoreNew>
 8002110:	4603      	mov	r3, r0
 8002112:	4a4e      	ldr	r2, [pc, #312]	; (800224c <MX_FREERTOS_Init+0x1cc>)
 8002114:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsMOT */
  SemaphoreFlagsMOTHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsMOT_attributes);
 8002116:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <MX_FREERTOS_Init+0x1d0>)
 8002118:	2101      	movs	r1, #1
 800211a:	2001      	movs	r0, #1
 800211c:	f008 fc55 	bl	800a9ca <osSemaphoreNew>
 8002120:	4603      	mov	r3, r0
 8002122:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <MX_FREERTOS_Init+0x1d4>)
 8002124:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreFlagsOTH */
  SemaphoreFlagsOTHHandle = osSemaphoreNew(1, 1, &SemaphoreFlagsOTH_attributes);
 8002126:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <MX_FREERTOS_Init+0x1d8>)
 8002128:	2101      	movs	r1, #1
 800212a:	2001      	movs	r0, #1
 800212c:	f008 fc4d 	bl	800a9ca <osSemaphoreNew>
 8002130:	4603      	mov	r3, r0
 8002132:	4a4a      	ldr	r2, [pc, #296]	; (800225c <MX_FREERTOS_Init+0x1dc>)
 8002134:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  SemRxLineAvailableHandle = osSemaphoreNew(31, 0, &SemRxLineAvailable_attributes);
 8002136:	4a4a      	ldr	r2, [pc, #296]	; (8002260 <MX_FREERTOS_Init+0x1e0>)
 8002138:	2100      	movs	r1, #0
 800213a:	201f      	movs	r0, #31
 800213c:	f008 fc45 	bl	800a9ca <osSemaphoreNew>
 8002140:	4603      	mov	r3, r0
 8002142:	4a48      	ldr	r2, [pc, #288]	; (8002264 <MX_FREERTOS_Init+0x1e4>)
 8002144:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueInputPID */
  QueueInputPIDHandle = osMessageQueueNew (8, sizeof(float), &QueueInputPID_attributes);
 8002146:	4a48      	ldr	r2, [pc, #288]	; (8002268 <MX_FREERTOS_Init+0x1e8>)
 8002148:	2104      	movs	r1, #4
 800214a:	2008      	movs	r0, #8
 800214c:	f008 fd5c 	bl	800ac08 <osMessageQueueNew>
 8002150:	4603      	mov	r3, r0
 8002152:	4a46      	ldr	r2, [pc, #280]	; (800226c <MX_FREERTOS_Init+0x1ec>)
 8002154:	6013      	str	r3, [r2, #0]

  /* creation of QueueOutputPID */
  QueueOutputPIDHandle = osMessageQueueNew (8, sizeof(int16_t), &QueueOutputPID_attributes);
 8002156:	4a46      	ldr	r2, [pc, #280]	; (8002270 <MX_FREERTOS_Init+0x1f0>)
 8002158:	2102      	movs	r1, #2
 800215a:	2008      	movs	r0, #8
 800215c:	f008 fd54 	bl	800ac08 <osMessageQueueNew>
 8002160:	4603      	mov	r3, r0
 8002162:	4a44      	ldr	r2, [pc, #272]	; (8002274 <MX_FREERTOS_Init+0x1f4>)
 8002164:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartPID */
  QueueUartPIDHandle = osMessageQueueNew (1, sizeof(float), &QueueUartPID_attributes);
 8002166:	4a44      	ldr	r2, [pc, #272]	; (8002278 <MX_FREERTOS_Init+0x1f8>)
 8002168:	2104      	movs	r1, #4
 800216a:	2001      	movs	r0, #1
 800216c:	f008 fd4c 	bl	800ac08 <osMessageQueueNew>
 8002170:	4603      	mov	r3, r0
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <MX_FREERTOS_Init+0x1fc>)
 8002174:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartIMU */
  QueueUartIMUHandle = osMessageQueueNew (1, sizeof(float), &QueueUartIMU_attributes);
 8002176:	4a42      	ldr	r2, [pc, #264]	; (8002280 <MX_FREERTOS_Init+0x200>)
 8002178:	2104      	movs	r1, #4
 800217a:	2001      	movs	r0, #1
 800217c:	f008 fd44 	bl	800ac08 <osMessageQueueNew>
 8002180:	4603      	mov	r3, r0
 8002182:	4a40      	ldr	r2, [pc, #256]	; (8002284 <MX_FREERTOS_Init+0x204>)
 8002184:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartMOT */
  QueueUartMOTHandle = osMessageQueueNew (1, sizeof(uint16_t), &QueueUartMOT_attributes);
 8002186:	4a40      	ldr	r2, [pc, #256]	; (8002288 <MX_FREERTOS_Init+0x208>)
 8002188:	2102      	movs	r1, #2
 800218a:	2001      	movs	r0, #1
 800218c:	f008 fd3c 	bl	800ac08 <osMessageQueueNew>
 8002190:	4603      	mov	r3, r0
 8002192:	4a3e      	ldr	r2, [pc, #248]	; (800228c <MX_FREERTOS_Init+0x20c>)
 8002194:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartOTH */
  QueueUartOTHHandle = osMessageQueueNew (1, sizeof(float), &QueueUartOTH_attributes);
 8002196:	4a3e      	ldr	r2, [pc, #248]	; (8002290 <MX_FREERTOS_Init+0x210>)
 8002198:	2104      	movs	r1, #4
 800219a:	2001      	movs	r0, #1
 800219c:	f008 fd34 	bl	800ac08 <osMessageQueueNew>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <MX_FREERTOS_Init+0x214>)
 80021a4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTReadTask */
  UARTReadTaskHandle = osThreadNew(StartUARTReadTask, NULL, &UARTReadTask_attributes);
 80021a6:	4a3c      	ldr	r2, [pc, #240]	; (8002298 <MX_FREERTOS_Init+0x218>)
 80021a8:	2100      	movs	r1, #0
 80021aa:	483c      	ldr	r0, [pc, #240]	; (800229c <MX_FREERTOS_Init+0x21c>)
 80021ac:	f008 f924 	bl	800a3f8 <osThreadNew>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <MX_FREERTOS_Init+0x220>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(StartIMU_Task, NULL, &IMU_Task_attributes);
 80021b6:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <MX_FREERTOS_Init+0x224>)
 80021b8:	2100      	movs	r1, #0
 80021ba:	483b      	ldr	r0, [pc, #236]	; (80022a8 <MX_FREERTOS_Init+0x228>)
 80021bc:	f008 f91c 	bl	800a3f8 <osThreadNew>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a3a      	ldr	r2, [pc, #232]	; (80022ac <MX_FREERTOS_Init+0x22c>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* creation of PIDTask */
  PIDTaskHandle = osThreadNew(StartPIDTask, NULL, &PIDTask_attributes);
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <MX_FREERTOS_Init+0x230>)
 80021c8:	2100      	movs	r1, #0
 80021ca:	483a      	ldr	r0, [pc, #232]	; (80022b4 <MX_FREERTOS_Init+0x234>)
 80021cc:	f008 f914 	bl	800a3f8 <osThreadNew>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <MX_FREERTOS_Init+0x238>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* creation of StepperMotorsTa */
  StepperMotorsTaHandle = osThreadNew(StartStepperMotorsTask, NULL, &StepperMotorsTa_attributes);
 80021d6:	4a39      	ldr	r2, [pc, #228]	; (80022bc <MX_FREERTOS_Init+0x23c>)
 80021d8:	2100      	movs	r1, #0
 80021da:	4839      	ldr	r0, [pc, #228]	; (80022c0 <MX_FREERTOS_Init+0x240>)
 80021dc:	f008 f90c 	bl	800a3f8 <osThreadNew>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <MX_FREERTOS_Init+0x244>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* creation of OtherTask */
  OtherTaskHandle = osThreadNew(StartOtherTask, NULL, &OtherTask_attributes);
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <MX_FREERTOS_Init+0x248>)
 80021e8:	2100      	movs	r1, #0
 80021ea:	4838      	ldr	r0, [pc, #224]	; (80022cc <MX_FREERTOS_Init+0x24c>)
 80021ec:	f008 f904 	bl	800a3f8 <osThreadNew>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a37      	ldr	r2, [pc, #220]	; (80022d0 <MX_FREERTOS_Init+0x250>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08003709 	.word	0x08003709
 8002200:	08003761 	.word	0x08003761
 8002204:	080037b9 	.word	0x080037b9
 8002208:	08003815 	.word	0x08003815
 800220c:	080036a5 	.word	0x080036a5
 8002210:	080135b0 	.word	0x080135b0
 8002214:	20000508 	.word	0x20000508
 8002218:	080135c0 	.word	0x080135c0
 800221c:	2000050c 	.word	0x2000050c
 8002220:	080135d0 	.word	0x080135d0
 8002224:	20000510 	.word	0x20000510
 8002228:	080135e0 	.word	0x080135e0
 800222c:	20000514 	.word	0x20000514
 8002230:	080135f0 	.word	0x080135f0
 8002234:	20000518 	.word	0x20000518
 8002238:	08013600 	.word	0x08013600
 800223c:	2000051c 	.word	0x2000051c
 8002240:	08013610 	.word	0x08013610
 8002244:	20000520 	.word	0x20000520
 8002248:	08013620 	.word	0x08013620
 800224c:	20000524 	.word	0x20000524
 8002250:	08013630 	.word	0x08013630
 8002254:	20000528 	.word	0x20000528
 8002258:	08013640 	.word	0x08013640
 800225c:	2000052c 	.word	0x2000052c
 8002260:	0801345c 	.word	0x0801345c
 8002264:	200004d8 	.word	0x200004d8
 8002268:	08013520 	.word	0x08013520
 800226c:	200004f0 	.word	0x200004f0
 8002270:	08013538 	.word	0x08013538
 8002274:	200004f4 	.word	0x200004f4
 8002278:	08013550 	.word	0x08013550
 800227c:	200004f8 	.word	0x200004f8
 8002280:	08013568 	.word	0x08013568
 8002284:	200004fc 	.word	0x200004fc
 8002288:	08013580 	.word	0x08013580
 800228c:	20000500 	.word	0x20000500
 8002290:	08013598 	.word	0x08013598
 8002294:	20000504 	.word	0x20000504
 8002298:	0801346c 	.word	0x0801346c
 800229c:	080022d5 	.word	0x080022d5
 80022a0:	200004dc 	.word	0x200004dc
 80022a4:	08013490 	.word	0x08013490
 80022a8:	080023f1 	.word	0x080023f1
 80022ac:	200004e0 	.word	0x200004e0
 80022b0:	080134b4 	.word	0x080134b4
 80022b4:	08002911 	.word	0x08002911
 80022b8:	200004e4 	.word	0x200004e4
 80022bc:	080134d8 	.word	0x080134d8
 80022c0:	08002df1 	.word	0x08002df1
 80022c4:	200004e8 	.word	0x200004e8
 80022c8:	080134fc 	.word	0x080134fc
 80022cc:	08003311 	.word	0x08003311
 80022d0:	200004ec 	.word	0x200004ec

080022d4 <StartUARTReadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTReadTask */
void StartUARTReadTask(void *argument)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTReadTask */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Tmp_Rx_Buffer, TMP_DMAUART_BUFFER_SIZE);
 80022dc:	2240      	movs	r2, #64	; 0x40
 80022de:	493b      	ldr	r1, [pc, #236]	; (80023cc <StartUARTReadTask+0xf8>)
 80022e0:	483b      	ldr	r0, [pc, #236]	; (80023d0 <StartUARTReadTask+0xfc>)
 80022e2:	f006 feb7 	bl	8009054 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(SemRxLineAvailableHandle, 0) == osOK)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <StartUARTReadTask+0x100>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f008 fbf5 	bl	800aadc <osSemaphoreAcquire>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10e      	bne.n	8002316 <StartUARTReadTask+0x42>
	  {
		  osMutexAcquire(MutexRingBufferRxHandle, osWaitForever);
 80022f8:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <StartUARTReadTask+0x104>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	4618      	mov	r0, r3
 8002302:	f008 fada 	bl	800a8ba <osMutexAcquire>
	  	  Parser_ParseLine();
 8002306:	f002 f893 	bl	8004430 <Parser_ParseLine>
		  osMutexRelease(MutexRingBufferRxHandle);
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <StartUARTReadTask+0x104>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f008 fb1e 	bl	800a950 <osMutexRelease>
 8002314:	e7e7      	b.n	80022e6 <StartUARTReadTask+0x12>
	  }

	  else if (osMutexAcquire(MutexRingBufferTxHandle, 0) == osOK)
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <StartUARTReadTask+0x108>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f008 facc 	bl	800a8ba <osMutexAcquire>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d14d      	bne.n	80023c4 <StartUARTReadTask+0xf0>
	  {
		  if(isReadable(&Tx_RingBuffer))
 8002328:	482d      	ldr	r0, [pc, #180]	; (80023e0 <StartUARTReadTask+0x10c>)
 800232a:	f002 f8d7 	bl	80044dc <isReadable>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03e      	beq.n	80023b2 <StartUARTReadTask+0xde>
		  {
			  if(osSemaphoreAcquire(SemaphoreUART_TxCompleteHandle, 0) == osOK)
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <StartUARTReadTask+0x110>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f008 fbce 	bl	800aadc <osSemaphoreAcquire>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d12c      	bne.n	80023a0 <StartUARTReadTask+0xcc>
			  {
				  uint8_t i = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
				  while((i < TMP_DMAUART_BUFFER_SIZE) && (RB_Read(&Tx_RingBuffer, &Tmp_Tx_Buffer[i]) == RB_OK))
 800234a:	e00f      	b.n	800236c <StartUARTReadTask+0x98>
				  {
					  if(Tmp_Tx_Buffer[i] == '\n')
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <StartUARTReadTask+0x114>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	2b0a      	cmp	r3, #10
 8002354:	d107      	bne.n	8002366 <StartUARTReadTask+0x92>
					  {
						  i++;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3301      	adds	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
						  Tmp_Tx_Buffer[i] = '\0';
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <StartUARTReadTask+0x114>)
 8002360:	2100      	movs	r1, #0
 8002362:	54d1      	strb	r1, [r2, r3]
						  break;
 8002364:	e00f      	b.n	8002386 <StartUARTReadTask+0xb2>
					  }
					  i++;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
				  while((i < TMP_DMAUART_BUFFER_SIZE) && (RB_Read(&Tx_RingBuffer, &Tmp_Tx_Buffer[i]) == RB_OK))
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b3f      	cmp	r3, #63	; 0x3f
 8002370:	d809      	bhi.n	8002386 <StartUARTReadTask+0xb2>
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <StartUARTReadTask+0x114>)
 8002376:	4413      	add	r3, r2
 8002378:	4619      	mov	r1, r3
 800237a:	4819      	ldr	r0, [pc, #100]	; (80023e0 <StartUARTReadTask+0x10c>)
 800237c:	f002 f8c2 	bl	8004504 <RB_Read>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0e2      	beq.n	800234c <StartUARTReadTask+0x78>
				  }
				  HAL_UART_Transmit_DMA(&huart2, Tmp_Tx_Buffer, i);
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	4916      	ldr	r1, [pc, #88]	; (80023e8 <StartUARTReadTask+0x114>)
 800238e:	4810      	ldr	r0, [pc, #64]	; (80023d0 <StartUARTReadTask+0xfc>)
 8002390:	f006 fde2 	bl	8008f58 <HAL_UART_Transmit_DMA>
				  osMutexRelease(MutexRingBufferTxHandle);
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <StartUARTReadTask+0x108>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f008 fad9 	bl	800a950 <osMutexRelease>
 800239e:	e7a2      	b.n	80022e6 <StartUARTReadTask+0x12>
			  }
			  else
			  {
				  osMutexRelease(MutexRingBufferTxHandle);
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <StartUARTReadTask+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f008 fad3 	bl	800a950 <osMutexRelease>
				  osDelay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f008 f9e4 	bl	800a778 <osDelay>
 80023b0:	e799      	b.n	80022e6 <StartUARTReadTask+0x12>
			  }
		  }
		  else
		  {
			  osMutexRelease(MutexRingBufferTxHandle);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <StartUARTReadTask+0x108>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f008 faca 	bl	800a950 <osMutexRelease>
			  osDelay(1);
 80023bc:	2001      	movs	r0, #1
 80023be:	f008 f9db 	bl	800a778 <osDelay>
 80023c2:	e790      	b.n	80022e6 <StartUARTReadTask+0x12>
		  }
	  }

	  else osDelay(1);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f008 f9d7 	bl	800a778 <osDelay>
	  if (osSemaphoreAcquire(SemRxLineAvailableHandle, 0) == osOK)
 80023ca:	e78c      	b.n	80022e6 <StartUARTReadTask+0x12>
 80023cc:	200002c0 	.word	0x200002c0
 80023d0:	200006dc 	.word	0x200006dc
 80023d4:	200004d8 	.word	0x200004d8
 80023d8:	2000050c 	.word	0x2000050c
 80023dc:	20000510 	.word	0x20000510
 80023e0:	2000040c 	.word	0x2000040c
 80023e4:	2000051c 	.word	0x2000051c
 80023e8:	20000300 	.word	0x20000300
 80023ec:	00000000 	.word	0x00000000

080023f0 <StartIMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU_Task */
void StartIMU_Task(void *argument)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b0a8      	sub	sp, #160	; 0xa0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU_Task */
	LSM6_t LSM6DS33;
	float accAngle, outputAngle;
	float prevAngle = 0.0;
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float gyroX_Offset = IMU_GYRX_DEFAULT_OFFSET;
 8002400:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float accY_Offset = IMU_ACCY_DEFAULT_OFFSET;
 8002408:	4bd9      	ldr	r3, [pc, #868]	; (8002770 <StartIMU_Task+0x380>)
 800240a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float accZ_Offset = IMU_ACCZ_DEFAULT_OFFSET;
 800240e:	4bd9      	ldr	r3, [pc, #868]	; (8002774 <StartIMU_Task+0x384>)
 8002410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint16_t flags;
	char cmd[32];
	uint8_t autocalibrationStatus = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	float tmpGyroX = 0;
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float tmpAccY = 0;
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float tmpAccZ = 0;
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint8_t autocalibrationCounter = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	osDelay(150*KERNEL_TICKS_FOR_MS);
 8002438:	2096      	movs	r0, #150	; 0x96
 800243a:	f008 f99d 	bl	800a778 <osDelay>

	osMutexAcquire(MutexI2CHandle, osWaitForever);
 800243e:	4bce      	ldr	r3, [pc, #824]	; (8002778 <StartIMU_Task+0x388>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f04f 31ff 	mov.w	r1, #4294967295
 8002446:	4618      	mov	r0, r3
 8002448:	f008 fa37 	bl	800a8ba <osMutexAcquire>
	if (LSM6_InitEx(&hi2c1, &LSM6DS33, device_autoDetect, sa0_autoDetect) == false)
 800244c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002450:	2302      	movs	r3, #2
 8002452:	2201      	movs	r2, #1
 8002454:	48c9      	ldr	r0, [pc, #804]	; (800277c <StartIMU_Task+0x38c>)
 8002456:	f7ff f86b 	bl	8001530 <LSM6_InitEx>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d103      	bne.n	8002468 <StartIMU_Task+0x78>
	{
		sendMessageToUART("Błąd połączenia z akcelerometrem!\r\n");
 8002460:	48c7      	ldr	r0, [pc, #796]	; (8002780 <StartIMU_Task+0x390>)
 8002462:	f001 fb1b 	bl	8003a9c <sendMessageToUART>
 8002466:	e004      	b.n	8002472 <StartIMU_Task+0x82>
	}
	else
	{
		enableDefault(&LSM6DS33);
 8002468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f910 	bl	8001692 <enableDefault>
	}
	osMutexRelease(MutexI2CHandle);
 8002472:	4bc1      	ldr	r3, [pc, #772]	; (8002778 <StartIMU_Task+0x388>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f008 fa6a 	bl	800a950 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, 20*KERNEL_TICKS_FOR_MS))
 800247c:	4bc1      	ldr	r3, [pc, #772]	; (8002784 <StartIMU_Task+0x394>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2114      	movs	r1, #20
 8002482:	4618      	mov	r0, r3
 8002484:	f008 fb2a 	bl	800aadc <osSemaphoreAcquire>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 8107 	bne.w	800269e <StartIMU_Task+0x2ae>
	{
		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002490:	4bb9      	ldr	r3, [pc, #740]	; (8002778 <StartIMU_Task+0x388>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	4618      	mov	r0, r3
 800249a:	f008 fa0e 	bl	800a8ba <osMutexAcquire>
		if(HAL_OK == LSM6_Read(&LSM6DS33))
 800249e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fa51 	bl	800194a <LSM6_Read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 80ef 	bne.w	800268e <StartIMU_Task+0x29e>
		{
			osMutexRelease(MutexI2CHandle);
 80024b0:	4bb1      	ldr	r3, [pc, #708]	; (8002778 <StartIMU_Task+0x388>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f008 fa4b 	bl	800a950 <osMutexRelease>
			accAngle = calculateAccAngle(LSM6DS33.accelerometer.y, LSM6DS33.accelerometer.z, accY_Offset, accZ_Offset);
 80024ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7fe fba9 	bl	8000c18 <__aeabi_d2f>
 80024c6:	4604      	mov	r4, r0
 80024c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fba2 	bl	8000c18 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	edd7 1a24 	vldr	s3, [r7, #144]	; 0x90
 80024da:	ed97 1a25 	vldr	s2, [r7, #148]	; 0x94
 80024de:	ee00 3a90 	vmov	s1, r3
 80024e2:	ee00 4a10 	vmov	s0, r4
 80024e6:	f001 fa63 	bl	80039b0 <calculateAccAngle>
 80024ea:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
			outputAngle = complementaryFilter(LSM6DS33.gyroscope.x, accAngle, prevAngle, gyroX_Offset);
 80024ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fe fb8f 	bl	8000c18 <__aeabi_d2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	edd7 1a26 	vldr	s3, [r7, #152]	; 0x98
 8002500:	ed97 1a27 	vldr	s2, [r7, #156]	; 0x9c
 8002504:	edd7 0a1e 	vldr	s1, [r7, #120]	; 0x78
 8002508:	ee00 3a10 	vmov	s0, r3
 800250c:	f001 f9dc 	bl	80038c8 <complementaryFilter>
 8002510:	eef0 7a40 	vmov.f32	s15, s0
 8002514:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			osMessageQueuePut(QueueInputPIDHandle, &outputAngle, 0, 0);
 8002518:	4b9b      	ldr	r3, [pc, #620]	; (8002788 <StartIMU_Task+0x398>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002520:	2300      	movs	r3, #0
 8002522:	2200      	movs	r2, #0
 8002524:	f008 fbe4 	bl	800acf0 <osMessageQueuePut>
//			if(ABS(prevAngle - outputAngle) > 0.09)
//			{
				sprintf(cmd, "ANG=%.1f\r\n", outputAngle);
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f824 	bl	8000578 <__aeabi_f2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	f107 000c 	add.w	r0, r7, #12
 8002538:	4994      	ldr	r1, [pc, #592]	; (800278c <StartIMU_Task+0x39c>)
 800253a:	f00c feb9 	bl	800f2b0 <siprintf>
				//sprintf(cmd, "%.1f\r\n", outputAngle);
				sendMessageToUART(cmd);
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	4618      	mov	r0, r3
 8002544:	f001 faaa 	bl	8003a9c <sendMessageToUART>
//			}
			prevAngle = outputAngle;
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if(autocalibrationStatus)
 800254e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80a3 	beq.w	800269e <StartIMU_Task+0x2ae>
			{
				tmpGyroX += (LSM6DS33.gyroscope.x*IMU_GYRO_SENSITIVITY);
 8002558:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800255c:	f7fe f80c 	bl	8000578 <__aeabi_f2d>
 8002560:	4604      	mov	r4, r0
 8002562:	460d      	mov	r5, r1
 8002564:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002568:	a37d      	add	r3, pc, #500	; (adr r3, 8002760 <StartIMU_Task+0x370>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	f7fe f85b 	bl	8000628 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4620      	mov	r0, r4
 8002578:	4629      	mov	r1, r5
 800257a:	f7fd fe9f 	bl	80002bc <__adddf3>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fb47 	bl	8000c18 <__aeabi_d2f>
 800258a:	4603      	mov	r3, r0
 800258c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				tmpAccY  += (LSM6DS33.accelerometer.y*IMU_ACC_SENSITIVITY);
 8002590:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002594:	f7fd fff0 	bl	8000578 <__aeabi_f2d>
 8002598:	4604      	mov	r4, r0
 800259a:	460d      	mov	r5, r1
 800259c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025a0:	a371      	add	r3, pc, #452	; (adr r3, 8002768 <StartIMU_Task+0x378>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f83f 	bl	8000628 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fd fe83 	bl	80002bc <__adddf3>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fb2b 	bl	8000c18 <__aeabi_d2f>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				tmpAccZ  += (LSM6DS33.accelerometer.z*IMU_ACC_SENSITIVITY);
 80025c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80025cc:	f7fd ffd4 	bl	8000578 <__aeabi_f2d>
 80025d0:	4604      	mov	r4, r0
 80025d2:	460d      	mov	r5, r1
 80025d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025d8:	a363      	add	r3, pc, #396	; (adr r3, 8002768 <StartIMU_Task+0x378>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f823 	bl	8000628 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fd fe67 	bl	80002bc <__adddf3>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fb0f 	bl	8000c18 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				autocalibrationCounter++;
 8002600:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002604:	3301      	adds	r3, #1
 8002606:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if(autocalibrationCounter == IMU_AUTOCALIB_ITERATONS)
 800260a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d145      	bne.n	800269e <StartIMU_Task+0x2ae>
				{
					gyroX_Offset = -(tmpGyroX / IMU_AUTOCALIB_ITERATONS);
 8002612:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002616:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002790 <StartIMU_Task+0x3a0>
 800261a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800261e:	eef1 7a67 	vneg.f32	s15, s15
 8002622:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
					accY_Offset  = -(tmpAccY  / IMU_AUTOCALIB_ITERATONS);
 8002626:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800262a:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002790 <StartIMU_Task+0x3a0>
 800262e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002632:	eef1 7a67 	vneg.f32	s15, s15
 8002636:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
					accZ_Offset  = -(tmpAccZ  / IMU_AUTOCALIB_ITERATONS) + 1;
 800263a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800263e:	eddf 6a54 	vldr	s13, [pc, #336]	; 8002790 <StartIMU_Task+0x3a0>
 8002642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
					autocalibrationCounter = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					autocalibrationStatus = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
					tmpGyroX = 0;
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					tmpAccY = 0;
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					tmpAccZ = 0;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					sprintf(cmd, "CB=1\n");
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4946      	ldr	r1, [pc, #280]	; (8002794 <StartIMU_Task+0x3a4>)
 800267c:	4618      	mov	r0, r3
 800267e:	f00c fe17 	bl	800f2b0 <siprintf>
					sendMessageToUART(cmd);
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4618      	mov	r0, r3
 8002688:	f001 fa08 	bl	8003a9c <sendMessageToUART>
 800268c:	e007      	b.n	800269e <StartIMU_Task+0x2ae>
				}
			}
		}
		else
		{
			osMutexRelease(MutexI2CHandle);
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <StartIMU_Task+0x388>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f008 f95c 	bl	800a950 <osMutexRelease>
			sendMessageToUART("Błąd odczytu akcelerometru!\r\n");
 8002698:	483f      	ldr	r0, [pc, #252]	; (8002798 <StartIMU_Task+0x3a8>)
 800269a:	f001 f9ff 	bl	8003a9c <sendMessageToUART>
		}
	}
	if(osThreadFlagsWait(IMU_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < IMU_FLAGS)
 800269e:	2200      	movs	r2, #0
 80026a0:	2102      	movs	r1, #2
 80026a2:	20ff      	movs	r0, #255	; 0xff
 80026a4:	f007 ffe7 	bl	800a676 <osThreadFlagsWait>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2bfe      	cmp	r3, #254	; 0xfe
 80026ac:	f63f aee6 	bhi.w	800247c <StartIMU_Task+0x8c>
	{
		float tmp;
		uint8_t isSetFlag;

		flags = osThreadFlagsGet();
 80026b0:	f007 ffc0 	bl	800a634 <osThreadFlagsGet>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

		if((isSetFlag = CHECK_BIT(flags, PARSER_IMU_SET_FLAG)))
 80026ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d010      	beq.n	80026fa <StartIMU_Task+0x30a>
		{
			osMessageQueueGet(QueueUartIMUHandle, &tmp, 0, 0);
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <StartIMU_Task+0x3ac>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	f107 0108 	add.w	r1, r7, #8
 80026e0:	2300      	movs	r3, #0
 80026e2:	2200      	movs	r2, #0
 80026e4:	f008 fb64 	bl	800adb0 <osMessageQueueGet>
			osThreadFlagsClear(PARSER_IMU_SET_FLAG);
 80026e8:	2080      	movs	r0, #128	; 0x80
 80026ea:	f007 ff65 	bl	800a5b8 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_IMU_SET_FLAG);
 80026ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80026f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}
		switch(flags)
 80026fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80026fe:	3b01      	subs	r3, #1
 8002700:	2b0f      	cmp	r3, #15
 8002702:	f200 80e6 	bhi.w	80028d2 <StartIMU_Task+0x4e2>
 8002706:	a201      	add	r2, pc, #4	; (adr r2, 800270c <StartIMU_Task+0x31c>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	0800274d 	.word	0x0800274d
 8002710:	080027c3 	.word	0x080027c3
 8002714:	080028d3 	.word	0x080028d3
 8002718:	080027f5 	.word	0x080027f5
 800271c:	080028d3 	.word	0x080028d3
 8002720:	080028d3 	.word	0x080028d3
 8002724:	080028d3 	.word	0x080028d3
 8002728:	080028a9 	.word	0x080028a9
 800272c:	080028d3 	.word	0x080028d3
 8002730:	080028d3 	.word	0x080028d3
 8002734:	080028d3 	.word	0x080028d3
 8002738:	080028d3 	.word	0x080028d3
 800273c:	080028d3 	.word	0x080028d3
 8002740:	080028d3 	.word	0x080028d3
 8002744:	080028d3 	.word	0x080028d3
 8002748:	08002827 	.word	0x08002827
		{
		case PARSER_IMU_GX_OFFSET_FLAG:
			if (isSetFlag) gyroX_Offset = tmp;
 800274c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002750:	2b00      	cmp	r3, #0
 8002752:	d025      	beq.n	80027a0 <StartIMU_Task+0x3b0>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			else { sprintf(cmd, "GX=%.3f\r\n", gyroX_Offset); sendMessageToUART(cmd); }
			break;
 800275a:	e0bf      	b.n	80028dc <StartIMU_Task+0x4ec>
 800275c:	f3af 8000 	nop.w
 8002760:	1eb851ec 	.word	0x1eb851ec
 8002764:	3f81eb85 	.word	0x3f81eb85
 8002768:	0a5accd5 	.word	0x0a5accd5
 800276c:	3f0ffb48 	.word	0x3f0ffb48
 8002770:	3d4ccccd 	.word	0x3d4ccccd
 8002774:	bca3d70a 	.word	0xbca3d70a
 8002778:	20000508 	.word	0x20000508
 800277c:	20000530 	.word	0x20000530
 8002780:	080132a4 	.word	0x080132a4
 8002784:	20000514 	.word	0x20000514
 8002788:	200004f0 	.word	0x200004f0
 800278c:	080132cc 	.word	0x080132cc
 8002790:	42c80000 	.word	0x42c80000
 8002794:	080132d8 	.word	0x080132d8
 8002798:	080132e0 	.word	0x080132e0
 800279c:	200004fc 	.word	0x200004fc
			else { sprintf(cmd, "GX=%.3f\r\n", gyroX_Offset); sendMessageToUART(cmd); }
 80027a0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80027a4:	f7fd fee8 	bl	8000578 <__aeabi_f2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	f107 000c 	add.w	r0, r7, #12
 80027b0:	4950      	ldr	r1, [pc, #320]	; (80028f4 <StartIMU_Task+0x504>)
 80027b2:	f00c fd7d 	bl	800f2b0 <siprintf>
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 f96e 	bl	8003a9c <sendMessageToUART>
			break;
 80027c0:	e08c      	b.n	80028dc <StartIMU_Task+0x4ec>
		case PARSER_IMU_AY_OFFSET_FLAG:
			if (isSetFlag) accY_Offset = tmp;
 80027c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <StartIMU_Task+0x3e2>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			else { sprintf(cmd, "AY=%.3f\r\n", accY_Offset); sendMessageToUART(cmd); }
			break;
 80027d0:	e084      	b.n	80028dc <StartIMU_Task+0x4ec>
			else { sprintf(cmd, "AY=%.3f\r\n", accY_Offset); sendMessageToUART(cmd); }
 80027d2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80027d6:	f7fd fecf 	bl	8000578 <__aeabi_f2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	f107 000c 	add.w	r0, r7, #12
 80027e2:	4945      	ldr	r1, [pc, #276]	; (80028f8 <StartIMU_Task+0x508>)
 80027e4:	f00c fd64 	bl	800f2b0 <siprintf>
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f955 	bl	8003a9c <sendMessageToUART>
			break;
 80027f2:	e073      	b.n	80028dc <StartIMU_Task+0x4ec>
		case PARSER_IMU_AZ_OFFSET_FLAG:
			if (isSetFlag) accZ_Offset = tmp;
 80027f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <StartIMU_Task+0x414>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			else { sprintf(cmd, "AZ=%.3f\r\n", accZ_Offset); sendMessageToUART(cmd); }
			break;
 8002802:	e06b      	b.n	80028dc <StartIMU_Task+0x4ec>
			else { sprintf(cmd, "AZ=%.3f\r\n", accZ_Offset); sendMessageToUART(cmd); }
 8002804:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002808:	f7fd feb6 	bl	8000578 <__aeabi_f2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	f107 000c 	add.w	r0, r7, #12
 8002814:	4939      	ldr	r1, [pc, #228]	; (80028fc <StartIMU_Task+0x50c>)
 8002816:	f00c fd4b 	bl	800f2b0 <siprintf>
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4618      	mov	r0, r3
 8002820:	f001 f93c 	bl	8003a9c <sendMessageToUART>
			break;
 8002824:	e05a      	b.n	80028dc <StartIMU_Task+0x4ec>
		case PARSER_IMU_CALIBRATION_FLAG:
			if (isSetFlag && ((uint8_t) tmp == 1))
 8002826:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800282a:	2b00      	cmp	r3, #0
 800282c:	d029      	beq.n	8002882 <StartIMU_Task+0x492>
 800282e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002836:	edc7 7a00 	vstr	s15, [r7]
 800283a:	783b      	ldrb	r3, [r7, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11f      	bne.n	8002882 <StartIMU_Task+0x492>
			{
				if(DRV8834_getRobotState() == STOPPED) autocalibrationStatus = 1;
 8002842:	f7fe fc23 	bl	800108c <DRV8834_getRobotState>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <StartIMU_Task+0x464>
 800284c:	2301      	movs	r3, #1
 800284e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8002852:	e028      	b.n	80028a6 <StartIMU_Task+0x4b6>
				else
				{
					sprintf(cmd, "CB=0\r\n");
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	4929      	ldr	r1, [pc, #164]	; (8002900 <StartIMU_Task+0x510>)
 800285a:	4618      	mov	r0, r3
 800285c:	f00c fd28 	bl	800f2b0 <siprintf>
					sendMessageToUART(cmd);
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f919 	bl	8003a9c <sendMessageToUART>
					sprintf(cmd, "Wylacz silniki!\r\n");
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	4925      	ldr	r1, [pc, #148]	; (8002904 <StartIMU_Task+0x514>)
 8002870:	4618      	mov	r0, r3
 8002872:	f00c fd1d 	bl	800f2b0 <siprintf>
					sendMessageToUART(cmd);
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4618      	mov	r0, r3
 800287c:	f001 f90e 	bl	8003a9c <sendMessageToUART>
				if(DRV8834_getRobotState() == STOPPED) autocalibrationStatus = 1;
 8002880:	e011      	b.n	80028a6 <StartIMU_Task+0x4b6>
				}
			}
			else if(isSetFlag && ((uint8_t) tmp == 0)) autocalibrationStatus = 0;
 8002882:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002886:	2b00      	cmp	r3, #0
 8002888:	d025      	beq.n	80028d6 <StartIMU_Task+0x4e6>
 800288a:	edd7 7a02 	vldr	s15, [r7, #8]
 800288e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002892:	edc7 7a00 	vstr	s15, [r7]
 8002896:	783b      	ldrb	r3, [r7, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11b      	bne.n	80028d6 <StartIMU_Task+0x4e6>
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			break;
 80028a4:	e017      	b.n	80028d6 <StartIMU_Task+0x4e6>
 80028a6:	e016      	b.n	80028d6 <StartIMU_Task+0x4e6>
		case PARSER_IMU_ANGLE_FLAG:
			if(!isSetFlag) { sprintf(cmd, "ANG=%.2f\r\n", outputAngle); sendMessageToUART(cmd); }
 80028a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d114      	bne.n	80028da <StartIMU_Task+0x4ea>
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe60 	bl	8000578 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	f107 000c 	add.w	r0, r7, #12
 80028c0:	4911      	ldr	r1, [pc, #68]	; (8002908 <StartIMU_Task+0x518>)
 80028c2:	f00c fcf5 	bl	800f2b0 <siprintf>
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f8e6 	bl	8003a9c <sendMessageToUART>
			break;
 80028d0:	e003      	b.n	80028da <StartIMU_Task+0x4ea>
		default: break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <StartIMU_Task+0x4ec>
			break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <StartIMU_Task+0x4ec>
			break;
 80028da:	bf00      	nop
		}
		osThreadFlagsClear(flags);
 80028dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80028e0:	4618      	mov	r0, r3
 80028e2:	f007 fe69 	bl	800a5b8 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsIMUHandle);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <StartIMU_Task+0x51c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f008 f948 	bl	800ab80 <osSemaphoreRelease>
	if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, 20*KERNEL_TICKS_FOR_MS))
 80028f0:	e5c4      	b.n	800247c <StartIMU_Task+0x8c>
 80028f2:	bf00      	nop
 80028f4:	08013300 	.word	0x08013300
 80028f8:	0801330c 	.word	0x0801330c
 80028fc:	08013318 	.word	0x08013318
 8002900:	08013324 	.word	0x08013324
 8002904:	0801332c 	.word	0x0801332c
 8002908:	08013340 	.word	0x08013340
 800290c:	20000524 	.word	0x20000524

08002910 <StartPIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void *argument)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	ed2d 8b02 	vpush	{d8}
 8002916:	b0a0      	sub	sp, #128	; 0x80
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIDTask */
	PID_t PID;
	float input, output;
	float setpoint = PID_DEFAULT_SETPOINT;
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	677b      	str	r3, [r7, #116]	; 0x74
	float self_balance_adjusting = 0;
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	673b      	str	r3, [r7, #112]	; 0x70
	float setpoint_adjusted = PID_DEFAULT_SETPOINT;
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
	int16_t speed;
	uint16_t flags;
	RoborState_t state;
	char cmd[16];

	PID_Init(&PID, &input, &output, &setpoint_adjusted, PID_DEFAULT_KP, PID_DEFAULT_KI,
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002936:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800293a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800293e:	2400      	movs	r4, #0
 8002940:	9401      	str	r4, [sp, #4]
 8002942:	2401      	movs	r4, #1
 8002944:	9400      	str	r4, [sp, #0]
 8002946:	ed9f 1ac4 	vldr	s2, [pc, #784]	; 8002c58 <StartPIDTask+0x348>
 800294a:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 800294e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002952:	f7ff f817 	bl	8001984 <PID_Init>
			PID_DEFAULT_KD, P_ON_ERROR, DIRECT);
	PID_SetMode(&PID, AUTOMATIC);
 8002956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f96a 	bl	8001c36 <PID_SetMode>
	PID_SetSampleTime(&PID, (uint32_t) ((1.0/(float)PID_SAMPLE_TIME) * 1000.0));
 8002962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002966:	2113      	movs	r1, #19
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f8cb 	bl	8001b04 <PID_SetSampleTime>
	PID_SetOutputLimits(&PID, -DRV8834_getMaxSpeed(), DRV8834_getMaxSpeed());
 800296e:	f7fe fb99 	bl	80010a4 <DRV8834_getMaxSpeed>
 8002972:	4603      	mov	r3, r0
 8002974:	425b      	negs	r3, r3
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800297e:	f7fe fb91 	bl	80010a4 <DRV8834_getMaxSpeed>
 8002982:	4603      	mov	r3, r0
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002990:	eef0 0a67 	vmov.f32	s1, s15
 8002994:	eeb0 0a48 	vmov.f32	s0, s16
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f8e7 	bl	8001b6c <PID_SetOutputLimits>
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGet(QueueInputPIDHandle, &input, NULL, 20*KERNEL_TICKS_FOR_MS) == osOK)
 800299e:	4baf      	ldr	r3, [pc, #700]	; (8002c5c <StartPIDTask+0x34c>)
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029a6:	2314      	movs	r3, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	f008 fa01 	bl	800adb0 <osMessageQueueGet>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 817e 	bne.w	8002cb2 <StartPIDTask+0x3a2>
	  {
		state = DRV8834_getRobotState();
 80029b6:	f7fe fb69 	bl	800108c <DRV8834_getRobotState>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		if(state != STOPPED)
 80029c0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8153 	beq.w	8002c70 <StartPIDTask+0x360>
		{
			if((input < ROBOT_MAX_ANGLE) && (input > -ROBOT_MAX_ANGLE))
 80029ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029ce:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002c60 <StartPIDTask+0x350>
 80029d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	f140 8117 	bpl.w	8002c0c <StartPIDTask+0x2fc>
 80029de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029e2:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002c64 <StartPIDTask+0x354>
 80029e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	f340 810d 	ble.w	8002c0c <StartPIDTask+0x2fc>
			{
				switch(state)
 80029f2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d002      	beq.n	8002a00 <StartPIDTask+0xf0>
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d045      	beq.n	8002a8a <StartPIDTask+0x17a>
 80029fe:	e089      	b.n	8002b14 <StartPIDTask+0x204>
				{
				case FORWARD:
					if(setpoint < (PID_DEFAULT_SETPOINT + 3)) setpoint += 0.1;
 8002a00:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a04:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d50f      	bpl.n	8002a32 <StartPIDTask+0x122>
 8002a12:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a14:	f7fd fdb0 	bl	8000578 <__aeabi_f2d>
 8002a18:	a389      	add	r3, pc, #548	; (adr r3, 8002c40 <StartPIDTask+0x330>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f7fd fc4d 	bl	80002bc <__adddf3>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7fe f8f5 	bl	8000c18 <__aeabi_d2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	677b      	str	r3, [r7, #116]	; 0x74
					if(output < -0.25*DRV8834_getMaxSpeed()) setpoint += 0.01;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd9f 	bl	8000578 <__aeabi_f2d>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	460d      	mov	r5, r1
 8002a3e:	f7fe fb31 	bl	80010a4 <DRV8834_getMaxSpeed>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd85 	bl	8000554 <__aeabi_i2d>
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	4b86      	ldr	r3, [pc, #536]	; (8002c68 <StartPIDTask+0x358>)
 8002a50:	f7fd fdea 	bl	8000628 <__aeabi_dmul>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fe f856 	bl	8000b0c <__aeabi_dcmplt>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d100      	bne.n	8002a68 <StartPIDTask+0x158>
					break;
 8002a66:	e08d      	b.n	8002b84 <StartPIDTask+0x274>
					if(output < -0.25*DRV8834_getMaxSpeed()) setpoint += 0.01;
 8002a68:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a6a:	f7fd fd85 	bl	8000578 <__aeabi_f2d>
 8002a6e:	a376      	add	r3, pc, #472	; (adr r3, 8002c48 <StartPIDTask+0x338>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fc22 	bl	80002bc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f8ca 	bl	8000c18 <__aeabi_d2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	677b      	str	r3, [r7, #116]	; 0x74
					break;
 8002a88:	e07c      	b.n	8002b84 <StartPIDTask+0x274>
				case BACKWARD:
					if(setpoint > (PID_DEFAULT_SETPOINT - 3)) setpoint -= 0.1;
 8002a8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a8e:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	dd0f      	ble.n	8002abc <StartPIDTask+0x1ac>
 8002a9c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a9e:	f7fd fd6b 	bl	8000578 <__aeabi_f2d>
 8002aa2:	a367      	add	r3, pc, #412	; (adr r3, 8002c40 <StartPIDTask+0x330>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f7fd fc06 	bl	80002b8 <__aeabi_dsub>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f8b0 	bl	8000c18 <__aeabi_d2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	677b      	str	r3, [r7, #116]	; 0x74
					if(output > 0.25*DRV8834_getMaxSpeed()) setpoint -= 0.01;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd5a 	bl	8000578 <__aeabi_f2d>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	460d      	mov	r5, r1
 8002ac8:	f7fe faec 	bl	80010a4 <DRV8834_getMaxSpeed>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fd40 	bl	8000554 <__aeabi_i2d>
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <StartPIDTask+0x35c>)
 8002ada:	f7fd fda5 	bl	8000628 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	f7fe f82f 	bl	8000b48 <__aeabi_dcmpgt>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d100      	bne.n	8002af2 <StartPIDTask+0x1e2>
					break;
 8002af0:	e048      	b.n	8002b84 <StartPIDTask+0x274>
					if(output > 0.25*DRV8834_getMaxSpeed()) setpoint -= 0.01;
 8002af2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002af4:	f7fd fd40 	bl	8000578 <__aeabi_f2d>
 8002af8:	a353      	add	r3, pc, #332	; (adr r3, 8002c48 <StartPIDTask+0x338>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f7fd fbdb 	bl	80002b8 <__aeabi_dsub>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe f885 	bl	8000c18 <__aeabi_d2f>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	677b      	str	r3, [r7, #116]	; 0x74
					break;
 8002b12:	e037      	b.n	8002b84 <StartPIDTask+0x274>
				default:
					if(setpoint > 0.5) setpoint -= 0.1;
 8002b14:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	dd10      	ble.n	8002b48 <StartPIDTask+0x238>
 8002b26:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002b28:	f7fd fd26 	bl	8000578 <__aeabi_f2d>
 8002b2c:	a344      	add	r3, pc, #272	; (adr r3, 8002c40 <StartPIDTask+0x330>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fbc1 	bl	80002b8 <__aeabi_dsub>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f86b 	bl	8000c18 <__aeabi_d2f>
 8002b42:	4603      	mov	r3, r0
 8002b44:	677b      	str	r3, [r7, #116]	; 0x74
					else if(setpoint < -0.5) setpoint += 0.1;
					else setpoint = 0;
					break;
 8002b46:	e01c      	b.n	8002b82 <StartPIDTask+0x272>
					else if(setpoint < -0.5) setpoint += 0.1;
 8002b48:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b4c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	d510      	bpl.n	8002b7c <StartPIDTask+0x26c>
 8002b5a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002b5c:	f7fd fd0c 	bl	8000578 <__aeabi_f2d>
 8002b60:	a337      	add	r3, pc, #220	; (adr r3, 8002c40 <StartPIDTask+0x330>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fba9 	bl	80002bc <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fe f851 	bl	8000c18 <__aeabi_d2f>
 8002b76:	4603      	mov	r3, r0
 8002b78:	677b      	str	r3, [r7, #116]	; 0x74
					break;
 8002b7a:	e002      	b.n	8002b82 <StartPIDTask+0x272>
					else setpoint = 0;
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	677b      	str	r3, [r7, #116]	; 0x74
					break;
 8002b82:	bf00      	nop
				}
				if(setpoint == 0)
 8002b84:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	d12e      	bne.n	8002bf0 <StartPIDTask+0x2e0>
				{
					if(output < 0) self_balance_adjusting += 0.001;
 8002b92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d510      	bpl.n	8002bc2 <StartPIDTask+0x2b2>
 8002ba0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ba2:	f7fd fce9 	bl	8000578 <__aeabi_f2d>
 8002ba6:	a32a      	add	r3, pc, #168	; (adr r3, 8002c50 <StartPIDTask+0x340>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fb86 	bl	80002bc <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fe f82e 	bl	8000c18 <__aeabi_d2f>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002bc0:	e016      	b.n	8002bf0 <StartPIDTask+0x2e0>
					else if(output > 0) self_balance_adjusting -= 0.001;
 8002bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	dd0f      	ble.n	8002bf0 <StartPIDTask+0x2e0>
 8002bd0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002bd2:	f7fd fcd1 	bl	8000578 <__aeabi_f2d>
 8002bd6:	a31e      	add	r3, pc, #120	; (adr r3, 8002c50 <StartPIDTask+0x340>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fb6c 	bl	80002b8 <__aeabi_dsub>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7fe f816 	bl	8000c18 <__aeabi_d2f>
 8002bec:	4603      	mov	r3, r0
 8002bee:	673b      	str	r3, [r7, #112]	; 0x70
				}
				setpoint_adjusted = setpoint + self_balance_adjusting;
 8002bf0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002bf4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	edc7 7a08 	vstr	s15, [r7, #32]
				PID_Compute(&PID);
 8002c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff f897 	bl	8001d38 <PID_Compute>
 8002c0a:	e002      	b.n	8002c12 <StartPIDTask+0x302>
			}
			else
			{
				output = 0;
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
			}

			if((output < ROBOT_ZERO_HYSTERESIS) && (output > -ROBOT_ZERO_HYSTERESIS))
 8002c12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c16:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d52d      	bpl.n	8002c80 <StartPIDTask+0x370>
 8002c24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c28:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	dd24      	ble.n	8002c80 <StartPIDTask+0x370>
			{
				output = 0;
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e020      	b.n	8002c80 <StartPIDTask+0x370>
 8002c3e:	bf00      	nop
 8002c40:	9999999a 	.word	0x9999999a
 8002c44:	3fb99999 	.word	0x3fb99999
 8002c48:	47ae147b 	.word	0x47ae147b
 8002c4c:	3f847ae1 	.word	0x3f847ae1
 8002c50:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c54:	3f50624d 	.word	0x3f50624d
 8002c58:	3c75c28f 	.word	0x3c75c28f
 8002c5c:	200004f0 	.word	0x200004f0
 8002c60:	42200000 	.word	0x42200000
 8002c64:	c2200000 	.word	0xc2200000
 8002c68:	bfd00000 	.word	0xbfd00000
 8002c6c:	3fd00000 	.word	0x3fd00000
			}
		}
		else
		{
			output = 0;
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
			setpoint = setpoint_adjusted = PID_DEFAULT_SETPOINT;
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	677b      	str	r3, [r7, #116]	; 0x74
		}
		speed = (int16_t) output;
 8002c80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c88:	ee17 3a90 	vmov	r3, s15
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	83fb      	strh	r3, [r7, #30]
		osMessageQueuePut(QueueOutputPIDHandle, &speed, 0, 0);
 8002c90:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <StartPIDTask+0x4bc>)
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	f107 011e 	add.w	r1, r7, #30
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f008 f828 	bl	800acf0 <osMessageQueuePut>

		pidMonitorInput = input;
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	4a4b      	ldr	r2, [pc, #300]	; (8002dd0 <StartPIDTask+0x4c0>)
 8002ca4:	6013      	str	r3, [r2, #0]
		pidMonitorOutput = output;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <StartPIDTask+0x4c4>)
 8002caa:	6013      	str	r3, [r2, #0]
		pidMonitorSetpoint = setpoint_adjusted;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <StartPIDTask+0x4c8>)
 8002cb0:	6013      	str	r3, [r2, #0]
	  }

	  if(osThreadFlagsWait(PID_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < PID_FLAGS)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	20ff      	movs	r0, #255	; 0xff
 8002cb8:	f007 fcdd 	bl	800a676 <osThreadFlagsWait>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8002cc0:	f63f ae6d 	bhi.w	800299e <StartPIDTask+0x8e>
	  {
		float tmp;
		uint8_t isSetFlag;

		flags = osThreadFlagsGet();
 8002cc4:	f007 fcb6 	bl	800a634 <osThreadFlagsGet>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if((isSetFlag = CHECK_BIT(flags, PARSER_PID_SET_FLAG)))
 8002cce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8002ce4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <StartPIDTask+0x3fe>
		{
			osMessageQueueGet(QueueUartPIDHandle, &tmp, 0, 0);
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <StartPIDTask+0x4cc>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	f107 0108 	add.w	r1, r7, #8
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f008 f85a 	bl	800adb0 <osMessageQueueGet>
			osThreadFlagsClear(PARSER_PID_SET_FLAG);
 8002cfc:	2080      	movs	r0, #128	; 0x80
 8002cfe:	f007 fc5b 	bl	800a5b8 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_PID_SET_FLAG);
 8002d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		}
		switch(flags)
 8002d0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d036      	beq.n	8002d84 <StartPIDTask+0x474>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	dc4c      	bgt.n	8002db4 <StartPIDTask+0x4a4>
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d002      	beq.n	8002d24 <StartPIDTask+0x414>
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d018      	beq.n	8002d54 <StartPIDTask+0x444>
			break;
		case PARSER_PID_KD_FLAG:
			if (isSetFlag) PID.dispKd = tmp;
			else { sprintf(cmd, "KD=%.3f\r\n", PID.dispKd); sendMessageToUART(cmd); }
			break;
		default: break;
 8002d22:	e047      	b.n	8002db4 <StartPIDTask+0x4a4>
			if (isSetFlag)
 8002d24:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <StartPIDTask+0x422>
				PID.dispKp = tmp;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8002d30:	e041      	b.n	8002db6 <StartPIDTask+0x4a6>
				sprintf(cmd, "KP=%.3f\r\n", PID.dispKp);
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc1f 	bl	8000578 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	f107 000c 	add.w	r0, r7, #12
 8002d42:	4927      	ldr	r1, [pc, #156]	; (8002de0 <StartPIDTask+0x4d0>)
 8002d44:	f00c fab4 	bl	800f2b0 <siprintf>
				sendMessageToUART(cmd);
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fea5 	bl	8003a9c <sendMessageToUART>
			break;
 8002d52:	e030      	b.n	8002db6 <StartPIDTask+0x4a6>
			if (isSetFlag) PID.dispKi = tmp;
 8002d54:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <StartPIDTask+0x452>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002d60:	e029      	b.n	8002db6 <StartPIDTask+0x4a6>
			else { sprintf(cmd, "KI=%.3f\r\n", PID.dispKi); sendMessageToUART(cmd); }
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fc07 	bl	8000578 <__aeabi_f2d>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	f107 000c 	add.w	r0, r7, #12
 8002d72:	491c      	ldr	r1, [pc, #112]	; (8002de4 <StartPIDTask+0x4d4>)
 8002d74:	f00c fa9c 	bl	800f2b0 <siprintf>
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fe8d 	bl	8003a9c <sendMessageToUART>
			break;
 8002d82:	e018      	b.n	8002db6 <StartPIDTask+0x4a6>
			if (isSetFlag) PID.dispKd = tmp;
 8002d84:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <StartPIDTask+0x482>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8002d90:	e011      	b.n	8002db6 <StartPIDTask+0x4a6>
			else { sprintf(cmd, "KD=%.3f\r\n", PID.dispKd); sendMessageToUART(cmd); }
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbef 	bl	8000578 <__aeabi_f2d>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	f107 000c 	add.w	r0, r7, #12
 8002da2:	4911      	ldr	r1, [pc, #68]	; (8002de8 <StartPIDTask+0x4d8>)
 8002da4:	f00c fa84 	bl	800f2b0 <siprintf>
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fe75 	bl	8003a9c <sendMessageToUART>
			break;
 8002db2:	e000      	b.n	8002db6 <StartPIDTask+0x4a6>
		default: break;
 8002db4:	bf00      	nop
		}
		osThreadFlagsClear(flags);
 8002db6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f007 fbfc 	bl	800a5b8 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsPIDHandle);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <StartPIDTask+0x4dc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f007 fedb 	bl	800ab80 <osSemaphoreRelease>
	  if(osMessageQueueGet(QueueInputPIDHandle, &input, NULL, 20*KERNEL_TICKS_FOR_MS) == osOK)
 8002dca:	e5e8      	b.n	800299e <StartPIDTask+0x8e>
 8002dcc:	200004f4 	.word	0x200004f4
 8002dd0:	200002b4 	.word	0x200002b4
 8002dd4:	200002b8 	.word	0x200002b8
 8002dd8:	200002bc 	.word	0x200002bc
 8002ddc:	200004f8 	.word	0x200004f8
 8002de0:	0801334c 	.word	0x0801334c
 8002de4:	08013358 	.word	0x08013358
 8002de8:	08013364 	.word	0x08013364
 8002dec:	20000520 	.word	0x20000520

08002df0 <StartStepperMotorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStepperMotorsTask */
void StartStepperMotorsTask(void *argument)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0a6      	sub	sp, #152	; 0x98
 8002df4:	af04      	add	r7, sp, #16
 8002df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStepperMotorsTask */
	StepMotor_t rightMotor;
	StepMotor_t leftMotor;
	int16_t speed = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t speedLeft = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t speedRight = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	uint16_t flags;
	char cmd[16];
	RoborState_t state;
	uint8_t statePrintDelay = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

	DRV8834_Init(&leftMotor, &htim2, TIM_CHANNEL_3);
 8002e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e12:	2208      	movs	r2, #8
 8002e14:	49c6      	ldr	r1, [pc, #792]	; (8003130 <StartStepperMotorsTask+0x340>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f95c 	bl	80010d4 <DRV8834_Init>
	DRV8834_InitPins(&leftMotor, leftMotor_DIR_Pin, leftMotor_DIR_GPIO_Port,
 8002e1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e20:	4bc4      	ldr	r3, [pc, #784]	; (8003134 <StartStepperMotorsTask+0x344>)
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	2320      	movs	r3, #32
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	4bc2      	ldr	r3, [pc, #776]	; (8003134 <StartStepperMotorsTask+0x344>)
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	4ac1      	ldr	r2, [pc, #772]	; (8003134 <StartStepperMotorsTask+0x344>)
 8002e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e34:	f7fe f966 	bl	8001104 <DRV8834_InitPins>
			leftMotor_M0_Pin, leftMotor_M0_GPIO_Port, leftMotor_M1_Pin, leftMotor_M1_GPIO_Port);
	DRV8834_SetMicrostep(&leftMotor, MOT_DEFAULT_MICROSTEP);
 8002e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f9b8 	bl	80011b4 <DRV8834_SetMicrostep>

	DRV8834_Init(&rightMotor, &htim4, TIM_CHANNEL_1);
 8002e44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e48:	2200      	movs	r2, #0
 8002e4a:	49bb      	ldr	r1, [pc, #748]	; (8003138 <StartStepperMotorsTask+0x348>)
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe f941 	bl	80010d4 <DRV8834_Init>
	DRV8834_InitPins(&rightMotor, rightMotor_DIR_Pin, rightMotor_DIR_GPIO_Port,
 8002e52:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002e56:	4bb9      	ldr	r3, [pc, #740]	; (800313c <StartStepperMotorsTask+0x34c>)
 8002e58:	9302      	str	r3, [sp, #8]
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	4bb7      	ldr	r3, [pc, #732]	; (800313c <StartStepperMotorsTask+0x34c>)
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2310      	movs	r3, #16
 8002e64:	4ab3      	ldr	r2, [pc, #716]	; (8003134 <StartStepperMotorsTask+0x344>)
 8002e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e6a:	f7fe f94b 	bl	8001104 <DRV8834_InitPins>
			rightMotor_M0_Pin, rightMotor_M0_GPIO_Port, rightMotor_M1_Pin, rightMotor_M1_GPIO_Port);
	DRV8834_SetMicrostep(&rightMotor, MOT_DEFAULT_MICROSTEP);
 8002e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e72:	2104      	movs	r1, #4
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f99d 	bl	80011b4 <DRV8834_SetMicrostep>

	DRV8834_StartMotor(&leftMotor, 0);
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fb3b 	bl	80014fc <DRV8834_StartMotor>
	DRV8834_StartMotor(&rightMotor, 0);
 8002e86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fb35 	bl	80014fc <DRV8834_StartMotor>
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &speed, NULL, 20*KERNEL_TICKS_FOR_MS))
 8002e92:	4bab      	ldr	r3, [pc, #684]	; (8003140 <StartStepperMotorsTask+0x350>)
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8002e9a:	2314      	movs	r3, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f007 ff87 	bl	800adb0 <osMessageQueueGet>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16d      	bne.n	8002f84 <StartStepperMotorsTask+0x194>
	{
		state = DRV8834_getRobotState();
 8002ea8:	f7fe f8f0 	bl	800108c <DRV8834_getRobotState>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		switch(state)
 8002eb2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d002      	beq.n	8002ec0 <StartStepperMotorsTask+0xd0>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d00f      	beq.n	8002ede <StartStepperMotorsTask+0xee>
 8002ebe:	e01d      	b.n	8002efc <StartStepperMotorsTask+0x10c>
		{
		case LEFT:  speedLeft = speed + MOT_TURNING_SPEED; speedRight = speed - MOT_TURNING_SPEED; break;
 8002ec0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3305      	adds	r3, #5
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002ece:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b05      	subs	r3, #5
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002edc:	e016      	b.n	8002f0c <StartStepperMotorsTask+0x11c>
		case RIGHT:	speedLeft = speed - MOT_TURNING_SPEED; speedRight = speed + MOT_TURNING_SPEED; break;
 8002ede:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b05      	subs	r3, #5
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002eec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3305      	adds	r3, #5
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002efa:	e007      	b.n	8002f0c <StartStepperMotorsTask+0x11c>
		default: speedLeft = speedRight = speed; break;
 8002efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002efe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002f02:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002f06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002f0a:	bf00      	nop
		}
		if(state != STOPPED)
 8002f0c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <StartStepperMotorsTask+0x146>
		{
			DRV8834_SetSpeed(&leftMotor, -speedLeft);
 8002f14:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002f18:	425a      	negs	r2, r3
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fa19 	bl	8001358 <DRV8834_SetSpeed>
			DRV8834_SetSpeed(&rightMotor, speedRight);
 8002f26:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8002f2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fa11 	bl	8001358 <DRV8834_SetSpeed>
		}

		sprintf(cmd, "SPD=%d\r\n", -(int)speed);
 8002f36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002f3a:	425a      	negs	r2, r3
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	4980      	ldr	r1, [pc, #512]	; (8003144 <StartStepperMotorsTask+0x354>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f00c f9b4 	bl	800f2b0 <siprintf>
		sendMessageToUART(cmd);
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fda5 	bl	8003a9c <sendMessageToUART>

		statePrintDelay++;
 8002f52:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002f56:	3301      	adds	r3, #1
 8002f58:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		if(statePrintDelay >= 25)
 8002f5c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002f60:	2b18      	cmp	r3, #24
 8002f62:	d90f      	bls.n	8002f84 <StartStepperMotorsTask+0x194>
		{
			sprintf(cmd, "ST=%d\r\n", (int) state);
 8002f64:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	4976      	ldr	r1, [pc, #472]	; (8003148 <StartStepperMotorsTask+0x358>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00c f99e 	bl	800f2b0 <siprintf>
			sendMessageToUART(cmd);
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fd8f 	bl	8003a9c <sendMessageToUART>
			statePrintDelay = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		}

	}

	  if(osThreadFlagsWait(MOT_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < MOT_FLAGS)
 8002f84:	2200      	movs	r2, #0
 8002f86:	2102      	movs	r1, #2
 8002f88:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002f8c:	f007 fb73 	bl	800a676 <osThreadFlagsWait>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f63f af7b 	bhi.w	8002e92 <StartStepperMotorsTask+0xa2>
	  {
		uint16_t tmp;
		uint8_t isSetFlag;

		flags = osThreadFlagsGet();
 8002f9c:	f007 fb4a 	bl	800a634 <osThreadFlagsGet>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		if((isSetFlag = CHECK_BIT(flags, PARSER_MOT_SET_FLAG)))
 8002fa6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fbc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <StartStepperMotorsTask+0x1f8>
		{
			osMessageQueueGet(QueueUartMOTHandle, &tmp, 0, 0);
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <StartStepperMotorsTask+0x35c>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	f107 010e 	add.w	r1, r7, #14
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f007 feee 	bl	800adb0 <osMessageQueueGet>
			osThreadFlagsClear(PARSER_MOT_SET_FLAG);
 8002fd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fd8:	f007 faee 	bl	800a5b8 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_MOT_SET_FLAG);
 8002fdc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		}
		switch(flags)
 8002fe8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	f000 8151 	beq.w	8003296 <StartStepperMotorsTask+0x4a6>
 8002ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff8:	f300 8161 	bgt.w	80032be <StartStepperMotorsTask+0x4ce>
 8002ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003000:	f000 8136 	beq.w	8003270 <StartStepperMotorsTask+0x480>
 8003004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003008:	f300 8159 	bgt.w	80032be <StartStepperMotorsTask+0x4ce>
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	f000 8102 	beq.w	8003216 <StartStepperMotorsTask+0x426>
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	f300 8153 	bgt.w	80032be <StartStepperMotorsTask+0x4ce>
 8003018:	2b20      	cmp	r3, #32
 800301a:	dc49      	bgt.n	80030b0 <StartStepperMotorsTask+0x2c0>
 800301c:	2b00      	cmp	r3, #0
 800301e:	f340 814e 	ble.w	80032be <StartStepperMotorsTask+0x4ce>
 8003022:	3b01      	subs	r3, #1
 8003024:	2b1f      	cmp	r3, #31
 8003026:	f200 814a 	bhi.w	80032be <StartStepperMotorsTask+0x4ce>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <StartStepperMotorsTask+0x240>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	080030b9 	.word	0x080030b9
 8003034:	080030d7 	.word	0x080030d7
 8003038:	080032bf 	.word	0x080032bf
 800303c:	080030f5 	.word	0x080030f5
 8003040:	080032bf 	.word	0x080032bf
 8003044:	080032bf 	.word	0x080032bf
 8003048:	080032bf 	.word	0x080032bf
 800304c:	08003113 	.word	0x08003113
 8003050:	080032bf 	.word	0x080032bf
 8003054:	080032bf 	.word	0x080032bf
 8003058:	080032bf 	.word	0x080032bf
 800305c:	080032bf 	.word	0x080032bf
 8003060:	080032bf 	.word	0x080032bf
 8003064:	080032bf 	.word	0x080032bf
 8003068:	080032bf 	.word	0x080032bf
 800306c:	08003151 	.word	0x08003151
 8003070:	080032bf 	.word	0x080032bf
 8003074:	080032bf 	.word	0x080032bf
 8003078:	080032bf 	.word	0x080032bf
 800307c:	080032bf 	.word	0x080032bf
 8003080:	080032bf 	.word	0x080032bf
 8003084:	080032bf 	.word	0x080032bf
 8003088:	080032bf 	.word	0x080032bf
 800308c:	080032bf 	.word	0x080032bf
 8003090:	080032bf 	.word	0x080032bf
 8003094:	080032bf 	.word	0x080032bf
 8003098:	080032bf 	.word	0x080032bf
 800309c:	080032bf 	.word	0x080032bf
 80030a0:	080032bf 	.word	0x080032bf
 80030a4:	080032bf 	.word	0x080032bf
 80030a8:	080032bf 	.word	0x080032bf
 80030ac:	080031b3 	.word	0x080031b3
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	f000 8097 	beq.w	80031e4 <StartStepperMotorsTask+0x3f4>
			if (!isSetFlag) { sprintf(cmd, "SPD=%d\r\n", (int)speed); sendMessageToUART(cmd); }
			break;
		case PARSER_MOT_STATE_FLAG:
			if (!isSetFlag) { sprintf(cmd, "ST=%d\r\n", (int)DRV8834_getRobotState()); sendMessageToUART(cmd); }
			break;
		default: break;
 80030b6:	e102      	b.n	80032be <StartStepperMotorsTask+0x4ce>
			if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? FORWARD : BALANCING));
 80030b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8100 	beq.w	80032c2 <StartStepperMotorsTask+0x4d2>
 80030c2:	89fb      	ldrh	r3, [r7, #14]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <StartStepperMotorsTask+0x2dc>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <StartStepperMotorsTask+0x2de>
 80030cc:	2305      	movs	r3, #5
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd ffaa 	bl	8001028 <DRV8834_setRobotState>
			break;
 80030d4:	e0f5      	b.n	80032c2 <StartStepperMotorsTask+0x4d2>
			if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? BACKWARD : BALANCING));
 80030d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80f3 	beq.w	80032c6 <StartStepperMotorsTask+0x4d6>
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <StartStepperMotorsTask+0x2fa>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e000      	b.n	80030ec <StartStepperMotorsTask+0x2fc>
 80030ea:	2305      	movs	r3, #5
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd ff9b 	bl	8001028 <DRV8834_setRobotState>
			break;
 80030f2:	e0e8      	b.n	80032c6 <StartStepperMotorsTask+0x4d6>
			if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? LEFT : BALANCING));
 80030f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80e6 	beq.w	80032ca <StartStepperMotorsTask+0x4da>
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <StartStepperMotorsTask+0x318>
 8003104:	2303      	movs	r3, #3
 8003106:	e000      	b.n	800310a <StartStepperMotorsTask+0x31a>
 8003108:	2305      	movs	r3, #5
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd ff8c 	bl	8001028 <DRV8834_setRobotState>
			break;
 8003110:	e0db      	b.n	80032ca <StartStepperMotorsTask+0x4da>
			if (isSetFlag) DRV8834_setRobotState((tmp > 0.5 ? RIGHT : BALANCING));
 8003112:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80d9 	beq.w	80032ce <StartStepperMotorsTask+0x4de>
 800311c:	89fb      	ldrh	r3, [r7, #14]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <StartStepperMotorsTask+0x336>
 8003122:	2304      	movs	r3, #4
 8003124:	e000      	b.n	8003128 <StartStepperMotorsTask+0x338>
 8003126:	2305      	movs	r3, #5
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd ff7d 	bl	8001028 <DRV8834_setRobotState>
			break;
 800312e:	e0ce      	b.n	80032ce <StartStepperMotorsTask+0x4de>
 8003130:	20000604 	.word	0x20000604
 8003134:	40020000 	.word	0x40020000
 8003138:	20000694 	.word	0x20000694
 800313c:	40020400 	.word	0x40020400
 8003140:	200004f4 	.word	0x200004f4
 8003144:	08013370 	.word	0x08013370
 8003148:	0801337c 	.word	0x0801337c
 800314c:	20000500 	.word	0x20000500
			if (isSetFlag)
 8003150:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <StartStepperMotorsTask+0x38a>
				DRV8834_SetMicrostep(&leftMotor, (uint8_t) tmp);
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe f826 	bl	80011b4 <DRV8834_SetMicrostep>
				DRV8834_SetMicrostep(&rightMotor, (uint8_t) tmp);
 8003168:	89fb      	ldrh	r3, [r7, #14]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f81e 	bl	80011b4 <DRV8834_SetMicrostep>
			break;
 8003178:	e0b0      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			{ 	if(leftMotor.microstep == rightMotor.microstep)
 800317a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800317e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8003182:	429a      	cmp	r2, r3
 8003184:	d109      	bne.n	800319a <StartStepperMotorsTask+0x3aa>
					sprintf(cmd, "MST=%d\r\n", leftMotor.microstep);
 8003186:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800318a:	461a      	mov	r2, r3
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	4958      	ldr	r1, [pc, #352]	; (80032f4 <StartStepperMotorsTask+0x504>)
 8003192:	4618      	mov	r0, r3
 8003194:	f00c f88c 	bl	800f2b0 <siprintf>
 8003198:	e005      	b.n	80031a6 <StartStepperMotorsTask+0x3b6>
					sprintf(cmd, "Rozne mkroki!\r\n");
 800319a:	f107 0310 	add.w	r3, r7, #16
 800319e:	4956      	ldr	r1, [pc, #344]	; (80032f8 <StartStepperMotorsTask+0x508>)
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00c f885 	bl	800f2b0 <siprintf>
				sendMessageToUART(cmd);
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fc76 	bl	8003a9c <sendMessageToUART>
			break;
 80031b0:	e094      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			if (isSetFlag) DRV8834_setMaxFreq((uint16_t) tmp);
 80031b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <StartStepperMotorsTask+0x3d4>
 80031ba:	89fb      	ldrh	r3, [r7, #14]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff55 	bl	800106c <DRV8834_setMaxFreq>
			break;
 80031c2:	e08b      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			else { sprintf(cmd, "MF=%d\r\n", (int) DRV8834_getMaxFreq()); sendMessageToUART(cmd); }
 80031c4:	f7fd ff7a 	bl	80010bc <DRV8834_getMaxFreq>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	494a      	ldr	r1, [pc, #296]	; (80032fc <StartStepperMotorsTask+0x50c>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00c f86c 	bl	800f2b0 <siprintf>
 80031d8:	f107 0310 	add.w	r3, r7, #16
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fc5d 	bl	8003a9c <sendMessageToUART>
			break;
 80031e2:	e07b      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			if (isSetFlag) DRV8834_setMaxSpeed((uint16_t) tmp);
 80031e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <StartStepperMotorsTask+0x406>
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd ff2c 	bl	800104c <DRV8834_setMaxSpeed>
			break;
 80031f4:	e072      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			else { sprintf(cmd, "MSP=%d\r\n", (int) DRV8834_getMaxSpeed()); sendMessageToUART(cmd); }
 80031f6:	f7fd ff55 	bl	80010a4 <DRV8834_getMaxSpeed>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	493f      	ldr	r1, [pc, #252]	; (8003300 <StartStepperMotorsTask+0x510>)
 8003204:	4618      	mov	r0, r3
 8003206:	f00c f853 	bl	800f2b0 <siprintf>
 800320a:	f107 0310 	add.w	r3, r7, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc44 	bl	8003a9c <sendMessageToUART>
			break;
 8003214:	e062      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			if (isSetFlag)
 8003216:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800321a:	2b00      	cmp	r3, #0
 800321c:	d059      	beq.n	80032d2 <StartStepperMotorsTask+0x4e2>
				if(DRV8834_getRobotState() != STOPPED && ((uint8_t) tmp == 1))
 800321e:	f7fd ff35 	bl	800108c <DRV8834_getRobotState>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <StartStepperMotorsTask+0x456>
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10a      	bne.n	8003246 <StartStepperMotorsTask+0x456>
					{ DRV8834_StopMotor(&leftMotor); DRV8834_StopMotor(&rightMotor); }
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe f85d 	bl	80012f4 <DRV8834_StopMotor>
 800323a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe f858 	bl	80012f4 <DRV8834_StopMotor>
			break;
 8003244:	e045      	b.n	80032d2 <StartStepperMotorsTask+0x4e2>
				else if(((uint8_t) tmp == 0))
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d141      	bne.n	80032d2 <StartStepperMotorsTask+0x4e2>
					{ DRV8834_StartMotor(&leftMotor, speedLeft); DRV8834_StartMotor(&rightMotor, speedRight); }
 800324e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8003252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe f94f 	bl	80014fc <DRV8834_StartMotor>
 800325e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8003262:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe f947 	bl	80014fc <DRV8834_StartMotor>
			break;
 800326e:	e030      	b.n	80032d2 <StartStepperMotorsTask+0x4e2>
			if (!isSetFlag) { sprintf(cmd, "SPD=%d\r\n", (int)speed); sendMessageToUART(cmd); }
 8003270:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003274:	2b00      	cmp	r3, #0
 8003276:	d12e      	bne.n	80032d6 <StartStepperMotorsTask+0x4e6>
 8003278:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800327c:	461a      	mov	r2, r3
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	4920      	ldr	r1, [pc, #128]	; (8003304 <StartStepperMotorsTask+0x514>)
 8003284:	4618      	mov	r0, r3
 8003286:	f00c f813 	bl	800f2b0 <siprintf>
 800328a:	f107 0310 	add.w	r3, r7, #16
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fc04 	bl	8003a9c <sendMessageToUART>
			break;
 8003294:	e01f      	b.n	80032d6 <StartStepperMotorsTask+0x4e6>
			if (!isSetFlag) { sprintf(cmd, "ST=%d\r\n", (int)DRV8834_getRobotState()); sendMessageToUART(cmd); }
 8003296:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11d      	bne.n	80032da <StartStepperMotorsTask+0x4ea>
 800329e:	f7fd fef5 	bl	800108c <DRV8834_getRobotState>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	f107 0310 	add.w	r3, r7, #16
 80032aa:	4917      	ldr	r1, [pc, #92]	; (8003308 <StartStepperMotorsTask+0x518>)
 80032ac:	4618      	mov	r0, r3
 80032ae:	f00b ffff 	bl	800f2b0 <siprintf>
 80032b2:	f107 0310 	add.w	r3, r7, #16
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fbf0 	bl	8003a9c <sendMessageToUART>
			break;
 80032bc:	e00d      	b.n	80032da <StartStepperMotorsTask+0x4ea>
		default: break;
 80032be:	bf00      	nop
 80032c0:	e00c      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032c2:	bf00      	nop
 80032c4:	e00a      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032c6:	bf00      	nop
 80032c8:	e008      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032ca:	bf00      	nop
 80032cc:	e006      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032ce:	bf00      	nop
 80032d0:	e004      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <StartStepperMotorsTask+0x4ec>
			break;
 80032da:	bf00      	nop
		}
		osThreadFlagsClear(flags);
 80032dc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80032e0:	4618      	mov	r0, r3
 80032e2:	f007 f969 	bl	800a5b8 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsMOTHandle);
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <StartStepperMotorsTask+0x51c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f007 fc48 	bl	800ab80 <osSemaphoreRelease>
	if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &speed, NULL, 20*KERNEL_TICKS_FOR_MS))
 80032f0:	e5cf      	b.n	8002e92 <StartStepperMotorsTask+0xa2>
 80032f2:	bf00      	nop
 80032f4:	08013384 	.word	0x08013384
 80032f8:	08013390 	.word	0x08013390
 80032fc:	080133a0 	.word	0x080133a0
 8003300:	080133a8 	.word	0x080133a8
 8003304:	08013370 	.word	0x08013370
 8003308:	0801337c 	.word	0x0801337c
 800330c:	20000528 	.word	0x20000528

08003310 <StartOtherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOtherTask */
void StartOtherTask(void *argument)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b092      	sub	sp, #72	; 0x48
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOtherTask */
	uint16_t batteryVoltageReadings[OTH_BAT_NUM_OF_READINGS];
	float batteryVoltageMin = OTH_BAT_DEFAULT_MIN_V;
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <StartOtherTask+0x238>)
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
	float batteryVoltageMax = ((OTH_BAT_DEFAULT_MAX_V > OTH_ADC_VDDA_VALUE) ? OTH_ADC_VDDA_VALUE : OTH_BAT_DEFAULT_MAX_V);
 800331c:	4b8b      	ldr	r3, [pc, #556]	; (800354c <StartOtherTask+0x23c>)
 800331e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t batteryVoltageMean = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t batteryLevel = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t flags;
	char cmd[16];

	osSemaphoreAcquire(SemaphoreADC_DataReadyHandle, osWaitForever);
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <StartOtherTask+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f04f 31ff 	mov.w	r1, #4294967295
 8003332:	4618      	mov	r0, r3
 8003334:	f007 fbd2 	bl	800aadc <osSemaphoreAcquire>
	HAL_TIM_Base_Start(&htim3);
 8003338:	4886      	ldr	r0, [pc, #536]	; (8003554 <StartOtherTask+0x244>)
 800333a:	f004 fd8d 	bl	8007e58 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)batteryVoltageReadings, OTH_BAT_NUM_OF_READINGS);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	220a      	movs	r2, #10
 8003344:	4619      	mov	r1, r3
 8003346:	4884      	ldr	r0, [pc, #528]	; (8003558 <StartOtherTask+0x248>)
 8003348:	f001 fe5e 	bl	8005008 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(SemaphoreADC_DataReadyHandle, 200*KERNEL_TICKS_FOR_MS) == osOK)
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <StartOtherTask+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	21c8      	movs	r1, #200	; 0xc8
 8003352:	4618      	mov	r0, r3
 8003354:	f007 fbc2 	bl	800aadc <osSemaphoreAcquire>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d15f      	bne.n	800341e <StartOtherTask+0x10e>
	  {
		  float tmp;
		  batteryVoltageMean = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
		  for(uint8_t i=0; i<OTH_BAT_NUM_OF_READINGS; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003368:	e00f      	b.n	800338a <StartOtherTask+0x7a>
		  {
			  batteryVoltageMean += batteryVoltageReadings[i];
 800336a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	3348      	adds	r3, #72	; 0x48
 8003372:	443b      	add	r3, r7
 8003374:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8003378:	461a      	mov	r2, r3
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	4413      	add	r3, r2
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  for(uint8_t i=0; i<OTH_BAT_NUM_OF_READINGS; i++)
 8003380:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003384:	3301      	adds	r3, #1
 8003386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800338a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800338e:	2b09      	cmp	r3, #9
 8003390:	d9eb      	bls.n	800336a <StartOtherTask+0x5a>
		  }
		  batteryVoltageMean /= OTH_BAT_NUM_OF_READINGS;
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	4a71      	ldr	r2, [pc, #452]	; (800355c <StartOtherTask+0x24c>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	08db      	lsrs	r3, r3, #3
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c

		  tmp = map(batteryVoltageMean, 0, OTH_ADC_MAX_VALUE, 0, OTH_ADC_VDDA_VALUE);
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a8:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8003560 <StartOtherTask+0x250>
 80033ac:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8003564 <StartOtherTask+0x254>
 80033b0:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8003568 <StartOtherTask+0x258>
 80033b4:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8003564 <StartOtherTask+0x254>
 80033b8:	eeb0 0a67 	vmov.f32	s0, s15
 80033bc:	f000 fa56 	bl	800386c <map>
 80033c0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		  if(tmp < batteryVoltageMin)
 80033c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80033c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80033cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	d501      	bpl.n	80033da <StartOtherTask+0xca>
			  tmp = batteryVoltageMin;
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34

		  batteryLevel = (uint8_t) map(tmp, batteryVoltageMin, batteryVoltageMax, 0, 100);
 80033da:	ed9f 2a64 	vldr	s4, [pc, #400]	; 800356c <StartOtherTask+0x25c>
 80033de:	eddf 1a61 	vldr	s3, [pc, #388]	; 8003564 <StartOtherTask+0x254>
 80033e2:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 80033e6:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 80033ea:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80033ee:	f000 fa3d 	bl	800386c <map>
 80033f2:	eef0 7a40 	vmov.f32	s15, s0
 80033f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033fa:	edc7 7a00 	vstr	s15, [r7]
 80033fe:	783b      	ldrb	r3, [r7, #0]
 8003400:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		  sprintf(cmd, "BL=%d\r\n", (int) batteryLevel);
 8003404:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	4958      	ldr	r1, [pc, #352]	; (8003570 <StartOtherTask+0x260>)
 800340e:	4618      	mov	r0, r3
 8003410:	f00b ff4e 	bl	800f2b0 <siprintf>
		  sendMessageToUART(cmd);
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fb3f 	bl	8003a9c <sendMessageToUART>

	  }

	  if(osThreadFlagsWait(PID_FLAGS, osFlagsWaitAny | osFlagsNoClear, 0) < PID_FLAGS)
 800341e:	2200      	movs	r2, #0
 8003420:	2102      	movs	r1, #2
 8003422:	20ff      	movs	r0, #255	; 0xff
 8003424:	f007 f927 	bl	800a676 <osThreadFlagsWait>
 8003428:	4603      	mov	r3, r0
 800342a:	2bfe      	cmp	r3, #254	; 0xfe
 800342c:	d88e      	bhi.n	800334c <StartOtherTask+0x3c>
	  {
		float tmp;
		uint8_t isSetFlag;

		flags = osThreadFlagsGet();
 800342e:	f007 f901 	bl	800a634 <osThreadFlagsGet>
 8003432:	4603      	mov	r3, r0
 8003434:	873b      	strh	r3, [r7, #56]	; 0x38

		if((isSetFlag = CHECK_BIT(flags, PARSER_OTH_SET_FLAG)))
 8003436:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800344a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00e      	beq.n	8003470 <StartOtherTask+0x160>
		{
			osMessageQueueGet(QueueUartOTHHandle, &tmp, 0, 0);
 8003452:	4b48      	ldr	r3, [pc, #288]	; (8003574 <StartOtherTask+0x264>)
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	f107 0108 	add.w	r1, r7, #8
 800345a:	2300      	movs	r3, #0
 800345c:	2200      	movs	r2, #0
 800345e:	f007 fca7 	bl	800adb0 <osMessageQueueGet>
			osThreadFlagsClear(PARSER_OTH_SET_FLAG);
 8003462:	2080      	movs	r0, #128	; 0x80
 8003464:	f007 f8a8 	bl	800a5b8 <osThreadFlagsClear>
			CLEAR_BIT(flags, PARSER_OTH_SET_FLAG);
 8003468:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800346a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346e:	873b      	strh	r3, [r7, #56]	; 0x38
		}
		switch(flags)
 8003470:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003472:	2b04      	cmp	r3, #4
 8003474:	d02f      	beq.n	80034d6 <StartOtherTask+0x1c6>
 8003476:	2b04      	cmp	r3, #4
 8003478:	dc53      	bgt.n	8003522 <StartOtherTask+0x212>
 800347a:	2b01      	cmp	r3, #1
 800347c:	d002      	beq.n	8003484 <StartOtherTask+0x174>
 800347e:	2b02      	cmp	r3, #2
 8003480:	d012      	beq.n	80034a8 <StartOtherTask+0x198>
			if (isSetFlag) batteryVoltageMax = tmp;
			else {
				sprintf(cmd, "BMX=%.2f\r\n", ((batteryVoltageMax > OTH_ADC_VDDA_VALUE) ? OTH_ADC_VDDA_VALUE : batteryVoltageMax));
				sendMessageToUART(cmd); }
			break;
		default: break;
 8003482:	e04e      	b.n	8003522 <StartOtherTask+0x212>
			if (!isSetFlag) { sprintf(cmd, "BL=%d\r\n", (int) batteryLevel); sendMessageToUART(cmd); }
 8003484:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d14c      	bne.n	8003526 <StartOtherTask+0x216>
 800348c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4936      	ldr	r1, [pc, #216]	; (8003570 <StartOtherTask+0x260>)
 8003496:	4618      	mov	r0, r3
 8003498:	f00b ff0a 	bl	800f2b0 <siprintf>
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fafb 	bl	8003a9c <sendMessageToUART>
			break;
 80034a6:	e03e      	b.n	8003526 <StartOtherTask+0x216>
			if (isSetFlag) batteryVoltageMin = tmp;
 80034a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <StartOtherTask+0x1a6>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80034b4:	e038      	b.n	8003528 <StartOtherTask+0x218>
			else { sprintf(cmd, "BMN=%.2f\r\n", batteryVoltageMin); sendMessageToUART(cmd); }
 80034b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80034b8:	f7fd f85e 	bl	8000578 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	f107 000c 	add.w	r0, r7, #12
 80034c4:	492c      	ldr	r1, [pc, #176]	; (8003578 <StartOtherTask+0x268>)
 80034c6:	f00b fef3 	bl	800f2b0 <siprintf>
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fae4 	bl	8003a9c <sendMessageToUART>
			break;
 80034d4:	e028      	b.n	8003528 <StartOtherTask+0x218>
			if (isSetFlag) batteryVoltageMax = tmp;
 80034d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <StartOtherTask+0x1d4>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 80034e2:	e021      	b.n	8003528 <StartOtherTask+0x218>
				sprintf(cmd, "BMX=%.2f\r\n", ((batteryVoltageMax > OTH_ADC_VDDA_VALUE) ? OTH_ADC_VDDA_VALUE : batteryVoltageMax));
 80034e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034e6:	f7fd f847 	bl	8000578 <__aeabi_f2d>
 80034ea:	a315      	add	r3, pc, #84	; (adr r3, 8003540 <StartOtherTask+0x230>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f7fd fb2a 	bl	8000b48 <__aeabi_dcmpgt>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <StartOtherTask+0x1f2>
 80034fa:	a311      	add	r3, pc, #68	; (adr r3, 8003540 <StartOtherTask+0x230>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	e004      	b.n	800350c <StartOtherTask+0x1fc>
 8003502:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003504:	f7fd f838 	bl	8000578 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	f107 000c 	add.w	r0, r7, #12
 8003510:	491a      	ldr	r1, [pc, #104]	; (800357c <StartOtherTask+0x26c>)
 8003512:	f00b fecd 	bl	800f2b0 <siprintf>
				sendMessageToUART(cmd); }
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fabe 	bl	8003a9c <sendMessageToUART>
			break;
 8003520:	e002      	b.n	8003528 <StartOtherTask+0x218>
		default: break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <StartOtherTask+0x218>
			break;
 8003526:	bf00      	nop
		}
		osThreadFlagsClear(flags);
 8003528:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800352a:	4618      	mov	r0, r3
 800352c:	f007 f844 	bl	800a5b8 <osThreadFlagsClear>
		osSemaphoreRelease(SemaphoreFlagsOTHHandle);
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <StartOtherTask+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f007 fb23 	bl	800ab80 <osSemaphoreRelease>
	  if(osSemaphoreAcquire(SemaphoreADC_DataReadyHandle, 200*KERNEL_TICKS_FOR_MS) == osOK)
 800353a:	e707      	b.n	800334c <StartOtherTask+0x3c>
 800353c:	f3af 8000 	nop.w
 8003540:	66666666 	.word	0x66666666
 8003544:	400a6666 	.word	0x400a6666
 8003548:	4019999a 	.word	0x4019999a
 800354c:	40533333 	.word	0x40533333
 8003550:	20000518 	.word	0x20000518
 8003554:	2000064c 	.word	0x2000064c
 8003558:	20000208 	.word	0x20000208
 800355c:	cccccccd 	.word	0xcccccccd
 8003560:	40533333 	.word	0x40533333
 8003564:	00000000 	.word	0x00000000
 8003568:	45800000 	.word	0x45800000
 800356c:	42c80000 	.word	0x42c80000
 8003570:	080133b4 	.word	0x080133b4
 8003574:	20000504 	.word	0x20000504
 8003578:	080133bc 	.word	0x080133bc
 800357c:	080133c8 	.word	0x080133c8
 8003580:	2000052c 	.word	0x2000052c

08003584 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN Application */

// ********************* GLOBAL INTERRUPT SECTION ********************* //

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LSM6_Interrupt_Pin)
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d104      	bne.n	80035a0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(SemaphoreLSM6_DataReadyHandle);
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f007 faf0 	bl	800ab80 <osSemaphoreRelease>

	if(GPIO_Pin == LSM6_Interrupt2_Pin)
	{
		;
	}
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000514 	.word	0x20000514

080035ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_ADC_ConvCpltCallback+0x24>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d104      	bne.n	80035c8 <HAL_ADC_ConvCpltCallback+0x1c>
	{
		osSemaphoreRelease(SemaphoreADC_DataReadyHandle);
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_ADC_ConvCpltCallback+0x28>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f007 fadc 	bl	800ab80 <osSemaphoreRelease>
	}
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012000 	.word	0x40012000
 80035d4:	20000518 	.word	0x20000518

080035d8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_UARTEx_RxEventCallback+0x84>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d131      	bne.n	8003652 <HAL_UARTEx_RxEventCallback+0x7a>
	{
		osMutexAcquire(MutexRingBufferRxHandle, osWaitForever);
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_UARTEx_RxEventCallback+0x88>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f04f 31ff 	mov.w	r1, #4294967295
 80035f6:	4618      	mov	r0, r3
 80035f8:	f007 f95f 	bl	800a8ba <osMutexAcquire>
		for(uint16_t i=0; i<Size; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	81fb      	strh	r3, [r7, #14]
 8003600:	e019      	b.n	8003636 <HAL_UARTEx_RxEventCallback+0x5e>
		{
			RB_Write(&Rx_RingBuffer, Tmp_Rx_Buffer[i]);
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_UARTEx_RxEventCallback+0x8c>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	4619      	mov	r1, r3
 800360a:	4817      	ldr	r0, [pc, #92]	; (8003668 <HAL_UARTEx_RxEventCallback+0x90>)
 800360c:	f000 ffa8 	bl	8004560 <RB_Write>

			if(Tmp_Rx_Buffer[i] == '\n')
 8003610:	89fb      	ldrh	r3, [r7, #14]
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_UARTEx_RxEventCallback+0x8c>)
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	2b0a      	cmp	r3, #10
 8003618:	d10a      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x58>
			{
				RxLines++;
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_UARTEx_RxEventCallback+0x94>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_UARTEx_RxEventCallback+0x94>)
 8003624:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(SemRxLineAvailableHandle);
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_UARTEx_RxEventCallback+0x98>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f007 faa8 	bl	800ab80 <osSemaphoreRelease>
		for(uint16_t i=0; i<Size; i++)
 8003630:	89fb      	ldrh	r3, [r7, #14]
 8003632:	3301      	adds	r3, #1
 8003634:	81fb      	strh	r3, [r7, #14]
 8003636:	89fa      	ldrh	r2, [r7, #14]
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e1      	bcc.n	8003602 <HAL_UARTEx_RxEventCallback+0x2a>
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Tmp_Rx_Buffer, TMP_DMAUART_BUFFER_SIZE);
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	4908      	ldr	r1, [pc, #32]	; (8003664 <HAL_UARTEx_RxEventCallback+0x8c>)
 8003642:	480c      	ldr	r0, [pc, #48]	; (8003674 <HAL_UARTEx_RxEventCallback+0x9c>)
 8003644:	f005 fd06 	bl	8009054 <HAL_UARTEx_ReceiveToIdle_DMA>
		osMutexRelease(MutexRingBufferRxHandle);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_UARTEx_RxEventCallback+0x88>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f007 f97f 	bl	800a950 <osMutexRelease>
	}
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40004400 	.word	0x40004400
 8003660:	2000050c 	.word	0x2000050c
 8003664:	200002c0 	.word	0x200002c0
 8003668:	20000340 	.word	0x20000340
 800366c:	200002b0 	.word	0x200002b0
 8003670:	200004d8 	.word	0x200004d8
 8003674:	200006dc 	.word	0x200006dc

08003678 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a05      	ldr	r2, [pc, #20]	; (800369c <HAL_UART_TxCpltCallback+0x24>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d104      	bne.n	8003694 <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(SemaphoreUART_TxCompleteHandle);
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_UART_TxCpltCallback+0x28>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f007 fa76 	bl	800ab80 <osSemaphoreRelease>
	}
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40004400 	.word	0x40004400
 80036a0:	2000051c 	.word	0x2000051c

080036a4 <Parser_ReceiveLineCallback>:
// ******************* GLOBAL INTERRUPT SECTION END ******************* //

// ********************* LIBRARIES CALLBACK SECTION ********************* //

Parser_StatusTypeDef Parser_ReceiveLineCallback(char* message)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	  uint8_t i = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
	  uint8_t character;

	  while(RB_Read(&Rx_RingBuffer, &character) == RB_OK)
 80036b0:	e017      	b.n	80036e2 <Parser_ReceiveLineCallback+0x3e>
	  {
		  if(character == '\n')
 80036b2:	7bbb      	ldrb	r3, [r7, #14]
 80036b4:	2b0a      	cmp	r3, #10
 80036b6:	d10c      	bne.n	80036d2 <Parser_ReceiveLineCallback+0x2e>
		  {
			  *(message + i) = 0;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
			  RxLines--;
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <Parser_ReceiveLineCallback+0x5c>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <Parser_ReceiveLineCallback+0x5c>)
 80036cc:	701a      	strb	r2, [r3, #0]
			  return PARSER_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e011      	b.n	80036f6 <Parser_ReceiveLineCallback+0x52>
		  }
		  *(message + i) = character;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	7bba      	ldrb	r2, [r7, #14]
 80036da:	701a      	strb	r2, [r3, #0]
		  i++;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	3301      	adds	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
	  while(RB_Read(&Rx_RingBuffer, &character) == RB_OK)
 80036e2:	f107 030e 	add.w	r3, r7, #14
 80036e6:	4619      	mov	r1, r3
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <Parser_ReceiveLineCallback+0x60>)
 80036ea:	f000 ff0b 	bl	8004504 <RB_Read>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0de      	beq.n	80036b2 <Parser_ReceiveLineCallback+0xe>
	  }
	  return PARSER_ERROR;
 80036f4:	2303      	movs	r3, #3
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200002b0 	.word	0x200002b0
 8003704:	20000340 	.word	0x20000340

08003708 <Parser_PID_PrintCallback>:

void Parser_PID_PrintCallback(uint8_t flag, float value)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	ed87 0a00 	vstr	s0, [r7]
 8003714:	71fb      	strb	r3, [r7, #7]
	if(CHECK_BIT(flag, PARSER_PID_SET_FLAG))
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	da07      	bge.n	800372e <Parser_PID_PrintCallback+0x26>
		osMessageQueuePut(QueueUartPIDHandle, &value, 0, osWaitForever);
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <Parser_PID_PrintCallback+0x4c>)
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	4639      	mov	r1, r7
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	2200      	movs	r2, #0
 800372a:	f007 fae1 	bl	800acf0 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsPIDHandle, osWaitForever);
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <Parser_PID_PrintCallback+0x50>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f04f 31ff 	mov.w	r1, #4294967295
 8003736:	4618      	mov	r0, r3
 8003738:	f007 f9d0 	bl	800aadc <osSemaphoreAcquire>
	osThreadFlagsSet(PIDTaskHandle, flag);
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <Parser_PID_PrintCallback+0x54>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f006 fee9 	bl	800a51c <osThreadFlagsSet>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200004f8 	.word	0x200004f8
 8003758:	20000520 	.word	0x20000520
 800375c:	200004e4 	.word	0x200004e4

08003760 <Parser_IMU_PrintCallback>:

void Parser_IMU_PrintCallback(uint8_t flag, float value)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	ed87 0a00 	vstr	s0, [r7]
 800376c:	71fb      	strb	r3, [r7, #7]
	if(CHECK_BIT(flag, PARSER_IMU_SET_FLAG))
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	da07      	bge.n	8003786 <Parser_IMU_PrintCallback+0x26>
		osMessageQueuePut(QueueUartIMUHandle, &value, 0, osWaitForever);
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <Parser_IMU_PrintCallback+0x4c>)
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	4639      	mov	r1, r7
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	2200      	movs	r2, #0
 8003782:	f007 fab5 	bl	800acf0 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsIMUHandle, osWaitForever);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <Parser_IMU_PrintCallback+0x50>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f04f 31ff 	mov.w	r1, #4294967295
 800378e:	4618      	mov	r0, r3
 8003790:	f007 f9a4 	bl	800aadc <osSemaphoreAcquire>
	osThreadFlagsSet(IMU_TaskHandle, flag);
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <Parser_IMU_PrintCallback+0x54>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	79fa      	ldrb	r2, [r7, #7]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f006 febd 	bl	800a51c <osThreadFlagsSet>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200004fc 	.word	0x200004fc
 80037b0:	20000524 	.word	0x20000524
 80037b4:	200004e0 	.word	0x200004e0

080037b8 <Parser_MOT_PrintCallback>:

void Parser_MOT_PrintCallback(uint16_t flag, uint16_t value)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	460a      	mov	r2, r1
 80037c2:	80fb      	strh	r3, [r7, #6]
 80037c4:	4613      	mov	r3, r2
 80037c6:	80bb      	strh	r3, [r7, #4]
	if(CHECK_BIT(flag, PARSER_MOT_SET_FLAG))
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <Parser_MOT_PrintCallback+0x2a>
		osMessageQueuePut(QueueUartMOTHandle, &value, 0, osWaitForever);
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <Parser_MOT_PrintCallback+0x50>)
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	1d39      	adds	r1, r7, #4
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	2200      	movs	r2, #0
 80037de:	f007 fa87 	bl	800acf0 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsMOTHandle, osWaitForever);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <Parser_MOT_PrintCallback+0x54>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f04f 31ff 	mov.w	r1, #4294967295
 80037ea:	4618      	mov	r0, r3
 80037ec:	f007 f976 	bl	800aadc <osSemaphoreAcquire>
	osThreadFlagsSet(StepperMotorsTaHandle, flag);
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <Parser_MOT_PrintCallback+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f006 fe8f 	bl	800a51c <osThreadFlagsSet>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000500 	.word	0x20000500
 800380c:	20000528 	.word	0x20000528
 8003810:	200004e8 	.word	0x200004e8

08003814 <Parser_OTH_PrintCallback>:

void Parser_OTH_PrintCallback(uint8_t flag, float value)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	ed87 0a00 	vstr	s0, [r7]
 8003820:	71fb      	strb	r3, [r7, #7]
	if(CHECK_BIT(flag, PARSER_OTH_SET_FLAG))
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da07      	bge.n	800383a <Parser_OTH_PrintCallback+0x26>
		osMessageQueuePut(QueueUartOTHHandle, &value, 0, osWaitForever);
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <Parser_OTH_PrintCallback+0x4c>)
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	4639      	mov	r1, r7
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	2200      	movs	r2, #0
 8003836:	f007 fa5b 	bl	800acf0 <osMessageQueuePut>

	osSemaphoreAcquire(SemaphoreFlagsOTHHandle, osWaitForever);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <Parser_OTH_PrintCallback+0x50>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f04f 31ff 	mov.w	r1, #4294967295
 8003842:	4618      	mov	r0, r3
 8003844:	f007 f94a 	bl	800aadc <osSemaphoreAcquire>
	osThreadFlagsSet(OtherTaskHandle, flag);
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <Parser_OTH_PrintCallback+0x54>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	79fa      	ldrb	r2, [r7, #7]
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f006 fe63 	bl	800a51c <osThreadFlagsSet>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000504 	.word	0x20000504
 8003864:	2000052c 	.word	0x2000052c
 8003868:	200004ec 	.word	0x200004ec

0800386c <map>:
// ******************* LIBRARIES CALLBACK SECTION END ******************* //

// ********************* OTHER FUNCTIONS SECTION ********************* //

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	ed87 0a05 	vstr	s0, [r7, #20]
 8003876:	edc7 0a04 	vstr	s1, [r7, #16]
 800387a:	ed87 1a03 	vstr	s2, [r7, #12]
 800387e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003882:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003886:	ed97 7a05 	vldr	s14, [r7, #20]
 800388a:	edd7 7a04 	vldr	s15, [r7, #16]
 800388e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003892:	edd7 6a01 	vldr	s13, [r7, #4]
 8003896:	edd7 7a02 	vldr	s15, [r7, #8]
 800389a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800389e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80038a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80038a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80038ba:	eeb0 0a67 	vmov.f32	s0, s15
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <complementaryFilter>:

float complementaryFilter(float gyroX, float accAngle, float prevAngle, float gx_off)
{
 80038c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	ed87 0a03 	vstr	s0, [r7, #12]
 80038d4:	edc7 0a02 	vstr	s1, [r7, #8]
 80038d8:	ed87 1a01 	vstr	s2, [r7, #4]
 80038dc:	edc7 1a00 	vstr	s3, [r7]
	return (COMP_FILTER_GAIN * (prevAngle + ((gyroX*IMU_GYRO_SENSITIVITY + gx_off)/IMU_SAMPLE_TIME)))
 80038e0:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <complementaryFilter+0xd8>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe48 	bl	8000578 <__aeabi_f2d>
 80038e8:	4604      	mov	r4, r0
 80038ea:	460d      	mov	r5, r1
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fc fe43 	bl	8000578 <__aeabi_f2d>
 80038f2:	4680      	mov	r8, r0
 80038f4:	4689      	mov	r9, r1
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7fc fe3e 	bl	8000578 <__aeabi_f2d>
 80038fc:	a326      	add	r3, pc, #152	; (adr r3, 8003998 <complementaryFilter+0xd0>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc fe91 	bl	8000628 <__aeabi_dmul>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4692      	mov	sl, r2
 800390c:	469b      	mov	fp, r3
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f7fc fe32 	bl	8000578 <__aeabi_f2d>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4650      	mov	r0, sl
 800391a:	4659      	mov	r1, fp
 800391c:	f7fc fcce 	bl	80002bc <__adddf3>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <complementaryFilter+0xdc>)
 800392e:	f7fc ffa5 	bl	800087c <__aeabi_ddiv>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4640      	mov	r0, r8
 8003938:	4649      	mov	r1, r9
 800393a:	f7fc fcbf 	bl	80002bc <__adddf3>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f7fc fe6f 	bl	8000628 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4614      	mov	r4, r2
 8003950:	461d      	mov	r5, r3
			+ ((1 - COMP_FILTER_GAIN) * accAngle);
 8003952:	eddf 7a15 	vldr	s15, [pc, #84]	; 80039a8 <complementaryFilter+0xe0>
 8003956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800395e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	ee17 0a90 	vmov	r0, s15
 800396a:	f7fc fe05 	bl	8000578 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fca1 	bl	80002bc <__adddf3>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f7fd f949 	bl	8000c18 <__aeabi_d2f>
 8003986:	4603      	mov	r3, r0
 8003988:	ee07 3a90 	vmov	s15, r3
}
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003998:	1eb851ec 	.word	0x1eb851ec
 800399c:	3f81eb85 	.word	0x3f81eb85
 80039a0:	3f75c28f 	.word	0x3f75c28f
 80039a4:	404a0000 	.word	0x404a0000
 80039a8:	3f75c28f 	.word	0x3f75c28f
 80039ac:	00000000 	.word	0x00000000

080039b0 <calculateAccAngle>:

float calculateAccAngle(float accY, float accZ, float ay_off, float az_off)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	ed2d 8b02 	vpush	{d8}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80039be:	edc7 0a02 	vstr	s1, [r7, #8]
 80039c2:	ed87 1a01 	vstr	s2, [r7, #4]
 80039c6:	edc7 1a00 	vstr	s3, [r7]
	return (atan2((accY*IMU_ACC_SENSITIVITY + ay_off), (accZ*IMU_ACC_SENSITIVITY + az_off)) * 180.0/M_PI);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7fc fdd4 	bl	8000578 <__aeabi_f2d>
 80039d0:	a330      	add	r3, pc, #192	; (adr r3, 8003a94 <calculateAccAngle+0xe4>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fe27 	bl	8000628 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4614      	mov	r4, r2
 80039e0:	461d      	mov	r5, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fc fdc8 	bl	8000578 <__aeabi_f2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fc64 	bl	80002bc <__adddf3>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	ec43 2b18 	vmov	d8, r2, r3
 80039fc:	68b8      	ldr	r0, [r7, #8]
 80039fe:	f7fc fdbb 	bl	8000578 <__aeabi_f2d>
 8003a02:	a324      	add	r3, pc, #144	; (adr r3, 8003a94 <calculateAccAngle+0xe4>)
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc fe0e 	bl	8000628 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	6838      	ldr	r0, [r7, #0]
 8003a16:	f7fc fdaf 	bl	8000578 <__aeabi_f2d>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7fc fc4b 	bl	80002bc <__adddf3>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	ec43 2b17 	vmov	d7, r2, r3
 8003a2e:	eeb0 1a47 	vmov.f32	s2, s14
 8003a32:	eef0 1a67 	vmov.f32	s3, s15
 8003a36:	eeb0 0a48 	vmov.f32	s0, s16
 8003a3a:	eef0 0a68 	vmov.f32	s1, s17
 8003a3e:	f00f f8e9 	bl	8012c14 <atan2>
 8003a42:	ec51 0b10 	vmov	r0, r1, d0
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <calculateAccAngle+0xe0>)
 8003a4c:	f7fc fdec 	bl	8000628 <__aeabi_dmul>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	a30b      	add	r3, pc, #44	; (adr r3, 8003a88 <calculateAccAngle+0xd8>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc ff0d 	bl	800087c <__aeabi_ddiv>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fd f8d5 	bl	8000c18 <__aeabi_d2f>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	ee07 3a90 	vmov	s15, r3
}
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	ecbd 8b02 	vpop	{d8}
 8003a80:	bdb0      	pop	{r4, r5, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	f3af 8000 	nop.w
 8003a88:	54442d18 	.word	0x54442d18
 8003a8c:	400921fb 	.word	0x400921fb
 8003a90:	40668000 	.word	0x40668000
 8003a94:	0a5accd5 	.word	0x0a5accd5
 8003a98:	3f0ffb48 	.word	0x3f0ffb48

08003a9c <sendMessageToUART>:

void sendMessageToUART(char* msg)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	osMutexAcquire(MutexRingBufferTxHandle, osWaitForever);
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <sendMessageToUART+0x58>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	4618      	mov	r0, r3
 8003aae:	f006 ff04 	bl	800a8ba <osMutexAcquire>
	uint8_t length = strlen(msg);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fc fb9e 	bl	80001f4 <strlen>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < length; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e00a      	b.n	8003ad8 <sendMessageToUART+0x3c>
		RB_Write(&Tx_RingBuffer, (uint8_t) *(msg+i));
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	480a      	ldr	r0, [pc, #40]	; (8003af8 <sendMessageToUART+0x5c>)
 8003ace:	f000 fd47 	bl	8004560 <RB_Write>
	for(uint8_t i = 0; i < length; i++)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	7bbb      	ldrb	r3, [r7, #14]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3f0      	bcc.n	8003ac2 <sendMessageToUART+0x26>
	osMutexRelease(MutexRingBufferTxHandle);
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <sendMessageToUART+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f006 ff33 	bl	800a950 <osMutexRelease>
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000510 	.word	0x20000510
 8003af8:	2000040c 	.word	0x2000040c

08003afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a44      	ldr	r2, [pc, #272]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a36      	ldr	r2, [pc, #216]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a2f      	ldr	r2, [pc, #188]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <MX_GPIO_Init+0x130>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin, GPIO_PIN_RESET);
 8003b82:	2200      	movs	r2, #0
 8003b84:	f44f 7158 	mov.w	r1, #864	; 0x360
 8003b88:	4829      	ldr	r0, [pc, #164]	; (8003c30 <MX_GPIO_Init+0x134>)
 8003b8a:	f002 fc59 	bl	8006440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, rightMotor_M0_Pin|rightMotor_M1_Pin, GPIO_PIN_RESET);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2130      	movs	r1, #48	; 0x30
 8003b92:	4828      	ldr	r0, [pc, #160]	; (8003c34 <MX_GPIO_Init+0x138>)
 8003b94:	f002 fc54 	bl	8006440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4619      	mov	r1, r3
 8003bae:	4822      	ldr	r0, [pc, #136]	; (8003c38 <MX_GPIO_Init+0x13c>)
 8003bb0:	f002 fac2 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin;
 8003bb4:	f44f 7358 	mov.w	r3, #864	; 0x360
 8003bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc6:	f107 0314 	add.w	r3, r7, #20
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4818      	ldr	r0, [pc, #96]	; (8003c30 <MX_GPIO_Init+0x134>)
 8003bce:	f002 fab3 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt_Pin;
 8003bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	4619      	mov	r1, r3
 8003be8:	4811      	ldr	r0, [pc, #68]	; (8003c30 <MX_GPIO_Init+0x134>)
 8003bea:	f002 faa5 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt2_Pin;
 8003bee:	2308      	movs	r3, #8
 8003bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt2_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4619      	mov	r1, r3
 8003c02:	480c      	ldr	r0, [pc, #48]	; (8003c34 <MX_GPIO_Init+0x138>)
 8003c04:	f002 fa98 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = rightMotor_M0_Pin|rightMotor_M1_Pin;
 8003c08:	2330      	movs	r3, #48	; 0x30
 8003c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4805      	ldr	r0, [pc, #20]	; (8003c34 <MX_GPIO_Init+0x138>)
 8003c20:	f002 fa8a 	bl	8006138 <HAL_GPIO_Init>

}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40020000 	.word	0x40020000
 8003c34:	40020400 	.word	0x40020400
 8003c38:	40020800 	.word	0x40020800

08003c3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c42:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <MX_I2C1_Init+0x54>)
 8003c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c48:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <MX_I2C1_Init+0x58>)
 8003c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c78:	4804      	ldr	r0, [pc, #16]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c7a:	f002 fc13 	bl	80064a4 <HAL_I2C_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c84:	f000 f91e 	bl	8003ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000530 	.word	0x20000530
 8003c90:	40005400 	.word	0x40005400
 8003c94:	00061a80 	.word	0x00061a80

08003c98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_I2C_MspInit+0x84>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12c      	bne.n	8003d14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_I2C_MspInit+0x88>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_I2C_MspInit+0x88>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_I2C_MspInit+0x88>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cdc:	2312      	movs	r3, #18
 8003cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	480c      	ldr	r0, [pc, #48]	; (8003d24 <HAL_I2C_MspInit+0x8c>)
 8003cf4:	f002 fa20 	bl	8006138 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_I2C_MspInit+0x88>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <HAL_I2C_MspInit+0x88>)
 8003d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d06:	6413      	str	r3, [r2, #64]	; 0x40
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_I2C_MspInit+0x88>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d14:	bf00      	nop
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40005400 	.word	0x40005400
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40020400 	.word	0x40020400

08003d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d2c:	f001 f8e6 	bl	8004efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d30:	f000 f81a 	bl	8003d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d34:	f7ff fee2 	bl	8003afc <MX_GPIO_Init>
  MX_DMA_Init();
 8003d38:	f7fe f97a 	bl	8002030 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003d3c:	f000 ffde 	bl	8004cfc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003d40:	f7ff ff7c 	bl	8003c3c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003d44:	f000 fdf4 	bl	8004930 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003d48:	f000 feb6 	bl	8004ab8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003d4c:	f7fe f8a6 	bl	8001e9c <MX_ADC1_Init>
  MX_TIM3_Init();
 8003d50:	f000 fe64 	bl	8004a1c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003d54:	f000 f870 	bl	8003e38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003d58:	f006 fb04 	bl	800a364 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003d5c:	f7fe f990 	bl	8002080 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003d60:	f006 fb24 	bl	800a3ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d64:	e7fe      	b.n	8003d64 <main+0x3c>
	...

08003d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b094      	sub	sp, #80	; 0x50
 8003d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d6e:	f107 0320 	add.w	r3, r7, #32
 8003d72:	2230      	movs	r2, #48	; 0x30
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f00a fd19 	bl	800e7ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <SystemClock_Config+0xc8>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <SystemClock_Config+0xc8>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <SystemClock_Config+0xc8>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da8:	2300      	movs	r3, #0
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <SystemClock_Config+0xcc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <SystemClock_Config+0xcc>)
 8003db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <SystemClock_Config+0xcc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003dc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003dd8:	2304      	movs	r3, #4
 8003dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003ddc:	2354      	movs	r3, #84	; 0x54
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003de0:	2302      	movs	r3, #2
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003de4:	2304      	movs	r3, #4
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003de8:	f107 0320 	add.w	r3, r7, #32
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 fb19 	bl	8007424 <HAL_RCC_OscConfig>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003df8:	f000 f864 	bl	8003ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e00:	2302      	movs	r3, #2
 8003e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	2102      	movs	r1, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 fd7b 	bl	8007914 <HAL_RCC_ClockConfig>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003e24:	f000 f84e 	bl	8003ec4 <Error_Handler>
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3750      	adds	r7, #80	; 0x50
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40007000 	.word	0x40007000

08003e38 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2105      	movs	r1, #5
 8003e40:	2026      	movs	r0, #38	; 0x26
 8003e42:	f001 fd4d 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e46:	2026      	movs	r0, #38	; 0x26
 8003e48:	f001 fd66 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2105      	movs	r1, #5
 8003e50:	2028      	movs	r0, #40	; 0x28
 8003e52:	f001 fd45 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e56:	2028      	movs	r0, #40	; 0x28
 8003e58:	f001 fd5e 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2105      	movs	r1, #5
 8003e60:	2038      	movs	r0, #56	; 0x38
 8003e62:	f001 fd3d 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e66:	2038      	movs	r0, #56	; 0x38
 8003e68:	f001 fd56 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2105      	movs	r1, #5
 8003e70:	2011      	movs	r0, #17
 8003e72:	f001 fd35 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003e76:	2011      	movs	r0, #17
 8003e78:	f001 fd4e 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2105      	movs	r1, #5
 8003e80:	2010      	movs	r0, #16
 8003e82:	f001 fd2d 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003e86:	2010      	movs	r0, #16
 8003e88:	f001 fd46 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2105      	movs	r1, #5
 8003e90:	2009      	movs	r0, #9
 8003e92:	f001 fd25 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003e96:	2009      	movs	r0, #9
 8003e98:	f001 fd3e 	bl	8005918 <HAL_NVIC_EnableIRQ>
}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003eb2:	f001 f845 	bl	8004f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40014400 	.word	0x40014400

08003ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec8:	b672      	cpsid	i
}
 8003eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <Error_Handler+0x8>
	...

08003ed0 <Parser_Register_PIDPrintCallback>:
static Parser_StatusTypeDef (*Parser_ReceiveLine)(char* message);

static char BufferReceive[BUFFER_SIZE];

void Parser_Register_PIDPrintCallback(void *callback)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	Parser_PID_Print = callback;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a04      	ldr	r2, [pc, #16]	; (8003eec <Parser_Register_PIDPrintCallback+0x1c>)
 8003edc:	6013      	str	r3, [r2, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000584 	.word	0x20000584

08003ef0 <Parser_Register_IMUPrintCallback>:

void Parser_Register_IMUPrintCallback(void *callback)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	Parser_IMU_Print = callback;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <Parser_Register_IMUPrintCallback+0x1c>)
 8003efc:	6013      	str	r3, [r2, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000588 	.word	0x20000588

08003f10 <Parser_Register_MotorsPrintCallback>:

void Parser_Register_MotorsPrintCallback(void *callback)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	Parser_Motors_Print = callback;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <Parser_Register_MotorsPrintCallback+0x1c>)
 8003f1c:	6013      	str	r3, [r2, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000058c 	.word	0x2000058c

08003f30 <Parser_Register_OtherPrintCallback>:

void Parser_Register_OtherPrintCallback(void *callback)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	Parser_Other_Print = callback;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <Parser_Register_OtherPrintCallback+0x1c>)
 8003f3c:	6013      	str	r3, [r2, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000590 	.word	0x20000590

08003f50 <Parser_Register_ReceiveLineCallback>:

void Parser_Register_ReceiveLineCallback(void *callback)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	Parser_ReceiveLine = callback;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <Parser_Register_ReceiveLineCallback+0x1c>)
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000594 	.word	0x20000594

08003f70 <Parser_GetFloatValue>:

static Parser_StatusTypeDef Parser_GetFloatValue(float *value)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, "\0");
 8003f78:	4921      	ldr	r1, [pc, #132]	; (8004000 <Parser_GetFloatValue+0x90>)
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f00c f82a 	bl	800ffd4 <strtok>
 8003f80:	60b8      	str	r0, [r7, #8]
	uint8_t i = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]

	if(strlen(ParsePointer) == 0) return PARSER_READ;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <Parser_GetFloatValue+0x22>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e031      	b.n	8003ff6 <Parser_GetFloatValue+0x86>
	if(ParsePointer[0] == '-') i++;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b2d      	cmp	r3, #45	; 0x2d
 8003f98:	d11a      	bne.n	8003fd0 <Parser_GetFloatValue+0x60>
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]

	for( ; ParsePointer[i] != 0; i++)
 8003fa0:	e016      	b.n	8003fd0 <Parser_GetFloatValue+0x60>
	{
		if((ParsePointer[i] < '0' || ParsePointer[i] > '9') && (ParsePointer[i] != '.'))
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b2f      	cmp	r3, #47	; 0x2f
 8003fac:	d905      	bls.n	8003fba <Parser_GetFloatValue+0x4a>
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b39      	cmp	r3, #57	; 0x39
 8003fb8:	d907      	bls.n	8003fca <Parser_GetFloatValue+0x5a>
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc4:	d001      	beq.n	8003fca <Parser_GetFloatValue+0x5a>
		{
			return PARSER_ERROR;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e015      	b.n	8003ff6 <Parser_GetFloatValue+0x86>
	for( ; ParsePointer[i] != 0; i++)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e2      	bne.n	8003fa2 <Parser_GetFloatValue+0x32>
		}
	}

	*value = atof(ParsePointer);
 8003fdc:	68b8      	ldr	r0, [r7, #8]
 8003fde:	f00a faad 	bl	800e53c <atof>
 8003fe2:	ec53 2b10 	vmov	r2, r3, d0
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fe15 	bl	8000c18 <__aeabi_d2f>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	601a      	str	r2, [r3, #0]

	return PARSER_SET;
 8003ff4:	2302      	movs	r3, #2
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	080133d4 	.word	0x080133d4

08004004 <Parser_GetIntValue>:

static Parser_StatusTypeDef Parser_GetIntValue(uint16_t *value)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, "\0");
 800400c:	4918      	ldr	r1, [pc, #96]	; (8004070 <Parser_GetIntValue+0x6c>)
 800400e:	2000      	movs	r0, #0
 8004010:	f00b ffe0 	bl	800ffd4 <strtok>
 8004014:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) == 0) return PARSER_READ;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <Parser_GetIntValue+0x1e>
 800401e:	2301      	movs	r3, #1
 8004020:	e021      	b.n	8004066 <Parser_GetIntValue+0x62>

	for(uint8_t i = 0; ParsePointer[i] != 0; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e010      	b.n	800404a <Parser_GetIntValue+0x46>
	{
		if((ParsePointer[i] < '0' || ParsePointer[i] > '9'))
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4413      	add	r3, r2
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b2f      	cmp	r3, #47	; 0x2f
 8004032:	d905      	bls.n	8004040 <Parser_GetIntValue+0x3c>
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4413      	add	r3, r2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b39      	cmp	r3, #57	; 0x39
 800403e:	d901      	bls.n	8004044 <Parser_GetIntValue+0x40>
		{
			return PARSER_ERROR;
 8004040:	2303      	movs	r3, #3
 8004042:	e010      	b.n	8004066 <Parser_GetIntValue+0x62>
	for(uint8_t i = 0; ParsePointer[i] != 0; i++)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	3301      	adds	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e8      	bne.n	8004028 <Parser_GetIntValue+0x24>
		}
	}

	*value = atoi(ParsePointer);
 8004056:	68b8      	ldr	r0, [r7, #8]
 8004058:	f00a fa73 	bl	800e542 <atoi>
 800405c:	4603      	mov	r3, r0
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	801a      	strh	r2, [r3, #0]

	return PARSER_SET;
 8004064:	2302      	movs	r3, #2
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	080133d4 	.word	0x080133d4

08004074 <Parser_ParseOther>:


static Parser_StatusTypeDef Parser_ParseOther(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	float value = 0;
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	603b      	str	r3, [r7, #0]
	char *ParsePointer = strtok(NULL, "=?");
 8004080:	4925      	ldr	r1, [pc, #148]	; (8004118 <Parser_ParseOther+0xa4>)
 8004082:	2000      	movs	r0, #0
 8004084:	f00b ffa6 	bl	800ffd4 <strtok>
 8004088:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;	// check if string exists
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <Parser_ParseOther+0x22>
 8004092:	2303      	movs	r3, #3
 8004094:	e03c      	b.n	8004110 <Parser_ParseOther+0x9c>

	if(strcmp(ParsePointer, "BMX") == 0)
 8004096:	4921      	ldr	r1, [pc, #132]	; (800411c <Parser_ParseOther+0xa8>)
 8004098:	68b8      	ldr	r0, [r7, #8]
 800409a:	f7fc f8a1 	bl	80001e0 <strcmp>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <Parser_ParseOther+0x36>
	{
		flag = PARSER_OTH_BAT_MAXV_FLAG;
 80040a4:	2304      	movs	r3, #4
 80040a6:	81fb      	strh	r3, [r7, #14]
 80040a8:	e015      	b.n	80040d6 <Parser_ParseOther+0x62>
	}
	else if(strcmp(ParsePointer, "BMN") == 0)
 80040aa:	491d      	ldr	r1, [pc, #116]	; (8004120 <Parser_ParseOther+0xac>)
 80040ac:	68b8      	ldr	r0, [r7, #8]
 80040ae:	f7fc f897 	bl	80001e0 <strcmp>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <Parser_ParseOther+0x4a>
	{
		flag = PARSER_OTH_BAT_MINV_FLAG;
 80040b8:	2302      	movs	r3, #2
 80040ba:	81fb      	strh	r3, [r7, #14]
 80040bc:	e00b      	b.n	80040d6 <Parser_ParseOther+0x62>
	}
	else if(strcmp(ParsePointer, "BL") == 0)
 80040be:	4919      	ldr	r1, [pc, #100]	; (8004124 <Parser_ParseOther+0xb0>)
 80040c0:	68b8      	ldr	r0, [r7, #8]
 80040c2:	f7fc f88d 	bl	80001e0 <strcmp>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <Parser_ParseOther+0x5e>
	{
		flag = PARSER_OTH_BAT_LEVL_FLAG;
 80040cc:	2301      	movs	r3, #1
 80040ce:	81fb      	strh	r3, [r7, #14]
 80040d0:	e001      	b.n	80040d6 <Parser_ParseOther+0x62>
	}
	else return PARSER_ERROR;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e01c      	b.n	8004110 <Parser_ParseOther+0x9c>

	status = Parser_GetFloatValue(&value);
 80040d6:	463b      	mov	r3, r7
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff49 	bl	8003f70 <Parser_GetFloatValue>
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d101      	bne.n	80040ec <Parser_ParseOther+0x78>
 80040e8:	2303      	movs	r3, #3
 80040ea:	e011      	b.n	8004110 <Parser_ParseOther+0x9c>
	else if(status == PARSER_SET) flag |= PARSER_OTH_SET_FLAG;
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <Parser_ParseOther+0x86>
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f8:	81fb      	strh	r3, [r7, #14]

	Parser_Other_Print(flag, value);
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <Parser_ParseOther+0xb4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	89fa      	ldrh	r2, [r7, #14]
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	edd7 7a00 	vldr	s15, [r7]
 8004106:	eeb0 0a67 	vmov.f32	s0, s15
 800410a:	4610      	mov	r0, r2
 800410c:	4798      	blx	r3
	return PARSER_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	080133d8 	.word	0x080133d8
 800411c:	080133dc 	.word	0x080133dc
 8004120:	080133e0 	.word	0x080133e0
 8004124:	080133e4 	.word	0x080133e4
 8004128:	20000590 	.word	0x20000590

0800412c <Parser_ParseMotors>:


static Parser_StatusTypeDef Parser_ParseMotors(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	uint16_t value = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	80bb      	strh	r3, [r7, #4]
	char *ParsePointer = strtok(NULL, "=?");
 8004136:	4948      	ldr	r1, [pc, #288]	; (8004258 <Parser_ParseMotors+0x12c>)
 8004138:	2000      	movs	r0, #0
 800413a:	f00b ff4b 	bl	800ffd4 <strtok>
 800413e:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;	// check if string exists
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <Parser_ParseMotors+0x20>
 8004148:	2303      	movs	r3, #3
 800414a:	e080      	b.n	800424e <Parser_ParseMotors+0x122>

	if(strcmp(ParsePointer, "FWD") == 0)
 800414c:	4943      	ldr	r1, [pc, #268]	; (800425c <Parser_ParseMotors+0x130>)
 800414e:	68b8      	ldr	r0, [r7, #8]
 8004150:	f7fc f846 	bl	80001e0 <strcmp>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <Parser_ParseMotors+0x34>
	{
		flag = PARSER_MOT_FRWD_FLAG;
 800415a:	2301      	movs	r3, #1
 800415c:	81fb      	strh	r3, [r7, #14]
 800415e:	e05d      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "BCK") == 0)
 8004160:	493f      	ldr	r1, [pc, #252]	; (8004260 <Parser_ParseMotors+0x134>)
 8004162:	68b8      	ldr	r0, [r7, #8]
 8004164:	f7fc f83c 	bl	80001e0 <strcmp>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <Parser_ParseMotors+0x48>
	{
		flag = PARSER_MOT_BKWD_FLAG;
 800416e:	2302      	movs	r3, #2
 8004170:	81fb      	strh	r3, [r7, #14]
 8004172:	e053      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "LFT") == 0)
 8004174:	493b      	ldr	r1, [pc, #236]	; (8004264 <Parser_ParseMotors+0x138>)
 8004176:	68b8      	ldr	r0, [r7, #8]
 8004178:	f7fc f832 	bl	80001e0 <strcmp>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <Parser_ParseMotors+0x5c>
	{
		flag = PARSER_MOT_LEFT_FLAG;
 8004182:	2304      	movs	r3, #4
 8004184:	81fb      	strh	r3, [r7, #14]
 8004186:	e049      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "RGT") == 0)
 8004188:	4937      	ldr	r1, [pc, #220]	; (8004268 <Parser_ParseMotors+0x13c>)
 800418a:	68b8      	ldr	r0, [r7, #8]
 800418c:	f7fc f828 	bl	80001e0 <strcmp>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <Parser_ParseMotors+0x70>
	{
		flag = PARSER_MOT_RGHT_FLAG;
 8004196:	2308      	movs	r3, #8
 8004198:	81fb      	strh	r3, [r7, #14]
 800419a:	e03f      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "MST") == 0)
 800419c:	4933      	ldr	r1, [pc, #204]	; (800426c <Parser_ParseMotors+0x140>)
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	f7fc f81e 	bl	80001e0 <strcmp>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <Parser_ParseMotors+0x84>
	{
		flag = PARSER_MOT_MICROSTEP_FLAG;
 80041aa:	2310      	movs	r3, #16
 80041ac:	81fb      	strh	r3, [r7, #14]
 80041ae:	e035      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "MF") == 0)
 80041b0:	492f      	ldr	r1, [pc, #188]	; (8004270 <Parser_ParseMotors+0x144>)
 80041b2:	68b8      	ldr	r0, [r7, #8]
 80041b4:	f7fc f814 	bl	80001e0 <strcmp>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <Parser_ParseMotors+0x98>
	{
		flag = PARSER_MOT_MAXFREQ_FLAG;
 80041be:	2320      	movs	r3, #32
 80041c0:	81fb      	strh	r3, [r7, #14]
 80041c2:	e02b      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "MSP") == 0)
 80041c4:	492b      	ldr	r1, [pc, #172]	; (8004274 <Parser_ParseMotors+0x148>)
 80041c6:	68b8      	ldr	r0, [r7, #8]
 80041c8:	f7fc f80a 	bl	80001e0 <strcmp>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <Parser_ParseMotors+0xac>
	{
		flag = PARSER_MOT_MAXSPED_FLAG;
 80041d2:	2340      	movs	r3, #64	; 0x40
 80041d4:	81fb      	strh	r3, [r7, #14]
 80041d6:	e021      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "BLK") == 0)
 80041d8:	4927      	ldr	r1, [pc, #156]	; (8004278 <Parser_ParseMotors+0x14c>)
 80041da:	68b8      	ldr	r0, [r7, #8]
 80041dc:	f7fc f800 	bl	80001e0 <strcmp>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <Parser_ParseMotors+0xc0>
	{
		flag = PARSER_MOT_BLOCK_FLAG;
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	81fb      	strh	r3, [r7, #14]
 80041ea:	e017      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "SPD") == 0)
 80041ec:	4923      	ldr	r1, [pc, #140]	; (800427c <Parser_ParseMotors+0x150>)
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f7fb fff6 	bl	80001e0 <strcmp>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <Parser_ParseMotors+0xd6>
	{
		flag = PARSER_MOT_SPEED_FLAG;
 80041fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041fe:	81fb      	strh	r3, [r7, #14]
 8004200:	e00c      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else if(strcmp(ParsePointer, "ST") == 0)
 8004202:	491f      	ldr	r1, [pc, #124]	; (8004280 <Parser_ParseMotors+0x154>)
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	f7fb ffeb 	bl	80001e0 <strcmp>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <Parser_ParseMotors+0xec>
	{
		flag = PARSER_MOT_STATE_FLAG;
 8004210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004214:	81fb      	strh	r3, [r7, #14]
 8004216:	e001      	b.n	800421c <Parser_ParseMotors+0xf0>
	}
	else return PARSER_ERROR;
 8004218:	2303      	movs	r3, #3
 800421a:	e018      	b.n	800424e <Parser_ParseMotors+0x122>

	status = Parser_GetIntValue(&value);
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fef0 	bl	8004004 <Parser_GetIntValue>
 8004224:	4603      	mov	r3, r0
 8004226:	71fb      	strb	r3, [r7, #7]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d101      	bne.n	8004232 <Parser_ParseMotors+0x106>
 800422e:	2303      	movs	r3, #3
 8004230:	e00d      	b.n	800424e <Parser_ParseMotors+0x122>
	else if(status == PARSER_SET) flag |= PARSER_MOT_SET_FLAG;
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d103      	bne.n	8004240 <Parser_ParseMotors+0x114>
 8004238:	89fb      	ldrh	r3, [r7, #14]
 800423a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800423e:	81fb      	strh	r3, [r7, #14]

	Parser_Motors_Print(flag, value);
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <Parser_ParseMotors+0x158>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	88b9      	ldrh	r1, [r7, #4]
 8004246:	89fa      	ldrh	r2, [r7, #14]
 8004248:	4610      	mov	r0, r2
 800424a:	4798      	blx	r3
	return PARSER_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	080133d8 	.word	0x080133d8
 800425c:	080133e8 	.word	0x080133e8
 8004260:	080133ec 	.word	0x080133ec
 8004264:	080133f0 	.word	0x080133f0
 8004268:	080133f4 	.word	0x080133f4
 800426c:	080133f8 	.word	0x080133f8
 8004270:	080133fc 	.word	0x080133fc
 8004274:	08013400 	.word	0x08013400
 8004278:	08013404 	.word	0x08013404
 800427c:	08013408 	.word	0x08013408
 8004280:	0801340c 	.word	0x0801340c
 8004284:	2000058c 	.word	0x2000058c

08004288 <Parser_ParseIMU>:

static Parser_StatusTypeDef Parser_ParseIMU(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	float value = 0;
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	603b      	str	r3, [r7, #0]
	char *ParsePointer = strtok(NULL, "=?");
 8004294:	492f      	ldr	r1, [pc, #188]	; (8004354 <Parser_ParseIMU+0xcc>)
 8004296:	2000      	movs	r0, #0
 8004298:	f00b fe9c 	bl	800ffd4 <strtok>
 800429c:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;	// check if string exists
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <Parser_ParseIMU+0x22>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e050      	b.n	800434c <Parser_ParseIMU+0xc4>

	if(strcmp(ParsePointer, "GX") == 0)
 80042aa:	492b      	ldr	r1, [pc, #172]	; (8004358 <Parser_ParseIMU+0xd0>)
 80042ac:	68b8      	ldr	r0, [r7, #8]
 80042ae:	f7fb ff97 	bl	80001e0 <strcmp>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <Parser_ParseIMU+0x36>
	{
		flag = PARSER_IMU_GX_OFFSET_FLAG;
 80042b8:	2301      	movs	r3, #1
 80042ba:	81fb      	strh	r3, [r7, #14]
 80042bc:	e029      	b.n	8004312 <Parser_ParseIMU+0x8a>
	}
	else if(strcmp(ParsePointer, "AY") == 0)
 80042be:	4927      	ldr	r1, [pc, #156]	; (800435c <Parser_ParseIMU+0xd4>)
 80042c0:	68b8      	ldr	r0, [r7, #8]
 80042c2:	f7fb ff8d 	bl	80001e0 <strcmp>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <Parser_ParseIMU+0x4a>
	{
		flag = PARSER_IMU_AY_OFFSET_FLAG;
 80042cc:	2302      	movs	r3, #2
 80042ce:	81fb      	strh	r3, [r7, #14]
 80042d0:	e01f      	b.n	8004312 <Parser_ParseIMU+0x8a>
	}
	else if(strcmp(ParsePointer, "AZ") == 0)
 80042d2:	4923      	ldr	r1, [pc, #140]	; (8004360 <Parser_ParseIMU+0xd8>)
 80042d4:	68b8      	ldr	r0, [r7, #8]
 80042d6:	f7fb ff83 	bl	80001e0 <strcmp>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <Parser_ParseIMU+0x5e>
	{
		flag = PARSER_IMU_AZ_OFFSET_FLAG;
 80042e0:	2304      	movs	r3, #4
 80042e2:	81fb      	strh	r3, [r7, #14]
 80042e4:	e015      	b.n	8004312 <Parser_ParseIMU+0x8a>
	}
	else if(strcmp(ParsePointer, "ANG") == 0)
 80042e6:	491f      	ldr	r1, [pc, #124]	; (8004364 <Parser_ParseIMU+0xdc>)
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f7fb ff79 	bl	80001e0 <strcmp>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <Parser_ParseIMU+0x72>
	{
		flag = PARSER_IMU_ANGLE_FLAG;
 80042f4:	2308      	movs	r3, #8
 80042f6:	81fb      	strh	r3, [r7, #14]
 80042f8:	e00b      	b.n	8004312 <Parser_ParseIMU+0x8a>
	}
	else if(strcmp(ParsePointer, "CB") == 0)
 80042fa:	491b      	ldr	r1, [pc, #108]	; (8004368 <Parser_ParseIMU+0xe0>)
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f7fb ff6f 	bl	80001e0 <strcmp>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <Parser_ParseIMU+0x86>
	{
		flag = PARSER_IMU_CALIBRATION_FLAG;
 8004308:	2310      	movs	r3, #16
 800430a:	81fb      	strh	r3, [r7, #14]
 800430c:	e001      	b.n	8004312 <Parser_ParseIMU+0x8a>
	}
	else return PARSER_ERROR;
 800430e:	2303      	movs	r3, #3
 8004310:	e01c      	b.n	800434c <Parser_ParseIMU+0xc4>

	status = Parser_GetFloatValue(&value);
 8004312:	463b      	mov	r3, r7
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fe2b 	bl	8003f70 <Parser_GetFloatValue>
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d101      	bne.n	8004328 <Parser_ParseIMU+0xa0>
 8004324:	2303      	movs	r3, #3
 8004326:	e011      	b.n	800434c <Parser_ParseIMU+0xc4>
	else if(status == PARSER_SET) flag |= PARSER_IMU_SET_FLAG;
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d103      	bne.n	8004336 <Parser_ParseIMU+0xae>
 800432e:	89fb      	ldrh	r3, [r7, #14]
 8004330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004334:	81fb      	strh	r3, [r7, #14]

	Parser_IMU_Print(flag, value);
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <Parser_ParseIMU+0xe4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	89fa      	ldrh	r2, [r7, #14]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	edd7 7a00 	vldr	s15, [r7]
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	4610      	mov	r0, r2
 8004348:	4798      	blx	r3
	return PARSER_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	080133d8 	.word	0x080133d8
 8004358:	08013410 	.word	0x08013410
 800435c:	08013414 	.word	0x08013414
 8004360:	08013418 	.word	0x08013418
 8004364:	0801341c 	.word	0x0801341c
 8004368:	08013420 	.word	0x08013420
 800436c:	20000588 	.word	0x20000588

08004370 <Parser_ParsePID>:

static Parser_StatusTypeDef Parser_ParsePID(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
	Parser_StatusTypeDef status;
	uint16_t flag;
	float value;
	char *ParsePointer = strtok(NULL, "=?");
 8004376:	4929      	ldr	r1, [pc, #164]	; (800441c <Parser_ParsePID+0xac>)
 8004378:	2000      	movs	r0, #0
 800437a:	f00b fe2b 	bl	800ffd4 <strtok>
 800437e:	60b8      	str	r0, [r7, #8]

	if(strlen(ParsePointer) <= 0) return PARSER_ERROR;	// check if string exists
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <Parser_ParsePID+0x1c>
 8004388:	2303      	movs	r3, #3
 800438a:	e042      	b.n	8004412 <Parser_ParsePID+0xa2>

	if(strcmp(ParsePointer, "KP") == 0)
 800438c:	4924      	ldr	r1, [pc, #144]	; (8004420 <Parser_ParsePID+0xb0>)
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f7fb ff26 	bl	80001e0 <strcmp>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <Parser_ParsePID+0x30>
	{
		flag = PARSER_PID_KP_FLAG;
 800439a:	2301      	movs	r3, #1
 800439c:	81fb      	strh	r3, [r7, #14]
 800439e:	e015      	b.n	80043cc <Parser_ParsePID+0x5c>
	}
	else if(strcmp(ParsePointer, "KI") == 0)
 80043a0:	4920      	ldr	r1, [pc, #128]	; (8004424 <Parser_ParsePID+0xb4>)
 80043a2:	68b8      	ldr	r0, [r7, #8]
 80043a4:	f7fb ff1c 	bl	80001e0 <strcmp>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <Parser_ParsePID+0x44>
	{
		flag = PARSER_PID_KI_FLAG;
 80043ae:	2302      	movs	r3, #2
 80043b0:	81fb      	strh	r3, [r7, #14]
 80043b2:	e00b      	b.n	80043cc <Parser_ParsePID+0x5c>
	}
	else if(strcmp(ParsePointer, "KD") == 0)
 80043b4:	491c      	ldr	r1, [pc, #112]	; (8004428 <Parser_ParsePID+0xb8>)
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f7fb ff12 	bl	80001e0 <strcmp>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <Parser_ParsePID+0x58>
	{
		flag = PARSER_PID_KD_FLAG;
 80043c2:	2304      	movs	r3, #4
 80043c4:	81fb      	strh	r3, [r7, #14]
 80043c6:	e001      	b.n	80043cc <Parser_ParsePID+0x5c>
	}
	else return PARSER_ERROR;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e022      	b.n	8004412 <Parser_ParsePID+0xa2>

	status = Parser_GetFloatValue(&value);
 80043cc:	463b      	mov	r3, r7
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fdce 	bl	8003f70 <Parser_GetFloatValue>
 80043d4:	4603      	mov	r3, r0
 80043d6:	71fb      	strb	r3, [r7, #7]

	if(status == PARSER_ERROR) return PARSER_ERROR;
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d101      	bne.n	80043e2 <Parser_ParsePID+0x72>
 80043de:	2303      	movs	r3, #3
 80043e0:	e017      	b.n	8004412 <Parser_ParsePID+0xa2>
	else if(status == PARSER_SET) flag |= PARSER_PID_SET_FLAG;
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d104      	bne.n	80043f2 <Parser_ParsePID+0x82>
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	81fb      	strh	r3, [r7, #14]
 80043f0:	e004      	b.n	80043fc <Parser_ParsePID+0x8c>
	else if(status == PARSER_READ)
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <Parser_ParsePID+0x8c>
		status = PARSER_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	71fb      	strb	r3, [r7, #7]
	Parser_PID_Print(flag, value);
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <Parser_ParsePID+0xbc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	89fa      	ldrh	r2, [r7, #14]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	edd7 7a00 	vldr	s15, [r7]
 8004408:	eeb0 0a67 	vmov.f32	s0, s15
 800440c:	4610      	mov	r0, r2
 800440e:	4798      	blx	r3
	return PARSER_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	080133d8 	.word	0x080133d8
 8004420:	08013424 	.word	0x08013424
 8004424:	08013428 	.word	0x08013428
 8004428:	0801342c 	.word	0x0801342c
 800442c:	20000584 	.word	0x20000584

08004430 <Parser_ParseLine>:

Parser_StatusTypeDef Parser_ParseLine(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
	char *ParsePointer;
	Parser_StatusTypeDef status;

	if(!Parser_ReceiveLine(BufferReceive))
 8004436:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <Parser_ParseLine+0x90>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4822      	ldr	r0, [pc, #136]	; (80044c4 <Parser_ParseLine+0x94>)
 800443c:	4798      	blx	r3
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d138      	bne.n	80044b6 <Parser_ParseLine+0x86>
	{
		ParsePointer = strtok(BufferReceive, "+");
 8004444:	4920      	ldr	r1, [pc, #128]	; (80044c8 <Parser_ParseLine+0x98>)
 8004446:	481f      	ldr	r0, [pc, #124]	; (80044c4 <Parser_ParseLine+0x94>)
 8004448:	f00b fdc4 	bl	800ffd4 <strtok>
 800444c:	6038      	str	r0, [r7, #0]
		if(strcmp(ParsePointer, "P") == 0)
 800444e:	491f      	ldr	r1, [pc, #124]	; (80044cc <Parser_ParseLine+0x9c>)
 8004450:	6838      	ldr	r0, [r7, #0]
 8004452:	f7fb fec5 	bl	80001e0 <strcmp>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <Parser_ParseLine+0x36>
		{
			status = Parser_ParsePID();
 800445c:	f7ff ff88 	bl	8004370 <Parser_ParsePID>
 8004460:	4603      	mov	r3, r0
 8004462:	71fb      	strb	r3, [r7, #7]
 8004464:	e025      	b.n	80044b2 <Parser_ParseLine+0x82>
		}
		else if(strcmp(ParsePointer, "I") == 0)
 8004466:	491a      	ldr	r1, [pc, #104]	; (80044d0 <Parser_ParseLine+0xa0>)
 8004468:	6838      	ldr	r0, [r7, #0]
 800446a:	f7fb feb9 	bl	80001e0 <strcmp>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <Parser_ParseLine+0x4e>
		{
			status = Parser_ParseIMU();
 8004474:	f7ff ff08 	bl	8004288 <Parser_ParseIMU>
 8004478:	4603      	mov	r3, r0
 800447a:	71fb      	strb	r3, [r7, #7]
 800447c:	e019      	b.n	80044b2 <Parser_ParseLine+0x82>
		}
		else if(strcmp(ParsePointer, "M") == 0)
 800447e:	4915      	ldr	r1, [pc, #84]	; (80044d4 <Parser_ParseLine+0xa4>)
 8004480:	6838      	ldr	r0, [r7, #0]
 8004482:	f7fb fead 	bl	80001e0 <strcmp>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <Parser_ParseLine+0x66>
		{
			status = Parser_ParseMotors();
 800448c:	f7ff fe4e 	bl	800412c <Parser_ParseMotors>
 8004490:	4603      	mov	r3, r0
 8004492:	71fb      	strb	r3, [r7, #7]
 8004494:	e00d      	b.n	80044b2 <Parser_ParseLine+0x82>
		}
		else if(strcmp(ParsePointer, "O") == 0)
 8004496:	4910      	ldr	r1, [pc, #64]	; (80044d8 <Parser_ParseLine+0xa8>)
 8004498:	6838      	ldr	r0, [r7, #0]
 800449a:	f7fb fea1 	bl	80001e0 <strcmp>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <Parser_ParseLine+0x7e>
		{
			status = Parser_ParseOther();
 80044a4:	f7ff fde6 	bl	8004074 <Parser_ParseOther>
 80044a8:	4603      	mov	r3, r0
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	e001      	b.n	80044b2 <Parser_ParseLine+0x82>
		}
		else
		{
			return PARSER_ERROR;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e002      	b.n	80044b8 <Parser_ParseLine+0x88>
		}
		return status;
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	e000      	b.n	80044b8 <Parser_ParseLine+0x88>
	}
	return PARSER_ERROR;
 80044b6:	2303      	movs	r3, #3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000594 	.word	0x20000594
 80044c4:	20000598 	.word	0x20000598
 80044c8:	08013430 	.word	0x08013430
 80044cc:	08013434 	.word	0x08013434
 80044d0:	08013438 	.word	0x08013438
 80044d4:	0801343c 	.word	0x0801343c
 80044d8:	08013440 	.word	0x08013440

080044dc <isReadable>:
 *      Author: mand2
 */
#include "ring_buffer.h"

RB_StatusTypeDef isReadable(RingBuffer_t *rb)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	return (rb->Head == rb->Tail) ? !RB_ERROR : !RB_OK;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	885b      	ldrh	r3, [r3, #2]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <RB_Read>:

RB_StatusTypeDef RB_Read(RingBuffer_t *rb, uint8_t *Value)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	if (rb->Tail == rb->Head)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	885a      	ldrh	r2, [r3, #2]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d101      	bne.n	800451e <RB_Read+0x1a>
		{
			return RB_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e018      	b.n	8004550 <RB_Read+0x4c>
		}

	*Value = rb->Buffer[rb->Tail];
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	885b      	ldrh	r3, [r3, #2]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	791a      	ldrb	r2, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	701a      	strb	r2, [r3, #0]
	rb->Tail = (rb->Tail +1) % RING_BUFFER_SIZE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	885b      	ldrh	r3, [r3, #2]
 8004532:	3301      	adds	r3, #1
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <RB_Read+0x58>)
 8004536:	fb82 1203 	smull	r1, r2, r2, r3
 800453a:	1191      	asrs	r1, r2, #6
 800453c:	17da      	asrs	r2, r3, #31
 800453e:	1a8a      	subs	r2, r1, r2
 8004540:	21c8      	movs	r1, #200	; 0xc8
 8004542:	fb01 f202 	mul.w	r2, r1, r2
 8004546:	1a9a      	subs	r2, r3, r2
 8004548:	b292      	uxth	r2, r2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	805a      	strh	r2, [r3, #2]
	return RB_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	51eb851f 	.word	0x51eb851f

08004560 <RB_Write>:

RB_StatusTypeDef RB_Write(RingBuffer_t *rb, uint8_t Value)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
	uint16_t TmpHead = (rb->Head +1) % RING_BUFFER_SIZE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	4a12      	ldr	r2, [pc, #72]	; (80045bc <RB_Write+0x5c>)
 8004574:	fb82 1203 	smull	r1, r2, r2, r3
 8004578:	1191      	asrs	r1, r2, #6
 800457a:	17da      	asrs	r2, r3, #31
 800457c:	1a8a      	subs	r2, r1, r2
 800457e:	21c8      	movs	r1, #200	; 0xc8
 8004580:	fb01 f202 	mul.w	r2, r1, r2
 8004584:	1a9a      	subs	r2, r3, r2
 8004586:	4613      	mov	r3, r2
 8004588:	81fb      	strh	r3, [r7, #14]

	if (TmpHead == rb->Tail)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	885b      	ldrh	r3, [r3, #2]
 800458e:	89fa      	ldrh	r2, [r7, #14]
 8004590:	429a      	cmp	r2, r3
 8004592:	d101      	bne.n	8004598 <RB_Write+0x38>
	{
		return RB_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e00a      	b.n	80045ae <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	711a      	strb	r2, [r3, #4]
	rb->Head = TmpHead;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	89fa      	ldrh	r2, [r7, #14]
 80045aa:	801a      	strh	r2, [r3, #0]
	return RB_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	51eb851f 	.word	0x51eb851f

080045c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_MspInit+0x54>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4a11      	ldr	r2, [pc, #68]	; (8004614 <HAL_MspInit+0x54>)
 80045d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045d4:	6453      	str	r3, [r2, #68]	; 0x44
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_MspInit+0x54>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_MspInit+0x54>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_MspInit+0x54>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_MspInit+0x54>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	210f      	movs	r1, #15
 8004602:	f06f 0001 	mvn.w	r0, #1
 8004606:	f001 f96b 	bl	80058e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800

08004618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	; 0x30
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004628:	2200      	movs	r2, #0
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	2019      	movs	r0, #25
 800462e:	f001 f957 	bl	80058e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004632:	2019      	movs	r0, #25
 8004634:	f001 f970 	bl	8005918 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_InitTick+0xa0>)
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_InitTick+0xa0>)
 8004642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004646:	6453      	str	r3, [r2, #68]	; 0x44
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_InitTick+0xa0>)
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004654:	f107 0210 	add.w	r2, r7, #16
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f003 fb78 	bl	8007d54 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004664:	f003 fb62 	bl	8007d2c <HAL_RCC_GetPCLK2Freq>
 8004668:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <HAL_InitTick+0xa4>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	0c9b      	lsrs	r3, r3, #18
 8004674:	3b01      	subs	r3, #1
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_InitTick+0xa8>)
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <HAL_InitTick+0xac>)
 800467c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_InitTick+0xa8>)
 8004680:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004684:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_InitTick+0xa8>)
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_InitTick+0xa8>)
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_InitTick+0xa8>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8004698:	4809      	ldr	r0, [pc, #36]	; (80046c0 <HAL_InitTick+0xa8>)
 800469a:	f003 fb8d 	bl	8007db8 <HAL_TIM_Base_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80046a4:	4806      	ldr	r0, [pc, #24]	; (80046c0 <HAL_InitTick+0xa8>)
 80046a6:	f003 fc31 	bl	8007f0c <HAL_TIM_Base_Start_IT>
 80046aa:	4603      	mov	r3, r0
 80046ac:	e000      	b.n	80046b0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3730      	adds	r7, #48	; 0x30
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	431bde83 	.word	0x431bde83
 80046c0:	200005b8 	.word	0x200005b8
 80046c4:	40014400 	.word	0x40014400

080046c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046cc:	e7fe      	b.n	80046cc <NMI_Handler+0x4>

080046ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d2:	e7fe      	b.n	80046d2 <HardFault_Handler+0x4>

080046d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <MemManage_Handler+0x4>

080046da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046de:	e7fe      	b.n	80046de <BusFault_Handler+0x4>

080046e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <UsageFault_Handler+0x4>

080046e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6_Interrupt2_Pin);
 80046f8:	2008      	movs	r0, #8
 80046fa:	f001 febb 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004708:	4802      	ldr	r0, [pc, #8]	; (8004714 <DMA1_Stream5_IRQHandler+0x10>)
 800470a:	f001 faab 	bl	8005c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000720 	.word	0x20000720

08004718 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800471c:	4802      	ldr	r0, [pc, #8]	; (8004728 <DMA1_Stream6_IRQHandler+0x10>)
 800471e:	f001 faa1 	bl	8005c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000780 	.word	0x20000780

0800472c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004730:	4802      	ldr	r0, [pc, #8]	; (800473c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004732:	f003 fdbb 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200005b8 	.word	0x200005b8

08004740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004744:	4802      	ldr	r0, [pc, #8]	; (8004750 <USART2_IRQHandler+0x10>)
 8004746:	f004 fceb 	bl	8009120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	200006dc 	.word	0x200006dc

08004754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6_Interrupt_Pin);
 8004758:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800475c:	f001 fe8a 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004760:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004764:	f001 fe86 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}

0800476c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004770:	4802      	ldr	r0, [pc, #8]	; (800477c <DMA2_Stream0_IRQHandler+0x10>)
 8004772:	f001 fa77 	bl	8005c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000250 	.word	0x20000250

08004780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	return 1;
 8004784:	2301      	movs	r3, #1
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_kill>:

int _kill(int pid, int sig)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800479a:	f009 fed7 	bl	800e54c <__errno>
 800479e:	4603      	mov	r3, r0
 80047a0:	2216      	movs	r2, #22
 80047a2:	601a      	str	r2, [r3, #0]
	return -1;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_exit>:

void _exit (int status)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047b8:	f04f 31ff 	mov.w	r1, #4294967295
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ffe7 	bl	8004790 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047c2:	e7fe      	b.n	80047c2 <_exit+0x12>

080047c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e00a      	b.n	80047ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047d6:	f3af 8000 	nop.w
 80047da:	4601      	mov	r1, r0
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	60ba      	str	r2, [r7, #8]
 80047e2:	b2ca      	uxtb	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dbf0      	blt.n	80047d6 <_read+0x12>
	}

return len;
 80047f4:	687b      	ldr	r3, [r7, #4]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e009      	b.n	8004824 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60ba      	str	r2, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3301      	adds	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	dbf1      	blt.n	8004810 <_write+0x12>
	}
	return len;
 800482c:	687b      	ldr	r3, [r7, #4]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_close>:

int _close(int file)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
	return -1;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800485e:	605a      	str	r2, [r3, #4]
	return 0;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <_isatty>:

int _isatty(int file)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
	return 1;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
	return 0;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <_sbrk+0x5c>)
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <_sbrk+0x60>)
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048b4:	4b13      	ldr	r3, [pc, #76]	; (8004904 <_sbrk+0x64>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048bc:	4b11      	ldr	r3, [pc, #68]	; (8004904 <_sbrk+0x64>)
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <_sbrk+0x68>)
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <_sbrk+0x64>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d207      	bcs.n	80048e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048d0:	f009 fe3c 	bl	800e54c <__errno>
 80048d4:	4603      	mov	r3, r0
 80048d6:	220c      	movs	r2, #12
 80048d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	e009      	b.n	80048f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <_sbrk+0x64>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <_sbrk+0x64>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	4a05      	ldr	r2, [pc, #20]	; (8004904 <_sbrk+0x64>)
 80048f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20020000 	.word	0x20020000
 8004900:	00002000 	.word	0x00002000
 8004904:	20000600 	.word	0x20000600
 8004908:	20005208 	.word	0x20005208

0800490c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <SystemInit+0x20>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	4a05      	ldr	r2, [pc, #20]	; (800492c <SystemInit+0x20>)
 8004918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800491c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	; 0x38
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004944:	f107 0320 	add.w	r3, r7, #32
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
 800495c:	615a      	str	r2, [r3, #20]
 800495e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <MX_TIM2_Init+0xe8>)
 8004962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <MX_TIM2_Init+0xe8>)
 800496a:	2253      	movs	r2, #83	; 0x53
 800496c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800496e:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <MX_TIM2_Init+0xe8>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <MX_TIM2_Init+0xe8>)
 8004976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800497a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <MX_TIM2_Init+0xe8>)
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <MX_TIM2_Init+0xe8>)
 8004984:	2200      	movs	r2, #0
 8004986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004988:	4823      	ldr	r0, [pc, #140]	; (8004a18 <MX_TIM2_Init+0xe8>)
 800498a:	f003 fa15 	bl	8007db8 <HAL_TIM_Base_Init>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004994:	f7ff fa96 	bl	8003ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800499e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a2:	4619      	mov	r1, r3
 80049a4:	481c      	ldr	r0, [pc, #112]	; (8004a18 <MX_TIM2_Init+0xe8>)
 80049a6:	f003 fe4b 	bl	8008640 <HAL_TIM_ConfigClockSource>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80049b0:	f7ff fa88 	bl	8003ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80049b4:	4818      	ldr	r0, [pc, #96]	; (8004a18 <MX_TIM2_Init+0xe8>)
 80049b6:	f003 fb0b 	bl	8007fd0 <HAL_TIM_PWM_Init>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80049c0:	f7ff fa80 	bl	8003ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c4:	2300      	movs	r3, #0
 80049c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049cc:	f107 0320 	add.w	r3, r7, #32
 80049d0:	4619      	mov	r1, r3
 80049d2:	4811      	ldr	r0, [pc, #68]	; (8004a18 <MX_TIM2_Init+0xe8>)
 80049d4:	f004 f9f0 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80049de:	f7ff fa71 	bl	8003ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049e2:	2360      	movs	r3, #96	; 0x60
 80049e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80049e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80049ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049f4:	1d3b      	adds	r3, r7, #4
 80049f6:	2208      	movs	r2, #8
 80049f8:	4619      	mov	r1, r3
 80049fa:	4807      	ldr	r0, [pc, #28]	; (8004a18 <MX_TIM2_Init+0xe8>)
 80049fc:	f003 fd5e 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004a06:	f7ff fa5d 	bl	8003ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004a0a:	4803      	ldr	r0, [pc, #12]	; (8004a18 <MX_TIM2_Init+0xe8>)
 8004a0c:	f000 f918 	bl	8004c40 <HAL_TIM_MspPostInit>

}
 8004a10:	bf00      	nop
 8004a12:	3738      	adds	r7, #56	; 0x38
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000604 	.word	0x20000604

08004a1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	609a      	str	r2, [r3, #8]
 8004a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a30:	463b      	mov	r3, r7
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a38:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <MX_TIM3_Init+0x98>)
 8004a3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a40:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004a44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004a52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a60:	4813      	ldr	r0, [pc, #76]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a62:	f003 f9a9 	bl	8007db8 <HAL_TIM_Base_Init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004a6c:	f7ff fa2a 	bl	8003ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a76:	f107 0308 	add.w	r3, r7, #8
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	480c      	ldr	r0, [pc, #48]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a7e:	f003 fddf 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004a88:	f7ff fa1c 	bl	8003ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a8c:	2320      	movs	r3, #32
 8004a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a94:	463b      	mov	r3, r7
 8004a96:	4619      	mov	r1, r3
 8004a98:	4805      	ldr	r0, [pc, #20]	; (8004ab0 <MX_TIM3_Init+0x94>)
 8004a9a:	f004 f98d 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004aa4:	f7ff fa0e 	bl	8003ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	2000064c 	.word	0x2000064c
 8004ab4:	40000400 	.word	0x40000400

08004ab8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08e      	sub	sp, #56	; 0x38
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004acc:	f107 0320 	add.w	r3, r7, #32
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	609a      	str	r2, [r3, #8]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	611a      	str	r2, [r3, #16]
 8004ae4:	615a      	str	r2, [r3, #20]
 8004ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004aea:	4a2e      	ldr	r2, [pc, #184]	; (8004ba4 <MX_TIM4_Init+0xec>)
 8004aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004aee:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004af0:	2253      	movs	r2, #83	; 0x53
 8004af2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af4:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b02:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b0e:	4824      	ldr	r0, [pc, #144]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b10:	f003 f952 	bl	8007db8 <HAL_TIM_Base_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004b1a:	f7ff f9d3 	bl	8003ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b28:	4619      	mov	r1, r3
 8004b2a:	481d      	ldr	r0, [pc, #116]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b2c:	f003 fd88 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004b36:	f7ff f9c5 	bl	8003ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b3a:	4819      	ldr	r0, [pc, #100]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b3c:	f003 fa48 	bl	8007fd0 <HAL_TIM_PWM_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004b46:	f7ff f9bd 	bl	8003ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b52:	f107 0320 	add.w	r3, r7, #32
 8004b56:	4619      	mov	r1, r3
 8004b58:	4811      	ldr	r0, [pc, #68]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b5a:	f004 f92d 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004b64:	f7ff f9ae 	bl	8003ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b68:	2360      	movs	r3, #96	; 0x60
 8004b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8004b6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4807      	ldr	r0, [pc, #28]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b82:	f003 fc9b 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004b8c:	f7ff f99a 	bl	8003ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004b90:	4803      	ldr	r0, [pc, #12]	; (8004ba0 <MX_TIM4_Init+0xe8>)
 8004b92:	f000 f855 	bl	8004c40 <HAL_TIM_MspPostInit>

}
 8004b96:	bf00      	nop
 8004b98:	3738      	adds	r7, #56	; 0x38
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000694 	.word	0x20000694
 8004ba4:	40000800 	.word	0x40000800

08004ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004bd6:	e026      	b.n	8004c26 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_TIM_Base_MspInit+0x90>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
}
 8004bfe:	e012      	b.n	8004c26 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <HAL_TIM_Base_MspInit+0x94>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10d      	bne.n	8004c26 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004c14:	f043 0304 	orr.w	r3, r3, #4
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_TIM_Base_MspInit+0x8c>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800

08004c40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d11f      	bne.n	8004ca2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = leftMotor_STEP_Pin;
 8004c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	2302      	movs	r3, #2
 8004c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c90:	2301      	movs	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 8004c94:	f107 0314 	add.w	r3, r7, #20
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4816      	ldr	r0, [pc, #88]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004c9c:	f001 fa4c 	bl	8006138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004ca0:	e022      	b.n	8004ce8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_TIM_MspPostInit+0xb8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d11d      	bne.n	8004ce8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004cb6:	f043 0302 	orr.w	r3, r3, #2
 8004cba:	6313      	str	r3, [r2, #48]	; 0x30
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightMotor_STEP_Pin;
 8004cc8:	2340      	movs	r3, #64	; 0x40
 8004cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4804      	ldr	r0, [pc, #16]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004ce4:	f001 fa28 	bl	8006138 <HAL_GPIO_Init>
}
 8004ce8:	bf00      	nop
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40020400 	.word	0x40020400
 8004cf8:	40000800 	.word	0x40000800

08004cfc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d00:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <MX_USART2_UART_Init+0x50>)
 8004d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d22:	220c      	movs	r2, #12
 8004d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d26:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d32:	4805      	ldr	r0, [pc, #20]	; (8004d48 <MX_USART2_UART_Init+0x4c>)
 8004d34:	f004 f8c2 	bl	8008ebc <HAL_UART_Init>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d3e:	f7ff f8c1 	bl	8003ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200006dc 	.word	0x200006dc
 8004d4c:	40004400 	.word	0x40004400

08004d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	60da      	str	r2, [r3, #12]
 8004d66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a47      	ldr	r2, [pc, #284]	; (8004e8c <HAL_UART_MspInit+0x13c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	f040 8088 	bne.w	8004e84 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <HAL_UART_MspInit+0x140>)
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	4a44      	ldr	r2, [pc, #272]	; (8004e90 <HAL_UART_MspInit+0x140>)
 8004d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d82:	6413      	str	r3, [r2, #64]	; 0x40
 8004d84:	4b42      	ldr	r3, [pc, #264]	; (8004e90 <HAL_UART_MspInit+0x140>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	4b3e      	ldr	r3, [pc, #248]	; (8004e90 <HAL_UART_MspInit+0x140>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	4a3d      	ldr	r2, [pc, #244]	; (8004e90 <HAL_UART_MspInit+0x140>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004da0:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_UART_MspInit+0x140>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004dac:	230c      	movs	r3, #12
 8004dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db0:	2302      	movs	r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db8:	2303      	movs	r3, #3
 8004dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dbc:	2307      	movs	r3, #7
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4833      	ldr	r0, [pc, #204]	; (8004e94 <HAL_UART_MspInit+0x144>)
 8004dc8:	f001 f9b6 	bl	8006138 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004dcc:	4b32      	ldr	r3, [pc, #200]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004dce:	4a33      	ldr	r2, [pc, #204]	; (8004e9c <HAL_UART_MspInit+0x14c>)
 8004dd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004dd2:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dda:	4b2f      	ldr	r3, [pc, #188]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004de6:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004dfa:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e0c:	4822      	ldr	r0, [pc, #136]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004e0e:	f000 fd91 	bl	8005934 <HAL_DMA_Init>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004e18:	f7ff f854 	bl	8003ec4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
 8004e22:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <HAL_UART_MspInit+0x148>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_UART_MspInit+0x154>)
 8004e2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e34:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e48:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e50:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004e68:	480d      	ldr	r0, [pc, #52]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e6a:	f000 fd63 	bl	8005934 <HAL_DMA_Init>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004e74:	f7ff f826 	bl	8003ec4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e7e:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <HAL_UART_MspInit+0x150>)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e84:	bf00      	nop
 8004e86:	3728      	adds	r7, #40	; 0x28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40004400 	.word	0x40004400
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40020000 	.word	0x40020000
 8004e98:	20000720 	.word	0x20000720
 8004e9c:	40026088 	.word	0x40026088
 8004ea0:	20000780 	.word	0x20000780
 8004ea4:	400260a0 	.word	0x400260a0

08004ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004eae:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004eb0:	4a0e      	ldr	r2, [pc, #56]	; (8004eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb4:	e002      	b.n	8004ebc <LoopCopyDataInit>

08004eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eba:	3304      	adds	r3, #4

08004ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ec0:	d3f9      	bcc.n	8004eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ec2:	4a0b      	ldr	r2, [pc, #44]	; (8004ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ec4:	4c0b      	ldr	r4, [pc, #44]	; (8004ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec8:	e001      	b.n	8004ece <LoopFillZerobss>

08004eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ecc:	3204      	adds	r2, #4

08004ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ed0:	d3fb      	bcc.n	8004eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ed2:	f7ff fd1b 	bl	800490c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ed6:	f009 fc35 	bl	800e744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eda:	f7fe ff25 	bl	8003d28 <main>
  bx  lr    
 8004ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ee8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004eec:	08013be8 	.word	0x08013be8
  ldr r2, =_sbss
 8004ef0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004ef4:	20005204 	.word	0x20005204

08004ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ef8:	e7fe      	b.n	8004ef8 <ADC_IRQHandler>
	...

08004efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_Init+0x40>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0d      	ldr	r2, [pc, #52]	; (8004f3c <HAL_Init+0x40>)
 8004f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_Init+0x40>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <HAL_Init+0x40>)
 8004f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <HAL_Init+0x40>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <HAL_Init+0x40>)
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f24:	2003      	movs	r0, #3
 8004f26:	f000 fcd0 	bl	80058ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f2a:	200f      	movs	r0, #15
 8004f2c:	f7ff fb74 	bl	8004618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f30:	f7ff fb46 	bl	80045c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023c00 	.word	0x40023c00

08004f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_IncTick+0x20>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_IncTick+0x24>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <HAL_IncTick+0x24>)
 8004f52:	6013      	str	r3, [r2, #0]
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	2000000c 	.word	0x2000000c
 8004f64:	200007e0 	.word	0x200007e0

08004f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_GetTick+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200007e0 	.word	0x200007e0

08004f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e033      	b.n	8004ffe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc ffce 	bl	8001f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fc6:	f023 0302 	bic.w	r3, r3, #2
 8004fca:	f043 0202 	orr.w	r2, r3, #2
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa4e 	bl	8005474 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
 8004fee:	e001      	b.n	8004ff4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_ADC_Start_DMA+0x1e>
 8005022:	2302      	movs	r3, #2
 8005024:	e0ce      	b.n	80051c4 <HAL_ADC_Start_DMA+0x1bc>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d018      	beq.n	800506e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800504c:	4b5f      	ldr	r3, [pc, #380]	; (80051cc <HAL_ADC_Start_DMA+0x1c4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5f      	ldr	r2, [pc, #380]	; (80051d0 <HAL_ADC_Start_DMA+0x1c8>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0c9a      	lsrs	r2, r3, #18
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005060:	e002      	b.n	8005068 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3b01      	subs	r3, #1
 8005066:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f9      	bne.n	8005062 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507c:	d107      	bne.n	800508e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800508c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 8086 	bne.w	80051aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050dc:	d106      	bne.n	80050ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	f023 0206 	bic.w	r2, r3, #6
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
 80050ea:	e002      	b.n	80050f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050fa:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <HAL_ADC_Start_DMA+0x1cc>)
 80050fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	4a35      	ldr	r2, [pc, #212]	; (80051d8 <HAL_ADC_Start_DMA+0x1d0>)
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4a34      	ldr	r2, [pc, #208]	; (80051dc <HAL_ADC_Start_DMA+0x1d4>)
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <HAL_ADC_Start_DMA+0x1d8>)
 8005114:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800511e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800512e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	334c      	adds	r3, #76	; 0x4c
 800514a:	4619      	mov	r1, r3
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f000 fc9e 	bl	8005a90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10f      	bne.n	8005180 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d129      	bne.n	80051c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800517c:	609a      	str	r2, [r3, #8]
 800517e:	e020      	b.n	80051c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_ADC_Start_DMA+0x1dc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d11b      	bne.n	80051c2 <HAL_ADC_Start_DMA+0x1ba>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d114      	bne.n	80051c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051a6:	609a      	str	r2, [r3, #8]
 80051a8:	e00b      	b.n	80051c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0210 	orr.w	r2, r3, #16
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000004 	.word	0x20000004
 80051d0:	431bde83 	.word	0x431bde83
 80051d4:	40012300 	.word	0x40012300
 80051d8:	0800566d 	.word	0x0800566d
 80051dc:	08005727 	.word	0x08005727
 80051e0:	08005743 	.word	0x08005743
 80051e4:	40012000 	.word	0x40012000

080051e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_ADC_ConfigChannel+0x1c>
 8005228:	2302      	movs	r3, #2
 800522a:	e113      	b.n	8005454 <HAL_ADC_ConfigChannel+0x244>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b09      	cmp	r3, #9
 800523a:	d925      	bls.n	8005288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68d9      	ldr	r1, [r3, #12]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	3b1e      	subs	r3, #30
 8005252:	2207      	movs	r2, #7
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43da      	mvns	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	400a      	ands	r2, r1
 8005260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68d9      	ldr	r1, [r3, #12]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	4618      	mov	r0, r3
 8005274:	4603      	mov	r3, r0
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4403      	add	r3, r0
 800527a:	3b1e      	subs	r3, #30
 800527c:	409a      	lsls	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	e022      	b.n	80052ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6919      	ldr	r1, [r3, #16]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	2207      	movs	r2, #7
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43da      	mvns	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	400a      	ands	r2, r1
 80052aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4618      	mov	r0, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	4403      	add	r3, r0
 80052c4:	409a      	lsls	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d824      	bhi.n	8005320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	3b05      	subs	r3, #5
 80052e8:	221f      	movs	r2, #31
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43da      	mvns	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	400a      	ands	r2, r1
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	4618      	mov	r0, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	3b05      	subs	r3, #5
 8005312:	fa00 f203 	lsl.w	r2, r0, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	635a      	str	r2, [r3, #52]	; 0x34
 800531e:	e04c      	b.n	80053ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	d824      	bhi.n	8005372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	3b23      	subs	r3, #35	; 0x23
 800533a:	221f      	movs	r2, #31
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43da      	mvns	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	400a      	ands	r2, r1
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	4618      	mov	r0, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	3b23      	subs	r3, #35	; 0x23
 8005364:	fa00 f203 	lsl.w	r2, r0, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
 8005370:	e023      	b.n	80053ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	3b41      	subs	r3, #65	; 0x41
 8005384:	221f      	movs	r2, #31
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	400a      	ands	r2, r1
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	4618      	mov	r0, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	3b41      	subs	r3, #65	; 0x41
 80053ae:	fa00 f203 	lsl.w	r2, r0, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053ba:	4b29      	ldr	r3, [pc, #164]	; (8005460 <HAL_ADC_ConfigChannel+0x250>)
 80053bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a28      	ldr	r2, [pc, #160]	; (8005464 <HAL_ADC_ConfigChannel+0x254>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10f      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x1d8>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b12      	cmp	r3, #18
 80053ce:	d10b      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_ADC_ConfigChannel+0x254>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d12b      	bne.n	800544a <HAL_ADC_ConfigChannel+0x23a>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_ADC_ConfigChannel+0x258>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <HAL_ADC_ConfigChannel+0x1f4>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b11      	cmp	r3, #17
 8005402:	d122      	bne.n	800544a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a11      	ldr	r2, [pc, #68]	; (8005468 <HAL_ADC_ConfigChannel+0x258>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005426:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_ADC_ConfigChannel+0x25c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a11      	ldr	r2, [pc, #68]	; (8005470 <HAL_ADC_ConfigChannel+0x260>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	0c9a      	lsrs	r2, r3, #18
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800543c:	e002      	b.n	8005444 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3b01      	subs	r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f9      	bne.n	800543e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40012300 	.word	0x40012300
 8005464:	40012000 	.word	0x40012000
 8005468:	10000012 	.word	0x10000012
 800546c:	20000004 	.word	0x20000004
 8005470:	431bde83 	.word	0x431bde83

08005474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800547c:	4b79      	ldr	r3, [pc, #484]	; (8005664 <ADC_Init+0x1f0>)
 800547e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	021a      	lsls	r2, r3, #8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6899      	ldr	r1, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	4a58      	ldr	r2, [pc, #352]	; (8005668 <ADC_Init+0x1f4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800551a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6899      	ldr	r1, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800553c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	e00f      	b.n	8005572 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005570:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0202 	bic.w	r2, r2, #2
 8005580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6899      	ldr	r1, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	7e1b      	ldrb	r3, [r3, #24]
 800558c:	005a      	lsls	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80055be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	3b01      	subs	r3, #1
 80055cc:	035a      	lsls	r2, r3, #13
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e007      	b.n	80055e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	3b01      	subs	r3, #1
 8005604:	051a      	lsls	r2, r3, #20
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800561c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800562a:	025a      	lsls	r2, r3, #9
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6899      	ldr	r1, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	029a      	lsls	r2, r3, #10
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40012300 	.word	0x40012300
 8005668:	0f000001 	.word	0x0f000001

0800566c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005682:	2b00      	cmp	r3, #0
 8005684:	d13c      	bne.n	8005700 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d12b      	bne.n	80056f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d127      	bne.n	80056f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d119      	bne.n	80056f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0220 	bic.w	r2, r2, #32
 80056d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f043 0201 	orr.w	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7fd ff57 	bl	80035ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056fe:	e00e      	b.n	800571e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fd75 	bl	80051fc <HAL_ADC_ErrorCallback>
}
 8005712:	e004      	b.n	800571e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff fd57 	bl	80051e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	f043 0204 	orr.w	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fd4a 	bl	80051fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800578c:	4013      	ands	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	60d3      	str	r3, [r2, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <__NVIC_GetPriorityGrouping+0x18>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 0307 	and.w	r3, r3, #7
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db0b      	blt.n	80057fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f003 021f 	and.w	r2, r3, #31
 80057ec:	4907      	ldr	r1, [pc, #28]	; (800580c <__NVIC_EnableIRQ+0x38>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2001      	movs	r0, #1
 80057f6:	fa00 f202 	lsl.w	r2, r0, r2
 80057fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	e000e100 	.word	0xe000e100

08005810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db0a      	blt.n	800583a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <__NVIC_SetPriority+0x4c>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	440b      	add	r3, r1
 8005834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005838:	e00a      	b.n	8005850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4908      	ldr	r1, [pc, #32]	; (8005860 <__NVIC_SetPriority+0x50>)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3b04      	subs	r3, #4
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	440b      	add	r3, r1
 800584e:	761a      	strb	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf28      	it	cs
 8005882:	2304      	movcs	r3, #4
 8005884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3304      	adds	r3, #4
 800588a:	2b06      	cmp	r3, #6
 800588c:	d902      	bls.n	8005894 <NVIC_EncodePriority+0x30>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3b03      	subs	r3, #3
 8005892:	e000      	b.n	8005896 <NVIC_EncodePriority+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	43d9      	mvns	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	4313      	orrs	r3, r2
         );
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ff4c 	bl	8005770 <__NVIC_SetPriorityGrouping>
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058f2:	f7ff ff61 	bl	80057b8 <__NVIC_GetPriorityGrouping>
 80058f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7ff ffb1 	bl	8005864 <NVIC_EncodePriority>
 8005902:	4602      	mov	r2, r0
 8005904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff80 	bl	8005810 <__NVIC_SetPriority>
}
 8005910:	bf00      	nop
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff54 	bl	80057d4 <__NVIC_EnableIRQ>
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005940:	f7ff fb12 	bl	8004f68 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e099      	b.n	8005a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005970:	e00f      	b.n	8005992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005972:	f7ff faf9 	bl	8004f68 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b05      	cmp	r3, #5
 800597e:	d908      	bls.n	8005992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2203      	movs	r2, #3
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e078      	b.n	8005a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e8      	bne.n	8005972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4b38      	ldr	r3, [pc, #224]	; (8005a8c <HAL_DMA_Init+0x158>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d107      	bne.n	80059fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	4313      	orrs	r3, r2
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d117      	bne.n	8005a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fb01 	bl	8006040 <DMA_CheckFifoParam>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2240      	movs	r2, #64	; 0x40
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a52:	2301      	movs	r3, #1
 8005a54:	e016      	b.n	8005a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fab8 	bl	8005fd4 <DMA_CalcBaseAndBitshift>
 8005a64:	4603      	mov	r3, r0
 8005a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6c:	223f      	movs	r2, #63	; 0x3f
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	f010803f 	.word	0xf010803f

08005a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_DMA_Start_IT+0x26>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e040      	b.n	8005b38 <HAL_DMA_Start_IT+0xa8>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d12f      	bne.n	8005b2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fa4a 	bl	8005f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	223f      	movs	r2, #63	; 0x3f
 8005aea:	409a      	lsls	r2, r3
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0216 	orr.w	r2, r2, #22
 8005afe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0208 	orr.w	r2, r2, #8
 8005b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e005      	b.n	8005b36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b4e:	f7ff fa0b 	bl	8004f68 <HAL_GetTick>
 8005b52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d008      	beq.n	8005b72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2280      	movs	r2, #128	; 0x80
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e052      	b.n	8005c18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0216 	bic.w	r2, r2, #22
 8005b80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <HAL_DMA_Abort+0x62>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0208 	bic.w	r2, r2, #8
 8005bb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc2:	e013      	b.n	8005bec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bc4:	f7ff f9d0 	bl	8004f68 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d90c      	bls.n	8005bec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e015      	b.n	8005c18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e4      	bne.n	8005bc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	223f      	movs	r2, #63	; 0x3f
 8005c00:	409a      	lsls	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d004      	beq.n	8005c3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e00c      	b.n	8005c58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2205      	movs	r2, #5
 8005c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c70:	4b8e      	ldr	r3, [pc, #568]	; (8005eac <HAL_DMA_IRQHandler+0x248>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a8e      	ldr	r2, [pc, #568]	; (8005eb0 <HAL_DMA_IRQHandler+0x24c>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	0a9b      	lsrs	r3, r3, #10
 8005c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8e:	2208      	movs	r2, #8
 8005c90:	409a      	lsls	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01a      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	f043 0201 	orr.w	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d012      	beq.n	8005d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	f043 0202 	orr.w	r2, r3, #2
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d012      	beq.n	8005d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d28:	2204      	movs	r2, #4
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f043 0204 	orr.w	r2, r3, #4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	2210      	movs	r2, #16
 8005d42:	409a      	lsls	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d043      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d03c      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	2210      	movs	r2, #16
 8005d60:	409a      	lsls	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d018      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d024      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
 8005d92:	e01f      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01b      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
 8005da4:	e016      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d107      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0208 	bic.w	r2, r2, #8
 8005dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	2220      	movs	r2, #32
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 808f 	beq.w	8005f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8087 	beq.w	8005f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d136      	bne.n	8005e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0216 	bic.w	r2, r2, #22
 8005e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <HAL_DMA_IRQHandler+0x1da>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0208 	bic.w	r2, r2, #8
 8005e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e52:	223f      	movs	r2, #63	; 0x3f
 8005e54:	409a      	lsls	r2, r3
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d07e      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
        }
        return;
 8005e7a:	e079      	b.n	8005f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01d      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10d      	bne.n	8005eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d031      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	4798      	blx	r3
 8005ea8:	e02c      	b.n	8005f04 <HAL_DMA_IRQHandler+0x2a0>
 8005eaa:	bf00      	nop
 8005eac:	20000004 	.word	0x20000004
 8005eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d023      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
 8005ec4:	e01e      	b.n	8005f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10f      	bne.n	8005ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0210 	bic.w	r2, r2, #16
 8005ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d032      	beq.n	8005f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d022      	beq.n	8005f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2205      	movs	r2, #5
 8005f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d307      	bcc.n	8005f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f2      	bne.n	8005f30 <HAL_DMA_IRQHandler+0x2cc>
 8005f4a:	e000      	b.n	8005f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
 8005f6e:	e000      	b.n	8005f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f70:	bf00      	nop
    }
  }
}
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d108      	bne.n	8005fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fb6:	e007      	b.n	8005fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	60da      	str	r2, [r3, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	3b10      	subs	r3, #16
 8005fe4:	4a14      	ldr	r2, [pc, #80]	; (8006038 <DMA_CalcBaseAndBitshift+0x64>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <DMA_CalcBaseAndBitshift+0x68>)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d909      	bls.n	8006016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	659a      	str	r2, [r3, #88]	; 0x58
 8006014:	e007      	b.n	8006026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	aaaaaaab 	.word	0xaaaaaaab
 800603c:	08013668 	.word	0x08013668

08006040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d11f      	bne.n	800609a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d856      	bhi.n	800610e <DMA_CheckFifoParam+0xce>
 8006060:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <DMA_CheckFifoParam+0x28>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	08006079 	.word	0x08006079
 800606c:	0800608b 	.word	0x0800608b
 8006070:	08006079 	.word	0x08006079
 8006074:	0800610f 	.word	0x0800610f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d046      	beq.n	8006112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006088:	e043      	b.n	8006112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006092:	d140      	bne.n	8006116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006098:	e03d      	b.n	8006116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a2:	d121      	bne.n	80060e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d837      	bhi.n	800611a <DMA_CheckFifoParam+0xda>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <DMA_CheckFifoParam+0x70>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060c7 	.word	0x080060c7
 80060b8:	080060c1 	.word	0x080060c1
 80060bc:	080060d9 	.word	0x080060d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	73fb      	strb	r3, [r7, #15]
      break;
 80060c4:	e030      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d025      	beq.n	800611e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d6:	e022      	b.n	800611e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060e0:	d11f      	bne.n	8006122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060e6:	e01c      	b.n	8006122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d903      	bls.n	80060f6 <DMA_CheckFifoParam+0xb6>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d003      	beq.n	80060fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060f4:	e018      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	73fb      	strb	r3, [r7, #15]
      break;
 80060fa:	e015      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00e      	beq.n	8006126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e00b      	b.n	8006126 <DMA_CheckFifoParam+0xe6>
      break;
 800610e:	bf00      	nop
 8006110:	e00a      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      break;
 8006112:	bf00      	nop
 8006114:	e008      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      break;
 8006116:	bf00      	nop
 8006118:	e006      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      break;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      break;   
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
    }
  } 
  
  return status; 
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop

08006138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	; 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e159      	b.n	8006408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006154:	2201      	movs	r2, #1
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4013      	ands	r3, r2
 8006166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	429a      	cmp	r2, r3
 800616e:	f040 8148 	bne.w	8006402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	2b01      	cmp	r3, #1
 800617c:	d005      	beq.n	800618a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006186:	2b02      	cmp	r3, #2
 8006188:	d130      	bne.n	80061ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4013      	ands	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061c0:	2201      	movs	r2, #1
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4013      	ands	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 0201 	and.w	r2, r3, #1
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d017      	beq.n	8006228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	2203      	movs	r2, #3
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4013      	ands	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4313      	orrs	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d123      	bne.n	800627c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	08da      	lsrs	r2, r3, #3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3208      	adds	r2, #8
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	220f      	movs	r2, #15
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4013      	ands	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4313      	orrs	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	08da      	lsrs	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3208      	adds	r2, #8
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	2203      	movs	r2, #3
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 0203 	and.w	r2, r3, #3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80a2 	beq.w	8006402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	4b57      	ldr	r3, [pc, #348]	; (8006420 <HAL_GPIO_Init+0x2e8>)
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	4a56      	ldr	r2, [pc, #344]	; (8006420 <HAL_GPIO_Init+0x2e8>)
 80062c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062cc:	6453      	str	r3, [r2, #68]	; 0x44
 80062ce:	4b54      	ldr	r3, [pc, #336]	; (8006420 <HAL_GPIO_Init+0x2e8>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062da:	4a52      	ldr	r2, [pc, #328]	; (8006424 <HAL_GPIO_Init+0x2ec>)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	3302      	adds	r3, #2
 80062e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	220f      	movs	r2, #15
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a49      	ldr	r2, [pc, #292]	; (8006428 <HAL_GPIO_Init+0x2f0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d019      	beq.n	800633a <HAL_GPIO_Init+0x202>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a48      	ldr	r2, [pc, #288]	; (800642c <HAL_GPIO_Init+0x2f4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_GPIO_Init+0x1fe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a47      	ldr	r2, [pc, #284]	; (8006430 <HAL_GPIO_Init+0x2f8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00d      	beq.n	8006332 <HAL_GPIO_Init+0x1fa>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a46      	ldr	r2, [pc, #280]	; (8006434 <HAL_GPIO_Init+0x2fc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <HAL_GPIO_Init+0x1f6>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a45      	ldr	r2, [pc, #276]	; (8006438 <HAL_GPIO_Init+0x300>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <HAL_GPIO_Init+0x1f2>
 8006326:	2304      	movs	r3, #4
 8006328:	e008      	b.n	800633c <HAL_GPIO_Init+0x204>
 800632a:	2307      	movs	r3, #7
 800632c:	e006      	b.n	800633c <HAL_GPIO_Init+0x204>
 800632e:	2303      	movs	r3, #3
 8006330:	e004      	b.n	800633c <HAL_GPIO_Init+0x204>
 8006332:	2302      	movs	r3, #2
 8006334:	e002      	b.n	800633c <HAL_GPIO_Init+0x204>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_GPIO_Init+0x204>
 800633a:	2300      	movs	r3, #0
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	f002 0203 	and.w	r2, r2, #3
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	4093      	lsls	r3, r2
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4313      	orrs	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800634c:	4935      	ldr	r1, [pc, #212]	; (8006424 <HAL_GPIO_Init+0x2ec>)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	3302      	adds	r3, #2
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800635a:	4b38      	ldr	r3, [pc, #224]	; (800643c <HAL_GPIO_Init+0x304>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	43db      	mvns	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4013      	ands	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800637e:	4a2f      	ldr	r2, [pc, #188]	; (800643c <HAL_GPIO_Init+0x304>)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006384:	4b2d      	ldr	r3, [pc, #180]	; (800643c <HAL_GPIO_Init+0x304>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063a8:	4a24      	ldr	r2, [pc, #144]	; (800643c <HAL_GPIO_Init+0x304>)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <HAL_GPIO_Init+0x304>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063d2:	4a1a      	ldr	r2, [pc, #104]	; (800643c <HAL_GPIO_Init+0x304>)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <HAL_GPIO_Init+0x304>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063fc:	4a0f      	ldr	r2, [pc, #60]	; (800643c <HAL_GPIO_Init+0x304>)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3301      	adds	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b0f      	cmp	r3, #15
 800640c:	f67f aea2 	bls.w	8006154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	3724      	adds	r7, #36	; 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40023800 	.word	0x40023800
 8006424:	40013800 	.word	0x40013800
 8006428:	40020000 	.word	0x40020000
 800642c:	40020400 	.word	0x40020400
 8006430:	40020800 	.word	0x40020800
 8006434:	40020c00 	.word	0x40020c00
 8006438:	40021000 	.word	0x40021000
 800643c:	40013c00 	.word	0x40013c00

08006440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
 800644c:	4613      	mov	r3, r2
 800644e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006450:	787b      	ldrb	r3, [r7, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006456:	887a      	ldrh	r2, [r7, #2]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800645c:	e003      	b.n	8006466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800645e:	887b      	ldrh	r3, [r7, #2]
 8006460:	041a      	lsls	r2, r3, #16
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	619a      	str	r2, [r3, #24]
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800648a:	4a05      	ldr	r2, [pc, #20]	; (80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fd f876 	bl	8003584 <HAL_GPIO_EXTI_Callback>
  }
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40013c00 	.word	0x40013c00

080064a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e12b      	b.n	800670e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fd fbe4 	bl	8003c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	; 0x24
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006508:	f001 fbfc 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 800650c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4a81      	ldr	r2, [pc, #516]	; (8006718 <HAL_I2C_Init+0x274>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d807      	bhi.n	8006528 <HAL_I2C_Init+0x84>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a80      	ldr	r2, [pc, #512]	; (800671c <HAL_I2C_Init+0x278>)
 800651c:	4293      	cmp	r3, r2
 800651e:	bf94      	ite	ls
 8006520:	2301      	movls	r3, #1
 8006522:	2300      	movhi	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e006      	b.n	8006536 <HAL_I2C_Init+0x92>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a7d      	ldr	r2, [pc, #500]	; (8006720 <HAL_I2C_Init+0x27c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	bf94      	ite	ls
 8006530:	2301      	movls	r3, #1
 8006532:	2300      	movhi	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e0e7      	b.n	800670e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a78      	ldr	r2, [pc, #480]	; (8006724 <HAL_I2C_Init+0x280>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	0c9b      	lsrs	r3, r3, #18
 8006548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	4a6a      	ldr	r2, [pc, #424]	; (8006718 <HAL_I2C_Init+0x274>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d802      	bhi.n	8006578 <HAL_I2C_Init+0xd4>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	3301      	adds	r3, #1
 8006576:	e009      	b.n	800658c <HAL_I2C_Init+0xe8>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	4a69      	ldr	r2, [pc, #420]	; (8006728 <HAL_I2C_Init+0x284>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	099b      	lsrs	r3, r3, #6
 800658a:	3301      	adds	r3, #1
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	430b      	orrs	r3, r1
 8006592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800659e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	495c      	ldr	r1, [pc, #368]	; (8006718 <HAL_I2C_Init+0x274>)
 80065a8:	428b      	cmp	r3, r1
 80065aa:	d819      	bhi.n	80065e0 <HAL_I2C_Init+0x13c>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1e59      	subs	r1, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065c0:	400b      	ands	r3, r1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_I2C_Init+0x138>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1e59      	subs	r1, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80065d4:	3301      	adds	r3, #1
 80065d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065da:	e051      	b.n	8006680 <HAL_I2C_Init+0x1dc>
 80065dc:	2304      	movs	r3, #4
 80065de:	e04f      	b.n	8006680 <HAL_I2C_Init+0x1dc>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d111      	bne.n	800660c <HAL_I2C_Init+0x168>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1e58      	subs	r0, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6859      	ldr	r1, [r3, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	440b      	add	r3, r1
 80065f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fa:	3301      	adds	r3, #1
 80065fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006600:	2b00      	cmp	r3, #0
 8006602:	bf0c      	ite	eq
 8006604:	2301      	moveq	r3, #1
 8006606:	2300      	movne	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e012      	b.n	8006632 <HAL_I2C_Init+0x18e>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1e58      	subs	r0, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	0099      	lsls	r1, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006622:	3301      	adds	r3, #1
 8006624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006628:	2b00      	cmp	r3, #0
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_I2C_Init+0x196>
 8006636:	2301      	movs	r3, #1
 8006638:	e022      	b.n	8006680 <HAL_I2C_Init+0x1dc>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10e      	bne.n	8006660 <HAL_I2C_Init+0x1bc>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1e58      	subs	r0, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6859      	ldr	r1, [r3, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	440b      	add	r3, r1
 8006650:	fbb0 f3f3 	udiv	r3, r0, r3
 8006654:	3301      	adds	r3, #1
 8006656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	e00f      	b.n	8006680 <HAL_I2C_Init+0x1dc>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1e58      	subs	r0, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	0099      	lsls	r1, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	fbb0 f3f3 	udiv	r3, r0, r3
 8006676:	3301      	adds	r3, #1
 8006678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	6809      	ldr	r1, [r1, #0]
 8006684:	4313      	orrs	r3, r2
 8006686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6911      	ldr	r1, [r2, #16]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68d2      	ldr	r2, [r2, #12]
 80066ba:	4311      	orrs	r1, r2
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	000186a0 	.word	0x000186a0
 800671c:	001e847f 	.word	0x001e847f
 8006720:	003d08ff 	.word	0x003d08ff
 8006724:	431bde83 	.word	0x431bde83
 8006728:	10624dd3 	.word	0x10624dd3

0800672c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	461a      	mov	r2, r3
 800673a:	4603      	mov	r3, r0
 800673c:	817b      	strh	r3, [r7, #10]
 800673e:	460b      	mov	r3, r1
 8006740:	813b      	strh	r3, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006746:	f7fe fc0f 	bl	8004f68 <HAL_GetTick>
 800674a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b20      	cmp	r3, #32
 8006756:	f040 80d9 	bne.w	800690c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	2319      	movs	r3, #25
 8006760:	2201      	movs	r2, #1
 8006762:	496d      	ldr	r1, [pc, #436]	; (8006918 <HAL_I2C_Mem_Write+0x1ec>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fc7f 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
 8006772:	e0cc      	b.n	800690e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_I2C_Mem_Write+0x56>
 800677e:	2302      	movs	r3, #2
 8006780:	e0c5      	b.n	800690e <HAL_I2C_Mem_Write+0x1e2>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b01      	cmp	r3, #1
 8006796:	d007      	beq.n	80067a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2221      	movs	r2, #33	; 0x21
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2240      	movs	r2, #64	; 0x40
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a4d      	ldr	r2, [pc, #308]	; (800691c <HAL_I2C_Mem_Write+0x1f0>)
 80067e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067ea:	88f8      	ldrh	r0, [r7, #6]
 80067ec:	893a      	ldrh	r2, [r7, #8]
 80067ee:	8979      	ldrh	r1, [r7, #10]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4603      	mov	r3, r0
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fab6 	bl	8006d6c <I2C_RequestMemoryWrite>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d052      	beq.n	80068ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e081      	b.n	800690e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 fd00 	bl	8007214 <I2C_WaitOnTXEFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00d      	beq.n	8006836 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	2b04      	cmp	r3, #4
 8006820:	d107      	bne.n	8006832 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e06b      	b.n	800690e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	781a      	ldrb	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d11b      	bne.n	80068ac <HAL_I2C_Mem_Write+0x180>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006878:	2b00      	cmp	r3, #0
 800687a:	d017      	beq.n	80068ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1aa      	bne.n	800680a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 fcec 	bl	8007296 <I2C_WaitOnBTFFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00d      	beq.n	80068e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d107      	bne.n	80068dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e016      	b.n	800690e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
  }
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	00100002 	.word	0x00100002
 800691c:	ffff0000 	.word	0xffff0000

08006920 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08c      	sub	sp, #48	; 0x30
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	4608      	mov	r0, r1
 800692a:	4611      	mov	r1, r2
 800692c:	461a      	mov	r2, r3
 800692e:	4603      	mov	r3, r0
 8006930:	817b      	strh	r3, [r7, #10]
 8006932:	460b      	mov	r3, r1
 8006934:	813b      	strh	r3, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800693a:	f7fe fb15 	bl	8004f68 <HAL_GetTick>
 800693e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b20      	cmp	r3, #32
 800694a:	f040 8208 	bne.w	8006d5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2319      	movs	r3, #25
 8006954:	2201      	movs	r2, #1
 8006956:	497b      	ldr	r1, [pc, #492]	; (8006b44 <HAL_I2C_Mem_Read+0x224>)
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fb85 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
 8006966:	e1fb      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_I2C_Mem_Read+0x56>
 8006972:	2302      	movs	r3, #2
 8006974:	e1f4      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b01      	cmp	r3, #1
 800698a:	d007      	beq.n	800699c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2222      	movs	r2, #34	; 0x22
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2240      	movs	r2, #64	; 0x40
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4a5b      	ldr	r2, [pc, #364]	; (8006b48 <HAL_I2C_Mem_Read+0x228>)
 80069dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069de:	88f8      	ldrh	r0, [r7, #6]
 80069e0:	893a      	ldrh	r2, [r7, #8]
 80069e2:	8979      	ldrh	r1, [r7, #10]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4603      	mov	r3, r0
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fa52 	bl	8006e98 <I2C_RequestMemoryRead>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e1b0      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d113      	bne.n	8006a2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a06:	2300      	movs	r3, #0
 8006a08:	623b      	str	r3, [r7, #32]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e184      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d11b      	bne.n	8006a6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e164      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d11b      	bne.n	8006aae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a96:	2300      	movs	r3, #0
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	e144      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ac4:	e138      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	f200 80f1 	bhi.w	8006cb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d123      	bne.n	8006b20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fc1b 	bl	8007318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e139      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b1e:	e10b      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d14e      	bne.n	8006bc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4906      	ldr	r1, [pc, #24]	; (8006b4c <HAL_I2C_Mem_Read+0x22c>)
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fa98 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e10e      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
 8006b42:	bf00      	nop
 8006b44:	00100002 	.word	0x00100002
 8006b48:	ffff0000 	.word	0xffff0000
 8006b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bc4:	e0b8      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4966      	ldr	r1, [pc, #408]	; (8006d68 <HAL_I2C_Mem_Read+0x448>)
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fa49 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0bf      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	2200      	movs	r2, #0
 8006c2a:	494f      	ldr	r1, [pc, #316]	; (8006d68 <HAL_I2C_Mem_Read+0x448>)
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fa1b 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e091      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cb0:	e042      	b.n	8006d38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fb2e 	bl	8007318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e04c      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d118      	bne.n	8006d38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f47f aec2 	bne.w	8006ac6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e000      	b.n	8006d60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
  }
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3728      	adds	r7, #40	; 0x28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	00010004 	.word	0x00010004

08006d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	813b      	strh	r3, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f960 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00d      	beq.n	8006dca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbc:	d103      	bne.n	8006dc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e05f      	b.n	8006e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dca:	897b      	ldrh	r3, [r7, #10]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	492d      	ldr	r1, [pc, #180]	; (8006e94 <I2C_RequestMemoryWrite+0x128>)
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f998 	bl	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e04c      	b.n	8006e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e08:	6a39      	ldr	r1, [r7, #32]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fa02 	bl	8007214 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00d      	beq.n	8006e32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d107      	bne.n	8006e2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e02b      	b.n	8006e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d105      	bne.n	8006e44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e38:	893b      	ldrh	r3, [r7, #8]
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	611a      	str	r2, [r3, #16]
 8006e42:	e021      	b.n	8006e88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e54:	6a39      	ldr	r1, [r7, #32]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f9dc 	bl	8007214 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d107      	bne.n	8006e7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e005      	b.n	8006e8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e7e:	893b      	ldrh	r3, [r7, #8]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	00010002 	.word	0x00010002

08006e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	817b      	strh	r3, [r7, #10]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	813b      	strh	r3, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f8c2 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00d      	beq.n	8006f06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef8:	d103      	bne.n	8006f02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e0aa      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f06:	897b      	ldrh	r3, [r7, #10]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	4952      	ldr	r1, [pc, #328]	; (8007064 <I2C_RequestMemoryRead+0x1cc>)
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f8fa 	bl	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e097      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f44:	6a39      	ldr	r1, [r7, #32]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f964 	bl	8007214 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00d      	beq.n	8006f6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d107      	bne.n	8006f6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e076      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d105      	bne.n	8006f80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f74:	893b      	ldrh	r3, [r7, #8]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	611a      	str	r2, [r3, #16]
 8006f7e:	e021      	b.n	8006fc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f80:	893b      	ldrh	r3, [r7, #8]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f90:	6a39      	ldr	r1, [r7, #32]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f93e 	bl	8007214 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d107      	bne.n	8006fb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e050      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fba:	893b      	ldrh	r3, [r7, #8]
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc6:	6a39      	ldr	r1, [r7, #32]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f923 	bl	8007214 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d107      	bne.n	8006fec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e035      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2200      	movs	r2, #0
 8007008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f82b 	bl	8007068 <I2C_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d103      	bne.n	8007030 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e013      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007034:	897b      	ldrh	r3, [r7, #10]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	b2da      	uxtb	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	6a3a      	ldr	r2, [r7, #32]
 8007048:	4906      	ldr	r1, [pc, #24]	; (8007064 <I2C_RequestMemoryRead+0x1cc>)
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f863 	bl	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	00010002 	.word	0x00010002

08007068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007078:	e025      	b.n	80070c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d021      	beq.n	80070c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007082:	f7fd ff71 	bl	8004f68 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d116      	bne.n	80070c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f043 0220 	orr.w	r2, r3, #32
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e023      	b.n	800710e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10d      	bne.n	80070ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	43da      	mvns	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	e00c      	b.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	43da      	mvns	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf0c      	ite	eq
 80070fe:	2301      	moveq	r3, #1
 8007100:	2300      	movne	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	429a      	cmp	r2, r3
 800710a:	d0b6      	beq.n	800707a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007124:	e051      	b.n	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007134:	d123      	bne.n	800717e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007144:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800714e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f043 0204 	orr.w	r2, r3, #4
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e046      	b.n	800720c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d021      	beq.n	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fd feef 	bl	8004f68 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d116      	bne.n	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f043 0220 	orr.w	r2, r3, #32
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e020      	b.n	800720c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10c      	bne.n	80071ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	43da      	mvns	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4013      	ands	r3, r2
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bf14      	ite	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	2300      	moveq	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	e00b      	b.n	8007206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	43da      	mvns	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4013      	ands	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d18d      	bne.n	8007126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007220:	e02d      	b.n	800727e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f8ce 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e02d      	b.n	800728e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d021      	beq.n	800727e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723a:	f7fd fe95 	bl	8004f68 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d116      	bne.n	800727e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f043 0220 	orr.w	r2, r3, #32
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e007      	b.n	800728e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007288:	2b80      	cmp	r3, #128	; 0x80
 800728a:	d1ca      	bne.n	8007222 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072a2:	e02d      	b.n	8007300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f88d 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e02d      	b.n	8007310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d021      	beq.n	8007300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072bc:	f7fd fe54 	bl	8004f68 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d302      	bcc.n	80072d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d116      	bne.n	8007300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e007      	b.n	8007310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b04      	cmp	r3, #4
 800730c:	d1ca      	bne.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007324:	e042      	b.n	80073ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b10      	cmp	r3, #16
 8007332:	d119      	bne.n	8007368 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0210 	mvn.w	r2, #16
 800733c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e029      	b.n	80073bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007368:	f7fd fdfe 	bl	8004f68 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d116      	bne.n	80073ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e007      	b.n	80073bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d1b5      	bne.n	8007326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073da:	d11b      	bne.n	8007414 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f043 0204 	orr.w	r2, r3, #4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e267      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d075      	beq.n	800752e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007442:	4b88      	ldr	r3, [pc, #544]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b04      	cmp	r3, #4
 800744c:	d00c      	beq.n	8007468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800744e:	4b85      	ldr	r3, [pc, #532]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007456:	2b08      	cmp	r3, #8
 8007458:	d112      	bne.n	8007480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800745a:	4b82      	ldr	r3, [pc, #520]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007466:	d10b      	bne.n	8007480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007468:	4b7e      	ldr	r3, [pc, #504]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d05b      	beq.n	800752c <HAL_RCC_OscConfig+0x108>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d157      	bne.n	800752c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e242      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007488:	d106      	bne.n	8007498 <HAL_RCC_OscConfig+0x74>
 800748a:	4b76      	ldr	r3, [pc, #472]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a75      	ldr	r2, [pc, #468]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	e01d      	b.n	80074d4 <HAL_RCC_OscConfig+0xb0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a0:	d10c      	bne.n	80074bc <HAL_RCC_OscConfig+0x98>
 80074a2:	4b70      	ldr	r3, [pc, #448]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a6f      	ldr	r2, [pc, #444]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	4b6d      	ldr	r3, [pc, #436]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a6c      	ldr	r2, [pc, #432]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	e00b      	b.n	80074d4 <HAL_RCC_OscConfig+0xb0>
 80074bc:	4b69      	ldr	r3, [pc, #420]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a68      	ldr	r2, [pc, #416]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4b66      	ldr	r3, [pc, #408]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a65      	ldr	r2, [pc, #404]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d013      	beq.n	8007504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074dc:	f7fd fd44 	bl	8004f68 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074e4:	f7fd fd40 	bl	8004f68 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b64      	cmp	r3, #100	; 0x64
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e207      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f6:	4b5b      	ldr	r3, [pc, #364]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0xc0>
 8007502:	e014      	b.n	800752e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007504:	f7fd fd30 	bl	8004f68 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800750c:	f7fd fd2c 	bl	8004f68 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b64      	cmp	r3, #100	; 0x64
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e1f3      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800751e:	4b51      	ldr	r3, [pc, #324]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0xe8>
 800752a:	e000      	b.n	800752e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800752c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d063      	beq.n	8007602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800753a:	4b4a      	ldr	r3, [pc, #296]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007546:	4b47      	ldr	r3, [pc, #284]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800754e:	2b08      	cmp	r3, #8
 8007550:	d11c      	bne.n	800758c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007552:	4b44      	ldr	r3, [pc, #272]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d116      	bne.n	800758c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800755e:	4b41      	ldr	r3, [pc, #260]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_RCC_OscConfig+0x152>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e1c7      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007576:	4b3b      	ldr	r3, [pc, #236]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4937      	ldr	r1, [pc, #220]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007586:	4313      	orrs	r3, r2
 8007588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800758a:	e03a      	b.n	8007602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d020      	beq.n	80075d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007594:	4b34      	ldr	r3, [pc, #208]	; (8007668 <HAL_RCC_OscConfig+0x244>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fd fce5 	bl	8004f68 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075a2:	f7fd fce1 	bl	8004f68 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e1a8      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b4:	4b2b      	ldr	r3, [pc, #172]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c0:	4b28      	ldr	r3, [pc, #160]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4925      	ldr	r1, [pc, #148]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	600b      	str	r3, [r1, #0]
 80075d4:	e015      	b.n	8007602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <HAL_RCC_OscConfig+0x244>)
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075dc:	f7fd fcc4 	bl	8004f68 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e4:	f7fd fcc0 	bl	8004f68 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e187      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075f6:	4b1b      	ldr	r3, [pc, #108]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f0      	bne.n	80075e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d036      	beq.n	800767c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <HAL_RCC_OscConfig+0x248>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761c:	f7fd fca4 	bl	8004f68 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007624:	f7fd fca0 	bl	8004f68 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e167      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <HAL_RCC_OscConfig+0x240>)
 8007638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f0      	beq.n	8007624 <HAL_RCC_OscConfig+0x200>
 8007642:	e01b      	b.n	800767c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007644:	4b09      	ldr	r3, [pc, #36]	; (800766c <HAL_RCC_OscConfig+0x248>)
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800764a:	f7fd fc8d 	bl	8004f68 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007650:	e00e      	b.n	8007670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007652:	f7fd fc89 	bl	8004f68 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d907      	bls.n	8007670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e150      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
 8007664:	40023800 	.word	0x40023800
 8007668:	42470000 	.word	0x42470000
 800766c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007670:	4b88      	ldr	r3, [pc, #544]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1ea      	bne.n	8007652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8097 	beq.w	80077b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800768e:	4b81      	ldr	r3, [pc, #516]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10f      	bne.n	80076ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800769a:	2300      	movs	r3, #0
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	4b7d      	ldr	r3, [pc, #500]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	4a7c      	ldr	r2, [pc, #496]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6413      	str	r3, [r2, #64]	; 0x40
 80076aa:	4b7a      	ldr	r3, [pc, #488]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b2:	60bb      	str	r3, [r7, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076b6:	2301      	movs	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ba:	4b77      	ldr	r3, [pc, #476]	; (8007898 <HAL_RCC_OscConfig+0x474>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d118      	bne.n	80076f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076c6:	4b74      	ldr	r3, [pc, #464]	; (8007898 <HAL_RCC_OscConfig+0x474>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a73      	ldr	r2, [pc, #460]	; (8007898 <HAL_RCC_OscConfig+0x474>)
 80076cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076d2:	f7fd fc49 	bl	8004f68 <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076da:	f7fd fc45 	bl	8004f68 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e10c      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ec:	4b6a      	ldr	r3, [pc, #424]	; (8007898 <HAL_RCC_OscConfig+0x474>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0f0      	beq.n	80076da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d106      	bne.n	800770e <HAL_RCC_OscConfig+0x2ea>
 8007700:	4b64      	ldr	r3, [pc, #400]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007704:	4a63      	ldr	r2, [pc, #396]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007706:	f043 0301 	orr.w	r3, r3, #1
 800770a:	6713      	str	r3, [r2, #112]	; 0x70
 800770c:	e01c      	b.n	8007748 <HAL_RCC_OscConfig+0x324>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b05      	cmp	r3, #5
 8007714:	d10c      	bne.n	8007730 <HAL_RCC_OscConfig+0x30c>
 8007716:	4b5f      	ldr	r3, [pc, #380]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	4a5e      	ldr	r2, [pc, #376]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 800771c:	f043 0304 	orr.w	r3, r3, #4
 8007720:	6713      	str	r3, [r2, #112]	; 0x70
 8007722:	4b5c      	ldr	r3, [pc, #368]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007726:	4a5b      	ldr	r2, [pc, #364]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	6713      	str	r3, [r2, #112]	; 0x70
 800772e:	e00b      	b.n	8007748 <HAL_RCC_OscConfig+0x324>
 8007730:	4b58      	ldr	r3, [pc, #352]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007734:	4a57      	ldr	r2, [pc, #348]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	6713      	str	r3, [r2, #112]	; 0x70
 800773c:	4b55      	ldr	r3, [pc, #340]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007740:	4a54      	ldr	r2, [pc, #336]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007742:	f023 0304 	bic.w	r3, r3, #4
 8007746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d015      	beq.n	800777c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007750:	f7fd fc0a 	bl	8004f68 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007756:	e00a      	b.n	800776e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007758:	f7fd fc06 	bl	8004f68 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	f241 3288 	movw	r2, #5000	; 0x1388
 8007766:	4293      	cmp	r3, r2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e0cb      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776e:	4b49      	ldr	r3, [pc, #292]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0ee      	beq.n	8007758 <HAL_RCC_OscConfig+0x334>
 800777a:	e014      	b.n	80077a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800777c:	f7fd fbf4 	bl	8004f68 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007782:	e00a      	b.n	800779a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007784:	f7fd fbf0 	bl	8004f68 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e0b5      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800779a:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ee      	bne.n	8007784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d105      	bne.n	80077b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ac:	4b39      	ldr	r3, [pc, #228]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	4a38      	ldr	r2, [pc, #224]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80077b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80a1 	beq.w	8007904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077c2:	4b34      	ldr	r3, [pc, #208]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 030c 	and.w	r3, r3, #12
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d05c      	beq.n	8007888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d141      	bne.n	800785a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077d6:	4b31      	ldr	r3, [pc, #196]	; (800789c <HAL_RCC_OscConfig+0x478>)
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077dc:	f7fd fbc4 	bl	8004f68 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077e4:	f7fd fbc0 	bl	8004f68 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e087      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077f6:	4b27      	ldr	r3, [pc, #156]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f0      	bne.n	80077e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69da      	ldr	r2, [r3, #28]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	019b      	lsls	r3, r3, #6
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	3b01      	subs	r3, #1
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	061b      	lsls	r3, r3, #24
 8007826:	491b      	ldr	r1, [pc, #108]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 8007828:	4313      	orrs	r3, r2
 800782a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800782c:	4b1b      	ldr	r3, [pc, #108]	; (800789c <HAL_RCC_OscConfig+0x478>)
 800782e:	2201      	movs	r2, #1
 8007830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007832:	f7fd fb99 	bl	8004f68 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007838:	e008      	b.n	800784c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800783a:	f7fd fb95 	bl	8004f68 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e05c      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800784c:	4b11      	ldr	r3, [pc, #68]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0f0      	beq.n	800783a <HAL_RCC_OscConfig+0x416>
 8007858:	e054      	b.n	8007904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <HAL_RCC_OscConfig+0x478>)
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007860:	f7fd fb82 	bl	8004f68 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007868:	f7fd fb7e 	bl	8004f68 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e045      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <HAL_RCC_OscConfig+0x470>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f0      	bne.n	8007868 <HAL_RCC_OscConfig+0x444>
 8007886:	e03d      	b.n	8007904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d107      	bne.n	80078a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e038      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
 8007894:	40023800 	.word	0x40023800
 8007898:	40007000 	.word	0x40007000
 800789c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <HAL_RCC_OscConfig+0x4ec>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d028      	beq.n	8007900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d121      	bne.n	8007900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d11a      	bne.n	8007900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078d0:	4013      	ands	r3, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078d8:	4293      	cmp	r3, r2
 80078da:	d111      	bne.n	8007900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	3b01      	subs	r3, #1
 80078ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d107      	bne.n	8007900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d001      	beq.n	8007904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800

08007914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0cc      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007928:	4b68      	ldr	r3, [pc, #416]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d90c      	bls.n	8007950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007936:	4b65      	ldr	r3, [pc, #404]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	4b63      	ldr	r3, [pc, #396]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0b8      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d020      	beq.n	800799e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007968:	4b59      	ldr	r3, [pc, #356]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	4a58      	ldr	r2, [pc, #352]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800796e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007980:	4b53      	ldr	r3, [pc, #332]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	4a52      	ldr	r2, [pc, #328]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800798a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800798c:	4b50      	ldr	r3, [pc, #320]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	494d      	ldr	r1, [pc, #308]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800799a:	4313      	orrs	r3, r2
 800799c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d044      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d107      	bne.n	80079c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b2:	4b47      	ldr	r3, [pc, #284]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d119      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e07f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d003      	beq.n	80079d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d107      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079d2:	4b3f      	ldr	r3, [pc, #252]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e06f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e2:	4b3b      	ldr	r3, [pc, #236]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e067      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079f2:	4b37      	ldr	r3, [pc, #220]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f023 0203 	bic.w	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	4934      	ldr	r1, [pc, #208]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a04:	f7fd fab0 	bl	8004f68 <HAL_GetTick>
 8007a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a0a:	e00a      	b.n	8007a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a0c:	f7fd faac 	bl	8004f68 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e04f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a22:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 020c 	and.w	r2, r3, #12
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d1eb      	bne.n	8007a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a34:	4b25      	ldr	r3, [pc, #148]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d20c      	bcs.n	8007a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a42:	4b22      	ldr	r3, [pc, #136]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d001      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e032      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a68:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4916      	ldr	r1, [pc, #88]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	490e      	ldr	r1, [pc, #56]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a9a:	f000 f821 	bl	8007ae0 <HAL_RCC_GetSysClockFreq>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8007aac:	5ccb      	ldrb	r3, [r1, r3]
 8007aae:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab2:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <HAL_RCC_ClockConfig+0x1c8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fc fdac 	bl	8004618 <HAL_InitTick>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40023c00 	.word	0x40023c00
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	08013650 	.word	0x08013650
 8007ad8:	20000004 	.word	0x20000004
 8007adc:	20000008 	.word	0x20000008

08007ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ae4:	b094      	sub	sp, #80	; 0x50
 8007ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	647b      	str	r3, [r7, #68]	; 0x44
 8007aec:	2300      	movs	r3, #0
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	2300      	movs	r3, #0
 8007af2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007af8:	4b79      	ldr	r3, [pc, #484]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 030c 	and.w	r3, r3, #12
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d00d      	beq.n	8007b20 <HAL_RCC_GetSysClockFreq+0x40>
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	f200 80e1 	bhi.w	8007ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_RCC_GetSysClockFreq+0x34>
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d003      	beq.n	8007b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8007b12:	e0db      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b14:	4b73      	ldr	r3, [pc, #460]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007b18:	e0db      	b.n	8007cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b1a:	4b73      	ldr	r3, [pc, #460]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b1e:	e0d8      	b.n	8007cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b20:	4b6f      	ldr	r3, [pc, #444]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b2a:	4b6d      	ldr	r3, [pc, #436]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d063      	beq.n	8007bfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b36:	4b6a      	ldr	r3, [pc, #424]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b48:	633b      	str	r3, [r7, #48]	; 0x30
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007b52:	4622      	mov	r2, r4
 8007b54:	462b      	mov	r3, r5
 8007b56:	f04f 0000 	mov.w	r0, #0
 8007b5a:	f04f 0100 	mov.w	r1, #0
 8007b5e:	0159      	lsls	r1, r3, #5
 8007b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b64:	0150      	lsls	r0, r2, #5
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	1a51      	subs	r1, r2, r1
 8007b6e:	6139      	str	r1, [r7, #16]
 8007b70:	4629      	mov	r1, r5
 8007b72:	eb63 0301 	sbc.w	r3, r3, r1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b84:	4659      	mov	r1, fp
 8007b86:	018b      	lsls	r3, r1, #6
 8007b88:	4651      	mov	r1, sl
 8007b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b8e:	4651      	mov	r1, sl
 8007b90:	018a      	lsls	r2, r1, #6
 8007b92:	4651      	mov	r1, sl
 8007b94:	ebb2 0801 	subs.w	r8, r2, r1
 8007b98:	4659      	mov	r1, fp
 8007b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bb2:	4690      	mov	r8, r2
 8007bb4:	4699      	mov	r9, r3
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	eb18 0303 	adds.w	r3, r8, r3
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	eb49 0303 	adc.w	r3, r9, r3
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	024b      	lsls	r3, r1, #9
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007bdc:	4621      	mov	r1, r4
 8007bde:	024a      	lsls	r2, r1, #9
 8007be0:	4610      	mov	r0, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be6:	2200      	movs	r2, #0
 8007be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bf0:	f7f9 f862 	bl	8000cb8 <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bfc:	e058      	b.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bfe:	4b38      	ldr	r3, [pc, #224]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	099b      	lsrs	r3, r3, #6
 8007c04:	2200      	movs	r2, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	4611      	mov	r1, r2
 8007c0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c0e:	623b      	str	r3, [r7, #32]
 8007c10:	2300      	movs	r3, #0
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
 8007c14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	f04f 0000 	mov.w	r0, #0
 8007c20:	f04f 0100 	mov.w	r1, #0
 8007c24:	0159      	lsls	r1, r3, #5
 8007c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c2a:	0150      	lsls	r0, r2, #5
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4641      	mov	r1, r8
 8007c32:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c36:	4649      	mov	r1, r9
 8007c38:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007c48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007c4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007c50:	ebb2 040a 	subs.w	r4, r2, sl
 8007c54:	eb63 050b 	sbc.w	r5, r3, fp
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	00eb      	lsls	r3, r5, #3
 8007c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c66:	00e2      	lsls	r2, r4, #3
 8007c68:	4614      	mov	r4, r2
 8007c6a:	461d      	mov	r5, r3
 8007c6c:	4643      	mov	r3, r8
 8007c6e:	18e3      	adds	r3, r4, r3
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	464b      	mov	r3, r9
 8007c74:	eb45 0303 	adc.w	r3, r5, r3
 8007c78:	607b      	str	r3, [r7, #4]
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c86:	4629      	mov	r1, r5
 8007c88:	028b      	lsls	r3, r1, #10
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c90:	4621      	mov	r1, r4
 8007c92:	028a      	lsls	r2, r1, #10
 8007c94:	4610      	mov	r0, r2
 8007c96:	4619      	mov	r1, r3
 8007c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	61fa      	str	r2, [r7, #28]
 8007ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ca4:	f7f9 f808 	bl	8000cb8 <__aeabi_uldivmod>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4613      	mov	r3, r2
 8007cae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	0c1b      	lsrs	r3, r3, #16
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007cca:	e002      	b.n	8007cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007cce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3750      	adds	r7, #80	; 0x50
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cde:	bf00      	nop
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	00f42400 	.word	0x00f42400
 8007ce8:	007a1200 	.word	0x007a1200

08007cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cf0:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000004 	.word	0x20000004

08007d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d08:	f7ff fff0 	bl	8007cec <HAL_RCC_GetHCLKFreq>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	0a9b      	lsrs	r3, r3, #10
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	4903      	ldr	r1, [pc, #12]	; (8007d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d1a:	5ccb      	ldrb	r3, [r1, r3]
 8007d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40023800 	.word	0x40023800
 8007d28:	08013660 	.word	0x08013660

08007d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d30:	f7ff ffdc 	bl	8007cec <HAL_RCC_GetHCLKFreq>
 8007d34:	4602      	mov	r2, r0
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	0b5b      	lsrs	r3, r3, #13
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	4903      	ldr	r1, [pc, #12]	; (8007d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d42:	5ccb      	ldrb	r3, [r1, r3]
 8007d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	08013660 	.word	0x08013660

08007d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220f      	movs	r2, #15
 8007d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d64:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <HAL_RCC_GetClockConfig+0x5c>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0203 	and.w	r2, r3, #3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d70:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <HAL_RCC_GetClockConfig+0x5c>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d7c:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <HAL_RCC_GetClockConfig+0x5c>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007d88:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_RCC_GetClockConfig+0x5c>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	08db      	lsrs	r3, r3, #3
 8007d8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <HAL_RCC_GetClockConfig+0x60>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0207 	and.w	r2, r3, #7
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	601a      	str	r2, [r3, #0]
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40023800 	.word	0x40023800
 8007db4:	40023c00 	.word	0x40023c00

08007db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e041      	b.n	8007e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fc fee2 	bl	8004ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f000 fd12 	bl	8008820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d001      	beq.n	8007e70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e03c      	b.n	8007eea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <HAL_TIM_Base_Start+0xa0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d018      	beq.n	8007eb4 <HAL_TIM_Base_Start+0x5c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8a:	d013      	beq.n	8007eb4 <HAL_TIM_Base_Start+0x5c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1a      	ldr	r2, [pc, #104]	; (8007efc <HAL_TIM_Base_Start+0xa4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00e      	beq.n	8007eb4 <HAL_TIM_Base_Start+0x5c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <HAL_TIM_Base_Start+0xa8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d009      	beq.n	8007eb4 <HAL_TIM_Base_Start+0x5c>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <HAL_TIM_Base_Start+0xac>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIM_Base_Start+0x5c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a16      	ldr	r2, [pc, #88]	; (8007f08 <HAL_TIM_Base_Start+0xb0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d111      	bne.n	8007ed8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d010      	beq.n	8007ee8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0201 	orr.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed6:	e007      	b.n	8007ee8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40000400 	.word	0x40000400
 8007f00:	40000800 	.word	0x40000800
 8007f04:	40000c00 	.word	0x40000c00
 8007f08:	40014000 	.word	0x40014000

08007f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d001      	beq.n	8007f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e044      	b.n	8007fae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1e      	ldr	r2, [pc, #120]	; (8007fbc <HAL_TIM_Base_Start_IT+0xb0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d018      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0x6c>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4e:	d013      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0x6c>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00e      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0x6c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d009      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0x6c>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a17      	ldr	r2, [pc, #92]	; (8007fc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0x6c>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a16      	ldr	r2, [pc, #88]	; (8007fcc <HAL_TIM_Base_Start_IT+0xc0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d111      	bne.n	8007f9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b06      	cmp	r3, #6
 8007f88:	d010      	beq.n	8007fac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9a:	e007      	b.n	8007fac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40014000 	.word	0x40014000

08007fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e041      	b.n	8008066 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f839 	bl	800806e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f000 fc06 	bl	8008820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <HAL_TIM_PWM_Start+0x24>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	bf14      	ite	ne
 80080a0:	2301      	movne	r3, #1
 80080a2:	2300      	moveq	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	e022      	b.n	80080ee <HAL_TIM_PWM_Start+0x6a>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d109      	bne.n	80080c2 <HAL_TIM_PWM_Start+0x3e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	bf14      	ite	ne
 80080ba:	2301      	movne	r3, #1
 80080bc:	2300      	moveq	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	e015      	b.n	80080ee <HAL_TIM_PWM_Start+0x6a>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d109      	bne.n	80080dc <HAL_TIM_PWM_Start+0x58>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	e008      	b.n	80080ee <HAL_TIM_PWM_Start+0x6a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e068      	b.n	80081c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <HAL_TIM_PWM_Start+0x82>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008104:	e013      	b.n	800812e <HAL_TIM_PWM_Start+0xaa>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b04      	cmp	r3, #4
 800810a:	d104      	bne.n	8008116 <HAL_TIM_PWM_Start+0x92>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008114:	e00b      	b.n	800812e <HAL_TIM_PWM_Start+0xaa>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b08      	cmp	r3, #8
 800811a:	d104      	bne.n	8008126 <HAL_TIM_PWM_Start+0xa2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008124:	e003      	b.n	800812e <HAL_TIM_PWM_Start+0xaa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2201      	movs	r2, #1
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fe18 	bl	8008d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a23      	ldr	r2, [pc, #140]	; (80081d0 <HAL_TIM_PWM_Start+0x14c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d107      	bne.n	8008156 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1d      	ldr	r2, [pc, #116]	; (80081d0 <HAL_TIM_PWM_Start+0x14c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d018      	beq.n	8008192 <HAL_TIM_PWM_Start+0x10e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008168:	d013      	beq.n	8008192 <HAL_TIM_PWM_Start+0x10e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a19      	ldr	r2, [pc, #100]	; (80081d4 <HAL_TIM_PWM_Start+0x150>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00e      	beq.n	8008192 <HAL_TIM_PWM_Start+0x10e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <HAL_TIM_PWM_Start+0x154>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d009      	beq.n	8008192 <HAL_TIM_PWM_Start+0x10e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a16      	ldr	r2, [pc, #88]	; (80081dc <HAL_TIM_PWM_Start+0x158>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d004      	beq.n	8008192 <HAL_TIM_PWM_Start+0x10e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a14      	ldr	r2, [pc, #80]	; (80081e0 <HAL_TIM_PWM_Start+0x15c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d111      	bne.n	80081b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b06      	cmp	r3, #6
 80081a2:	d010      	beq.n	80081c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0201 	orr.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b4:	e007      	b.n	80081c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0201 	orr.w	r2, r2, #1
 80081c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40010000 	.word	0x40010000
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800
 80081dc:	40000c00 	.word	0x40000c00
 80081e0:	40014000 	.word	0x40014000

080081e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fdb8 	bl	8008d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a29      	ldr	r2, [pc, #164]	; (80082a8 <HAL_TIM_PWM_Stop+0xc4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d117      	bne.n	8008236 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6a1a      	ldr	r2, [r3, #32]
 800820c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008210:	4013      	ands	r3, r2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10f      	bne.n	8008236 <HAL_TIM_PWM_Stop+0x52>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6a1a      	ldr	r2, [r3, #32]
 800821c:	f240 4344 	movw	r3, #1092	; 0x444
 8008220:	4013      	ands	r3, r2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <HAL_TIM_PWM_Stop+0x52>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6a1a      	ldr	r2, [r3, #32]
 800823c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008240:	4013      	ands	r3, r2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10f      	bne.n	8008266 <HAL_TIM_PWM_Stop+0x82>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	f240 4344 	movw	r3, #1092	; 0x444
 8008250:	4013      	ands	r3, r2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d107      	bne.n	8008266 <HAL_TIM_PWM_Stop+0x82>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0201 	bic.w	r2, r2, #1
 8008264:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <HAL_TIM_PWM_Stop+0x92>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008274:	e013      	b.n	800829e <HAL_TIM_PWM_Stop+0xba>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b04      	cmp	r3, #4
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Stop+0xa2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008284:	e00b      	b.n	800829e <HAL_TIM_PWM_Stop+0xba>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d104      	bne.n	8008296 <HAL_TIM_PWM_Stop+0xb2>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008294:	e003      	b.n	800829e <HAL_TIM_PWM_Stop+0xba>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40010000 	.word	0x40010000

080082ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d122      	bne.n	8008308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d11b      	bne.n	8008308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0202 	mvn.w	r2, #2
 80082d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa77 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 80082f4:	e005      	b.n	8008302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa69 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa7a 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b04      	cmp	r3, #4
 8008314:	d122      	bne.n	800835c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b04      	cmp	r3, #4
 8008322:	d11b      	bne.n	800835c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0204 	mvn.w	r2, #4
 800832c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa4d 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 8008348:	e005      	b.n	8008356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa3f 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fa50 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b08      	cmp	r3, #8
 8008368:	d122      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d11b      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0208 	mvn.w	r2, #8
 8008380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2204      	movs	r2, #4
 8008386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa23 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 800839c:	e005      	b.n	80083aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa15 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa26 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b10      	cmp	r3, #16
 80083bc:	d122      	bne.n	8008404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d11b      	bne.n	8008404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0210 	mvn.w	r2, #16
 80083d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2208      	movs	r2, #8
 80083da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9f9 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 80083f0:	e005      	b.n	80083fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9eb 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f9fc 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0201 	mvn.w	r2, #1
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fb fd38 	bl	8003ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d10e      	bne.n	800845c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008448:	2b80      	cmp	r3, #128	; 0x80
 800844a:	d107      	bne.n	800845c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fd26 	bl	8008ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d10e      	bne.n	8008488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d107      	bne.n	8008488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9c1 	bl	800880a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d10e      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d107      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0220 	mvn.w	r2, #32
 80084ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fcf0 	bl	8008e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0ae      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b0c      	cmp	r3, #12
 80084e6:	f200 809f 	bhi.w	8008628 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008525 	.word	0x08008525
 80084f4:	08008629 	.word	0x08008629
 80084f8:	08008629 	.word	0x08008629
 80084fc:	08008629 	.word	0x08008629
 8008500:	08008565 	.word	0x08008565
 8008504:	08008629 	.word	0x08008629
 8008508:	08008629 	.word	0x08008629
 800850c:	08008629 	.word	0x08008629
 8008510:	080085a7 	.word	0x080085a7
 8008514:	08008629 	.word	0x08008629
 8008518:	08008629 	.word	0x08008629
 800851c:	08008629 	.word	0x08008629
 8008520:	080085e7 	.word	0x080085e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f9f8 	bl	8008920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0208 	orr.w	r2, r2, #8
 800853e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0204 	bic.w	r2, r2, #4
 800854e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6999      	ldr	r1, [r3, #24]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	619a      	str	r2, [r3, #24]
      break;
 8008562:	e064      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fa3e 	bl	80089ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6999      	ldr	r1, [r3, #24]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	619a      	str	r2, [r3, #24]
      break;
 80085a4:	e043      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fa89 	bl	8008ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0208 	orr.w	r2, r2, #8
 80085c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0204 	bic.w	r2, r2, #4
 80085d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69d9      	ldr	r1, [r3, #28]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
      break;
 80085e4:	e023      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fad3 	bl	8008b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69d9      	ldr	r1, [r3, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	021a      	lsls	r2, r3, #8
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	61da      	str	r2, [r3, #28]
      break;
 8008626:	e002      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_TIM_ConfigClockSource+0x1c>
 8008658:	2302      	movs	r3, #2
 800865a:	e0b4      	b.n	80087c6 <HAL_TIM_ConfigClockSource+0x186>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800867a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008694:	d03e      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0xd4>
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	f200 8087 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a2:	f000 8086 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x172>
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086aa:	d87f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b70      	cmp	r3, #112	; 0x70
 80086ae:	d01a      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0xa6>
 80086b0:	2b70      	cmp	r3, #112	; 0x70
 80086b2:	d87b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b60      	cmp	r3, #96	; 0x60
 80086b6:	d050      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x11a>
 80086b8:	2b60      	cmp	r3, #96	; 0x60
 80086ba:	d877      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	d03c      	beq.n	800873a <HAL_TIM_ConfigClockSource+0xfa>
 80086c0:	2b50      	cmp	r3, #80	; 0x50
 80086c2:	d873      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d058      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x13a>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d86f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b30      	cmp	r3, #48	; 0x30
 80086ce:	d064      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086d0:	2b30      	cmp	r3, #48	; 0x30
 80086d2:	d86b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d060      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d867      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d05c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086e0:	2b10      	cmp	r3, #16
 80086e2:	d05a      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086e4:	e062      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6899      	ldr	r1, [r3, #8]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f000 fb19 	bl	8008d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	609a      	str	r2, [r3, #8]
      break;
 8008712:	e04f      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f000 fb02 	bl	8008d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008736:	609a      	str	r2, [r3, #8]
      break;
 8008738:	e03c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6859      	ldr	r1, [r3, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	461a      	mov	r2, r3
 8008748:	f000 fa76 	bl	8008c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2150      	movs	r1, #80	; 0x50
 8008752:	4618      	mov	r0, r3
 8008754:	f000 facf 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008758:	e02c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fa95 	bl	8008c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2160      	movs	r1, #96	; 0x60
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fabf 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008778:	e01c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fa56 	bl	8008c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2140      	movs	r1, #64	; 0x40
 8008792:	4618      	mov	r0, r3
 8008794:	f000 faaf 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008798:	e00c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f000 faa6 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 80087aa:	e003      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
      break;
 80087b0:	e000      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
	...

08008820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a34      	ldr	r2, [pc, #208]	; (8008904 <TIM_Base_SetConfig+0xe4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00f      	beq.n	8008858 <TIM_Base_SetConfig+0x38>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d00b      	beq.n	8008858 <TIM_Base_SetConfig+0x38>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a31      	ldr	r2, [pc, #196]	; (8008908 <TIM_Base_SetConfig+0xe8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d007      	beq.n	8008858 <TIM_Base_SetConfig+0x38>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a30      	ldr	r2, [pc, #192]	; (800890c <TIM_Base_SetConfig+0xec>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_Base_SetConfig+0x38>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a2f      	ldr	r2, [pc, #188]	; (8008910 <TIM_Base_SetConfig+0xf0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d108      	bne.n	800886a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a25      	ldr	r2, [pc, #148]	; (8008904 <TIM_Base_SetConfig+0xe4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d01b      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008878:	d017      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a22      	ldr	r2, [pc, #136]	; (8008908 <TIM_Base_SetConfig+0xe8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d013      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a21      	ldr	r2, [pc, #132]	; (800890c <TIM_Base_SetConfig+0xec>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00f      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a20      	ldr	r2, [pc, #128]	; (8008910 <TIM_Base_SetConfig+0xf0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00b      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <TIM_Base_SetConfig+0xf4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d007      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a1e      	ldr	r2, [pc, #120]	; (8008918 <TIM_Base_SetConfig+0xf8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d003      	beq.n	80088aa <TIM_Base_SetConfig+0x8a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a1d      	ldr	r2, [pc, #116]	; (800891c <TIM_Base_SetConfig+0xfc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d108      	bne.n	80088bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a08      	ldr	r2, [pc, #32]	; (8008904 <TIM_Base_SetConfig+0xe4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d103      	bne.n	80088f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	615a      	str	r2, [r3, #20]
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	40010000 	.word	0x40010000
 8008908:	40000400 	.word	0x40000400
 800890c:	40000800 	.word	0x40000800
 8008910:	40000c00 	.word	0x40000c00
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400
 800891c:	40014800 	.word	0x40014800

08008920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	f023 0201 	bic.w	r2, r3, #1
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0303 	bic.w	r3, r3, #3
 8008956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f023 0302 	bic.w	r3, r3, #2
 8008968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <TIM_OC1_SetConfig+0xc8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d10c      	bne.n	8008996 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f023 0308 	bic.w	r3, r3, #8
 8008982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f023 0304 	bic.w	r3, r3, #4
 8008994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <TIM_OC1_SetConfig+0xc8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d111      	bne.n	80089c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	621a      	str	r2, [r3, #32]
}
 80089dc:	bf00      	nop
 80089de:	371c      	adds	r7, #28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	40010000 	.word	0x40010000

080089ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f023 0210 	bic.w	r2, r3, #16
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f023 0320 	bic.w	r3, r3, #32
 8008a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <TIM_OC2_SetConfig+0xd4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d10d      	bne.n	8008a68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <TIM_OC2_SetConfig+0xd4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d113      	bne.n	8008a98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	621a      	str	r2, [r3, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	40010000 	.word	0x40010000

08008ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a1d      	ldr	r2, [pc, #116]	; (8008b94 <TIM_OC3_SetConfig+0xd0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d10d      	bne.n	8008b3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a14      	ldr	r2, [pc, #80]	; (8008b94 <TIM_OC3_SetConfig+0xd0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d113      	bne.n	8008b6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	621a      	str	r2, [r3, #32]
}
 8008b88:	bf00      	nop
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	40010000 	.word	0x40010000

08008b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	031b      	lsls	r3, r3, #12
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a10      	ldr	r2, [pc, #64]	; (8008c34 <TIM_OC4_SetConfig+0x9c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d109      	bne.n	8008c0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	019b      	lsls	r3, r3, #6
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40010000 	.word	0x40010000

08008c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0201 	bic.w	r2, r3, #1
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f023 030a 	bic.w	r3, r3, #10
 8008c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	621a      	str	r2, [r3, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b087      	sub	sp, #28
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f023 0210 	bic.w	r2, r3, #16
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	031b      	lsls	r3, r3, #12
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	f043 0307 	orr.w	r3, r3, #7
 8008d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	609a      	str	r2, [r3, #8]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	021a      	lsls	r2, r3, #8
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	609a      	str	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	2201      	movs	r2, #1
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1a      	ldr	r2, [r3, #32]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	401a      	ands	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a1a      	ldr	r2, [r3, #32]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f003 031f 	and.w	r3, r3, #31
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	fa01 f303 	lsl.w	r3, r1, r3
 8008da4:	431a      	orrs	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	621a      	str	r2, [r3, #32]
}
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
	...

08008db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e050      	b.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d018      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1c:	d013      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a18      	ldr	r2, [pc, #96]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00e      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d009      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d004      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d10c      	bne.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40014000 	.word	0x40014000

08008e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e03f      	b.n	8008f4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fb ff34 	bl	8004d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2224      	movs	r2, #36	; 0x24
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 ff77 	bl	8009df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	695a      	ldr	r2, [r3, #20]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08c      	sub	sp, #48	; 0x30
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d165      	bne.n	800903e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_UART_Transmit_DMA+0x26>
 8008f78:	88fb      	ldrh	r3, [r7, #6]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e05e      	b.n	8009040 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_UART_Transmit_DMA+0x38>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e057      	b.n	8009040 <HAL_UART_Transmit_DMA+0xe8>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	88fa      	ldrh	r2, [r7, #6]
 8008fa2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	88fa      	ldrh	r2, [r7, #6]
 8008fa8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2221      	movs	r2, #33	; 0x21
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbc:	4a22      	ldr	r2, [pc, #136]	; (8009048 <HAL_UART_Transmit_DMA+0xf0>)
 8008fbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc4:	4a21      	ldr	r2, [pc, #132]	; (800904c <HAL_UART_Transmit_DMA+0xf4>)
 8008fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fcc:	4a20      	ldr	r2, [pc, #128]	; (8009050 <HAL_UART_Transmit_DMA+0xf8>)
 8008fce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008fd8:	f107 0308 	add.w	r3, r7, #8
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	6819      	ldr	r1, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3304      	adds	r3, #4
 8008fec:	461a      	mov	r2, r3
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	f7fc fd4e 	bl	8005a90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ffc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3314      	adds	r3, #20
 800900c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	617b      	str	r3, [r7, #20]
   return(result);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3314      	adds	r3, #20
 8009024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009026:	627a      	str	r2, [r7, #36]	; 0x24
 8009028:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	6a39      	ldr	r1, [r7, #32]
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	61fb      	str	r3, [r7, #28]
   return(result);
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e5      	bne.n	8009006 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	e000      	b.n	8009040 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800903e:	2302      	movs	r3, #2
  }
}
 8009040:	4618      	mov	r0, r3
 8009042:	3730      	adds	r7, #48	; 0x30
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	0800968d 	.word	0x0800968d
 800904c:	08009727 	.word	0x08009727
 8009050:	0800989f 	.word	0x0800989f

08009054 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08c      	sub	sp, #48	; 0x30
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	4613      	mov	r3, r2
 8009060:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b20      	cmp	r3, #32
 800906c:	d152      	bne.n	8009114 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e04b      	b.n	8009116 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009088:	2302      	movs	r3, #2
 800908a:	e044      	b.n	8009116 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	461a      	mov	r2, r3
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fc47 	bl	8009934 <UART_Start_Receive_DMA>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80090ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d12c      	bne.n	800910e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d125      	bne.n	8009108 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090bc:	2300      	movs	r3, #0
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	330c      	adds	r3, #12
 80090d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	617b      	str	r3, [r7, #20]
   return(result);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f043 0310 	orr.w	r3, r3, #16
 80090e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	330c      	adds	r3, #12
 80090f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f2:	627a      	str	r2, [r7, #36]	; 0x24
 80090f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6a39      	ldr	r1, [r7, #32]
 80090f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009106:	e002      	b.n	800910e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800910e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009112:	e000      	b.n	8009116 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009114:	2302      	movs	r3, #2
  }
}
 8009116:	4618      	mov	r0, r3
 8009118:	3730      	adds	r7, #48	; 0x30
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b0ba      	sub	sp, #232	; 0xe8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009146:	2300      	movs	r3, #0
 8009148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800914c:	2300      	movs	r3, #0
 800914e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800915e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10f      	bne.n	8009186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <HAL_UART_IRQHandler+0x66>
 8009172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fd7d 	bl	8009c7e <UART_Receive_IT>
      return;
 8009184:	e256      	b.n	8009634 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 80de 	beq.w	800934c <HAL_UART_IRQHandler+0x22c>
 8009190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d106      	bne.n	80091aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800919c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80d1 	beq.w	800934c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00b      	beq.n	80091ce <HAL_UART_IRQHandler+0xae>
 80091b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d005      	beq.n	80091ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	f043 0201 	orr.w	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00b      	beq.n	80091f2 <HAL_UART_IRQHandler+0xd2>
 80091da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d005      	beq.n	80091f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	f043 0202 	orr.w	r2, r3, #2
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00b      	beq.n	8009216 <HAL_UART_IRQHandler+0xf6>
 80091fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	f043 0204 	orr.w	r2, r3, #4
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921a:	f003 0308 	and.w	r3, r3, #8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <HAL_UART_IRQHandler+0x126>
 8009222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800922e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	f043 0208 	orr.w	r2, r3, #8
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 81ed 	beq.w	800962a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d008      	beq.n	800926e <HAL_UART_IRQHandler+0x14e>
 800925c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fd08 	bl	8009c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	bf0c      	ite	eq
 800927c:	2301      	moveq	r3, #1
 800927e:	2300      	movne	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <HAL_UART_IRQHandler+0x17a>
 8009292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d04f      	beq.n	800933a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fc10 	bl	8009ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d141      	bne.n	8009332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3314      	adds	r3, #20
 80092d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1d9      	bne.n	80092ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d013      	beq.n	800932a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	4a7d      	ldr	r2, [pc, #500]	; (80094fc <HAL_UART_IRQHandler+0x3dc>)
 8009308:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	4618      	mov	r0, r3
 8009310:	f7fc fc86 	bl	8005c20 <HAL_DMA_Abort_IT>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d016      	beq.n	8009348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009328:	e00e      	b.n	8009348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9a4 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009330:	e00a      	b.n	8009348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f9a0 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009338:	e006      	b.n	8009348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f99c 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009346:	e170      	b.n	800962a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009348:	bf00      	nop
    return;
 800934a:	e16e      	b.n	800962a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	2b01      	cmp	r3, #1
 8009352:	f040 814a 	bne.w	80095ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800935a:	f003 0310 	and.w	r3, r3, #16
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8143 	beq.w	80095ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 813c 	beq.w	80095ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009372:	2300      	movs	r3, #0
 8009374:	60bb      	str	r3, [r7, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	60bb      	str	r3, [r7, #8]
 8009386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	f040 80b4 	bne.w	8009500 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 8140 	beq.w	800962e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093b6:	429a      	cmp	r2, r3
 80093b8:	f080 8139 	bcs.w	800962e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ce:	f000 8088 	beq.w	80094e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	330c      	adds	r3, #12
 80093d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	330c      	adds	r3, #12
 80093fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80093fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800940a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1d9      	bne.n	80093d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3314      	adds	r3, #20
 8009424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800942e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3314      	adds	r3, #20
 800943e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800944a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e1      	bne.n	800941e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3314      	adds	r3, #20
 8009460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800946a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800946c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3314      	adds	r3, #20
 800947a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800947e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800948c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e3      	bne.n	800945a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	330c      	adds	r3, #12
 80094a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b2:	f023 0310 	bic.w	r3, r3, #16
 80094b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	330c      	adds	r3, #12
 80094c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80094c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80094c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e3      	bne.n	80094a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fc fb2f 	bl	8005b40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fa f870 	bl	80035d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094f8:	e099      	b.n	800962e <HAL_UART_IRQHandler+0x50e>
 80094fa:	bf00      	nop
 80094fc:	08009b87 	.word	0x08009b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009508:	b29b      	uxth	r3, r3
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 808b 	beq.w	8009632 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800951c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8086 	beq.w	8009632 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800953c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800954a:	647a      	str	r2, [r7, #68]	; 0x44
 800954c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e3      	bne.n	8009526 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3314      	adds	r3, #20
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	623b      	str	r3, [r7, #32]
   return(result);
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3314      	adds	r3, #20
 800957e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009582:	633a      	str	r2, [r7, #48]	; 0x30
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e3      	bne.n	800955e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0310 	bic.w	r3, r3, #16
 80095ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	330c      	adds	r3, #12
 80095c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80095c8:	61fa      	str	r2, [r7, #28]
 80095ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	69b9      	ldr	r1, [r7, #24]
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	617b      	str	r3, [r7, #20]
   return(result);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e3      	bne.n	80095a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7f9 fff8 	bl	80035d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095e8:	e023      	b.n	8009632 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <HAL_UART_IRQHandler+0x4ea>
 80095f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fad3 	bl	8009bae <UART_Transmit_IT>
    return;
 8009608:	e014      	b.n	8009634 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00e      	beq.n	8009634 <HAL_UART_IRQHandler+0x514>
 8009616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d008      	beq.n	8009634 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fb13 	bl	8009c4e <UART_EndTransmit_IT>
    return;
 8009628:	e004      	b.n	8009634 <HAL_UART_IRQHandler+0x514>
    return;
 800962a:	bf00      	nop
 800962c:	e002      	b.n	8009634 <HAL_UART_IRQHandler+0x514>
      return;
 800962e:	bf00      	nop
 8009630:	e000      	b.n	8009634 <HAL_UART_IRQHandler+0x514>
      return;
 8009632:	bf00      	nop
  }
}
 8009634:	37e8      	adds	r7, #232	; 0xe8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop

0800963c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b090      	sub	sp, #64	; 0x40
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d137      	bne.n	8009718 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80096a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096aa:	2200      	movs	r2, #0
 80096ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3314      	adds	r3, #20
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	623b      	str	r3, [r7, #32]
   return(result);
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80096c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3314      	adds	r3, #20
 80096cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ce:	633a      	str	r2, [r7, #48]	; 0x30
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e5      	bne.n	80096ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	330c      	adds	r3, #12
 80096e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f8:	637b      	str	r3, [r7, #52]	; 0x34
 80096fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	330c      	adds	r3, #12
 8009700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009702:	61fa      	str	r2, [r7, #28]
 8009704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	69b9      	ldr	r1, [r7, #24]
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	617b      	str	r3, [r7, #20]
   return(result);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e5      	bne.n	80096e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009716:	e002      	b.n	800971e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009718:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800971a:	f7f9 ffad 	bl	8003678 <HAL_UART_TxCpltCallback>
}
 800971e:	bf00      	nop
 8009720:	3740      	adds	r7, #64	; 0x40
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f7ff ff81 	bl	800963c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b09c      	sub	sp, #112	; 0x70
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975a:	2b00      	cmp	r3, #0
 800975c:	d172      	bne.n	8009844 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800975e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009760:	2200      	movs	r2, #0
 8009762:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800977a:	66bb      	str	r3, [r7, #104]	; 0x68
 800977c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009784:	65ba      	str	r2, [r7, #88]	; 0x58
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800978a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3314      	adds	r3, #20
 800979e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	e853 3f00 	ldrex	r3, [r3]
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097aa:	f023 0301 	bic.w	r3, r3, #1
 80097ae:	667b      	str	r3, [r7, #100]	; 0x64
 80097b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3314      	adds	r3, #20
 80097b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097b8:	647a      	str	r2, [r7, #68]	; 0x44
 80097ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c0:	e841 2300 	strex	r3, r2, [r1]
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e5      	bne.n	8009798 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3314      	adds	r3, #20
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	e853 3f00 	ldrex	r3, [r3]
 80097da:	623b      	str	r3, [r7, #32]
   return(result);
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097e2:	663b      	str	r3, [r7, #96]	; 0x60
 80097e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3314      	adds	r3, #20
 80097ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097ec:	633a      	str	r2, [r7, #48]	; 0x30
 80097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f4:	e841 2300 	strex	r3, r2, [r1]
 80097f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e5      	bne.n	80097cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009802:	2220      	movs	r2, #32
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	2b01      	cmp	r3, #1
 800980e:	d119      	bne.n	8009844 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	330c      	adds	r3, #12
 8009816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	e853 3f00 	ldrex	r3, [r3]
 800981e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0310 	bic.w	r3, r3, #16
 8009826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	330c      	adds	r3, #12
 800982e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009830:	61fa      	str	r2, [r7, #28]
 8009832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	69b9      	ldr	r1, [r7, #24]
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	617b      	str	r3, [r7, #20]
   return(result);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e5      	bne.n	8009810 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	2b01      	cmp	r3, #1
 800984a:	d106      	bne.n	800985a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800984c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009850:	4619      	mov	r1, r3
 8009852:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009854:	f7f9 fec0 	bl	80035d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009858:	e002      	b.n	8009860 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800985a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800985c:	f7ff fef8 	bl	8009650 <HAL_UART_RxCpltCallback>
}
 8009860:	bf00      	nop
 8009862:	3770      	adds	r7, #112	; 0x70
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987a:	2b01      	cmp	r3, #1
 800987c:	d108      	bne.n	8009890 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009882:	085b      	lsrs	r3, r3, #1
 8009884:	b29b      	uxth	r3, r3
 8009886:	4619      	mov	r1, r3
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7f9 fea5 	bl	80035d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800988e:	e002      	b.n	8009896 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff fee7 	bl	8009664 <HAL_UART_RxHalfCpltCallback>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ba:	2b80      	cmp	r3, #128	; 0x80
 80098bc:	bf0c      	ite	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	2300      	movne	r3, #0
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b21      	cmp	r3, #33	; 0x21
 80098d0:	d108      	bne.n	80098e4 <UART_DMAError+0x46>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d005      	beq.n	80098e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80098de:	68b8      	ldr	r0, [r7, #8]
 80098e0:	f000 f8c6 	bl	8009a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	bf0c      	ite	eq
 80098f2:	2301      	moveq	r3, #1
 80098f4:	2300      	movne	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b22      	cmp	r3, #34	; 0x22
 8009904:	d108      	bne.n	8009918 <UART_DMAError+0x7a>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009912:	68b8      	ldr	r0, [r7, #8]
 8009914:	f000 f8d4 	bl	8009ac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991c:	f043 0210 	orr.w	r2, r3, #16
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009924:	68b8      	ldr	r0, [r7, #8]
 8009926:	f7ff fea7 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b098      	sub	sp, #96	; 0x60
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	88fa      	ldrh	r2, [r7, #6]
 800994c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2222      	movs	r2, #34	; 0x22
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009960:	4a40      	ldr	r2, [pc, #256]	; (8009a64 <UART_Start_Receive_DMA+0x130>)
 8009962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	4a3f      	ldr	r2, [pc, #252]	; (8009a68 <UART_Start_Receive_DMA+0x134>)
 800996a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	4a3e      	ldr	r2, [pc, #248]	; (8009a6c <UART_Start_Receive_DMA+0x138>)
 8009972:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	2200      	movs	r2, #0
 800997a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3304      	adds	r3, #4
 800998c:	4619      	mov	r1, r3
 800998e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	f7fc f87c 	bl	8005a90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	613b      	str	r3, [r7, #16]
 80099ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d019      	beq.n	80099f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	330c      	adds	r3, #12
 80099c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80099e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80099e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80099ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e5      	bne.n	80099be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3314      	adds	r3, #20
 80099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	f043 0301 	orr.w	r3, r3, #1
 8009a08:	657b      	str	r3, [r7, #84]	; 0x54
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3314      	adds	r3, #20
 8009a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a12:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e5      	bne.n	80099f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3314      	adds	r3, #20
 8009a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	617b      	str	r3, [r7, #20]
   return(result);
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3314      	adds	r3, #20
 8009a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a46:	627a      	str	r2, [r7, #36]	; 0x24
 8009a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6a39      	ldr	r1, [r7, #32]
 8009a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e5      	bne.n	8009a26 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3760      	adds	r7, #96	; 0x60
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	08009743 	.word	0x08009743
 8009a68:	08009869 	.word	0x08009869
 8009a6c:	0800989f 	.word	0x0800989f

08009a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	; 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a8e:	61fb      	str	r3, [r7, #28]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	330c      	adds	r3, #12
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	61ba      	str	r2, [r7, #24]
 8009a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	6979      	ldr	r1, [r7, #20]
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e5      	bne.n	8009a78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009ab4:	bf00      	nop
 8009ab6:	3724      	adds	r7, #36	; 0x24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b095      	sub	sp, #84	; 0x54
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	330c      	adds	r3, #12
 8009ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad2:	e853 3f00 	ldrex	r3, [r3]
 8009ad6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ae8:	643a      	str	r2, [r7, #64]	; 0x40
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e5      	bne.n	8009ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3314      	adds	r3, #20
 8009b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	e853 3f00 	ldrex	r3, [r3]
 8009b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	f023 0301 	bic.w	r3, r3, #1
 8009b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3314      	adds	r3, #20
 8009b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e5      	bne.n	8009afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d119      	bne.n	8009b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	330c      	adds	r3, #12
 8009b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f023 0310 	bic.w	r3, r3, #16
 8009b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	330c      	adds	r3, #12
 8009b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b58:	61ba      	str	r2, [r7, #24]
 8009b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6979      	ldr	r1, [r7, #20]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	613b      	str	r3, [r7, #16]
   return(result);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e5      	bne.n	8009b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b7a:	bf00      	nop
 8009b7c:	3754      	adds	r7, #84	; 0x54
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fd69 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b21      	cmp	r3, #33	; 0x21
 8009bc0:	d13e      	bne.n	8009c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bca:	d114      	bne.n	8009bf6 <UART_Transmit_IT+0x48>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d110      	bne.n	8009bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	1c9a      	adds	r2, r3, #2
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	621a      	str	r2, [r3, #32]
 8009bf4:	e008      	b.n	8009c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	1c59      	adds	r1, r3, #1
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6211      	str	r1, [r2, #32]
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4619      	mov	r1, r3
 8009c16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10f      	bne.n	8009c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e000      	b.n	8009c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c40:	2302      	movs	r3, #2
  }
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f9 fd02 	bl	8003678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b08c      	sub	sp, #48	; 0x30
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b22      	cmp	r3, #34	; 0x22
 8009c90:	f040 80ab 	bne.w	8009dea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9c:	d117      	bne.n	8009cce <UART_Receive_IT+0x50>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d113      	bne.n	8009cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc6:	1c9a      	adds	r2, r3, #2
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28
 8009ccc:	e026      	b.n	8009d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce0:	d007      	beq.n	8009cf2 <UART_Receive_IT+0x74>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <UART_Receive_IT+0x82>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d106      	bne.n	8009d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	e008      	b.n	8009d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d15a      	bne.n	8009de6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 0220 	bic.w	r2, r2, #32
 8009d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68da      	ldr	r2, [r3, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	695a      	ldr	r2, [r3, #20]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0201 	bic.w	r2, r2, #1
 8009d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d135      	bne.n	8009ddc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	613b      	str	r3, [r7, #16]
   return(result);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f023 0310 	bic.w	r3, r3, #16
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d96:	623a      	str	r2, [r7, #32]
 8009d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	69f9      	ldr	r1, [r7, #28]
 8009d9c:	6a3a      	ldr	r2, [r7, #32]
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b10      	cmp	r3, #16
 8009db6:	d10a      	bne.n	8009dce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7f9 fbff 	bl	80035d8 <HAL_UARTEx_RxEventCallback>
 8009dda:	e002      	b.n	8009de2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff fc37 	bl	8009650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e002      	b.n	8009dec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e000      	b.n	8009dec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009dea:	2302      	movs	r3, #2
  }
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3730      	adds	r7, #48	; 0x30
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009df8:	b0c0      	sub	sp, #256	; 0x100
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e10:	68d9      	ldr	r1, [r3, #12]
 8009e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	ea40 0301 	orr.w	r3, r0, r1
 8009e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	431a      	orrs	r2, r3
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e4c:	f021 010c 	bic.w	r1, r1, #12
 8009e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e5a:	430b      	orrs	r3, r1
 8009e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6e:	6999      	ldr	r1, [r3, #24]
 8009e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	ea40 0301 	orr.w	r3, r0, r1
 8009e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b8f      	ldr	r3, [pc, #572]	; (800a0c0 <UART_SetConfig+0x2cc>)
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d005      	beq.n	8009e94 <UART_SetConfig+0xa0>
 8009e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b8d      	ldr	r3, [pc, #564]	; (800a0c4 <UART_SetConfig+0x2d0>)
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d104      	bne.n	8009e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e94:	f7fd ff4a 	bl	8007d2c <HAL_RCC_GetPCLK2Freq>
 8009e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e9c:	e003      	b.n	8009ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e9e:	f7fd ff31 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 8009ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eb0:	f040 810c 	bne.w	800a0cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	462b      	mov	r3, r5
 8009eca:	1891      	adds	r1, r2, r2
 8009ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ece:	415b      	adcs	r3, r3
 8009ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	eb12 0801 	adds.w	r8, r2, r1
 8009edc:	4629      	mov	r1, r5
 8009ede:	eb43 0901 	adc.w	r9, r3, r1
 8009ee2:	f04f 0200 	mov.w	r2, #0
 8009ee6:	f04f 0300 	mov.w	r3, #0
 8009eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ef6:	4690      	mov	r8, r2
 8009ef8:	4699      	mov	r9, r3
 8009efa:	4623      	mov	r3, r4
 8009efc:	eb18 0303 	adds.w	r3, r8, r3
 8009f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f04:	462b      	mov	r3, r5
 8009f06:	eb49 0303 	adc.w	r3, r9, r3
 8009f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f22:	460b      	mov	r3, r1
 8009f24:	18db      	adds	r3, r3, r3
 8009f26:	653b      	str	r3, [r7, #80]	; 0x50
 8009f28:	4613      	mov	r3, r2
 8009f2a:	eb42 0303 	adc.w	r3, r2, r3
 8009f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f38:	f7f6 febe 	bl	8000cb8 <__aeabi_uldivmod>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4b61      	ldr	r3, [pc, #388]	; (800a0c8 <UART_SetConfig+0x2d4>)
 8009f42:	fba3 2302 	umull	r2, r3, r3, r2
 8009f46:	095b      	lsrs	r3, r3, #5
 8009f48:	011c      	lsls	r4, r3, #4
 8009f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f5c:	4642      	mov	r2, r8
 8009f5e:	464b      	mov	r3, r9
 8009f60:	1891      	adds	r1, r2, r2
 8009f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f64:	415b      	adcs	r3, r3
 8009f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f6c:	4641      	mov	r1, r8
 8009f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8009f72:	4649      	mov	r1, r9
 8009f74:	eb43 0b01 	adc.w	fp, r3, r1
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f8c:	4692      	mov	sl, r2
 8009f8e:	469b      	mov	fp, r3
 8009f90:	4643      	mov	r3, r8
 8009f92:	eb1a 0303 	adds.w	r3, sl, r3
 8009f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8009fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	18db      	adds	r3, r3, r3
 8009fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	eb42 0303 	adc.w	r3, r2, r3
 8009fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009fce:	f7f6 fe73 	bl	8000cb8 <__aeabi_uldivmod>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4b3b      	ldr	r3, [pc, #236]	; (800a0c8 <UART_SetConfig+0x2d4>)
 8009fda:	fba3 2301 	umull	r2, r3, r3, r1
 8009fde:	095b      	lsrs	r3, r3, #5
 8009fe0:	2264      	movs	r2, #100	; 0x64
 8009fe2:	fb02 f303 	mul.w	r3, r2, r3
 8009fe6:	1acb      	subs	r3, r1, r3
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009fee:	4b36      	ldr	r3, [pc, #216]	; (800a0c8 <UART_SetConfig+0x2d4>)
 8009ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ffc:	441c      	add	r4, r3
 8009ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a002:	2200      	movs	r2, #0
 800a004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a00c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a010:	4642      	mov	r2, r8
 800a012:	464b      	mov	r3, r9
 800a014:	1891      	adds	r1, r2, r2
 800a016:	63b9      	str	r1, [r7, #56]	; 0x38
 800a018:	415b      	adcs	r3, r3
 800a01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a01c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a020:	4641      	mov	r1, r8
 800a022:	1851      	adds	r1, r2, r1
 800a024:	6339      	str	r1, [r7, #48]	; 0x30
 800a026:	4649      	mov	r1, r9
 800a028:	414b      	adcs	r3, r1
 800a02a:	637b      	str	r3, [r7, #52]	; 0x34
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	f04f 0300 	mov.w	r3, #0
 800a034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a038:	4659      	mov	r1, fp
 800a03a:	00cb      	lsls	r3, r1, #3
 800a03c:	4651      	mov	r1, sl
 800a03e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a042:	4651      	mov	r1, sl
 800a044:	00ca      	lsls	r2, r1, #3
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	4642      	mov	r2, r8
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a054:	464b      	mov	r3, r9
 800a056:	460a      	mov	r2, r1
 800a058:	eb42 0303 	adc.w	r3, r2, r3
 800a05c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a06c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a074:	460b      	mov	r3, r1
 800a076:	18db      	adds	r3, r3, r3
 800a078:	62bb      	str	r3, [r7, #40]	; 0x28
 800a07a:	4613      	mov	r3, r2
 800a07c:	eb42 0303 	adc.w	r3, r2, r3
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a08a:	f7f6 fe15 	bl	8000cb8 <__aeabi_uldivmod>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4b0d      	ldr	r3, [pc, #52]	; (800a0c8 <UART_SetConfig+0x2d4>)
 800a094:	fba3 1302 	umull	r1, r3, r3, r2
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	2164      	movs	r1, #100	; 0x64
 800a09c:	fb01 f303 	mul.w	r3, r1, r3
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	3332      	adds	r3, #50	; 0x32
 800a0a6:	4a08      	ldr	r2, [pc, #32]	; (800a0c8 <UART_SetConfig+0x2d4>)
 800a0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ac:	095b      	lsrs	r3, r3, #5
 800a0ae:	f003 0207 	and.w	r2, r3, #7
 800a0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4422      	add	r2, r4
 800a0ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a0bc:	e105      	b.n	800a2ca <UART_SetConfig+0x4d6>
 800a0be:	bf00      	nop
 800a0c0:	40011000 	.word	0x40011000
 800a0c4:	40011400 	.word	0x40011400
 800a0c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a0de:	4642      	mov	r2, r8
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	1891      	adds	r1, r2, r2
 800a0e4:	6239      	str	r1, [r7, #32]
 800a0e6:	415b      	adcs	r3, r3
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	1854      	adds	r4, r2, r1
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	eb43 0501 	adc.w	r5, r3, r1
 800a0f8:	f04f 0200 	mov.w	r2, #0
 800a0fc:	f04f 0300 	mov.w	r3, #0
 800a100:	00eb      	lsls	r3, r5, #3
 800a102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a106:	00e2      	lsls	r2, r4, #3
 800a108:	4614      	mov	r4, r2
 800a10a:	461d      	mov	r5, r3
 800a10c:	4643      	mov	r3, r8
 800a10e:	18e3      	adds	r3, r4, r3
 800a110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a114:	464b      	mov	r3, r9
 800a116:	eb45 0303 	adc.w	r3, r5, r3
 800a11a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a12a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	f04f 0300 	mov.w	r3, #0
 800a136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a13a:	4629      	mov	r1, r5
 800a13c:	008b      	lsls	r3, r1, #2
 800a13e:	4621      	mov	r1, r4
 800a140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a144:	4621      	mov	r1, r4
 800a146:	008a      	lsls	r2, r1, #2
 800a148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a14c:	f7f6 fdb4 	bl	8000cb8 <__aeabi_uldivmod>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4b60      	ldr	r3, [pc, #384]	; (800a2d8 <UART_SetConfig+0x4e4>)
 800a156:	fba3 2302 	umull	r2, r3, r3, r2
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	011c      	lsls	r4, r3, #4
 800a15e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a162:	2200      	movs	r2, #0
 800a164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a16c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a170:	4642      	mov	r2, r8
 800a172:	464b      	mov	r3, r9
 800a174:	1891      	adds	r1, r2, r2
 800a176:	61b9      	str	r1, [r7, #24]
 800a178:	415b      	adcs	r3, r3
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a180:	4641      	mov	r1, r8
 800a182:	1851      	adds	r1, r2, r1
 800a184:	6139      	str	r1, [r7, #16]
 800a186:	4649      	mov	r1, r9
 800a188:	414b      	adcs	r3, r1
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	f04f 0200 	mov.w	r2, #0
 800a190:	f04f 0300 	mov.w	r3, #0
 800a194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a198:	4659      	mov	r1, fp
 800a19a:	00cb      	lsls	r3, r1, #3
 800a19c:	4651      	mov	r1, sl
 800a19e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1a2:	4651      	mov	r1, sl
 800a1a4:	00ca      	lsls	r2, r1, #3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	4642      	mov	r2, r8
 800a1ae:	189b      	adds	r3, r3, r2
 800a1b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1b4:	464b      	mov	r3, r9
 800a1b6:	460a      	mov	r2, r1
 800a1b8:	eb42 0303 	adc.w	r3, r2, r3
 800a1bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a1d8:	4649      	mov	r1, r9
 800a1da:	008b      	lsls	r3, r1, #2
 800a1dc:	4641      	mov	r1, r8
 800a1de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	008a      	lsls	r2, r1, #2
 800a1e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a1ea:	f7f6 fd65 	bl	8000cb8 <__aeabi_uldivmod>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4b39      	ldr	r3, [pc, #228]	; (800a2d8 <UART_SetConfig+0x4e4>)
 800a1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1f8:	095b      	lsrs	r3, r3, #5
 800a1fa:	2164      	movs	r1, #100	; 0x64
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	3332      	adds	r3, #50	; 0x32
 800a206:	4a34      	ldr	r2, [pc, #208]	; (800a2d8 <UART_SetConfig+0x4e4>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a212:	441c      	add	r4, r3
 800a214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a218:	2200      	movs	r2, #0
 800a21a:	673b      	str	r3, [r7, #112]	; 0x70
 800a21c:	677a      	str	r2, [r7, #116]	; 0x74
 800a21e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a222:	4642      	mov	r2, r8
 800a224:	464b      	mov	r3, r9
 800a226:	1891      	adds	r1, r2, r2
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	415b      	adcs	r3, r3
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a232:	4641      	mov	r1, r8
 800a234:	1851      	adds	r1, r2, r1
 800a236:	6039      	str	r1, [r7, #0]
 800a238:	4649      	mov	r1, r9
 800a23a:	414b      	adcs	r3, r1
 800a23c:	607b      	str	r3, [r7, #4]
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a24a:	4659      	mov	r1, fp
 800a24c:	00cb      	lsls	r3, r1, #3
 800a24e:	4651      	mov	r1, sl
 800a250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a254:	4651      	mov	r1, sl
 800a256:	00ca      	lsls	r2, r1, #3
 800a258:	4610      	mov	r0, r2
 800a25a:	4619      	mov	r1, r3
 800a25c:	4603      	mov	r3, r0
 800a25e:	4642      	mov	r2, r8
 800a260:	189b      	adds	r3, r3, r2
 800a262:	66bb      	str	r3, [r7, #104]	; 0x68
 800a264:	464b      	mov	r3, r9
 800a266:	460a      	mov	r2, r1
 800a268:	eb42 0303 	adc.w	r3, r2, r3
 800a26c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	663b      	str	r3, [r7, #96]	; 0x60
 800a278:	667a      	str	r2, [r7, #100]	; 0x64
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a286:	4649      	mov	r1, r9
 800a288:	008b      	lsls	r3, r1, #2
 800a28a:	4641      	mov	r1, r8
 800a28c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a290:	4641      	mov	r1, r8
 800a292:	008a      	lsls	r2, r1, #2
 800a294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a298:	f7f6 fd0e 	bl	8000cb8 <__aeabi_uldivmod>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <UART_SetConfig+0x4e4>)
 800a2a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a2a6:	095b      	lsrs	r3, r3, #5
 800a2a8:	2164      	movs	r1, #100	; 0x64
 800a2aa:	fb01 f303 	mul.w	r3, r1, r3
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	3332      	adds	r3, #50	; 0x32
 800a2b4:	4a08      	ldr	r2, [pc, #32]	; (800a2d8 <UART_SetConfig+0x4e4>)
 800a2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ba:	095b      	lsrs	r3, r3, #5
 800a2bc:	f003 020f 	and.w	r2, r3, #15
 800a2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4422      	add	r2, r4
 800a2c8:	609a      	str	r2, [r3, #8]
}
 800a2ca:	bf00      	nop
 800a2cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2d6:	bf00      	nop
 800a2d8:	51eb851f 	.word	0x51eb851f

0800a2dc <__NVIC_SetPriority>:
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	6039      	str	r1, [r7, #0]
 800a2e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db0a      	blt.n	800a306 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	490c      	ldr	r1, [pc, #48]	; (800a328 <__NVIC_SetPriority+0x4c>)
 800a2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2fa:	0112      	lsls	r2, r2, #4
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	440b      	add	r3, r1
 800a300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a304:	e00a      	b.n	800a31c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4908      	ldr	r1, [pc, #32]	; (800a32c <__NVIC_SetPriority+0x50>)
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	3b04      	subs	r3, #4
 800a314:	0112      	lsls	r2, r2, #4
 800a316:	b2d2      	uxtb	r2, r2
 800a318:	440b      	add	r3, r1
 800a31a:	761a      	strb	r2, [r3, #24]
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	e000e100 	.word	0xe000e100
 800a32c:	e000ed00 	.word	0xe000ed00

0800a330 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <SysTick_Handler+0x1c>)
 800a336:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a338:	f002 fd9c 	bl	800ce74 <xTaskGetSchedulerState>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d001      	beq.n	800a346 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a342:	f003 fe81 	bl	800e048 <xPortSysTickHandler>
  }
}
 800a346:	bf00      	nop
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	e000e010 	.word	0xe000e010

0800a350 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a354:	2100      	movs	r1, #0
 800a356:	f06f 0004 	mvn.w	r0, #4
 800a35a:	f7ff ffbf 	bl	800a2dc <__NVIC_SetPriority>
#endif
}
 800a35e:	bf00      	nop
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a36a:	f3ef 8305 	mrs	r3, IPSR
 800a36e:	603b      	str	r3, [r7, #0]
  return(result);
 800a370:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a376:	f06f 0305 	mvn.w	r3, #5
 800a37a:	607b      	str	r3, [r7, #4]
 800a37c:	e00c      	b.n	800a398 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a37e:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <osKernelInitialize+0x44>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d105      	bne.n	800a392 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a386:	4b08      	ldr	r3, [pc, #32]	; (800a3a8 <osKernelInitialize+0x44>)
 800a388:	2201      	movs	r2, #1
 800a38a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	e002      	b.n	800a398 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a392:	f04f 33ff 	mov.w	r3, #4294967295
 800a396:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a398:	687b      	ldr	r3, [r7, #4]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	200007e4 	.word	0x200007e4

0800a3ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b2:	f3ef 8305 	mrs	r3, IPSR
 800a3b6:	603b      	str	r3, [r7, #0]
  return(result);
 800a3b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3be:	f06f 0305 	mvn.w	r3, #5
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	e010      	b.n	800a3e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3c6:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <osKernelStart+0x48>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d109      	bne.n	800a3e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3ce:	f7ff ffbf 	bl	800a350 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3d2:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <osKernelStart+0x48>)
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3d8:	f002 f8e0 	bl	800c59c <vTaskStartScheduler>
      stat = osOK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	607b      	str	r3, [r7, #4]
 800a3e0:	e002      	b.n	800a3e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3e8:	687b      	ldr	r3, [r7, #4]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	200007e4 	.word	0x200007e4

0800a3f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08e      	sub	sp, #56	; 0x38
 800a3fc:	af04      	add	r7, sp, #16
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a408:	f3ef 8305 	mrs	r3, IPSR
 800a40c:	617b      	str	r3, [r7, #20]
  return(result);
 800a40e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a410:	2b00      	cmp	r3, #0
 800a412:	d17e      	bne.n	800a512 <osThreadNew+0x11a>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d07b      	beq.n	800a512 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a41a:	2380      	movs	r3, #128	; 0x80
 800a41c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a41e:	2318      	movs	r3, #24
 800a420:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a422:	2300      	movs	r3, #0
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a426:	f04f 33ff 	mov.w	r3, #4294967295
 800a42a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d045      	beq.n	800a4be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <osThreadNew+0x48>
        name = attr->name;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d008      	beq.n	800a466 <osThreadNew+0x6e>
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	2b38      	cmp	r3, #56	; 0x38
 800a458:	d805      	bhi.n	800a466 <osThreadNew+0x6e>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <osThreadNew+0x72>
        return (NULL);
 800a466:	2300      	movs	r3, #0
 800a468:	e054      	b.n	800a514 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	089b      	lsrs	r3, r3, #2
 800a478:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00e      	beq.n	800a4a0 <osThreadNew+0xa8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	2bbb      	cmp	r3, #187	; 0xbb
 800a488:	d90a      	bls.n	800a4a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <osThreadNew+0xa8>
        mem = 1;
 800a49a:	2301      	movs	r3, #1
 800a49c:	61bb      	str	r3, [r7, #24]
 800a49e:	e010      	b.n	800a4c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10c      	bne.n	800a4c2 <osThreadNew+0xca>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d108      	bne.n	800a4c2 <osThreadNew+0xca>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d104      	bne.n	800a4c2 <osThreadNew+0xca>
          mem = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	e001      	b.n	800a4c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d110      	bne.n	800a4ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4d0:	9202      	str	r2, [sp, #8]
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	6a3a      	ldr	r2, [r7, #32]
 800a4dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f001 fe70 	bl	800c1c4 <xTaskCreateStatic>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	613b      	str	r3, [r7, #16]
 800a4e8:	e013      	b.n	800a512 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d110      	bne.n	800a512 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	f107 0310 	add.w	r3, r7, #16
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 febb 	bl	800c27e <xTaskCreate>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d001      	beq.n	800a512 <osThreadNew+0x11a>
            hTask = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a512:	693b      	ldr	r3, [r7, #16]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3728      	adds	r7, #40	; 0x28
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af02      	add	r7, sp, #8
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <osThreadFlagsSet+0x1a>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	da03      	bge.n	800a53e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a536:	f06f 0303 	mvn.w	r3, #3
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e035      	b.n	800a5aa <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a53e:	f04f 33ff 	mov.w	r3, #4294967295
 800a542:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a544:	f3ef 8305 	mrs	r3, IPSR
 800a548:	613b      	str	r3, [r7, #16]
  return(result);
 800a54a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d01f      	beq.n	800a590 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a550:	2300      	movs	r3, #0
 800a552:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a554:	f107 0308 	add.w	r3, r7, #8
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	2300      	movs	r3, #0
 800a55c:	2201      	movs	r2, #1
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6978      	ldr	r0, [r7, #20]
 800a562:	f002 ff2f 	bl	800d3c4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a566:	f107 030c 	add.w	r3, r7, #12
 800a56a:	2200      	movs	r2, #0
 800a56c:	9200      	str	r2, [sp, #0]
 800a56e:	2200      	movs	r2, #0
 800a570:	2100      	movs	r1, #0
 800a572:	6978      	ldr	r0, [r7, #20]
 800a574:	f002 ff26 	bl	800d3c4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d015      	beq.n	800a5aa <osThreadFlagsSet+0x8e>
 800a57e:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <osThreadFlagsSet+0x98>)
 800a580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	e00c      	b.n	800a5aa <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a590:	2300      	movs	r3, #0
 800a592:	2201      	movs	r2, #1
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6978      	ldr	r0, [r7, #20]
 800a598:	f002 fe56 	bl	800d248 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	6978      	ldr	r0, [r7, #20]
 800a5a6:	f002 fe4f 	bl	800d248 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	e000ed04 	.word	0xe000ed04

0800a5b8 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c0:	f3ef 8305 	mrs	r3, IPSR
 800a5c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800a5cc:	f06f 0305 	mvn.w	r3, #5
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	e02a      	b.n	800a62a <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da03      	bge.n	800a5e2 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a5da:	f06f 0303 	mvn.w	r3, #3
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e023      	b.n	800a62a <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800a5e2:	f002 fc37 	bl	800ce54 <xTaskGetCurrentTaskHandle>
 800a5e6:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800a5e8:	f107 0308 	add.w	r3, r7, #8
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6938      	ldr	r0, [r7, #16]
 800a5f2:	f002 fe29 	bl	800d248 <xTaskGenericNotify>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d113      	bne.n	800a624 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	43da      	mvns	r2, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4013      	ands	r3, r2
 800a608:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800a60a:	68b9      	ldr	r1, [r7, #8]
 800a60c:	2300      	movs	r3, #0
 800a60e:	2203      	movs	r2, #3
 800a610:	6938      	ldr	r0, [r7, #16]
 800a612:	f002 fe19 	bl	800d248 <xTaskGenericNotify>
 800a616:	4603      	mov	r3, r0
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d006      	beq.n	800a62a <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800a61c:	f04f 33ff 	mov.w	r3, #4294967295
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	e002      	b.n	800a62a <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800a624:	f04f 33ff 	mov.w	r3, #4294967295
 800a628:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a63a:	f3ef 8305 	mrs	r3, IPSR
 800a63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a640:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800a646:	f06f 0305 	mvn.w	r3, #5
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	e00e      	b.n	800a66c <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800a64e:	f002 fc01 	bl	800ce54 <xTaskGetCurrentTaskHandle>
 800a652:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800a654:	1d3b      	adds	r3, r7, #4
 800a656:	2200      	movs	r2, #0
 800a658:	2100      	movs	r1, #0
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f002 fdf4 	bl	800d248 <xTaskGenericNotify>
 800a660:	4603      	mov	r3, r0
 800a662:	2b01      	cmp	r3, #1
 800a664:	d002      	beq.n	800a66c <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800a666:	f04f 33ff 	mov.w	r3, #4294967295
 800a66a:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800a66c:	687b      	ldr	r3, [r7, #4]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a676:	b580      	push	{r7, lr}
 800a678:	b08c      	sub	sp, #48	; 0x30
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a682:	f3ef 8305 	mrs	r3, IPSR
 800a686:	617b      	str	r3, [r7, #20]
  return(result);
 800a688:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a68e:	f06f 0305 	mvn.w	r3, #5
 800a692:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a694:	e06b      	b.n	800a76e <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da03      	bge.n	800a6a4 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a69c:	f06f 0303 	mvn.w	r3, #3
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6a2:	e064      	b.n	800a76e <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6b2:	e001      	b.n	800a6b8 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800a6c0:	f002 f888 	bl	800c7d4 <xTaskGetTickCount>
 800a6c4:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a6c6:	f107 0210 	add.w	r2, r7, #16
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	f002 fd5a 	bl	800d188 <xTaskNotifyWait>
 800a6d4:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d137      	bne.n	800a74c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00c      	beq.n	800a710 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d032      	beq.n	800a768 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10f      	bne.n	800a728 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a708:	f06f 0302 	mvn.w	r3, #2
 800a70c:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a70e:	e02e      	b.n	800a76e <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	4013      	ands	r3, r2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d128      	bne.n	800a76c <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a720:	f06f 0302 	mvn.w	r3, #2
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a726:	e022      	b.n	800a76e <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a728:	f002 f854 	bl	800c7d4 <xTaskGetTickCount>
 800a72c:	4602      	mov	r2, r0
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	429a      	cmp	r2, r3
 800a73a:	d902      	bls.n	800a742 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
 800a740:	e00e      	b.n	800a760 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
 800a74a:	e009      	b.n	800a760 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d103      	bne.n	800a75a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a752:	f06f 0302 	mvn.w	r3, #2
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a758:	e002      	b.n	800a760 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a75a:	f06f 0301 	mvn.w	r3, #1
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1af      	bne.n	800a6c6 <osThreadFlagsWait+0x50>
 800a766:	e002      	b.n	800a76e <osThreadFlagsWait+0xf8>
            break;
 800a768:	bf00      	nop
 800a76a:	e000      	b.n	800a76e <osThreadFlagsWait+0xf8>
            break;
 800a76c:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a770:	4618      	mov	r0, r3
 800a772:	3730      	adds	r7, #48	; 0x30
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a780:	f3ef 8305 	mrs	r3, IPSR
 800a784:	60bb      	str	r3, [r7, #8]
  return(result);
 800a786:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <osDelay+0x1c>
    stat = osErrorISR;
 800a78c:	f06f 0305 	mvn.w	r3, #5
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	e007      	b.n	800a7a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f001 fec8 	bl	800c534 <vTaskDelay>
    }
  }

  return (stat);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b088      	sub	sp, #32
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ba:	f3ef 8305 	mrs	r3, IPSR
 800a7be:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7c0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d174      	bne.n	800a8b0 <osMutexNew+0x102>
    if (attr != NULL) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	61bb      	str	r3, [r7, #24]
 800a7d2:	e001      	b.n	800a7d8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <osMutexNew+0x3a>
      rmtx = 1U;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	617b      	str	r3, [r7, #20]
 800a7e6:	e001      	b.n	800a7ec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d15c      	bne.n	800a8b0 <osMutexNew+0x102>
      mem = -1;
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d015      	beq.n	800a82e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d006      	beq.n	800a818 <osMutexNew+0x6a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	2b4f      	cmp	r3, #79	; 0x4f
 800a810:	d902      	bls.n	800a818 <osMutexNew+0x6a>
          mem = 1;
 800a812:	2301      	movs	r3, #1
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	e00c      	b.n	800a832 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d108      	bne.n	800a832 <osMutexNew+0x84>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <osMutexNew+0x84>
            mem = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	613b      	str	r3, [r7, #16]
 800a82c:	e001      	b.n	800a832 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d112      	bne.n	800a85e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d007      	beq.n	800a84e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	4619      	mov	r1, r3
 800a844:	2004      	movs	r0, #4
 800a846:	f000 fd68 	bl	800b31a <xQueueCreateMutexStatic>
 800a84a:	61f8      	str	r0, [r7, #28]
 800a84c:	e016      	b.n	800a87c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	4619      	mov	r1, r3
 800a854:	2001      	movs	r0, #1
 800a856:	f000 fd60 	bl	800b31a <xQueueCreateMutexStatic>
 800a85a:	61f8      	str	r0, [r7, #28]
 800a85c:	e00e      	b.n	800a87c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10b      	bne.n	800a87c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d004      	beq.n	800a874 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a86a:	2004      	movs	r0, #4
 800a86c:	f000 fd3d 	bl	800b2ea <xQueueCreateMutex>
 800a870:	61f8      	str	r0, [r7, #28]
 800a872:	e003      	b.n	800a87c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a874:	2001      	movs	r0, #1
 800a876:	f000 fd38 	bl	800b2ea <xQueueCreateMutex>
 800a87a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00c      	beq.n	800a89c <osMutexNew+0xee>
        if (attr != NULL) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <osMutexNew+0xe2>
          name = attr->name;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	e001      	b.n	800a894 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a894:	68f9      	ldr	r1, [r7, #12]
 800a896:	69f8      	ldr	r0, [r7, #28]
 800a898:	f001 fc0c 	bl	800c0b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d006      	beq.n	800a8b0 <osMutexNew+0x102>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	f043 0301 	orr.w	r3, r3, #1
 800a8ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a8b0:	69fb      	ldr	r3, [r7, #28]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f023 0301 	bic.w	r3, r3, #1
 800a8ca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8d8:	f3ef 8305 	mrs	r3, IPSR
 800a8dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8de:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a8e4:	f06f 0305 	mvn.w	r3, #5
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e02c      	b.n	800a946 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d103      	bne.n	800a8fa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a8f2:	f06f 0303 	mvn.w	r3, #3
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	e025      	b.n	800a946 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d011      	beq.n	800a924 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6938      	ldr	r0, [r7, #16]
 800a904:	f000 fd58 	bl	800b3b8 <xQueueTakeMutexRecursive>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d01b      	beq.n	800a946 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d003      	beq.n	800a91c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a914:	f06f 0301 	mvn.w	r3, #1
 800a918:	617b      	str	r3, [r7, #20]
 800a91a:	e014      	b.n	800a946 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a91c:	f06f 0302 	mvn.w	r3, #2
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e010      	b.n	800a946 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6938      	ldr	r0, [r7, #16]
 800a928:	f001 f8ec 	bl	800bb04 <xQueueSemaphoreTake>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d009      	beq.n	800a946 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d003      	beq.n	800a940 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a938:	f06f 0301 	mvn.w	r3, #1
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	e002      	b.n	800a946 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a940:	f06f 0302 	mvn.w	r3, #2
 800a944:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a946:	697b      	ldr	r3, [r7, #20]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f023 0301 	bic.w	r3, r3, #1
 800a95e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a96c:	f3ef 8305 	mrs	r3, IPSR
 800a970:	60bb      	str	r3, [r7, #8]
  return(result);
 800a972:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a978:	f06f 0305 	mvn.w	r3, #5
 800a97c:	617b      	str	r3, [r7, #20]
 800a97e:	e01f      	b.n	800a9c0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a986:	f06f 0303 	mvn.w	r3, #3
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	e018      	b.n	800a9c0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d009      	beq.n	800a9a8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a994:	6938      	ldr	r0, [r7, #16]
 800a996:	f000 fcdb 	bl	800b350 <xQueueGiveMutexRecursive>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d00f      	beq.n	800a9c0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a9a0:	f06f 0302 	mvn.w	r3, #2
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	e00b      	b.n	800a9c0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6938      	ldr	r0, [r7, #16]
 800a9b0:	f000 fda2 	bl	800b4f8 <xQueueGenericSend>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d002      	beq.n	800a9c0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a9ba:	f06f 0302 	mvn.w	r3, #2
 800a9be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a9c0:	697b      	ldr	r3, [r7, #20]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b08a      	sub	sp, #40	; 0x28
 800a9ce:	af02      	add	r7, sp, #8
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9da:	f3ef 8305 	mrs	r3, IPSR
 800a9de:	613b      	str	r3, [r7, #16]
  return(result);
 800a9e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d175      	bne.n	800aad2 <osSemaphoreNew+0x108>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d072      	beq.n	800aad2 <osSemaphoreNew+0x108>
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d86e      	bhi.n	800aad2 <osSemaphoreNew+0x108>
    mem = -1;
 800a9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d015      	beq.n	800aa2c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d006      	beq.n	800aa16 <osSemaphoreNew+0x4c>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b4f      	cmp	r3, #79	; 0x4f
 800aa0e:	d902      	bls.n	800aa16 <osSemaphoreNew+0x4c>
        mem = 1;
 800aa10:	2301      	movs	r3, #1
 800aa12:	61bb      	str	r3, [r7, #24]
 800aa14:	e00c      	b.n	800aa30 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d108      	bne.n	800aa30 <osSemaphoreNew+0x66>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d104      	bne.n	800aa30 <osSemaphoreNew+0x66>
          mem = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	61bb      	str	r3, [r7, #24]
 800aa2a:	e001      	b.n	800aa30 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa36:	d04c      	beq.n	800aad2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d128      	bne.n	800aa90 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d10a      	bne.n	800aa5a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2203      	movs	r2, #3
 800aa4a:	9200      	str	r2, [sp, #0]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2100      	movs	r1, #0
 800aa50:	2001      	movs	r0, #1
 800aa52:	f000 fb5b 	bl	800b10c <xQueueGenericCreateStatic>
 800aa56:	61f8      	str	r0, [r7, #28]
 800aa58:	e005      	b.n	800aa66 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800aa5a:	2203      	movs	r2, #3
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	2001      	movs	r0, #1
 800aa60:	f000 fbcc 	bl	800b1fc <xQueueGenericCreate>
 800aa64:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d022      	beq.n	800aab2 <osSemaphoreNew+0xe8>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01f      	beq.n	800aab2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aa72:	2300      	movs	r3, #0
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	69f8      	ldr	r0, [r7, #28]
 800aa7a:	f000 fd3d 	bl	800b4f8 <xQueueGenericSend>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d016      	beq.n	800aab2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aa84:	69f8      	ldr	r0, [r7, #28]
 800aa86:	f001 f9c9 	bl	800be1c <vQueueDelete>
            hSemaphore = NULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]
 800aa8e:	e010      	b.n	800aab2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d108      	bne.n	800aaa8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	68b9      	ldr	r1, [r7, #8]
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 fcc0 	bl	800b424 <xQueueCreateCountingSemaphoreStatic>
 800aaa4:	61f8      	str	r0, [r7, #28]
 800aaa6:	e004      	b.n	800aab2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 fcf1 	bl	800b492 <xQueueCreateCountingSemaphore>
 800aab0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00c      	beq.n	800aad2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e001      	b.n	800aaca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aaca:	6979      	ldr	r1, [r7, #20]
 800aacc:	69f8      	ldr	r0, [r7, #28]
 800aace:	f001 faf1 	bl	800c0b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aad2:	69fb      	ldr	r3, [r7, #28]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aaf4:	f06f 0303 	mvn.w	r3, #3
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	e039      	b.n	800ab70 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aafc:	f3ef 8305 	mrs	r3, IPSR
 800ab00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab02:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d022      	beq.n	800ab4e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ab0e:	f06f 0303 	mvn.w	r3, #3
 800ab12:	617b      	str	r3, [r7, #20]
 800ab14:	e02c      	b.n	800ab70 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ab1a:	f107 0308 	add.w	r3, r7, #8
 800ab1e:	461a      	mov	r2, r3
 800ab20:	2100      	movs	r1, #0
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f001 f8fa 	bl	800bd1c <xQueueReceiveFromISR>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d003      	beq.n	800ab36 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ab2e:	f06f 0302 	mvn.w	r3, #2
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	e01c      	b.n	800ab70 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d019      	beq.n	800ab70 <osSemaphoreAcquire+0x94>
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <osSemaphoreAcquire+0xa0>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	e010      	b.n	800ab70 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6938      	ldr	r0, [r7, #16]
 800ab52:	f000 ffd7 	bl	800bb04 <xQueueSemaphoreTake>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d009      	beq.n	800ab70 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ab62:	f06f 0301 	mvn.w	r3, #1
 800ab66:	617b      	str	r3, [r7, #20]
 800ab68:	e002      	b.n	800ab70 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ab6a:	f06f 0302 	mvn.w	r3, #2
 800ab6e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ab70:	697b      	ldr	r3, [r7, #20]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	e000ed04 	.word	0xe000ed04

0800ab80 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ab96:	f06f 0303 	mvn.w	r3, #3
 800ab9a:	617b      	str	r3, [r7, #20]
 800ab9c:	e02c      	b.n	800abf8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9e:	f3ef 8305 	mrs	r3, IPSR
 800aba2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aba4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d01a      	beq.n	800abe0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800abaa:	2300      	movs	r3, #0
 800abac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	4619      	mov	r1, r3
 800abb4:	6938      	ldr	r0, [r7, #16]
 800abb6:	f000 fe38 	bl	800b82a <xQueueGiveFromISR>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d003      	beq.n	800abc8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800abc0:	f06f 0302 	mvn.w	r3, #2
 800abc4:	617b      	str	r3, [r7, #20]
 800abc6:	e017      	b.n	800abf8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d014      	beq.n	800abf8 <osSemaphoreRelease+0x78>
 800abce:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <osSemaphoreRelease+0x84>)
 800abd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	e00b      	b.n	800abf8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800abe0:	2300      	movs	r3, #0
 800abe2:	2200      	movs	r2, #0
 800abe4:	2100      	movs	r1, #0
 800abe6:	6938      	ldr	r0, [r7, #16]
 800abe8:	f000 fc86 	bl	800b4f8 <xQueueGenericSend>
 800abec:	4603      	mov	r3, r0
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d002      	beq.n	800abf8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800abf2:	f06f 0302 	mvn.w	r3, #2
 800abf6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800abf8:	697b      	ldr	r3, [r7, #20]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	e000ed04 	.word	0xe000ed04

0800ac08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac18:	f3ef 8305 	mrs	r3, IPSR
 800ac1c:	613b      	str	r3, [r7, #16]
  return(result);
 800ac1e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d15f      	bne.n	800ace4 <osMessageQueueNew+0xdc>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d05c      	beq.n	800ace4 <osMessageQueueNew+0xdc>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d059      	beq.n	800ace4 <osMessageQueueNew+0xdc>
    mem = -1;
 800ac30:	f04f 33ff 	mov.w	r3, #4294967295
 800ac34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d029      	beq.n	800ac90 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d012      	beq.n	800ac6a <osMessageQueueNew+0x62>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	2b4f      	cmp	r3, #79	; 0x4f
 800ac4a:	d90e      	bls.n	800ac6a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695a      	ldr	r2, [r3, #20]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	fb01 f303 	mul.w	r3, r1, r3
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d302      	bcc.n	800ac6a <osMessageQueueNew+0x62>
        mem = 1;
 800ac64:	2301      	movs	r3, #1
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	e014      	b.n	800ac94 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d110      	bne.n	800ac94 <osMessageQueueNew+0x8c>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10c      	bne.n	800ac94 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d108      	bne.n	800ac94 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d104      	bne.n	800ac94 <osMessageQueueNew+0x8c>
          mem = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	61bb      	str	r3, [r7, #24]
 800ac8e:	e001      	b.n	800ac94 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d10b      	bne.n	800acb2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691a      	ldr	r2, [r3, #16]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	2100      	movs	r1, #0
 800aca4:	9100      	str	r1, [sp, #0]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 fa2f 	bl	800b10c <xQueueGenericCreateStatic>
 800acae:	61f8      	str	r0, [r7, #28]
 800acb0:	e008      	b.n	800acc4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d105      	bne.n	800acc4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800acb8:	2200      	movs	r2, #0
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 fa9d 	bl	800b1fc <xQueueGenericCreate>
 800acc2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00c      	beq.n	800ace4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	e001      	b.n	800acdc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800acd8:	2300      	movs	r3, #0
 800acda:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800acdc:	6979      	ldr	r1, [r7, #20]
 800acde:	69f8      	ldr	r0, [r7, #28]
 800ace0:	f001 f9e8 	bl	800c0b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ace4:	69fb      	ldr	r3, [r7, #28]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3720      	adds	r7, #32
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
	...

0800acf0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad08:	f3ef 8305 	mrs	r3, IPSR
 800ad0c:	617b      	str	r3, [r7, #20]
  return(result);
 800ad0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d028      	beq.n	800ad66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d005      	beq.n	800ad26 <osMessageQueuePut+0x36>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <osMessageQueuePut+0x36>
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ad26:	f06f 0303 	mvn.w	r3, #3
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e038      	b.n	800ada0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ad32:	f107 0210 	add.w	r2, r7, #16
 800ad36:	2300      	movs	r3, #0
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	69b8      	ldr	r0, [r7, #24]
 800ad3c:	f000 fcda 	bl	800b6f4 <xQueueGenericSendFromISR>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d003      	beq.n	800ad4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ad46:	f06f 0302 	mvn.w	r3, #2
 800ad4a:	61fb      	str	r3, [r7, #28]
 800ad4c:	e028      	b.n	800ada0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d025      	beq.n	800ada0 <osMessageQueuePut+0xb0>
 800ad54:	4b15      	ldr	r3, [pc, #84]	; (800adac <osMessageQueuePut+0xbc>)
 800ad56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	e01c      	b.n	800ada0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <osMessageQueuePut+0x82>
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ad72:	f06f 0303 	mvn.w	r3, #3
 800ad76:	61fb      	str	r3, [r7, #28]
 800ad78:	e012      	b.n	800ada0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	69b8      	ldr	r0, [r7, #24]
 800ad82:	f000 fbb9 	bl	800b4f8 <xQueueGenericSend>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d009      	beq.n	800ada0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ad92:	f06f 0301 	mvn.w	r3, #1
 800ad96:	61fb      	str	r3, [r7, #28]
 800ad98:	e002      	b.n	800ada0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ad9a:	f06f 0302 	mvn.w	r3, #2
 800ad9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ada0:	69fb      	ldr	r3, [r7, #28]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3720      	adds	r7, #32
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	e000ed04 	.word	0xe000ed04

0800adb0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adc6:	f3ef 8305 	mrs	r3, IPSR
 800adca:	617b      	str	r3, [r7, #20]
  return(result);
 800adcc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800adce:	2b00      	cmp	r3, #0
 800add0:	d028      	beq.n	800ae24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <osMessageQueueGet+0x34>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <osMessageQueueGet+0x34>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d003      	beq.n	800adec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ade4:	f06f 0303 	mvn.w	r3, #3
 800ade8:	61fb      	str	r3, [r7, #28]
 800adea:	e037      	b.n	800ae5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800adec:	2300      	movs	r3, #0
 800adee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800adf0:	f107 0310 	add.w	r3, r7, #16
 800adf4:	461a      	mov	r2, r3
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	69b8      	ldr	r0, [r7, #24]
 800adfa:	f000 ff8f 	bl	800bd1c <xQueueReceiveFromISR>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d003      	beq.n	800ae0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ae04:	f06f 0302 	mvn.w	r3, #2
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	e027      	b.n	800ae5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d024      	beq.n	800ae5c <osMessageQueueGet+0xac>
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <osMessageQueueGet+0xb8>)
 800ae14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	e01b      	b.n	800ae5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <osMessageQueueGet+0x80>
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d103      	bne.n	800ae38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ae30:	f06f 0303 	mvn.w	r3, #3
 800ae34:	61fb      	str	r3, [r7, #28]
 800ae36:	e011      	b.n	800ae5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	69b8      	ldr	r0, [r7, #24]
 800ae3e:	f000 fd81 	bl	800b944 <xQueueReceive>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d009      	beq.n	800ae5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ae4e:	f06f 0301 	mvn.w	r3, #1
 800ae52:	61fb      	str	r3, [r7, #28]
 800ae54:	e002      	b.n	800ae5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ae56:	f06f 0302 	mvn.w	r3, #2
 800ae5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ae5c:	69fb      	ldr	r3, [r7, #28]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4a07      	ldr	r2, [pc, #28]	; (800ae98 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	4a06      	ldr	r2, [pc, #24]	; (800ae9c <vApplicationGetIdleTaskMemory+0x30>)
 800ae82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2280      	movs	r2, #128	; 0x80
 800ae88:	601a      	str	r2, [r3, #0]
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	200007e8 	.word	0x200007e8
 800ae9c:	200008a4 	.word	0x200008a4

0800aea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4a07      	ldr	r2, [pc, #28]	; (800aecc <vApplicationGetTimerTaskMemory+0x2c>)
 800aeb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	4a06      	ldr	r2, [pc, #24]	; (800aed0 <vApplicationGetTimerTaskMemory+0x30>)
 800aeb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aebe:	601a      	str	r2, [r3, #0]
}
 800aec0:	bf00      	nop
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	20000aa4 	.word	0x20000aa4
 800aed0:	20000b60 	.word	0x20000b60

0800aed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f103 0208 	add.w	r2, r3, #8
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f103 0208 	add.w	r2, r3, #8
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f103 0208 	add.w	r2, r3, #8
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af22:	bf00      	nop
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	689a      	ldr	r2, [r3, #8]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]
}
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8c:	d103      	bne.n	800af96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	e00c      	b.n	800afb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3308      	adds	r3, #8
 800af9a:	60fb      	str	r3, [r7, #12]
 800af9c:	e002      	b.n	800afa4 <vListInsert+0x2e>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	429a      	cmp	r2, r3
 800afae:	d2f6      	bcs.n	800af9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	601a      	str	r2, [r3, #0]
}
 800afdc:	bf00      	nop
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	6892      	ldr	r2, [r2, #8]
 800affe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	6852      	ldr	r2, [r2, #4]
 800b008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	429a      	cmp	r2, r3
 800b012:	d103      	bne.n	800b01c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689a      	ldr	r2, [r3, #8]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	1e5a      	subs	r2, r3, #1
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10a      	bne.n	800b066 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b066:	f002 ff5d 	bl	800df24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b072:	68f9      	ldr	r1, [r7, #12]
 800b074:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b076:	fb01 f303 	mul.w	r3, r1, r3
 800b07a:	441a      	add	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b096:	3b01      	subs	r3, #1
 800b098:	68f9      	ldr	r1, [r7, #12]
 800b09a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b09c:	fb01 f303 	mul.w	r3, r1, r3
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	22ff      	movs	r2, #255	; 0xff
 800b0aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	22ff      	movs	r2, #255	; 0xff
 800b0b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d114      	bne.n	800b0e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01a      	beq.n	800b0fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3310      	adds	r3, #16
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fd01 	bl	800cad0 <xTaskRemoveFromEventList>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <xQueueGenericReset+0xcc>)
 800b0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	e009      	b.n	800b0fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3310      	adds	r3, #16
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fef2 	bl	800aed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3324      	adds	r3, #36	; 0x24
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff feed 	bl	800aed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0fa:	f002 ff43 	bl	800df84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0fe:	2301      	movs	r3, #1
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	e000ed04 	.word	0xe000ed04

0800b10c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08e      	sub	sp, #56	; 0x38
 800b110:	af02      	add	r7, sp, #8
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <xQueueGenericCreateStatic+0x52>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <xQueueGenericCreateStatic+0x56>
 800b15e:	2301      	movs	r3, #1
 800b160:	e000      	b.n	800b164 <xQueueGenericCreateStatic+0x58>
 800b162:	2300      	movs	r3, #0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10a      	bne.n	800b17e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	623b      	str	r3, [r7, #32]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d102      	bne.n	800b18a <xQueueGenericCreateStatic+0x7e>
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <xQueueGenericCreateStatic+0x82>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e000      	b.n	800b190 <xQueueGenericCreateStatic+0x84>
 800b18e:	2300      	movs	r3, #0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	61fb      	str	r3, [r7, #28]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1aa:	2350      	movs	r3, #80	; 0x50
 800b1ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b50      	cmp	r3, #80	; 0x50
 800b1b2:	d00a      	beq.n	800b1ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	61bb      	str	r3, [r7, #24]
}
 800b1c6:	bf00      	nop
 800b1c8:	e7fe      	b.n	800b1c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00d      	beq.n	800b1f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f83f 	bl	800b270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3730      	adds	r7, #48	; 0x30
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08a      	sub	sp, #40	; 0x28
 800b200:	af02      	add	r7, sp, #8
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10a      	bne.n	800b226 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	613b      	str	r3, [r7, #16]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	fb02 f303 	mul.w	r3, r2, r3
 800b22e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	3350      	adds	r3, #80	; 0x50
 800b234:	4618      	mov	r0, r3
 800b236:	f002 ff97 	bl	800e168 <pvPortMalloc>
 800b23a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d011      	beq.n	800b266 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	3350      	adds	r3, #80	; 0x50
 800b24a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b254:	79fa      	ldrb	r2, [r7, #7]
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	4613      	mov	r3, r2
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 f805 	bl	800b270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b266:	69bb      	ldr	r3, [r7, #24]
	}
 800b268:	4618      	mov	r0, r3
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d103      	bne.n	800b28c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	e002      	b.n	800b292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b29e:	2101      	movs	r1, #1
 800b2a0:	69b8      	ldr	r0, [r7, #24]
 800b2a2:	f7ff fecb 	bl	800b03c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	78fa      	ldrb	r2, [r7, #3]
 800b2aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00e      	beq.n	800b2e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2100      	movs	r1, #0
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f90b 	bl	800b4f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b086      	sub	sp, #24
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	461a      	mov	r2, r3
 800b300:	6939      	ldr	r1, [r7, #16]
 800b302:	6978      	ldr	r0, [r7, #20]
 800b304:	f7ff ff7a 	bl	800b1fc <xQueueGenericCreate>
 800b308:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff ffd3 	bl	800b2b6 <prvInitialiseMutex>

		return xNewQueue;
 800b310:	68fb      	ldr	r3, [r7, #12]
	}
 800b312:	4618      	mov	r0, r3
 800b314:	3718      	adds	r7, #24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b088      	sub	sp, #32
 800b31e:	af02      	add	r7, sp, #8
 800b320:	4603      	mov	r3, r0
 800b322:	6039      	str	r1, [r7, #0]
 800b324:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b326:	2301      	movs	r3, #1
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	2300      	movs	r3, #0
 800b32c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2200      	movs	r2, #0
 800b336:	6939      	ldr	r1, [r7, #16]
 800b338:	6978      	ldr	r0, [r7, #20]
 800b33a:	f7ff fee7 	bl	800b10c <xQueueGenericCreateStatic>
 800b33e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff ffb8 	bl	800b2b6 <prvInitialiseMutex>

		return xNewQueue;
 800b346:	68fb      	ldr	r3, [r7, #12]
	}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b350:	b590      	push	{r4, r7, lr}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	60fb      	str	r3, [r7, #12]
}
 800b374:	bf00      	nop
 800b376:	e7fe      	b.n	800b376 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	689c      	ldr	r4, [r3, #8]
 800b37c:	f001 fd6a 	bl	800ce54 <xTaskGetCurrentTaskHandle>
 800b380:	4603      	mov	r3, r0
 800b382:	429c      	cmp	r4, r3
 800b384:	d111      	bne.n	800b3aa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	1e5a      	subs	r2, r3, #1
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b398:	2300      	movs	r3, #0
 800b39a:	2200      	movs	r2, #0
 800b39c:	2100      	movs	r1, #0
 800b39e:	6938      	ldr	r0, [r7, #16]
 800b3a0:	f000 f8aa 	bl	800b4f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	e001      	b.n	800b3ae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b3ae:	697b      	ldr	r3, [r7, #20]
	}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	371c      	adds	r7, #28
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}

0800b3b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b3b8:	b590      	push	{r4, r7, lr}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60fb      	str	r3, [r7, #12]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	689c      	ldr	r4, [r3, #8]
 800b3e6:	f001 fd35 	bl	800ce54 <xTaskGetCurrentTaskHandle>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d107      	bne.n	800b400 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	e00c      	b.n	800b41a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6938      	ldr	r0, [r7, #16]
 800b404:	f000 fb7e 	bl	800bb04 <xQueueSemaphoreTake>
 800b408:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d004      	beq.n	800b41a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b41a:	697b      	ldr	r3, [r7, #20]
	}
 800b41c:	4618      	mov	r0, r3
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd90      	pop	{r4, r7, pc}

0800b424 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08a      	sub	sp, #40	; 0x28
 800b428:	af02      	add	r7, sp, #8
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10a      	bne.n	800b44c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	61bb      	str	r3, [r7, #24]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	429a      	cmp	r2, r3
 800b452:	d90a      	bls.n	800b46a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	617b      	str	r3, [r7, #20]
}
 800b466:	bf00      	nop
 800b468:	e7fe      	b.n	800b468 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b46a:	2302      	movs	r3, #2
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	2100      	movs	r1, #0
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f7ff fe49 	bl	800b10c <xQueueGenericCreateStatic>
 800b47a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d002      	beq.n	800b488 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b488:	69fb      	ldr	r3, [r7, #28]
	}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3720      	adds	r7, #32
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b492:	b580      	push	{r7, lr}
 800b494:	b086      	sub	sp, #24
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	613b      	str	r3, [r7, #16]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d90a      	bls.n	800b4d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	60fb      	str	r3, [r7, #12]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	2100      	movs	r1, #0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff fe8e 	bl	800b1fc <xQueueGenericCreate>
 800b4e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b4ee:	697b      	ldr	r3, [r7, #20]
	}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08e      	sub	sp, #56	; 0x38
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b506:	2300      	movs	r3, #0
 800b508:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10a      	bne.n	800b52a <xQueueGenericSend+0x32>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d103      	bne.n	800b538 <xQueueGenericSend+0x40>
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <xQueueGenericSend+0x44>
 800b538:	2301      	movs	r3, #1
 800b53a:	e000      	b.n	800b53e <xQueueGenericSend+0x46>
 800b53c:	2300      	movs	r3, #0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <xQueueGenericSend+0x60>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d103      	bne.n	800b566 <xQueueGenericSend+0x6e>
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d101      	bne.n	800b56a <xQueueGenericSend+0x72>
 800b566:	2301      	movs	r3, #1
 800b568:	e000      	b.n	800b56c <xQueueGenericSend+0x74>
 800b56a:	2300      	movs	r3, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xQueueGenericSend+0x8e>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	623b      	str	r3, [r7, #32]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b586:	f001 fc75 	bl	800ce74 <xTaskGetSchedulerState>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d102      	bne.n	800b596 <xQueueGenericSend+0x9e>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <xQueueGenericSend+0xa2>
 800b596:	2301      	movs	r3, #1
 800b598:	e000      	b.n	800b59c <xQueueGenericSend+0xa4>
 800b59a:	2300      	movs	r3, #0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	61fb      	str	r3, [r7, #28]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5b6:	f002 fcb5 	bl	800df24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d302      	bcc.n	800b5cc <xQueueGenericSend+0xd4>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d129      	bne.n	800b620 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	68b9      	ldr	r1, [r7, #8]
 800b5d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5d2:	f000 fc5e 	bl	800be92 <prvCopyDataToQueue>
 800b5d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d010      	beq.n	800b602 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	3324      	adds	r3, #36	; 0x24
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f001 fa73 	bl	800cad0 <xTaskRemoveFromEventList>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d013      	beq.n	800b618 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b5f0:	4b3f      	ldr	r3, [pc, #252]	; (800b6f0 <xQueueGenericSend+0x1f8>)
 800b5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	e00a      	b.n	800b618 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d007      	beq.n	800b618 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b608:	4b39      	ldr	r3, [pc, #228]	; (800b6f0 <xQueueGenericSend+0x1f8>)
 800b60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b618:	f002 fcb4 	bl	800df84 <vPortExitCritical>
				return pdPASS;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e063      	b.n	800b6e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d103      	bne.n	800b62e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b626:	f002 fcad 	bl	800df84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b62a:	2300      	movs	r3, #0
 800b62c:	e05c      	b.n	800b6e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	2b00      	cmp	r3, #0
 800b632:	d106      	bne.n	800b642 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b634:	f107 0314 	add.w	r3, r7, #20
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 faad 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b63e:	2301      	movs	r3, #1
 800b640:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b642:	f002 fc9f 	bl	800df84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b646:	f001 f819 	bl	800c67c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b64a:	f002 fc6b 	bl	800df24 <vPortEnterCritical>
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b654:	b25b      	sxtb	r3, r3
 800b656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65a:	d103      	bne.n	800b664 <xQueueGenericSend+0x16c>
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b66a:	b25b      	sxtb	r3, r3
 800b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b670:	d103      	bne.n	800b67a <xQueueGenericSend+0x182>
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b67a:	f002 fc83 	bl	800df84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b67e:	1d3a      	adds	r2, r7, #4
 800b680:	f107 0314 	add.w	r3, r7, #20
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f001 fa9c 	bl	800cbc4 <xTaskCheckForTimeOut>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d124      	bne.n	800b6dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b694:	f000 fcf5 	bl	800c082 <prvIsQueueFull>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d018      	beq.n	800b6d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	3310      	adds	r3, #16
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 f9c2 	bl	800ca30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ae:	f000 fc80 	bl	800bfb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6b2:	f000 fff1 	bl	800c698 <xTaskResumeAll>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f47f af7c 	bne.w	800b5b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b6be:	4b0c      	ldr	r3, [pc, #48]	; (800b6f0 <xQueueGenericSend+0x1f8>)
 800b6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	e772      	b.n	800b5b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6d2:	f000 fc6e 	bl	800bfb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6d6:	f000 ffdf 	bl	800c698 <xTaskResumeAll>
 800b6da:	e76c      	b.n	800b5b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b6dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6de:	f000 fc68 	bl	800bfb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6e2:	f000 ffd9 	bl	800c698 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b6e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3738      	adds	r7, #56	; 0x38
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	e000ed04 	.word	0xe000ed04

0800b6f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b090      	sub	sp, #64	; 0x40
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d103      	bne.n	800b730 <xQueueGenericSendFromISR+0x3c>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <xQueueGenericSendFromISR+0x40>
 800b730:	2301      	movs	r3, #1
 800b732:	e000      	b.n	800b736 <xQueueGenericSendFromISR+0x42>
 800b734:	2300      	movs	r3, #0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10a      	bne.n	800b750 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b02      	cmp	r3, #2
 800b754:	d103      	bne.n	800b75e <xQueueGenericSendFromISR+0x6a>
 800b756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d101      	bne.n	800b762 <xQueueGenericSendFromISR+0x6e>
 800b75e:	2301      	movs	r3, #1
 800b760:	e000      	b.n	800b764 <xQueueGenericSendFromISR+0x70>
 800b762:	2300      	movs	r3, #0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	623b      	str	r3, [r7, #32]
}
 800b77a:	bf00      	nop
 800b77c:	e7fe      	b.n	800b77c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b77e:	f002 fcb3 	bl	800e0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b782:	f3ef 8211 	mrs	r2, BASEPRI
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	61fa      	str	r2, [r7, #28]
 800b798:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b79a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b79c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d302      	bcc.n	800b7b0 <xQueueGenericSendFromISR+0xbc>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d12f      	bne.n	800b810 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	68b9      	ldr	r1, [r7, #8]
 800b7c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7c6:	f000 fb64 	bl	800be92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b7ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d2:	d112      	bne.n	800b7fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d016      	beq.n	800b80a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	3324      	adds	r3, #36	; 0x24
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f001 f975 	bl	800cad0 <xTaskRemoveFromEventList>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00e      	beq.n	800b80a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00b      	beq.n	800b80a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	e007      	b.n	800b80a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b7fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7fe:	3301      	adds	r3, #1
 800b800:	b2db      	uxtb	r3, r3
 800b802:	b25a      	sxtb	r2, r3
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b80a:	2301      	movs	r3, #1
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b80e:	e001      	b.n	800b814 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b810:	2300      	movs	r3, #0
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b816:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b81e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b822:	4618      	mov	r0, r3
 800b824:	3740      	adds	r7, #64	; 0x40
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b08e      	sub	sp, #56	; 0x38
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	623b      	str	r3, [r7, #32]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	61fb      	str	r3, [r7, #28]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d103      	bne.n	800b882 <xQueueGiveFromISR+0x58>
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <xQueueGiveFromISR+0x5c>
 800b882:	2301      	movs	r3, #1
 800b884:	e000      	b.n	800b888 <xQueueGiveFromISR+0x5e>
 800b886:	2300      	movs	r3, #0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	61bb      	str	r3, [r7, #24]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8a2:	f002 fc21 	bl	800e0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800b8a6:	f3ef 8211 	mrs	r2, BASEPRI
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	617a      	str	r2, [r7, #20]
 800b8bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b8be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d22b      	bcs.n	800b92a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d112      	bne.n	800b914 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d016      	beq.n	800b924 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	3324      	adds	r3, #36	; 0x24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f001 f8e8 	bl	800cad0 <xTaskRemoveFromEventList>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00e      	beq.n	800b924 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00b      	beq.n	800b924 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2201      	movs	r2, #1
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	e007      	b.n	800b924 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b918:	3301      	adds	r3, #1
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	b25a      	sxtb	r2, r3
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b924:	2301      	movs	r3, #1
 800b926:	637b      	str	r3, [r7, #52]	; 0x34
 800b928:	e001      	b.n	800b92e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f383 8811 	msr	BASEPRI, r3
}
 800b938:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3738      	adds	r7, #56	; 0x38
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08c      	sub	sp, #48	; 0x30
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b950:	2300      	movs	r3, #0
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <xQueueReceive+0x30>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	623b      	str	r3, [r7, #32]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d103      	bne.n	800b982 <xQueueReceive+0x3e>
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <xQueueReceive+0x42>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <xQueueReceive+0x44>
 800b986:	2300      	movs	r3, #0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <xQueueReceive+0x5e>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	61fb      	str	r3, [r7, #28]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9a2:	f001 fa67 	bl	800ce74 <xTaskGetSchedulerState>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <xQueueReceive+0x6e>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <xQueueReceive+0x72>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <xQueueReceive+0x74>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <xQueueReceive+0x8e>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61bb      	str	r3, [r7, #24]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9d2:	f002 faa7 	bl	800df24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01f      	beq.n	800ba22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e6:	f000 fabe 	bl	800bf66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	1e5a      	subs	r2, r3, #1
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00f      	beq.n	800ba1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fc:	3310      	adds	r3, #16
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 f866 	bl	800cad0 <xTaskRemoveFromEventList>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d007      	beq.n	800ba1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba0a:	4b3d      	ldr	r3, [pc, #244]	; (800bb00 <xQueueReceive+0x1bc>)
 800ba0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba1a:	f002 fab3 	bl	800df84 <vPortExitCritical>
				return pdPASS;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e069      	b.n	800baf6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba28:	f002 faac 	bl	800df84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e062      	b.n	800baf6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba36:	f107 0310 	add.w	r3, r7, #16
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 f8ac 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba44:	f002 fa9e 	bl	800df84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba48:	f000 fe18 	bl	800c67c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba4c:	f002 fa6a 	bl	800df24 <vPortEnterCritical>
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba56:	b25b      	sxtb	r3, r3
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5c:	d103      	bne.n	800ba66 <xQueueReceive+0x122>
 800ba5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba6c:	b25b      	sxtb	r3, r3
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba72:	d103      	bne.n	800ba7c <xQueueReceive+0x138>
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba7c:	f002 fa82 	bl	800df84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba80:	1d3a      	adds	r2, r7, #4
 800ba82:	f107 0310 	add.w	r3, r7, #16
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 f89b 	bl	800cbc4 <xTaskCheckForTimeOut>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d123      	bne.n	800badc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba96:	f000 fade 	bl	800c056 <prvIsQueueEmpty>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d017      	beq.n	800bad0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	3324      	adds	r3, #36	; 0x24
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 ffc1 	bl	800ca30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800baae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bab0:	f000 fa7f 	bl	800bfb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bab4:	f000 fdf0 	bl	800c698 <xTaskResumeAll>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d189      	bne.n	800b9d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800babe:	4b10      	ldr	r3, [pc, #64]	; (800bb00 <xQueueReceive+0x1bc>)
 800bac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	e780      	b.n	800b9d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad2:	f000 fa6e 	bl	800bfb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bad6:	f000 fddf 	bl	800c698 <xTaskResumeAll>
 800bada:	e77a      	b.n	800b9d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800badc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bade:	f000 fa68 	bl	800bfb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bae2:	f000 fdd9 	bl	800c698 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae8:	f000 fab5 	bl	800c056 <prvIsQueueEmpty>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f43f af6f 	beq.w	800b9d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800baf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3730      	adds	r7, #48	; 0x30
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	e000ed04 	.word	0xe000ed04

0800bb04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08e      	sub	sp, #56	; 0x38
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bb16:	2300      	movs	r3, #0
 800bb18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	623b      	str	r3, [r7, #32]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	61fb      	str	r3, [r7, #28]
}
 800bb50:	bf00      	nop
 800bb52:	e7fe      	b.n	800bb52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb54:	f001 f98e 	bl	800ce74 <xTaskGetSchedulerState>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d102      	bne.n	800bb64 <xQueueSemaphoreTake+0x60>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <xQueueSemaphoreTake+0x64>
 800bb64:	2301      	movs	r3, #1
 800bb66:	e000      	b.n	800bb6a <xQueueSemaphoreTake+0x66>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	61bb      	str	r3, [r7, #24]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb84:	f002 f9ce 	bl	800df24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d024      	beq.n	800bbde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	1e5a      	subs	r2, r3, #1
 800bb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d104      	bne.n	800bbae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bba4:	f001 fadc 	bl	800d160 <pvTaskIncrementMutexHeldCount>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00f      	beq.n	800bbd6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	3310      	adds	r3, #16
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 ff88 	bl	800cad0 <xTaskRemoveFromEventList>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbc6:	4b54      	ldr	r3, [pc, #336]	; (800bd18 <xQueueSemaphoreTake+0x214>)
 800bbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbd6:	f002 f9d5 	bl	800df84 <vPortExitCritical>
				return pdPASS;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e097      	b.n	800bd0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d111      	bne.n	800bc08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00a      	beq.n	800bc00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	617b      	str	r3, [r7, #20]
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bc00:	f002 f9c0 	bl	800df84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e082      	b.n	800bd0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc0e:	f107 030c 	add.w	r3, r7, #12
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 ffc0 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc1c:	f002 f9b2 	bl	800df84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc20:	f000 fd2c 	bl	800c67c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc24:	f002 f97e 	bl	800df24 <vPortEnterCritical>
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc2e:	b25b      	sxtb	r3, r3
 800bc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc34:	d103      	bne.n	800bc3e <xQueueSemaphoreTake+0x13a>
 800bc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc44:	b25b      	sxtb	r3, r3
 800bc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4a:	d103      	bne.n	800bc54 <xQueueSemaphoreTake+0x150>
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc54:	f002 f996 	bl	800df84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc58:	463a      	mov	r2, r7
 800bc5a:	f107 030c 	add.w	r3, r7, #12
 800bc5e:	4611      	mov	r1, r2
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 ffaf 	bl	800cbc4 <xTaskCheckForTimeOut>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d132      	bne.n	800bcd2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc6e:	f000 f9f2 	bl	800c056 <prvIsQueueEmpty>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d026      	beq.n	800bcc6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bc80:	f002 f950 	bl	800df24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 f911 	bl	800ceb0 <xTaskPriorityInherit>
 800bc8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bc90:	f002 f978 	bl	800df84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	3324      	adds	r3, #36	; 0x24
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fec7 	bl	800ca30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bca4:	f000 f985 	bl	800bfb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bca8:	f000 fcf6 	bl	800c698 <xTaskResumeAll>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f47f af68 	bne.w	800bb84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bcb4:	4b18      	ldr	r3, [pc, #96]	; (800bd18 <xQueueSemaphoreTake+0x214>)
 800bcb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	e75e      	b.n	800bb84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bcc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcc8:	f000 f973 	bl	800bfb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bccc:	f000 fce4 	bl	800c698 <xTaskResumeAll>
 800bcd0:	e758      	b.n	800bb84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bcd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcd4:	f000 f96d 	bl	800bfb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcd8:	f000 fcde 	bl	800c698 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcde:	f000 f9ba 	bl	800c056 <prvIsQueueEmpty>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f43f af4d 	beq.w	800bb84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00d      	beq.n	800bd0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bcf0:	f002 f918 	bl	800df24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bcf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcf6:	f000 f8b4 	bl	800be62 <prvGetDisinheritPriorityAfterTimeout>
 800bcfa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd02:	4618      	mov	r0, r3
 800bd04:	f001 f9aa 	bl	800d05c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bd08:	f002 f93c 	bl	800df84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3738      	adds	r7, #56	; 0x38
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b08e      	sub	sp, #56	; 0x38
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10a      	bne.n	800bd48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	623b      	str	r3, [r7, #32]
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d103      	bne.n	800bd56 <xQueueReceiveFromISR+0x3a>
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <xQueueReceiveFromISR+0x3e>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <xQueueReceiveFromISR+0x40>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	61fb      	str	r3, [r7, #28]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd76:	f002 f9b7 	bl	800e0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800bd7a:	f3ef 8211 	mrs	r2, BASEPRI
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	61ba      	str	r2, [r7, #24]
 800bd90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d02f      	beq.n	800be02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdac:	68b9      	ldr	r1, [r7, #8]
 800bdae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdb0:	f000 f8d9 	bl	800bf66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	1e5a      	subs	r2, r3, #1
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bdbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc4:	d112      	bne.n	800bdec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d016      	beq.n	800bdfc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	3310      	adds	r3, #16
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fe7c 	bl	800cad0 <xTaskRemoveFromEventList>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00e      	beq.n	800bdfc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00b      	beq.n	800bdfc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	601a      	str	r2, [r3, #0]
 800bdea:	e007      	b.n	800bdfc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bdec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	b25a      	sxtb	r2, r3
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	637b      	str	r3, [r7, #52]	; 0x34
 800be00:	e001      	b.n	800be06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800be02:	2300      	movs	r3, #0
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f383 8811 	msr	BASEPRI, r3
}
 800be10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be14:	4618      	mov	r0, r3
 800be16:	3738      	adds	r7, #56	; 0x38
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <vQueueDelete+0x28>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	60bb      	str	r3, [r7, #8]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 f95f 	bl	800c108 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f002 fa53 	bl	800e300 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be5a:	bf00      	nop
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d006      	beq.n	800be80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	e001      	b.n	800be84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be84:	68fb      	ldr	r3, [r7, #12]
	}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b086      	sub	sp, #24
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10d      	bne.n	800becc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d14d      	bne.n	800bf54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f001 f85f 	bl	800cf80 <xTaskPriorityDisinherit>
 800bec2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	609a      	str	r2, [r3, #8]
 800beca:	e043      	b.n	800bf54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d119      	bne.n	800bf06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6858      	ldr	r0, [r3, #4]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	461a      	mov	r2, r3
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	f002 fc58 	bl	800e792 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	441a      	add	r2, r3
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d32b      	bcc.n	800bf54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	605a      	str	r2, [r3, #4]
 800bf04:	e026      	b.n	800bf54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	68d8      	ldr	r0, [r3, #12]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	461a      	mov	r2, r3
 800bf10:	68b9      	ldr	r1, [r7, #8]
 800bf12:	f002 fc3e 	bl	800e792 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	68da      	ldr	r2, [r3, #12]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1e:	425b      	negs	r3, r3
 800bf20:	441a      	add	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	68da      	ldr	r2, [r3, #12]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d207      	bcs.n	800bf42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	689a      	ldr	r2, [r3, #8]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3a:	425b      	negs	r3, r3
 800bf3c:	441a      	add	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d105      	bne.n	800bf54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf5c:	697b      	ldr	r3, [r7, #20]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d018      	beq.n	800bfaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf80:	441a      	add	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d303      	bcc.n	800bf9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68d9      	ldr	r1, [r3, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6838      	ldr	r0, [r7, #0]
 800bfa6:	f002 fbf4 	bl	800e792 <memcpy>
	}
}
 800bfaa:	bf00      	nop
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bfba:	f001 ffb3 	bl	800df24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfc6:	e011      	b.n	800bfec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d012      	beq.n	800bff6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3324      	adds	r3, #36	; 0x24
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 fd7b 	bl	800cad0 <xTaskRemoveFromEventList>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfe0:	f000 fe52 	bl	800cc88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	dce9      	bgt.n	800bfc8 <prvUnlockQueue+0x16>
 800bff4:	e000      	b.n	800bff8 <prvUnlockQueue+0x46>
					break;
 800bff6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	22ff      	movs	r2, #255	; 0xff
 800bffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c000:	f001 ffc0 	bl	800df84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c004:	f001 ff8e 	bl	800df24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c00e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c010:	e011      	b.n	800c036 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d012      	beq.n	800c040 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3310      	adds	r3, #16
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 fd56 	bl	800cad0 <xTaskRemoveFromEventList>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c02a:	f000 fe2d 	bl	800cc88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
 800c030:	3b01      	subs	r3, #1
 800c032:	b2db      	uxtb	r3, r3
 800c034:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dce9      	bgt.n	800c012 <prvUnlockQueue+0x60>
 800c03e:	e000      	b.n	800c042 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c040:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	22ff      	movs	r2, #255	; 0xff
 800c046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c04a:	f001 ff9b 	bl	800df84 <vPortExitCritical>
}
 800c04e:	bf00      	nop
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c05e:	f001 ff61 	bl	800df24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	2b00      	cmp	r3, #0
 800c068:	d102      	bne.n	800c070 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c06a:	2301      	movs	r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	e001      	b.n	800c074 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c074:	f001 ff86 	bl	800df84 <vPortExitCritical>

	return xReturn;
 800c078:	68fb      	ldr	r3, [r7, #12]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c08a:	f001 ff4b 	bl	800df24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c096:	429a      	cmp	r2, r3
 800c098:	d102      	bne.n	800c0a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c09a:	2301      	movs	r3, #1
 800c09c:	60fb      	str	r3, [r7, #12]
 800c09e:	e001      	b.n	800c0a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0a4:	f001 ff6e 	bl	800df84 <vPortExitCritical>

	return xReturn;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60fb      	str	r3, [r7, #12]
 800c0c2:	e014      	b.n	800c0ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c0c4:	4a0f      	ldr	r2, [pc, #60]	; (800c104 <vQueueAddToRegistry+0x50>)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10b      	bne.n	800c0e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c0d0:	490c      	ldr	r1, [pc, #48]	; (800c104 <vQueueAddToRegistry+0x50>)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c0da:	4a0a      	ldr	r2, [pc, #40]	; (800c104 <vQueueAddToRegistry+0x50>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	4413      	add	r3, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0e6:	e006      	b.n	800c0f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b07      	cmp	r3, #7
 800c0f2:	d9e7      	bls.n	800c0c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	20000f60 	.word	0x20000f60

0800c108 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c110:	2300      	movs	r3, #0
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e016      	b.n	800c144 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c116:	4a10      	ldr	r2, [pc, #64]	; (800c158 <vQueueUnregisterQueue+0x50>)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	00db      	lsls	r3, r3, #3
 800c11c:	4413      	add	r3, r2
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d10b      	bne.n	800c13e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c126:	4a0c      	ldr	r2, [pc, #48]	; (800c158 <vQueueUnregisterQueue+0x50>)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2100      	movs	r1, #0
 800c12c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c130:	4a09      	ldr	r2, [pc, #36]	; (800c158 <vQueueUnregisterQueue+0x50>)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	4413      	add	r3, r2
 800c138:	2200      	movs	r2, #0
 800c13a:	605a      	str	r2, [r3, #4]
				break;
 800c13c:	e006      	b.n	800c14c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3301      	adds	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b07      	cmp	r3, #7
 800c148:	d9e5      	bls.n	800c116 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	20000f60 	.word	0x20000f60

0800c15c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c16c:	f001 feda 	bl	800df24 <vPortEnterCritical>
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c176:	b25b      	sxtb	r3, r3
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17c:	d103      	bne.n	800c186 <vQueueWaitForMessageRestricted+0x2a>
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c18c:	b25b      	sxtb	r3, r3
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d103      	bne.n	800c19c <vQueueWaitForMessageRestricted+0x40>
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c19c:	f001 fef2 	bl	800df84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	3324      	adds	r3, #36	; 0x24
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fc61 	bl	800ca78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1b6:	6978      	ldr	r0, [r7, #20]
 800c1b8:	f7ff fefb 	bl	800bfb2 <prvUnlockQueue>
	}
 800c1bc:	bf00      	nop
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08e      	sub	sp, #56	; 0x38
 800c1c8:	af04      	add	r7, sp, #16
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	623b      	str	r3, [r7, #32]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10a      	bne.n	800c20a <xTaskCreateStatic+0x46>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	61fb      	str	r3, [r7, #28]
}
 800c206:	bf00      	nop
 800c208:	e7fe      	b.n	800c208 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c20a:	23bc      	movs	r3, #188	; 0xbc
 800c20c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	2bbc      	cmp	r3, #188	; 0xbc
 800c212:	d00a      	beq.n	800c22a <xTaskCreateStatic+0x66>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	61bb      	str	r3, [r7, #24]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c22a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d01e      	beq.n	800c270 <xTaskCreateStatic+0xac>
 800c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01b      	beq.n	800c270 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c240:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c244:	2202      	movs	r2, #2
 800c246:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c24a:	2300      	movs	r3, #0
 800c24c:	9303      	str	r3, [sp, #12]
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	9302      	str	r3, [sp, #8]
 800c252:	f107 0314 	add.w	r3, r7, #20
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	68b9      	ldr	r1, [r7, #8]
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 f850 	bl	800c308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c26a:	f000 f8f3 	bl	800c454 <prvAddNewTaskToReadyList>
 800c26e:	e001      	b.n	800c274 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c270:	2300      	movs	r3, #0
 800c272:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c274:	697b      	ldr	r3, [r7, #20]
	}
 800c276:	4618      	mov	r0, r3
 800c278:	3728      	adds	r7, #40	; 0x28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b08c      	sub	sp, #48	; 0x30
 800c282:	af04      	add	r7, sp, #16
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	603b      	str	r3, [r7, #0]
 800c28a:	4613      	mov	r3, r2
 800c28c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c28e:	88fb      	ldrh	r3, [r7, #6]
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4618      	mov	r0, r3
 800c294:	f001 ff68 	bl	800e168 <pvPortMalloc>
 800c298:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00e      	beq.n	800c2be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2a0:	20bc      	movs	r0, #188	; 0xbc
 800c2a2:	f001 ff61 	bl	800e168 <pvPortMalloc>
 800c2a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	631a      	str	r2, [r3, #48]	; 0x30
 800c2b4:	e005      	b.n	800c2c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2b6:	6978      	ldr	r0, [r7, #20]
 800c2b8:	f002 f822 	bl	800e300 <vPortFree>
 800c2bc:	e001      	b.n	800c2c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d017      	beq.n	800c2f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2d0:	88fa      	ldrh	r2, [r7, #6]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9303      	str	r3, [sp, #12]
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	68b9      	ldr	r1, [r7, #8]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 f80e 	bl	800c308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2ec:	69f8      	ldr	r0, [r7, #28]
 800c2ee:	f000 f8b1 	bl	800c454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	61bb      	str	r3, [r7, #24]
 800c2f6:	e002      	b.n	800c2fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
	}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	461a      	mov	r2, r3
 800c320:	21a5      	movs	r1, #165	; 0xa5
 800c322:	f002 fa44 	bl	800e7ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c330:	3b01      	subs	r3, #1
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	f023 0307 	bic.w	r3, r3, #7
 800c33e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	617b      	str	r3, [r7, #20]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d01f      	beq.n	800c3a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c366:	2300      	movs	r3, #0
 800c368:	61fb      	str	r3, [r7, #28]
 800c36a:	e012      	b.n	800c392 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	4413      	add	r3, r2
 800c372:	7819      	ldrb	r1, [r3, #0]
 800c374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	4413      	add	r3, r2
 800c37a:	3334      	adds	r3, #52	; 0x34
 800c37c:	460a      	mov	r2, r1
 800c37e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	4413      	add	r3, r2
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d006      	beq.n	800c39a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	3301      	adds	r3, #1
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2b0f      	cmp	r3, #15
 800c396:	d9e9      	bls.n	800c36c <prvInitialiseNewTask+0x64>
 800c398:	e000      	b.n	800c39c <prvInitialiseNewTask+0x94>
			{
				break;
 800c39a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3a4:	e003      	b.n	800c3ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b0:	2b37      	cmp	r3, #55	; 0x37
 800c3b2:	d901      	bls.n	800c3b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3b4:	2337      	movs	r3, #55	; 0x37
 800c3b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fda0 	bl	800af14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	3318      	adds	r3, #24
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fd9b 	bl	800af14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	3354      	adds	r3, #84	; 0x54
 800c408:	2260      	movs	r2, #96	; 0x60
 800c40a:	2100      	movs	r1, #0
 800c40c:	4618      	mov	r0, r3
 800c40e:	f002 f9ce 	bl	800e7ae <memset>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	4a0c      	ldr	r2, [pc, #48]	; (800c448 <prvInitialiseNewTask+0x140>)
 800c416:	659a      	str	r2, [r3, #88]	; 0x58
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	4a0c      	ldr	r2, [pc, #48]	; (800c44c <prvInitialiseNewTask+0x144>)
 800c41c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	4a0b      	ldr	r2, [pc, #44]	; (800c450 <prvInitialiseNewTask+0x148>)
 800c422:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	68f9      	ldr	r1, [r7, #12]
 800c428:	69b8      	ldr	r0, [r7, #24]
 800c42a:	f001 fc51 	bl	800dcd0 <pxPortInitialiseStack>
 800c42e:	4602      	mov	r2, r0
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c440:	bf00      	nop
 800c442:	3720      	adds	r7, #32
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	08013690 	.word	0x08013690
 800c44c:	080136b0 	.word	0x080136b0
 800c450:	08013670 	.word	0x08013670

0800c454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c45c:	f001 fd62 	bl	800df24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c460:	4b2d      	ldr	r3, [pc, #180]	; (800c518 <prvAddNewTaskToReadyList+0xc4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a2c      	ldr	r2, [pc, #176]	; (800c518 <prvAddNewTaskToReadyList+0xc4>)
 800c468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c46a:	4b2c      	ldr	r3, [pc, #176]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c472:	4a2a      	ldr	r2, [pc, #168]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c478:	4b27      	ldr	r3, [pc, #156]	; (800c518 <prvAddNewTaskToReadyList+0xc4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d110      	bne.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c480:	f000 fc26 	bl	800ccd0 <prvInitialiseTaskLists>
 800c484:	e00d      	b.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c486:	4b26      	ldr	r3, [pc, #152]	; (800c520 <prvAddNewTaskToReadyList+0xcc>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d109      	bne.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c48e:	4b23      	ldr	r3, [pc, #140]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	429a      	cmp	r2, r3
 800c49a:	d802      	bhi.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c49c:	4a1f      	ldr	r2, [pc, #124]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4a2:	4b20      	ldr	r3, [pc, #128]	; (800c524 <prvAddNewTaskToReadyList+0xd0>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	4a1e      	ldr	r2, [pc, #120]	; (800c524 <prvAddNewTaskToReadyList+0xd0>)
 800c4aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <prvAddNewTaskToReadyList+0xd0>)
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	4b1b      	ldr	r3, [pc, #108]	; (800c528 <prvAddNewTaskToReadyList+0xd4>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d903      	bls.n	800c4c8 <prvAddNewTaskToReadyList+0x74>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	4a18      	ldr	r2, [pc, #96]	; (800c528 <prvAddNewTaskToReadyList+0xd4>)
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4a15      	ldr	r2, [pc, #84]	; (800c52c <prvAddNewTaskToReadyList+0xd8>)
 800c4d6:	441a      	add	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f7fe fd25 	bl	800af2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4e4:	f001 fd4e 	bl	800df84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4e8:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <prvAddNewTaskToReadyList+0xcc>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00e      	beq.n	800c50e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d207      	bcs.n	800c50e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4fe:	4b0c      	ldr	r3, [pc, #48]	; (800c530 <prvAddNewTaskToReadyList+0xdc>)
 800c500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20001474 	.word	0x20001474
 800c51c:	20000fa0 	.word	0x20000fa0
 800c520:	20001480 	.word	0x20001480
 800c524:	20001490 	.word	0x20001490
 800c528:	2000147c 	.word	0x2000147c
 800c52c:	20000fa4 	.word	0x20000fa4
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d017      	beq.n	800c576 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c546:	4b13      	ldr	r3, [pc, #76]	; (800c594 <vTaskDelay+0x60>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <vTaskDelay+0x30>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	60bb      	str	r3, [r7, #8]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c564:	f000 f88a 	bl	800c67c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c568:	2100      	movs	r1, #0
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f001 f80e 	bl	800d58c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c570:	f000 f892 	bl	800c698 <xTaskResumeAll>
 800c574:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d107      	bne.n	800c58c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <vTaskDelay+0x64>)
 800c57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c58c:	bf00      	nop
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	2000149c 	.word	0x2000149c
 800c598:	e000ed04 	.word	0xe000ed04

0800c59c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5aa:	463a      	mov	r2, r7
 800c5ac:	1d39      	adds	r1, r7, #4
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fc5a 	bl	800ae6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	9202      	str	r2, [sp, #8]
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	4924      	ldr	r1, [pc, #144]	; (800c65c <vTaskStartScheduler+0xc0>)
 800c5cc:	4824      	ldr	r0, [pc, #144]	; (800c660 <vTaskStartScheduler+0xc4>)
 800c5ce:	f7ff fdf9 	bl	800c1c4 <xTaskCreateStatic>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4a23      	ldr	r2, [pc, #140]	; (800c664 <vTaskStartScheduler+0xc8>)
 800c5d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5d8:	4b22      	ldr	r3, [pc, #136]	; (800c664 <vTaskStartScheduler+0xc8>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	617b      	str	r3, [r7, #20]
 800c5e4:	e001      	b.n	800c5ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d102      	bne.n	800c5f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c5f0:	f001 f820 	bl	800d634 <xTimerCreateTimerTask>
 800c5f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d11b      	bne.n	800c634 <vTaskStartScheduler+0x98>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	613b      	str	r3, [r7, #16]
}
 800c60e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c610:	4b15      	ldr	r3, [pc, #84]	; (800c668 <vTaskStartScheduler+0xcc>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3354      	adds	r3, #84	; 0x54
 800c616:	4a15      	ldr	r2, [pc, #84]	; (800c66c <vTaskStartScheduler+0xd0>)
 800c618:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c61a:	4b15      	ldr	r3, [pc, #84]	; (800c670 <vTaskStartScheduler+0xd4>)
 800c61c:	f04f 32ff 	mov.w	r2, #4294967295
 800c620:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c622:	4b14      	ldr	r3, [pc, #80]	; (800c674 <vTaskStartScheduler+0xd8>)
 800c624:	2201      	movs	r2, #1
 800c626:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c628:	4b13      	ldr	r3, [pc, #76]	; (800c678 <vTaskStartScheduler+0xdc>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c62e:	f001 fbd7 	bl	800dde0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c632:	e00e      	b.n	800c652 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63a:	d10a      	bne.n	800c652 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	60fb      	str	r3, [r7, #12]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <vTaskStartScheduler+0xb4>
}
 800c652:	bf00      	nop
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	08013444 	.word	0x08013444
 800c660:	0800cca1 	.word	0x0800cca1
 800c664:	20001498 	.word	0x20001498
 800c668:	20000fa0 	.word	0x20000fa0
 800c66c:	20000014 	.word	0x20000014
 800c670:	20001494 	.word	0x20001494
 800c674:	20001480 	.word	0x20001480
 800c678:	20001478 	.word	0x20001478

0800c67c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c680:	4b04      	ldr	r3, [pc, #16]	; (800c694 <vTaskSuspendAll+0x18>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	4a03      	ldr	r2, [pc, #12]	; (800c694 <vTaskSuspendAll+0x18>)
 800c688:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c68a:	bf00      	nop
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	2000149c 	.word	0x2000149c

0800c698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c6a6:	4b42      	ldr	r3, [pc, #264]	; (800c7b0 <xTaskResumeAll+0x118>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10a      	bne.n	800c6c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	603b      	str	r3, [r7, #0]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6c4:	f001 fc2e 	bl	800df24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6c8:	4b39      	ldr	r3, [pc, #228]	; (800c7b0 <xTaskResumeAll+0x118>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	4a38      	ldr	r2, [pc, #224]	; (800c7b0 <xTaskResumeAll+0x118>)
 800c6d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6d2:	4b37      	ldr	r3, [pc, #220]	; (800c7b0 <xTaskResumeAll+0x118>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d162      	bne.n	800c7a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6da:	4b36      	ldr	r3, [pc, #216]	; (800c7b4 <xTaskResumeAll+0x11c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d05e      	beq.n	800c7a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6e2:	e02f      	b.n	800c744 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e4:	4b34      	ldr	r3, [pc, #208]	; (800c7b8 <xTaskResumeAll+0x120>)
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3318      	adds	r3, #24
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fe fc79 	bl	800afe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe fc74 	bl	800afe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c704:	4b2d      	ldr	r3, [pc, #180]	; (800c7bc <xTaskResumeAll+0x124>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d903      	bls.n	800c714 <xTaskResumeAll+0x7c>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c710:	4a2a      	ldr	r2, [pc, #168]	; (800c7bc <xTaskResumeAll+0x124>)
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	4613      	mov	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4a27      	ldr	r2, [pc, #156]	; (800c7c0 <xTaskResumeAll+0x128>)
 800c722:	441a      	add	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3304      	adds	r3, #4
 800c728:	4619      	mov	r1, r3
 800c72a:	4610      	mov	r0, r2
 800c72c:	f7fe fbff 	bl	800af2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c734:	4b23      	ldr	r3, [pc, #140]	; (800c7c4 <xTaskResumeAll+0x12c>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d302      	bcc.n	800c744 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c73e:	4b22      	ldr	r3, [pc, #136]	; (800c7c8 <xTaskResumeAll+0x130>)
 800c740:	2201      	movs	r2, #1
 800c742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c744:	4b1c      	ldr	r3, [pc, #112]	; (800c7b8 <xTaskResumeAll+0x120>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1cb      	bne.n	800c6e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c752:	f000 fb5f 	bl	800ce14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c756:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <xTaskResumeAll+0x134>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d010      	beq.n	800c784 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c762:	f000 f847 	bl	800c7f4 <xTaskIncrementTick>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c76c:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <xTaskResumeAll+0x130>)
 800c76e:	2201      	movs	r2, #1
 800c770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3b01      	subs	r3, #1
 800c776:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1f1      	bne.n	800c762 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c77e:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <xTaskResumeAll+0x134>)
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c784:	4b10      	ldr	r3, [pc, #64]	; (800c7c8 <xTaskResumeAll+0x130>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d009      	beq.n	800c7a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c790:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <xTaskResumeAll+0x138>)
 800c792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7a0:	f001 fbf0 	bl	800df84 <vPortExitCritical>

	return xAlreadyYielded;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	2000149c 	.word	0x2000149c
 800c7b4:	20001474 	.word	0x20001474
 800c7b8:	20001434 	.word	0x20001434
 800c7bc:	2000147c 	.word	0x2000147c
 800c7c0:	20000fa4 	.word	0x20000fa4
 800c7c4:	20000fa0 	.word	0x20000fa0
 800c7c8:	20001488 	.word	0x20001488
 800c7cc:	20001484 	.word	0x20001484
 800c7d0:	e000ed04 	.word	0xe000ed04

0800c7d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c7da:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <xTaskGetTickCount+0x1c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c7e0:	687b      	ldr	r3, [r7, #4]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	20001478 	.word	0x20001478

0800c7f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7fe:	4b4f      	ldr	r3, [pc, #316]	; (800c93c <xTaskIncrementTick+0x148>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	f040 808f 	bne.w	800c926 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c808:	4b4d      	ldr	r3, [pc, #308]	; (800c940 <xTaskIncrementTick+0x14c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3301      	adds	r3, #1
 800c80e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c810:	4a4b      	ldr	r2, [pc, #300]	; (800c940 <xTaskIncrementTick+0x14c>)
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d120      	bne.n	800c85e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c81c:	4b49      	ldr	r3, [pc, #292]	; (800c944 <xTaskIncrementTick+0x150>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00a      	beq.n	800c83c <xTaskIncrementTick+0x48>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	603b      	str	r3, [r7, #0]
}
 800c838:	bf00      	nop
 800c83a:	e7fe      	b.n	800c83a <xTaskIncrementTick+0x46>
 800c83c:	4b41      	ldr	r3, [pc, #260]	; (800c944 <xTaskIncrementTick+0x150>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	60fb      	str	r3, [r7, #12]
 800c842:	4b41      	ldr	r3, [pc, #260]	; (800c948 <xTaskIncrementTick+0x154>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a3f      	ldr	r2, [pc, #252]	; (800c944 <xTaskIncrementTick+0x150>)
 800c848:	6013      	str	r3, [r2, #0]
 800c84a:	4a3f      	ldr	r2, [pc, #252]	; (800c948 <xTaskIncrementTick+0x154>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	4b3e      	ldr	r3, [pc, #248]	; (800c94c <xTaskIncrementTick+0x158>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	4a3d      	ldr	r2, [pc, #244]	; (800c94c <xTaskIncrementTick+0x158>)
 800c858:	6013      	str	r3, [r2, #0]
 800c85a:	f000 fadb 	bl	800ce14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c85e:	4b3c      	ldr	r3, [pc, #240]	; (800c950 <xTaskIncrementTick+0x15c>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	693a      	ldr	r2, [r7, #16]
 800c864:	429a      	cmp	r2, r3
 800c866:	d349      	bcc.n	800c8fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c868:	4b36      	ldr	r3, [pc, #216]	; (800c944 <xTaskIncrementTick+0x150>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d104      	bne.n	800c87c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c872:	4b37      	ldr	r3, [pc, #220]	; (800c950 <xTaskIncrementTick+0x15c>)
 800c874:	f04f 32ff 	mov.w	r2, #4294967295
 800c878:	601a      	str	r2, [r3, #0]
					break;
 800c87a:	e03f      	b.n	800c8fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c87c:	4b31      	ldr	r3, [pc, #196]	; (800c944 <xTaskIncrementTick+0x150>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d203      	bcs.n	800c89c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c894:	4a2e      	ldr	r2, [pc, #184]	; (800c950 <xTaskIncrementTick+0x15c>)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c89a:	e02f      	b.n	800c8fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fe fba1 	bl	800afe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d004      	beq.n	800c8b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	3318      	adds	r3, #24
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fe fb98 	bl	800afe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8bc:	4b25      	ldr	r3, [pc, #148]	; (800c954 <xTaskIncrementTick+0x160>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d903      	bls.n	800c8cc <xTaskIncrementTick+0xd8>
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	4a22      	ldr	r2, [pc, #136]	; (800c954 <xTaskIncrementTick+0x160>)
 800c8ca:	6013      	str	r3, [r2, #0]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4a1f      	ldr	r2, [pc, #124]	; (800c958 <xTaskIncrementTick+0x164>)
 800c8da:	441a      	add	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	f7fe fb23 	bl	800af2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ec:	4b1b      	ldr	r3, [pc, #108]	; (800c95c <xTaskIncrementTick+0x168>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d3b8      	bcc.n	800c868 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8fa:	e7b5      	b.n	800c868 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8fc:	4b17      	ldr	r3, [pc, #92]	; (800c95c <xTaskIncrementTick+0x168>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c902:	4915      	ldr	r1, [pc, #84]	; (800c958 <xTaskIncrementTick+0x164>)
 800c904:	4613      	mov	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	4413      	add	r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	440b      	add	r3, r1
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d901      	bls.n	800c918 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c914:	2301      	movs	r3, #1
 800c916:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c918:	4b11      	ldr	r3, [pc, #68]	; (800c960 <xTaskIncrementTick+0x16c>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d007      	beq.n	800c930 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c920:	2301      	movs	r3, #1
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	e004      	b.n	800c930 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c926:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <xTaskIncrementTick+0x170>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3301      	adds	r3, #1
 800c92c:	4a0d      	ldr	r2, [pc, #52]	; (800c964 <xTaskIncrementTick+0x170>)
 800c92e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c930:	697b      	ldr	r3, [r7, #20]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3718      	adds	r7, #24
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	2000149c 	.word	0x2000149c
 800c940:	20001478 	.word	0x20001478
 800c944:	2000142c 	.word	0x2000142c
 800c948:	20001430 	.word	0x20001430
 800c94c:	2000148c 	.word	0x2000148c
 800c950:	20001494 	.word	0x20001494
 800c954:	2000147c 	.word	0x2000147c
 800c958:	20000fa4 	.word	0x20000fa4
 800c95c:	20000fa0 	.word	0x20000fa0
 800c960:	20001488 	.word	0x20001488
 800c964:	20001484 	.word	0x20001484

0800c968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c96e:	4b2a      	ldr	r3, [pc, #168]	; (800ca18 <vTaskSwitchContext+0xb0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d003      	beq.n	800c97e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c976:	4b29      	ldr	r3, [pc, #164]	; (800ca1c <vTaskSwitchContext+0xb4>)
 800c978:	2201      	movs	r2, #1
 800c97a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c97c:	e046      	b.n	800ca0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c97e:	4b27      	ldr	r3, [pc, #156]	; (800ca1c <vTaskSwitchContext+0xb4>)
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c984:	4b26      	ldr	r3, [pc, #152]	; (800ca20 <vTaskSwitchContext+0xb8>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	e010      	b.n	800c9ae <vTaskSwitchContext+0x46>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10a      	bne.n	800c9a8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	607b      	str	r3, [r7, #4]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <vTaskSwitchContext+0x3e>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	60fb      	str	r3, [r7, #12]
 800c9ae:	491d      	ldr	r1, [pc, #116]	; (800ca24 <vTaskSwitchContext+0xbc>)
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	440b      	add	r3, r1
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0e4      	beq.n	800c98c <vTaskSwitchContext+0x24>
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4a15      	ldr	r2, [pc, #84]	; (800ca24 <vTaskSwitchContext+0xbc>)
 800c9ce:	4413      	add	r3, r2
 800c9d0:	60bb      	str	r3, [r7, #8]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	605a      	str	r2, [r3, #4]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	685a      	ldr	r2, [r3, #4]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	3308      	adds	r3, #8
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d104      	bne.n	800c9f2 <vTaskSwitchContext+0x8a>
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	4a0b      	ldr	r2, [pc, #44]	; (800ca28 <vTaskSwitchContext+0xc0>)
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	4a08      	ldr	r2, [pc, #32]	; (800ca20 <vTaskSwitchContext+0xb8>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca02:	4b09      	ldr	r3, [pc, #36]	; (800ca28 <vTaskSwitchContext+0xc0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3354      	adds	r3, #84	; 0x54
 800ca08:	4a08      	ldr	r2, [pc, #32]	; (800ca2c <vTaskSwitchContext+0xc4>)
 800ca0a:	6013      	str	r3, [r2, #0]
}
 800ca0c:	bf00      	nop
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	2000149c 	.word	0x2000149c
 800ca1c:	20001488 	.word	0x20001488
 800ca20:	2000147c 	.word	0x2000147c
 800ca24:	20000fa4 	.word	0x20000fa4
 800ca28:	20000fa0 	.word	0x20000fa0
 800ca2c:	20000014 	.word	0x20000014

0800ca30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60fb      	str	r3, [r7, #12]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca56:	4b07      	ldr	r3, [pc, #28]	; (800ca74 <vTaskPlaceOnEventList+0x44>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3318      	adds	r3, #24
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7fe fa89 	bl	800af76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca64:	2101      	movs	r1, #1
 800ca66:	6838      	ldr	r0, [r7, #0]
 800ca68:	f000 fd90 	bl	800d58c <prvAddCurrentTaskToDelayedList>
}
 800ca6c:	bf00      	nop
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20000fa0 	.word	0x20000fa0

0800ca78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	617b      	str	r3, [r7, #20]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800caa0:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <vTaskPlaceOnEventListRestricted+0x54>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3318      	adds	r3, #24
 800caa6:	4619      	mov	r1, r3
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f7fe fa40 	bl	800af2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cab4:	f04f 33ff 	mov.w	r3, #4294967295
 800cab8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	68b8      	ldr	r0, [r7, #8]
 800cabe:	f000 fd65 	bl	800d58c <prvAddCurrentTaskToDelayedList>
	}
 800cac2:	bf00      	nop
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000fa0 	.word	0x20000fa0

0800cad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10a      	bne.n	800cafc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	60fb      	str	r3, [r7, #12]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	3318      	adds	r3, #24
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fe fa71 	bl	800afe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb06:	4b1e      	ldr	r3, [pc, #120]	; (800cb80 <xTaskRemoveFromEventList+0xb0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d11d      	bne.n	800cb4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	3304      	adds	r3, #4
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fa68 	bl	800afe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4b19      	ldr	r3, [pc, #100]	; (800cb84 <xTaskRemoveFromEventList+0xb4>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d903      	bls.n	800cb2c <xTaskRemoveFromEventList+0x5c>
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb28:	4a16      	ldr	r2, [pc, #88]	; (800cb84 <xTaskRemoveFromEventList+0xb4>)
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	4613      	mov	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <xTaskRemoveFromEventList+0xb8>)
 800cb3a:	441a      	add	r2, r3
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7fe f9f3 	bl	800af2e <vListInsertEnd>
 800cb48:	e005      	b.n	800cb56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	3318      	adds	r3, #24
 800cb4e:	4619      	mov	r1, r3
 800cb50:	480e      	ldr	r0, [pc, #56]	; (800cb8c <xTaskRemoveFromEventList+0xbc>)
 800cb52:	f7fe f9ec 	bl	800af2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <xTaskRemoveFromEventList+0xc0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d905      	bls.n	800cb70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <xTaskRemoveFromEventList+0xc4>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	e001      	b.n	800cb74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb74:	697b      	ldr	r3, [r7, #20]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	2000149c 	.word	0x2000149c
 800cb84:	2000147c 	.word	0x2000147c
 800cb88:	20000fa4 	.word	0x20000fa4
 800cb8c:	20001434 	.word	0x20001434
 800cb90:	20000fa0 	.word	0x20000fa0
 800cb94:	20001488 	.word	0x20001488

0800cb98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <vTaskInternalSetTimeOutState+0x24>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cba8:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <vTaskInternalSetTimeOutState+0x28>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	605a      	str	r2, [r3, #4]
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	2000148c 	.word	0x2000148c
 800cbc0:	20001478 	.word	0x20001478

0800cbc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	613b      	str	r3, [r7, #16]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10a      	bne.n	800cc06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	60fb      	str	r3, [r7, #12]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cc06:	f001 f98d 	bl	800df24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc0a:	4b1d      	ldr	r3, [pc, #116]	; (800cc80 <xTaskCheckForTimeOut+0xbc>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	69ba      	ldr	r2, [r7, #24]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc22:	d102      	bne.n	800cc2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61fb      	str	r3, [r7, #28]
 800cc28:	e023      	b.n	800cc72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	4b15      	ldr	r3, [pc, #84]	; (800cc84 <xTaskCheckForTimeOut+0xc0>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d007      	beq.n	800cc46 <xTaskCheckForTimeOut+0x82>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d302      	bcc.n	800cc46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc40:	2301      	movs	r3, #1
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	e015      	b.n	800cc72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d20b      	bcs.n	800cc68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	1ad2      	subs	r2, r2, r3
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff ff9b 	bl	800cb98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
 800cc66:	e004      	b.n	800cc72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc72:	f001 f987 	bl	800df84 <vPortExitCritical>

	return xReturn;
 800cc76:	69fb      	ldr	r3, [r7, #28]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3720      	adds	r7, #32
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20001478 	.word	0x20001478
 800cc84:	2000148c 	.word	0x2000148c

0800cc88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc8c:	4b03      	ldr	r3, [pc, #12]	; (800cc9c <vTaskMissedYield+0x14>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	601a      	str	r2, [r3, #0]
}
 800cc92:	bf00      	nop
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	20001488 	.word	0x20001488

0800cca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cca8:	f000 f852 	bl	800cd50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ccac:	4b06      	ldr	r3, [pc, #24]	; (800ccc8 <prvIdleTask+0x28>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d9f9      	bls.n	800cca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <prvIdleTask+0x2c>)
 800ccb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ccc4:	e7f0      	b.n	800cca8 <prvIdleTask+0x8>
 800ccc6:	bf00      	nop
 800ccc8:	20000fa4 	.word	0x20000fa4
 800cccc:	e000ed04 	.word	0xe000ed04

0800ccd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	607b      	str	r3, [r7, #4]
 800ccda:	e00c      	b.n	800ccf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4a12      	ldr	r2, [pc, #72]	; (800cd30 <prvInitialiseTaskLists+0x60>)
 800cce8:	4413      	add	r3, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe f8f2 	bl	800aed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	607b      	str	r3, [r7, #4]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b37      	cmp	r3, #55	; 0x37
 800ccfa:	d9ef      	bls.n	800ccdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ccfc:	480d      	ldr	r0, [pc, #52]	; (800cd34 <prvInitialiseTaskLists+0x64>)
 800ccfe:	f7fe f8e9 	bl	800aed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd02:	480d      	ldr	r0, [pc, #52]	; (800cd38 <prvInitialiseTaskLists+0x68>)
 800cd04:	f7fe f8e6 	bl	800aed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd08:	480c      	ldr	r0, [pc, #48]	; (800cd3c <prvInitialiseTaskLists+0x6c>)
 800cd0a:	f7fe f8e3 	bl	800aed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd0e:	480c      	ldr	r0, [pc, #48]	; (800cd40 <prvInitialiseTaskLists+0x70>)
 800cd10:	f7fe f8e0 	bl	800aed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd14:	480b      	ldr	r0, [pc, #44]	; (800cd44 <prvInitialiseTaskLists+0x74>)
 800cd16:	f7fe f8dd 	bl	800aed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd1a:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <prvInitialiseTaskLists+0x78>)
 800cd1c:	4a05      	ldr	r2, [pc, #20]	; (800cd34 <prvInitialiseTaskLists+0x64>)
 800cd1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <prvInitialiseTaskLists+0x7c>)
 800cd22:	4a05      	ldr	r2, [pc, #20]	; (800cd38 <prvInitialiseTaskLists+0x68>)
 800cd24:	601a      	str	r2, [r3, #0]
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	20000fa4 	.word	0x20000fa4
 800cd34:	20001404 	.word	0x20001404
 800cd38:	20001418 	.word	0x20001418
 800cd3c:	20001434 	.word	0x20001434
 800cd40:	20001448 	.word	0x20001448
 800cd44:	20001460 	.word	0x20001460
 800cd48:	2000142c 	.word	0x2000142c
 800cd4c:	20001430 	.word	0x20001430

0800cd50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd56:	e019      	b.n	800cd8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd58:	f001 f8e4 	bl	800df24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd5c:	4b10      	ldr	r3, [pc, #64]	; (800cda0 <prvCheckTasksWaitingTermination+0x50>)
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3304      	adds	r3, #4
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe f93d 	bl	800afe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd6e:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <prvCheckTasksWaitingTermination+0x54>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	4a0b      	ldr	r2, [pc, #44]	; (800cda4 <prvCheckTasksWaitingTermination+0x54>)
 800cd76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd78:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <prvCheckTasksWaitingTermination+0x58>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	4a0a      	ldr	r2, [pc, #40]	; (800cda8 <prvCheckTasksWaitingTermination+0x58>)
 800cd80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd82:	f001 f8ff 	bl	800df84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f810 	bl	800cdac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd8c:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <prvCheckTasksWaitingTermination+0x58>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1e1      	bne.n	800cd58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20001448 	.word	0x20001448
 800cda4:	20001474 	.word	0x20001474
 800cda8:	2000145c 	.word	0x2000145c

0800cdac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3354      	adds	r3, #84	; 0x54
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f002 fa0d 	bl	800f1d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d108      	bne.n	800cdda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f001 fa97 	bl	800e300 <vPortFree>
				vPortFree( pxTCB );
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f001 fa94 	bl	800e300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdd8:	e018      	b.n	800ce0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d103      	bne.n	800cdec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f001 fa8b 	bl	800e300 <vPortFree>
	}
 800cdea:	e00f      	b.n	800ce0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d00a      	beq.n	800ce0c <prvDeleteTCB+0x60>
	__asm volatile
 800cdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	60fb      	str	r3, [r7, #12]
}
 800ce08:	bf00      	nop
 800ce0a:	e7fe      	b.n	800ce0a <prvDeleteTCB+0x5e>
	}
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <prvResetNextTaskUnblockTime+0x38>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d104      	bne.n	800ce2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <prvResetNextTaskUnblockTime+0x3c>)
 800ce26:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce2c:	e008      	b.n	800ce40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2e:	4b07      	ldr	r3, [pc, #28]	; (800ce4c <prvResetNextTaskUnblockTime+0x38>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	4a04      	ldr	r2, [pc, #16]	; (800ce50 <prvResetNextTaskUnblockTime+0x3c>)
 800ce3e:	6013      	str	r3, [r2, #0]
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	2000142c 	.word	0x2000142c
 800ce50:	20001494 	.word	0x20001494

0800ce54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ce5a:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <xTaskGetCurrentTaskHandle+0x1c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ce60:	687b      	ldr	r3, [r7, #4]
	}
 800ce62:	4618      	mov	r0, r3
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	20000fa0 	.word	0x20000fa0

0800ce74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce7a:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <xTaskGetSchedulerState+0x34>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d102      	bne.n	800ce88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce82:	2301      	movs	r3, #1
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	e008      	b.n	800ce9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce88:	4b08      	ldr	r3, [pc, #32]	; (800ceac <xTaskGetSchedulerState+0x38>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d102      	bne.n	800ce96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce90:	2302      	movs	r3, #2
 800ce92:	607b      	str	r3, [r7, #4]
 800ce94:	e001      	b.n	800ce9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce96:	2300      	movs	r3, #0
 800ce98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce9a:	687b      	ldr	r3, [r7, #4]
	}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	20001480 	.word	0x20001480
 800ceac:	2000149c 	.word	0x2000149c

0800ceb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d051      	beq.n	800cf6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceca:	4b2a      	ldr	r3, [pc, #168]	; (800cf74 <xTaskPriorityInherit+0xc4>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d241      	bcs.n	800cf58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	db06      	blt.n	800ceea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cedc:	4b25      	ldr	r3, [pc, #148]	; (800cf74 <xTaskPriorityInherit+0xc4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	6959      	ldr	r1, [r3, #20]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef2:	4613      	mov	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	4a1f      	ldr	r2, [pc, #124]	; (800cf78 <xTaskPriorityInherit+0xc8>)
 800cefc:	4413      	add	r3, r2
 800cefe:	4299      	cmp	r1, r3
 800cf00:	d122      	bne.n	800cf48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	3304      	adds	r3, #4
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe f86e 	bl	800afe8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf0c:	4b19      	ldr	r3, [pc, #100]	; (800cf74 <xTaskPriorityInherit+0xc4>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1a:	4b18      	ldr	r3, [pc, #96]	; (800cf7c <xTaskPriorityInherit+0xcc>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d903      	bls.n	800cf2a <xTaskPriorityInherit+0x7a>
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf26:	4a15      	ldr	r2, [pc, #84]	; (800cf7c <xTaskPriorityInherit+0xcc>)
 800cf28:	6013      	str	r3, [r2, #0]
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2e:	4613      	mov	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4413      	add	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	4a10      	ldr	r2, [pc, #64]	; (800cf78 <xTaskPriorityInherit+0xc8>)
 800cf38:	441a      	add	r2, r3
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f7fd fff4 	bl	800af2e <vListInsertEnd>
 800cf46:	e004      	b.n	800cf52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf48:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <xTaskPriorityInherit+0xc4>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cf52:	2301      	movs	r3, #1
 800cf54:	60fb      	str	r3, [r7, #12]
 800cf56:	e008      	b.n	800cf6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <xTaskPriorityInherit+0xc4>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d201      	bcs.n	800cf6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cf66:	2301      	movs	r3, #1
 800cf68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
	}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20000fa0 	.word	0x20000fa0
 800cf78:	20000fa4 	.word	0x20000fa4
 800cf7c:	2000147c 	.word	0x2000147c

0800cf80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d056      	beq.n	800d044 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf96:	4b2e      	ldr	r3, [pc, #184]	; (800d050 <xTaskPriorityDisinherit+0xd0>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d00a      	beq.n	800cfb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	60fb      	str	r3, [r7, #12]
}
 800cfb2:	bf00      	nop
 800cfb4:	e7fe      	b.n	800cfb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	60bb      	str	r3, [r7, #8]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfd8:	1e5a      	subs	r2, r3, #1
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d02c      	beq.n	800d044 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d128      	bne.n	800d044 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	3304      	adds	r3, #4
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fd fff6 	bl	800afe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d014:	4b0f      	ldr	r3, [pc, #60]	; (800d054 <xTaskPriorityDisinherit+0xd4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d903      	bls.n	800d024 <xTaskPriorityDisinherit+0xa4>
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d020:	4a0c      	ldr	r2, [pc, #48]	; (800d054 <xTaskPriorityDisinherit+0xd4>)
 800d022:	6013      	str	r3, [r2, #0]
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d028:	4613      	mov	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4a09      	ldr	r2, [pc, #36]	; (800d058 <xTaskPriorityDisinherit+0xd8>)
 800d032:	441a      	add	r2, r3
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	3304      	adds	r3, #4
 800d038:	4619      	mov	r1, r3
 800d03a:	4610      	mov	r0, r2
 800d03c:	f7fd ff77 	bl	800af2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d040:	2301      	movs	r3, #1
 800d042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d044:	697b      	ldr	r3, [r7, #20]
	}
 800d046:	4618      	mov	r0, r3
 800d048:	3718      	adds	r7, #24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20000fa0 	.word	0x20000fa0
 800d054:	2000147c 	.word	0x2000147c
 800d058:	20000fa4 	.word	0x20000fa4

0800d05c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d06a:	2301      	movs	r3, #1
 800d06c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d06a      	beq.n	800d14a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	60fb      	str	r3, [r7, #12]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d902      	bls.n	800d0a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	61fb      	str	r3, [r7, #28]
 800d0a0:	e002      	b.n	800d0a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	69fa      	ldr	r2, [r7, #28]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d04b      	beq.n	800d14a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d146      	bne.n	800d14a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d0bc:	4b25      	ldr	r3, [pc, #148]	; (800d154 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d10a      	bne.n	800d0dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ca:	f383 8811 	msr	BASEPRI, r3
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	60bb      	str	r3, [r7, #8]
}
 800d0d8:	bf00      	nop
 800d0da:	e7fe      	b.n	800d0da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	69fa      	ldr	r2, [r7, #28]
 800d0e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	699b      	ldr	r3, [r3, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	db04      	blt.n	800d0fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	6959      	ldr	r1, [r3, #20]
 800d0fe:	693a      	ldr	r2, [r7, #16]
 800d100:	4613      	mov	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4a13      	ldr	r2, [pc, #76]	; (800d158 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d10a:	4413      	add	r3, r2
 800d10c:	4299      	cmp	r1, r3
 800d10e:	d11c      	bne.n	800d14a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	3304      	adds	r3, #4
 800d114:	4618      	mov	r0, r3
 800d116:	f7fd ff67 	bl	800afe8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d11e:	4b0f      	ldr	r3, [pc, #60]	; (800d15c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	429a      	cmp	r2, r3
 800d124:	d903      	bls.n	800d12e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12a:	4a0c      	ldr	r2, [pc, #48]	; (800d15c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d132:	4613      	mov	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4413      	add	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4a07      	ldr	r2, [pc, #28]	; (800d158 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d13c:	441a      	add	r2, r3
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	3304      	adds	r3, #4
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7fd fef2 	bl	800af2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d14a:	bf00      	nop
 800d14c:	3720      	adds	r7, #32
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	20000fa0 	.word	0x20000fa0
 800d158:	20000fa4 	.word	0x20000fa4
 800d15c:	2000147c 	.word	0x2000147c

0800d160 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d160:	b480      	push	{r7}
 800d162:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d164:	4b07      	ldr	r3, [pc, #28]	; (800d184 <pvTaskIncrementMutexHeldCount+0x24>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d004      	beq.n	800d176 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <pvTaskIncrementMutexHeldCount+0x24>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d172:	3201      	adds	r2, #1
 800d174:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d176:	4b03      	ldr	r3, [pc, #12]	; (800d184 <pvTaskIncrementMutexHeldCount+0x24>)
 800d178:	681b      	ldr	r3, [r3, #0]
	}
 800d17a:	4618      	mov	r0, r3
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	20000fa0 	.word	0x20000fa0

0800d188 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d196:	f000 fec5 	bl	800df24 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d19a:	4b29      	ldr	r3, [pc, #164]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d01c      	beq.n	800d1e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d1a8:	4b25      	ldr	r3, [pc, #148]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	43d2      	mvns	r2, r2
 800d1b4:	400a      	ands	r2, r1
 800d1b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d1ba:	4b21      	ldr	r3, [pc, #132]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00b      	beq.n	800d1e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	6838      	ldr	r0, [r7, #0]
 800d1ce:	f000 f9dd 	bl	800d58c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d1d2:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <xTaskNotifyWait+0xbc>)
 800d1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d1e2:	f000 fecf 	bl	800df84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d1e6:	f000 fe9d 	bl	800df24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d005      	beq.n	800d1fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d1f0:	4b13      	ldr	r3, [pc, #76]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d1fc:	4b10      	ldr	r3, [pc, #64]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b02      	cmp	r3, #2
 800d208:	d002      	beq.n	800d210 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	e00a      	b.n	800d226 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d210:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	43d2      	mvns	r2, r2
 800d21c:	400a      	ands	r2, r1
 800d21e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800d222:	2301      	movs	r3, #1
 800d224:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d226:	4b06      	ldr	r3, [pc, #24]	; (800d240 <xTaskNotifyWait+0xb8>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800d230:	f000 fea8 	bl	800df84 <vPortExitCritical>

		return xReturn;
 800d234:	697b      	ldr	r3, [r7, #20]
	}
 800d236:	4618      	mov	r0, r3
 800d238:	3718      	adds	r7, #24
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20000fa0 	.word	0x20000fa0
 800d244:	e000ed04 	.word	0xe000ed04

0800d248 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08a      	sub	sp, #40	; 0x28
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	603b      	str	r3, [r7, #0]
 800d254:	4613      	mov	r3, r2
 800d256:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d258:	2301      	movs	r3, #1
 800d25a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10a      	bne.n	800d278 <xTaskGenericNotify+0x30>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	61bb      	str	r3, [r7, #24]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d27c:	f000 fe52 	bl	800df24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d004      	beq.n	800d290 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d290:	6a3b      	ldr	r3, [r7, #32]
 800d292:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d296:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d298:	6a3b      	ldr	r3, [r7, #32]
 800d29a:	2202      	movs	r2, #2
 800d29c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d2a0:	79fb      	ldrb	r3, [r7, #7]
 800d2a2:	2b04      	cmp	r3, #4
 800d2a4:	d82d      	bhi.n	800d302 <xTaskGenericNotify+0xba>
 800d2a6:	a201      	add	r2, pc, #4	; (adr r2, 800d2ac <xTaskGenericNotify+0x64>)
 800d2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ac:	0800d325 	.word	0x0800d325
 800d2b0:	0800d2c1 	.word	0x0800d2c1
 800d2b4:	0800d2d3 	.word	0x0800d2d3
 800d2b8:	0800d2e3 	.word	0x0800d2e3
 800d2bc:	0800d2ed 	.word	0x0800d2ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d2c0:	6a3b      	ldr	r3, [r7, #32]
 800d2c2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	431a      	orrs	r2, r3
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d2d0:	e02b      	b.n	800d32a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d2e0:	e023      	b.n	800d32a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d2ea:	e01e      	b.n	800d32a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d2ec:	7ffb      	ldrb	r3, [r7, #31]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d004      	beq.n	800d2fc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d2fa:	e016      	b.n	800d32a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d300:	e013      	b.n	800d32a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d00c      	beq.n	800d328 <xTaskGenericNotify+0xe0>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	617b      	str	r3, [r7, #20]
}
 800d320:	bf00      	nop
 800d322:	e7fe      	b.n	800d322 <xTaskGenericNotify+0xda>
					break;
 800d324:	bf00      	nop
 800d326:	e000      	b.n	800d32a <xTaskGenericNotify+0xe2>

					break;
 800d328:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d32a:	7ffb      	ldrb	r3, [r7, #31]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d13a      	bne.n	800d3a6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	3304      	adds	r3, #4
 800d334:	4618      	mov	r0, r3
 800d336:	f7fd fe57 	bl	800afe8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33e:	4b1d      	ldr	r3, [pc, #116]	; (800d3b4 <xTaskGenericNotify+0x16c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d903      	bls.n	800d34e <xTaskGenericNotify+0x106>
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34a:	4a1a      	ldr	r2, [pc, #104]	; (800d3b4 <xTaskGenericNotify+0x16c>)
 800d34c:	6013      	str	r3, [r2, #0]
 800d34e:	6a3b      	ldr	r3, [r7, #32]
 800d350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4a17      	ldr	r2, [pc, #92]	; (800d3b8 <xTaskGenericNotify+0x170>)
 800d35c:	441a      	add	r2, r3
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	3304      	adds	r3, #4
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f7fd fde2 	bl	800af2e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00a      	beq.n	800d388 <xTaskGenericNotify+0x140>
	__asm volatile
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	f383 8811 	msr	BASEPRI, r3
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	613b      	str	r3, [r7, #16]
}
 800d384:	bf00      	nop
 800d386:	e7fe      	b.n	800d386 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38c:	4b0b      	ldr	r3, [pc, #44]	; (800d3bc <xTaskGenericNotify+0x174>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d392:	429a      	cmp	r2, r3
 800d394:	d907      	bls.n	800d3a6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d396:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <xTaskGenericNotify+0x178>)
 800d398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d3a6:	f000 fded 	bl	800df84 <vPortExitCritical>

		return xReturn;
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3728      	adds	r7, #40	; 0x28
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	2000147c 	.word	0x2000147c
 800d3b8:	20000fa4 	.word	0x20000fa4
 800d3bc:	20000fa0 	.word	0x20000fa0
 800d3c0:	e000ed04 	.word	0xe000ed04

0800d3c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b08e      	sub	sp, #56	; 0x38
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	603b      	str	r3, [r7, #0]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3f0:	bf00      	nop
 800d3f2:	e7fe      	b.n	800d3f2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3f4:	f000 fe78 	bl	800e0e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d3fc:	f3ef 8211 	mrs	r2, BASEPRI
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	623a      	str	r2, [r7, #32]
 800d412:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d414:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d416:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d004      	beq.n	800d428 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d42e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	2202      	movs	r2, #2
 800d436:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d82f      	bhi.n	800d4a0 <xTaskGenericNotifyFromISR+0xdc>
 800d440:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <xTaskGenericNotifyFromISR+0x84>)
 800d442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d446:	bf00      	nop
 800d448:	0800d4c3 	.word	0x0800d4c3
 800d44c:	0800d45d 	.word	0x0800d45d
 800d450:	0800d46f 	.word	0x0800d46f
 800d454:	0800d47f 	.word	0x0800d47f
 800d458:	0800d489 	.word	0x0800d489
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	431a      	orrs	r2, r3
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d46c:	e02c      	b.n	800d4c8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d474:	1c5a      	adds	r2, r3, #1
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d47c:	e024      	b.n	800d4c8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d486:	e01f      	b.n	800d4c8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d488:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d004      	beq.n	800d49a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d498:	e016      	b.n	800d4c8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d49e:	e013      	b.n	800d4c8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4aa:	d00c      	beq.n	800d4c6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	61bb      	str	r3, [r7, #24]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d4c2:	bf00      	nop
 800d4c4:	e000      	b.n	800d4c8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800d4c6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d4c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d146      	bne.n	800d55e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00a      	beq.n	800d4ee <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	617b      	str	r3, [r7, #20]
}
 800d4ea:	bf00      	nop
 800d4ec:	e7fe      	b.n	800d4ec <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ee:	4b21      	ldr	r3, [pc, #132]	; (800d574 <xTaskGenericNotifyFromISR+0x1b0>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d11d      	bne.n	800d532 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fd fd74 	bl	800afe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d504:	4b1c      	ldr	r3, [pc, #112]	; (800d578 <xTaskGenericNotifyFromISR+0x1b4>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d903      	bls.n	800d514 <xTaskGenericNotifyFromISR+0x150>
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d510:	4a19      	ldr	r2, [pc, #100]	; (800d578 <xTaskGenericNotifyFromISR+0x1b4>)
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4a16      	ldr	r2, [pc, #88]	; (800d57c <xTaskGenericNotifyFromISR+0x1b8>)
 800d522:	441a      	add	r2, r3
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	3304      	adds	r3, #4
 800d528:	4619      	mov	r1, r3
 800d52a:	4610      	mov	r0, r2
 800d52c:	f7fd fcff 	bl	800af2e <vListInsertEnd>
 800d530:	e005      	b.n	800d53e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	3318      	adds	r3, #24
 800d536:	4619      	mov	r1, r3
 800d538:	4811      	ldr	r0, [pc, #68]	; (800d580 <xTaskGenericNotifyFromISR+0x1bc>)
 800d53a:	f7fd fcf8 	bl	800af2e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	4b10      	ldr	r3, [pc, #64]	; (800d584 <xTaskGenericNotifyFromISR+0x1c0>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d548:	429a      	cmp	r2, r3
 800d54a:	d908      	bls.n	800d55e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d554:	2201      	movs	r2, #1
 800d556:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d558:	4b0b      	ldr	r3, [pc, #44]	; (800d588 <xTaskGenericNotifyFromISR+0x1c4>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	f383 8811 	msr	BASEPRI, r3
}
 800d568:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3738      	adds	r7, #56	; 0x38
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	2000149c 	.word	0x2000149c
 800d578:	2000147c 	.word	0x2000147c
 800d57c:	20000fa4 	.word	0x20000fa4
 800d580:	20001434 	.word	0x20001434
 800d584:	20000fa0 	.word	0x20000fa0
 800d588:	20001488 	.word	0x20001488

0800d58c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d596:	4b21      	ldr	r3, [pc, #132]	; (800d61c <prvAddCurrentTaskToDelayedList+0x90>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d59c:	4b20      	ldr	r3, [pc, #128]	; (800d620 <prvAddCurrentTaskToDelayedList+0x94>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fd fd20 	bl	800afe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ae:	d10a      	bne.n	800d5c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d007      	beq.n	800d5c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4819      	ldr	r0, [pc, #100]	; (800d624 <prvAddCurrentTaskToDelayedList+0x98>)
 800d5c0:	f7fd fcb5 	bl	800af2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5c4:	e026      	b.n	800d614 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5ce:	4b14      	ldr	r3, [pc, #80]	; (800d620 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d209      	bcs.n	800d5f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5de:	4b12      	ldr	r3, [pc, #72]	; (800d628 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	f7fd fcc3 	bl	800af76 <vListInsert>
}
 800d5f0:	e010      	b.n	800d614 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5f2:	4b0e      	ldr	r3, [pc, #56]	; (800d62c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4b0a      	ldr	r3, [pc, #40]	; (800d620 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4610      	mov	r0, r2
 800d600:	f7fd fcb9 	bl	800af76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d202      	bcs.n	800d614 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d60e:	4a08      	ldr	r2, [pc, #32]	; (800d630 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	6013      	str	r3, [r2, #0]
}
 800d614:	bf00      	nop
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	20001478 	.word	0x20001478
 800d620:	20000fa0 	.word	0x20000fa0
 800d624:	20001460 	.word	0x20001460
 800d628:	20001430 	.word	0x20001430
 800d62c:	2000142c 	.word	0x2000142c
 800d630:	20001494 	.word	0x20001494

0800d634 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08a      	sub	sp, #40	; 0x28
 800d638:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d63e:	f000 fb07 	bl	800dc50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d642:	4b1c      	ldr	r3, [pc, #112]	; (800d6b4 <xTimerCreateTimerTask+0x80>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d021      	beq.n	800d68e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d64a:	2300      	movs	r3, #0
 800d64c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d652:	1d3a      	adds	r2, r7, #4
 800d654:	f107 0108 	add.w	r1, r7, #8
 800d658:	f107 030c 	add.w	r3, r7, #12
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fd fc1f 	bl	800aea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d662:	6879      	ldr	r1, [r7, #4]
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	9202      	str	r2, [sp, #8]
 800d66a:	9301      	str	r3, [sp, #4]
 800d66c:	2302      	movs	r3, #2
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	2300      	movs	r3, #0
 800d672:	460a      	mov	r2, r1
 800d674:	4910      	ldr	r1, [pc, #64]	; (800d6b8 <xTimerCreateTimerTask+0x84>)
 800d676:	4811      	ldr	r0, [pc, #68]	; (800d6bc <xTimerCreateTimerTask+0x88>)
 800d678:	f7fe fda4 	bl	800c1c4 <xTaskCreateStatic>
 800d67c:	4603      	mov	r3, r0
 800d67e:	4a10      	ldr	r2, [pc, #64]	; (800d6c0 <xTimerCreateTimerTask+0x8c>)
 800d680:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d682:	4b0f      	ldr	r3, [pc, #60]	; (800d6c0 <xTimerCreateTimerTask+0x8c>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d68a:	2301      	movs	r3, #1
 800d68c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	613b      	str	r3, [r7, #16]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d6aa:	697b      	ldr	r3, [r7, #20]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	200014d0 	.word	0x200014d0
 800d6b8:	0801344c 	.word	0x0801344c
 800d6bc:	0800d7f9 	.word	0x0800d7f9
 800d6c0:	200014d4 	.word	0x200014d4

0800d6c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08a      	sub	sp, #40	; 0x28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
 800d6d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10a      	bne.n	800d6f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	623b      	str	r3, [r7, #32]
}
 800d6ee:	bf00      	nop
 800d6f0:	e7fe      	b.n	800d6f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6f2:	4b1a      	ldr	r3, [pc, #104]	; (800d75c <xTimerGenericCommand+0x98>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d02a      	beq.n	800d750 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2b05      	cmp	r3, #5
 800d70a:	dc18      	bgt.n	800d73e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d70c:	f7ff fbb2 	bl	800ce74 <xTaskGetSchedulerState>
 800d710:	4603      	mov	r3, r0
 800d712:	2b02      	cmp	r3, #2
 800d714:	d109      	bne.n	800d72a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <xTimerGenericCommand+0x98>)
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	f107 0110 	add.w	r1, r7, #16
 800d71e:	2300      	movs	r3, #0
 800d720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d722:	f7fd fee9 	bl	800b4f8 <xQueueGenericSend>
 800d726:	6278      	str	r0, [r7, #36]	; 0x24
 800d728:	e012      	b.n	800d750 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d72a:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <xTimerGenericCommand+0x98>)
 800d72c:	6818      	ldr	r0, [r3, #0]
 800d72e:	f107 0110 	add.w	r1, r7, #16
 800d732:	2300      	movs	r3, #0
 800d734:	2200      	movs	r2, #0
 800d736:	f7fd fedf 	bl	800b4f8 <xQueueGenericSend>
 800d73a:	6278      	str	r0, [r7, #36]	; 0x24
 800d73c:	e008      	b.n	800d750 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d73e:	4b07      	ldr	r3, [pc, #28]	; (800d75c <xTimerGenericCommand+0x98>)
 800d740:	6818      	ldr	r0, [r3, #0]
 800d742:	f107 0110 	add.w	r1, r7, #16
 800d746:	2300      	movs	r3, #0
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	f7fd ffd3 	bl	800b6f4 <xQueueGenericSendFromISR>
 800d74e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d752:	4618      	mov	r0, r3
 800d754:	3728      	adds	r7, #40	; 0x28
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	200014d0 	.word	0x200014d0

0800d760 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b088      	sub	sp, #32
 800d764:	af02      	add	r7, sp, #8
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76a:	4b22      	ldr	r3, [pc, #136]	; (800d7f4 <prvProcessExpiredTimer+0x94>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	3304      	adds	r3, #4
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd fc35 	bl	800afe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d784:	f003 0304 	and.w	r3, r3, #4
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d022      	beq.n	800d7d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	699a      	ldr	r2, [r3, #24]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	18d1      	adds	r1, r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	6978      	ldr	r0, [r7, #20]
 800d79a:	f000 f8d1 	bl	800d940 <prvInsertTimerInActiveList>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01f      	beq.n	800d7e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	6978      	ldr	r0, [r7, #20]
 800d7b0:	f7ff ff88 	bl	800d6c4 <xTimerGenericCommand>
 800d7b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d113      	bne.n	800d7e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	60fb      	str	r3, [r7, #12]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7d8:	f023 0301 	bic.w	r3, r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	6a1b      	ldr	r3, [r3, #32]
 800d7e8:	6978      	ldr	r0, [r7, #20]
 800d7ea:	4798      	blx	r3
}
 800d7ec:	bf00      	nop
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	200014c8 	.word	0x200014c8

0800d7f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d800:	f107 0308 	add.w	r3, r7, #8
 800d804:	4618      	mov	r0, r3
 800d806:	f000 f857 	bl	800d8b8 <prvGetNextExpireTime>
 800d80a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	4619      	mov	r1, r3
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 f803 	bl	800d81c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d816:	f000 f8d5 	bl	800d9c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d81a:	e7f1      	b.n	800d800 <prvTimerTask+0x8>

0800d81c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d826:	f7fe ff29 	bl	800c67c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d82a:	f107 0308 	add.w	r3, r7, #8
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 f866 	bl	800d900 <prvSampleTimeNow>
 800d834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d130      	bne.n	800d89e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10a      	bne.n	800d858 <prvProcessTimerOrBlockTask+0x3c>
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	429a      	cmp	r2, r3
 800d848:	d806      	bhi.n	800d858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d84a:	f7fe ff25 	bl	800c698 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d84e:	68f9      	ldr	r1, [r7, #12]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff ff85 	bl	800d760 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d856:	e024      	b.n	800d8a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d008      	beq.n	800d870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d85e:	4b13      	ldr	r3, [pc, #76]	; (800d8ac <prvProcessTimerOrBlockTask+0x90>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <prvProcessTimerOrBlockTask+0x50>
 800d868:	2301      	movs	r3, #1
 800d86a:	e000      	b.n	800d86e <prvProcessTimerOrBlockTask+0x52>
 800d86c:	2300      	movs	r3, #0
 800d86e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d870:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <prvProcessTimerOrBlockTask+0x94>)
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	4619      	mov	r1, r3
 800d87e:	f7fe fc6d 	bl	800c15c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d882:	f7fe ff09 	bl	800c698 <xTaskResumeAll>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10a      	bne.n	800d8a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d88c:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <prvProcessTimerOrBlockTask+0x98>)
 800d88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	f3bf 8f6f 	isb	sy
}
 800d89c:	e001      	b.n	800d8a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d89e:	f7fe fefb 	bl	800c698 <xTaskResumeAll>
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	200014cc 	.word	0x200014cc
 800d8b0:	200014d0 	.word	0x200014d0
 800d8b4:	e000ed04 	.word	0xe000ed04

0800d8b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8c0:	4b0e      	ldr	r3, [pc, #56]	; (800d8fc <prvGetNextExpireTime+0x44>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <prvGetNextExpireTime+0x16>
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	e000      	b.n	800d8d0 <prvGetNextExpireTime+0x18>
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d105      	bne.n	800d8e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8dc:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <prvGetNextExpireTime+0x44>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60fb      	str	r3, [r7, #12]
 800d8e6:	e001      	b.n	800d8ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	200014c8 	.word	0x200014c8

0800d900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d908:	f7fe ff64 	bl	800c7d4 <xTaskGetTickCount>
 800d90c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d90e:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <prvSampleTimeNow+0x3c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	429a      	cmp	r2, r3
 800d916:	d205      	bcs.n	800d924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d918:	f000 f936 	bl	800db88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	601a      	str	r2, [r3, #0]
 800d922:	e002      	b.n	800d92a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d92a:	4a04      	ldr	r2, [pc, #16]	; (800d93c <prvSampleTimeNow+0x3c>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d930:	68fb      	ldr	r3, [r7, #12]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	200014d8 	.word	0x200014d8

0800d940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d94e:	2300      	movs	r3, #0
 800d950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d812      	bhi.n	800d98c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	1ad2      	subs	r2, r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	429a      	cmp	r2, r3
 800d972:	d302      	bcc.n	800d97a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d974:	2301      	movs	r3, #1
 800d976:	617b      	str	r3, [r7, #20]
 800d978:	e01b      	b.n	800d9b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d97a:	4b10      	ldr	r3, [pc, #64]	; (800d9bc <prvInsertTimerInActiveList+0x7c>)
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3304      	adds	r3, #4
 800d982:	4619      	mov	r1, r3
 800d984:	4610      	mov	r0, r2
 800d986:	f7fd faf6 	bl	800af76 <vListInsert>
 800d98a:	e012      	b.n	800d9b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	429a      	cmp	r2, r3
 800d992:	d206      	bcs.n	800d9a2 <prvInsertTimerInActiveList+0x62>
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d302      	bcc.n	800d9a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d99c:	2301      	movs	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]
 800d9a0:	e007      	b.n	800d9b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9a2:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <prvInsertTimerInActiveList+0x80>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f7fd fae2 	bl	800af76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9b2:	697b      	ldr	r3, [r7, #20]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	200014cc 	.word	0x200014cc
 800d9c0:	200014c8 	.word	0x200014c8

0800d9c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	; 0x38
 800d9c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9ca:	e0ca      	b.n	800db62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	da18      	bge.n	800da04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9d2:	1d3b      	adds	r3, r7, #4
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10a      	bne.n	800d9f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	61fb      	str	r3, [r7, #28]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9fa:	6850      	ldr	r0, [r2, #4]
 800d9fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9fe:	6892      	ldr	r2, [r2, #8]
 800da00:	4611      	mov	r1, r2
 800da02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f2c0 80aa 	blt.w	800db60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	3304      	adds	r3, #4
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fd fae3 	bl	800afe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da22:	463b      	mov	r3, r7
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff ff6b 	bl	800d900 <prvSampleTimeNow>
 800da2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b09      	cmp	r3, #9
 800da30:	f200 8097 	bhi.w	800db62 <prvProcessReceivedCommands+0x19e>
 800da34:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <prvProcessReceivedCommands+0x78>)
 800da36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3a:	bf00      	nop
 800da3c:	0800da65 	.word	0x0800da65
 800da40:	0800da65 	.word	0x0800da65
 800da44:	0800da65 	.word	0x0800da65
 800da48:	0800dad9 	.word	0x0800dad9
 800da4c:	0800daed 	.word	0x0800daed
 800da50:	0800db37 	.word	0x0800db37
 800da54:	0800da65 	.word	0x0800da65
 800da58:	0800da65 	.word	0x0800da65
 800da5c:	0800dad9 	.word	0x0800dad9
 800da60:	0800daed 	.word	0x0800daed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da6a:	f043 0301 	orr.w	r3, r3, #1
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	18d1      	adds	r1, r2, r3
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da84:	f7ff ff5c 	bl	800d940 <prvInsertTimerInActiveList>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d069      	beq.n	800db62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d05e      	beq.n	800db62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	441a      	add	r2, r3
 800daac:	2300      	movs	r3, #0
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	2300      	movs	r3, #0
 800dab2:	2100      	movs	r1, #0
 800dab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab6:	f7ff fe05 	bl	800d6c4 <xTimerGenericCommand>
 800daba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dabc:	6a3b      	ldr	r3, [r7, #32]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d14f      	bne.n	800db62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	61bb      	str	r3, [r7, #24]
}
 800dad4:	bf00      	nop
 800dad6:	e7fe      	b.n	800dad6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dade:	f023 0301 	bic.w	r3, r3, #1
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800daea:	e03a      	b.n	800db62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daf2:	f043 0301 	orr.w	r3, r3, #1
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	617b      	str	r3, [r7, #20]
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	699a      	ldr	r2, [r3, #24]
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	18d1      	adds	r1, r2, r3
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db30:	f7ff ff06 	bl	800d940 <prvInsertTimerInActiveList>
					break;
 800db34:	e015      	b.n	800db62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d103      	bne.n	800db4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db46:	f000 fbdb 	bl	800e300 <vPortFree>
 800db4a:	e00a      	b.n	800db62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db52:	f023 0301 	bic.w	r3, r3, #1
 800db56:	b2da      	uxtb	r2, r3
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db5e:	e000      	b.n	800db62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800db60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db62:	4b08      	ldr	r3, [pc, #32]	; (800db84 <prvProcessReceivedCommands+0x1c0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	1d39      	adds	r1, r7, #4
 800db68:	2200      	movs	r2, #0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fd feea 	bl	800b944 <xQueueReceive>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	f47f af2a 	bne.w	800d9cc <prvProcessReceivedCommands+0x8>
	}
}
 800db78:	bf00      	nop
 800db7a:	bf00      	nop
 800db7c:	3730      	adds	r7, #48	; 0x30
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	200014d0 	.word	0x200014d0

0800db88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db8e:	e048      	b.n	800dc22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db90:	4b2d      	ldr	r3, [pc, #180]	; (800dc48 <prvSwitchTimerLists+0xc0>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9a:	4b2b      	ldr	r3, [pc, #172]	; (800dc48 <prvSwitchTimerLists+0xc0>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3304      	adds	r3, #4
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fd fa1d 	bl	800afe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbbc:	f003 0304 	and.w	r3, r3, #4
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d02e      	beq.n	800dc22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	4413      	add	r3, r2
 800dbcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d90e      	bls.n	800dbf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbe2:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <prvSwitchTimerLists+0xc0>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	4619      	mov	r1, r3
 800dbec:	4610      	mov	r0, r2
 800dbee:	f7fd f9c2 	bl	800af76 <vListInsert>
 800dbf2:	e016      	b.n	800dc22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f7ff fd60 	bl	800d6c4 <xTimerGenericCommand>
 800dc04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10a      	bne.n	800dc22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	603b      	str	r3, [r7, #0]
}
 800dc1e:	bf00      	nop
 800dc20:	e7fe      	b.n	800dc20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc22:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <prvSwitchTimerLists+0xc0>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1b1      	bne.n	800db90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc2c:	4b06      	ldr	r3, [pc, #24]	; (800dc48 <prvSwitchTimerLists+0xc0>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc32:	4b06      	ldr	r3, [pc, #24]	; (800dc4c <prvSwitchTimerLists+0xc4>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a04      	ldr	r2, [pc, #16]	; (800dc48 <prvSwitchTimerLists+0xc0>)
 800dc38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc3a:	4a04      	ldr	r2, [pc, #16]	; (800dc4c <prvSwitchTimerLists+0xc4>)
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6013      	str	r3, [r2, #0]
}
 800dc40:	bf00      	nop
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	200014c8 	.word	0x200014c8
 800dc4c:	200014cc 	.word	0x200014cc

0800dc50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc56:	f000 f965 	bl	800df24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc5a:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d120      	bne.n	800dca4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc62:	4814      	ldr	r0, [pc, #80]	; (800dcb4 <prvCheckForValidListAndQueue+0x64>)
 800dc64:	f7fd f936 	bl	800aed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc68:	4813      	ldr	r0, [pc, #76]	; (800dcb8 <prvCheckForValidListAndQueue+0x68>)
 800dc6a:	f7fd f933 	bl	800aed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc6e:	4b13      	ldr	r3, [pc, #76]	; (800dcbc <prvCheckForValidListAndQueue+0x6c>)
 800dc70:	4a10      	ldr	r2, [pc, #64]	; (800dcb4 <prvCheckForValidListAndQueue+0x64>)
 800dc72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc74:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <prvCheckForValidListAndQueue+0x70>)
 800dc76:	4a10      	ldr	r2, [pc, #64]	; (800dcb8 <prvCheckForValidListAndQueue+0x68>)
 800dc78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	4b11      	ldr	r3, [pc, #68]	; (800dcc4 <prvCheckForValidListAndQueue+0x74>)
 800dc80:	4a11      	ldr	r2, [pc, #68]	; (800dcc8 <prvCheckForValidListAndQueue+0x78>)
 800dc82:	2110      	movs	r1, #16
 800dc84:	200a      	movs	r0, #10
 800dc86:	f7fd fa41 	bl	800b10c <xQueueGenericCreateStatic>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	4a08      	ldr	r2, [pc, #32]	; (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc98:	4b05      	ldr	r3, [pc, #20]	; (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	490b      	ldr	r1, [pc, #44]	; (800dccc <prvCheckForValidListAndQueue+0x7c>)
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fa08 	bl	800c0b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dca4:	f000 f96e 	bl	800df84 <vPortExitCritical>
}
 800dca8:	bf00      	nop
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	200014d0 	.word	0x200014d0
 800dcb4:	200014a0 	.word	0x200014a0
 800dcb8:	200014b4 	.word	0x200014b4
 800dcbc:	200014c8 	.word	0x200014c8
 800dcc0:	200014cc 	.word	0x200014cc
 800dcc4:	2000157c 	.word	0x2000157c
 800dcc8:	200014dc 	.word	0x200014dc
 800dccc:	08013454 	.word	0x08013454

0800dcd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	3b04      	subs	r3, #4
 800dce0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3b04      	subs	r3, #4
 800dcee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	f023 0201 	bic.w	r2, r3, #1
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3b04      	subs	r3, #4
 800dcfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd00:	4a0c      	ldr	r2, [pc, #48]	; (800dd34 <pxPortInitialiseStack+0x64>)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3b14      	subs	r3, #20
 800dd0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	3b04      	subs	r3, #4
 800dd16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f06f 0202 	mvn.w	r2, #2
 800dd1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3b20      	subs	r3, #32
 800dd24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd26:	68fb      	ldr	r3, [r7, #12]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	0800dd39 	.word	0x0800dd39

0800dd38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd42:	4b12      	ldr	r3, [pc, #72]	; (800dd8c <prvTaskExitError+0x54>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4a:	d00a      	beq.n	800dd62 <prvTaskExitError+0x2a>
	__asm volatile
 800dd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	60fb      	str	r3, [r7, #12]
}
 800dd5e:	bf00      	nop
 800dd60:	e7fe      	b.n	800dd60 <prvTaskExitError+0x28>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	60bb      	str	r3, [r7, #8]
}
 800dd74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd76:	bf00      	nop
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d0fc      	beq.n	800dd78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd7e:	bf00      	nop
 800dd80:	bf00      	nop
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	20000010 	.word	0x20000010

0800dd90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd90:	4b07      	ldr	r3, [pc, #28]	; (800ddb0 <pxCurrentTCBConst2>)
 800dd92:	6819      	ldr	r1, [r3, #0]
 800dd94:	6808      	ldr	r0, [r1, #0]
 800dd96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9a:	f380 8809 	msr	PSP, r0
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f04f 0000 	mov.w	r0, #0
 800dda6:	f380 8811 	msr	BASEPRI, r0
 800ddaa:	4770      	bx	lr
 800ddac:	f3af 8000 	nop.w

0800ddb0 <pxCurrentTCBConst2>:
 800ddb0:	20000fa0 	.word	0x20000fa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop

0800ddb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ddb8:	4808      	ldr	r0, [pc, #32]	; (800dddc <prvPortStartFirstTask+0x24>)
 800ddba:	6800      	ldr	r0, [r0, #0]
 800ddbc:	6800      	ldr	r0, [r0, #0]
 800ddbe:	f380 8808 	msr	MSP, r0
 800ddc2:	f04f 0000 	mov.w	r0, #0
 800ddc6:	f380 8814 	msr	CONTROL, r0
 800ddca:	b662      	cpsie	i
 800ddcc:	b661      	cpsie	f
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	df00      	svc	0
 800ddd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddda:	bf00      	nop
 800dddc:	e000ed08 	.word	0xe000ed08

0800dde0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dde6:	4b46      	ldr	r3, [pc, #280]	; (800df00 <xPortStartScheduler+0x120>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a46      	ldr	r2, [pc, #280]	; (800df04 <xPortStartScheduler+0x124>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d10a      	bne.n	800de06 <xPortStartScheduler+0x26>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de06:	4b3e      	ldr	r3, [pc, #248]	; (800df00 <xPortStartScheduler+0x120>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a3f      	ldr	r2, [pc, #252]	; (800df08 <xPortStartScheduler+0x128>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d10a      	bne.n	800de26 <xPortStartScheduler+0x46>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	60fb      	str	r3, [r7, #12]
}
 800de22:	bf00      	nop
 800de24:	e7fe      	b.n	800de24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de26:	4b39      	ldr	r3, [pc, #228]	; (800df0c <xPortStartScheduler+0x12c>)
 800de28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	22ff      	movs	r2, #255	; 0xff
 800de36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de40:	78fb      	ldrb	r3, [r7, #3]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	4b31      	ldr	r3, [pc, #196]	; (800df10 <xPortStartScheduler+0x130>)
 800de4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de4e:	4b31      	ldr	r3, [pc, #196]	; (800df14 <xPortStartScheduler+0x134>)
 800de50:	2207      	movs	r2, #7
 800de52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de54:	e009      	b.n	800de6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de56:	4b2f      	ldr	r3, [pc, #188]	; (800df14 <xPortStartScheduler+0x134>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	3b01      	subs	r3, #1
 800de5c:	4a2d      	ldr	r2, [pc, #180]	; (800df14 <xPortStartScheduler+0x134>)
 800de5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de60:	78fb      	ldrb	r3, [r7, #3]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	b2db      	uxtb	r3, r3
 800de68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de6a:	78fb      	ldrb	r3, [r7, #3]
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de72:	2b80      	cmp	r3, #128	; 0x80
 800de74:	d0ef      	beq.n	800de56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de76:	4b27      	ldr	r3, [pc, #156]	; (800df14 <xPortStartScheduler+0x134>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f1c3 0307 	rsb	r3, r3, #7
 800de7e:	2b04      	cmp	r3, #4
 800de80:	d00a      	beq.n	800de98 <xPortStartScheduler+0xb8>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	60bb      	str	r3, [r7, #8]
}
 800de94:	bf00      	nop
 800de96:	e7fe      	b.n	800de96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de98:	4b1e      	ldr	r3, [pc, #120]	; (800df14 <xPortStartScheduler+0x134>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	021b      	lsls	r3, r3, #8
 800de9e:	4a1d      	ldr	r2, [pc, #116]	; (800df14 <xPortStartScheduler+0x134>)
 800dea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dea2:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <xPortStartScheduler+0x134>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800deaa:	4a1a      	ldr	r2, [pc, #104]	; (800df14 <xPortStartScheduler+0x134>)
 800deac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800deb6:	4b18      	ldr	r3, [pc, #96]	; (800df18 <xPortStartScheduler+0x138>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a17      	ldr	r2, [pc, #92]	; (800df18 <xPortStartScheduler+0x138>)
 800debc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dec2:	4b15      	ldr	r3, [pc, #84]	; (800df18 <xPortStartScheduler+0x138>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a14      	ldr	r2, [pc, #80]	; (800df18 <xPortStartScheduler+0x138>)
 800dec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800decc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dece:	f000 f8dd 	bl	800e08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ded2:	4b12      	ldr	r3, [pc, #72]	; (800df1c <xPortStartScheduler+0x13c>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ded8:	f000 f8fc 	bl	800e0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dedc:	4b10      	ldr	r3, [pc, #64]	; (800df20 <xPortStartScheduler+0x140>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a0f      	ldr	r2, [pc, #60]	; (800df20 <xPortStartScheduler+0x140>)
 800dee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dee8:	f7ff ff66 	bl	800ddb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800deec:	f7fe fd3c 	bl	800c968 <vTaskSwitchContext>
	prvTaskExitError();
 800def0:	f7ff ff22 	bl	800dd38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	e000ed00 	.word	0xe000ed00
 800df04:	410fc271 	.word	0x410fc271
 800df08:	410fc270 	.word	0x410fc270
 800df0c:	e000e400 	.word	0xe000e400
 800df10:	200015cc 	.word	0x200015cc
 800df14:	200015d0 	.word	0x200015d0
 800df18:	e000ed20 	.word	0xe000ed20
 800df1c:	20000010 	.word	0x20000010
 800df20:	e000ef34 	.word	0xe000ef34

0800df24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	607b      	str	r3, [r7, #4]
}
 800df3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df3e:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <vPortEnterCritical+0x58>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	4a0d      	ldr	r2, [pc, #52]	; (800df7c <vPortEnterCritical+0x58>)
 800df46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df48:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <vPortEnterCritical+0x58>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d10f      	bne.n	800df70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df50:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <vPortEnterCritical+0x5c>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <vPortEnterCritical+0x4c>
	__asm volatile
 800df5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	603b      	str	r3, [r7, #0]
}
 800df6c:	bf00      	nop
 800df6e:	e7fe      	b.n	800df6e <vPortEnterCritical+0x4a>
	}
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr
 800df7c:	20000010 	.word	0x20000010
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df8a:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <vPortExitCritical+0x50>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10a      	bne.n	800dfa8 <vPortExitCritical+0x24>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	607b      	str	r3, [r7, #4]
}
 800dfa4:	bf00      	nop
 800dfa6:	e7fe      	b.n	800dfa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfa8:	4b0a      	ldr	r3, [pc, #40]	; (800dfd4 <vPortExitCritical+0x50>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	4a09      	ldr	r2, [pc, #36]	; (800dfd4 <vPortExitCritical+0x50>)
 800dfb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfb2:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <vPortExitCritical+0x50>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d105      	bne.n	800dfc6 <vPortExitCritical+0x42>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	f383 8811 	msr	BASEPRI, r3
}
 800dfc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfc6:	bf00      	nop
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000010 	.word	0x20000010
	...

0800dfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfe0:	f3ef 8009 	mrs	r0, PSP
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4b15      	ldr	r3, [pc, #84]	; (800e040 <pxCurrentTCBConst>)
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	f01e 0f10 	tst.w	lr, #16
 800dff0:	bf08      	it	eq
 800dff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffa:	6010      	str	r0, [r2, #0]
 800dffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e004:	f380 8811 	msr	BASEPRI, r0
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f7fe fcaa 	bl	800c968 <vTaskSwitchContext>
 800e014:	f04f 0000 	mov.w	r0, #0
 800e018:	f380 8811 	msr	BASEPRI, r0
 800e01c:	bc09      	pop	{r0, r3}
 800e01e:	6819      	ldr	r1, [r3, #0]
 800e020:	6808      	ldr	r0, [r1, #0]
 800e022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e026:	f01e 0f10 	tst.w	lr, #16
 800e02a:	bf08      	it	eq
 800e02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e030:	f380 8809 	msr	PSP, r0
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	f3af 8000 	nop.w

0800e040 <pxCurrentTCBConst>:
 800e040:	20000fa0 	.word	0x20000fa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e044:	bf00      	nop
 800e046:	bf00      	nop

0800e048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	607b      	str	r3, [r7, #4]
}
 800e060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e062:	f7fe fbc7 	bl	800c7f4 <xTaskIncrementTick>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e06c:	4b06      	ldr	r3, [pc, #24]	; (800e088 <xPortSysTickHandler+0x40>)
 800e06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	2300      	movs	r3, #0
 800e076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f383 8811 	msr	BASEPRI, r3
}
 800e07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e08c:	b480      	push	{r7}
 800e08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e090:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <vPortSetupTimerInterrupt+0x34>)
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e096:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <vPortSetupTimerInterrupt+0x38>)
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e09c:	4b0a      	ldr	r3, [pc, #40]	; (800e0c8 <vPortSetupTimerInterrupt+0x3c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a0a      	ldr	r2, [pc, #40]	; (800e0cc <vPortSetupTimerInterrupt+0x40>)
 800e0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a6:	099b      	lsrs	r3, r3, #6
 800e0a8:	4a09      	ldr	r2, [pc, #36]	; (800e0d0 <vPortSetupTimerInterrupt+0x44>)
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0ae:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <vPortSetupTimerInterrupt+0x34>)
 800e0b0:	2207      	movs	r2, #7
 800e0b2:	601a      	str	r2, [r3, #0]
}
 800e0b4:	bf00      	nop
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	e000e010 	.word	0xe000e010
 800e0c4:	e000e018 	.word	0xe000e018
 800e0c8:	20000004 	.word	0x20000004
 800e0cc:	10624dd3 	.word	0x10624dd3
 800e0d0:	e000e014 	.word	0xe000e014

0800e0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0e4 <vPortEnableVFP+0x10>
 800e0d8:	6801      	ldr	r1, [r0, #0]
 800e0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e0de:	6001      	str	r1, [r0, #0]
 800e0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0e2:	bf00      	nop
 800e0e4:	e000ed88 	.word	0xe000ed88

0800e0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0ee:	f3ef 8305 	mrs	r3, IPSR
 800e0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b0f      	cmp	r3, #15
 800e0f8:	d914      	bls.n	800e124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0fa:	4a17      	ldr	r2, [pc, #92]	; (800e158 <vPortValidateInterruptPriority+0x70>)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	4413      	add	r3, r2
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e104:	4b15      	ldr	r3, [pc, #84]	; (800e15c <vPortValidateInterruptPriority+0x74>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	7afa      	ldrb	r2, [r7, #11]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d20a      	bcs.n	800e124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e124:	4b0e      	ldr	r3, [pc, #56]	; (800e160 <vPortValidateInterruptPriority+0x78>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e12c:	4b0d      	ldr	r3, [pc, #52]	; (800e164 <vPortValidateInterruptPriority+0x7c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	429a      	cmp	r2, r3
 800e132:	d90a      	bls.n	800e14a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e138:	f383 8811 	msr	BASEPRI, r3
 800e13c:	f3bf 8f6f 	isb	sy
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	603b      	str	r3, [r7, #0]
}
 800e146:	bf00      	nop
 800e148:	e7fe      	b.n	800e148 <vPortValidateInterruptPriority+0x60>
	}
 800e14a:	bf00      	nop
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	e000e3f0 	.word	0xe000e3f0
 800e15c:	200015cc 	.word	0x200015cc
 800e160:	e000ed0c 	.word	0xe000ed0c
 800e164:	200015d0 	.word	0x200015d0

0800e168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	; 0x28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e170:	2300      	movs	r3, #0
 800e172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e174:	f7fe fa82 	bl	800c67c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e178:	4b5b      	ldr	r3, [pc, #364]	; (800e2e8 <pvPortMalloc+0x180>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e180:	f000 f920 	bl	800e3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e184:	4b59      	ldr	r3, [pc, #356]	; (800e2ec <pvPortMalloc+0x184>)
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4013      	ands	r3, r2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f040 8093 	bne.w	800e2b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d01d      	beq.n	800e1d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e198:	2208      	movs	r2, #8
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4413      	add	r3, r2
 800e19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f003 0307 	and.w	r3, r3, #7
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d014      	beq.n	800e1d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f023 0307 	bic.w	r3, r3, #7
 800e1b0:	3308      	adds	r3, #8
 800e1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00a      	beq.n	800e1d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	617b      	str	r3, [r7, #20]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d06e      	beq.n	800e2b8 <pvPortMalloc+0x150>
 800e1da:	4b45      	ldr	r3, [pc, #276]	; (800e2f0 <pvPortMalloc+0x188>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d869      	bhi.n	800e2b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1e4:	4b43      	ldr	r3, [pc, #268]	; (800e2f4 <pvPortMalloc+0x18c>)
 800e1e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1e8:	4b42      	ldr	r3, [pc, #264]	; (800e2f4 <pvPortMalloc+0x18c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1ee:	e004      	b.n	800e1fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	429a      	cmp	r2, r3
 800e202:	d903      	bls.n	800e20c <pvPortMalloc+0xa4>
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1f1      	bne.n	800e1f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e20c:	4b36      	ldr	r3, [pc, #216]	; (800e2e8 <pvPortMalloc+0x180>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e212:	429a      	cmp	r2, r3
 800e214:	d050      	beq.n	800e2b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2208      	movs	r2, #8
 800e21c:	4413      	add	r3, r2
 800e21e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	1ad2      	subs	r2, r2, r3
 800e230:	2308      	movs	r3, #8
 800e232:	005b      	lsls	r3, r3, #1
 800e234:	429a      	cmp	r2, r3
 800e236:	d91f      	bls.n	800e278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4413      	add	r3, r2
 800e23e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	f003 0307 	and.w	r3, r3, #7
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00a      	beq.n	800e260 <pvPortMalloc+0xf8>
	__asm volatile
 800e24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24e:	f383 8811 	msr	BASEPRI, r3
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	f3bf 8f4f 	dsb	sy
 800e25a:	613b      	str	r3, [r7, #16]
}
 800e25c:	bf00      	nop
 800e25e:	e7fe      	b.n	800e25e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	1ad2      	subs	r2, r2, r3
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e272:	69b8      	ldr	r0, [r7, #24]
 800e274:	f000 f908 	bl	800e488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e278:	4b1d      	ldr	r3, [pc, #116]	; (800e2f0 <pvPortMalloc+0x188>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	4a1b      	ldr	r2, [pc, #108]	; (800e2f0 <pvPortMalloc+0x188>)
 800e284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e286:	4b1a      	ldr	r3, [pc, #104]	; (800e2f0 <pvPortMalloc+0x188>)
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	4b1b      	ldr	r3, [pc, #108]	; (800e2f8 <pvPortMalloc+0x190>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d203      	bcs.n	800e29a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e292:	4b17      	ldr	r3, [pc, #92]	; (800e2f0 <pvPortMalloc+0x188>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a18      	ldr	r2, [pc, #96]	; (800e2f8 <pvPortMalloc+0x190>)
 800e298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	4b13      	ldr	r3, [pc, #76]	; (800e2ec <pvPortMalloc+0x184>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	431a      	orrs	r2, r3
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2ae:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <pvPortMalloc+0x194>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	4a11      	ldr	r2, [pc, #68]	; (800e2fc <pvPortMalloc+0x194>)
 800e2b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2b8:	f7fe f9ee 	bl	800c698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	f003 0307 	and.w	r3, r3, #7
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00a      	beq.n	800e2dc <pvPortMalloc+0x174>
	__asm volatile
 800e2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	60fb      	str	r3, [r7, #12]
}
 800e2d8:	bf00      	nop
 800e2da:	e7fe      	b.n	800e2da <pvPortMalloc+0x172>
	return pvReturn;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3728      	adds	r7, #40	; 0x28
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	200051dc 	.word	0x200051dc
 800e2ec:	200051f0 	.word	0x200051f0
 800e2f0:	200051e0 	.word	0x200051e0
 800e2f4:	200051d4 	.word	0x200051d4
 800e2f8:	200051e4 	.word	0x200051e4
 800e2fc:	200051e8 	.word	0x200051e8

0800e300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d04d      	beq.n	800e3ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e312:	2308      	movs	r3, #8
 800e314:	425b      	negs	r3, r3
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	4413      	add	r3, r2
 800e31a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	4b24      	ldr	r3, [pc, #144]	; (800e3b8 <vPortFree+0xb8>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4013      	ands	r3, r2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10a      	bne.n	800e344 <vPortFree+0x44>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	60fb      	str	r3, [r7, #12]
}
 800e340:	bf00      	nop
 800e342:	e7fe      	b.n	800e342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00a      	beq.n	800e362 <vPortFree+0x62>
	__asm volatile
 800e34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e350:	f383 8811 	msr	BASEPRI, r3
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	60bb      	str	r3, [r7, #8]
}
 800e35e:	bf00      	nop
 800e360:	e7fe      	b.n	800e360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	4b14      	ldr	r3, [pc, #80]	; (800e3b8 <vPortFree+0xb8>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4013      	ands	r3, r2
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d01e      	beq.n	800e3ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d11a      	bne.n	800e3ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	685a      	ldr	r2, [r3, #4]
 800e37c:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <vPortFree+0xb8>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	43db      	mvns	r3, r3
 800e382:	401a      	ands	r2, r3
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e388:	f7fe f978 	bl	800c67c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <vPortFree+0xbc>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4413      	add	r3, r2
 800e396:	4a09      	ldr	r2, [pc, #36]	; (800e3bc <vPortFree+0xbc>)
 800e398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e39a:	6938      	ldr	r0, [r7, #16]
 800e39c:	f000 f874 	bl	800e488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3a0:	4b07      	ldr	r3, [pc, #28]	; (800e3c0 <vPortFree+0xc0>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	4a06      	ldr	r2, [pc, #24]	; (800e3c0 <vPortFree+0xc0>)
 800e3a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3aa:	f7fe f975 	bl	800c698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3ae:	bf00      	nop
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	200051f0 	.word	0x200051f0
 800e3bc:	200051e0 	.word	0x200051e0
 800e3c0:	200051ec 	.word	0x200051ec

0800e3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e3ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3d0:	4b27      	ldr	r3, [pc, #156]	; (800e470 <prvHeapInit+0xac>)
 800e3d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f003 0307 	and.w	r3, r3, #7
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00c      	beq.n	800e3f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3307      	adds	r3, #7
 800e3e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f023 0307 	bic.w	r3, r3, #7
 800e3ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	4a1f      	ldr	r2, [pc, #124]	; (800e470 <prvHeapInit+0xac>)
 800e3f4:	4413      	add	r3, r2
 800e3f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3fc:	4a1d      	ldr	r2, [pc, #116]	; (800e474 <prvHeapInit+0xb0>)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e402:	4b1c      	ldr	r3, [pc, #112]	; (800e474 <prvHeapInit+0xb0>)
 800e404:	2200      	movs	r2, #0
 800e406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	4413      	add	r3, r2
 800e40e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e410:	2208      	movs	r2, #8
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	1a9b      	subs	r3, r3, r2
 800e416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f023 0307 	bic.w	r3, r3, #7
 800e41e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4a15      	ldr	r2, [pc, #84]	; (800e478 <prvHeapInit+0xb4>)
 800e424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e426:	4b14      	ldr	r3, [pc, #80]	; (800e478 <prvHeapInit+0xb4>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2200      	movs	r2, #0
 800e42c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e42e:	4b12      	ldr	r3, [pc, #72]	; (800e478 <prvHeapInit+0xb4>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2200      	movs	r2, #0
 800e434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	1ad2      	subs	r2, r2, r3
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e444:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <prvHeapInit+0xb4>)
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	4a0a      	ldr	r2, [pc, #40]	; (800e47c <prvHeapInit+0xb8>)
 800e452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	4a09      	ldr	r2, [pc, #36]	; (800e480 <prvHeapInit+0xbc>)
 800e45a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e45c:	4b09      	ldr	r3, [pc, #36]	; (800e484 <prvHeapInit+0xc0>)
 800e45e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e462:	601a      	str	r2, [r3, #0]
}
 800e464:	bf00      	nop
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr
 800e470:	200015d4 	.word	0x200015d4
 800e474:	200051d4 	.word	0x200051d4
 800e478:	200051dc 	.word	0x200051dc
 800e47c:	200051e4 	.word	0x200051e4
 800e480:	200051e0 	.word	0x200051e0
 800e484:	200051f0 	.word	0x200051f0

0800e488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e490:	4b28      	ldr	r3, [pc, #160]	; (800e534 <prvInsertBlockIntoFreeList+0xac>)
 800e492:	60fb      	str	r3, [r7, #12]
 800e494:	e002      	b.n	800e49c <prvInsertBlockIntoFreeList+0x14>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d8f7      	bhi.n	800e496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d108      	bne.n	800e4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	441a      	add	r2, r3
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	441a      	add	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d118      	bne.n	800e510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	4b15      	ldr	r3, [pc, #84]	; (800e538 <prvInsertBlockIntoFreeList+0xb0>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d00d      	beq.n	800e506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	441a      	add	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	e008      	b.n	800e518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <prvInsertBlockIntoFreeList+0xb0>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	601a      	str	r2, [r3, #0]
 800e50e:	e003      	b.n	800e518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d002      	beq.n	800e526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e526:	bf00      	nop
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	200051d4 	.word	0x200051d4
 800e538:	200051dc 	.word	0x200051dc

0800e53c <atof>:
 800e53c:	2100      	movs	r1, #0
 800e53e:	f001 bd3d 	b.w	800ffbc <strtod>

0800e542 <atoi>:
 800e542:	220a      	movs	r2, #10
 800e544:	2100      	movs	r1, #0
 800e546:	f001 be23 	b.w	8010190 <strtol>
	...

0800e54c <__errno>:
 800e54c:	4b01      	ldr	r3, [pc, #4]	; (800e554 <__errno+0x8>)
 800e54e:	6818      	ldr	r0, [r3, #0]
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	20000014 	.word	0x20000014

0800e558 <std>:
 800e558:	2300      	movs	r3, #0
 800e55a:	b510      	push	{r4, lr}
 800e55c:	4604      	mov	r4, r0
 800e55e:	e9c0 3300 	strd	r3, r3, [r0]
 800e562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e566:	6083      	str	r3, [r0, #8]
 800e568:	8181      	strh	r1, [r0, #12]
 800e56a:	6643      	str	r3, [r0, #100]	; 0x64
 800e56c:	81c2      	strh	r2, [r0, #14]
 800e56e:	6183      	str	r3, [r0, #24]
 800e570:	4619      	mov	r1, r3
 800e572:	2208      	movs	r2, #8
 800e574:	305c      	adds	r0, #92	; 0x5c
 800e576:	f000 f91a 	bl	800e7ae <memset>
 800e57a:	4b05      	ldr	r3, [pc, #20]	; (800e590 <std+0x38>)
 800e57c:	6263      	str	r3, [r4, #36]	; 0x24
 800e57e:	4b05      	ldr	r3, [pc, #20]	; (800e594 <std+0x3c>)
 800e580:	62a3      	str	r3, [r4, #40]	; 0x28
 800e582:	4b05      	ldr	r3, [pc, #20]	; (800e598 <std+0x40>)
 800e584:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e586:	4b05      	ldr	r3, [pc, #20]	; (800e59c <std+0x44>)
 800e588:	6224      	str	r4, [r4, #32]
 800e58a:	6323      	str	r3, [r4, #48]	; 0x30
 800e58c:	bd10      	pop	{r4, pc}
 800e58e:	bf00      	nop
 800e590:	0800f2f1 	.word	0x0800f2f1
 800e594:	0800f313 	.word	0x0800f313
 800e598:	0800f34b 	.word	0x0800f34b
 800e59c:	0800f36f 	.word	0x0800f36f

0800e5a0 <_cleanup_r>:
 800e5a0:	4901      	ldr	r1, [pc, #4]	; (800e5a8 <_cleanup_r+0x8>)
 800e5a2:	f000 b8af 	b.w	800e704 <_fwalk_reent>
 800e5a6:	bf00      	nop
 800e5a8:	08011029 	.word	0x08011029

0800e5ac <__sfmoreglue>:
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	2268      	movs	r2, #104	; 0x68
 800e5b0:	1e4d      	subs	r5, r1, #1
 800e5b2:	4355      	muls	r5, r2
 800e5b4:	460e      	mov	r6, r1
 800e5b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5ba:	f000 f921 	bl	800e800 <_malloc_r>
 800e5be:	4604      	mov	r4, r0
 800e5c0:	b140      	cbz	r0, 800e5d4 <__sfmoreglue+0x28>
 800e5c2:	2100      	movs	r1, #0
 800e5c4:	e9c0 1600 	strd	r1, r6, [r0]
 800e5c8:	300c      	adds	r0, #12
 800e5ca:	60a0      	str	r0, [r4, #8]
 800e5cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5d0:	f000 f8ed 	bl	800e7ae <memset>
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	bd70      	pop	{r4, r5, r6, pc}

0800e5d8 <__sfp_lock_acquire>:
 800e5d8:	4801      	ldr	r0, [pc, #4]	; (800e5e0 <__sfp_lock_acquire+0x8>)
 800e5da:	f000 b8d8 	b.w	800e78e <__retarget_lock_acquire_recursive>
 800e5de:	bf00      	nop
 800e5e0:	200051f5 	.word	0x200051f5

0800e5e4 <__sfp_lock_release>:
 800e5e4:	4801      	ldr	r0, [pc, #4]	; (800e5ec <__sfp_lock_release+0x8>)
 800e5e6:	f000 b8d3 	b.w	800e790 <__retarget_lock_release_recursive>
 800e5ea:	bf00      	nop
 800e5ec:	200051f5 	.word	0x200051f5

0800e5f0 <__sinit_lock_acquire>:
 800e5f0:	4801      	ldr	r0, [pc, #4]	; (800e5f8 <__sinit_lock_acquire+0x8>)
 800e5f2:	f000 b8cc 	b.w	800e78e <__retarget_lock_acquire_recursive>
 800e5f6:	bf00      	nop
 800e5f8:	200051f6 	.word	0x200051f6

0800e5fc <__sinit_lock_release>:
 800e5fc:	4801      	ldr	r0, [pc, #4]	; (800e604 <__sinit_lock_release+0x8>)
 800e5fe:	f000 b8c7 	b.w	800e790 <__retarget_lock_release_recursive>
 800e602:	bf00      	nop
 800e604:	200051f6 	.word	0x200051f6

0800e608 <__sinit>:
 800e608:	b510      	push	{r4, lr}
 800e60a:	4604      	mov	r4, r0
 800e60c:	f7ff fff0 	bl	800e5f0 <__sinit_lock_acquire>
 800e610:	69a3      	ldr	r3, [r4, #24]
 800e612:	b11b      	cbz	r3, 800e61c <__sinit+0x14>
 800e614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e618:	f7ff bff0 	b.w	800e5fc <__sinit_lock_release>
 800e61c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e620:	6523      	str	r3, [r4, #80]	; 0x50
 800e622:	4b13      	ldr	r3, [pc, #76]	; (800e670 <__sinit+0x68>)
 800e624:	4a13      	ldr	r2, [pc, #76]	; (800e674 <__sinit+0x6c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	62a2      	str	r2, [r4, #40]	; 0x28
 800e62a:	42a3      	cmp	r3, r4
 800e62c:	bf04      	itt	eq
 800e62e:	2301      	moveq	r3, #1
 800e630:	61a3      	streq	r3, [r4, #24]
 800e632:	4620      	mov	r0, r4
 800e634:	f000 f820 	bl	800e678 <__sfp>
 800e638:	6060      	str	r0, [r4, #4]
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 f81c 	bl	800e678 <__sfp>
 800e640:	60a0      	str	r0, [r4, #8]
 800e642:	4620      	mov	r0, r4
 800e644:	f000 f818 	bl	800e678 <__sfp>
 800e648:	2200      	movs	r2, #0
 800e64a:	60e0      	str	r0, [r4, #12]
 800e64c:	2104      	movs	r1, #4
 800e64e:	6860      	ldr	r0, [r4, #4]
 800e650:	f7ff ff82 	bl	800e558 <std>
 800e654:	68a0      	ldr	r0, [r4, #8]
 800e656:	2201      	movs	r2, #1
 800e658:	2109      	movs	r1, #9
 800e65a:	f7ff ff7d 	bl	800e558 <std>
 800e65e:	68e0      	ldr	r0, [r4, #12]
 800e660:	2202      	movs	r2, #2
 800e662:	2112      	movs	r1, #18
 800e664:	f7ff ff78 	bl	800e558 <std>
 800e668:	2301      	movs	r3, #1
 800e66a:	61a3      	str	r3, [r4, #24]
 800e66c:	e7d2      	b.n	800e614 <__sinit+0xc>
 800e66e:	bf00      	nop
 800e670:	080136d0 	.word	0x080136d0
 800e674:	0800e5a1 	.word	0x0800e5a1

0800e678 <__sfp>:
 800e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67a:	4607      	mov	r7, r0
 800e67c:	f7ff ffac 	bl	800e5d8 <__sfp_lock_acquire>
 800e680:	4b1e      	ldr	r3, [pc, #120]	; (800e6fc <__sfp+0x84>)
 800e682:	681e      	ldr	r6, [r3, #0]
 800e684:	69b3      	ldr	r3, [r6, #24]
 800e686:	b913      	cbnz	r3, 800e68e <__sfp+0x16>
 800e688:	4630      	mov	r0, r6
 800e68a:	f7ff ffbd 	bl	800e608 <__sinit>
 800e68e:	3648      	adds	r6, #72	; 0x48
 800e690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e694:	3b01      	subs	r3, #1
 800e696:	d503      	bpl.n	800e6a0 <__sfp+0x28>
 800e698:	6833      	ldr	r3, [r6, #0]
 800e69a:	b30b      	cbz	r3, 800e6e0 <__sfp+0x68>
 800e69c:	6836      	ldr	r6, [r6, #0]
 800e69e:	e7f7      	b.n	800e690 <__sfp+0x18>
 800e6a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6a4:	b9d5      	cbnz	r5, 800e6dc <__sfp+0x64>
 800e6a6:	4b16      	ldr	r3, [pc, #88]	; (800e700 <__sfp+0x88>)
 800e6a8:	60e3      	str	r3, [r4, #12]
 800e6aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6ae:	6665      	str	r5, [r4, #100]	; 0x64
 800e6b0:	f000 f86c 	bl	800e78c <__retarget_lock_init_recursive>
 800e6b4:	f7ff ff96 	bl	800e5e4 <__sfp_lock_release>
 800e6b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6c0:	6025      	str	r5, [r4, #0]
 800e6c2:	61a5      	str	r5, [r4, #24]
 800e6c4:	2208      	movs	r2, #8
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6cc:	f000 f86f 	bl	800e7ae <memset>
 800e6d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6d8:	4620      	mov	r0, r4
 800e6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6dc:	3468      	adds	r4, #104	; 0x68
 800e6de:	e7d9      	b.n	800e694 <__sfp+0x1c>
 800e6e0:	2104      	movs	r1, #4
 800e6e2:	4638      	mov	r0, r7
 800e6e4:	f7ff ff62 	bl	800e5ac <__sfmoreglue>
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	6030      	str	r0, [r6, #0]
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d1d5      	bne.n	800e69c <__sfp+0x24>
 800e6f0:	f7ff ff78 	bl	800e5e4 <__sfp_lock_release>
 800e6f4:	230c      	movs	r3, #12
 800e6f6:	603b      	str	r3, [r7, #0]
 800e6f8:	e7ee      	b.n	800e6d8 <__sfp+0x60>
 800e6fa:	bf00      	nop
 800e6fc:	080136d0 	.word	0x080136d0
 800e700:	ffff0001 	.word	0xffff0001

0800e704 <_fwalk_reent>:
 800e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e708:	4606      	mov	r6, r0
 800e70a:	4688      	mov	r8, r1
 800e70c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e710:	2700      	movs	r7, #0
 800e712:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e716:	f1b9 0901 	subs.w	r9, r9, #1
 800e71a:	d505      	bpl.n	800e728 <_fwalk_reent+0x24>
 800e71c:	6824      	ldr	r4, [r4, #0]
 800e71e:	2c00      	cmp	r4, #0
 800e720:	d1f7      	bne.n	800e712 <_fwalk_reent+0xe>
 800e722:	4638      	mov	r0, r7
 800e724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e728:	89ab      	ldrh	r3, [r5, #12]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d907      	bls.n	800e73e <_fwalk_reent+0x3a>
 800e72e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e732:	3301      	adds	r3, #1
 800e734:	d003      	beq.n	800e73e <_fwalk_reent+0x3a>
 800e736:	4629      	mov	r1, r5
 800e738:	4630      	mov	r0, r6
 800e73a:	47c0      	blx	r8
 800e73c:	4307      	orrs	r7, r0
 800e73e:	3568      	adds	r5, #104	; 0x68
 800e740:	e7e9      	b.n	800e716 <_fwalk_reent+0x12>
	...

0800e744 <__libc_init_array>:
 800e744:	b570      	push	{r4, r5, r6, lr}
 800e746:	4d0d      	ldr	r5, [pc, #52]	; (800e77c <__libc_init_array+0x38>)
 800e748:	4c0d      	ldr	r4, [pc, #52]	; (800e780 <__libc_init_array+0x3c>)
 800e74a:	1b64      	subs	r4, r4, r5
 800e74c:	10a4      	asrs	r4, r4, #2
 800e74e:	2600      	movs	r6, #0
 800e750:	42a6      	cmp	r6, r4
 800e752:	d109      	bne.n	800e768 <__libc_init_array+0x24>
 800e754:	4d0b      	ldr	r5, [pc, #44]	; (800e784 <__libc_init_array+0x40>)
 800e756:	4c0c      	ldr	r4, [pc, #48]	; (800e788 <__libc_init_array+0x44>)
 800e758:	f004 fcd4 	bl	8013104 <_init>
 800e75c:	1b64      	subs	r4, r4, r5
 800e75e:	10a4      	asrs	r4, r4, #2
 800e760:	2600      	movs	r6, #0
 800e762:	42a6      	cmp	r6, r4
 800e764:	d105      	bne.n	800e772 <__libc_init_array+0x2e>
 800e766:	bd70      	pop	{r4, r5, r6, pc}
 800e768:	f855 3b04 	ldr.w	r3, [r5], #4
 800e76c:	4798      	blx	r3
 800e76e:	3601      	adds	r6, #1
 800e770:	e7ee      	b.n	800e750 <__libc_init_array+0xc>
 800e772:	f855 3b04 	ldr.w	r3, [r5], #4
 800e776:	4798      	blx	r3
 800e778:	3601      	adds	r6, #1
 800e77a:	e7f2      	b.n	800e762 <__libc_init_array+0x1e>
 800e77c:	08013be0 	.word	0x08013be0
 800e780:	08013be0 	.word	0x08013be0
 800e784:	08013be0 	.word	0x08013be0
 800e788:	08013be4 	.word	0x08013be4

0800e78c <__retarget_lock_init_recursive>:
 800e78c:	4770      	bx	lr

0800e78e <__retarget_lock_acquire_recursive>:
 800e78e:	4770      	bx	lr

0800e790 <__retarget_lock_release_recursive>:
 800e790:	4770      	bx	lr

0800e792 <memcpy>:
 800e792:	440a      	add	r2, r1
 800e794:	4291      	cmp	r1, r2
 800e796:	f100 33ff 	add.w	r3, r0, #4294967295
 800e79a:	d100      	bne.n	800e79e <memcpy+0xc>
 800e79c:	4770      	bx	lr
 800e79e:	b510      	push	{r4, lr}
 800e7a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7a8:	4291      	cmp	r1, r2
 800e7aa:	d1f9      	bne.n	800e7a0 <memcpy+0xe>
 800e7ac:	bd10      	pop	{r4, pc}

0800e7ae <memset>:
 800e7ae:	4402      	add	r2, r0
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d100      	bne.n	800e7b8 <memset+0xa>
 800e7b6:	4770      	bx	lr
 800e7b8:	f803 1b01 	strb.w	r1, [r3], #1
 800e7bc:	e7f9      	b.n	800e7b2 <memset+0x4>
	...

0800e7c0 <sbrk_aligned>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	4e0e      	ldr	r6, [pc, #56]	; (800e7fc <sbrk_aligned+0x3c>)
 800e7c4:	460c      	mov	r4, r1
 800e7c6:	6831      	ldr	r1, [r6, #0]
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	b911      	cbnz	r1, 800e7d2 <sbrk_aligned+0x12>
 800e7cc:	f000 fd60 	bl	800f290 <_sbrk_r>
 800e7d0:	6030      	str	r0, [r6, #0]
 800e7d2:	4621      	mov	r1, r4
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	f000 fd5b 	bl	800f290 <_sbrk_r>
 800e7da:	1c43      	adds	r3, r0, #1
 800e7dc:	d00a      	beq.n	800e7f4 <sbrk_aligned+0x34>
 800e7de:	1cc4      	adds	r4, r0, #3
 800e7e0:	f024 0403 	bic.w	r4, r4, #3
 800e7e4:	42a0      	cmp	r0, r4
 800e7e6:	d007      	beq.n	800e7f8 <sbrk_aligned+0x38>
 800e7e8:	1a21      	subs	r1, r4, r0
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f000 fd50 	bl	800f290 <_sbrk_r>
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d101      	bne.n	800e7f8 <sbrk_aligned+0x38>
 800e7f4:	f04f 34ff 	mov.w	r4, #4294967295
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	bd70      	pop	{r4, r5, r6, pc}
 800e7fc:	200051fc 	.word	0x200051fc

0800e800 <_malloc_r>:
 800e800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e804:	1ccd      	adds	r5, r1, #3
 800e806:	f025 0503 	bic.w	r5, r5, #3
 800e80a:	3508      	adds	r5, #8
 800e80c:	2d0c      	cmp	r5, #12
 800e80e:	bf38      	it	cc
 800e810:	250c      	movcc	r5, #12
 800e812:	2d00      	cmp	r5, #0
 800e814:	4607      	mov	r7, r0
 800e816:	db01      	blt.n	800e81c <_malloc_r+0x1c>
 800e818:	42a9      	cmp	r1, r5
 800e81a:	d905      	bls.n	800e828 <_malloc_r+0x28>
 800e81c:	230c      	movs	r3, #12
 800e81e:	603b      	str	r3, [r7, #0]
 800e820:	2600      	movs	r6, #0
 800e822:	4630      	mov	r0, r6
 800e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e828:	4e2e      	ldr	r6, [pc, #184]	; (800e8e4 <_malloc_r+0xe4>)
 800e82a:	f002 ffeb 	bl	8011804 <__malloc_lock>
 800e82e:	6833      	ldr	r3, [r6, #0]
 800e830:	461c      	mov	r4, r3
 800e832:	bb34      	cbnz	r4, 800e882 <_malloc_r+0x82>
 800e834:	4629      	mov	r1, r5
 800e836:	4638      	mov	r0, r7
 800e838:	f7ff ffc2 	bl	800e7c0 <sbrk_aligned>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	4604      	mov	r4, r0
 800e840:	d14d      	bne.n	800e8de <_malloc_r+0xde>
 800e842:	6834      	ldr	r4, [r6, #0]
 800e844:	4626      	mov	r6, r4
 800e846:	2e00      	cmp	r6, #0
 800e848:	d140      	bne.n	800e8cc <_malloc_r+0xcc>
 800e84a:	6823      	ldr	r3, [r4, #0]
 800e84c:	4631      	mov	r1, r6
 800e84e:	4638      	mov	r0, r7
 800e850:	eb04 0803 	add.w	r8, r4, r3
 800e854:	f000 fd1c 	bl	800f290 <_sbrk_r>
 800e858:	4580      	cmp	r8, r0
 800e85a:	d13a      	bne.n	800e8d2 <_malloc_r+0xd2>
 800e85c:	6821      	ldr	r1, [r4, #0]
 800e85e:	3503      	adds	r5, #3
 800e860:	1a6d      	subs	r5, r5, r1
 800e862:	f025 0503 	bic.w	r5, r5, #3
 800e866:	3508      	adds	r5, #8
 800e868:	2d0c      	cmp	r5, #12
 800e86a:	bf38      	it	cc
 800e86c:	250c      	movcc	r5, #12
 800e86e:	4629      	mov	r1, r5
 800e870:	4638      	mov	r0, r7
 800e872:	f7ff ffa5 	bl	800e7c0 <sbrk_aligned>
 800e876:	3001      	adds	r0, #1
 800e878:	d02b      	beq.n	800e8d2 <_malloc_r+0xd2>
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	442b      	add	r3, r5
 800e87e:	6023      	str	r3, [r4, #0]
 800e880:	e00e      	b.n	800e8a0 <_malloc_r+0xa0>
 800e882:	6822      	ldr	r2, [r4, #0]
 800e884:	1b52      	subs	r2, r2, r5
 800e886:	d41e      	bmi.n	800e8c6 <_malloc_r+0xc6>
 800e888:	2a0b      	cmp	r2, #11
 800e88a:	d916      	bls.n	800e8ba <_malloc_r+0xba>
 800e88c:	1961      	adds	r1, r4, r5
 800e88e:	42a3      	cmp	r3, r4
 800e890:	6025      	str	r5, [r4, #0]
 800e892:	bf18      	it	ne
 800e894:	6059      	strne	r1, [r3, #4]
 800e896:	6863      	ldr	r3, [r4, #4]
 800e898:	bf08      	it	eq
 800e89a:	6031      	streq	r1, [r6, #0]
 800e89c:	5162      	str	r2, [r4, r5]
 800e89e:	604b      	str	r3, [r1, #4]
 800e8a0:	4638      	mov	r0, r7
 800e8a2:	f104 060b 	add.w	r6, r4, #11
 800e8a6:	f002 ffb3 	bl	8011810 <__malloc_unlock>
 800e8aa:	f026 0607 	bic.w	r6, r6, #7
 800e8ae:	1d23      	adds	r3, r4, #4
 800e8b0:	1af2      	subs	r2, r6, r3
 800e8b2:	d0b6      	beq.n	800e822 <_malloc_r+0x22>
 800e8b4:	1b9b      	subs	r3, r3, r6
 800e8b6:	50a3      	str	r3, [r4, r2]
 800e8b8:	e7b3      	b.n	800e822 <_malloc_r+0x22>
 800e8ba:	6862      	ldr	r2, [r4, #4]
 800e8bc:	42a3      	cmp	r3, r4
 800e8be:	bf0c      	ite	eq
 800e8c0:	6032      	streq	r2, [r6, #0]
 800e8c2:	605a      	strne	r2, [r3, #4]
 800e8c4:	e7ec      	b.n	800e8a0 <_malloc_r+0xa0>
 800e8c6:	4623      	mov	r3, r4
 800e8c8:	6864      	ldr	r4, [r4, #4]
 800e8ca:	e7b2      	b.n	800e832 <_malloc_r+0x32>
 800e8cc:	4634      	mov	r4, r6
 800e8ce:	6876      	ldr	r6, [r6, #4]
 800e8d0:	e7b9      	b.n	800e846 <_malloc_r+0x46>
 800e8d2:	230c      	movs	r3, #12
 800e8d4:	603b      	str	r3, [r7, #0]
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	f002 ff9a 	bl	8011810 <__malloc_unlock>
 800e8dc:	e7a1      	b.n	800e822 <_malloc_r+0x22>
 800e8de:	6025      	str	r5, [r4, #0]
 800e8e0:	e7de      	b.n	800e8a0 <_malloc_r+0xa0>
 800e8e2:	bf00      	nop
 800e8e4:	200051f8 	.word	0x200051f8

0800e8e8 <__cvt>:
 800e8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ec:	ec55 4b10 	vmov	r4, r5, d0
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	460e      	mov	r6, r1
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	462b      	mov	r3, r5
 800e8f8:	bfbb      	ittet	lt
 800e8fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e8fe:	461d      	movlt	r5, r3
 800e900:	2300      	movge	r3, #0
 800e902:	232d      	movlt	r3, #45	; 0x2d
 800e904:	700b      	strb	r3, [r1, #0]
 800e906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e908:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e90c:	4691      	mov	r9, r2
 800e90e:	f023 0820 	bic.w	r8, r3, #32
 800e912:	bfbc      	itt	lt
 800e914:	4622      	movlt	r2, r4
 800e916:	4614      	movlt	r4, r2
 800e918:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e91c:	d005      	beq.n	800e92a <__cvt+0x42>
 800e91e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e922:	d100      	bne.n	800e926 <__cvt+0x3e>
 800e924:	3601      	adds	r6, #1
 800e926:	2102      	movs	r1, #2
 800e928:	e000      	b.n	800e92c <__cvt+0x44>
 800e92a:	2103      	movs	r1, #3
 800e92c:	ab03      	add	r3, sp, #12
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	ab02      	add	r3, sp, #8
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	ec45 4b10 	vmov	d0, r4, r5
 800e938:	4653      	mov	r3, sl
 800e93a:	4632      	mov	r2, r6
 800e93c:	f001 fd00 	bl	8010340 <_dtoa_r>
 800e940:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e944:	4607      	mov	r7, r0
 800e946:	d102      	bne.n	800e94e <__cvt+0x66>
 800e948:	f019 0f01 	tst.w	r9, #1
 800e94c:	d022      	beq.n	800e994 <__cvt+0xac>
 800e94e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e952:	eb07 0906 	add.w	r9, r7, r6
 800e956:	d110      	bne.n	800e97a <__cvt+0x92>
 800e958:	783b      	ldrb	r3, [r7, #0]
 800e95a:	2b30      	cmp	r3, #48	; 0x30
 800e95c:	d10a      	bne.n	800e974 <__cvt+0x8c>
 800e95e:	2200      	movs	r2, #0
 800e960:	2300      	movs	r3, #0
 800e962:	4620      	mov	r0, r4
 800e964:	4629      	mov	r1, r5
 800e966:	f7f2 f8c7 	bl	8000af8 <__aeabi_dcmpeq>
 800e96a:	b918      	cbnz	r0, 800e974 <__cvt+0x8c>
 800e96c:	f1c6 0601 	rsb	r6, r6, #1
 800e970:	f8ca 6000 	str.w	r6, [sl]
 800e974:	f8da 3000 	ldr.w	r3, [sl]
 800e978:	4499      	add	r9, r3
 800e97a:	2200      	movs	r2, #0
 800e97c:	2300      	movs	r3, #0
 800e97e:	4620      	mov	r0, r4
 800e980:	4629      	mov	r1, r5
 800e982:	f7f2 f8b9 	bl	8000af8 <__aeabi_dcmpeq>
 800e986:	b108      	cbz	r0, 800e98c <__cvt+0xa4>
 800e988:	f8cd 900c 	str.w	r9, [sp, #12]
 800e98c:	2230      	movs	r2, #48	; 0x30
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	454b      	cmp	r3, r9
 800e992:	d307      	bcc.n	800e9a4 <__cvt+0xbc>
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e998:	1bdb      	subs	r3, r3, r7
 800e99a:	4638      	mov	r0, r7
 800e99c:	6013      	str	r3, [r2, #0]
 800e99e:	b004      	add	sp, #16
 800e9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a4:	1c59      	adds	r1, r3, #1
 800e9a6:	9103      	str	r1, [sp, #12]
 800e9a8:	701a      	strb	r2, [r3, #0]
 800e9aa:	e7f0      	b.n	800e98e <__cvt+0xa6>

0800e9ac <__exponent>:
 800e9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2900      	cmp	r1, #0
 800e9b2:	bfb8      	it	lt
 800e9b4:	4249      	neglt	r1, r1
 800e9b6:	f803 2b02 	strb.w	r2, [r3], #2
 800e9ba:	bfb4      	ite	lt
 800e9bc:	222d      	movlt	r2, #45	; 0x2d
 800e9be:	222b      	movge	r2, #43	; 0x2b
 800e9c0:	2909      	cmp	r1, #9
 800e9c2:	7042      	strb	r2, [r0, #1]
 800e9c4:	dd2a      	ble.n	800ea1c <__exponent+0x70>
 800e9c6:	f10d 0407 	add.w	r4, sp, #7
 800e9ca:	46a4      	mov	ip, r4
 800e9cc:	270a      	movs	r7, #10
 800e9ce:	46a6      	mov	lr, r4
 800e9d0:	460a      	mov	r2, r1
 800e9d2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9d6:	fb07 1516 	mls	r5, r7, r6, r1
 800e9da:	3530      	adds	r5, #48	; 0x30
 800e9dc:	2a63      	cmp	r2, #99	; 0x63
 800e9de:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	dcf1      	bgt.n	800e9ce <__exponent+0x22>
 800e9ea:	3130      	adds	r1, #48	; 0x30
 800e9ec:	f1ae 0502 	sub.w	r5, lr, #2
 800e9f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e9f4:	1c44      	adds	r4, r0, #1
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	4561      	cmp	r1, ip
 800e9fa:	d30a      	bcc.n	800ea12 <__exponent+0x66>
 800e9fc:	f10d 0209 	add.w	r2, sp, #9
 800ea00:	eba2 020e 	sub.w	r2, r2, lr
 800ea04:	4565      	cmp	r5, ip
 800ea06:	bf88      	it	hi
 800ea08:	2200      	movhi	r2, #0
 800ea0a:	4413      	add	r3, r2
 800ea0c:	1a18      	subs	r0, r3, r0
 800ea0e:	b003      	add	sp, #12
 800ea10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea1a:	e7ed      	b.n	800e9f8 <__exponent+0x4c>
 800ea1c:	2330      	movs	r3, #48	; 0x30
 800ea1e:	3130      	adds	r1, #48	; 0x30
 800ea20:	7083      	strb	r3, [r0, #2]
 800ea22:	70c1      	strb	r1, [r0, #3]
 800ea24:	1d03      	adds	r3, r0, #4
 800ea26:	e7f1      	b.n	800ea0c <__exponent+0x60>

0800ea28 <_printf_float>:
 800ea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	ed2d 8b02 	vpush	{d8}
 800ea30:	b08d      	sub	sp, #52	; 0x34
 800ea32:	460c      	mov	r4, r1
 800ea34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea38:	4616      	mov	r6, r2
 800ea3a:	461f      	mov	r7, r3
 800ea3c:	4605      	mov	r5, r0
 800ea3e:	f002 feb1 	bl	80117a4 <_localeconv_r>
 800ea42:	f8d0 a000 	ldr.w	sl, [r0]
 800ea46:	4650      	mov	r0, sl
 800ea48:	f7f1 fbd4 	bl	80001f4 <strlen>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	9305      	str	r3, [sp, #20]
 800ea54:	f8d8 3000 	ldr.w	r3, [r8]
 800ea58:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea5c:	3307      	adds	r3, #7
 800ea5e:	f023 0307 	bic.w	r3, r3, #7
 800ea62:	f103 0208 	add.w	r2, r3, #8
 800ea66:	f8c8 2000 	str.w	r2, [r8]
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea7a:	9307      	str	r3, [sp, #28]
 800ea7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea80:	ee08 0a10 	vmov	s16, r0
 800ea84:	4b9f      	ldr	r3, [pc, #636]	; (800ed04 <_printf_float+0x2dc>)
 800ea86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8e:	f7f2 f865 	bl	8000b5c <__aeabi_dcmpun>
 800ea92:	bb88      	cbnz	r0, 800eaf8 <_printf_float+0xd0>
 800ea94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea98:	4b9a      	ldr	r3, [pc, #616]	; (800ed04 <_printf_float+0x2dc>)
 800ea9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9e:	f7f2 f83f 	bl	8000b20 <__aeabi_dcmple>
 800eaa2:	bb48      	cbnz	r0, 800eaf8 <_printf_float+0xd0>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	4649      	mov	r1, r9
 800eaac:	f7f2 f82e 	bl	8000b0c <__aeabi_dcmplt>
 800eab0:	b110      	cbz	r0, 800eab8 <_printf_float+0x90>
 800eab2:	232d      	movs	r3, #45	; 0x2d
 800eab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eab8:	4b93      	ldr	r3, [pc, #588]	; (800ed08 <_printf_float+0x2e0>)
 800eaba:	4894      	ldr	r0, [pc, #592]	; (800ed0c <_printf_float+0x2e4>)
 800eabc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eac0:	bf94      	ite	ls
 800eac2:	4698      	movls	r8, r3
 800eac4:	4680      	movhi	r8, r0
 800eac6:	2303      	movs	r3, #3
 800eac8:	6123      	str	r3, [r4, #16]
 800eaca:	9b05      	ldr	r3, [sp, #20]
 800eacc:	f023 0204 	bic.w	r2, r3, #4
 800ead0:	6022      	str	r2, [r4, #0]
 800ead2:	f04f 0900 	mov.w	r9, #0
 800ead6:	9700      	str	r7, [sp, #0]
 800ead8:	4633      	mov	r3, r6
 800eada:	aa0b      	add	r2, sp, #44	; 0x2c
 800eadc:	4621      	mov	r1, r4
 800eade:	4628      	mov	r0, r5
 800eae0:	f000 f9d8 	bl	800ee94 <_printf_common>
 800eae4:	3001      	adds	r0, #1
 800eae6:	f040 8090 	bne.w	800ec0a <_printf_float+0x1e2>
 800eaea:	f04f 30ff 	mov.w	r0, #4294967295
 800eaee:	b00d      	add	sp, #52	; 0x34
 800eaf0:	ecbd 8b02 	vpop	{d8}
 800eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf8:	4642      	mov	r2, r8
 800eafa:	464b      	mov	r3, r9
 800eafc:	4640      	mov	r0, r8
 800eafe:	4649      	mov	r1, r9
 800eb00:	f7f2 f82c 	bl	8000b5c <__aeabi_dcmpun>
 800eb04:	b140      	cbz	r0, 800eb18 <_printf_float+0xf0>
 800eb06:	464b      	mov	r3, r9
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	bfbc      	itt	lt
 800eb0c:	232d      	movlt	r3, #45	; 0x2d
 800eb0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb12:	487f      	ldr	r0, [pc, #508]	; (800ed10 <_printf_float+0x2e8>)
 800eb14:	4b7f      	ldr	r3, [pc, #508]	; (800ed14 <_printf_float+0x2ec>)
 800eb16:	e7d1      	b.n	800eabc <_printf_float+0x94>
 800eb18:	6863      	ldr	r3, [r4, #4]
 800eb1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb1e:	9206      	str	r2, [sp, #24]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	d13f      	bne.n	800eba4 <_printf_float+0x17c>
 800eb24:	2306      	movs	r3, #6
 800eb26:	6063      	str	r3, [r4, #4]
 800eb28:	9b05      	ldr	r3, [sp, #20]
 800eb2a:	6861      	ldr	r1, [r4, #4]
 800eb2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb30:	2300      	movs	r3, #0
 800eb32:	9303      	str	r3, [sp, #12]
 800eb34:	ab0a      	add	r3, sp, #40	; 0x28
 800eb36:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb3a:	ab09      	add	r3, sp, #36	; 0x24
 800eb3c:	ec49 8b10 	vmov	d0, r8, r9
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	6022      	str	r2, [r4, #0]
 800eb44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb48:	4628      	mov	r0, r5
 800eb4a:	f7ff fecd 	bl	800e8e8 <__cvt>
 800eb4e:	9b06      	ldr	r3, [sp, #24]
 800eb50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb52:	2b47      	cmp	r3, #71	; 0x47
 800eb54:	4680      	mov	r8, r0
 800eb56:	d108      	bne.n	800eb6a <_printf_float+0x142>
 800eb58:	1cc8      	adds	r0, r1, #3
 800eb5a:	db02      	blt.n	800eb62 <_printf_float+0x13a>
 800eb5c:	6863      	ldr	r3, [r4, #4]
 800eb5e:	4299      	cmp	r1, r3
 800eb60:	dd41      	ble.n	800ebe6 <_printf_float+0x1be>
 800eb62:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb66:	fa5f fb8b 	uxtb.w	fp, fp
 800eb6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb6e:	d820      	bhi.n	800ebb2 <_printf_float+0x18a>
 800eb70:	3901      	subs	r1, #1
 800eb72:	465a      	mov	r2, fp
 800eb74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb78:	9109      	str	r1, [sp, #36]	; 0x24
 800eb7a:	f7ff ff17 	bl	800e9ac <__exponent>
 800eb7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb80:	1813      	adds	r3, r2, r0
 800eb82:	2a01      	cmp	r2, #1
 800eb84:	4681      	mov	r9, r0
 800eb86:	6123      	str	r3, [r4, #16]
 800eb88:	dc02      	bgt.n	800eb90 <_printf_float+0x168>
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	07d2      	lsls	r2, r2, #31
 800eb8e:	d501      	bpl.n	800eb94 <_printf_float+0x16c>
 800eb90:	3301      	adds	r3, #1
 800eb92:	6123      	str	r3, [r4, #16]
 800eb94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d09c      	beq.n	800ead6 <_printf_float+0xae>
 800eb9c:	232d      	movs	r3, #45	; 0x2d
 800eb9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eba2:	e798      	b.n	800ead6 <_printf_float+0xae>
 800eba4:	9a06      	ldr	r2, [sp, #24]
 800eba6:	2a47      	cmp	r2, #71	; 0x47
 800eba8:	d1be      	bne.n	800eb28 <_printf_float+0x100>
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1bc      	bne.n	800eb28 <_printf_float+0x100>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	e7b9      	b.n	800eb26 <_printf_float+0xfe>
 800ebb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ebb6:	d118      	bne.n	800ebea <_printf_float+0x1c2>
 800ebb8:	2900      	cmp	r1, #0
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	dd0b      	ble.n	800ebd6 <_printf_float+0x1ae>
 800ebbe:	6121      	str	r1, [r4, #16]
 800ebc0:	b913      	cbnz	r3, 800ebc8 <_printf_float+0x1a0>
 800ebc2:	6822      	ldr	r2, [r4, #0]
 800ebc4:	07d0      	lsls	r0, r2, #31
 800ebc6:	d502      	bpl.n	800ebce <_printf_float+0x1a6>
 800ebc8:	3301      	adds	r3, #1
 800ebca:	440b      	add	r3, r1
 800ebcc:	6123      	str	r3, [r4, #16]
 800ebce:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebd0:	f04f 0900 	mov.w	r9, #0
 800ebd4:	e7de      	b.n	800eb94 <_printf_float+0x16c>
 800ebd6:	b913      	cbnz	r3, 800ebde <_printf_float+0x1b6>
 800ebd8:	6822      	ldr	r2, [r4, #0]
 800ebda:	07d2      	lsls	r2, r2, #31
 800ebdc:	d501      	bpl.n	800ebe2 <_printf_float+0x1ba>
 800ebde:	3302      	adds	r3, #2
 800ebe0:	e7f4      	b.n	800ebcc <_printf_float+0x1a4>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e7f2      	b.n	800ebcc <_printf_float+0x1a4>
 800ebe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ebea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebec:	4299      	cmp	r1, r3
 800ebee:	db05      	blt.n	800ebfc <_printf_float+0x1d4>
 800ebf0:	6823      	ldr	r3, [r4, #0]
 800ebf2:	6121      	str	r1, [r4, #16]
 800ebf4:	07d8      	lsls	r0, r3, #31
 800ebf6:	d5ea      	bpl.n	800ebce <_printf_float+0x1a6>
 800ebf8:	1c4b      	adds	r3, r1, #1
 800ebfa:	e7e7      	b.n	800ebcc <_printf_float+0x1a4>
 800ebfc:	2900      	cmp	r1, #0
 800ebfe:	bfd4      	ite	le
 800ec00:	f1c1 0202 	rsble	r2, r1, #2
 800ec04:	2201      	movgt	r2, #1
 800ec06:	4413      	add	r3, r2
 800ec08:	e7e0      	b.n	800ebcc <_printf_float+0x1a4>
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	055a      	lsls	r2, r3, #21
 800ec0e:	d407      	bmi.n	800ec20 <_printf_float+0x1f8>
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	4642      	mov	r2, r8
 800ec14:	4631      	mov	r1, r6
 800ec16:	4628      	mov	r0, r5
 800ec18:	47b8      	blx	r7
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	d12c      	bne.n	800ec78 <_printf_float+0x250>
 800ec1e:	e764      	b.n	800eaea <_printf_float+0xc2>
 800ec20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec24:	f240 80e0 	bls.w	800ede8 <_printf_float+0x3c0>
 800ec28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f7f1 ff62 	bl	8000af8 <__aeabi_dcmpeq>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d034      	beq.n	800eca2 <_printf_float+0x27a>
 800ec38:	4a37      	ldr	r2, [pc, #220]	; (800ed18 <_printf_float+0x2f0>)
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	4628      	mov	r0, r5
 800ec40:	47b8      	blx	r7
 800ec42:	3001      	adds	r0, #1
 800ec44:	f43f af51 	beq.w	800eaea <_printf_float+0xc2>
 800ec48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	db02      	blt.n	800ec56 <_printf_float+0x22e>
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	07d8      	lsls	r0, r3, #31
 800ec54:	d510      	bpl.n	800ec78 <_printf_float+0x250>
 800ec56:	ee18 3a10 	vmov	r3, s16
 800ec5a:	4652      	mov	r2, sl
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b8      	blx	r7
 800ec62:	3001      	adds	r0, #1
 800ec64:	f43f af41 	beq.w	800eaea <_printf_float+0xc2>
 800ec68:	f04f 0800 	mov.w	r8, #0
 800ec6c:	f104 091a 	add.w	r9, r4, #26
 800ec70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec72:	3b01      	subs	r3, #1
 800ec74:	4543      	cmp	r3, r8
 800ec76:	dc09      	bgt.n	800ec8c <_printf_float+0x264>
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	079b      	lsls	r3, r3, #30
 800ec7c:	f100 8105 	bmi.w	800ee8a <_printf_float+0x462>
 800ec80:	68e0      	ldr	r0, [r4, #12]
 800ec82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec84:	4298      	cmp	r0, r3
 800ec86:	bfb8      	it	lt
 800ec88:	4618      	movlt	r0, r3
 800ec8a:	e730      	b.n	800eaee <_printf_float+0xc6>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	464a      	mov	r2, r9
 800ec90:	4631      	mov	r1, r6
 800ec92:	4628      	mov	r0, r5
 800ec94:	47b8      	blx	r7
 800ec96:	3001      	adds	r0, #1
 800ec98:	f43f af27 	beq.w	800eaea <_printf_float+0xc2>
 800ec9c:	f108 0801 	add.w	r8, r8, #1
 800eca0:	e7e6      	b.n	800ec70 <_printf_float+0x248>
 800eca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	dc39      	bgt.n	800ed1c <_printf_float+0x2f4>
 800eca8:	4a1b      	ldr	r2, [pc, #108]	; (800ed18 <_printf_float+0x2f0>)
 800ecaa:	2301      	movs	r3, #1
 800ecac:	4631      	mov	r1, r6
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b8      	blx	r7
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	f43f af19 	beq.w	800eaea <_printf_float+0xc2>
 800ecb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	d102      	bne.n	800ecc6 <_printf_float+0x29e>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	07d9      	lsls	r1, r3, #31
 800ecc4:	d5d8      	bpl.n	800ec78 <_printf_float+0x250>
 800ecc6:	ee18 3a10 	vmov	r3, s16
 800ecca:	4652      	mov	r2, sl
 800eccc:	4631      	mov	r1, r6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	47b8      	blx	r7
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	f43f af09 	beq.w	800eaea <_printf_float+0xc2>
 800ecd8:	f04f 0900 	mov.w	r9, #0
 800ecdc:	f104 0a1a 	add.w	sl, r4, #26
 800ece0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece2:	425b      	negs	r3, r3
 800ece4:	454b      	cmp	r3, r9
 800ece6:	dc01      	bgt.n	800ecec <_printf_float+0x2c4>
 800ece8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecea:	e792      	b.n	800ec12 <_printf_float+0x1ea>
 800ecec:	2301      	movs	r3, #1
 800ecee:	4652      	mov	r2, sl
 800ecf0:	4631      	mov	r1, r6
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	47b8      	blx	r7
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	f43f aef7 	beq.w	800eaea <_printf_float+0xc2>
 800ecfc:	f109 0901 	add.w	r9, r9, #1
 800ed00:	e7ee      	b.n	800ece0 <_printf_float+0x2b8>
 800ed02:	bf00      	nop
 800ed04:	7fefffff 	.word	0x7fefffff
 800ed08:	080136d4 	.word	0x080136d4
 800ed0c:	080136d8 	.word	0x080136d8
 800ed10:	080136e0 	.word	0x080136e0
 800ed14:	080136dc 	.word	0x080136dc
 800ed18:	080136e4 	.word	0x080136e4
 800ed1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed20:	429a      	cmp	r2, r3
 800ed22:	bfa8      	it	ge
 800ed24:	461a      	movge	r2, r3
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	4691      	mov	r9, r2
 800ed2a:	dc37      	bgt.n	800ed9c <_printf_float+0x374>
 800ed2c:	f04f 0b00 	mov.w	fp, #0
 800ed30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed34:	f104 021a 	add.w	r2, r4, #26
 800ed38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed3a:	9305      	str	r3, [sp, #20]
 800ed3c:	eba3 0309 	sub.w	r3, r3, r9
 800ed40:	455b      	cmp	r3, fp
 800ed42:	dc33      	bgt.n	800edac <_printf_float+0x384>
 800ed44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	db3b      	blt.n	800edc4 <_printf_float+0x39c>
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	07da      	lsls	r2, r3, #31
 800ed50:	d438      	bmi.n	800edc4 <_printf_float+0x39c>
 800ed52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed54:	9a05      	ldr	r2, [sp, #20]
 800ed56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed58:	1a9a      	subs	r2, r3, r2
 800ed5a:	eba3 0901 	sub.w	r9, r3, r1
 800ed5e:	4591      	cmp	r9, r2
 800ed60:	bfa8      	it	ge
 800ed62:	4691      	movge	r9, r2
 800ed64:	f1b9 0f00 	cmp.w	r9, #0
 800ed68:	dc35      	bgt.n	800edd6 <_printf_float+0x3ae>
 800ed6a:	f04f 0800 	mov.w	r8, #0
 800ed6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed72:	f104 0a1a 	add.w	sl, r4, #26
 800ed76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed7a:	1a9b      	subs	r3, r3, r2
 800ed7c:	eba3 0309 	sub.w	r3, r3, r9
 800ed80:	4543      	cmp	r3, r8
 800ed82:	f77f af79 	ble.w	800ec78 <_printf_float+0x250>
 800ed86:	2301      	movs	r3, #1
 800ed88:	4652      	mov	r2, sl
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	47b8      	blx	r7
 800ed90:	3001      	adds	r0, #1
 800ed92:	f43f aeaa 	beq.w	800eaea <_printf_float+0xc2>
 800ed96:	f108 0801 	add.w	r8, r8, #1
 800ed9a:	e7ec      	b.n	800ed76 <_printf_float+0x34e>
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	4631      	mov	r1, r6
 800eda0:	4642      	mov	r2, r8
 800eda2:	4628      	mov	r0, r5
 800eda4:	47b8      	blx	r7
 800eda6:	3001      	adds	r0, #1
 800eda8:	d1c0      	bne.n	800ed2c <_printf_float+0x304>
 800edaa:	e69e      	b.n	800eaea <_printf_float+0xc2>
 800edac:	2301      	movs	r3, #1
 800edae:	4631      	mov	r1, r6
 800edb0:	4628      	mov	r0, r5
 800edb2:	9205      	str	r2, [sp, #20]
 800edb4:	47b8      	blx	r7
 800edb6:	3001      	adds	r0, #1
 800edb8:	f43f ae97 	beq.w	800eaea <_printf_float+0xc2>
 800edbc:	9a05      	ldr	r2, [sp, #20]
 800edbe:	f10b 0b01 	add.w	fp, fp, #1
 800edc2:	e7b9      	b.n	800ed38 <_printf_float+0x310>
 800edc4:	ee18 3a10 	vmov	r3, s16
 800edc8:	4652      	mov	r2, sl
 800edca:	4631      	mov	r1, r6
 800edcc:	4628      	mov	r0, r5
 800edce:	47b8      	blx	r7
 800edd0:	3001      	adds	r0, #1
 800edd2:	d1be      	bne.n	800ed52 <_printf_float+0x32a>
 800edd4:	e689      	b.n	800eaea <_printf_float+0xc2>
 800edd6:	9a05      	ldr	r2, [sp, #20]
 800edd8:	464b      	mov	r3, r9
 800edda:	4442      	add	r2, r8
 800eddc:	4631      	mov	r1, r6
 800edde:	4628      	mov	r0, r5
 800ede0:	47b8      	blx	r7
 800ede2:	3001      	adds	r0, #1
 800ede4:	d1c1      	bne.n	800ed6a <_printf_float+0x342>
 800ede6:	e680      	b.n	800eaea <_printf_float+0xc2>
 800ede8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edea:	2a01      	cmp	r2, #1
 800edec:	dc01      	bgt.n	800edf2 <_printf_float+0x3ca>
 800edee:	07db      	lsls	r3, r3, #31
 800edf0:	d538      	bpl.n	800ee64 <_printf_float+0x43c>
 800edf2:	2301      	movs	r3, #1
 800edf4:	4642      	mov	r2, r8
 800edf6:	4631      	mov	r1, r6
 800edf8:	4628      	mov	r0, r5
 800edfa:	47b8      	blx	r7
 800edfc:	3001      	adds	r0, #1
 800edfe:	f43f ae74 	beq.w	800eaea <_printf_float+0xc2>
 800ee02:	ee18 3a10 	vmov	r3, s16
 800ee06:	4652      	mov	r2, sl
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	47b8      	blx	r7
 800ee0e:	3001      	adds	r0, #1
 800ee10:	f43f ae6b 	beq.w	800eaea <_printf_float+0xc2>
 800ee14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f7f1 fe6c 	bl	8000af8 <__aeabi_dcmpeq>
 800ee20:	b9d8      	cbnz	r0, 800ee5a <_printf_float+0x432>
 800ee22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee24:	f108 0201 	add.w	r2, r8, #1
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	4631      	mov	r1, r6
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	47b8      	blx	r7
 800ee30:	3001      	adds	r0, #1
 800ee32:	d10e      	bne.n	800ee52 <_printf_float+0x42a>
 800ee34:	e659      	b.n	800eaea <_printf_float+0xc2>
 800ee36:	2301      	movs	r3, #1
 800ee38:	4652      	mov	r2, sl
 800ee3a:	4631      	mov	r1, r6
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	47b8      	blx	r7
 800ee40:	3001      	adds	r0, #1
 800ee42:	f43f ae52 	beq.w	800eaea <_printf_float+0xc2>
 800ee46:	f108 0801 	add.w	r8, r8, #1
 800ee4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	4543      	cmp	r3, r8
 800ee50:	dcf1      	bgt.n	800ee36 <_printf_float+0x40e>
 800ee52:	464b      	mov	r3, r9
 800ee54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee58:	e6dc      	b.n	800ec14 <_printf_float+0x1ec>
 800ee5a:	f04f 0800 	mov.w	r8, #0
 800ee5e:	f104 0a1a 	add.w	sl, r4, #26
 800ee62:	e7f2      	b.n	800ee4a <_printf_float+0x422>
 800ee64:	2301      	movs	r3, #1
 800ee66:	4642      	mov	r2, r8
 800ee68:	e7df      	b.n	800ee2a <_printf_float+0x402>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	464a      	mov	r2, r9
 800ee6e:	4631      	mov	r1, r6
 800ee70:	4628      	mov	r0, r5
 800ee72:	47b8      	blx	r7
 800ee74:	3001      	adds	r0, #1
 800ee76:	f43f ae38 	beq.w	800eaea <_printf_float+0xc2>
 800ee7a:	f108 0801 	add.w	r8, r8, #1
 800ee7e:	68e3      	ldr	r3, [r4, #12]
 800ee80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee82:	1a5b      	subs	r3, r3, r1
 800ee84:	4543      	cmp	r3, r8
 800ee86:	dcf0      	bgt.n	800ee6a <_printf_float+0x442>
 800ee88:	e6fa      	b.n	800ec80 <_printf_float+0x258>
 800ee8a:	f04f 0800 	mov.w	r8, #0
 800ee8e:	f104 0919 	add.w	r9, r4, #25
 800ee92:	e7f4      	b.n	800ee7e <_printf_float+0x456>

0800ee94 <_printf_common>:
 800ee94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee98:	4616      	mov	r6, r2
 800ee9a:	4699      	mov	r9, r3
 800ee9c:	688a      	ldr	r2, [r1, #8]
 800ee9e:	690b      	ldr	r3, [r1, #16]
 800eea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eea4:	4293      	cmp	r3, r2
 800eea6:	bfb8      	it	lt
 800eea8:	4613      	movlt	r3, r2
 800eeaa:	6033      	str	r3, [r6, #0]
 800eeac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	b10a      	cbz	r2, 800eeba <_printf_common+0x26>
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	6033      	str	r3, [r6, #0]
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	0699      	lsls	r1, r3, #26
 800eebe:	bf42      	ittt	mi
 800eec0:	6833      	ldrmi	r3, [r6, #0]
 800eec2:	3302      	addmi	r3, #2
 800eec4:	6033      	strmi	r3, [r6, #0]
 800eec6:	6825      	ldr	r5, [r4, #0]
 800eec8:	f015 0506 	ands.w	r5, r5, #6
 800eecc:	d106      	bne.n	800eedc <_printf_common+0x48>
 800eece:	f104 0a19 	add.w	sl, r4, #25
 800eed2:	68e3      	ldr	r3, [r4, #12]
 800eed4:	6832      	ldr	r2, [r6, #0]
 800eed6:	1a9b      	subs	r3, r3, r2
 800eed8:	42ab      	cmp	r3, r5
 800eeda:	dc26      	bgt.n	800ef2a <_printf_common+0x96>
 800eedc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eee0:	1e13      	subs	r3, r2, #0
 800eee2:	6822      	ldr	r2, [r4, #0]
 800eee4:	bf18      	it	ne
 800eee6:	2301      	movne	r3, #1
 800eee8:	0692      	lsls	r2, r2, #26
 800eeea:	d42b      	bmi.n	800ef44 <_printf_common+0xb0>
 800eeec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eef0:	4649      	mov	r1, r9
 800eef2:	4638      	mov	r0, r7
 800eef4:	47c0      	blx	r8
 800eef6:	3001      	adds	r0, #1
 800eef8:	d01e      	beq.n	800ef38 <_printf_common+0xa4>
 800eefa:	6823      	ldr	r3, [r4, #0]
 800eefc:	68e5      	ldr	r5, [r4, #12]
 800eefe:	6832      	ldr	r2, [r6, #0]
 800ef00:	f003 0306 	and.w	r3, r3, #6
 800ef04:	2b04      	cmp	r3, #4
 800ef06:	bf08      	it	eq
 800ef08:	1aad      	subeq	r5, r5, r2
 800ef0a:	68a3      	ldr	r3, [r4, #8]
 800ef0c:	6922      	ldr	r2, [r4, #16]
 800ef0e:	bf0c      	ite	eq
 800ef10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef14:	2500      	movne	r5, #0
 800ef16:	4293      	cmp	r3, r2
 800ef18:	bfc4      	itt	gt
 800ef1a:	1a9b      	subgt	r3, r3, r2
 800ef1c:	18ed      	addgt	r5, r5, r3
 800ef1e:	2600      	movs	r6, #0
 800ef20:	341a      	adds	r4, #26
 800ef22:	42b5      	cmp	r5, r6
 800ef24:	d11a      	bne.n	800ef5c <_printf_common+0xc8>
 800ef26:	2000      	movs	r0, #0
 800ef28:	e008      	b.n	800ef3c <_printf_common+0xa8>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	4652      	mov	r2, sl
 800ef2e:	4649      	mov	r1, r9
 800ef30:	4638      	mov	r0, r7
 800ef32:	47c0      	blx	r8
 800ef34:	3001      	adds	r0, #1
 800ef36:	d103      	bne.n	800ef40 <_printf_common+0xac>
 800ef38:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef40:	3501      	adds	r5, #1
 800ef42:	e7c6      	b.n	800eed2 <_printf_common+0x3e>
 800ef44:	18e1      	adds	r1, r4, r3
 800ef46:	1c5a      	adds	r2, r3, #1
 800ef48:	2030      	movs	r0, #48	; 0x30
 800ef4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef4e:	4422      	add	r2, r4
 800ef50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef58:	3302      	adds	r3, #2
 800ef5a:	e7c7      	b.n	800eeec <_printf_common+0x58>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	4622      	mov	r2, r4
 800ef60:	4649      	mov	r1, r9
 800ef62:	4638      	mov	r0, r7
 800ef64:	47c0      	blx	r8
 800ef66:	3001      	adds	r0, #1
 800ef68:	d0e6      	beq.n	800ef38 <_printf_common+0xa4>
 800ef6a:	3601      	adds	r6, #1
 800ef6c:	e7d9      	b.n	800ef22 <_printf_common+0x8e>
	...

0800ef70 <_printf_i>:
 800ef70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef74:	7e0f      	ldrb	r7, [r1, #24]
 800ef76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef78:	2f78      	cmp	r7, #120	; 0x78
 800ef7a:	4691      	mov	r9, r2
 800ef7c:	4680      	mov	r8, r0
 800ef7e:	460c      	mov	r4, r1
 800ef80:	469a      	mov	sl, r3
 800ef82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef86:	d807      	bhi.n	800ef98 <_printf_i+0x28>
 800ef88:	2f62      	cmp	r7, #98	; 0x62
 800ef8a:	d80a      	bhi.n	800efa2 <_printf_i+0x32>
 800ef8c:	2f00      	cmp	r7, #0
 800ef8e:	f000 80d8 	beq.w	800f142 <_printf_i+0x1d2>
 800ef92:	2f58      	cmp	r7, #88	; 0x58
 800ef94:	f000 80a3 	beq.w	800f0de <_printf_i+0x16e>
 800ef98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efa0:	e03a      	b.n	800f018 <_printf_i+0xa8>
 800efa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efa6:	2b15      	cmp	r3, #21
 800efa8:	d8f6      	bhi.n	800ef98 <_printf_i+0x28>
 800efaa:	a101      	add	r1, pc, #4	; (adr r1, 800efb0 <_printf_i+0x40>)
 800efac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efb0:	0800f009 	.word	0x0800f009
 800efb4:	0800f01d 	.word	0x0800f01d
 800efb8:	0800ef99 	.word	0x0800ef99
 800efbc:	0800ef99 	.word	0x0800ef99
 800efc0:	0800ef99 	.word	0x0800ef99
 800efc4:	0800ef99 	.word	0x0800ef99
 800efc8:	0800f01d 	.word	0x0800f01d
 800efcc:	0800ef99 	.word	0x0800ef99
 800efd0:	0800ef99 	.word	0x0800ef99
 800efd4:	0800ef99 	.word	0x0800ef99
 800efd8:	0800ef99 	.word	0x0800ef99
 800efdc:	0800f129 	.word	0x0800f129
 800efe0:	0800f04d 	.word	0x0800f04d
 800efe4:	0800f10b 	.word	0x0800f10b
 800efe8:	0800ef99 	.word	0x0800ef99
 800efec:	0800ef99 	.word	0x0800ef99
 800eff0:	0800f14b 	.word	0x0800f14b
 800eff4:	0800ef99 	.word	0x0800ef99
 800eff8:	0800f04d 	.word	0x0800f04d
 800effc:	0800ef99 	.word	0x0800ef99
 800f000:	0800ef99 	.word	0x0800ef99
 800f004:	0800f113 	.word	0x0800f113
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	1d1a      	adds	r2, r3, #4
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	602a      	str	r2, [r5, #0]
 800f010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f018:	2301      	movs	r3, #1
 800f01a:	e0a3      	b.n	800f164 <_printf_i+0x1f4>
 800f01c:	6820      	ldr	r0, [r4, #0]
 800f01e:	6829      	ldr	r1, [r5, #0]
 800f020:	0606      	lsls	r6, r0, #24
 800f022:	f101 0304 	add.w	r3, r1, #4
 800f026:	d50a      	bpl.n	800f03e <_printf_i+0xce>
 800f028:	680e      	ldr	r6, [r1, #0]
 800f02a:	602b      	str	r3, [r5, #0]
 800f02c:	2e00      	cmp	r6, #0
 800f02e:	da03      	bge.n	800f038 <_printf_i+0xc8>
 800f030:	232d      	movs	r3, #45	; 0x2d
 800f032:	4276      	negs	r6, r6
 800f034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f038:	485e      	ldr	r0, [pc, #376]	; (800f1b4 <_printf_i+0x244>)
 800f03a:	230a      	movs	r3, #10
 800f03c:	e019      	b.n	800f072 <_printf_i+0x102>
 800f03e:	680e      	ldr	r6, [r1, #0]
 800f040:	602b      	str	r3, [r5, #0]
 800f042:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f046:	bf18      	it	ne
 800f048:	b236      	sxthne	r6, r6
 800f04a:	e7ef      	b.n	800f02c <_printf_i+0xbc>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	6820      	ldr	r0, [r4, #0]
 800f050:	1d19      	adds	r1, r3, #4
 800f052:	6029      	str	r1, [r5, #0]
 800f054:	0601      	lsls	r1, r0, #24
 800f056:	d501      	bpl.n	800f05c <_printf_i+0xec>
 800f058:	681e      	ldr	r6, [r3, #0]
 800f05a:	e002      	b.n	800f062 <_printf_i+0xf2>
 800f05c:	0646      	lsls	r6, r0, #25
 800f05e:	d5fb      	bpl.n	800f058 <_printf_i+0xe8>
 800f060:	881e      	ldrh	r6, [r3, #0]
 800f062:	4854      	ldr	r0, [pc, #336]	; (800f1b4 <_printf_i+0x244>)
 800f064:	2f6f      	cmp	r7, #111	; 0x6f
 800f066:	bf0c      	ite	eq
 800f068:	2308      	moveq	r3, #8
 800f06a:	230a      	movne	r3, #10
 800f06c:	2100      	movs	r1, #0
 800f06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f072:	6865      	ldr	r5, [r4, #4]
 800f074:	60a5      	str	r5, [r4, #8]
 800f076:	2d00      	cmp	r5, #0
 800f078:	bfa2      	ittt	ge
 800f07a:	6821      	ldrge	r1, [r4, #0]
 800f07c:	f021 0104 	bicge.w	r1, r1, #4
 800f080:	6021      	strge	r1, [r4, #0]
 800f082:	b90e      	cbnz	r6, 800f088 <_printf_i+0x118>
 800f084:	2d00      	cmp	r5, #0
 800f086:	d04d      	beq.n	800f124 <_printf_i+0x1b4>
 800f088:	4615      	mov	r5, r2
 800f08a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f08e:	fb03 6711 	mls	r7, r3, r1, r6
 800f092:	5dc7      	ldrb	r7, [r0, r7]
 800f094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f098:	4637      	mov	r7, r6
 800f09a:	42bb      	cmp	r3, r7
 800f09c:	460e      	mov	r6, r1
 800f09e:	d9f4      	bls.n	800f08a <_printf_i+0x11a>
 800f0a0:	2b08      	cmp	r3, #8
 800f0a2:	d10b      	bne.n	800f0bc <_printf_i+0x14c>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	07de      	lsls	r6, r3, #31
 800f0a8:	d508      	bpl.n	800f0bc <_printf_i+0x14c>
 800f0aa:	6923      	ldr	r3, [r4, #16]
 800f0ac:	6861      	ldr	r1, [r4, #4]
 800f0ae:	4299      	cmp	r1, r3
 800f0b0:	bfde      	ittt	le
 800f0b2:	2330      	movle	r3, #48	; 0x30
 800f0b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0bc:	1b52      	subs	r2, r2, r5
 800f0be:	6122      	str	r2, [r4, #16]
 800f0c0:	f8cd a000 	str.w	sl, [sp]
 800f0c4:	464b      	mov	r3, r9
 800f0c6:	aa03      	add	r2, sp, #12
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	f7ff fee2 	bl	800ee94 <_printf_common>
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	d14c      	bne.n	800f16e <_printf_i+0x1fe>
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d8:	b004      	add	sp, #16
 800f0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0de:	4835      	ldr	r0, [pc, #212]	; (800f1b4 <_printf_i+0x244>)
 800f0e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f0e4:	6829      	ldr	r1, [r5, #0]
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f0ec:	6029      	str	r1, [r5, #0]
 800f0ee:	061d      	lsls	r5, r3, #24
 800f0f0:	d514      	bpl.n	800f11c <_printf_i+0x1ac>
 800f0f2:	07df      	lsls	r7, r3, #31
 800f0f4:	bf44      	itt	mi
 800f0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800f0fa:	6023      	strmi	r3, [r4, #0]
 800f0fc:	b91e      	cbnz	r6, 800f106 <_printf_i+0x196>
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	f023 0320 	bic.w	r3, r3, #32
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	2310      	movs	r3, #16
 800f108:	e7b0      	b.n	800f06c <_printf_i+0xfc>
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	f043 0320 	orr.w	r3, r3, #32
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	2378      	movs	r3, #120	; 0x78
 800f114:	4828      	ldr	r0, [pc, #160]	; (800f1b8 <_printf_i+0x248>)
 800f116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f11a:	e7e3      	b.n	800f0e4 <_printf_i+0x174>
 800f11c:	0659      	lsls	r1, r3, #25
 800f11e:	bf48      	it	mi
 800f120:	b2b6      	uxthmi	r6, r6
 800f122:	e7e6      	b.n	800f0f2 <_printf_i+0x182>
 800f124:	4615      	mov	r5, r2
 800f126:	e7bb      	b.n	800f0a0 <_printf_i+0x130>
 800f128:	682b      	ldr	r3, [r5, #0]
 800f12a:	6826      	ldr	r6, [r4, #0]
 800f12c:	6961      	ldr	r1, [r4, #20]
 800f12e:	1d18      	adds	r0, r3, #4
 800f130:	6028      	str	r0, [r5, #0]
 800f132:	0635      	lsls	r5, r6, #24
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	d501      	bpl.n	800f13c <_printf_i+0x1cc>
 800f138:	6019      	str	r1, [r3, #0]
 800f13a:	e002      	b.n	800f142 <_printf_i+0x1d2>
 800f13c:	0670      	lsls	r0, r6, #25
 800f13e:	d5fb      	bpl.n	800f138 <_printf_i+0x1c8>
 800f140:	8019      	strh	r1, [r3, #0]
 800f142:	2300      	movs	r3, #0
 800f144:	6123      	str	r3, [r4, #16]
 800f146:	4615      	mov	r5, r2
 800f148:	e7ba      	b.n	800f0c0 <_printf_i+0x150>
 800f14a:	682b      	ldr	r3, [r5, #0]
 800f14c:	1d1a      	adds	r2, r3, #4
 800f14e:	602a      	str	r2, [r5, #0]
 800f150:	681d      	ldr	r5, [r3, #0]
 800f152:	6862      	ldr	r2, [r4, #4]
 800f154:	2100      	movs	r1, #0
 800f156:	4628      	mov	r0, r5
 800f158:	f7f1 f85a 	bl	8000210 <memchr>
 800f15c:	b108      	cbz	r0, 800f162 <_printf_i+0x1f2>
 800f15e:	1b40      	subs	r0, r0, r5
 800f160:	6060      	str	r0, [r4, #4]
 800f162:	6863      	ldr	r3, [r4, #4]
 800f164:	6123      	str	r3, [r4, #16]
 800f166:	2300      	movs	r3, #0
 800f168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f16c:	e7a8      	b.n	800f0c0 <_printf_i+0x150>
 800f16e:	6923      	ldr	r3, [r4, #16]
 800f170:	462a      	mov	r2, r5
 800f172:	4649      	mov	r1, r9
 800f174:	4640      	mov	r0, r8
 800f176:	47d0      	blx	sl
 800f178:	3001      	adds	r0, #1
 800f17a:	d0ab      	beq.n	800f0d4 <_printf_i+0x164>
 800f17c:	6823      	ldr	r3, [r4, #0]
 800f17e:	079b      	lsls	r3, r3, #30
 800f180:	d413      	bmi.n	800f1aa <_printf_i+0x23a>
 800f182:	68e0      	ldr	r0, [r4, #12]
 800f184:	9b03      	ldr	r3, [sp, #12]
 800f186:	4298      	cmp	r0, r3
 800f188:	bfb8      	it	lt
 800f18a:	4618      	movlt	r0, r3
 800f18c:	e7a4      	b.n	800f0d8 <_printf_i+0x168>
 800f18e:	2301      	movs	r3, #1
 800f190:	4632      	mov	r2, r6
 800f192:	4649      	mov	r1, r9
 800f194:	4640      	mov	r0, r8
 800f196:	47d0      	blx	sl
 800f198:	3001      	adds	r0, #1
 800f19a:	d09b      	beq.n	800f0d4 <_printf_i+0x164>
 800f19c:	3501      	adds	r5, #1
 800f19e:	68e3      	ldr	r3, [r4, #12]
 800f1a0:	9903      	ldr	r1, [sp, #12]
 800f1a2:	1a5b      	subs	r3, r3, r1
 800f1a4:	42ab      	cmp	r3, r5
 800f1a6:	dcf2      	bgt.n	800f18e <_printf_i+0x21e>
 800f1a8:	e7eb      	b.n	800f182 <_printf_i+0x212>
 800f1aa:	2500      	movs	r5, #0
 800f1ac:	f104 0619 	add.w	r6, r4, #25
 800f1b0:	e7f5      	b.n	800f19e <_printf_i+0x22e>
 800f1b2:	bf00      	nop
 800f1b4:	080136e6 	.word	0x080136e6
 800f1b8:	080136f7 	.word	0x080136f7

0800f1bc <cleanup_glue>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	460c      	mov	r4, r1
 800f1c0:	6809      	ldr	r1, [r1, #0]
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	b109      	cbz	r1, 800f1ca <cleanup_glue+0xe>
 800f1c6:	f7ff fff9 	bl	800f1bc <cleanup_glue>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1d2:	f002 bffb 	b.w	80121cc <_free_r>
	...

0800f1d8 <_reclaim_reent>:
 800f1d8:	4b2c      	ldr	r3, [pc, #176]	; (800f28c <_reclaim_reent+0xb4>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4283      	cmp	r3, r0
 800f1de:	b570      	push	{r4, r5, r6, lr}
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	d051      	beq.n	800f288 <_reclaim_reent+0xb0>
 800f1e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f1e6:	b143      	cbz	r3, 800f1fa <_reclaim_reent+0x22>
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d14a      	bne.n	800f284 <_reclaim_reent+0xac>
 800f1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1f0:	6819      	ldr	r1, [r3, #0]
 800f1f2:	b111      	cbz	r1, 800f1fa <_reclaim_reent+0x22>
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f002 ffe9 	bl	80121cc <_free_r>
 800f1fa:	6961      	ldr	r1, [r4, #20]
 800f1fc:	b111      	cbz	r1, 800f204 <_reclaim_reent+0x2c>
 800f1fe:	4620      	mov	r0, r4
 800f200:	f002 ffe4 	bl	80121cc <_free_r>
 800f204:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f206:	b111      	cbz	r1, 800f20e <_reclaim_reent+0x36>
 800f208:	4620      	mov	r0, r4
 800f20a:	f002 ffdf 	bl	80121cc <_free_r>
 800f20e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f210:	b111      	cbz	r1, 800f218 <_reclaim_reent+0x40>
 800f212:	4620      	mov	r0, r4
 800f214:	f002 ffda 	bl	80121cc <_free_r>
 800f218:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f21a:	b111      	cbz	r1, 800f222 <_reclaim_reent+0x4a>
 800f21c:	4620      	mov	r0, r4
 800f21e:	f002 ffd5 	bl	80121cc <_free_r>
 800f222:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f224:	b111      	cbz	r1, 800f22c <_reclaim_reent+0x54>
 800f226:	4620      	mov	r0, r4
 800f228:	f002 ffd0 	bl	80121cc <_free_r>
 800f22c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f22e:	b111      	cbz	r1, 800f236 <_reclaim_reent+0x5e>
 800f230:	4620      	mov	r0, r4
 800f232:	f002 ffcb 	bl	80121cc <_free_r>
 800f236:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f238:	b111      	cbz	r1, 800f240 <_reclaim_reent+0x68>
 800f23a:	4620      	mov	r0, r4
 800f23c:	f002 ffc6 	bl	80121cc <_free_r>
 800f240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f242:	b111      	cbz	r1, 800f24a <_reclaim_reent+0x72>
 800f244:	4620      	mov	r0, r4
 800f246:	f002 ffc1 	bl	80121cc <_free_r>
 800f24a:	69a3      	ldr	r3, [r4, #24]
 800f24c:	b1e3      	cbz	r3, 800f288 <_reclaim_reent+0xb0>
 800f24e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f250:	4620      	mov	r0, r4
 800f252:	4798      	blx	r3
 800f254:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f256:	b1b9      	cbz	r1, 800f288 <_reclaim_reent+0xb0>
 800f258:	4620      	mov	r0, r4
 800f25a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f25e:	f7ff bfad 	b.w	800f1bc <cleanup_glue>
 800f262:	5949      	ldr	r1, [r1, r5]
 800f264:	b941      	cbnz	r1, 800f278 <_reclaim_reent+0xa0>
 800f266:	3504      	adds	r5, #4
 800f268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f26a:	2d80      	cmp	r5, #128	; 0x80
 800f26c:	68d9      	ldr	r1, [r3, #12]
 800f26e:	d1f8      	bne.n	800f262 <_reclaim_reent+0x8a>
 800f270:	4620      	mov	r0, r4
 800f272:	f002 ffab 	bl	80121cc <_free_r>
 800f276:	e7ba      	b.n	800f1ee <_reclaim_reent+0x16>
 800f278:	680e      	ldr	r6, [r1, #0]
 800f27a:	4620      	mov	r0, r4
 800f27c:	f002 ffa6 	bl	80121cc <_free_r>
 800f280:	4631      	mov	r1, r6
 800f282:	e7ef      	b.n	800f264 <_reclaim_reent+0x8c>
 800f284:	2500      	movs	r5, #0
 800f286:	e7ef      	b.n	800f268 <_reclaim_reent+0x90>
 800f288:	bd70      	pop	{r4, r5, r6, pc}
 800f28a:	bf00      	nop
 800f28c:	20000014 	.word	0x20000014

0800f290 <_sbrk_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d06      	ldr	r5, [pc, #24]	; (800f2ac <_sbrk_r+0x1c>)
 800f294:	2300      	movs	r3, #0
 800f296:	4604      	mov	r4, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	602b      	str	r3, [r5, #0]
 800f29c:	f7f5 fb00 	bl	80048a0 <_sbrk>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d102      	bne.n	800f2aa <_sbrk_r+0x1a>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	b103      	cbz	r3, 800f2aa <_sbrk_r+0x1a>
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	20005200 	.word	0x20005200

0800f2b0 <siprintf>:
 800f2b0:	b40e      	push	{r1, r2, r3}
 800f2b2:	b500      	push	{lr}
 800f2b4:	b09c      	sub	sp, #112	; 0x70
 800f2b6:	ab1d      	add	r3, sp, #116	; 0x74
 800f2b8:	9002      	str	r0, [sp, #8]
 800f2ba:	9006      	str	r0, [sp, #24]
 800f2bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2c0:	4809      	ldr	r0, [pc, #36]	; (800f2e8 <siprintf+0x38>)
 800f2c2:	9107      	str	r1, [sp, #28]
 800f2c4:	9104      	str	r1, [sp, #16]
 800f2c6:	4909      	ldr	r1, [pc, #36]	; (800f2ec <siprintf+0x3c>)
 800f2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2cc:	9105      	str	r1, [sp, #20]
 800f2ce:	6800      	ldr	r0, [r0, #0]
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	a902      	add	r1, sp, #8
 800f2d4:	f003 f822 	bl	801231c <_svfiprintf_r>
 800f2d8:	9b02      	ldr	r3, [sp, #8]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	701a      	strb	r2, [r3, #0]
 800f2de:	b01c      	add	sp, #112	; 0x70
 800f2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2e4:	b003      	add	sp, #12
 800f2e6:	4770      	bx	lr
 800f2e8:	20000014 	.word	0x20000014
 800f2ec:	ffff0208 	.word	0xffff0208

0800f2f0 <__sread>:
 800f2f0:	b510      	push	{r4, lr}
 800f2f2:	460c      	mov	r4, r1
 800f2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f8:	f003 fa6a 	bl	80127d0 <_read_r>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	bfab      	itete	ge
 800f300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f302:	89a3      	ldrhlt	r3, [r4, #12]
 800f304:	181b      	addge	r3, r3, r0
 800f306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f30a:	bfac      	ite	ge
 800f30c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f30e:	81a3      	strhlt	r3, [r4, #12]
 800f310:	bd10      	pop	{r4, pc}

0800f312 <__swrite>:
 800f312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f316:	461f      	mov	r7, r3
 800f318:	898b      	ldrh	r3, [r1, #12]
 800f31a:	05db      	lsls	r3, r3, #23
 800f31c:	4605      	mov	r5, r0
 800f31e:	460c      	mov	r4, r1
 800f320:	4616      	mov	r6, r2
 800f322:	d505      	bpl.n	800f330 <__swrite+0x1e>
 800f324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f328:	2302      	movs	r3, #2
 800f32a:	2200      	movs	r2, #0
 800f32c:	f002 fa3e 	bl	80117ac <_lseek_r>
 800f330:	89a3      	ldrh	r3, [r4, #12]
 800f332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f33a:	81a3      	strh	r3, [r4, #12]
 800f33c:	4632      	mov	r2, r6
 800f33e:	463b      	mov	r3, r7
 800f340:	4628      	mov	r0, r5
 800f342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f346:	f000 bf2d 	b.w	80101a4 <_write_r>

0800f34a <__sseek>:
 800f34a:	b510      	push	{r4, lr}
 800f34c:	460c      	mov	r4, r1
 800f34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f352:	f002 fa2b 	bl	80117ac <_lseek_r>
 800f356:	1c43      	adds	r3, r0, #1
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	bf15      	itete	ne
 800f35c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f366:	81a3      	strheq	r3, [r4, #12]
 800f368:	bf18      	it	ne
 800f36a:	81a3      	strhne	r3, [r4, #12]
 800f36c:	bd10      	pop	{r4, pc}

0800f36e <__sclose>:
 800f36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f372:	f000 bf47 	b.w	8010204 <_close_r>

0800f376 <sulp>:
 800f376:	b570      	push	{r4, r5, r6, lr}
 800f378:	4604      	mov	r4, r0
 800f37a:	460d      	mov	r5, r1
 800f37c:	ec45 4b10 	vmov	d0, r4, r5
 800f380:	4616      	mov	r6, r2
 800f382:	f002 fdbd 	bl	8011f00 <__ulp>
 800f386:	ec51 0b10 	vmov	r0, r1, d0
 800f38a:	b17e      	cbz	r6, 800f3ac <sulp+0x36>
 800f38c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f390:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f394:	2b00      	cmp	r3, #0
 800f396:	dd09      	ble.n	800f3ac <sulp+0x36>
 800f398:	051b      	lsls	r3, r3, #20
 800f39a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f39e:	2400      	movs	r4, #0
 800f3a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f3a4:	4622      	mov	r2, r4
 800f3a6:	462b      	mov	r3, r5
 800f3a8:	f7f1 f93e 	bl	8000628 <__aeabi_dmul>
 800f3ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3b0 <_strtod_l>:
 800f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b4:	ed2d 8b02 	vpush	{d8}
 800f3b8:	b09d      	sub	sp, #116	; 0x74
 800f3ba:	461f      	mov	r7, r3
 800f3bc:	2300      	movs	r3, #0
 800f3be:	9318      	str	r3, [sp, #96]	; 0x60
 800f3c0:	4ba2      	ldr	r3, [pc, #648]	; (800f64c <_strtod_l+0x29c>)
 800f3c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	9305      	str	r3, [sp, #20]
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	4688      	mov	r8, r1
 800f3ce:	f7f0 ff11 	bl	80001f4 <strlen>
 800f3d2:	f04f 0a00 	mov.w	sl, #0
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	f04f 0b00 	mov.w	fp, #0
 800f3dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f3e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3e2:	781a      	ldrb	r2, [r3, #0]
 800f3e4:	2a2b      	cmp	r2, #43	; 0x2b
 800f3e6:	d04e      	beq.n	800f486 <_strtod_l+0xd6>
 800f3e8:	d83b      	bhi.n	800f462 <_strtod_l+0xb2>
 800f3ea:	2a0d      	cmp	r2, #13
 800f3ec:	d834      	bhi.n	800f458 <_strtod_l+0xa8>
 800f3ee:	2a08      	cmp	r2, #8
 800f3f0:	d834      	bhi.n	800f45c <_strtod_l+0xac>
 800f3f2:	2a00      	cmp	r2, #0
 800f3f4:	d03e      	beq.n	800f474 <_strtod_l+0xc4>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	930a      	str	r3, [sp, #40]	; 0x28
 800f3fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f3fc:	7833      	ldrb	r3, [r6, #0]
 800f3fe:	2b30      	cmp	r3, #48	; 0x30
 800f400:	f040 80b0 	bne.w	800f564 <_strtod_l+0x1b4>
 800f404:	7873      	ldrb	r3, [r6, #1]
 800f406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f40a:	2b58      	cmp	r3, #88	; 0x58
 800f40c:	d168      	bne.n	800f4e0 <_strtod_l+0x130>
 800f40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f410:	9301      	str	r3, [sp, #4]
 800f412:	ab18      	add	r3, sp, #96	; 0x60
 800f414:	9702      	str	r7, [sp, #8]
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	4a8d      	ldr	r2, [pc, #564]	; (800f650 <_strtod_l+0x2a0>)
 800f41a:	ab19      	add	r3, sp, #100	; 0x64
 800f41c:	a917      	add	r1, sp, #92	; 0x5c
 800f41e:	4620      	mov	r0, r4
 800f420:	f001 feb8 	bl	8011194 <__gethex>
 800f424:	f010 0707 	ands.w	r7, r0, #7
 800f428:	4605      	mov	r5, r0
 800f42a:	d005      	beq.n	800f438 <_strtod_l+0x88>
 800f42c:	2f06      	cmp	r7, #6
 800f42e:	d12c      	bne.n	800f48a <_strtod_l+0xda>
 800f430:	3601      	adds	r6, #1
 800f432:	2300      	movs	r3, #0
 800f434:	9617      	str	r6, [sp, #92]	; 0x5c
 800f436:	930a      	str	r3, [sp, #40]	; 0x28
 800f438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f040 8590 	bne.w	800ff60 <_strtod_l+0xbb0>
 800f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f442:	b1eb      	cbz	r3, 800f480 <_strtod_l+0xd0>
 800f444:	4652      	mov	r2, sl
 800f446:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f44a:	ec43 2b10 	vmov	d0, r2, r3
 800f44e:	b01d      	add	sp, #116	; 0x74
 800f450:	ecbd 8b02 	vpop	{d8}
 800f454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f458:	2a20      	cmp	r2, #32
 800f45a:	d1cc      	bne.n	800f3f6 <_strtod_l+0x46>
 800f45c:	3301      	adds	r3, #1
 800f45e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f460:	e7be      	b.n	800f3e0 <_strtod_l+0x30>
 800f462:	2a2d      	cmp	r2, #45	; 0x2d
 800f464:	d1c7      	bne.n	800f3f6 <_strtod_l+0x46>
 800f466:	2201      	movs	r2, #1
 800f468:	920a      	str	r2, [sp, #40]	; 0x28
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f46e:	785b      	ldrb	r3, [r3, #1]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d1c2      	bne.n	800f3fa <_strtod_l+0x4a>
 800f474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f476:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f040 856e 	bne.w	800ff5c <_strtod_l+0xbac>
 800f480:	4652      	mov	r2, sl
 800f482:	465b      	mov	r3, fp
 800f484:	e7e1      	b.n	800f44a <_strtod_l+0x9a>
 800f486:	2200      	movs	r2, #0
 800f488:	e7ee      	b.n	800f468 <_strtod_l+0xb8>
 800f48a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f48c:	b13a      	cbz	r2, 800f49e <_strtod_l+0xee>
 800f48e:	2135      	movs	r1, #53	; 0x35
 800f490:	a81a      	add	r0, sp, #104	; 0x68
 800f492:	f002 fe40 	bl	8012116 <__copybits>
 800f496:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f498:	4620      	mov	r0, r4
 800f49a:	f002 f9ff 	bl	801189c <_Bfree>
 800f49e:	3f01      	subs	r7, #1
 800f4a0:	2f04      	cmp	r7, #4
 800f4a2:	d806      	bhi.n	800f4b2 <_strtod_l+0x102>
 800f4a4:	e8df f007 	tbb	[pc, r7]
 800f4a8:	1714030a 	.word	0x1714030a
 800f4ac:	0a          	.byte	0x0a
 800f4ad:	00          	.byte	0x00
 800f4ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f4b2:	0728      	lsls	r0, r5, #28
 800f4b4:	d5c0      	bpl.n	800f438 <_strtod_l+0x88>
 800f4b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f4ba:	e7bd      	b.n	800f438 <_strtod_l+0x88>
 800f4bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f4c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f4c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f4c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f4ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f4ce:	e7f0      	b.n	800f4b2 <_strtod_l+0x102>
 800f4d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f654 <_strtod_l+0x2a4>
 800f4d4:	e7ed      	b.n	800f4b2 <_strtod_l+0x102>
 800f4d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f4da:	f04f 3aff 	mov.w	sl, #4294967295
 800f4de:	e7e8      	b.n	800f4b2 <_strtod_l+0x102>
 800f4e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f4e6:	785b      	ldrb	r3, [r3, #1]
 800f4e8:	2b30      	cmp	r3, #48	; 0x30
 800f4ea:	d0f9      	beq.n	800f4e0 <_strtod_l+0x130>
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d0a3      	beq.n	800f438 <_strtod_l+0x88>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	f04f 0900 	mov.w	r9, #0
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4fa:	9308      	str	r3, [sp, #32]
 800f4fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800f500:	464f      	mov	r7, r9
 800f502:	220a      	movs	r2, #10
 800f504:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f506:	7806      	ldrb	r6, [r0, #0]
 800f508:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f50c:	b2d9      	uxtb	r1, r3
 800f50e:	2909      	cmp	r1, #9
 800f510:	d92a      	bls.n	800f568 <_strtod_l+0x1b8>
 800f512:	9905      	ldr	r1, [sp, #20]
 800f514:	462a      	mov	r2, r5
 800f516:	f003 f977 	bl	8012808 <strncmp>
 800f51a:	b398      	cbz	r0, 800f584 <_strtod_l+0x1d4>
 800f51c:	2000      	movs	r0, #0
 800f51e:	4632      	mov	r2, r6
 800f520:	463d      	mov	r5, r7
 800f522:	9005      	str	r0, [sp, #20]
 800f524:	4603      	mov	r3, r0
 800f526:	2a65      	cmp	r2, #101	; 0x65
 800f528:	d001      	beq.n	800f52e <_strtod_l+0x17e>
 800f52a:	2a45      	cmp	r2, #69	; 0x45
 800f52c:	d118      	bne.n	800f560 <_strtod_l+0x1b0>
 800f52e:	b91d      	cbnz	r5, 800f538 <_strtod_l+0x188>
 800f530:	9a04      	ldr	r2, [sp, #16]
 800f532:	4302      	orrs	r2, r0
 800f534:	d09e      	beq.n	800f474 <_strtod_l+0xc4>
 800f536:	2500      	movs	r5, #0
 800f538:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f53c:	f108 0201 	add.w	r2, r8, #1
 800f540:	9217      	str	r2, [sp, #92]	; 0x5c
 800f542:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f546:	2a2b      	cmp	r2, #43	; 0x2b
 800f548:	d075      	beq.n	800f636 <_strtod_l+0x286>
 800f54a:	2a2d      	cmp	r2, #45	; 0x2d
 800f54c:	d07b      	beq.n	800f646 <_strtod_l+0x296>
 800f54e:	f04f 0c00 	mov.w	ip, #0
 800f552:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f556:	2909      	cmp	r1, #9
 800f558:	f240 8082 	bls.w	800f660 <_strtod_l+0x2b0>
 800f55c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f560:	2600      	movs	r6, #0
 800f562:	e09d      	b.n	800f6a0 <_strtod_l+0x2f0>
 800f564:	2300      	movs	r3, #0
 800f566:	e7c4      	b.n	800f4f2 <_strtod_l+0x142>
 800f568:	2f08      	cmp	r7, #8
 800f56a:	bfd8      	it	le
 800f56c:	9907      	ldrle	r1, [sp, #28]
 800f56e:	f100 0001 	add.w	r0, r0, #1
 800f572:	bfda      	itte	le
 800f574:	fb02 3301 	mlale	r3, r2, r1, r3
 800f578:	9307      	strle	r3, [sp, #28]
 800f57a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f57e:	3701      	adds	r7, #1
 800f580:	9017      	str	r0, [sp, #92]	; 0x5c
 800f582:	e7bf      	b.n	800f504 <_strtod_l+0x154>
 800f584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f586:	195a      	adds	r2, r3, r5
 800f588:	9217      	str	r2, [sp, #92]	; 0x5c
 800f58a:	5d5a      	ldrb	r2, [r3, r5]
 800f58c:	2f00      	cmp	r7, #0
 800f58e:	d037      	beq.n	800f600 <_strtod_l+0x250>
 800f590:	9005      	str	r0, [sp, #20]
 800f592:	463d      	mov	r5, r7
 800f594:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f598:	2b09      	cmp	r3, #9
 800f59a:	d912      	bls.n	800f5c2 <_strtod_l+0x212>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e7c2      	b.n	800f526 <_strtod_l+0x176>
 800f5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5a2:	1c5a      	adds	r2, r3, #1
 800f5a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f5a6:	785a      	ldrb	r2, [r3, #1]
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	2a30      	cmp	r2, #48	; 0x30
 800f5ac:	d0f8      	beq.n	800f5a0 <_strtod_l+0x1f0>
 800f5ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f5b2:	2b08      	cmp	r3, #8
 800f5b4:	f200 84d9 	bhi.w	800ff6a <_strtod_l+0xbba>
 800f5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5ba:	9005      	str	r0, [sp, #20]
 800f5bc:	2000      	movs	r0, #0
 800f5be:	9308      	str	r3, [sp, #32]
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	3a30      	subs	r2, #48	; 0x30
 800f5c4:	f100 0301 	add.w	r3, r0, #1
 800f5c8:	d014      	beq.n	800f5f4 <_strtod_l+0x244>
 800f5ca:	9905      	ldr	r1, [sp, #20]
 800f5cc:	4419      	add	r1, r3
 800f5ce:	9105      	str	r1, [sp, #20]
 800f5d0:	462b      	mov	r3, r5
 800f5d2:	eb00 0e05 	add.w	lr, r0, r5
 800f5d6:	210a      	movs	r1, #10
 800f5d8:	4573      	cmp	r3, lr
 800f5da:	d113      	bne.n	800f604 <_strtod_l+0x254>
 800f5dc:	182b      	adds	r3, r5, r0
 800f5de:	2b08      	cmp	r3, #8
 800f5e0:	f105 0501 	add.w	r5, r5, #1
 800f5e4:	4405      	add	r5, r0
 800f5e6:	dc1c      	bgt.n	800f622 <_strtod_l+0x272>
 800f5e8:	9907      	ldr	r1, [sp, #28]
 800f5ea:	230a      	movs	r3, #10
 800f5ec:	fb03 2301 	mla	r3, r3, r1, r2
 800f5f0:	9307      	str	r3, [sp, #28]
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f5f6:	1c51      	adds	r1, r2, #1
 800f5f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800f5fa:	7852      	ldrb	r2, [r2, #1]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	e7c9      	b.n	800f594 <_strtod_l+0x1e4>
 800f600:	4638      	mov	r0, r7
 800f602:	e7d2      	b.n	800f5aa <_strtod_l+0x1fa>
 800f604:	2b08      	cmp	r3, #8
 800f606:	dc04      	bgt.n	800f612 <_strtod_l+0x262>
 800f608:	9e07      	ldr	r6, [sp, #28]
 800f60a:	434e      	muls	r6, r1
 800f60c:	9607      	str	r6, [sp, #28]
 800f60e:	3301      	adds	r3, #1
 800f610:	e7e2      	b.n	800f5d8 <_strtod_l+0x228>
 800f612:	f103 0c01 	add.w	ip, r3, #1
 800f616:	f1bc 0f10 	cmp.w	ip, #16
 800f61a:	bfd8      	it	le
 800f61c:	fb01 f909 	mulle.w	r9, r1, r9
 800f620:	e7f5      	b.n	800f60e <_strtod_l+0x25e>
 800f622:	2d10      	cmp	r5, #16
 800f624:	bfdc      	itt	le
 800f626:	230a      	movle	r3, #10
 800f628:	fb03 2909 	mlale	r9, r3, r9, r2
 800f62c:	e7e1      	b.n	800f5f2 <_strtod_l+0x242>
 800f62e:	2300      	movs	r3, #0
 800f630:	9305      	str	r3, [sp, #20]
 800f632:	2301      	movs	r3, #1
 800f634:	e77c      	b.n	800f530 <_strtod_l+0x180>
 800f636:	f04f 0c00 	mov.w	ip, #0
 800f63a:	f108 0202 	add.w	r2, r8, #2
 800f63e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f640:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f644:	e785      	b.n	800f552 <_strtod_l+0x1a2>
 800f646:	f04f 0c01 	mov.w	ip, #1
 800f64a:	e7f6      	b.n	800f63a <_strtod_l+0x28a>
 800f64c:	080139e8 	.word	0x080139e8
 800f650:	08013708 	.word	0x08013708
 800f654:	7ff00000 	.word	0x7ff00000
 800f658:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f65a:	1c51      	adds	r1, r2, #1
 800f65c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f65e:	7852      	ldrb	r2, [r2, #1]
 800f660:	2a30      	cmp	r2, #48	; 0x30
 800f662:	d0f9      	beq.n	800f658 <_strtod_l+0x2a8>
 800f664:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f668:	2908      	cmp	r1, #8
 800f66a:	f63f af79 	bhi.w	800f560 <_strtod_l+0x1b0>
 800f66e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f674:	9206      	str	r2, [sp, #24]
 800f676:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f678:	1c51      	adds	r1, r2, #1
 800f67a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f67c:	7852      	ldrb	r2, [r2, #1]
 800f67e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f682:	2e09      	cmp	r6, #9
 800f684:	d937      	bls.n	800f6f6 <_strtod_l+0x346>
 800f686:	9e06      	ldr	r6, [sp, #24]
 800f688:	1b89      	subs	r1, r1, r6
 800f68a:	2908      	cmp	r1, #8
 800f68c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f690:	dc02      	bgt.n	800f698 <_strtod_l+0x2e8>
 800f692:	4576      	cmp	r6, lr
 800f694:	bfa8      	it	ge
 800f696:	4676      	movge	r6, lr
 800f698:	f1bc 0f00 	cmp.w	ip, #0
 800f69c:	d000      	beq.n	800f6a0 <_strtod_l+0x2f0>
 800f69e:	4276      	negs	r6, r6
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	d14d      	bne.n	800f740 <_strtod_l+0x390>
 800f6a4:	9904      	ldr	r1, [sp, #16]
 800f6a6:	4301      	orrs	r1, r0
 800f6a8:	f47f aec6 	bne.w	800f438 <_strtod_l+0x88>
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f47f aee1 	bne.w	800f474 <_strtod_l+0xc4>
 800f6b2:	2a69      	cmp	r2, #105	; 0x69
 800f6b4:	d027      	beq.n	800f706 <_strtod_l+0x356>
 800f6b6:	dc24      	bgt.n	800f702 <_strtod_l+0x352>
 800f6b8:	2a49      	cmp	r2, #73	; 0x49
 800f6ba:	d024      	beq.n	800f706 <_strtod_l+0x356>
 800f6bc:	2a4e      	cmp	r2, #78	; 0x4e
 800f6be:	f47f aed9 	bne.w	800f474 <_strtod_l+0xc4>
 800f6c2:	499f      	ldr	r1, [pc, #636]	; (800f940 <_strtod_l+0x590>)
 800f6c4:	a817      	add	r0, sp, #92	; 0x5c
 800f6c6:	f001 ffbd 	bl	8011644 <__match>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	f43f aed2 	beq.w	800f474 <_strtod_l+0xc4>
 800f6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	2b28      	cmp	r3, #40	; 0x28
 800f6d6:	d12d      	bne.n	800f734 <_strtod_l+0x384>
 800f6d8:	499a      	ldr	r1, [pc, #616]	; (800f944 <_strtod_l+0x594>)
 800f6da:	aa1a      	add	r2, sp, #104	; 0x68
 800f6dc:	a817      	add	r0, sp, #92	; 0x5c
 800f6de:	f001 ffc5 	bl	801166c <__hexnan>
 800f6e2:	2805      	cmp	r0, #5
 800f6e4:	d126      	bne.n	800f734 <_strtod_l+0x384>
 800f6e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f6e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f6ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f6f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f6f4:	e6a0      	b.n	800f438 <_strtod_l+0x88>
 800f6f6:	210a      	movs	r1, #10
 800f6f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f6fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f700:	e7b9      	b.n	800f676 <_strtod_l+0x2c6>
 800f702:	2a6e      	cmp	r2, #110	; 0x6e
 800f704:	e7db      	b.n	800f6be <_strtod_l+0x30e>
 800f706:	4990      	ldr	r1, [pc, #576]	; (800f948 <_strtod_l+0x598>)
 800f708:	a817      	add	r0, sp, #92	; 0x5c
 800f70a:	f001 ff9b 	bl	8011644 <__match>
 800f70e:	2800      	cmp	r0, #0
 800f710:	f43f aeb0 	beq.w	800f474 <_strtod_l+0xc4>
 800f714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f716:	498d      	ldr	r1, [pc, #564]	; (800f94c <_strtod_l+0x59c>)
 800f718:	3b01      	subs	r3, #1
 800f71a:	a817      	add	r0, sp, #92	; 0x5c
 800f71c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f71e:	f001 ff91 	bl	8011644 <__match>
 800f722:	b910      	cbnz	r0, 800f72a <_strtod_l+0x37a>
 800f724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f726:	3301      	adds	r3, #1
 800f728:	9317      	str	r3, [sp, #92]	; 0x5c
 800f72a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f95c <_strtod_l+0x5ac>
 800f72e:	f04f 0a00 	mov.w	sl, #0
 800f732:	e681      	b.n	800f438 <_strtod_l+0x88>
 800f734:	4886      	ldr	r0, [pc, #536]	; (800f950 <_strtod_l+0x5a0>)
 800f736:	f003 f85f 	bl	80127f8 <nan>
 800f73a:	ec5b ab10 	vmov	sl, fp, d0
 800f73e:	e67b      	b.n	800f438 <_strtod_l+0x88>
 800f740:	9b05      	ldr	r3, [sp, #20]
 800f742:	9807      	ldr	r0, [sp, #28]
 800f744:	1af3      	subs	r3, r6, r3
 800f746:	2f00      	cmp	r7, #0
 800f748:	bf08      	it	eq
 800f74a:	462f      	moveq	r7, r5
 800f74c:	2d10      	cmp	r5, #16
 800f74e:	9306      	str	r3, [sp, #24]
 800f750:	46a8      	mov	r8, r5
 800f752:	bfa8      	it	ge
 800f754:	f04f 0810 	movge.w	r8, #16
 800f758:	f7f0 feec 	bl	8000534 <__aeabi_ui2d>
 800f75c:	2d09      	cmp	r5, #9
 800f75e:	4682      	mov	sl, r0
 800f760:	468b      	mov	fp, r1
 800f762:	dd13      	ble.n	800f78c <_strtod_l+0x3dc>
 800f764:	4b7b      	ldr	r3, [pc, #492]	; (800f954 <_strtod_l+0x5a4>)
 800f766:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f76a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f76e:	f7f0 ff5b 	bl	8000628 <__aeabi_dmul>
 800f772:	4682      	mov	sl, r0
 800f774:	4648      	mov	r0, r9
 800f776:	468b      	mov	fp, r1
 800f778:	f7f0 fedc 	bl	8000534 <__aeabi_ui2d>
 800f77c:	4602      	mov	r2, r0
 800f77e:	460b      	mov	r3, r1
 800f780:	4650      	mov	r0, sl
 800f782:	4659      	mov	r1, fp
 800f784:	f7f0 fd9a 	bl	80002bc <__adddf3>
 800f788:	4682      	mov	sl, r0
 800f78a:	468b      	mov	fp, r1
 800f78c:	2d0f      	cmp	r5, #15
 800f78e:	dc38      	bgt.n	800f802 <_strtod_l+0x452>
 800f790:	9b06      	ldr	r3, [sp, #24]
 800f792:	2b00      	cmp	r3, #0
 800f794:	f43f ae50 	beq.w	800f438 <_strtod_l+0x88>
 800f798:	dd24      	ble.n	800f7e4 <_strtod_l+0x434>
 800f79a:	2b16      	cmp	r3, #22
 800f79c:	dc0b      	bgt.n	800f7b6 <_strtod_l+0x406>
 800f79e:	496d      	ldr	r1, [pc, #436]	; (800f954 <_strtod_l+0x5a4>)
 800f7a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7a8:	4652      	mov	r2, sl
 800f7aa:	465b      	mov	r3, fp
 800f7ac:	f7f0 ff3c 	bl	8000628 <__aeabi_dmul>
 800f7b0:	4682      	mov	sl, r0
 800f7b2:	468b      	mov	fp, r1
 800f7b4:	e640      	b.n	800f438 <_strtod_l+0x88>
 800f7b6:	9a06      	ldr	r2, [sp, #24]
 800f7b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	db20      	blt.n	800f802 <_strtod_l+0x452>
 800f7c0:	4c64      	ldr	r4, [pc, #400]	; (800f954 <_strtod_l+0x5a4>)
 800f7c2:	f1c5 050f 	rsb	r5, r5, #15
 800f7c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f7ca:	4652      	mov	r2, sl
 800f7cc:	465b      	mov	r3, fp
 800f7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7d2:	f7f0 ff29 	bl	8000628 <__aeabi_dmul>
 800f7d6:	9b06      	ldr	r3, [sp, #24]
 800f7d8:	1b5d      	subs	r5, r3, r5
 800f7da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f7de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f7e2:	e7e3      	b.n	800f7ac <_strtod_l+0x3fc>
 800f7e4:	9b06      	ldr	r3, [sp, #24]
 800f7e6:	3316      	adds	r3, #22
 800f7e8:	db0b      	blt.n	800f802 <_strtod_l+0x452>
 800f7ea:	9b05      	ldr	r3, [sp, #20]
 800f7ec:	1b9e      	subs	r6, r3, r6
 800f7ee:	4b59      	ldr	r3, [pc, #356]	; (800f954 <_strtod_l+0x5a4>)
 800f7f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f7f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7f8:	4650      	mov	r0, sl
 800f7fa:	4659      	mov	r1, fp
 800f7fc:	f7f1 f83e 	bl	800087c <__aeabi_ddiv>
 800f800:	e7d6      	b.n	800f7b0 <_strtod_l+0x400>
 800f802:	9b06      	ldr	r3, [sp, #24]
 800f804:	eba5 0808 	sub.w	r8, r5, r8
 800f808:	4498      	add	r8, r3
 800f80a:	f1b8 0f00 	cmp.w	r8, #0
 800f80e:	dd74      	ble.n	800f8fa <_strtod_l+0x54a>
 800f810:	f018 030f 	ands.w	r3, r8, #15
 800f814:	d00a      	beq.n	800f82c <_strtod_l+0x47c>
 800f816:	494f      	ldr	r1, [pc, #316]	; (800f954 <_strtod_l+0x5a4>)
 800f818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f81c:	4652      	mov	r2, sl
 800f81e:	465b      	mov	r3, fp
 800f820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f824:	f7f0 ff00 	bl	8000628 <__aeabi_dmul>
 800f828:	4682      	mov	sl, r0
 800f82a:	468b      	mov	fp, r1
 800f82c:	f038 080f 	bics.w	r8, r8, #15
 800f830:	d04f      	beq.n	800f8d2 <_strtod_l+0x522>
 800f832:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f836:	dd22      	ble.n	800f87e <_strtod_l+0x4ce>
 800f838:	2500      	movs	r5, #0
 800f83a:	462e      	mov	r6, r5
 800f83c:	9507      	str	r5, [sp, #28]
 800f83e:	9505      	str	r5, [sp, #20]
 800f840:	2322      	movs	r3, #34	; 0x22
 800f842:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f95c <_strtod_l+0x5ac>
 800f846:	6023      	str	r3, [r4, #0]
 800f848:	f04f 0a00 	mov.w	sl, #0
 800f84c:	9b07      	ldr	r3, [sp, #28]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f43f adf2 	beq.w	800f438 <_strtod_l+0x88>
 800f854:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f856:	4620      	mov	r0, r4
 800f858:	f002 f820 	bl	801189c <_Bfree>
 800f85c:	9905      	ldr	r1, [sp, #20]
 800f85e:	4620      	mov	r0, r4
 800f860:	f002 f81c 	bl	801189c <_Bfree>
 800f864:	4631      	mov	r1, r6
 800f866:	4620      	mov	r0, r4
 800f868:	f002 f818 	bl	801189c <_Bfree>
 800f86c:	9907      	ldr	r1, [sp, #28]
 800f86e:	4620      	mov	r0, r4
 800f870:	f002 f814 	bl	801189c <_Bfree>
 800f874:	4629      	mov	r1, r5
 800f876:	4620      	mov	r0, r4
 800f878:	f002 f810 	bl	801189c <_Bfree>
 800f87c:	e5dc      	b.n	800f438 <_strtod_l+0x88>
 800f87e:	4b36      	ldr	r3, [pc, #216]	; (800f958 <_strtod_l+0x5a8>)
 800f880:	9304      	str	r3, [sp, #16]
 800f882:	2300      	movs	r3, #0
 800f884:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f888:	4650      	mov	r0, sl
 800f88a:	4659      	mov	r1, fp
 800f88c:	4699      	mov	r9, r3
 800f88e:	f1b8 0f01 	cmp.w	r8, #1
 800f892:	dc21      	bgt.n	800f8d8 <_strtod_l+0x528>
 800f894:	b10b      	cbz	r3, 800f89a <_strtod_l+0x4ea>
 800f896:	4682      	mov	sl, r0
 800f898:	468b      	mov	fp, r1
 800f89a:	4b2f      	ldr	r3, [pc, #188]	; (800f958 <_strtod_l+0x5a8>)
 800f89c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f8a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f8a4:	4652      	mov	r2, sl
 800f8a6:	465b      	mov	r3, fp
 800f8a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f8ac:	f7f0 febc 	bl	8000628 <__aeabi_dmul>
 800f8b0:	4b2a      	ldr	r3, [pc, #168]	; (800f95c <_strtod_l+0x5ac>)
 800f8b2:	460a      	mov	r2, r1
 800f8b4:	400b      	ands	r3, r1
 800f8b6:	492a      	ldr	r1, [pc, #168]	; (800f960 <_strtod_l+0x5b0>)
 800f8b8:	428b      	cmp	r3, r1
 800f8ba:	4682      	mov	sl, r0
 800f8bc:	d8bc      	bhi.n	800f838 <_strtod_l+0x488>
 800f8be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f8c2:	428b      	cmp	r3, r1
 800f8c4:	bf86      	itte	hi
 800f8c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f964 <_strtod_l+0x5b4>
 800f8ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800f8ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	9304      	str	r3, [sp, #16]
 800f8d6:	e084      	b.n	800f9e2 <_strtod_l+0x632>
 800f8d8:	f018 0f01 	tst.w	r8, #1
 800f8dc:	d005      	beq.n	800f8ea <_strtod_l+0x53a>
 800f8de:	9b04      	ldr	r3, [sp, #16]
 800f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e4:	f7f0 fea0 	bl	8000628 <__aeabi_dmul>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	9a04      	ldr	r2, [sp, #16]
 800f8ec:	3208      	adds	r2, #8
 800f8ee:	f109 0901 	add.w	r9, r9, #1
 800f8f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f8f6:	9204      	str	r2, [sp, #16]
 800f8f8:	e7c9      	b.n	800f88e <_strtod_l+0x4de>
 800f8fa:	d0ea      	beq.n	800f8d2 <_strtod_l+0x522>
 800f8fc:	f1c8 0800 	rsb	r8, r8, #0
 800f900:	f018 020f 	ands.w	r2, r8, #15
 800f904:	d00a      	beq.n	800f91c <_strtod_l+0x56c>
 800f906:	4b13      	ldr	r3, [pc, #76]	; (800f954 <_strtod_l+0x5a4>)
 800f908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f90c:	4650      	mov	r0, sl
 800f90e:	4659      	mov	r1, fp
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	f7f0 ffb2 	bl	800087c <__aeabi_ddiv>
 800f918:	4682      	mov	sl, r0
 800f91a:	468b      	mov	fp, r1
 800f91c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f920:	d0d7      	beq.n	800f8d2 <_strtod_l+0x522>
 800f922:	f1b8 0f1f 	cmp.w	r8, #31
 800f926:	dd1f      	ble.n	800f968 <_strtod_l+0x5b8>
 800f928:	2500      	movs	r5, #0
 800f92a:	462e      	mov	r6, r5
 800f92c:	9507      	str	r5, [sp, #28]
 800f92e:	9505      	str	r5, [sp, #20]
 800f930:	2322      	movs	r3, #34	; 0x22
 800f932:	f04f 0a00 	mov.w	sl, #0
 800f936:	f04f 0b00 	mov.w	fp, #0
 800f93a:	6023      	str	r3, [r4, #0]
 800f93c:	e786      	b.n	800f84c <_strtod_l+0x49c>
 800f93e:	bf00      	nop
 800f940:	080136e1 	.word	0x080136e1
 800f944:	0801371c 	.word	0x0801371c
 800f948:	080136d9 	.word	0x080136d9
 800f94c:	0801390c 	.word	0x0801390c
 800f950:	08013807 	.word	0x08013807
 800f954:	08013a80 	.word	0x08013a80
 800f958:	08013a58 	.word	0x08013a58
 800f95c:	7ff00000 	.word	0x7ff00000
 800f960:	7ca00000 	.word	0x7ca00000
 800f964:	7fefffff 	.word	0x7fefffff
 800f968:	f018 0310 	ands.w	r3, r8, #16
 800f96c:	bf18      	it	ne
 800f96e:	236a      	movne	r3, #106	; 0x6a
 800f970:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800fd20 <_strtod_l+0x970>
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	4650      	mov	r0, sl
 800f978:	4659      	mov	r1, fp
 800f97a:	2300      	movs	r3, #0
 800f97c:	f018 0f01 	tst.w	r8, #1
 800f980:	d004      	beq.n	800f98c <_strtod_l+0x5dc>
 800f982:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f986:	f7f0 fe4f 	bl	8000628 <__aeabi_dmul>
 800f98a:	2301      	movs	r3, #1
 800f98c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f990:	f109 0908 	add.w	r9, r9, #8
 800f994:	d1f2      	bne.n	800f97c <_strtod_l+0x5cc>
 800f996:	b10b      	cbz	r3, 800f99c <_strtod_l+0x5ec>
 800f998:	4682      	mov	sl, r0
 800f99a:	468b      	mov	fp, r1
 800f99c:	9b04      	ldr	r3, [sp, #16]
 800f99e:	b1c3      	cbz	r3, 800f9d2 <_strtod_l+0x622>
 800f9a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f9a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	4659      	mov	r1, fp
 800f9ac:	dd11      	ble.n	800f9d2 <_strtod_l+0x622>
 800f9ae:	2b1f      	cmp	r3, #31
 800f9b0:	f340 8124 	ble.w	800fbfc <_strtod_l+0x84c>
 800f9b4:	2b34      	cmp	r3, #52	; 0x34
 800f9b6:	bfde      	ittt	le
 800f9b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f9bc:	f04f 33ff 	movle.w	r3, #4294967295
 800f9c0:	fa03 f202 	lslle.w	r2, r3, r2
 800f9c4:	f04f 0a00 	mov.w	sl, #0
 800f9c8:	bfcc      	ite	gt
 800f9ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f9ce:	ea02 0b01 	andle.w	fp, r2, r1
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	4650      	mov	r0, sl
 800f9d8:	4659      	mov	r1, fp
 800f9da:	f7f1 f88d 	bl	8000af8 <__aeabi_dcmpeq>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d1a2      	bne.n	800f928 <_strtod_l+0x578>
 800f9e2:	9b07      	ldr	r3, [sp, #28]
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	9908      	ldr	r1, [sp, #32]
 800f9e8:	462b      	mov	r3, r5
 800f9ea:	463a      	mov	r2, r7
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f001 ffbd 	bl	801196c <__s2b>
 800f9f2:	9007      	str	r0, [sp, #28]
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	f43f af1f 	beq.w	800f838 <_strtod_l+0x488>
 800f9fa:	9b05      	ldr	r3, [sp, #20]
 800f9fc:	1b9e      	subs	r6, r3, r6
 800f9fe:	9b06      	ldr	r3, [sp, #24]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	bfb4      	ite	lt
 800fa04:	4633      	movlt	r3, r6
 800fa06:	2300      	movge	r3, #0
 800fa08:	930c      	str	r3, [sp, #48]	; 0x30
 800fa0a:	9b06      	ldr	r3, [sp, #24]
 800fa0c:	2500      	movs	r5, #0
 800fa0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fa12:	9312      	str	r3, [sp, #72]	; 0x48
 800fa14:	462e      	mov	r6, r5
 800fa16:	9b07      	ldr	r3, [sp, #28]
 800fa18:	4620      	mov	r0, r4
 800fa1a:	6859      	ldr	r1, [r3, #4]
 800fa1c:	f001 fefe 	bl	801181c <_Balloc>
 800fa20:	9005      	str	r0, [sp, #20]
 800fa22:	2800      	cmp	r0, #0
 800fa24:	f43f af0c 	beq.w	800f840 <_strtod_l+0x490>
 800fa28:	9b07      	ldr	r3, [sp, #28]
 800fa2a:	691a      	ldr	r2, [r3, #16]
 800fa2c:	3202      	adds	r2, #2
 800fa2e:	f103 010c 	add.w	r1, r3, #12
 800fa32:	0092      	lsls	r2, r2, #2
 800fa34:	300c      	adds	r0, #12
 800fa36:	f7fe feac 	bl	800e792 <memcpy>
 800fa3a:	ec4b ab10 	vmov	d0, sl, fp
 800fa3e:	aa1a      	add	r2, sp, #104	; 0x68
 800fa40:	a919      	add	r1, sp, #100	; 0x64
 800fa42:	4620      	mov	r0, r4
 800fa44:	f002 fad8 	bl	8011ff8 <__d2b>
 800fa48:	ec4b ab18 	vmov	d8, sl, fp
 800fa4c:	9018      	str	r0, [sp, #96]	; 0x60
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	f43f aef6 	beq.w	800f840 <_strtod_l+0x490>
 800fa54:	2101      	movs	r1, #1
 800fa56:	4620      	mov	r0, r4
 800fa58:	f002 f822 	bl	8011aa0 <__i2b>
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f43f aeee 	beq.w	800f840 <_strtod_l+0x490>
 800fa64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa66:	9904      	ldr	r1, [sp, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bfab      	itete	ge
 800fa6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fa6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fa70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fa72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fa76:	bfac      	ite	ge
 800fa78:	eb03 0902 	addge.w	r9, r3, r2
 800fa7c:	1ad7      	sublt	r7, r2, r3
 800fa7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fa80:	eba3 0801 	sub.w	r8, r3, r1
 800fa84:	4490      	add	r8, r2
 800fa86:	4ba1      	ldr	r3, [pc, #644]	; (800fd0c <_strtod_l+0x95c>)
 800fa88:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa8c:	4598      	cmp	r8, r3
 800fa8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fa92:	f280 80c7 	bge.w	800fc24 <_strtod_l+0x874>
 800fa96:	eba3 0308 	sub.w	r3, r3, r8
 800fa9a:	2b1f      	cmp	r3, #31
 800fa9c:	eba2 0203 	sub.w	r2, r2, r3
 800faa0:	f04f 0101 	mov.w	r1, #1
 800faa4:	f300 80b1 	bgt.w	800fc0a <_strtod_l+0x85a>
 800faa8:	fa01 f303 	lsl.w	r3, r1, r3
 800faac:	930d      	str	r3, [sp, #52]	; 0x34
 800faae:	2300      	movs	r3, #0
 800fab0:	9308      	str	r3, [sp, #32]
 800fab2:	eb09 0802 	add.w	r8, r9, r2
 800fab6:	9b04      	ldr	r3, [sp, #16]
 800fab8:	45c1      	cmp	r9, r8
 800faba:	4417      	add	r7, r2
 800fabc:	441f      	add	r7, r3
 800fabe:	464b      	mov	r3, r9
 800fac0:	bfa8      	it	ge
 800fac2:	4643      	movge	r3, r8
 800fac4:	42bb      	cmp	r3, r7
 800fac6:	bfa8      	it	ge
 800fac8:	463b      	movge	r3, r7
 800faca:	2b00      	cmp	r3, #0
 800facc:	bfc2      	ittt	gt
 800face:	eba8 0803 	subgt.w	r8, r8, r3
 800fad2:	1aff      	subgt	r7, r7, r3
 800fad4:	eba9 0903 	subgt.w	r9, r9, r3
 800fad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fada:	2b00      	cmp	r3, #0
 800fadc:	dd17      	ble.n	800fb0e <_strtod_l+0x75e>
 800fade:	4631      	mov	r1, r6
 800fae0:	461a      	mov	r2, r3
 800fae2:	4620      	mov	r0, r4
 800fae4:	f002 f89c 	bl	8011c20 <__pow5mult>
 800fae8:	4606      	mov	r6, r0
 800faea:	2800      	cmp	r0, #0
 800faec:	f43f aea8 	beq.w	800f840 <_strtod_l+0x490>
 800faf0:	4601      	mov	r1, r0
 800faf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800faf4:	4620      	mov	r0, r4
 800faf6:	f001 ffe9 	bl	8011acc <__multiply>
 800fafa:	900b      	str	r0, [sp, #44]	; 0x2c
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f43f ae9f 	beq.w	800f840 <_strtod_l+0x490>
 800fb02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb04:	4620      	mov	r0, r4
 800fb06:	f001 fec9 	bl	801189c <_Bfree>
 800fb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb0c:	9318      	str	r3, [sp, #96]	; 0x60
 800fb0e:	f1b8 0f00 	cmp.w	r8, #0
 800fb12:	f300 808c 	bgt.w	800fc2e <_strtod_l+0x87e>
 800fb16:	9b06      	ldr	r3, [sp, #24]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	dd08      	ble.n	800fb2e <_strtod_l+0x77e>
 800fb1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb1e:	9905      	ldr	r1, [sp, #20]
 800fb20:	4620      	mov	r0, r4
 800fb22:	f002 f87d 	bl	8011c20 <__pow5mult>
 800fb26:	9005      	str	r0, [sp, #20]
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	f43f ae89 	beq.w	800f840 <_strtod_l+0x490>
 800fb2e:	2f00      	cmp	r7, #0
 800fb30:	dd08      	ble.n	800fb44 <_strtod_l+0x794>
 800fb32:	9905      	ldr	r1, [sp, #20]
 800fb34:	463a      	mov	r2, r7
 800fb36:	4620      	mov	r0, r4
 800fb38:	f002 f8cc 	bl	8011cd4 <__lshift>
 800fb3c:	9005      	str	r0, [sp, #20]
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	f43f ae7e 	beq.w	800f840 <_strtod_l+0x490>
 800fb44:	f1b9 0f00 	cmp.w	r9, #0
 800fb48:	dd08      	ble.n	800fb5c <_strtod_l+0x7ac>
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	464a      	mov	r2, r9
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f002 f8c0 	bl	8011cd4 <__lshift>
 800fb54:	4606      	mov	r6, r0
 800fb56:	2800      	cmp	r0, #0
 800fb58:	f43f ae72 	beq.w	800f840 <_strtod_l+0x490>
 800fb5c:	9a05      	ldr	r2, [sp, #20]
 800fb5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb60:	4620      	mov	r0, r4
 800fb62:	f002 f943 	bl	8011dec <__mdiff>
 800fb66:	4605      	mov	r5, r0
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	f43f ae69 	beq.w	800f840 <_strtod_l+0x490>
 800fb6e:	68c3      	ldr	r3, [r0, #12]
 800fb70:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb72:	2300      	movs	r3, #0
 800fb74:	60c3      	str	r3, [r0, #12]
 800fb76:	4631      	mov	r1, r6
 800fb78:	f002 f91c 	bl	8011db4 <__mcmp>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	da60      	bge.n	800fc42 <_strtod_l+0x892>
 800fb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb82:	ea53 030a 	orrs.w	r3, r3, sl
 800fb86:	f040 8082 	bne.w	800fc8e <_strtod_l+0x8de>
 800fb8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d17d      	bne.n	800fc8e <_strtod_l+0x8de>
 800fb92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb96:	0d1b      	lsrs	r3, r3, #20
 800fb98:	051b      	lsls	r3, r3, #20
 800fb9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fb9e:	d976      	bls.n	800fc8e <_strtod_l+0x8de>
 800fba0:	696b      	ldr	r3, [r5, #20]
 800fba2:	b913      	cbnz	r3, 800fbaa <_strtod_l+0x7fa>
 800fba4:	692b      	ldr	r3, [r5, #16]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	dd71      	ble.n	800fc8e <_strtod_l+0x8de>
 800fbaa:	4629      	mov	r1, r5
 800fbac:	2201      	movs	r2, #1
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f002 f890 	bl	8011cd4 <__lshift>
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	f002 f8fc 	bl	8011db4 <__mcmp>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	dd66      	ble.n	800fc8e <_strtod_l+0x8de>
 800fbc0:	9904      	ldr	r1, [sp, #16]
 800fbc2:	4a53      	ldr	r2, [pc, #332]	; (800fd10 <_strtod_l+0x960>)
 800fbc4:	465b      	mov	r3, fp
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	f000 8081 	beq.w	800fcce <_strtod_l+0x91e>
 800fbcc:	ea02 010b 	and.w	r1, r2, fp
 800fbd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fbd4:	dc7b      	bgt.n	800fcce <_strtod_l+0x91e>
 800fbd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fbda:	f77f aea9 	ble.w	800f930 <_strtod_l+0x580>
 800fbde:	4b4d      	ldr	r3, [pc, #308]	; (800fd14 <_strtod_l+0x964>)
 800fbe0:	4650      	mov	r0, sl
 800fbe2:	4659      	mov	r1, fp
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f7f0 fd1f 	bl	8000628 <__aeabi_dmul>
 800fbea:	460b      	mov	r3, r1
 800fbec:	4303      	orrs	r3, r0
 800fbee:	bf08      	it	eq
 800fbf0:	2322      	moveq	r3, #34	; 0x22
 800fbf2:	4682      	mov	sl, r0
 800fbf4:	468b      	mov	fp, r1
 800fbf6:	bf08      	it	eq
 800fbf8:	6023      	streq	r3, [r4, #0]
 800fbfa:	e62b      	b.n	800f854 <_strtod_l+0x4a4>
 800fbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fc00:	fa02 f303 	lsl.w	r3, r2, r3
 800fc04:	ea03 0a0a 	and.w	sl, r3, sl
 800fc08:	e6e3      	b.n	800f9d2 <_strtod_l+0x622>
 800fc0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fc0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fc12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fc16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fc1a:	fa01 f308 	lsl.w	r3, r1, r8
 800fc1e:	9308      	str	r3, [sp, #32]
 800fc20:	910d      	str	r1, [sp, #52]	; 0x34
 800fc22:	e746      	b.n	800fab2 <_strtod_l+0x702>
 800fc24:	2300      	movs	r3, #0
 800fc26:	9308      	str	r3, [sp, #32]
 800fc28:	2301      	movs	r3, #1
 800fc2a:	930d      	str	r3, [sp, #52]	; 0x34
 800fc2c:	e741      	b.n	800fab2 <_strtod_l+0x702>
 800fc2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc30:	4642      	mov	r2, r8
 800fc32:	4620      	mov	r0, r4
 800fc34:	f002 f84e 	bl	8011cd4 <__lshift>
 800fc38:	9018      	str	r0, [sp, #96]	; 0x60
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	f47f af6b 	bne.w	800fb16 <_strtod_l+0x766>
 800fc40:	e5fe      	b.n	800f840 <_strtod_l+0x490>
 800fc42:	465f      	mov	r7, fp
 800fc44:	d16e      	bne.n	800fd24 <_strtod_l+0x974>
 800fc46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc4c:	b342      	cbz	r2, 800fca0 <_strtod_l+0x8f0>
 800fc4e:	4a32      	ldr	r2, [pc, #200]	; (800fd18 <_strtod_l+0x968>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d128      	bne.n	800fca6 <_strtod_l+0x8f6>
 800fc54:	9b04      	ldr	r3, [sp, #16]
 800fc56:	4651      	mov	r1, sl
 800fc58:	b1eb      	cbz	r3, 800fc96 <_strtod_l+0x8e6>
 800fc5a:	4b2d      	ldr	r3, [pc, #180]	; (800fd10 <_strtod_l+0x960>)
 800fc5c:	403b      	ands	r3, r7
 800fc5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fc62:	f04f 32ff 	mov.w	r2, #4294967295
 800fc66:	d819      	bhi.n	800fc9c <_strtod_l+0x8ec>
 800fc68:	0d1b      	lsrs	r3, r3, #20
 800fc6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc72:	4299      	cmp	r1, r3
 800fc74:	d117      	bne.n	800fca6 <_strtod_l+0x8f6>
 800fc76:	4b29      	ldr	r3, [pc, #164]	; (800fd1c <_strtod_l+0x96c>)
 800fc78:	429f      	cmp	r7, r3
 800fc7a:	d102      	bne.n	800fc82 <_strtod_l+0x8d2>
 800fc7c:	3101      	adds	r1, #1
 800fc7e:	f43f addf 	beq.w	800f840 <_strtod_l+0x490>
 800fc82:	4b23      	ldr	r3, [pc, #140]	; (800fd10 <_strtod_l+0x960>)
 800fc84:	403b      	ands	r3, r7
 800fc86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fc8a:	f04f 0a00 	mov.w	sl, #0
 800fc8e:	9b04      	ldr	r3, [sp, #16]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d1a4      	bne.n	800fbde <_strtod_l+0x82e>
 800fc94:	e5de      	b.n	800f854 <_strtod_l+0x4a4>
 800fc96:	f04f 33ff 	mov.w	r3, #4294967295
 800fc9a:	e7ea      	b.n	800fc72 <_strtod_l+0x8c2>
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	e7e8      	b.n	800fc72 <_strtod_l+0x8c2>
 800fca0:	ea53 030a 	orrs.w	r3, r3, sl
 800fca4:	d08c      	beq.n	800fbc0 <_strtod_l+0x810>
 800fca6:	9b08      	ldr	r3, [sp, #32]
 800fca8:	b1db      	cbz	r3, 800fce2 <_strtod_l+0x932>
 800fcaa:	423b      	tst	r3, r7
 800fcac:	d0ef      	beq.n	800fc8e <_strtod_l+0x8de>
 800fcae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcb0:	9a04      	ldr	r2, [sp, #16]
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	4659      	mov	r1, fp
 800fcb6:	b1c3      	cbz	r3, 800fcea <_strtod_l+0x93a>
 800fcb8:	f7ff fb5d 	bl	800f376 <sulp>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	ec51 0b18 	vmov	r0, r1, d8
 800fcc4:	f7f0 fafa 	bl	80002bc <__adddf3>
 800fcc8:	4682      	mov	sl, r0
 800fcca:	468b      	mov	fp, r1
 800fccc:	e7df      	b.n	800fc8e <_strtod_l+0x8de>
 800fcce:	4013      	ands	r3, r2
 800fcd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fcd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fcd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fcdc:	f04f 3aff 	mov.w	sl, #4294967295
 800fce0:	e7d5      	b.n	800fc8e <_strtod_l+0x8de>
 800fce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fce4:	ea13 0f0a 	tst.w	r3, sl
 800fce8:	e7e0      	b.n	800fcac <_strtod_l+0x8fc>
 800fcea:	f7ff fb44 	bl	800f376 <sulp>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	ec51 0b18 	vmov	r0, r1, d8
 800fcf6:	f7f0 fadf 	bl	80002b8 <__aeabi_dsub>
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4682      	mov	sl, r0
 800fd00:	468b      	mov	fp, r1
 800fd02:	f7f0 fef9 	bl	8000af8 <__aeabi_dcmpeq>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d0c1      	beq.n	800fc8e <_strtod_l+0x8de>
 800fd0a:	e611      	b.n	800f930 <_strtod_l+0x580>
 800fd0c:	fffffc02 	.word	0xfffffc02
 800fd10:	7ff00000 	.word	0x7ff00000
 800fd14:	39500000 	.word	0x39500000
 800fd18:	000fffff 	.word	0x000fffff
 800fd1c:	7fefffff 	.word	0x7fefffff
 800fd20:	08013730 	.word	0x08013730
 800fd24:	4631      	mov	r1, r6
 800fd26:	4628      	mov	r0, r5
 800fd28:	f002 f9c2 	bl	80120b0 <__ratio>
 800fd2c:	ec59 8b10 	vmov	r8, r9, d0
 800fd30:	ee10 0a10 	vmov	r0, s0
 800fd34:	2200      	movs	r2, #0
 800fd36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd3a:	4649      	mov	r1, r9
 800fd3c:	f7f0 fef0 	bl	8000b20 <__aeabi_dcmple>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d07a      	beq.n	800fe3a <_strtod_l+0xa8a>
 800fd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d04a      	beq.n	800fde0 <_strtod_l+0xa30>
 800fd4a:	4b95      	ldr	r3, [pc, #596]	; (800ffa0 <_strtod_l+0xbf0>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fd52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ffa0 <_strtod_l+0xbf0>
 800fd56:	f04f 0800 	mov.w	r8, #0
 800fd5a:	4b92      	ldr	r3, [pc, #584]	; (800ffa4 <_strtod_l+0xbf4>)
 800fd5c:	403b      	ands	r3, r7
 800fd5e:	930d      	str	r3, [sp, #52]	; 0x34
 800fd60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd62:	4b91      	ldr	r3, [pc, #580]	; (800ffa8 <_strtod_l+0xbf8>)
 800fd64:	429a      	cmp	r2, r3
 800fd66:	f040 80b0 	bne.w	800feca <_strtod_l+0xb1a>
 800fd6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fd72:	ec4b ab10 	vmov	d0, sl, fp
 800fd76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd7a:	f002 f8c1 	bl	8011f00 <__ulp>
 800fd7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd82:	ec53 2b10 	vmov	r2, r3, d0
 800fd86:	f7f0 fc4f 	bl	8000628 <__aeabi_dmul>
 800fd8a:	4652      	mov	r2, sl
 800fd8c:	465b      	mov	r3, fp
 800fd8e:	f7f0 fa95 	bl	80002bc <__adddf3>
 800fd92:	460b      	mov	r3, r1
 800fd94:	4983      	ldr	r1, [pc, #524]	; (800ffa4 <_strtod_l+0xbf4>)
 800fd96:	4a85      	ldr	r2, [pc, #532]	; (800ffac <_strtod_l+0xbfc>)
 800fd98:	4019      	ands	r1, r3
 800fd9a:	4291      	cmp	r1, r2
 800fd9c:	4682      	mov	sl, r0
 800fd9e:	d960      	bls.n	800fe62 <_strtod_l+0xab2>
 800fda0:	ee18 3a90 	vmov	r3, s17
 800fda4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d104      	bne.n	800fdb6 <_strtod_l+0xa06>
 800fdac:	ee18 3a10 	vmov	r3, s16
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	f43f ad45 	beq.w	800f840 <_strtod_l+0x490>
 800fdb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ffb8 <_strtod_l+0xc08>
 800fdba:	f04f 3aff 	mov.w	sl, #4294967295
 800fdbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f001 fd6b 	bl	801189c <_Bfree>
 800fdc6:	9905      	ldr	r1, [sp, #20]
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f001 fd67 	bl	801189c <_Bfree>
 800fdce:	4631      	mov	r1, r6
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f001 fd63 	bl	801189c <_Bfree>
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f001 fd5f 	bl	801189c <_Bfree>
 800fdde:	e61a      	b.n	800fa16 <_strtod_l+0x666>
 800fde0:	f1ba 0f00 	cmp.w	sl, #0
 800fde4:	d11b      	bne.n	800fe1e <_strtod_l+0xa6e>
 800fde6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdea:	b9f3      	cbnz	r3, 800fe2a <_strtod_l+0xa7a>
 800fdec:	4b6c      	ldr	r3, [pc, #432]	; (800ffa0 <_strtod_l+0xbf0>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	4640      	mov	r0, r8
 800fdf2:	4649      	mov	r1, r9
 800fdf4:	f7f0 fe8a 	bl	8000b0c <__aeabi_dcmplt>
 800fdf8:	b9d0      	cbnz	r0, 800fe30 <_strtod_l+0xa80>
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	4649      	mov	r1, r9
 800fdfe:	4b6c      	ldr	r3, [pc, #432]	; (800ffb0 <_strtod_l+0xc00>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f7f0 fc11 	bl	8000628 <__aeabi_dmul>
 800fe06:	4680      	mov	r8, r0
 800fe08:	4689      	mov	r9, r1
 800fe0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fe0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fe12:	9315      	str	r3, [sp, #84]	; 0x54
 800fe14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fe18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fe1c:	e79d      	b.n	800fd5a <_strtod_l+0x9aa>
 800fe1e:	f1ba 0f01 	cmp.w	sl, #1
 800fe22:	d102      	bne.n	800fe2a <_strtod_l+0xa7a>
 800fe24:	2f00      	cmp	r7, #0
 800fe26:	f43f ad83 	beq.w	800f930 <_strtod_l+0x580>
 800fe2a:	4b62      	ldr	r3, [pc, #392]	; (800ffb4 <_strtod_l+0xc04>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	e78e      	b.n	800fd4e <_strtod_l+0x99e>
 800fe30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ffb0 <_strtod_l+0xc00>
 800fe34:	f04f 0800 	mov.w	r8, #0
 800fe38:	e7e7      	b.n	800fe0a <_strtod_l+0xa5a>
 800fe3a:	4b5d      	ldr	r3, [pc, #372]	; (800ffb0 <_strtod_l+0xc00>)
 800fe3c:	4640      	mov	r0, r8
 800fe3e:	4649      	mov	r1, r9
 800fe40:	2200      	movs	r2, #0
 800fe42:	f7f0 fbf1 	bl	8000628 <__aeabi_dmul>
 800fe46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe48:	4680      	mov	r8, r0
 800fe4a:	4689      	mov	r9, r1
 800fe4c:	b933      	cbnz	r3, 800fe5c <_strtod_l+0xaac>
 800fe4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe52:	900e      	str	r0, [sp, #56]	; 0x38
 800fe54:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fe5a:	e7dd      	b.n	800fe18 <_strtod_l+0xa68>
 800fe5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fe60:	e7f9      	b.n	800fe56 <_strtod_l+0xaa6>
 800fe62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fe66:	9b04      	ldr	r3, [sp, #16]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1a8      	bne.n	800fdbe <_strtod_l+0xa0e>
 800fe6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe72:	0d1b      	lsrs	r3, r3, #20
 800fe74:	051b      	lsls	r3, r3, #20
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d1a1      	bne.n	800fdbe <_strtod_l+0xa0e>
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	f7f0 ff33 	bl	8000ce8 <__aeabi_d2lz>
 800fe82:	f7f0 fba3 	bl	80005cc <__aeabi_l2d>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	4649      	mov	r1, r9
 800fe8e:	f7f0 fa13 	bl	80002b8 <__aeabi_dsub>
 800fe92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe98:	ea43 030a 	orr.w	r3, r3, sl
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	4680      	mov	r8, r0
 800fea0:	4689      	mov	r9, r1
 800fea2:	d055      	beq.n	800ff50 <_strtod_l+0xba0>
 800fea4:	a336      	add	r3, pc, #216	; (adr r3, 800ff80 <_strtod_l+0xbd0>)
 800fea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feaa:	f7f0 fe2f 	bl	8000b0c <__aeabi_dcmplt>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f47f acd0 	bne.w	800f854 <_strtod_l+0x4a4>
 800feb4:	a334      	add	r3, pc, #208	; (adr r3, 800ff88 <_strtod_l+0xbd8>)
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	4640      	mov	r0, r8
 800febc:	4649      	mov	r1, r9
 800febe:	f7f0 fe43 	bl	8000b48 <__aeabi_dcmpgt>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	f43f af7b 	beq.w	800fdbe <_strtod_l+0xa0e>
 800fec8:	e4c4      	b.n	800f854 <_strtod_l+0x4a4>
 800feca:	9b04      	ldr	r3, [sp, #16]
 800fecc:	b333      	cbz	r3, 800ff1c <_strtod_l+0xb6c>
 800fece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fed0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fed4:	d822      	bhi.n	800ff1c <_strtod_l+0xb6c>
 800fed6:	a32e      	add	r3, pc, #184	; (adr r3, 800ff90 <_strtod_l+0xbe0>)
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	4640      	mov	r0, r8
 800fede:	4649      	mov	r1, r9
 800fee0:	f7f0 fe1e 	bl	8000b20 <__aeabi_dcmple>
 800fee4:	b1a0      	cbz	r0, 800ff10 <_strtod_l+0xb60>
 800fee6:	4649      	mov	r1, r9
 800fee8:	4640      	mov	r0, r8
 800feea:	f7f0 fe75 	bl	8000bd8 <__aeabi_d2uiz>
 800feee:	2801      	cmp	r0, #1
 800fef0:	bf38      	it	cc
 800fef2:	2001      	movcc	r0, #1
 800fef4:	f7f0 fb1e 	bl	8000534 <__aeabi_ui2d>
 800fef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fefa:	4680      	mov	r8, r0
 800fefc:	4689      	mov	r9, r1
 800fefe:	bb23      	cbnz	r3, 800ff4a <_strtod_l+0xb9a>
 800ff00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff04:	9010      	str	r0, [sp, #64]	; 0x40
 800ff06:	9311      	str	r3, [sp, #68]	; 0x44
 800ff08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ff0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ff18:	1a9b      	subs	r3, r3, r2
 800ff1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff20:	eeb0 0a48 	vmov.f32	s0, s16
 800ff24:	eef0 0a68 	vmov.f32	s1, s17
 800ff28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff2c:	f001 ffe8 	bl	8011f00 <__ulp>
 800ff30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff34:	ec53 2b10 	vmov	r2, r3, d0
 800ff38:	f7f0 fb76 	bl	8000628 <__aeabi_dmul>
 800ff3c:	ec53 2b18 	vmov	r2, r3, d8
 800ff40:	f7f0 f9bc 	bl	80002bc <__adddf3>
 800ff44:	4682      	mov	sl, r0
 800ff46:	468b      	mov	fp, r1
 800ff48:	e78d      	b.n	800fe66 <_strtod_l+0xab6>
 800ff4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ff4e:	e7db      	b.n	800ff08 <_strtod_l+0xb58>
 800ff50:	a311      	add	r3, pc, #68	; (adr r3, 800ff98 <_strtod_l+0xbe8>)
 800ff52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff56:	f7f0 fdd9 	bl	8000b0c <__aeabi_dcmplt>
 800ff5a:	e7b2      	b.n	800fec2 <_strtod_l+0xb12>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ff62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	f7ff ba6b 	b.w	800f440 <_strtod_l+0x90>
 800ff6a:	2a65      	cmp	r2, #101	; 0x65
 800ff6c:	f43f ab5f 	beq.w	800f62e <_strtod_l+0x27e>
 800ff70:	2a45      	cmp	r2, #69	; 0x45
 800ff72:	f43f ab5c 	beq.w	800f62e <_strtod_l+0x27e>
 800ff76:	2301      	movs	r3, #1
 800ff78:	f7ff bb94 	b.w	800f6a4 <_strtod_l+0x2f4>
 800ff7c:	f3af 8000 	nop.w
 800ff80:	94a03595 	.word	0x94a03595
 800ff84:	3fdfffff 	.word	0x3fdfffff
 800ff88:	35afe535 	.word	0x35afe535
 800ff8c:	3fe00000 	.word	0x3fe00000
 800ff90:	ffc00000 	.word	0xffc00000
 800ff94:	41dfffff 	.word	0x41dfffff
 800ff98:	94a03595 	.word	0x94a03595
 800ff9c:	3fcfffff 	.word	0x3fcfffff
 800ffa0:	3ff00000 	.word	0x3ff00000
 800ffa4:	7ff00000 	.word	0x7ff00000
 800ffa8:	7fe00000 	.word	0x7fe00000
 800ffac:	7c9fffff 	.word	0x7c9fffff
 800ffb0:	3fe00000 	.word	0x3fe00000
 800ffb4:	bff00000 	.word	0xbff00000
 800ffb8:	7fefffff 	.word	0x7fefffff

0800ffbc <strtod>:
 800ffbc:	460a      	mov	r2, r1
 800ffbe:	4601      	mov	r1, r0
 800ffc0:	4802      	ldr	r0, [pc, #8]	; (800ffcc <strtod+0x10>)
 800ffc2:	4b03      	ldr	r3, [pc, #12]	; (800ffd0 <strtod+0x14>)
 800ffc4:	6800      	ldr	r0, [r0, #0]
 800ffc6:	f7ff b9f3 	b.w	800f3b0 <_strtod_l>
 800ffca:	bf00      	nop
 800ffcc:	20000014 	.word	0x20000014
 800ffd0:	2000007c 	.word	0x2000007c

0800ffd4 <strtok>:
 800ffd4:	4b16      	ldr	r3, [pc, #88]	; (8010030 <strtok+0x5c>)
 800ffd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffd8:	681e      	ldr	r6, [r3, #0]
 800ffda:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ffdc:	4605      	mov	r5, r0
 800ffde:	b9fc      	cbnz	r4, 8010020 <strtok+0x4c>
 800ffe0:	2050      	movs	r0, #80	; 0x50
 800ffe2:	9101      	str	r1, [sp, #4]
 800ffe4:	f001 fbf4 	bl	80117d0 <malloc>
 800ffe8:	9901      	ldr	r1, [sp, #4]
 800ffea:	65b0      	str	r0, [r6, #88]	; 0x58
 800ffec:	4602      	mov	r2, r0
 800ffee:	b920      	cbnz	r0, 800fffa <strtok+0x26>
 800fff0:	4b10      	ldr	r3, [pc, #64]	; (8010034 <strtok+0x60>)
 800fff2:	4811      	ldr	r0, [pc, #68]	; (8010038 <strtok+0x64>)
 800fff4:	2157      	movs	r1, #87	; 0x57
 800fff6:	f000 f8e7 	bl	80101c8 <__assert_func>
 800fffa:	e9c0 4400 	strd	r4, r4, [r0]
 800fffe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010002:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010006:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801000a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801000e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010012:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010016:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801001a:	6184      	str	r4, [r0, #24]
 801001c:	7704      	strb	r4, [r0, #28]
 801001e:	6244      	str	r4, [r0, #36]	; 0x24
 8010020:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8010022:	2301      	movs	r3, #1
 8010024:	4628      	mov	r0, r5
 8010026:	b002      	add	sp, #8
 8010028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801002c:	f000 b806 	b.w	801003c <__strtok_r>
 8010030:	20000014 	.word	0x20000014
 8010034:	08013758 	.word	0x08013758
 8010038:	0801376f 	.word	0x0801376f

0801003c <__strtok_r>:
 801003c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801003e:	b908      	cbnz	r0, 8010044 <__strtok_r+0x8>
 8010040:	6810      	ldr	r0, [r2, #0]
 8010042:	b188      	cbz	r0, 8010068 <__strtok_r+0x2c>
 8010044:	4604      	mov	r4, r0
 8010046:	4620      	mov	r0, r4
 8010048:	f814 5b01 	ldrb.w	r5, [r4], #1
 801004c:	460f      	mov	r7, r1
 801004e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010052:	b91e      	cbnz	r6, 801005c <__strtok_r+0x20>
 8010054:	b965      	cbnz	r5, 8010070 <__strtok_r+0x34>
 8010056:	6015      	str	r5, [r2, #0]
 8010058:	4628      	mov	r0, r5
 801005a:	e005      	b.n	8010068 <__strtok_r+0x2c>
 801005c:	42b5      	cmp	r5, r6
 801005e:	d1f6      	bne.n	801004e <__strtok_r+0x12>
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1f0      	bne.n	8010046 <__strtok_r+0xa>
 8010064:	6014      	str	r4, [r2, #0]
 8010066:	7003      	strb	r3, [r0, #0]
 8010068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801006a:	461c      	mov	r4, r3
 801006c:	e00c      	b.n	8010088 <__strtok_r+0x4c>
 801006e:	b915      	cbnz	r5, 8010076 <__strtok_r+0x3a>
 8010070:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010074:	460e      	mov	r6, r1
 8010076:	f816 5b01 	ldrb.w	r5, [r6], #1
 801007a:	42ab      	cmp	r3, r5
 801007c:	d1f7      	bne.n	801006e <__strtok_r+0x32>
 801007e:	2b00      	cmp	r3, #0
 8010080:	d0f3      	beq.n	801006a <__strtok_r+0x2e>
 8010082:	2300      	movs	r3, #0
 8010084:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010088:	6014      	str	r4, [r2, #0]
 801008a:	e7ed      	b.n	8010068 <__strtok_r+0x2c>

0801008c <_strtol_l.constprop.0>:
 801008c:	2b01      	cmp	r3, #1
 801008e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010092:	d001      	beq.n	8010098 <_strtol_l.constprop.0+0xc>
 8010094:	2b24      	cmp	r3, #36	; 0x24
 8010096:	d906      	bls.n	80100a6 <_strtol_l.constprop.0+0x1a>
 8010098:	f7fe fa58 	bl	800e54c <__errno>
 801009c:	2316      	movs	r3, #22
 801009e:	6003      	str	r3, [r0, #0]
 80100a0:	2000      	movs	r0, #0
 80100a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801018c <_strtol_l.constprop.0+0x100>
 80100aa:	460d      	mov	r5, r1
 80100ac:	462e      	mov	r6, r5
 80100ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80100b6:	f017 0708 	ands.w	r7, r7, #8
 80100ba:	d1f7      	bne.n	80100ac <_strtol_l.constprop.0+0x20>
 80100bc:	2c2d      	cmp	r4, #45	; 0x2d
 80100be:	d132      	bne.n	8010126 <_strtol_l.constprop.0+0x9a>
 80100c0:	782c      	ldrb	r4, [r5, #0]
 80100c2:	2701      	movs	r7, #1
 80100c4:	1cb5      	adds	r5, r6, #2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d05b      	beq.n	8010182 <_strtol_l.constprop.0+0xf6>
 80100ca:	2b10      	cmp	r3, #16
 80100cc:	d109      	bne.n	80100e2 <_strtol_l.constprop.0+0x56>
 80100ce:	2c30      	cmp	r4, #48	; 0x30
 80100d0:	d107      	bne.n	80100e2 <_strtol_l.constprop.0+0x56>
 80100d2:	782c      	ldrb	r4, [r5, #0]
 80100d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80100d8:	2c58      	cmp	r4, #88	; 0x58
 80100da:	d14d      	bne.n	8010178 <_strtol_l.constprop.0+0xec>
 80100dc:	786c      	ldrb	r4, [r5, #1]
 80100de:	2310      	movs	r3, #16
 80100e0:	3502      	adds	r5, #2
 80100e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80100e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80100ea:	f04f 0c00 	mov.w	ip, #0
 80100ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80100f2:	4666      	mov	r6, ip
 80100f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80100f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80100fc:	f1be 0f09 	cmp.w	lr, #9
 8010100:	d816      	bhi.n	8010130 <_strtol_l.constprop.0+0xa4>
 8010102:	4674      	mov	r4, lr
 8010104:	42a3      	cmp	r3, r4
 8010106:	dd24      	ble.n	8010152 <_strtol_l.constprop.0+0xc6>
 8010108:	f1bc 0f00 	cmp.w	ip, #0
 801010c:	db1e      	blt.n	801014c <_strtol_l.constprop.0+0xc0>
 801010e:	45b1      	cmp	r9, r6
 8010110:	d31c      	bcc.n	801014c <_strtol_l.constprop.0+0xc0>
 8010112:	d101      	bne.n	8010118 <_strtol_l.constprop.0+0x8c>
 8010114:	45a2      	cmp	sl, r4
 8010116:	db19      	blt.n	801014c <_strtol_l.constprop.0+0xc0>
 8010118:	fb06 4603 	mla	r6, r6, r3, r4
 801011c:	f04f 0c01 	mov.w	ip, #1
 8010120:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010124:	e7e8      	b.n	80100f8 <_strtol_l.constprop.0+0x6c>
 8010126:	2c2b      	cmp	r4, #43	; 0x2b
 8010128:	bf04      	itt	eq
 801012a:	782c      	ldrbeq	r4, [r5, #0]
 801012c:	1cb5      	addeq	r5, r6, #2
 801012e:	e7ca      	b.n	80100c6 <_strtol_l.constprop.0+0x3a>
 8010130:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010134:	f1be 0f19 	cmp.w	lr, #25
 8010138:	d801      	bhi.n	801013e <_strtol_l.constprop.0+0xb2>
 801013a:	3c37      	subs	r4, #55	; 0x37
 801013c:	e7e2      	b.n	8010104 <_strtol_l.constprop.0+0x78>
 801013e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010142:	f1be 0f19 	cmp.w	lr, #25
 8010146:	d804      	bhi.n	8010152 <_strtol_l.constprop.0+0xc6>
 8010148:	3c57      	subs	r4, #87	; 0x57
 801014a:	e7db      	b.n	8010104 <_strtol_l.constprop.0+0x78>
 801014c:	f04f 3cff 	mov.w	ip, #4294967295
 8010150:	e7e6      	b.n	8010120 <_strtol_l.constprop.0+0x94>
 8010152:	f1bc 0f00 	cmp.w	ip, #0
 8010156:	da05      	bge.n	8010164 <_strtol_l.constprop.0+0xd8>
 8010158:	2322      	movs	r3, #34	; 0x22
 801015a:	6003      	str	r3, [r0, #0]
 801015c:	4646      	mov	r6, r8
 801015e:	b942      	cbnz	r2, 8010172 <_strtol_l.constprop.0+0xe6>
 8010160:	4630      	mov	r0, r6
 8010162:	e79e      	b.n	80100a2 <_strtol_l.constprop.0+0x16>
 8010164:	b107      	cbz	r7, 8010168 <_strtol_l.constprop.0+0xdc>
 8010166:	4276      	negs	r6, r6
 8010168:	2a00      	cmp	r2, #0
 801016a:	d0f9      	beq.n	8010160 <_strtol_l.constprop.0+0xd4>
 801016c:	f1bc 0f00 	cmp.w	ip, #0
 8010170:	d000      	beq.n	8010174 <_strtol_l.constprop.0+0xe8>
 8010172:	1e69      	subs	r1, r5, #1
 8010174:	6011      	str	r1, [r2, #0]
 8010176:	e7f3      	b.n	8010160 <_strtol_l.constprop.0+0xd4>
 8010178:	2430      	movs	r4, #48	; 0x30
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1b1      	bne.n	80100e2 <_strtol_l.constprop.0+0x56>
 801017e:	2308      	movs	r3, #8
 8010180:	e7af      	b.n	80100e2 <_strtol_l.constprop.0+0x56>
 8010182:	2c30      	cmp	r4, #48	; 0x30
 8010184:	d0a5      	beq.n	80100d2 <_strtol_l.constprop.0+0x46>
 8010186:	230a      	movs	r3, #10
 8010188:	e7ab      	b.n	80100e2 <_strtol_l.constprop.0+0x56>
 801018a:	bf00      	nop
 801018c:	08013809 	.word	0x08013809

08010190 <strtol>:
 8010190:	4613      	mov	r3, r2
 8010192:	460a      	mov	r2, r1
 8010194:	4601      	mov	r1, r0
 8010196:	4802      	ldr	r0, [pc, #8]	; (80101a0 <strtol+0x10>)
 8010198:	6800      	ldr	r0, [r0, #0]
 801019a:	f7ff bf77 	b.w	801008c <_strtol_l.constprop.0>
 801019e:	bf00      	nop
 80101a0:	20000014 	.word	0x20000014

080101a4 <_write_r>:
 80101a4:	b538      	push	{r3, r4, r5, lr}
 80101a6:	4d07      	ldr	r5, [pc, #28]	; (80101c4 <_write_r+0x20>)
 80101a8:	4604      	mov	r4, r0
 80101aa:	4608      	mov	r0, r1
 80101ac:	4611      	mov	r1, r2
 80101ae:	2200      	movs	r2, #0
 80101b0:	602a      	str	r2, [r5, #0]
 80101b2:	461a      	mov	r2, r3
 80101b4:	f7f4 fb23 	bl	80047fe <_write>
 80101b8:	1c43      	adds	r3, r0, #1
 80101ba:	d102      	bne.n	80101c2 <_write_r+0x1e>
 80101bc:	682b      	ldr	r3, [r5, #0]
 80101be:	b103      	cbz	r3, 80101c2 <_write_r+0x1e>
 80101c0:	6023      	str	r3, [r4, #0]
 80101c2:	bd38      	pop	{r3, r4, r5, pc}
 80101c4:	20005200 	.word	0x20005200

080101c8 <__assert_func>:
 80101c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101ca:	4614      	mov	r4, r2
 80101cc:	461a      	mov	r2, r3
 80101ce:	4b09      	ldr	r3, [pc, #36]	; (80101f4 <__assert_func+0x2c>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4605      	mov	r5, r0
 80101d4:	68d8      	ldr	r0, [r3, #12]
 80101d6:	b14c      	cbz	r4, 80101ec <__assert_func+0x24>
 80101d8:	4b07      	ldr	r3, [pc, #28]	; (80101f8 <__assert_func+0x30>)
 80101da:	9100      	str	r1, [sp, #0]
 80101dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101e0:	4906      	ldr	r1, [pc, #24]	; (80101fc <__assert_func+0x34>)
 80101e2:	462b      	mov	r3, r5
 80101e4:	f000 ff5c 	bl	80110a0 <fiprintf>
 80101e8:	f002 fbf0 	bl	80129cc <abort>
 80101ec:	4b04      	ldr	r3, [pc, #16]	; (8010200 <__assert_func+0x38>)
 80101ee:	461c      	mov	r4, r3
 80101f0:	e7f3      	b.n	80101da <__assert_func+0x12>
 80101f2:	bf00      	nop
 80101f4:	20000014 	.word	0x20000014
 80101f8:	080137cc 	.word	0x080137cc
 80101fc:	080137d9 	.word	0x080137d9
 8010200:	08013807 	.word	0x08013807

08010204 <_close_r>:
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	4d06      	ldr	r5, [pc, #24]	; (8010220 <_close_r+0x1c>)
 8010208:	2300      	movs	r3, #0
 801020a:	4604      	mov	r4, r0
 801020c:	4608      	mov	r0, r1
 801020e:	602b      	str	r3, [r5, #0]
 8010210:	f7f4 fb11 	bl	8004836 <_close>
 8010214:	1c43      	adds	r3, r0, #1
 8010216:	d102      	bne.n	801021e <_close_r+0x1a>
 8010218:	682b      	ldr	r3, [r5, #0]
 801021a:	b103      	cbz	r3, 801021e <_close_r+0x1a>
 801021c:	6023      	str	r3, [r4, #0]
 801021e:	bd38      	pop	{r3, r4, r5, pc}
 8010220:	20005200 	.word	0x20005200

08010224 <quorem>:
 8010224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	6903      	ldr	r3, [r0, #16]
 801022a:	690c      	ldr	r4, [r1, #16]
 801022c:	42a3      	cmp	r3, r4
 801022e:	4607      	mov	r7, r0
 8010230:	f2c0 8081 	blt.w	8010336 <quorem+0x112>
 8010234:	3c01      	subs	r4, #1
 8010236:	f101 0814 	add.w	r8, r1, #20
 801023a:	f100 0514 	add.w	r5, r0, #20
 801023e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010242:	9301      	str	r3, [sp, #4]
 8010244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801024c:	3301      	adds	r3, #1
 801024e:	429a      	cmp	r2, r3
 8010250:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010258:	fbb2 f6f3 	udiv	r6, r2, r3
 801025c:	d331      	bcc.n	80102c2 <quorem+0x9e>
 801025e:	f04f 0e00 	mov.w	lr, #0
 8010262:	4640      	mov	r0, r8
 8010264:	46ac      	mov	ip, r5
 8010266:	46f2      	mov	sl, lr
 8010268:	f850 2b04 	ldr.w	r2, [r0], #4
 801026c:	b293      	uxth	r3, r2
 801026e:	fb06 e303 	mla	r3, r6, r3, lr
 8010272:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010276:	b29b      	uxth	r3, r3
 8010278:	ebaa 0303 	sub.w	r3, sl, r3
 801027c:	f8dc a000 	ldr.w	sl, [ip]
 8010280:	0c12      	lsrs	r2, r2, #16
 8010282:	fa13 f38a 	uxtah	r3, r3, sl
 8010286:	fb06 e202 	mla	r2, r6, r2, lr
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	9b00      	ldr	r3, [sp, #0]
 801028e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010292:	b292      	uxth	r2, r2
 8010294:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801029c:	f8bd 3000 	ldrh.w	r3, [sp]
 80102a0:	4581      	cmp	r9, r0
 80102a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102a6:	f84c 3b04 	str.w	r3, [ip], #4
 80102aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80102ae:	d2db      	bcs.n	8010268 <quorem+0x44>
 80102b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80102b4:	b92b      	cbnz	r3, 80102c2 <quorem+0x9e>
 80102b6:	9b01      	ldr	r3, [sp, #4]
 80102b8:	3b04      	subs	r3, #4
 80102ba:	429d      	cmp	r5, r3
 80102bc:	461a      	mov	r2, r3
 80102be:	d32e      	bcc.n	801031e <quorem+0xfa>
 80102c0:	613c      	str	r4, [r7, #16]
 80102c2:	4638      	mov	r0, r7
 80102c4:	f001 fd76 	bl	8011db4 <__mcmp>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	db24      	blt.n	8010316 <quorem+0xf2>
 80102cc:	3601      	adds	r6, #1
 80102ce:	4628      	mov	r0, r5
 80102d0:	f04f 0c00 	mov.w	ip, #0
 80102d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80102d8:	f8d0 e000 	ldr.w	lr, [r0]
 80102dc:	b293      	uxth	r3, r2
 80102de:	ebac 0303 	sub.w	r3, ip, r3
 80102e2:	0c12      	lsrs	r2, r2, #16
 80102e4:	fa13 f38e 	uxtah	r3, r3, lr
 80102e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80102ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102f6:	45c1      	cmp	r9, r8
 80102f8:	f840 3b04 	str.w	r3, [r0], #4
 80102fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010300:	d2e8      	bcs.n	80102d4 <quorem+0xb0>
 8010302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801030a:	b922      	cbnz	r2, 8010316 <quorem+0xf2>
 801030c:	3b04      	subs	r3, #4
 801030e:	429d      	cmp	r5, r3
 8010310:	461a      	mov	r2, r3
 8010312:	d30a      	bcc.n	801032a <quorem+0x106>
 8010314:	613c      	str	r4, [r7, #16]
 8010316:	4630      	mov	r0, r6
 8010318:	b003      	add	sp, #12
 801031a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031e:	6812      	ldr	r2, [r2, #0]
 8010320:	3b04      	subs	r3, #4
 8010322:	2a00      	cmp	r2, #0
 8010324:	d1cc      	bne.n	80102c0 <quorem+0x9c>
 8010326:	3c01      	subs	r4, #1
 8010328:	e7c7      	b.n	80102ba <quorem+0x96>
 801032a:	6812      	ldr	r2, [r2, #0]
 801032c:	3b04      	subs	r3, #4
 801032e:	2a00      	cmp	r2, #0
 8010330:	d1f0      	bne.n	8010314 <quorem+0xf0>
 8010332:	3c01      	subs	r4, #1
 8010334:	e7eb      	b.n	801030e <quorem+0xea>
 8010336:	2000      	movs	r0, #0
 8010338:	e7ee      	b.n	8010318 <quorem+0xf4>
 801033a:	0000      	movs	r0, r0
 801033c:	0000      	movs	r0, r0
	...

08010340 <_dtoa_r>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	ed2d 8b04 	vpush	{d8-d9}
 8010348:	ec57 6b10 	vmov	r6, r7, d0
 801034c:	b093      	sub	sp, #76	; 0x4c
 801034e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010354:	9106      	str	r1, [sp, #24]
 8010356:	ee10 aa10 	vmov	sl, s0
 801035a:	4604      	mov	r4, r0
 801035c:	9209      	str	r2, [sp, #36]	; 0x24
 801035e:	930c      	str	r3, [sp, #48]	; 0x30
 8010360:	46bb      	mov	fp, r7
 8010362:	b975      	cbnz	r5, 8010382 <_dtoa_r+0x42>
 8010364:	2010      	movs	r0, #16
 8010366:	f001 fa33 	bl	80117d0 <malloc>
 801036a:	4602      	mov	r2, r0
 801036c:	6260      	str	r0, [r4, #36]	; 0x24
 801036e:	b920      	cbnz	r0, 801037a <_dtoa_r+0x3a>
 8010370:	4ba7      	ldr	r3, [pc, #668]	; (8010610 <_dtoa_r+0x2d0>)
 8010372:	21ea      	movs	r1, #234	; 0xea
 8010374:	48a7      	ldr	r0, [pc, #668]	; (8010614 <_dtoa_r+0x2d4>)
 8010376:	f7ff ff27 	bl	80101c8 <__assert_func>
 801037a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801037e:	6005      	str	r5, [r0, #0]
 8010380:	60c5      	str	r5, [r0, #12]
 8010382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010384:	6819      	ldr	r1, [r3, #0]
 8010386:	b151      	cbz	r1, 801039e <_dtoa_r+0x5e>
 8010388:	685a      	ldr	r2, [r3, #4]
 801038a:	604a      	str	r2, [r1, #4]
 801038c:	2301      	movs	r3, #1
 801038e:	4093      	lsls	r3, r2
 8010390:	608b      	str	r3, [r1, #8]
 8010392:	4620      	mov	r0, r4
 8010394:	f001 fa82 	bl	801189c <_Bfree>
 8010398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
 801039e:	1e3b      	subs	r3, r7, #0
 80103a0:	bfaa      	itet	ge
 80103a2:	2300      	movge	r3, #0
 80103a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80103a8:	f8c8 3000 	strge.w	r3, [r8]
 80103ac:	4b9a      	ldr	r3, [pc, #616]	; (8010618 <_dtoa_r+0x2d8>)
 80103ae:	bfbc      	itt	lt
 80103b0:	2201      	movlt	r2, #1
 80103b2:	f8c8 2000 	strlt.w	r2, [r8]
 80103b6:	ea33 030b 	bics.w	r3, r3, fp
 80103ba:	d11b      	bne.n	80103f4 <_dtoa_r+0xb4>
 80103bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103be:	f242 730f 	movw	r3, #9999	; 0x270f
 80103c2:	6013      	str	r3, [r2, #0]
 80103c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103c8:	4333      	orrs	r3, r6
 80103ca:	f000 8592 	beq.w	8010ef2 <_dtoa_r+0xbb2>
 80103ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103d0:	b963      	cbnz	r3, 80103ec <_dtoa_r+0xac>
 80103d2:	4b92      	ldr	r3, [pc, #584]	; (801061c <_dtoa_r+0x2dc>)
 80103d4:	e022      	b.n	801041c <_dtoa_r+0xdc>
 80103d6:	4b92      	ldr	r3, [pc, #584]	; (8010620 <_dtoa_r+0x2e0>)
 80103d8:	9301      	str	r3, [sp, #4]
 80103da:	3308      	adds	r3, #8
 80103dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103de:	6013      	str	r3, [r2, #0]
 80103e0:	9801      	ldr	r0, [sp, #4]
 80103e2:	b013      	add	sp, #76	; 0x4c
 80103e4:	ecbd 8b04 	vpop	{d8-d9}
 80103e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ec:	4b8b      	ldr	r3, [pc, #556]	; (801061c <_dtoa_r+0x2dc>)
 80103ee:	9301      	str	r3, [sp, #4]
 80103f0:	3303      	adds	r3, #3
 80103f2:	e7f3      	b.n	80103dc <_dtoa_r+0x9c>
 80103f4:	2200      	movs	r2, #0
 80103f6:	2300      	movs	r3, #0
 80103f8:	4650      	mov	r0, sl
 80103fa:	4659      	mov	r1, fp
 80103fc:	f7f0 fb7c 	bl	8000af8 <__aeabi_dcmpeq>
 8010400:	ec4b ab19 	vmov	d9, sl, fp
 8010404:	4680      	mov	r8, r0
 8010406:	b158      	cbz	r0, 8010420 <_dtoa_r+0xe0>
 8010408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801040a:	2301      	movs	r3, #1
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 856b 	beq.w	8010eec <_dtoa_r+0xbac>
 8010416:	4883      	ldr	r0, [pc, #524]	; (8010624 <_dtoa_r+0x2e4>)
 8010418:	6018      	str	r0, [r3, #0]
 801041a:	1e43      	subs	r3, r0, #1
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	e7df      	b.n	80103e0 <_dtoa_r+0xa0>
 8010420:	ec4b ab10 	vmov	d0, sl, fp
 8010424:	aa10      	add	r2, sp, #64	; 0x40
 8010426:	a911      	add	r1, sp, #68	; 0x44
 8010428:	4620      	mov	r0, r4
 801042a:	f001 fde5 	bl	8011ff8 <__d2b>
 801042e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010432:	ee08 0a10 	vmov	s16, r0
 8010436:	2d00      	cmp	r5, #0
 8010438:	f000 8084 	beq.w	8010544 <_dtoa_r+0x204>
 801043c:	ee19 3a90 	vmov	r3, s19
 8010440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010448:	4656      	mov	r6, sl
 801044a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801044e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010456:	4b74      	ldr	r3, [pc, #464]	; (8010628 <_dtoa_r+0x2e8>)
 8010458:	2200      	movs	r2, #0
 801045a:	4630      	mov	r0, r6
 801045c:	4639      	mov	r1, r7
 801045e:	f7ef ff2b 	bl	80002b8 <__aeabi_dsub>
 8010462:	a365      	add	r3, pc, #404	; (adr r3, 80105f8 <_dtoa_r+0x2b8>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	f7f0 f8de 	bl	8000628 <__aeabi_dmul>
 801046c:	a364      	add	r3, pc, #400	; (adr r3, 8010600 <_dtoa_r+0x2c0>)
 801046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010472:	f7ef ff23 	bl	80002bc <__adddf3>
 8010476:	4606      	mov	r6, r0
 8010478:	4628      	mov	r0, r5
 801047a:	460f      	mov	r7, r1
 801047c:	f7f0 f86a 	bl	8000554 <__aeabi_i2d>
 8010480:	a361      	add	r3, pc, #388	; (adr r3, 8010608 <_dtoa_r+0x2c8>)
 8010482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010486:	f7f0 f8cf 	bl	8000628 <__aeabi_dmul>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	4630      	mov	r0, r6
 8010490:	4639      	mov	r1, r7
 8010492:	f7ef ff13 	bl	80002bc <__adddf3>
 8010496:	4606      	mov	r6, r0
 8010498:	460f      	mov	r7, r1
 801049a:	f7f0 fb75 	bl	8000b88 <__aeabi_d2iz>
 801049e:	2200      	movs	r2, #0
 80104a0:	9000      	str	r0, [sp, #0]
 80104a2:	2300      	movs	r3, #0
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7f0 fb30 	bl	8000b0c <__aeabi_dcmplt>
 80104ac:	b150      	cbz	r0, 80104c4 <_dtoa_r+0x184>
 80104ae:	9800      	ldr	r0, [sp, #0]
 80104b0:	f7f0 f850 	bl	8000554 <__aeabi_i2d>
 80104b4:	4632      	mov	r2, r6
 80104b6:	463b      	mov	r3, r7
 80104b8:	f7f0 fb1e 	bl	8000af8 <__aeabi_dcmpeq>
 80104bc:	b910      	cbnz	r0, 80104c4 <_dtoa_r+0x184>
 80104be:	9b00      	ldr	r3, [sp, #0]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	9b00      	ldr	r3, [sp, #0]
 80104c6:	2b16      	cmp	r3, #22
 80104c8:	d85a      	bhi.n	8010580 <_dtoa_r+0x240>
 80104ca:	9a00      	ldr	r2, [sp, #0]
 80104cc:	4b57      	ldr	r3, [pc, #348]	; (801062c <_dtoa_r+0x2ec>)
 80104ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d6:	ec51 0b19 	vmov	r0, r1, d9
 80104da:	f7f0 fb17 	bl	8000b0c <__aeabi_dcmplt>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d050      	beq.n	8010584 <_dtoa_r+0x244>
 80104e2:	9b00      	ldr	r3, [sp, #0]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	2300      	movs	r3, #0
 80104ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80104ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104ee:	1b5d      	subs	r5, r3, r5
 80104f0:	1e6b      	subs	r3, r5, #1
 80104f2:	9305      	str	r3, [sp, #20]
 80104f4:	bf45      	ittet	mi
 80104f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80104fa:	9304      	strmi	r3, [sp, #16]
 80104fc:	2300      	movpl	r3, #0
 80104fe:	2300      	movmi	r3, #0
 8010500:	bf4c      	ite	mi
 8010502:	9305      	strmi	r3, [sp, #20]
 8010504:	9304      	strpl	r3, [sp, #16]
 8010506:	9b00      	ldr	r3, [sp, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	db3d      	blt.n	8010588 <_dtoa_r+0x248>
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	9a00      	ldr	r2, [sp, #0]
 8010510:	920a      	str	r2, [sp, #40]	; 0x28
 8010512:	4413      	add	r3, r2
 8010514:	9305      	str	r3, [sp, #20]
 8010516:	2300      	movs	r3, #0
 8010518:	9307      	str	r3, [sp, #28]
 801051a:	9b06      	ldr	r3, [sp, #24]
 801051c:	2b09      	cmp	r3, #9
 801051e:	f200 8089 	bhi.w	8010634 <_dtoa_r+0x2f4>
 8010522:	2b05      	cmp	r3, #5
 8010524:	bfc4      	itt	gt
 8010526:	3b04      	subgt	r3, #4
 8010528:	9306      	strgt	r3, [sp, #24]
 801052a:	9b06      	ldr	r3, [sp, #24]
 801052c:	f1a3 0302 	sub.w	r3, r3, #2
 8010530:	bfcc      	ite	gt
 8010532:	2500      	movgt	r5, #0
 8010534:	2501      	movle	r5, #1
 8010536:	2b03      	cmp	r3, #3
 8010538:	f200 8087 	bhi.w	801064a <_dtoa_r+0x30a>
 801053c:	e8df f003 	tbb	[pc, r3]
 8010540:	59383a2d 	.word	0x59383a2d
 8010544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010548:	441d      	add	r5, r3
 801054a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801054e:	2b20      	cmp	r3, #32
 8010550:	bfc1      	itttt	gt
 8010552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801055a:	fa0b f303 	lslgt.w	r3, fp, r3
 801055e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010562:	bfda      	itte	le
 8010564:	f1c3 0320 	rsble	r3, r3, #32
 8010568:	fa06 f003 	lslle.w	r0, r6, r3
 801056c:	4318      	orrgt	r0, r3
 801056e:	f7ef ffe1 	bl	8000534 <__aeabi_ui2d>
 8010572:	2301      	movs	r3, #1
 8010574:	4606      	mov	r6, r0
 8010576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801057a:	3d01      	subs	r5, #1
 801057c:	930e      	str	r3, [sp, #56]	; 0x38
 801057e:	e76a      	b.n	8010456 <_dtoa_r+0x116>
 8010580:	2301      	movs	r3, #1
 8010582:	e7b2      	b.n	80104ea <_dtoa_r+0x1aa>
 8010584:	900b      	str	r0, [sp, #44]	; 0x2c
 8010586:	e7b1      	b.n	80104ec <_dtoa_r+0x1ac>
 8010588:	9b04      	ldr	r3, [sp, #16]
 801058a:	9a00      	ldr	r2, [sp, #0]
 801058c:	1a9b      	subs	r3, r3, r2
 801058e:	9304      	str	r3, [sp, #16]
 8010590:	4253      	negs	r3, r2
 8010592:	9307      	str	r3, [sp, #28]
 8010594:	2300      	movs	r3, #0
 8010596:	930a      	str	r3, [sp, #40]	; 0x28
 8010598:	e7bf      	b.n	801051a <_dtoa_r+0x1da>
 801059a:	2300      	movs	r3, #0
 801059c:	9308      	str	r3, [sp, #32]
 801059e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	dc55      	bgt.n	8010650 <_dtoa_r+0x310>
 80105a4:	2301      	movs	r3, #1
 80105a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80105aa:	461a      	mov	r2, r3
 80105ac:	9209      	str	r2, [sp, #36]	; 0x24
 80105ae:	e00c      	b.n	80105ca <_dtoa_r+0x28a>
 80105b0:	2301      	movs	r3, #1
 80105b2:	e7f3      	b.n	801059c <_dtoa_r+0x25c>
 80105b4:	2300      	movs	r3, #0
 80105b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105b8:	9308      	str	r3, [sp, #32]
 80105ba:	9b00      	ldr	r3, [sp, #0]
 80105bc:	4413      	add	r3, r2
 80105be:	9302      	str	r3, [sp, #8]
 80105c0:	3301      	adds	r3, #1
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	9303      	str	r3, [sp, #12]
 80105c6:	bfb8      	it	lt
 80105c8:	2301      	movlt	r3, #1
 80105ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80105cc:	2200      	movs	r2, #0
 80105ce:	6042      	str	r2, [r0, #4]
 80105d0:	2204      	movs	r2, #4
 80105d2:	f102 0614 	add.w	r6, r2, #20
 80105d6:	429e      	cmp	r6, r3
 80105d8:	6841      	ldr	r1, [r0, #4]
 80105da:	d93d      	bls.n	8010658 <_dtoa_r+0x318>
 80105dc:	4620      	mov	r0, r4
 80105de:	f001 f91d 	bl	801181c <_Balloc>
 80105e2:	9001      	str	r0, [sp, #4]
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d13b      	bne.n	8010660 <_dtoa_r+0x320>
 80105e8:	4b11      	ldr	r3, [pc, #68]	; (8010630 <_dtoa_r+0x2f0>)
 80105ea:	4602      	mov	r2, r0
 80105ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80105f0:	e6c0      	b.n	8010374 <_dtoa_r+0x34>
 80105f2:	2301      	movs	r3, #1
 80105f4:	e7df      	b.n	80105b6 <_dtoa_r+0x276>
 80105f6:	bf00      	nop
 80105f8:	636f4361 	.word	0x636f4361
 80105fc:	3fd287a7 	.word	0x3fd287a7
 8010600:	8b60c8b3 	.word	0x8b60c8b3
 8010604:	3fc68a28 	.word	0x3fc68a28
 8010608:	509f79fb 	.word	0x509f79fb
 801060c:	3fd34413 	.word	0x3fd34413
 8010610:	08013758 	.word	0x08013758
 8010614:	08013916 	.word	0x08013916
 8010618:	7ff00000 	.word	0x7ff00000
 801061c:	08013912 	.word	0x08013912
 8010620:	08013909 	.word	0x08013909
 8010624:	080136e5 	.word	0x080136e5
 8010628:	3ff80000 	.word	0x3ff80000
 801062c:	08013a80 	.word	0x08013a80
 8010630:	08013971 	.word	0x08013971
 8010634:	2501      	movs	r5, #1
 8010636:	2300      	movs	r3, #0
 8010638:	9306      	str	r3, [sp, #24]
 801063a:	9508      	str	r5, [sp, #32]
 801063c:	f04f 33ff 	mov.w	r3, #4294967295
 8010640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010644:	2200      	movs	r2, #0
 8010646:	2312      	movs	r3, #18
 8010648:	e7b0      	b.n	80105ac <_dtoa_r+0x26c>
 801064a:	2301      	movs	r3, #1
 801064c:	9308      	str	r3, [sp, #32]
 801064e:	e7f5      	b.n	801063c <_dtoa_r+0x2fc>
 8010650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010656:	e7b8      	b.n	80105ca <_dtoa_r+0x28a>
 8010658:	3101      	adds	r1, #1
 801065a:	6041      	str	r1, [r0, #4]
 801065c:	0052      	lsls	r2, r2, #1
 801065e:	e7b8      	b.n	80105d2 <_dtoa_r+0x292>
 8010660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010662:	9a01      	ldr	r2, [sp, #4]
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	9b03      	ldr	r3, [sp, #12]
 8010668:	2b0e      	cmp	r3, #14
 801066a:	f200 809d 	bhi.w	80107a8 <_dtoa_r+0x468>
 801066e:	2d00      	cmp	r5, #0
 8010670:	f000 809a 	beq.w	80107a8 <_dtoa_r+0x468>
 8010674:	9b00      	ldr	r3, [sp, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	dd32      	ble.n	80106e0 <_dtoa_r+0x3a0>
 801067a:	4ab7      	ldr	r2, [pc, #732]	; (8010958 <_dtoa_r+0x618>)
 801067c:	f003 030f 	and.w	r3, r3, #15
 8010680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010688:	9b00      	ldr	r3, [sp, #0]
 801068a:	05d8      	lsls	r0, r3, #23
 801068c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010690:	d516      	bpl.n	80106c0 <_dtoa_r+0x380>
 8010692:	4bb2      	ldr	r3, [pc, #712]	; (801095c <_dtoa_r+0x61c>)
 8010694:	ec51 0b19 	vmov	r0, r1, d9
 8010698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801069c:	f7f0 f8ee 	bl	800087c <__aeabi_ddiv>
 80106a0:	f007 070f 	and.w	r7, r7, #15
 80106a4:	4682      	mov	sl, r0
 80106a6:	468b      	mov	fp, r1
 80106a8:	2503      	movs	r5, #3
 80106aa:	4eac      	ldr	r6, [pc, #688]	; (801095c <_dtoa_r+0x61c>)
 80106ac:	b957      	cbnz	r7, 80106c4 <_dtoa_r+0x384>
 80106ae:	4642      	mov	r2, r8
 80106b0:	464b      	mov	r3, r9
 80106b2:	4650      	mov	r0, sl
 80106b4:	4659      	mov	r1, fp
 80106b6:	f7f0 f8e1 	bl	800087c <__aeabi_ddiv>
 80106ba:	4682      	mov	sl, r0
 80106bc:	468b      	mov	fp, r1
 80106be:	e028      	b.n	8010712 <_dtoa_r+0x3d2>
 80106c0:	2502      	movs	r5, #2
 80106c2:	e7f2      	b.n	80106aa <_dtoa_r+0x36a>
 80106c4:	07f9      	lsls	r1, r7, #31
 80106c6:	d508      	bpl.n	80106da <_dtoa_r+0x39a>
 80106c8:	4640      	mov	r0, r8
 80106ca:	4649      	mov	r1, r9
 80106cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80106d0:	f7ef ffaa 	bl	8000628 <__aeabi_dmul>
 80106d4:	3501      	adds	r5, #1
 80106d6:	4680      	mov	r8, r0
 80106d8:	4689      	mov	r9, r1
 80106da:	107f      	asrs	r7, r7, #1
 80106dc:	3608      	adds	r6, #8
 80106de:	e7e5      	b.n	80106ac <_dtoa_r+0x36c>
 80106e0:	f000 809b 	beq.w	801081a <_dtoa_r+0x4da>
 80106e4:	9b00      	ldr	r3, [sp, #0]
 80106e6:	4f9d      	ldr	r7, [pc, #628]	; (801095c <_dtoa_r+0x61c>)
 80106e8:	425e      	negs	r6, r3
 80106ea:	4b9b      	ldr	r3, [pc, #620]	; (8010958 <_dtoa_r+0x618>)
 80106ec:	f006 020f 	and.w	r2, r6, #15
 80106f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	ec51 0b19 	vmov	r0, r1, d9
 80106fc:	f7ef ff94 	bl	8000628 <__aeabi_dmul>
 8010700:	1136      	asrs	r6, r6, #4
 8010702:	4682      	mov	sl, r0
 8010704:	468b      	mov	fp, r1
 8010706:	2300      	movs	r3, #0
 8010708:	2502      	movs	r5, #2
 801070a:	2e00      	cmp	r6, #0
 801070c:	d17a      	bne.n	8010804 <_dtoa_r+0x4c4>
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1d3      	bne.n	80106ba <_dtoa_r+0x37a>
 8010712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010714:	2b00      	cmp	r3, #0
 8010716:	f000 8082 	beq.w	801081e <_dtoa_r+0x4de>
 801071a:	4b91      	ldr	r3, [pc, #580]	; (8010960 <_dtoa_r+0x620>)
 801071c:	2200      	movs	r2, #0
 801071e:	4650      	mov	r0, sl
 8010720:	4659      	mov	r1, fp
 8010722:	f7f0 f9f3 	bl	8000b0c <__aeabi_dcmplt>
 8010726:	2800      	cmp	r0, #0
 8010728:	d079      	beq.n	801081e <_dtoa_r+0x4de>
 801072a:	9b03      	ldr	r3, [sp, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d076      	beq.n	801081e <_dtoa_r+0x4de>
 8010730:	9b02      	ldr	r3, [sp, #8]
 8010732:	2b00      	cmp	r3, #0
 8010734:	dd36      	ble.n	80107a4 <_dtoa_r+0x464>
 8010736:	9b00      	ldr	r3, [sp, #0]
 8010738:	4650      	mov	r0, sl
 801073a:	4659      	mov	r1, fp
 801073c:	1e5f      	subs	r7, r3, #1
 801073e:	2200      	movs	r2, #0
 8010740:	4b88      	ldr	r3, [pc, #544]	; (8010964 <_dtoa_r+0x624>)
 8010742:	f7ef ff71 	bl	8000628 <__aeabi_dmul>
 8010746:	9e02      	ldr	r6, [sp, #8]
 8010748:	4682      	mov	sl, r0
 801074a:	468b      	mov	fp, r1
 801074c:	3501      	adds	r5, #1
 801074e:	4628      	mov	r0, r5
 8010750:	f7ef ff00 	bl	8000554 <__aeabi_i2d>
 8010754:	4652      	mov	r2, sl
 8010756:	465b      	mov	r3, fp
 8010758:	f7ef ff66 	bl	8000628 <__aeabi_dmul>
 801075c:	4b82      	ldr	r3, [pc, #520]	; (8010968 <_dtoa_r+0x628>)
 801075e:	2200      	movs	r2, #0
 8010760:	f7ef fdac 	bl	80002bc <__adddf3>
 8010764:	46d0      	mov	r8, sl
 8010766:	46d9      	mov	r9, fp
 8010768:	4682      	mov	sl, r0
 801076a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801076e:	2e00      	cmp	r6, #0
 8010770:	d158      	bne.n	8010824 <_dtoa_r+0x4e4>
 8010772:	4b7e      	ldr	r3, [pc, #504]	; (801096c <_dtoa_r+0x62c>)
 8010774:	2200      	movs	r2, #0
 8010776:	4640      	mov	r0, r8
 8010778:	4649      	mov	r1, r9
 801077a:	f7ef fd9d 	bl	80002b8 <__aeabi_dsub>
 801077e:	4652      	mov	r2, sl
 8010780:	465b      	mov	r3, fp
 8010782:	4680      	mov	r8, r0
 8010784:	4689      	mov	r9, r1
 8010786:	f7f0 f9df 	bl	8000b48 <__aeabi_dcmpgt>
 801078a:	2800      	cmp	r0, #0
 801078c:	f040 8295 	bne.w	8010cba <_dtoa_r+0x97a>
 8010790:	4652      	mov	r2, sl
 8010792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010796:	4640      	mov	r0, r8
 8010798:	4649      	mov	r1, r9
 801079a:	f7f0 f9b7 	bl	8000b0c <__aeabi_dcmplt>
 801079e:	2800      	cmp	r0, #0
 80107a0:	f040 8289 	bne.w	8010cb6 <_dtoa_r+0x976>
 80107a4:	ec5b ab19 	vmov	sl, fp, d9
 80107a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f2c0 8148 	blt.w	8010a40 <_dtoa_r+0x700>
 80107b0:	9a00      	ldr	r2, [sp, #0]
 80107b2:	2a0e      	cmp	r2, #14
 80107b4:	f300 8144 	bgt.w	8010a40 <_dtoa_r+0x700>
 80107b8:	4b67      	ldr	r3, [pc, #412]	; (8010958 <_dtoa_r+0x618>)
 80107ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	f280 80d5 	bge.w	8010974 <_dtoa_r+0x634>
 80107ca:	9b03      	ldr	r3, [sp, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f300 80d1 	bgt.w	8010974 <_dtoa_r+0x634>
 80107d2:	f040 826f 	bne.w	8010cb4 <_dtoa_r+0x974>
 80107d6:	4b65      	ldr	r3, [pc, #404]	; (801096c <_dtoa_r+0x62c>)
 80107d8:	2200      	movs	r2, #0
 80107da:	4640      	mov	r0, r8
 80107dc:	4649      	mov	r1, r9
 80107de:	f7ef ff23 	bl	8000628 <__aeabi_dmul>
 80107e2:	4652      	mov	r2, sl
 80107e4:	465b      	mov	r3, fp
 80107e6:	f7f0 f9a5 	bl	8000b34 <__aeabi_dcmpge>
 80107ea:	9e03      	ldr	r6, [sp, #12]
 80107ec:	4637      	mov	r7, r6
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f040 8245 	bne.w	8010c7e <_dtoa_r+0x93e>
 80107f4:	9d01      	ldr	r5, [sp, #4]
 80107f6:	2331      	movs	r3, #49	; 0x31
 80107f8:	f805 3b01 	strb.w	r3, [r5], #1
 80107fc:	9b00      	ldr	r3, [sp, #0]
 80107fe:	3301      	adds	r3, #1
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	e240      	b.n	8010c86 <_dtoa_r+0x946>
 8010804:	07f2      	lsls	r2, r6, #31
 8010806:	d505      	bpl.n	8010814 <_dtoa_r+0x4d4>
 8010808:	e9d7 2300 	ldrd	r2, r3, [r7]
 801080c:	f7ef ff0c 	bl	8000628 <__aeabi_dmul>
 8010810:	3501      	adds	r5, #1
 8010812:	2301      	movs	r3, #1
 8010814:	1076      	asrs	r6, r6, #1
 8010816:	3708      	adds	r7, #8
 8010818:	e777      	b.n	801070a <_dtoa_r+0x3ca>
 801081a:	2502      	movs	r5, #2
 801081c:	e779      	b.n	8010712 <_dtoa_r+0x3d2>
 801081e:	9f00      	ldr	r7, [sp, #0]
 8010820:	9e03      	ldr	r6, [sp, #12]
 8010822:	e794      	b.n	801074e <_dtoa_r+0x40e>
 8010824:	9901      	ldr	r1, [sp, #4]
 8010826:	4b4c      	ldr	r3, [pc, #304]	; (8010958 <_dtoa_r+0x618>)
 8010828:	4431      	add	r1, r6
 801082a:	910d      	str	r1, [sp, #52]	; 0x34
 801082c:	9908      	ldr	r1, [sp, #32]
 801082e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010836:	2900      	cmp	r1, #0
 8010838:	d043      	beq.n	80108c2 <_dtoa_r+0x582>
 801083a:	494d      	ldr	r1, [pc, #308]	; (8010970 <_dtoa_r+0x630>)
 801083c:	2000      	movs	r0, #0
 801083e:	f7f0 f81d 	bl	800087c <__aeabi_ddiv>
 8010842:	4652      	mov	r2, sl
 8010844:	465b      	mov	r3, fp
 8010846:	f7ef fd37 	bl	80002b8 <__aeabi_dsub>
 801084a:	9d01      	ldr	r5, [sp, #4]
 801084c:	4682      	mov	sl, r0
 801084e:	468b      	mov	fp, r1
 8010850:	4649      	mov	r1, r9
 8010852:	4640      	mov	r0, r8
 8010854:	f7f0 f998 	bl	8000b88 <__aeabi_d2iz>
 8010858:	4606      	mov	r6, r0
 801085a:	f7ef fe7b 	bl	8000554 <__aeabi_i2d>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	4640      	mov	r0, r8
 8010864:	4649      	mov	r1, r9
 8010866:	f7ef fd27 	bl	80002b8 <__aeabi_dsub>
 801086a:	3630      	adds	r6, #48	; 0x30
 801086c:	f805 6b01 	strb.w	r6, [r5], #1
 8010870:	4652      	mov	r2, sl
 8010872:	465b      	mov	r3, fp
 8010874:	4680      	mov	r8, r0
 8010876:	4689      	mov	r9, r1
 8010878:	f7f0 f948 	bl	8000b0c <__aeabi_dcmplt>
 801087c:	2800      	cmp	r0, #0
 801087e:	d163      	bne.n	8010948 <_dtoa_r+0x608>
 8010880:	4642      	mov	r2, r8
 8010882:	464b      	mov	r3, r9
 8010884:	4936      	ldr	r1, [pc, #216]	; (8010960 <_dtoa_r+0x620>)
 8010886:	2000      	movs	r0, #0
 8010888:	f7ef fd16 	bl	80002b8 <__aeabi_dsub>
 801088c:	4652      	mov	r2, sl
 801088e:	465b      	mov	r3, fp
 8010890:	f7f0 f93c 	bl	8000b0c <__aeabi_dcmplt>
 8010894:	2800      	cmp	r0, #0
 8010896:	f040 80b5 	bne.w	8010a04 <_dtoa_r+0x6c4>
 801089a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801089c:	429d      	cmp	r5, r3
 801089e:	d081      	beq.n	80107a4 <_dtoa_r+0x464>
 80108a0:	4b30      	ldr	r3, [pc, #192]	; (8010964 <_dtoa_r+0x624>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	4650      	mov	r0, sl
 80108a6:	4659      	mov	r1, fp
 80108a8:	f7ef febe 	bl	8000628 <__aeabi_dmul>
 80108ac:	4b2d      	ldr	r3, [pc, #180]	; (8010964 <_dtoa_r+0x624>)
 80108ae:	4682      	mov	sl, r0
 80108b0:	468b      	mov	fp, r1
 80108b2:	4640      	mov	r0, r8
 80108b4:	4649      	mov	r1, r9
 80108b6:	2200      	movs	r2, #0
 80108b8:	f7ef feb6 	bl	8000628 <__aeabi_dmul>
 80108bc:	4680      	mov	r8, r0
 80108be:	4689      	mov	r9, r1
 80108c0:	e7c6      	b.n	8010850 <_dtoa_r+0x510>
 80108c2:	4650      	mov	r0, sl
 80108c4:	4659      	mov	r1, fp
 80108c6:	f7ef feaf 	bl	8000628 <__aeabi_dmul>
 80108ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108cc:	9d01      	ldr	r5, [sp, #4]
 80108ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80108d0:	4682      	mov	sl, r0
 80108d2:	468b      	mov	fp, r1
 80108d4:	4649      	mov	r1, r9
 80108d6:	4640      	mov	r0, r8
 80108d8:	f7f0 f956 	bl	8000b88 <__aeabi_d2iz>
 80108dc:	4606      	mov	r6, r0
 80108de:	f7ef fe39 	bl	8000554 <__aeabi_i2d>
 80108e2:	3630      	adds	r6, #48	; 0x30
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	4640      	mov	r0, r8
 80108ea:	4649      	mov	r1, r9
 80108ec:	f7ef fce4 	bl	80002b8 <__aeabi_dsub>
 80108f0:	f805 6b01 	strb.w	r6, [r5], #1
 80108f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108f6:	429d      	cmp	r5, r3
 80108f8:	4680      	mov	r8, r0
 80108fa:	4689      	mov	r9, r1
 80108fc:	f04f 0200 	mov.w	r2, #0
 8010900:	d124      	bne.n	801094c <_dtoa_r+0x60c>
 8010902:	4b1b      	ldr	r3, [pc, #108]	; (8010970 <_dtoa_r+0x630>)
 8010904:	4650      	mov	r0, sl
 8010906:	4659      	mov	r1, fp
 8010908:	f7ef fcd8 	bl	80002bc <__adddf3>
 801090c:	4602      	mov	r2, r0
 801090e:	460b      	mov	r3, r1
 8010910:	4640      	mov	r0, r8
 8010912:	4649      	mov	r1, r9
 8010914:	f7f0 f918 	bl	8000b48 <__aeabi_dcmpgt>
 8010918:	2800      	cmp	r0, #0
 801091a:	d173      	bne.n	8010a04 <_dtoa_r+0x6c4>
 801091c:	4652      	mov	r2, sl
 801091e:	465b      	mov	r3, fp
 8010920:	4913      	ldr	r1, [pc, #76]	; (8010970 <_dtoa_r+0x630>)
 8010922:	2000      	movs	r0, #0
 8010924:	f7ef fcc8 	bl	80002b8 <__aeabi_dsub>
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	4640      	mov	r0, r8
 801092e:	4649      	mov	r1, r9
 8010930:	f7f0 f8ec 	bl	8000b0c <__aeabi_dcmplt>
 8010934:	2800      	cmp	r0, #0
 8010936:	f43f af35 	beq.w	80107a4 <_dtoa_r+0x464>
 801093a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801093c:	1e6b      	subs	r3, r5, #1
 801093e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010944:	2b30      	cmp	r3, #48	; 0x30
 8010946:	d0f8      	beq.n	801093a <_dtoa_r+0x5fa>
 8010948:	9700      	str	r7, [sp, #0]
 801094a:	e049      	b.n	80109e0 <_dtoa_r+0x6a0>
 801094c:	4b05      	ldr	r3, [pc, #20]	; (8010964 <_dtoa_r+0x624>)
 801094e:	f7ef fe6b 	bl	8000628 <__aeabi_dmul>
 8010952:	4680      	mov	r8, r0
 8010954:	4689      	mov	r9, r1
 8010956:	e7bd      	b.n	80108d4 <_dtoa_r+0x594>
 8010958:	08013a80 	.word	0x08013a80
 801095c:	08013a58 	.word	0x08013a58
 8010960:	3ff00000 	.word	0x3ff00000
 8010964:	40240000 	.word	0x40240000
 8010968:	401c0000 	.word	0x401c0000
 801096c:	40140000 	.word	0x40140000
 8010970:	3fe00000 	.word	0x3fe00000
 8010974:	9d01      	ldr	r5, [sp, #4]
 8010976:	4656      	mov	r6, sl
 8010978:	465f      	mov	r7, fp
 801097a:	4642      	mov	r2, r8
 801097c:	464b      	mov	r3, r9
 801097e:	4630      	mov	r0, r6
 8010980:	4639      	mov	r1, r7
 8010982:	f7ef ff7b 	bl	800087c <__aeabi_ddiv>
 8010986:	f7f0 f8ff 	bl	8000b88 <__aeabi_d2iz>
 801098a:	4682      	mov	sl, r0
 801098c:	f7ef fde2 	bl	8000554 <__aeabi_i2d>
 8010990:	4642      	mov	r2, r8
 8010992:	464b      	mov	r3, r9
 8010994:	f7ef fe48 	bl	8000628 <__aeabi_dmul>
 8010998:	4602      	mov	r2, r0
 801099a:	460b      	mov	r3, r1
 801099c:	4630      	mov	r0, r6
 801099e:	4639      	mov	r1, r7
 80109a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80109a4:	f7ef fc88 	bl	80002b8 <__aeabi_dsub>
 80109a8:	f805 6b01 	strb.w	r6, [r5], #1
 80109ac:	9e01      	ldr	r6, [sp, #4]
 80109ae:	9f03      	ldr	r7, [sp, #12]
 80109b0:	1bae      	subs	r6, r5, r6
 80109b2:	42b7      	cmp	r7, r6
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	d135      	bne.n	8010a26 <_dtoa_r+0x6e6>
 80109ba:	f7ef fc7f 	bl	80002bc <__adddf3>
 80109be:	4642      	mov	r2, r8
 80109c0:	464b      	mov	r3, r9
 80109c2:	4606      	mov	r6, r0
 80109c4:	460f      	mov	r7, r1
 80109c6:	f7f0 f8bf 	bl	8000b48 <__aeabi_dcmpgt>
 80109ca:	b9d0      	cbnz	r0, 8010a02 <_dtoa_r+0x6c2>
 80109cc:	4642      	mov	r2, r8
 80109ce:	464b      	mov	r3, r9
 80109d0:	4630      	mov	r0, r6
 80109d2:	4639      	mov	r1, r7
 80109d4:	f7f0 f890 	bl	8000af8 <__aeabi_dcmpeq>
 80109d8:	b110      	cbz	r0, 80109e0 <_dtoa_r+0x6a0>
 80109da:	f01a 0f01 	tst.w	sl, #1
 80109de:	d110      	bne.n	8010a02 <_dtoa_r+0x6c2>
 80109e0:	4620      	mov	r0, r4
 80109e2:	ee18 1a10 	vmov	r1, s16
 80109e6:	f000 ff59 	bl	801189c <_Bfree>
 80109ea:	2300      	movs	r3, #0
 80109ec:	9800      	ldr	r0, [sp, #0]
 80109ee:	702b      	strb	r3, [r5, #0]
 80109f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109f2:	3001      	adds	r0, #1
 80109f4:	6018      	str	r0, [r3, #0]
 80109f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f43f acf1 	beq.w	80103e0 <_dtoa_r+0xa0>
 80109fe:	601d      	str	r5, [r3, #0]
 8010a00:	e4ee      	b.n	80103e0 <_dtoa_r+0xa0>
 8010a02:	9f00      	ldr	r7, [sp, #0]
 8010a04:	462b      	mov	r3, r5
 8010a06:	461d      	mov	r5, r3
 8010a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a0c:	2a39      	cmp	r2, #57	; 0x39
 8010a0e:	d106      	bne.n	8010a1e <_dtoa_r+0x6de>
 8010a10:	9a01      	ldr	r2, [sp, #4]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d1f7      	bne.n	8010a06 <_dtoa_r+0x6c6>
 8010a16:	9901      	ldr	r1, [sp, #4]
 8010a18:	2230      	movs	r2, #48	; 0x30
 8010a1a:	3701      	adds	r7, #1
 8010a1c:	700a      	strb	r2, [r1, #0]
 8010a1e:	781a      	ldrb	r2, [r3, #0]
 8010a20:	3201      	adds	r2, #1
 8010a22:	701a      	strb	r2, [r3, #0]
 8010a24:	e790      	b.n	8010948 <_dtoa_r+0x608>
 8010a26:	4ba6      	ldr	r3, [pc, #664]	; (8010cc0 <_dtoa_r+0x980>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f7ef fdfd 	bl	8000628 <__aeabi_dmul>
 8010a2e:	2200      	movs	r2, #0
 8010a30:	2300      	movs	r3, #0
 8010a32:	4606      	mov	r6, r0
 8010a34:	460f      	mov	r7, r1
 8010a36:	f7f0 f85f 	bl	8000af8 <__aeabi_dcmpeq>
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d09d      	beq.n	801097a <_dtoa_r+0x63a>
 8010a3e:	e7cf      	b.n	80109e0 <_dtoa_r+0x6a0>
 8010a40:	9a08      	ldr	r2, [sp, #32]
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	f000 80d7 	beq.w	8010bf6 <_dtoa_r+0x8b6>
 8010a48:	9a06      	ldr	r2, [sp, #24]
 8010a4a:	2a01      	cmp	r2, #1
 8010a4c:	f300 80ba 	bgt.w	8010bc4 <_dtoa_r+0x884>
 8010a50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a52:	2a00      	cmp	r2, #0
 8010a54:	f000 80b2 	beq.w	8010bbc <_dtoa_r+0x87c>
 8010a58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a5c:	9e07      	ldr	r6, [sp, #28]
 8010a5e:	9d04      	ldr	r5, [sp, #16]
 8010a60:	9a04      	ldr	r2, [sp, #16]
 8010a62:	441a      	add	r2, r3
 8010a64:	9204      	str	r2, [sp, #16]
 8010a66:	9a05      	ldr	r2, [sp, #20]
 8010a68:	2101      	movs	r1, #1
 8010a6a:	441a      	add	r2, r3
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	9205      	str	r2, [sp, #20]
 8010a70:	f001 f816 	bl	8011aa0 <__i2b>
 8010a74:	4607      	mov	r7, r0
 8010a76:	2d00      	cmp	r5, #0
 8010a78:	dd0c      	ble.n	8010a94 <_dtoa_r+0x754>
 8010a7a:	9b05      	ldr	r3, [sp, #20]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dd09      	ble.n	8010a94 <_dtoa_r+0x754>
 8010a80:	42ab      	cmp	r3, r5
 8010a82:	9a04      	ldr	r2, [sp, #16]
 8010a84:	bfa8      	it	ge
 8010a86:	462b      	movge	r3, r5
 8010a88:	1ad2      	subs	r2, r2, r3
 8010a8a:	9204      	str	r2, [sp, #16]
 8010a8c:	9a05      	ldr	r2, [sp, #20]
 8010a8e:	1aed      	subs	r5, r5, r3
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	9305      	str	r3, [sp, #20]
 8010a94:	9b07      	ldr	r3, [sp, #28]
 8010a96:	b31b      	cbz	r3, 8010ae0 <_dtoa_r+0x7a0>
 8010a98:	9b08      	ldr	r3, [sp, #32]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 80af 	beq.w	8010bfe <_dtoa_r+0x8be>
 8010aa0:	2e00      	cmp	r6, #0
 8010aa2:	dd13      	ble.n	8010acc <_dtoa_r+0x78c>
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f001 f8b9 	bl	8011c20 <__pow5mult>
 8010aae:	ee18 2a10 	vmov	r2, s16
 8010ab2:	4601      	mov	r1, r0
 8010ab4:	4607      	mov	r7, r0
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f001 f808 	bl	8011acc <__multiply>
 8010abc:	ee18 1a10 	vmov	r1, s16
 8010ac0:	4680      	mov	r8, r0
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 feea 	bl	801189c <_Bfree>
 8010ac8:	ee08 8a10 	vmov	s16, r8
 8010acc:	9b07      	ldr	r3, [sp, #28]
 8010ace:	1b9a      	subs	r2, r3, r6
 8010ad0:	d006      	beq.n	8010ae0 <_dtoa_r+0x7a0>
 8010ad2:	ee18 1a10 	vmov	r1, s16
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f001 f8a2 	bl	8011c20 <__pow5mult>
 8010adc:	ee08 0a10 	vmov	s16, r0
 8010ae0:	2101      	movs	r1, #1
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f000 ffdc 	bl	8011aa0 <__i2b>
 8010ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	4606      	mov	r6, r0
 8010aee:	f340 8088 	ble.w	8010c02 <_dtoa_r+0x8c2>
 8010af2:	461a      	mov	r2, r3
 8010af4:	4601      	mov	r1, r0
 8010af6:	4620      	mov	r0, r4
 8010af8:	f001 f892 	bl	8011c20 <__pow5mult>
 8010afc:	9b06      	ldr	r3, [sp, #24]
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	4606      	mov	r6, r0
 8010b02:	f340 8081 	ble.w	8010c08 <_dtoa_r+0x8c8>
 8010b06:	f04f 0800 	mov.w	r8, #0
 8010b0a:	6933      	ldr	r3, [r6, #16]
 8010b0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b10:	6918      	ldr	r0, [r3, #16]
 8010b12:	f000 ff75 	bl	8011a00 <__hi0bits>
 8010b16:	f1c0 0020 	rsb	r0, r0, #32
 8010b1a:	9b05      	ldr	r3, [sp, #20]
 8010b1c:	4418      	add	r0, r3
 8010b1e:	f010 001f 	ands.w	r0, r0, #31
 8010b22:	f000 8092 	beq.w	8010c4a <_dtoa_r+0x90a>
 8010b26:	f1c0 0320 	rsb	r3, r0, #32
 8010b2a:	2b04      	cmp	r3, #4
 8010b2c:	f340 808a 	ble.w	8010c44 <_dtoa_r+0x904>
 8010b30:	f1c0 001c 	rsb	r0, r0, #28
 8010b34:	9b04      	ldr	r3, [sp, #16]
 8010b36:	4403      	add	r3, r0
 8010b38:	9304      	str	r3, [sp, #16]
 8010b3a:	9b05      	ldr	r3, [sp, #20]
 8010b3c:	4403      	add	r3, r0
 8010b3e:	4405      	add	r5, r0
 8010b40:	9305      	str	r3, [sp, #20]
 8010b42:	9b04      	ldr	r3, [sp, #16]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	dd07      	ble.n	8010b58 <_dtoa_r+0x818>
 8010b48:	ee18 1a10 	vmov	r1, s16
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f001 f8c0 	bl	8011cd4 <__lshift>
 8010b54:	ee08 0a10 	vmov	s16, r0
 8010b58:	9b05      	ldr	r3, [sp, #20]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	dd05      	ble.n	8010b6a <_dtoa_r+0x82a>
 8010b5e:	4631      	mov	r1, r6
 8010b60:	461a      	mov	r2, r3
 8010b62:	4620      	mov	r0, r4
 8010b64:	f001 f8b6 	bl	8011cd4 <__lshift>
 8010b68:	4606      	mov	r6, r0
 8010b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d06e      	beq.n	8010c4e <_dtoa_r+0x90e>
 8010b70:	ee18 0a10 	vmov	r0, s16
 8010b74:	4631      	mov	r1, r6
 8010b76:	f001 f91d 	bl	8011db4 <__mcmp>
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	da67      	bge.n	8010c4e <_dtoa_r+0x90e>
 8010b7e:	9b00      	ldr	r3, [sp, #0]
 8010b80:	3b01      	subs	r3, #1
 8010b82:	ee18 1a10 	vmov	r1, s16
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	220a      	movs	r2, #10
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 fea7 	bl	80118e0 <__multadd>
 8010b92:	9b08      	ldr	r3, [sp, #32]
 8010b94:	ee08 0a10 	vmov	s16, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f000 81b1 	beq.w	8010f00 <_dtoa_r+0xbc0>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	4639      	mov	r1, r7
 8010ba2:	220a      	movs	r2, #10
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f000 fe9b 	bl	80118e0 <__multadd>
 8010baa:	9b02      	ldr	r3, [sp, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	4607      	mov	r7, r0
 8010bb0:	f300 808e 	bgt.w	8010cd0 <_dtoa_r+0x990>
 8010bb4:	9b06      	ldr	r3, [sp, #24]
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	dc51      	bgt.n	8010c5e <_dtoa_r+0x91e>
 8010bba:	e089      	b.n	8010cd0 <_dtoa_r+0x990>
 8010bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010bc2:	e74b      	b.n	8010a5c <_dtoa_r+0x71c>
 8010bc4:	9b03      	ldr	r3, [sp, #12]
 8010bc6:	1e5e      	subs	r6, r3, #1
 8010bc8:	9b07      	ldr	r3, [sp, #28]
 8010bca:	42b3      	cmp	r3, r6
 8010bcc:	bfbf      	itttt	lt
 8010bce:	9b07      	ldrlt	r3, [sp, #28]
 8010bd0:	9607      	strlt	r6, [sp, #28]
 8010bd2:	1af2      	sublt	r2, r6, r3
 8010bd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010bd6:	bfb6      	itet	lt
 8010bd8:	189b      	addlt	r3, r3, r2
 8010bda:	1b9e      	subge	r6, r3, r6
 8010bdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010bde:	9b03      	ldr	r3, [sp, #12]
 8010be0:	bfb8      	it	lt
 8010be2:	2600      	movlt	r6, #0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	bfb7      	itett	lt
 8010be8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010bec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010bf0:	1a9d      	sublt	r5, r3, r2
 8010bf2:	2300      	movlt	r3, #0
 8010bf4:	e734      	b.n	8010a60 <_dtoa_r+0x720>
 8010bf6:	9e07      	ldr	r6, [sp, #28]
 8010bf8:	9d04      	ldr	r5, [sp, #16]
 8010bfa:	9f08      	ldr	r7, [sp, #32]
 8010bfc:	e73b      	b.n	8010a76 <_dtoa_r+0x736>
 8010bfe:	9a07      	ldr	r2, [sp, #28]
 8010c00:	e767      	b.n	8010ad2 <_dtoa_r+0x792>
 8010c02:	9b06      	ldr	r3, [sp, #24]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	dc18      	bgt.n	8010c3a <_dtoa_r+0x8fa>
 8010c08:	f1ba 0f00 	cmp.w	sl, #0
 8010c0c:	d115      	bne.n	8010c3a <_dtoa_r+0x8fa>
 8010c0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c12:	b993      	cbnz	r3, 8010c3a <_dtoa_r+0x8fa>
 8010c14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c18:	0d1b      	lsrs	r3, r3, #20
 8010c1a:	051b      	lsls	r3, r3, #20
 8010c1c:	b183      	cbz	r3, 8010c40 <_dtoa_r+0x900>
 8010c1e:	9b04      	ldr	r3, [sp, #16]
 8010c20:	3301      	adds	r3, #1
 8010c22:	9304      	str	r3, [sp, #16]
 8010c24:	9b05      	ldr	r3, [sp, #20]
 8010c26:	3301      	adds	r3, #1
 8010c28:	9305      	str	r3, [sp, #20]
 8010c2a:	f04f 0801 	mov.w	r8, #1
 8010c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f47f af6a 	bne.w	8010b0a <_dtoa_r+0x7ca>
 8010c36:	2001      	movs	r0, #1
 8010c38:	e76f      	b.n	8010b1a <_dtoa_r+0x7da>
 8010c3a:	f04f 0800 	mov.w	r8, #0
 8010c3e:	e7f6      	b.n	8010c2e <_dtoa_r+0x8ee>
 8010c40:	4698      	mov	r8, r3
 8010c42:	e7f4      	b.n	8010c2e <_dtoa_r+0x8ee>
 8010c44:	f43f af7d 	beq.w	8010b42 <_dtoa_r+0x802>
 8010c48:	4618      	mov	r0, r3
 8010c4a:	301c      	adds	r0, #28
 8010c4c:	e772      	b.n	8010b34 <_dtoa_r+0x7f4>
 8010c4e:	9b03      	ldr	r3, [sp, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	dc37      	bgt.n	8010cc4 <_dtoa_r+0x984>
 8010c54:	9b06      	ldr	r3, [sp, #24]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	dd34      	ble.n	8010cc4 <_dtoa_r+0x984>
 8010c5a:	9b03      	ldr	r3, [sp, #12]
 8010c5c:	9302      	str	r3, [sp, #8]
 8010c5e:	9b02      	ldr	r3, [sp, #8]
 8010c60:	b96b      	cbnz	r3, 8010c7e <_dtoa_r+0x93e>
 8010c62:	4631      	mov	r1, r6
 8010c64:	2205      	movs	r2, #5
 8010c66:	4620      	mov	r0, r4
 8010c68:	f000 fe3a 	bl	80118e0 <__multadd>
 8010c6c:	4601      	mov	r1, r0
 8010c6e:	4606      	mov	r6, r0
 8010c70:	ee18 0a10 	vmov	r0, s16
 8010c74:	f001 f89e 	bl	8011db4 <__mcmp>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	f73f adbb 	bgt.w	80107f4 <_dtoa_r+0x4b4>
 8010c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c80:	9d01      	ldr	r5, [sp, #4]
 8010c82:	43db      	mvns	r3, r3
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	f04f 0800 	mov.w	r8, #0
 8010c8a:	4631      	mov	r1, r6
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f000 fe05 	bl	801189c <_Bfree>
 8010c92:	2f00      	cmp	r7, #0
 8010c94:	f43f aea4 	beq.w	80109e0 <_dtoa_r+0x6a0>
 8010c98:	f1b8 0f00 	cmp.w	r8, #0
 8010c9c:	d005      	beq.n	8010caa <_dtoa_r+0x96a>
 8010c9e:	45b8      	cmp	r8, r7
 8010ca0:	d003      	beq.n	8010caa <_dtoa_r+0x96a>
 8010ca2:	4641      	mov	r1, r8
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 fdf9 	bl	801189c <_Bfree>
 8010caa:	4639      	mov	r1, r7
 8010cac:	4620      	mov	r0, r4
 8010cae:	f000 fdf5 	bl	801189c <_Bfree>
 8010cb2:	e695      	b.n	80109e0 <_dtoa_r+0x6a0>
 8010cb4:	2600      	movs	r6, #0
 8010cb6:	4637      	mov	r7, r6
 8010cb8:	e7e1      	b.n	8010c7e <_dtoa_r+0x93e>
 8010cba:	9700      	str	r7, [sp, #0]
 8010cbc:	4637      	mov	r7, r6
 8010cbe:	e599      	b.n	80107f4 <_dtoa_r+0x4b4>
 8010cc0:	40240000 	.word	0x40240000
 8010cc4:	9b08      	ldr	r3, [sp, #32]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f000 80ca 	beq.w	8010e60 <_dtoa_r+0xb20>
 8010ccc:	9b03      	ldr	r3, [sp, #12]
 8010cce:	9302      	str	r3, [sp, #8]
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	dd05      	ble.n	8010ce0 <_dtoa_r+0x9a0>
 8010cd4:	4639      	mov	r1, r7
 8010cd6:	462a      	mov	r2, r5
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 fffb 	bl	8011cd4 <__lshift>
 8010cde:	4607      	mov	r7, r0
 8010ce0:	f1b8 0f00 	cmp.w	r8, #0
 8010ce4:	d05b      	beq.n	8010d9e <_dtoa_r+0xa5e>
 8010ce6:	6879      	ldr	r1, [r7, #4]
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f000 fd97 	bl	801181c <_Balloc>
 8010cee:	4605      	mov	r5, r0
 8010cf0:	b928      	cbnz	r0, 8010cfe <_dtoa_r+0x9be>
 8010cf2:	4b87      	ldr	r3, [pc, #540]	; (8010f10 <_dtoa_r+0xbd0>)
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010cfa:	f7ff bb3b 	b.w	8010374 <_dtoa_r+0x34>
 8010cfe:	693a      	ldr	r2, [r7, #16]
 8010d00:	3202      	adds	r2, #2
 8010d02:	0092      	lsls	r2, r2, #2
 8010d04:	f107 010c 	add.w	r1, r7, #12
 8010d08:	300c      	adds	r0, #12
 8010d0a:	f7fd fd42 	bl	800e792 <memcpy>
 8010d0e:	2201      	movs	r2, #1
 8010d10:	4629      	mov	r1, r5
 8010d12:	4620      	mov	r0, r4
 8010d14:	f000 ffde 	bl	8011cd4 <__lshift>
 8010d18:	9b01      	ldr	r3, [sp, #4]
 8010d1a:	f103 0901 	add.w	r9, r3, #1
 8010d1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010d22:	4413      	add	r3, r2
 8010d24:	9305      	str	r3, [sp, #20]
 8010d26:	f00a 0301 	and.w	r3, sl, #1
 8010d2a:	46b8      	mov	r8, r7
 8010d2c:	9304      	str	r3, [sp, #16]
 8010d2e:	4607      	mov	r7, r0
 8010d30:	4631      	mov	r1, r6
 8010d32:	ee18 0a10 	vmov	r0, s16
 8010d36:	f7ff fa75 	bl	8010224 <quorem>
 8010d3a:	4641      	mov	r1, r8
 8010d3c:	9002      	str	r0, [sp, #8]
 8010d3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010d42:	ee18 0a10 	vmov	r0, s16
 8010d46:	f001 f835 	bl	8011db4 <__mcmp>
 8010d4a:	463a      	mov	r2, r7
 8010d4c:	9003      	str	r0, [sp, #12]
 8010d4e:	4631      	mov	r1, r6
 8010d50:	4620      	mov	r0, r4
 8010d52:	f001 f84b 	bl	8011dec <__mdiff>
 8010d56:	68c2      	ldr	r2, [r0, #12]
 8010d58:	f109 3bff 	add.w	fp, r9, #4294967295
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	bb02      	cbnz	r2, 8010da2 <_dtoa_r+0xa62>
 8010d60:	4601      	mov	r1, r0
 8010d62:	ee18 0a10 	vmov	r0, s16
 8010d66:	f001 f825 	bl	8011db4 <__mcmp>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	4620      	mov	r0, r4
 8010d70:	9207      	str	r2, [sp, #28]
 8010d72:	f000 fd93 	bl	801189c <_Bfree>
 8010d76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010d7a:	ea43 0102 	orr.w	r1, r3, r2
 8010d7e:	9b04      	ldr	r3, [sp, #16]
 8010d80:	430b      	orrs	r3, r1
 8010d82:	464d      	mov	r5, r9
 8010d84:	d10f      	bne.n	8010da6 <_dtoa_r+0xa66>
 8010d86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010d8a:	d02a      	beq.n	8010de2 <_dtoa_r+0xaa2>
 8010d8c:	9b03      	ldr	r3, [sp, #12]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	dd02      	ble.n	8010d98 <_dtoa_r+0xa58>
 8010d92:	9b02      	ldr	r3, [sp, #8]
 8010d94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010d98:	f88b a000 	strb.w	sl, [fp]
 8010d9c:	e775      	b.n	8010c8a <_dtoa_r+0x94a>
 8010d9e:	4638      	mov	r0, r7
 8010da0:	e7ba      	b.n	8010d18 <_dtoa_r+0x9d8>
 8010da2:	2201      	movs	r2, #1
 8010da4:	e7e2      	b.n	8010d6c <_dtoa_r+0xa2c>
 8010da6:	9b03      	ldr	r3, [sp, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	db04      	blt.n	8010db6 <_dtoa_r+0xa76>
 8010dac:	9906      	ldr	r1, [sp, #24]
 8010dae:	430b      	orrs	r3, r1
 8010db0:	9904      	ldr	r1, [sp, #16]
 8010db2:	430b      	orrs	r3, r1
 8010db4:	d122      	bne.n	8010dfc <_dtoa_r+0xabc>
 8010db6:	2a00      	cmp	r2, #0
 8010db8:	ddee      	ble.n	8010d98 <_dtoa_r+0xa58>
 8010dba:	ee18 1a10 	vmov	r1, s16
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f000 ff87 	bl	8011cd4 <__lshift>
 8010dc6:	4631      	mov	r1, r6
 8010dc8:	ee08 0a10 	vmov	s16, r0
 8010dcc:	f000 fff2 	bl	8011db4 <__mcmp>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	dc03      	bgt.n	8010ddc <_dtoa_r+0xa9c>
 8010dd4:	d1e0      	bne.n	8010d98 <_dtoa_r+0xa58>
 8010dd6:	f01a 0f01 	tst.w	sl, #1
 8010dda:	d0dd      	beq.n	8010d98 <_dtoa_r+0xa58>
 8010ddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010de0:	d1d7      	bne.n	8010d92 <_dtoa_r+0xa52>
 8010de2:	2339      	movs	r3, #57	; 0x39
 8010de4:	f88b 3000 	strb.w	r3, [fp]
 8010de8:	462b      	mov	r3, r5
 8010dea:	461d      	mov	r5, r3
 8010dec:	3b01      	subs	r3, #1
 8010dee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010df2:	2a39      	cmp	r2, #57	; 0x39
 8010df4:	d071      	beq.n	8010eda <_dtoa_r+0xb9a>
 8010df6:	3201      	adds	r2, #1
 8010df8:	701a      	strb	r2, [r3, #0]
 8010dfa:	e746      	b.n	8010c8a <_dtoa_r+0x94a>
 8010dfc:	2a00      	cmp	r2, #0
 8010dfe:	dd07      	ble.n	8010e10 <_dtoa_r+0xad0>
 8010e00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e04:	d0ed      	beq.n	8010de2 <_dtoa_r+0xaa2>
 8010e06:	f10a 0301 	add.w	r3, sl, #1
 8010e0a:	f88b 3000 	strb.w	r3, [fp]
 8010e0e:	e73c      	b.n	8010c8a <_dtoa_r+0x94a>
 8010e10:	9b05      	ldr	r3, [sp, #20]
 8010e12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010e16:	4599      	cmp	r9, r3
 8010e18:	d047      	beq.n	8010eaa <_dtoa_r+0xb6a>
 8010e1a:	ee18 1a10 	vmov	r1, s16
 8010e1e:	2300      	movs	r3, #0
 8010e20:	220a      	movs	r2, #10
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 fd5c 	bl	80118e0 <__multadd>
 8010e28:	45b8      	cmp	r8, r7
 8010e2a:	ee08 0a10 	vmov	s16, r0
 8010e2e:	f04f 0300 	mov.w	r3, #0
 8010e32:	f04f 020a 	mov.w	r2, #10
 8010e36:	4641      	mov	r1, r8
 8010e38:	4620      	mov	r0, r4
 8010e3a:	d106      	bne.n	8010e4a <_dtoa_r+0xb0a>
 8010e3c:	f000 fd50 	bl	80118e0 <__multadd>
 8010e40:	4680      	mov	r8, r0
 8010e42:	4607      	mov	r7, r0
 8010e44:	f109 0901 	add.w	r9, r9, #1
 8010e48:	e772      	b.n	8010d30 <_dtoa_r+0x9f0>
 8010e4a:	f000 fd49 	bl	80118e0 <__multadd>
 8010e4e:	4639      	mov	r1, r7
 8010e50:	4680      	mov	r8, r0
 8010e52:	2300      	movs	r3, #0
 8010e54:	220a      	movs	r2, #10
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 fd42 	bl	80118e0 <__multadd>
 8010e5c:	4607      	mov	r7, r0
 8010e5e:	e7f1      	b.n	8010e44 <_dtoa_r+0xb04>
 8010e60:	9b03      	ldr	r3, [sp, #12]
 8010e62:	9302      	str	r3, [sp, #8]
 8010e64:	9d01      	ldr	r5, [sp, #4]
 8010e66:	ee18 0a10 	vmov	r0, s16
 8010e6a:	4631      	mov	r1, r6
 8010e6c:	f7ff f9da 	bl	8010224 <quorem>
 8010e70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010e74:	9b01      	ldr	r3, [sp, #4]
 8010e76:	f805 ab01 	strb.w	sl, [r5], #1
 8010e7a:	1aea      	subs	r2, r5, r3
 8010e7c:	9b02      	ldr	r3, [sp, #8]
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	dd09      	ble.n	8010e96 <_dtoa_r+0xb56>
 8010e82:	ee18 1a10 	vmov	r1, s16
 8010e86:	2300      	movs	r3, #0
 8010e88:	220a      	movs	r2, #10
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f000 fd28 	bl	80118e0 <__multadd>
 8010e90:	ee08 0a10 	vmov	s16, r0
 8010e94:	e7e7      	b.n	8010e66 <_dtoa_r+0xb26>
 8010e96:	9b02      	ldr	r3, [sp, #8]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	bfc8      	it	gt
 8010e9c:	461d      	movgt	r5, r3
 8010e9e:	9b01      	ldr	r3, [sp, #4]
 8010ea0:	bfd8      	it	le
 8010ea2:	2501      	movle	r5, #1
 8010ea4:	441d      	add	r5, r3
 8010ea6:	f04f 0800 	mov.w	r8, #0
 8010eaa:	ee18 1a10 	vmov	r1, s16
 8010eae:	2201      	movs	r2, #1
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f000 ff0f 	bl	8011cd4 <__lshift>
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	ee08 0a10 	vmov	s16, r0
 8010ebc:	f000 ff7a 	bl	8011db4 <__mcmp>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	dc91      	bgt.n	8010de8 <_dtoa_r+0xaa8>
 8010ec4:	d102      	bne.n	8010ecc <_dtoa_r+0xb8c>
 8010ec6:	f01a 0f01 	tst.w	sl, #1
 8010eca:	d18d      	bne.n	8010de8 <_dtoa_r+0xaa8>
 8010ecc:	462b      	mov	r3, r5
 8010ece:	461d      	mov	r5, r3
 8010ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ed4:	2a30      	cmp	r2, #48	; 0x30
 8010ed6:	d0fa      	beq.n	8010ece <_dtoa_r+0xb8e>
 8010ed8:	e6d7      	b.n	8010c8a <_dtoa_r+0x94a>
 8010eda:	9a01      	ldr	r2, [sp, #4]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d184      	bne.n	8010dea <_dtoa_r+0xaaa>
 8010ee0:	9b00      	ldr	r3, [sp, #0]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	2331      	movs	r3, #49	; 0x31
 8010ee8:	7013      	strb	r3, [r2, #0]
 8010eea:	e6ce      	b.n	8010c8a <_dtoa_r+0x94a>
 8010eec:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <_dtoa_r+0xbd4>)
 8010eee:	f7ff ba95 	b.w	801041c <_dtoa_r+0xdc>
 8010ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f47f aa6e 	bne.w	80103d6 <_dtoa_r+0x96>
 8010efa:	4b07      	ldr	r3, [pc, #28]	; (8010f18 <_dtoa_r+0xbd8>)
 8010efc:	f7ff ba8e 	b.w	801041c <_dtoa_r+0xdc>
 8010f00:	9b02      	ldr	r3, [sp, #8]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	dcae      	bgt.n	8010e64 <_dtoa_r+0xb24>
 8010f06:	9b06      	ldr	r3, [sp, #24]
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	f73f aea8 	bgt.w	8010c5e <_dtoa_r+0x91e>
 8010f0e:	e7a9      	b.n	8010e64 <_dtoa_r+0xb24>
 8010f10:	08013971 	.word	0x08013971
 8010f14:	080136e4 	.word	0x080136e4
 8010f18:	08013909 	.word	0x08013909

08010f1c <__sflush_r>:
 8010f1c:	898a      	ldrh	r2, [r1, #12]
 8010f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f22:	4605      	mov	r5, r0
 8010f24:	0710      	lsls	r0, r2, #28
 8010f26:	460c      	mov	r4, r1
 8010f28:	d458      	bmi.n	8010fdc <__sflush_r+0xc0>
 8010f2a:	684b      	ldr	r3, [r1, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	dc05      	bgt.n	8010f3c <__sflush_r+0x20>
 8010f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	dc02      	bgt.n	8010f3c <__sflush_r+0x20>
 8010f36:	2000      	movs	r0, #0
 8010f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f3e:	2e00      	cmp	r6, #0
 8010f40:	d0f9      	beq.n	8010f36 <__sflush_r+0x1a>
 8010f42:	2300      	movs	r3, #0
 8010f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f48:	682f      	ldr	r7, [r5, #0]
 8010f4a:	602b      	str	r3, [r5, #0]
 8010f4c:	d032      	beq.n	8010fb4 <__sflush_r+0x98>
 8010f4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	075a      	lsls	r2, r3, #29
 8010f54:	d505      	bpl.n	8010f62 <__sflush_r+0x46>
 8010f56:	6863      	ldr	r3, [r4, #4]
 8010f58:	1ac0      	subs	r0, r0, r3
 8010f5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f5c:	b10b      	cbz	r3, 8010f62 <__sflush_r+0x46>
 8010f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f60:	1ac0      	subs	r0, r0, r3
 8010f62:	2300      	movs	r3, #0
 8010f64:	4602      	mov	r2, r0
 8010f66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f68:	6a21      	ldr	r1, [r4, #32]
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	47b0      	blx	r6
 8010f6e:	1c43      	adds	r3, r0, #1
 8010f70:	89a3      	ldrh	r3, [r4, #12]
 8010f72:	d106      	bne.n	8010f82 <__sflush_r+0x66>
 8010f74:	6829      	ldr	r1, [r5, #0]
 8010f76:	291d      	cmp	r1, #29
 8010f78:	d82c      	bhi.n	8010fd4 <__sflush_r+0xb8>
 8010f7a:	4a2a      	ldr	r2, [pc, #168]	; (8011024 <__sflush_r+0x108>)
 8010f7c:	40ca      	lsrs	r2, r1
 8010f7e:	07d6      	lsls	r6, r2, #31
 8010f80:	d528      	bpl.n	8010fd4 <__sflush_r+0xb8>
 8010f82:	2200      	movs	r2, #0
 8010f84:	6062      	str	r2, [r4, #4]
 8010f86:	04d9      	lsls	r1, r3, #19
 8010f88:	6922      	ldr	r2, [r4, #16]
 8010f8a:	6022      	str	r2, [r4, #0]
 8010f8c:	d504      	bpl.n	8010f98 <__sflush_r+0x7c>
 8010f8e:	1c42      	adds	r2, r0, #1
 8010f90:	d101      	bne.n	8010f96 <__sflush_r+0x7a>
 8010f92:	682b      	ldr	r3, [r5, #0]
 8010f94:	b903      	cbnz	r3, 8010f98 <__sflush_r+0x7c>
 8010f96:	6560      	str	r0, [r4, #84]	; 0x54
 8010f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f9a:	602f      	str	r7, [r5, #0]
 8010f9c:	2900      	cmp	r1, #0
 8010f9e:	d0ca      	beq.n	8010f36 <__sflush_r+0x1a>
 8010fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fa4:	4299      	cmp	r1, r3
 8010fa6:	d002      	beq.n	8010fae <__sflush_r+0x92>
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f001 f90f 	bl	80121cc <_free_r>
 8010fae:	2000      	movs	r0, #0
 8010fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8010fb2:	e7c1      	b.n	8010f38 <__sflush_r+0x1c>
 8010fb4:	6a21      	ldr	r1, [r4, #32]
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	4628      	mov	r0, r5
 8010fba:	47b0      	blx	r6
 8010fbc:	1c41      	adds	r1, r0, #1
 8010fbe:	d1c7      	bne.n	8010f50 <__sflush_r+0x34>
 8010fc0:	682b      	ldr	r3, [r5, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0c4      	beq.n	8010f50 <__sflush_r+0x34>
 8010fc6:	2b1d      	cmp	r3, #29
 8010fc8:	d001      	beq.n	8010fce <__sflush_r+0xb2>
 8010fca:	2b16      	cmp	r3, #22
 8010fcc:	d101      	bne.n	8010fd2 <__sflush_r+0xb6>
 8010fce:	602f      	str	r7, [r5, #0]
 8010fd0:	e7b1      	b.n	8010f36 <__sflush_r+0x1a>
 8010fd2:	89a3      	ldrh	r3, [r4, #12]
 8010fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fd8:	81a3      	strh	r3, [r4, #12]
 8010fda:	e7ad      	b.n	8010f38 <__sflush_r+0x1c>
 8010fdc:	690f      	ldr	r7, [r1, #16]
 8010fde:	2f00      	cmp	r7, #0
 8010fe0:	d0a9      	beq.n	8010f36 <__sflush_r+0x1a>
 8010fe2:	0793      	lsls	r3, r2, #30
 8010fe4:	680e      	ldr	r6, [r1, #0]
 8010fe6:	bf08      	it	eq
 8010fe8:	694b      	ldreq	r3, [r1, #20]
 8010fea:	600f      	str	r7, [r1, #0]
 8010fec:	bf18      	it	ne
 8010fee:	2300      	movne	r3, #0
 8010ff0:	eba6 0807 	sub.w	r8, r6, r7
 8010ff4:	608b      	str	r3, [r1, #8]
 8010ff6:	f1b8 0f00 	cmp.w	r8, #0
 8010ffa:	dd9c      	ble.n	8010f36 <__sflush_r+0x1a>
 8010ffc:	6a21      	ldr	r1, [r4, #32]
 8010ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011000:	4643      	mov	r3, r8
 8011002:	463a      	mov	r2, r7
 8011004:	4628      	mov	r0, r5
 8011006:	47b0      	blx	r6
 8011008:	2800      	cmp	r0, #0
 801100a:	dc06      	bgt.n	801101a <__sflush_r+0xfe>
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011012:	81a3      	strh	r3, [r4, #12]
 8011014:	f04f 30ff 	mov.w	r0, #4294967295
 8011018:	e78e      	b.n	8010f38 <__sflush_r+0x1c>
 801101a:	4407      	add	r7, r0
 801101c:	eba8 0800 	sub.w	r8, r8, r0
 8011020:	e7e9      	b.n	8010ff6 <__sflush_r+0xda>
 8011022:	bf00      	nop
 8011024:	20400001 	.word	0x20400001

08011028 <_fflush_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	690b      	ldr	r3, [r1, #16]
 801102c:	4605      	mov	r5, r0
 801102e:	460c      	mov	r4, r1
 8011030:	b913      	cbnz	r3, 8011038 <_fflush_r+0x10>
 8011032:	2500      	movs	r5, #0
 8011034:	4628      	mov	r0, r5
 8011036:	bd38      	pop	{r3, r4, r5, pc}
 8011038:	b118      	cbz	r0, 8011042 <_fflush_r+0x1a>
 801103a:	6983      	ldr	r3, [r0, #24]
 801103c:	b90b      	cbnz	r3, 8011042 <_fflush_r+0x1a>
 801103e:	f7fd fae3 	bl	800e608 <__sinit>
 8011042:	4b14      	ldr	r3, [pc, #80]	; (8011094 <_fflush_r+0x6c>)
 8011044:	429c      	cmp	r4, r3
 8011046:	d11b      	bne.n	8011080 <_fflush_r+0x58>
 8011048:	686c      	ldr	r4, [r5, #4]
 801104a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d0ef      	beq.n	8011032 <_fflush_r+0xa>
 8011052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011054:	07d0      	lsls	r0, r2, #31
 8011056:	d404      	bmi.n	8011062 <_fflush_r+0x3a>
 8011058:	0599      	lsls	r1, r3, #22
 801105a:	d402      	bmi.n	8011062 <_fflush_r+0x3a>
 801105c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801105e:	f7fd fb96 	bl	800e78e <__retarget_lock_acquire_recursive>
 8011062:	4628      	mov	r0, r5
 8011064:	4621      	mov	r1, r4
 8011066:	f7ff ff59 	bl	8010f1c <__sflush_r>
 801106a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801106c:	07da      	lsls	r2, r3, #31
 801106e:	4605      	mov	r5, r0
 8011070:	d4e0      	bmi.n	8011034 <_fflush_r+0xc>
 8011072:	89a3      	ldrh	r3, [r4, #12]
 8011074:	059b      	lsls	r3, r3, #22
 8011076:	d4dd      	bmi.n	8011034 <_fflush_r+0xc>
 8011078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801107a:	f7fd fb89 	bl	800e790 <__retarget_lock_release_recursive>
 801107e:	e7d9      	b.n	8011034 <_fflush_r+0xc>
 8011080:	4b05      	ldr	r3, [pc, #20]	; (8011098 <_fflush_r+0x70>)
 8011082:	429c      	cmp	r4, r3
 8011084:	d101      	bne.n	801108a <_fflush_r+0x62>
 8011086:	68ac      	ldr	r4, [r5, #8]
 8011088:	e7df      	b.n	801104a <_fflush_r+0x22>
 801108a:	4b04      	ldr	r3, [pc, #16]	; (801109c <_fflush_r+0x74>)
 801108c:	429c      	cmp	r4, r3
 801108e:	bf08      	it	eq
 8011090:	68ec      	ldreq	r4, [r5, #12]
 8011092:	e7da      	b.n	801104a <_fflush_r+0x22>
 8011094:	08013690 	.word	0x08013690
 8011098:	080136b0 	.word	0x080136b0
 801109c:	08013670 	.word	0x08013670

080110a0 <fiprintf>:
 80110a0:	b40e      	push	{r1, r2, r3}
 80110a2:	b503      	push	{r0, r1, lr}
 80110a4:	4601      	mov	r1, r0
 80110a6:	ab03      	add	r3, sp, #12
 80110a8:	4805      	ldr	r0, [pc, #20]	; (80110c0 <fiprintf+0x20>)
 80110aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ae:	6800      	ldr	r0, [r0, #0]
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	f001 fa5d 	bl	8012570 <_vfiprintf_r>
 80110b6:	b002      	add	sp, #8
 80110b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110bc:	b003      	add	sp, #12
 80110be:	4770      	bx	lr
 80110c0:	20000014 	.word	0x20000014

080110c4 <rshift>:
 80110c4:	6903      	ldr	r3, [r0, #16]
 80110c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80110ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80110d2:	f100 0414 	add.w	r4, r0, #20
 80110d6:	dd45      	ble.n	8011164 <rshift+0xa0>
 80110d8:	f011 011f 	ands.w	r1, r1, #31
 80110dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80110e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80110e4:	d10c      	bne.n	8011100 <rshift+0x3c>
 80110e6:	f100 0710 	add.w	r7, r0, #16
 80110ea:	4629      	mov	r1, r5
 80110ec:	42b1      	cmp	r1, r6
 80110ee:	d334      	bcc.n	801115a <rshift+0x96>
 80110f0:	1a9b      	subs	r3, r3, r2
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	1eea      	subs	r2, r5, #3
 80110f6:	4296      	cmp	r6, r2
 80110f8:	bf38      	it	cc
 80110fa:	2300      	movcc	r3, #0
 80110fc:	4423      	add	r3, r4
 80110fe:	e015      	b.n	801112c <rshift+0x68>
 8011100:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011104:	f1c1 0820 	rsb	r8, r1, #32
 8011108:	40cf      	lsrs	r7, r1
 801110a:	f105 0e04 	add.w	lr, r5, #4
 801110e:	46a1      	mov	r9, r4
 8011110:	4576      	cmp	r6, lr
 8011112:	46f4      	mov	ip, lr
 8011114:	d815      	bhi.n	8011142 <rshift+0x7e>
 8011116:	1a9a      	subs	r2, r3, r2
 8011118:	0092      	lsls	r2, r2, #2
 801111a:	3a04      	subs	r2, #4
 801111c:	3501      	adds	r5, #1
 801111e:	42ae      	cmp	r6, r5
 8011120:	bf38      	it	cc
 8011122:	2200      	movcc	r2, #0
 8011124:	18a3      	adds	r3, r4, r2
 8011126:	50a7      	str	r7, [r4, r2]
 8011128:	b107      	cbz	r7, 801112c <rshift+0x68>
 801112a:	3304      	adds	r3, #4
 801112c:	1b1a      	subs	r2, r3, r4
 801112e:	42a3      	cmp	r3, r4
 8011130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011134:	bf08      	it	eq
 8011136:	2300      	moveq	r3, #0
 8011138:	6102      	str	r2, [r0, #16]
 801113a:	bf08      	it	eq
 801113c:	6143      	streq	r3, [r0, #20]
 801113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011142:	f8dc c000 	ldr.w	ip, [ip]
 8011146:	fa0c fc08 	lsl.w	ip, ip, r8
 801114a:	ea4c 0707 	orr.w	r7, ip, r7
 801114e:	f849 7b04 	str.w	r7, [r9], #4
 8011152:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011156:	40cf      	lsrs	r7, r1
 8011158:	e7da      	b.n	8011110 <rshift+0x4c>
 801115a:	f851 cb04 	ldr.w	ip, [r1], #4
 801115e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011162:	e7c3      	b.n	80110ec <rshift+0x28>
 8011164:	4623      	mov	r3, r4
 8011166:	e7e1      	b.n	801112c <rshift+0x68>

08011168 <__hexdig_fun>:
 8011168:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801116c:	2b09      	cmp	r3, #9
 801116e:	d802      	bhi.n	8011176 <__hexdig_fun+0xe>
 8011170:	3820      	subs	r0, #32
 8011172:	b2c0      	uxtb	r0, r0
 8011174:	4770      	bx	lr
 8011176:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801117a:	2b05      	cmp	r3, #5
 801117c:	d801      	bhi.n	8011182 <__hexdig_fun+0x1a>
 801117e:	3847      	subs	r0, #71	; 0x47
 8011180:	e7f7      	b.n	8011172 <__hexdig_fun+0xa>
 8011182:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011186:	2b05      	cmp	r3, #5
 8011188:	d801      	bhi.n	801118e <__hexdig_fun+0x26>
 801118a:	3827      	subs	r0, #39	; 0x27
 801118c:	e7f1      	b.n	8011172 <__hexdig_fun+0xa>
 801118e:	2000      	movs	r0, #0
 8011190:	4770      	bx	lr
	...

08011194 <__gethex>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	ed2d 8b02 	vpush	{d8}
 801119c:	b089      	sub	sp, #36	; 0x24
 801119e:	ee08 0a10 	vmov	s16, r0
 80111a2:	9304      	str	r3, [sp, #16]
 80111a4:	4bb4      	ldr	r3, [pc, #720]	; (8011478 <__gethex+0x2e4>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	9301      	str	r3, [sp, #4]
 80111aa:	4618      	mov	r0, r3
 80111ac:	468b      	mov	fp, r1
 80111ae:	4690      	mov	r8, r2
 80111b0:	f7ef f820 	bl	80001f4 <strlen>
 80111b4:	9b01      	ldr	r3, [sp, #4]
 80111b6:	f8db 2000 	ldr.w	r2, [fp]
 80111ba:	4403      	add	r3, r0
 80111bc:	4682      	mov	sl, r0
 80111be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80111c2:	9305      	str	r3, [sp, #20]
 80111c4:	1c93      	adds	r3, r2, #2
 80111c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80111ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80111ce:	32fe      	adds	r2, #254	; 0xfe
 80111d0:	18d1      	adds	r1, r2, r3
 80111d2:	461f      	mov	r7, r3
 80111d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80111d8:	9100      	str	r1, [sp, #0]
 80111da:	2830      	cmp	r0, #48	; 0x30
 80111dc:	d0f8      	beq.n	80111d0 <__gethex+0x3c>
 80111de:	f7ff ffc3 	bl	8011168 <__hexdig_fun>
 80111e2:	4604      	mov	r4, r0
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d13a      	bne.n	801125e <__gethex+0xca>
 80111e8:	9901      	ldr	r1, [sp, #4]
 80111ea:	4652      	mov	r2, sl
 80111ec:	4638      	mov	r0, r7
 80111ee:	f001 fb0b 	bl	8012808 <strncmp>
 80111f2:	4605      	mov	r5, r0
 80111f4:	2800      	cmp	r0, #0
 80111f6:	d168      	bne.n	80112ca <__gethex+0x136>
 80111f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80111fc:	eb07 060a 	add.w	r6, r7, sl
 8011200:	f7ff ffb2 	bl	8011168 <__hexdig_fun>
 8011204:	2800      	cmp	r0, #0
 8011206:	d062      	beq.n	80112ce <__gethex+0x13a>
 8011208:	4633      	mov	r3, r6
 801120a:	7818      	ldrb	r0, [r3, #0]
 801120c:	2830      	cmp	r0, #48	; 0x30
 801120e:	461f      	mov	r7, r3
 8011210:	f103 0301 	add.w	r3, r3, #1
 8011214:	d0f9      	beq.n	801120a <__gethex+0x76>
 8011216:	f7ff ffa7 	bl	8011168 <__hexdig_fun>
 801121a:	2301      	movs	r3, #1
 801121c:	fab0 f480 	clz	r4, r0
 8011220:	0964      	lsrs	r4, r4, #5
 8011222:	4635      	mov	r5, r6
 8011224:	9300      	str	r3, [sp, #0]
 8011226:	463a      	mov	r2, r7
 8011228:	4616      	mov	r6, r2
 801122a:	3201      	adds	r2, #1
 801122c:	7830      	ldrb	r0, [r6, #0]
 801122e:	f7ff ff9b 	bl	8011168 <__hexdig_fun>
 8011232:	2800      	cmp	r0, #0
 8011234:	d1f8      	bne.n	8011228 <__gethex+0x94>
 8011236:	9901      	ldr	r1, [sp, #4]
 8011238:	4652      	mov	r2, sl
 801123a:	4630      	mov	r0, r6
 801123c:	f001 fae4 	bl	8012808 <strncmp>
 8011240:	b980      	cbnz	r0, 8011264 <__gethex+0xd0>
 8011242:	b94d      	cbnz	r5, 8011258 <__gethex+0xc4>
 8011244:	eb06 050a 	add.w	r5, r6, sl
 8011248:	462a      	mov	r2, r5
 801124a:	4616      	mov	r6, r2
 801124c:	3201      	adds	r2, #1
 801124e:	7830      	ldrb	r0, [r6, #0]
 8011250:	f7ff ff8a 	bl	8011168 <__hexdig_fun>
 8011254:	2800      	cmp	r0, #0
 8011256:	d1f8      	bne.n	801124a <__gethex+0xb6>
 8011258:	1bad      	subs	r5, r5, r6
 801125a:	00ad      	lsls	r5, r5, #2
 801125c:	e004      	b.n	8011268 <__gethex+0xd4>
 801125e:	2400      	movs	r4, #0
 8011260:	4625      	mov	r5, r4
 8011262:	e7e0      	b.n	8011226 <__gethex+0x92>
 8011264:	2d00      	cmp	r5, #0
 8011266:	d1f7      	bne.n	8011258 <__gethex+0xc4>
 8011268:	7833      	ldrb	r3, [r6, #0]
 801126a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801126e:	2b50      	cmp	r3, #80	; 0x50
 8011270:	d13b      	bne.n	80112ea <__gethex+0x156>
 8011272:	7873      	ldrb	r3, [r6, #1]
 8011274:	2b2b      	cmp	r3, #43	; 0x2b
 8011276:	d02c      	beq.n	80112d2 <__gethex+0x13e>
 8011278:	2b2d      	cmp	r3, #45	; 0x2d
 801127a:	d02e      	beq.n	80112da <__gethex+0x146>
 801127c:	1c71      	adds	r1, r6, #1
 801127e:	f04f 0900 	mov.w	r9, #0
 8011282:	7808      	ldrb	r0, [r1, #0]
 8011284:	f7ff ff70 	bl	8011168 <__hexdig_fun>
 8011288:	1e43      	subs	r3, r0, #1
 801128a:	b2db      	uxtb	r3, r3
 801128c:	2b18      	cmp	r3, #24
 801128e:	d82c      	bhi.n	80112ea <__gethex+0x156>
 8011290:	f1a0 0210 	sub.w	r2, r0, #16
 8011294:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011298:	f7ff ff66 	bl	8011168 <__hexdig_fun>
 801129c:	1e43      	subs	r3, r0, #1
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	2b18      	cmp	r3, #24
 80112a2:	d91d      	bls.n	80112e0 <__gethex+0x14c>
 80112a4:	f1b9 0f00 	cmp.w	r9, #0
 80112a8:	d000      	beq.n	80112ac <__gethex+0x118>
 80112aa:	4252      	negs	r2, r2
 80112ac:	4415      	add	r5, r2
 80112ae:	f8cb 1000 	str.w	r1, [fp]
 80112b2:	b1e4      	cbz	r4, 80112ee <__gethex+0x15a>
 80112b4:	9b00      	ldr	r3, [sp, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	bf14      	ite	ne
 80112ba:	2700      	movne	r7, #0
 80112bc:	2706      	moveq	r7, #6
 80112be:	4638      	mov	r0, r7
 80112c0:	b009      	add	sp, #36	; 0x24
 80112c2:	ecbd 8b02 	vpop	{d8}
 80112c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ca:	463e      	mov	r6, r7
 80112cc:	4625      	mov	r5, r4
 80112ce:	2401      	movs	r4, #1
 80112d0:	e7ca      	b.n	8011268 <__gethex+0xd4>
 80112d2:	f04f 0900 	mov.w	r9, #0
 80112d6:	1cb1      	adds	r1, r6, #2
 80112d8:	e7d3      	b.n	8011282 <__gethex+0xee>
 80112da:	f04f 0901 	mov.w	r9, #1
 80112de:	e7fa      	b.n	80112d6 <__gethex+0x142>
 80112e0:	230a      	movs	r3, #10
 80112e2:	fb03 0202 	mla	r2, r3, r2, r0
 80112e6:	3a10      	subs	r2, #16
 80112e8:	e7d4      	b.n	8011294 <__gethex+0x100>
 80112ea:	4631      	mov	r1, r6
 80112ec:	e7df      	b.n	80112ae <__gethex+0x11a>
 80112ee:	1bf3      	subs	r3, r6, r7
 80112f0:	3b01      	subs	r3, #1
 80112f2:	4621      	mov	r1, r4
 80112f4:	2b07      	cmp	r3, #7
 80112f6:	dc0b      	bgt.n	8011310 <__gethex+0x17c>
 80112f8:	ee18 0a10 	vmov	r0, s16
 80112fc:	f000 fa8e 	bl	801181c <_Balloc>
 8011300:	4604      	mov	r4, r0
 8011302:	b940      	cbnz	r0, 8011316 <__gethex+0x182>
 8011304:	4b5d      	ldr	r3, [pc, #372]	; (801147c <__gethex+0x2e8>)
 8011306:	4602      	mov	r2, r0
 8011308:	21de      	movs	r1, #222	; 0xde
 801130a:	485d      	ldr	r0, [pc, #372]	; (8011480 <__gethex+0x2ec>)
 801130c:	f7fe ff5c 	bl	80101c8 <__assert_func>
 8011310:	3101      	adds	r1, #1
 8011312:	105b      	asrs	r3, r3, #1
 8011314:	e7ee      	b.n	80112f4 <__gethex+0x160>
 8011316:	f100 0914 	add.w	r9, r0, #20
 801131a:	f04f 0b00 	mov.w	fp, #0
 801131e:	f1ca 0301 	rsb	r3, sl, #1
 8011322:	f8cd 9008 	str.w	r9, [sp, #8]
 8011326:	f8cd b000 	str.w	fp, [sp]
 801132a:	9306      	str	r3, [sp, #24]
 801132c:	42b7      	cmp	r7, r6
 801132e:	d340      	bcc.n	80113b2 <__gethex+0x21e>
 8011330:	9802      	ldr	r0, [sp, #8]
 8011332:	9b00      	ldr	r3, [sp, #0]
 8011334:	f840 3b04 	str.w	r3, [r0], #4
 8011338:	eba0 0009 	sub.w	r0, r0, r9
 801133c:	1080      	asrs	r0, r0, #2
 801133e:	0146      	lsls	r6, r0, #5
 8011340:	6120      	str	r0, [r4, #16]
 8011342:	4618      	mov	r0, r3
 8011344:	f000 fb5c 	bl	8011a00 <__hi0bits>
 8011348:	1a30      	subs	r0, r6, r0
 801134a:	f8d8 6000 	ldr.w	r6, [r8]
 801134e:	42b0      	cmp	r0, r6
 8011350:	dd63      	ble.n	801141a <__gethex+0x286>
 8011352:	1b87      	subs	r7, r0, r6
 8011354:	4639      	mov	r1, r7
 8011356:	4620      	mov	r0, r4
 8011358:	f000 ff00 	bl	801215c <__any_on>
 801135c:	4682      	mov	sl, r0
 801135e:	b1a8      	cbz	r0, 801138c <__gethex+0x1f8>
 8011360:	1e7b      	subs	r3, r7, #1
 8011362:	1159      	asrs	r1, r3, #5
 8011364:	f003 021f 	and.w	r2, r3, #31
 8011368:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801136c:	f04f 0a01 	mov.w	sl, #1
 8011370:	fa0a f202 	lsl.w	r2, sl, r2
 8011374:	420a      	tst	r2, r1
 8011376:	d009      	beq.n	801138c <__gethex+0x1f8>
 8011378:	4553      	cmp	r3, sl
 801137a:	dd05      	ble.n	8011388 <__gethex+0x1f4>
 801137c:	1eb9      	subs	r1, r7, #2
 801137e:	4620      	mov	r0, r4
 8011380:	f000 feec 	bl	801215c <__any_on>
 8011384:	2800      	cmp	r0, #0
 8011386:	d145      	bne.n	8011414 <__gethex+0x280>
 8011388:	f04f 0a02 	mov.w	sl, #2
 801138c:	4639      	mov	r1, r7
 801138e:	4620      	mov	r0, r4
 8011390:	f7ff fe98 	bl	80110c4 <rshift>
 8011394:	443d      	add	r5, r7
 8011396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801139a:	42ab      	cmp	r3, r5
 801139c:	da4c      	bge.n	8011438 <__gethex+0x2a4>
 801139e:	ee18 0a10 	vmov	r0, s16
 80113a2:	4621      	mov	r1, r4
 80113a4:	f000 fa7a 	bl	801189c <_Bfree>
 80113a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80113aa:	2300      	movs	r3, #0
 80113ac:	6013      	str	r3, [r2, #0]
 80113ae:	27a3      	movs	r7, #163	; 0xa3
 80113b0:	e785      	b.n	80112be <__gethex+0x12a>
 80113b2:	1e73      	subs	r3, r6, #1
 80113b4:	9a05      	ldr	r2, [sp, #20]
 80113b6:	9303      	str	r3, [sp, #12]
 80113b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80113bc:	4293      	cmp	r3, r2
 80113be:	d019      	beq.n	80113f4 <__gethex+0x260>
 80113c0:	f1bb 0f20 	cmp.w	fp, #32
 80113c4:	d107      	bne.n	80113d6 <__gethex+0x242>
 80113c6:	9b02      	ldr	r3, [sp, #8]
 80113c8:	9a00      	ldr	r2, [sp, #0]
 80113ca:	f843 2b04 	str.w	r2, [r3], #4
 80113ce:	9302      	str	r3, [sp, #8]
 80113d0:	2300      	movs	r3, #0
 80113d2:	9300      	str	r3, [sp, #0]
 80113d4:	469b      	mov	fp, r3
 80113d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80113da:	f7ff fec5 	bl	8011168 <__hexdig_fun>
 80113de:	9b00      	ldr	r3, [sp, #0]
 80113e0:	f000 000f 	and.w	r0, r0, #15
 80113e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80113e8:	4303      	orrs	r3, r0
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	f10b 0b04 	add.w	fp, fp, #4
 80113f0:	9b03      	ldr	r3, [sp, #12]
 80113f2:	e00d      	b.n	8011410 <__gethex+0x27c>
 80113f4:	9b03      	ldr	r3, [sp, #12]
 80113f6:	9a06      	ldr	r2, [sp, #24]
 80113f8:	4413      	add	r3, r2
 80113fa:	42bb      	cmp	r3, r7
 80113fc:	d3e0      	bcc.n	80113c0 <__gethex+0x22c>
 80113fe:	4618      	mov	r0, r3
 8011400:	9901      	ldr	r1, [sp, #4]
 8011402:	9307      	str	r3, [sp, #28]
 8011404:	4652      	mov	r2, sl
 8011406:	f001 f9ff 	bl	8012808 <strncmp>
 801140a:	9b07      	ldr	r3, [sp, #28]
 801140c:	2800      	cmp	r0, #0
 801140e:	d1d7      	bne.n	80113c0 <__gethex+0x22c>
 8011410:	461e      	mov	r6, r3
 8011412:	e78b      	b.n	801132c <__gethex+0x198>
 8011414:	f04f 0a03 	mov.w	sl, #3
 8011418:	e7b8      	b.n	801138c <__gethex+0x1f8>
 801141a:	da0a      	bge.n	8011432 <__gethex+0x29e>
 801141c:	1a37      	subs	r7, r6, r0
 801141e:	4621      	mov	r1, r4
 8011420:	ee18 0a10 	vmov	r0, s16
 8011424:	463a      	mov	r2, r7
 8011426:	f000 fc55 	bl	8011cd4 <__lshift>
 801142a:	1bed      	subs	r5, r5, r7
 801142c:	4604      	mov	r4, r0
 801142e:	f100 0914 	add.w	r9, r0, #20
 8011432:	f04f 0a00 	mov.w	sl, #0
 8011436:	e7ae      	b.n	8011396 <__gethex+0x202>
 8011438:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801143c:	42a8      	cmp	r0, r5
 801143e:	dd72      	ble.n	8011526 <__gethex+0x392>
 8011440:	1b45      	subs	r5, r0, r5
 8011442:	42ae      	cmp	r6, r5
 8011444:	dc36      	bgt.n	80114b4 <__gethex+0x320>
 8011446:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801144a:	2b02      	cmp	r3, #2
 801144c:	d02a      	beq.n	80114a4 <__gethex+0x310>
 801144e:	2b03      	cmp	r3, #3
 8011450:	d02c      	beq.n	80114ac <__gethex+0x318>
 8011452:	2b01      	cmp	r3, #1
 8011454:	d11c      	bne.n	8011490 <__gethex+0x2fc>
 8011456:	42ae      	cmp	r6, r5
 8011458:	d11a      	bne.n	8011490 <__gethex+0x2fc>
 801145a:	2e01      	cmp	r6, #1
 801145c:	d112      	bne.n	8011484 <__gethex+0x2f0>
 801145e:	9a04      	ldr	r2, [sp, #16]
 8011460:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011464:	6013      	str	r3, [r2, #0]
 8011466:	2301      	movs	r3, #1
 8011468:	6123      	str	r3, [r4, #16]
 801146a:	f8c9 3000 	str.w	r3, [r9]
 801146e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011470:	2762      	movs	r7, #98	; 0x62
 8011472:	601c      	str	r4, [r3, #0]
 8011474:	e723      	b.n	80112be <__gethex+0x12a>
 8011476:	bf00      	nop
 8011478:	080139e8 	.word	0x080139e8
 801147c:	08013971 	.word	0x08013971
 8011480:	08013982 	.word	0x08013982
 8011484:	1e71      	subs	r1, r6, #1
 8011486:	4620      	mov	r0, r4
 8011488:	f000 fe68 	bl	801215c <__any_on>
 801148c:	2800      	cmp	r0, #0
 801148e:	d1e6      	bne.n	801145e <__gethex+0x2ca>
 8011490:	ee18 0a10 	vmov	r0, s16
 8011494:	4621      	mov	r1, r4
 8011496:	f000 fa01 	bl	801189c <_Bfree>
 801149a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801149c:	2300      	movs	r3, #0
 801149e:	6013      	str	r3, [r2, #0]
 80114a0:	2750      	movs	r7, #80	; 0x50
 80114a2:	e70c      	b.n	80112be <__gethex+0x12a>
 80114a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1f2      	bne.n	8011490 <__gethex+0x2fc>
 80114aa:	e7d8      	b.n	801145e <__gethex+0x2ca>
 80114ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1d5      	bne.n	801145e <__gethex+0x2ca>
 80114b2:	e7ed      	b.n	8011490 <__gethex+0x2fc>
 80114b4:	1e6f      	subs	r7, r5, #1
 80114b6:	f1ba 0f00 	cmp.w	sl, #0
 80114ba:	d131      	bne.n	8011520 <__gethex+0x38c>
 80114bc:	b127      	cbz	r7, 80114c8 <__gethex+0x334>
 80114be:	4639      	mov	r1, r7
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fe4b 	bl	801215c <__any_on>
 80114c6:	4682      	mov	sl, r0
 80114c8:	117b      	asrs	r3, r7, #5
 80114ca:	2101      	movs	r1, #1
 80114cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80114d0:	f007 071f 	and.w	r7, r7, #31
 80114d4:	fa01 f707 	lsl.w	r7, r1, r7
 80114d8:	421f      	tst	r7, r3
 80114da:	4629      	mov	r1, r5
 80114dc:	4620      	mov	r0, r4
 80114de:	bf18      	it	ne
 80114e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80114e4:	1b76      	subs	r6, r6, r5
 80114e6:	f7ff fded 	bl	80110c4 <rshift>
 80114ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80114ee:	2702      	movs	r7, #2
 80114f0:	f1ba 0f00 	cmp.w	sl, #0
 80114f4:	d048      	beq.n	8011588 <__gethex+0x3f4>
 80114f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d015      	beq.n	801152a <__gethex+0x396>
 80114fe:	2b03      	cmp	r3, #3
 8011500:	d017      	beq.n	8011532 <__gethex+0x39e>
 8011502:	2b01      	cmp	r3, #1
 8011504:	d109      	bne.n	801151a <__gethex+0x386>
 8011506:	f01a 0f02 	tst.w	sl, #2
 801150a:	d006      	beq.n	801151a <__gethex+0x386>
 801150c:	f8d9 0000 	ldr.w	r0, [r9]
 8011510:	ea4a 0a00 	orr.w	sl, sl, r0
 8011514:	f01a 0f01 	tst.w	sl, #1
 8011518:	d10e      	bne.n	8011538 <__gethex+0x3a4>
 801151a:	f047 0710 	orr.w	r7, r7, #16
 801151e:	e033      	b.n	8011588 <__gethex+0x3f4>
 8011520:	f04f 0a01 	mov.w	sl, #1
 8011524:	e7d0      	b.n	80114c8 <__gethex+0x334>
 8011526:	2701      	movs	r7, #1
 8011528:	e7e2      	b.n	80114f0 <__gethex+0x35c>
 801152a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801152c:	f1c3 0301 	rsb	r3, r3, #1
 8011530:	9315      	str	r3, [sp, #84]	; 0x54
 8011532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011534:	2b00      	cmp	r3, #0
 8011536:	d0f0      	beq.n	801151a <__gethex+0x386>
 8011538:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801153c:	f104 0314 	add.w	r3, r4, #20
 8011540:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011544:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011548:	f04f 0c00 	mov.w	ip, #0
 801154c:	4618      	mov	r0, r3
 801154e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011552:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011556:	d01c      	beq.n	8011592 <__gethex+0x3fe>
 8011558:	3201      	adds	r2, #1
 801155a:	6002      	str	r2, [r0, #0]
 801155c:	2f02      	cmp	r7, #2
 801155e:	f104 0314 	add.w	r3, r4, #20
 8011562:	d13f      	bne.n	80115e4 <__gethex+0x450>
 8011564:	f8d8 2000 	ldr.w	r2, [r8]
 8011568:	3a01      	subs	r2, #1
 801156a:	42b2      	cmp	r2, r6
 801156c:	d10a      	bne.n	8011584 <__gethex+0x3f0>
 801156e:	1171      	asrs	r1, r6, #5
 8011570:	2201      	movs	r2, #1
 8011572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011576:	f006 061f 	and.w	r6, r6, #31
 801157a:	fa02 f606 	lsl.w	r6, r2, r6
 801157e:	421e      	tst	r6, r3
 8011580:	bf18      	it	ne
 8011582:	4617      	movne	r7, r2
 8011584:	f047 0720 	orr.w	r7, r7, #32
 8011588:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801158a:	601c      	str	r4, [r3, #0]
 801158c:	9b04      	ldr	r3, [sp, #16]
 801158e:	601d      	str	r5, [r3, #0]
 8011590:	e695      	b.n	80112be <__gethex+0x12a>
 8011592:	4299      	cmp	r1, r3
 8011594:	f843 cc04 	str.w	ip, [r3, #-4]
 8011598:	d8d8      	bhi.n	801154c <__gethex+0x3b8>
 801159a:	68a3      	ldr	r3, [r4, #8]
 801159c:	459b      	cmp	fp, r3
 801159e:	db19      	blt.n	80115d4 <__gethex+0x440>
 80115a0:	6861      	ldr	r1, [r4, #4]
 80115a2:	ee18 0a10 	vmov	r0, s16
 80115a6:	3101      	adds	r1, #1
 80115a8:	f000 f938 	bl	801181c <_Balloc>
 80115ac:	4681      	mov	r9, r0
 80115ae:	b918      	cbnz	r0, 80115b8 <__gethex+0x424>
 80115b0:	4b1a      	ldr	r3, [pc, #104]	; (801161c <__gethex+0x488>)
 80115b2:	4602      	mov	r2, r0
 80115b4:	2184      	movs	r1, #132	; 0x84
 80115b6:	e6a8      	b.n	801130a <__gethex+0x176>
 80115b8:	6922      	ldr	r2, [r4, #16]
 80115ba:	3202      	adds	r2, #2
 80115bc:	f104 010c 	add.w	r1, r4, #12
 80115c0:	0092      	lsls	r2, r2, #2
 80115c2:	300c      	adds	r0, #12
 80115c4:	f7fd f8e5 	bl	800e792 <memcpy>
 80115c8:	4621      	mov	r1, r4
 80115ca:	ee18 0a10 	vmov	r0, s16
 80115ce:	f000 f965 	bl	801189c <_Bfree>
 80115d2:	464c      	mov	r4, r9
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	1c5a      	adds	r2, r3, #1
 80115d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115dc:	6122      	str	r2, [r4, #16]
 80115de:	2201      	movs	r2, #1
 80115e0:	615a      	str	r2, [r3, #20]
 80115e2:	e7bb      	b.n	801155c <__gethex+0x3c8>
 80115e4:	6922      	ldr	r2, [r4, #16]
 80115e6:	455a      	cmp	r2, fp
 80115e8:	dd0b      	ble.n	8011602 <__gethex+0x46e>
 80115ea:	2101      	movs	r1, #1
 80115ec:	4620      	mov	r0, r4
 80115ee:	f7ff fd69 	bl	80110c4 <rshift>
 80115f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115f6:	3501      	adds	r5, #1
 80115f8:	42ab      	cmp	r3, r5
 80115fa:	f6ff aed0 	blt.w	801139e <__gethex+0x20a>
 80115fe:	2701      	movs	r7, #1
 8011600:	e7c0      	b.n	8011584 <__gethex+0x3f0>
 8011602:	f016 061f 	ands.w	r6, r6, #31
 8011606:	d0fa      	beq.n	80115fe <__gethex+0x46a>
 8011608:	4453      	add	r3, sl
 801160a:	f1c6 0620 	rsb	r6, r6, #32
 801160e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011612:	f000 f9f5 	bl	8011a00 <__hi0bits>
 8011616:	42b0      	cmp	r0, r6
 8011618:	dbe7      	blt.n	80115ea <__gethex+0x456>
 801161a:	e7f0      	b.n	80115fe <__gethex+0x46a>
 801161c:	08013971 	.word	0x08013971

08011620 <L_shift>:
 8011620:	f1c2 0208 	rsb	r2, r2, #8
 8011624:	0092      	lsls	r2, r2, #2
 8011626:	b570      	push	{r4, r5, r6, lr}
 8011628:	f1c2 0620 	rsb	r6, r2, #32
 801162c:	6843      	ldr	r3, [r0, #4]
 801162e:	6804      	ldr	r4, [r0, #0]
 8011630:	fa03 f506 	lsl.w	r5, r3, r6
 8011634:	432c      	orrs	r4, r5
 8011636:	40d3      	lsrs	r3, r2
 8011638:	6004      	str	r4, [r0, #0]
 801163a:	f840 3f04 	str.w	r3, [r0, #4]!
 801163e:	4288      	cmp	r0, r1
 8011640:	d3f4      	bcc.n	801162c <L_shift+0xc>
 8011642:	bd70      	pop	{r4, r5, r6, pc}

08011644 <__match>:
 8011644:	b530      	push	{r4, r5, lr}
 8011646:	6803      	ldr	r3, [r0, #0]
 8011648:	3301      	adds	r3, #1
 801164a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801164e:	b914      	cbnz	r4, 8011656 <__match+0x12>
 8011650:	6003      	str	r3, [r0, #0]
 8011652:	2001      	movs	r0, #1
 8011654:	bd30      	pop	{r4, r5, pc}
 8011656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801165a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801165e:	2d19      	cmp	r5, #25
 8011660:	bf98      	it	ls
 8011662:	3220      	addls	r2, #32
 8011664:	42a2      	cmp	r2, r4
 8011666:	d0f0      	beq.n	801164a <__match+0x6>
 8011668:	2000      	movs	r0, #0
 801166a:	e7f3      	b.n	8011654 <__match+0x10>

0801166c <__hexnan>:
 801166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011670:	680b      	ldr	r3, [r1, #0]
 8011672:	115e      	asrs	r6, r3, #5
 8011674:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011678:	f013 031f 	ands.w	r3, r3, #31
 801167c:	b087      	sub	sp, #28
 801167e:	bf18      	it	ne
 8011680:	3604      	addne	r6, #4
 8011682:	2500      	movs	r5, #0
 8011684:	1f37      	subs	r7, r6, #4
 8011686:	4690      	mov	r8, r2
 8011688:	6802      	ldr	r2, [r0, #0]
 801168a:	9301      	str	r3, [sp, #4]
 801168c:	4682      	mov	sl, r0
 801168e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011692:	46b9      	mov	r9, r7
 8011694:	463c      	mov	r4, r7
 8011696:	9502      	str	r5, [sp, #8]
 8011698:	46ab      	mov	fp, r5
 801169a:	7851      	ldrb	r1, [r2, #1]
 801169c:	1c53      	adds	r3, r2, #1
 801169e:	9303      	str	r3, [sp, #12]
 80116a0:	b341      	cbz	r1, 80116f4 <__hexnan+0x88>
 80116a2:	4608      	mov	r0, r1
 80116a4:	9205      	str	r2, [sp, #20]
 80116a6:	9104      	str	r1, [sp, #16]
 80116a8:	f7ff fd5e 	bl	8011168 <__hexdig_fun>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d14f      	bne.n	8011750 <__hexnan+0xe4>
 80116b0:	9904      	ldr	r1, [sp, #16]
 80116b2:	9a05      	ldr	r2, [sp, #20]
 80116b4:	2920      	cmp	r1, #32
 80116b6:	d818      	bhi.n	80116ea <__hexnan+0x7e>
 80116b8:	9b02      	ldr	r3, [sp, #8]
 80116ba:	459b      	cmp	fp, r3
 80116bc:	dd13      	ble.n	80116e6 <__hexnan+0x7a>
 80116be:	454c      	cmp	r4, r9
 80116c0:	d206      	bcs.n	80116d0 <__hexnan+0x64>
 80116c2:	2d07      	cmp	r5, #7
 80116c4:	dc04      	bgt.n	80116d0 <__hexnan+0x64>
 80116c6:	462a      	mov	r2, r5
 80116c8:	4649      	mov	r1, r9
 80116ca:	4620      	mov	r0, r4
 80116cc:	f7ff ffa8 	bl	8011620 <L_shift>
 80116d0:	4544      	cmp	r4, r8
 80116d2:	d950      	bls.n	8011776 <__hexnan+0x10a>
 80116d4:	2300      	movs	r3, #0
 80116d6:	f1a4 0904 	sub.w	r9, r4, #4
 80116da:	f844 3c04 	str.w	r3, [r4, #-4]
 80116de:	f8cd b008 	str.w	fp, [sp, #8]
 80116e2:	464c      	mov	r4, r9
 80116e4:	461d      	mov	r5, r3
 80116e6:	9a03      	ldr	r2, [sp, #12]
 80116e8:	e7d7      	b.n	801169a <__hexnan+0x2e>
 80116ea:	2929      	cmp	r1, #41	; 0x29
 80116ec:	d156      	bne.n	801179c <__hexnan+0x130>
 80116ee:	3202      	adds	r2, #2
 80116f0:	f8ca 2000 	str.w	r2, [sl]
 80116f4:	f1bb 0f00 	cmp.w	fp, #0
 80116f8:	d050      	beq.n	801179c <__hexnan+0x130>
 80116fa:	454c      	cmp	r4, r9
 80116fc:	d206      	bcs.n	801170c <__hexnan+0xa0>
 80116fe:	2d07      	cmp	r5, #7
 8011700:	dc04      	bgt.n	801170c <__hexnan+0xa0>
 8011702:	462a      	mov	r2, r5
 8011704:	4649      	mov	r1, r9
 8011706:	4620      	mov	r0, r4
 8011708:	f7ff ff8a 	bl	8011620 <L_shift>
 801170c:	4544      	cmp	r4, r8
 801170e:	d934      	bls.n	801177a <__hexnan+0x10e>
 8011710:	f1a8 0204 	sub.w	r2, r8, #4
 8011714:	4623      	mov	r3, r4
 8011716:	f853 1b04 	ldr.w	r1, [r3], #4
 801171a:	f842 1f04 	str.w	r1, [r2, #4]!
 801171e:	429f      	cmp	r7, r3
 8011720:	d2f9      	bcs.n	8011716 <__hexnan+0xaa>
 8011722:	1b3b      	subs	r3, r7, r4
 8011724:	f023 0303 	bic.w	r3, r3, #3
 8011728:	3304      	adds	r3, #4
 801172a:	3401      	adds	r4, #1
 801172c:	3e03      	subs	r6, #3
 801172e:	42b4      	cmp	r4, r6
 8011730:	bf88      	it	hi
 8011732:	2304      	movhi	r3, #4
 8011734:	4443      	add	r3, r8
 8011736:	2200      	movs	r2, #0
 8011738:	f843 2b04 	str.w	r2, [r3], #4
 801173c:	429f      	cmp	r7, r3
 801173e:	d2fb      	bcs.n	8011738 <__hexnan+0xcc>
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	b91b      	cbnz	r3, 801174c <__hexnan+0xe0>
 8011744:	4547      	cmp	r7, r8
 8011746:	d127      	bne.n	8011798 <__hexnan+0x12c>
 8011748:	2301      	movs	r3, #1
 801174a:	603b      	str	r3, [r7, #0]
 801174c:	2005      	movs	r0, #5
 801174e:	e026      	b.n	801179e <__hexnan+0x132>
 8011750:	3501      	adds	r5, #1
 8011752:	2d08      	cmp	r5, #8
 8011754:	f10b 0b01 	add.w	fp, fp, #1
 8011758:	dd06      	ble.n	8011768 <__hexnan+0xfc>
 801175a:	4544      	cmp	r4, r8
 801175c:	d9c3      	bls.n	80116e6 <__hexnan+0x7a>
 801175e:	2300      	movs	r3, #0
 8011760:	f844 3c04 	str.w	r3, [r4, #-4]
 8011764:	2501      	movs	r5, #1
 8011766:	3c04      	subs	r4, #4
 8011768:	6822      	ldr	r2, [r4, #0]
 801176a:	f000 000f 	and.w	r0, r0, #15
 801176e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011772:	6022      	str	r2, [r4, #0]
 8011774:	e7b7      	b.n	80116e6 <__hexnan+0x7a>
 8011776:	2508      	movs	r5, #8
 8011778:	e7b5      	b.n	80116e6 <__hexnan+0x7a>
 801177a:	9b01      	ldr	r3, [sp, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d0df      	beq.n	8011740 <__hexnan+0xd4>
 8011780:	f04f 32ff 	mov.w	r2, #4294967295
 8011784:	f1c3 0320 	rsb	r3, r3, #32
 8011788:	fa22 f303 	lsr.w	r3, r2, r3
 801178c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011790:	401a      	ands	r2, r3
 8011792:	f846 2c04 	str.w	r2, [r6, #-4]
 8011796:	e7d3      	b.n	8011740 <__hexnan+0xd4>
 8011798:	3f04      	subs	r7, #4
 801179a:	e7d1      	b.n	8011740 <__hexnan+0xd4>
 801179c:	2004      	movs	r0, #4
 801179e:	b007      	add	sp, #28
 80117a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117a4 <_localeconv_r>:
 80117a4:	4800      	ldr	r0, [pc, #0]	; (80117a8 <_localeconv_r+0x4>)
 80117a6:	4770      	bx	lr
 80117a8:	2000016c 	.word	0x2000016c

080117ac <_lseek_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	4d07      	ldr	r5, [pc, #28]	; (80117cc <_lseek_r+0x20>)
 80117b0:	4604      	mov	r4, r0
 80117b2:	4608      	mov	r0, r1
 80117b4:	4611      	mov	r1, r2
 80117b6:	2200      	movs	r2, #0
 80117b8:	602a      	str	r2, [r5, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	f7f3 f862 	bl	8004884 <_lseek>
 80117c0:	1c43      	adds	r3, r0, #1
 80117c2:	d102      	bne.n	80117ca <_lseek_r+0x1e>
 80117c4:	682b      	ldr	r3, [r5, #0]
 80117c6:	b103      	cbz	r3, 80117ca <_lseek_r+0x1e>
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	bd38      	pop	{r3, r4, r5, pc}
 80117cc:	20005200 	.word	0x20005200

080117d0 <malloc>:
 80117d0:	4b02      	ldr	r3, [pc, #8]	; (80117dc <malloc+0xc>)
 80117d2:	4601      	mov	r1, r0
 80117d4:	6818      	ldr	r0, [r3, #0]
 80117d6:	f7fd b813 	b.w	800e800 <_malloc_r>
 80117da:	bf00      	nop
 80117dc:	20000014 	.word	0x20000014

080117e0 <__ascii_mbtowc>:
 80117e0:	b082      	sub	sp, #8
 80117e2:	b901      	cbnz	r1, 80117e6 <__ascii_mbtowc+0x6>
 80117e4:	a901      	add	r1, sp, #4
 80117e6:	b142      	cbz	r2, 80117fa <__ascii_mbtowc+0x1a>
 80117e8:	b14b      	cbz	r3, 80117fe <__ascii_mbtowc+0x1e>
 80117ea:	7813      	ldrb	r3, [r2, #0]
 80117ec:	600b      	str	r3, [r1, #0]
 80117ee:	7812      	ldrb	r2, [r2, #0]
 80117f0:	1e10      	subs	r0, r2, #0
 80117f2:	bf18      	it	ne
 80117f4:	2001      	movne	r0, #1
 80117f6:	b002      	add	sp, #8
 80117f8:	4770      	bx	lr
 80117fa:	4610      	mov	r0, r2
 80117fc:	e7fb      	b.n	80117f6 <__ascii_mbtowc+0x16>
 80117fe:	f06f 0001 	mvn.w	r0, #1
 8011802:	e7f8      	b.n	80117f6 <__ascii_mbtowc+0x16>

08011804 <__malloc_lock>:
 8011804:	4801      	ldr	r0, [pc, #4]	; (801180c <__malloc_lock+0x8>)
 8011806:	f7fc bfc2 	b.w	800e78e <__retarget_lock_acquire_recursive>
 801180a:	bf00      	nop
 801180c:	200051f4 	.word	0x200051f4

08011810 <__malloc_unlock>:
 8011810:	4801      	ldr	r0, [pc, #4]	; (8011818 <__malloc_unlock+0x8>)
 8011812:	f7fc bfbd 	b.w	800e790 <__retarget_lock_release_recursive>
 8011816:	bf00      	nop
 8011818:	200051f4 	.word	0x200051f4

0801181c <_Balloc>:
 801181c:	b570      	push	{r4, r5, r6, lr}
 801181e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011820:	4604      	mov	r4, r0
 8011822:	460d      	mov	r5, r1
 8011824:	b976      	cbnz	r6, 8011844 <_Balloc+0x28>
 8011826:	2010      	movs	r0, #16
 8011828:	f7ff ffd2 	bl	80117d0 <malloc>
 801182c:	4602      	mov	r2, r0
 801182e:	6260      	str	r0, [r4, #36]	; 0x24
 8011830:	b920      	cbnz	r0, 801183c <_Balloc+0x20>
 8011832:	4b18      	ldr	r3, [pc, #96]	; (8011894 <_Balloc+0x78>)
 8011834:	4818      	ldr	r0, [pc, #96]	; (8011898 <_Balloc+0x7c>)
 8011836:	2166      	movs	r1, #102	; 0x66
 8011838:	f7fe fcc6 	bl	80101c8 <__assert_func>
 801183c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011840:	6006      	str	r6, [r0, #0]
 8011842:	60c6      	str	r6, [r0, #12]
 8011844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011846:	68f3      	ldr	r3, [r6, #12]
 8011848:	b183      	cbz	r3, 801186c <_Balloc+0x50>
 801184a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011852:	b9b8      	cbnz	r0, 8011884 <_Balloc+0x68>
 8011854:	2101      	movs	r1, #1
 8011856:	fa01 f605 	lsl.w	r6, r1, r5
 801185a:	1d72      	adds	r2, r6, #5
 801185c:	0092      	lsls	r2, r2, #2
 801185e:	4620      	mov	r0, r4
 8011860:	f000 fc9d 	bl	801219e <_calloc_r>
 8011864:	b160      	cbz	r0, 8011880 <_Balloc+0x64>
 8011866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801186a:	e00e      	b.n	801188a <_Balloc+0x6e>
 801186c:	2221      	movs	r2, #33	; 0x21
 801186e:	2104      	movs	r1, #4
 8011870:	4620      	mov	r0, r4
 8011872:	f000 fc94 	bl	801219e <_calloc_r>
 8011876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011878:	60f0      	str	r0, [r6, #12]
 801187a:	68db      	ldr	r3, [r3, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1e4      	bne.n	801184a <_Balloc+0x2e>
 8011880:	2000      	movs	r0, #0
 8011882:	bd70      	pop	{r4, r5, r6, pc}
 8011884:	6802      	ldr	r2, [r0, #0]
 8011886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801188a:	2300      	movs	r3, #0
 801188c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011890:	e7f7      	b.n	8011882 <_Balloc+0x66>
 8011892:	bf00      	nop
 8011894:	08013758 	.word	0x08013758
 8011898:	080139fc 	.word	0x080139fc

0801189c <_Bfree>:
 801189c:	b570      	push	{r4, r5, r6, lr}
 801189e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80118a0:	4605      	mov	r5, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	b976      	cbnz	r6, 80118c4 <_Bfree+0x28>
 80118a6:	2010      	movs	r0, #16
 80118a8:	f7ff ff92 	bl	80117d0 <malloc>
 80118ac:	4602      	mov	r2, r0
 80118ae:	6268      	str	r0, [r5, #36]	; 0x24
 80118b0:	b920      	cbnz	r0, 80118bc <_Bfree+0x20>
 80118b2:	4b09      	ldr	r3, [pc, #36]	; (80118d8 <_Bfree+0x3c>)
 80118b4:	4809      	ldr	r0, [pc, #36]	; (80118dc <_Bfree+0x40>)
 80118b6:	218a      	movs	r1, #138	; 0x8a
 80118b8:	f7fe fc86 	bl	80101c8 <__assert_func>
 80118bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118c0:	6006      	str	r6, [r0, #0]
 80118c2:	60c6      	str	r6, [r0, #12]
 80118c4:	b13c      	cbz	r4, 80118d6 <_Bfree+0x3a>
 80118c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80118c8:	6862      	ldr	r2, [r4, #4]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118d0:	6021      	str	r1, [r4, #0]
 80118d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	08013758 	.word	0x08013758
 80118dc:	080139fc 	.word	0x080139fc

080118e0 <__multadd>:
 80118e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e4:	690d      	ldr	r5, [r1, #16]
 80118e6:	4607      	mov	r7, r0
 80118e8:	460c      	mov	r4, r1
 80118ea:	461e      	mov	r6, r3
 80118ec:	f101 0c14 	add.w	ip, r1, #20
 80118f0:	2000      	movs	r0, #0
 80118f2:	f8dc 3000 	ldr.w	r3, [ip]
 80118f6:	b299      	uxth	r1, r3
 80118f8:	fb02 6101 	mla	r1, r2, r1, r6
 80118fc:	0c1e      	lsrs	r6, r3, #16
 80118fe:	0c0b      	lsrs	r3, r1, #16
 8011900:	fb02 3306 	mla	r3, r2, r6, r3
 8011904:	b289      	uxth	r1, r1
 8011906:	3001      	adds	r0, #1
 8011908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801190c:	4285      	cmp	r5, r0
 801190e:	f84c 1b04 	str.w	r1, [ip], #4
 8011912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011916:	dcec      	bgt.n	80118f2 <__multadd+0x12>
 8011918:	b30e      	cbz	r6, 801195e <__multadd+0x7e>
 801191a:	68a3      	ldr	r3, [r4, #8]
 801191c:	42ab      	cmp	r3, r5
 801191e:	dc19      	bgt.n	8011954 <__multadd+0x74>
 8011920:	6861      	ldr	r1, [r4, #4]
 8011922:	4638      	mov	r0, r7
 8011924:	3101      	adds	r1, #1
 8011926:	f7ff ff79 	bl	801181c <_Balloc>
 801192a:	4680      	mov	r8, r0
 801192c:	b928      	cbnz	r0, 801193a <__multadd+0x5a>
 801192e:	4602      	mov	r2, r0
 8011930:	4b0c      	ldr	r3, [pc, #48]	; (8011964 <__multadd+0x84>)
 8011932:	480d      	ldr	r0, [pc, #52]	; (8011968 <__multadd+0x88>)
 8011934:	21b5      	movs	r1, #181	; 0xb5
 8011936:	f7fe fc47 	bl	80101c8 <__assert_func>
 801193a:	6922      	ldr	r2, [r4, #16]
 801193c:	3202      	adds	r2, #2
 801193e:	f104 010c 	add.w	r1, r4, #12
 8011942:	0092      	lsls	r2, r2, #2
 8011944:	300c      	adds	r0, #12
 8011946:	f7fc ff24 	bl	800e792 <memcpy>
 801194a:	4621      	mov	r1, r4
 801194c:	4638      	mov	r0, r7
 801194e:	f7ff ffa5 	bl	801189c <_Bfree>
 8011952:	4644      	mov	r4, r8
 8011954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011958:	3501      	adds	r5, #1
 801195a:	615e      	str	r6, [r3, #20]
 801195c:	6125      	str	r5, [r4, #16]
 801195e:	4620      	mov	r0, r4
 8011960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011964:	08013971 	.word	0x08013971
 8011968:	080139fc 	.word	0x080139fc

0801196c <__s2b>:
 801196c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011970:	460c      	mov	r4, r1
 8011972:	4615      	mov	r5, r2
 8011974:	461f      	mov	r7, r3
 8011976:	2209      	movs	r2, #9
 8011978:	3308      	adds	r3, #8
 801197a:	4606      	mov	r6, r0
 801197c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011980:	2100      	movs	r1, #0
 8011982:	2201      	movs	r2, #1
 8011984:	429a      	cmp	r2, r3
 8011986:	db09      	blt.n	801199c <__s2b+0x30>
 8011988:	4630      	mov	r0, r6
 801198a:	f7ff ff47 	bl	801181c <_Balloc>
 801198e:	b940      	cbnz	r0, 80119a2 <__s2b+0x36>
 8011990:	4602      	mov	r2, r0
 8011992:	4b19      	ldr	r3, [pc, #100]	; (80119f8 <__s2b+0x8c>)
 8011994:	4819      	ldr	r0, [pc, #100]	; (80119fc <__s2b+0x90>)
 8011996:	21ce      	movs	r1, #206	; 0xce
 8011998:	f7fe fc16 	bl	80101c8 <__assert_func>
 801199c:	0052      	lsls	r2, r2, #1
 801199e:	3101      	adds	r1, #1
 80119a0:	e7f0      	b.n	8011984 <__s2b+0x18>
 80119a2:	9b08      	ldr	r3, [sp, #32]
 80119a4:	6143      	str	r3, [r0, #20]
 80119a6:	2d09      	cmp	r5, #9
 80119a8:	f04f 0301 	mov.w	r3, #1
 80119ac:	6103      	str	r3, [r0, #16]
 80119ae:	dd16      	ble.n	80119de <__s2b+0x72>
 80119b0:	f104 0909 	add.w	r9, r4, #9
 80119b4:	46c8      	mov	r8, r9
 80119b6:	442c      	add	r4, r5
 80119b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80119bc:	4601      	mov	r1, r0
 80119be:	3b30      	subs	r3, #48	; 0x30
 80119c0:	220a      	movs	r2, #10
 80119c2:	4630      	mov	r0, r6
 80119c4:	f7ff ff8c 	bl	80118e0 <__multadd>
 80119c8:	45a0      	cmp	r8, r4
 80119ca:	d1f5      	bne.n	80119b8 <__s2b+0x4c>
 80119cc:	f1a5 0408 	sub.w	r4, r5, #8
 80119d0:	444c      	add	r4, r9
 80119d2:	1b2d      	subs	r5, r5, r4
 80119d4:	1963      	adds	r3, r4, r5
 80119d6:	42bb      	cmp	r3, r7
 80119d8:	db04      	blt.n	80119e4 <__s2b+0x78>
 80119da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119de:	340a      	adds	r4, #10
 80119e0:	2509      	movs	r5, #9
 80119e2:	e7f6      	b.n	80119d2 <__s2b+0x66>
 80119e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80119e8:	4601      	mov	r1, r0
 80119ea:	3b30      	subs	r3, #48	; 0x30
 80119ec:	220a      	movs	r2, #10
 80119ee:	4630      	mov	r0, r6
 80119f0:	f7ff ff76 	bl	80118e0 <__multadd>
 80119f4:	e7ee      	b.n	80119d4 <__s2b+0x68>
 80119f6:	bf00      	nop
 80119f8:	08013971 	.word	0x08013971
 80119fc:	080139fc 	.word	0x080139fc

08011a00 <__hi0bits>:
 8011a00:	0c03      	lsrs	r3, r0, #16
 8011a02:	041b      	lsls	r3, r3, #16
 8011a04:	b9d3      	cbnz	r3, 8011a3c <__hi0bits+0x3c>
 8011a06:	0400      	lsls	r0, r0, #16
 8011a08:	2310      	movs	r3, #16
 8011a0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011a0e:	bf04      	itt	eq
 8011a10:	0200      	lsleq	r0, r0, #8
 8011a12:	3308      	addeq	r3, #8
 8011a14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011a18:	bf04      	itt	eq
 8011a1a:	0100      	lsleq	r0, r0, #4
 8011a1c:	3304      	addeq	r3, #4
 8011a1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011a22:	bf04      	itt	eq
 8011a24:	0080      	lsleq	r0, r0, #2
 8011a26:	3302      	addeq	r3, #2
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	db05      	blt.n	8011a38 <__hi0bits+0x38>
 8011a2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011a30:	f103 0301 	add.w	r3, r3, #1
 8011a34:	bf08      	it	eq
 8011a36:	2320      	moveq	r3, #32
 8011a38:	4618      	mov	r0, r3
 8011a3a:	4770      	bx	lr
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e7e4      	b.n	8011a0a <__hi0bits+0xa>

08011a40 <__lo0bits>:
 8011a40:	6803      	ldr	r3, [r0, #0]
 8011a42:	f013 0207 	ands.w	r2, r3, #7
 8011a46:	4601      	mov	r1, r0
 8011a48:	d00b      	beq.n	8011a62 <__lo0bits+0x22>
 8011a4a:	07da      	lsls	r2, r3, #31
 8011a4c:	d423      	bmi.n	8011a96 <__lo0bits+0x56>
 8011a4e:	0798      	lsls	r0, r3, #30
 8011a50:	bf49      	itett	mi
 8011a52:	085b      	lsrmi	r3, r3, #1
 8011a54:	089b      	lsrpl	r3, r3, #2
 8011a56:	2001      	movmi	r0, #1
 8011a58:	600b      	strmi	r3, [r1, #0]
 8011a5a:	bf5c      	itt	pl
 8011a5c:	600b      	strpl	r3, [r1, #0]
 8011a5e:	2002      	movpl	r0, #2
 8011a60:	4770      	bx	lr
 8011a62:	b298      	uxth	r0, r3
 8011a64:	b9a8      	cbnz	r0, 8011a92 <__lo0bits+0x52>
 8011a66:	0c1b      	lsrs	r3, r3, #16
 8011a68:	2010      	movs	r0, #16
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	b90a      	cbnz	r2, 8011a72 <__lo0bits+0x32>
 8011a6e:	3008      	adds	r0, #8
 8011a70:	0a1b      	lsrs	r3, r3, #8
 8011a72:	071a      	lsls	r2, r3, #28
 8011a74:	bf04      	itt	eq
 8011a76:	091b      	lsreq	r3, r3, #4
 8011a78:	3004      	addeq	r0, #4
 8011a7a:	079a      	lsls	r2, r3, #30
 8011a7c:	bf04      	itt	eq
 8011a7e:	089b      	lsreq	r3, r3, #2
 8011a80:	3002      	addeq	r0, #2
 8011a82:	07da      	lsls	r2, r3, #31
 8011a84:	d403      	bmi.n	8011a8e <__lo0bits+0x4e>
 8011a86:	085b      	lsrs	r3, r3, #1
 8011a88:	f100 0001 	add.w	r0, r0, #1
 8011a8c:	d005      	beq.n	8011a9a <__lo0bits+0x5a>
 8011a8e:	600b      	str	r3, [r1, #0]
 8011a90:	4770      	bx	lr
 8011a92:	4610      	mov	r0, r2
 8011a94:	e7e9      	b.n	8011a6a <__lo0bits+0x2a>
 8011a96:	2000      	movs	r0, #0
 8011a98:	4770      	bx	lr
 8011a9a:	2020      	movs	r0, #32
 8011a9c:	4770      	bx	lr
	...

08011aa0 <__i2b>:
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	2101      	movs	r1, #1
 8011aa6:	f7ff feb9 	bl	801181c <_Balloc>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	b928      	cbnz	r0, 8011aba <__i2b+0x1a>
 8011aae:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <__i2b+0x24>)
 8011ab0:	4805      	ldr	r0, [pc, #20]	; (8011ac8 <__i2b+0x28>)
 8011ab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011ab6:	f7fe fb87 	bl	80101c8 <__assert_func>
 8011aba:	2301      	movs	r3, #1
 8011abc:	6144      	str	r4, [r0, #20]
 8011abe:	6103      	str	r3, [r0, #16]
 8011ac0:	bd10      	pop	{r4, pc}
 8011ac2:	bf00      	nop
 8011ac4:	08013971 	.word	0x08013971
 8011ac8:	080139fc 	.word	0x080139fc

08011acc <__multiply>:
 8011acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad0:	4691      	mov	r9, r2
 8011ad2:	690a      	ldr	r2, [r1, #16]
 8011ad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	bfb8      	it	lt
 8011adc:	460b      	movlt	r3, r1
 8011ade:	460c      	mov	r4, r1
 8011ae0:	bfbc      	itt	lt
 8011ae2:	464c      	movlt	r4, r9
 8011ae4:	4699      	movlt	r9, r3
 8011ae6:	6927      	ldr	r7, [r4, #16]
 8011ae8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011aec:	68a3      	ldr	r3, [r4, #8]
 8011aee:	6861      	ldr	r1, [r4, #4]
 8011af0:	eb07 060a 	add.w	r6, r7, sl
 8011af4:	42b3      	cmp	r3, r6
 8011af6:	b085      	sub	sp, #20
 8011af8:	bfb8      	it	lt
 8011afa:	3101      	addlt	r1, #1
 8011afc:	f7ff fe8e 	bl	801181c <_Balloc>
 8011b00:	b930      	cbnz	r0, 8011b10 <__multiply+0x44>
 8011b02:	4602      	mov	r2, r0
 8011b04:	4b44      	ldr	r3, [pc, #272]	; (8011c18 <__multiply+0x14c>)
 8011b06:	4845      	ldr	r0, [pc, #276]	; (8011c1c <__multiply+0x150>)
 8011b08:	f240 115d 	movw	r1, #349	; 0x15d
 8011b0c:	f7fe fb5c 	bl	80101c8 <__assert_func>
 8011b10:	f100 0514 	add.w	r5, r0, #20
 8011b14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b18:	462b      	mov	r3, r5
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	4543      	cmp	r3, r8
 8011b1e:	d321      	bcc.n	8011b64 <__multiply+0x98>
 8011b20:	f104 0314 	add.w	r3, r4, #20
 8011b24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011b28:	f109 0314 	add.w	r3, r9, #20
 8011b2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011b30:	9202      	str	r2, [sp, #8]
 8011b32:	1b3a      	subs	r2, r7, r4
 8011b34:	3a15      	subs	r2, #21
 8011b36:	f022 0203 	bic.w	r2, r2, #3
 8011b3a:	3204      	adds	r2, #4
 8011b3c:	f104 0115 	add.w	r1, r4, #21
 8011b40:	428f      	cmp	r7, r1
 8011b42:	bf38      	it	cc
 8011b44:	2204      	movcc	r2, #4
 8011b46:	9201      	str	r2, [sp, #4]
 8011b48:	9a02      	ldr	r2, [sp, #8]
 8011b4a:	9303      	str	r3, [sp, #12]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d80c      	bhi.n	8011b6a <__multiply+0x9e>
 8011b50:	2e00      	cmp	r6, #0
 8011b52:	dd03      	ble.n	8011b5c <__multiply+0x90>
 8011b54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d05a      	beq.n	8011c12 <__multiply+0x146>
 8011b5c:	6106      	str	r6, [r0, #16]
 8011b5e:	b005      	add	sp, #20
 8011b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b64:	f843 2b04 	str.w	r2, [r3], #4
 8011b68:	e7d8      	b.n	8011b1c <__multiply+0x50>
 8011b6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011b6e:	f1ba 0f00 	cmp.w	sl, #0
 8011b72:	d024      	beq.n	8011bbe <__multiply+0xf2>
 8011b74:	f104 0e14 	add.w	lr, r4, #20
 8011b78:	46a9      	mov	r9, r5
 8011b7a:	f04f 0c00 	mov.w	ip, #0
 8011b7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011b82:	f8d9 1000 	ldr.w	r1, [r9]
 8011b86:	fa1f fb82 	uxth.w	fp, r2
 8011b8a:	b289      	uxth	r1, r1
 8011b8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011b90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011b94:	f8d9 2000 	ldr.w	r2, [r9]
 8011b98:	4461      	add	r1, ip
 8011b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011b9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011ba2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011ba6:	b289      	uxth	r1, r1
 8011ba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011bac:	4577      	cmp	r7, lr
 8011bae:	f849 1b04 	str.w	r1, [r9], #4
 8011bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011bb6:	d8e2      	bhi.n	8011b7e <__multiply+0xb2>
 8011bb8:	9a01      	ldr	r2, [sp, #4]
 8011bba:	f845 c002 	str.w	ip, [r5, r2]
 8011bbe:	9a03      	ldr	r2, [sp, #12]
 8011bc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	f1b9 0f00 	cmp.w	r9, #0
 8011bca:	d020      	beq.n	8011c0e <__multiply+0x142>
 8011bcc:	6829      	ldr	r1, [r5, #0]
 8011bce:	f104 0c14 	add.w	ip, r4, #20
 8011bd2:	46ae      	mov	lr, r5
 8011bd4:	f04f 0a00 	mov.w	sl, #0
 8011bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8011bdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011be0:	fb09 220b 	mla	r2, r9, fp, r2
 8011be4:	4492      	add	sl, r2
 8011be6:	b289      	uxth	r1, r1
 8011be8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011bec:	f84e 1b04 	str.w	r1, [lr], #4
 8011bf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011bf4:	f8be 1000 	ldrh.w	r1, [lr]
 8011bf8:	0c12      	lsrs	r2, r2, #16
 8011bfa:	fb09 1102 	mla	r1, r9, r2, r1
 8011bfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011c02:	4567      	cmp	r7, ip
 8011c04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011c08:	d8e6      	bhi.n	8011bd8 <__multiply+0x10c>
 8011c0a:	9a01      	ldr	r2, [sp, #4]
 8011c0c:	50a9      	str	r1, [r5, r2]
 8011c0e:	3504      	adds	r5, #4
 8011c10:	e79a      	b.n	8011b48 <__multiply+0x7c>
 8011c12:	3e01      	subs	r6, #1
 8011c14:	e79c      	b.n	8011b50 <__multiply+0x84>
 8011c16:	bf00      	nop
 8011c18:	08013971 	.word	0x08013971
 8011c1c:	080139fc 	.word	0x080139fc

08011c20 <__pow5mult>:
 8011c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c24:	4615      	mov	r5, r2
 8011c26:	f012 0203 	ands.w	r2, r2, #3
 8011c2a:	4606      	mov	r6, r0
 8011c2c:	460f      	mov	r7, r1
 8011c2e:	d007      	beq.n	8011c40 <__pow5mult+0x20>
 8011c30:	4c25      	ldr	r4, [pc, #148]	; (8011cc8 <__pow5mult+0xa8>)
 8011c32:	3a01      	subs	r2, #1
 8011c34:	2300      	movs	r3, #0
 8011c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c3a:	f7ff fe51 	bl	80118e0 <__multadd>
 8011c3e:	4607      	mov	r7, r0
 8011c40:	10ad      	asrs	r5, r5, #2
 8011c42:	d03d      	beq.n	8011cc0 <__pow5mult+0xa0>
 8011c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011c46:	b97c      	cbnz	r4, 8011c68 <__pow5mult+0x48>
 8011c48:	2010      	movs	r0, #16
 8011c4a:	f7ff fdc1 	bl	80117d0 <malloc>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	6270      	str	r0, [r6, #36]	; 0x24
 8011c52:	b928      	cbnz	r0, 8011c60 <__pow5mult+0x40>
 8011c54:	4b1d      	ldr	r3, [pc, #116]	; (8011ccc <__pow5mult+0xac>)
 8011c56:	481e      	ldr	r0, [pc, #120]	; (8011cd0 <__pow5mult+0xb0>)
 8011c58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011c5c:	f7fe fab4 	bl	80101c8 <__assert_func>
 8011c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c64:	6004      	str	r4, [r0, #0]
 8011c66:	60c4      	str	r4, [r0, #12]
 8011c68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c70:	b94c      	cbnz	r4, 8011c86 <__pow5mult+0x66>
 8011c72:	f240 2171 	movw	r1, #625	; 0x271
 8011c76:	4630      	mov	r0, r6
 8011c78:	f7ff ff12 	bl	8011aa0 <__i2b>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c82:	4604      	mov	r4, r0
 8011c84:	6003      	str	r3, [r0, #0]
 8011c86:	f04f 0900 	mov.w	r9, #0
 8011c8a:	07eb      	lsls	r3, r5, #31
 8011c8c:	d50a      	bpl.n	8011ca4 <__pow5mult+0x84>
 8011c8e:	4639      	mov	r1, r7
 8011c90:	4622      	mov	r2, r4
 8011c92:	4630      	mov	r0, r6
 8011c94:	f7ff ff1a 	bl	8011acc <__multiply>
 8011c98:	4639      	mov	r1, r7
 8011c9a:	4680      	mov	r8, r0
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f7ff fdfd 	bl	801189c <_Bfree>
 8011ca2:	4647      	mov	r7, r8
 8011ca4:	106d      	asrs	r5, r5, #1
 8011ca6:	d00b      	beq.n	8011cc0 <__pow5mult+0xa0>
 8011ca8:	6820      	ldr	r0, [r4, #0]
 8011caa:	b938      	cbnz	r0, 8011cbc <__pow5mult+0x9c>
 8011cac:	4622      	mov	r2, r4
 8011cae:	4621      	mov	r1, r4
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f7ff ff0b 	bl	8011acc <__multiply>
 8011cb6:	6020      	str	r0, [r4, #0]
 8011cb8:	f8c0 9000 	str.w	r9, [r0]
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	e7e4      	b.n	8011c8a <__pow5mult+0x6a>
 8011cc0:	4638      	mov	r0, r7
 8011cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cc6:	bf00      	nop
 8011cc8:	08013b48 	.word	0x08013b48
 8011ccc:	08013758 	.word	0x08013758
 8011cd0:	080139fc 	.word	0x080139fc

08011cd4 <__lshift>:
 8011cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cd8:	460c      	mov	r4, r1
 8011cda:	6849      	ldr	r1, [r1, #4]
 8011cdc:	6923      	ldr	r3, [r4, #16]
 8011cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ce2:	68a3      	ldr	r3, [r4, #8]
 8011ce4:	4607      	mov	r7, r0
 8011ce6:	4691      	mov	r9, r2
 8011ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011cec:	f108 0601 	add.w	r6, r8, #1
 8011cf0:	42b3      	cmp	r3, r6
 8011cf2:	db0b      	blt.n	8011d0c <__lshift+0x38>
 8011cf4:	4638      	mov	r0, r7
 8011cf6:	f7ff fd91 	bl	801181c <_Balloc>
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	b948      	cbnz	r0, 8011d12 <__lshift+0x3e>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	4b2a      	ldr	r3, [pc, #168]	; (8011dac <__lshift+0xd8>)
 8011d02:	482b      	ldr	r0, [pc, #172]	; (8011db0 <__lshift+0xdc>)
 8011d04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011d08:	f7fe fa5e 	bl	80101c8 <__assert_func>
 8011d0c:	3101      	adds	r1, #1
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	e7ee      	b.n	8011cf0 <__lshift+0x1c>
 8011d12:	2300      	movs	r3, #0
 8011d14:	f100 0114 	add.w	r1, r0, #20
 8011d18:	f100 0210 	add.w	r2, r0, #16
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	4553      	cmp	r3, sl
 8011d20:	db37      	blt.n	8011d92 <__lshift+0xbe>
 8011d22:	6920      	ldr	r0, [r4, #16]
 8011d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d28:	f104 0314 	add.w	r3, r4, #20
 8011d2c:	f019 091f 	ands.w	r9, r9, #31
 8011d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011d38:	d02f      	beq.n	8011d9a <__lshift+0xc6>
 8011d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8011d3e:	468a      	mov	sl, r1
 8011d40:	f04f 0c00 	mov.w	ip, #0
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	fa02 f209 	lsl.w	r2, r2, r9
 8011d4a:	ea42 020c 	orr.w	r2, r2, ip
 8011d4e:	f84a 2b04 	str.w	r2, [sl], #4
 8011d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d56:	4298      	cmp	r0, r3
 8011d58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011d5c:	d8f2      	bhi.n	8011d44 <__lshift+0x70>
 8011d5e:	1b03      	subs	r3, r0, r4
 8011d60:	3b15      	subs	r3, #21
 8011d62:	f023 0303 	bic.w	r3, r3, #3
 8011d66:	3304      	adds	r3, #4
 8011d68:	f104 0215 	add.w	r2, r4, #21
 8011d6c:	4290      	cmp	r0, r2
 8011d6e:	bf38      	it	cc
 8011d70:	2304      	movcc	r3, #4
 8011d72:	f841 c003 	str.w	ip, [r1, r3]
 8011d76:	f1bc 0f00 	cmp.w	ip, #0
 8011d7a:	d001      	beq.n	8011d80 <__lshift+0xac>
 8011d7c:	f108 0602 	add.w	r6, r8, #2
 8011d80:	3e01      	subs	r6, #1
 8011d82:	4638      	mov	r0, r7
 8011d84:	612e      	str	r6, [r5, #16]
 8011d86:	4621      	mov	r1, r4
 8011d88:	f7ff fd88 	bl	801189c <_Bfree>
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d96:	3301      	adds	r3, #1
 8011d98:	e7c1      	b.n	8011d1e <__lshift+0x4a>
 8011d9a:	3904      	subs	r1, #4
 8011d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011da4:	4298      	cmp	r0, r3
 8011da6:	d8f9      	bhi.n	8011d9c <__lshift+0xc8>
 8011da8:	e7ea      	b.n	8011d80 <__lshift+0xac>
 8011daa:	bf00      	nop
 8011dac:	08013971 	.word	0x08013971
 8011db0:	080139fc 	.word	0x080139fc

08011db4 <__mcmp>:
 8011db4:	b530      	push	{r4, r5, lr}
 8011db6:	6902      	ldr	r2, [r0, #16]
 8011db8:	690c      	ldr	r4, [r1, #16]
 8011dba:	1b12      	subs	r2, r2, r4
 8011dbc:	d10e      	bne.n	8011ddc <__mcmp+0x28>
 8011dbe:	f100 0314 	add.w	r3, r0, #20
 8011dc2:	3114      	adds	r1, #20
 8011dc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011dc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011dcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011dd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011dd4:	42a5      	cmp	r5, r4
 8011dd6:	d003      	beq.n	8011de0 <__mcmp+0x2c>
 8011dd8:	d305      	bcc.n	8011de6 <__mcmp+0x32>
 8011dda:	2201      	movs	r2, #1
 8011ddc:	4610      	mov	r0, r2
 8011dde:	bd30      	pop	{r4, r5, pc}
 8011de0:	4283      	cmp	r3, r0
 8011de2:	d3f3      	bcc.n	8011dcc <__mcmp+0x18>
 8011de4:	e7fa      	b.n	8011ddc <__mcmp+0x28>
 8011de6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dea:	e7f7      	b.n	8011ddc <__mcmp+0x28>

08011dec <__mdiff>:
 8011dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df0:	460c      	mov	r4, r1
 8011df2:	4606      	mov	r6, r0
 8011df4:	4611      	mov	r1, r2
 8011df6:	4620      	mov	r0, r4
 8011df8:	4690      	mov	r8, r2
 8011dfa:	f7ff ffdb 	bl	8011db4 <__mcmp>
 8011dfe:	1e05      	subs	r5, r0, #0
 8011e00:	d110      	bne.n	8011e24 <__mdiff+0x38>
 8011e02:	4629      	mov	r1, r5
 8011e04:	4630      	mov	r0, r6
 8011e06:	f7ff fd09 	bl	801181c <_Balloc>
 8011e0a:	b930      	cbnz	r0, 8011e1a <__mdiff+0x2e>
 8011e0c:	4b3a      	ldr	r3, [pc, #232]	; (8011ef8 <__mdiff+0x10c>)
 8011e0e:	4602      	mov	r2, r0
 8011e10:	f240 2132 	movw	r1, #562	; 0x232
 8011e14:	4839      	ldr	r0, [pc, #228]	; (8011efc <__mdiff+0x110>)
 8011e16:	f7fe f9d7 	bl	80101c8 <__assert_func>
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e24:	bfa4      	itt	ge
 8011e26:	4643      	movge	r3, r8
 8011e28:	46a0      	movge	r8, r4
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e30:	bfa6      	itte	ge
 8011e32:	461c      	movge	r4, r3
 8011e34:	2500      	movge	r5, #0
 8011e36:	2501      	movlt	r5, #1
 8011e38:	f7ff fcf0 	bl	801181c <_Balloc>
 8011e3c:	b920      	cbnz	r0, 8011e48 <__mdiff+0x5c>
 8011e3e:	4b2e      	ldr	r3, [pc, #184]	; (8011ef8 <__mdiff+0x10c>)
 8011e40:	4602      	mov	r2, r0
 8011e42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011e46:	e7e5      	b.n	8011e14 <__mdiff+0x28>
 8011e48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e4c:	6926      	ldr	r6, [r4, #16]
 8011e4e:	60c5      	str	r5, [r0, #12]
 8011e50:	f104 0914 	add.w	r9, r4, #20
 8011e54:	f108 0514 	add.w	r5, r8, #20
 8011e58:	f100 0e14 	add.w	lr, r0, #20
 8011e5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011e60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011e64:	f108 0210 	add.w	r2, r8, #16
 8011e68:	46f2      	mov	sl, lr
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011e70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011e74:	fa1f f883 	uxth.w	r8, r3
 8011e78:	fa11 f18b 	uxtah	r1, r1, fp
 8011e7c:	0c1b      	lsrs	r3, r3, #16
 8011e7e:	eba1 0808 	sub.w	r8, r1, r8
 8011e82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e8a:	fa1f f888 	uxth.w	r8, r8
 8011e8e:	1419      	asrs	r1, r3, #16
 8011e90:	454e      	cmp	r6, r9
 8011e92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011e96:	f84a 3b04 	str.w	r3, [sl], #4
 8011e9a:	d8e7      	bhi.n	8011e6c <__mdiff+0x80>
 8011e9c:	1b33      	subs	r3, r6, r4
 8011e9e:	3b15      	subs	r3, #21
 8011ea0:	f023 0303 	bic.w	r3, r3, #3
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	3415      	adds	r4, #21
 8011ea8:	42a6      	cmp	r6, r4
 8011eaa:	bf38      	it	cc
 8011eac:	2304      	movcc	r3, #4
 8011eae:	441d      	add	r5, r3
 8011eb0:	4473      	add	r3, lr
 8011eb2:	469e      	mov	lr, r3
 8011eb4:	462e      	mov	r6, r5
 8011eb6:	4566      	cmp	r6, ip
 8011eb8:	d30e      	bcc.n	8011ed8 <__mdiff+0xec>
 8011eba:	f10c 0203 	add.w	r2, ip, #3
 8011ebe:	1b52      	subs	r2, r2, r5
 8011ec0:	f022 0203 	bic.w	r2, r2, #3
 8011ec4:	3d03      	subs	r5, #3
 8011ec6:	45ac      	cmp	ip, r5
 8011ec8:	bf38      	it	cc
 8011eca:	2200      	movcc	r2, #0
 8011ecc:	441a      	add	r2, r3
 8011ece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011ed2:	b17b      	cbz	r3, 8011ef4 <__mdiff+0x108>
 8011ed4:	6107      	str	r7, [r0, #16]
 8011ed6:	e7a3      	b.n	8011e20 <__mdiff+0x34>
 8011ed8:	f856 8b04 	ldr.w	r8, [r6], #4
 8011edc:	fa11 f288 	uxtah	r2, r1, r8
 8011ee0:	1414      	asrs	r4, r2, #16
 8011ee2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011ee6:	b292      	uxth	r2, r2
 8011ee8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011eec:	f84e 2b04 	str.w	r2, [lr], #4
 8011ef0:	1421      	asrs	r1, r4, #16
 8011ef2:	e7e0      	b.n	8011eb6 <__mdiff+0xca>
 8011ef4:	3f01      	subs	r7, #1
 8011ef6:	e7ea      	b.n	8011ece <__mdiff+0xe2>
 8011ef8:	08013971 	.word	0x08013971
 8011efc:	080139fc 	.word	0x080139fc

08011f00 <__ulp>:
 8011f00:	b082      	sub	sp, #8
 8011f02:	ed8d 0b00 	vstr	d0, [sp]
 8011f06:	9b01      	ldr	r3, [sp, #4]
 8011f08:	4912      	ldr	r1, [pc, #72]	; (8011f54 <__ulp+0x54>)
 8011f0a:	4019      	ands	r1, r3
 8011f0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011f10:	2900      	cmp	r1, #0
 8011f12:	dd05      	ble.n	8011f20 <__ulp+0x20>
 8011f14:	2200      	movs	r2, #0
 8011f16:	460b      	mov	r3, r1
 8011f18:	ec43 2b10 	vmov	d0, r2, r3
 8011f1c:	b002      	add	sp, #8
 8011f1e:	4770      	bx	lr
 8011f20:	4249      	negs	r1, r1
 8011f22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011f26:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011f2a:	f04f 0200 	mov.w	r2, #0
 8011f2e:	f04f 0300 	mov.w	r3, #0
 8011f32:	da04      	bge.n	8011f3e <__ulp+0x3e>
 8011f34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011f38:	fa41 f300 	asr.w	r3, r1, r0
 8011f3c:	e7ec      	b.n	8011f18 <__ulp+0x18>
 8011f3e:	f1a0 0114 	sub.w	r1, r0, #20
 8011f42:	291e      	cmp	r1, #30
 8011f44:	bfda      	itte	le
 8011f46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011f4a:	fa20 f101 	lsrle.w	r1, r0, r1
 8011f4e:	2101      	movgt	r1, #1
 8011f50:	460a      	mov	r2, r1
 8011f52:	e7e1      	b.n	8011f18 <__ulp+0x18>
 8011f54:	7ff00000 	.word	0x7ff00000

08011f58 <__b2d>:
 8011f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5a:	6905      	ldr	r5, [r0, #16]
 8011f5c:	f100 0714 	add.w	r7, r0, #20
 8011f60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011f64:	1f2e      	subs	r6, r5, #4
 8011f66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f7ff fd48 	bl	8011a00 <__hi0bits>
 8011f70:	f1c0 0320 	rsb	r3, r0, #32
 8011f74:	280a      	cmp	r0, #10
 8011f76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011ff4 <__b2d+0x9c>
 8011f7a:	600b      	str	r3, [r1, #0]
 8011f7c:	dc14      	bgt.n	8011fa8 <__b2d+0x50>
 8011f7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011f82:	fa24 f10e 	lsr.w	r1, r4, lr
 8011f86:	42b7      	cmp	r7, r6
 8011f88:	ea41 030c 	orr.w	r3, r1, ip
 8011f8c:	bf34      	ite	cc
 8011f8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f92:	2100      	movcs	r1, #0
 8011f94:	3015      	adds	r0, #21
 8011f96:	fa04 f000 	lsl.w	r0, r4, r0
 8011f9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8011f9e:	ea40 0201 	orr.w	r2, r0, r1
 8011fa2:	ec43 2b10 	vmov	d0, r2, r3
 8011fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fa8:	42b7      	cmp	r7, r6
 8011faa:	bf3a      	itte	cc
 8011fac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011fb0:	f1a5 0608 	subcc.w	r6, r5, #8
 8011fb4:	2100      	movcs	r1, #0
 8011fb6:	380b      	subs	r0, #11
 8011fb8:	d017      	beq.n	8011fea <__b2d+0x92>
 8011fba:	f1c0 0c20 	rsb	ip, r0, #32
 8011fbe:	fa04 f500 	lsl.w	r5, r4, r0
 8011fc2:	42be      	cmp	r6, r7
 8011fc4:	fa21 f40c 	lsr.w	r4, r1, ip
 8011fc8:	ea45 0504 	orr.w	r5, r5, r4
 8011fcc:	bf8c      	ite	hi
 8011fce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011fd2:	2400      	movls	r4, #0
 8011fd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011fd8:	fa01 f000 	lsl.w	r0, r1, r0
 8011fdc:	fa24 f40c 	lsr.w	r4, r4, ip
 8011fe0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fe4:	ea40 0204 	orr.w	r2, r0, r4
 8011fe8:	e7db      	b.n	8011fa2 <__b2d+0x4a>
 8011fea:	ea44 030c 	orr.w	r3, r4, ip
 8011fee:	460a      	mov	r2, r1
 8011ff0:	e7d7      	b.n	8011fa2 <__b2d+0x4a>
 8011ff2:	bf00      	nop
 8011ff4:	3ff00000 	.word	0x3ff00000

08011ff8 <__d2b>:
 8011ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ffc:	4689      	mov	r9, r1
 8011ffe:	2101      	movs	r1, #1
 8012000:	ec57 6b10 	vmov	r6, r7, d0
 8012004:	4690      	mov	r8, r2
 8012006:	f7ff fc09 	bl	801181c <_Balloc>
 801200a:	4604      	mov	r4, r0
 801200c:	b930      	cbnz	r0, 801201c <__d2b+0x24>
 801200e:	4602      	mov	r2, r0
 8012010:	4b25      	ldr	r3, [pc, #148]	; (80120a8 <__d2b+0xb0>)
 8012012:	4826      	ldr	r0, [pc, #152]	; (80120ac <__d2b+0xb4>)
 8012014:	f240 310a 	movw	r1, #778	; 0x30a
 8012018:	f7fe f8d6 	bl	80101c8 <__assert_func>
 801201c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012024:	bb35      	cbnz	r5, 8012074 <__d2b+0x7c>
 8012026:	2e00      	cmp	r6, #0
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	d028      	beq.n	801207e <__d2b+0x86>
 801202c:	4668      	mov	r0, sp
 801202e:	9600      	str	r6, [sp, #0]
 8012030:	f7ff fd06 	bl	8011a40 <__lo0bits>
 8012034:	9900      	ldr	r1, [sp, #0]
 8012036:	b300      	cbz	r0, 801207a <__d2b+0x82>
 8012038:	9a01      	ldr	r2, [sp, #4]
 801203a:	f1c0 0320 	rsb	r3, r0, #32
 801203e:	fa02 f303 	lsl.w	r3, r2, r3
 8012042:	430b      	orrs	r3, r1
 8012044:	40c2      	lsrs	r2, r0
 8012046:	6163      	str	r3, [r4, #20]
 8012048:	9201      	str	r2, [sp, #4]
 801204a:	9b01      	ldr	r3, [sp, #4]
 801204c:	61a3      	str	r3, [r4, #24]
 801204e:	2b00      	cmp	r3, #0
 8012050:	bf14      	ite	ne
 8012052:	2202      	movne	r2, #2
 8012054:	2201      	moveq	r2, #1
 8012056:	6122      	str	r2, [r4, #16]
 8012058:	b1d5      	cbz	r5, 8012090 <__d2b+0x98>
 801205a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801205e:	4405      	add	r5, r0
 8012060:	f8c9 5000 	str.w	r5, [r9]
 8012064:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012068:	f8c8 0000 	str.w	r0, [r8]
 801206c:	4620      	mov	r0, r4
 801206e:	b003      	add	sp, #12
 8012070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012078:	e7d5      	b.n	8012026 <__d2b+0x2e>
 801207a:	6161      	str	r1, [r4, #20]
 801207c:	e7e5      	b.n	801204a <__d2b+0x52>
 801207e:	a801      	add	r0, sp, #4
 8012080:	f7ff fcde 	bl	8011a40 <__lo0bits>
 8012084:	9b01      	ldr	r3, [sp, #4]
 8012086:	6163      	str	r3, [r4, #20]
 8012088:	2201      	movs	r2, #1
 801208a:	6122      	str	r2, [r4, #16]
 801208c:	3020      	adds	r0, #32
 801208e:	e7e3      	b.n	8012058 <__d2b+0x60>
 8012090:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012094:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012098:	f8c9 0000 	str.w	r0, [r9]
 801209c:	6918      	ldr	r0, [r3, #16]
 801209e:	f7ff fcaf 	bl	8011a00 <__hi0bits>
 80120a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120a6:	e7df      	b.n	8012068 <__d2b+0x70>
 80120a8:	08013971 	.word	0x08013971
 80120ac:	080139fc 	.word	0x080139fc

080120b0 <__ratio>:
 80120b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	4688      	mov	r8, r1
 80120b6:	4669      	mov	r1, sp
 80120b8:	4681      	mov	r9, r0
 80120ba:	f7ff ff4d 	bl	8011f58 <__b2d>
 80120be:	a901      	add	r1, sp, #4
 80120c0:	4640      	mov	r0, r8
 80120c2:	ec55 4b10 	vmov	r4, r5, d0
 80120c6:	f7ff ff47 	bl	8011f58 <__b2d>
 80120ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80120ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80120d2:	eba3 0c02 	sub.w	ip, r3, r2
 80120d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80120da:	1a9b      	subs	r3, r3, r2
 80120dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80120e0:	ec51 0b10 	vmov	r0, r1, d0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	bfd6      	itet	le
 80120e8:	460a      	movle	r2, r1
 80120ea:	462a      	movgt	r2, r5
 80120ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80120f0:	468b      	mov	fp, r1
 80120f2:	462f      	mov	r7, r5
 80120f4:	bfd4      	ite	le
 80120f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80120fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80120fe:	4620      	mov	r0, r4
 8012100:	ee10 2a10 	vmov	r2, s0
 8012104:	465b      	mov	r3, fp
 8012106:	4639      	mov	r1, r7
 8012108:	f7ee fbb8 	bl	800087c <__aeabi_ddiv>
 801210c:	ec41 0b10 	vmov	d0, r0, r1
 8012110:	b003      	add	sp, #12
 8012112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012116 <__copybits>:
 8012116:	3901      	subs	r1, #1
 8012118:	b570      	push	{r4, r5, r6, lr}
 801211a:	1149      	asrs	r1, r1, #5
 801211c:	6914      	ldr	r4, [r2, #16]
 801211e:	3101      	adds	r1, #1
 8012120:	f102 0314 	add.w	r3, r2, #20
 8012124:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012128:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801212c:	1f05      	subs	r5, r0, #4
 801212e:	42a3      	cmp	r3, r4
 8012130:	d30c      	bcc.n	801214c <__copybits+0x36>
 8012132:	1aa3      	subs	r3, r4, r2
 8012134:	3b11      	subs	r3, #17
 8012136:	f023 0303 	bic.w	r3, r3, #3
 801213a:	3211      	adds	r2, #17
 801213c:	42a2      	cmp	r2, r4
 801213e:	bf88      	it	hi
 8012140:	2300      	movhi	r3, #0
 8012142:	4418      	add	r0, r3
 8012144:	2300      	movs	r3, #0
 8012146:	4288      	cmp	r0, r1
 8012148:	d305      	bcc.n	8012156 <__copybits+0x40>
 801214a:	bd70      	pop	{r4, r5, r6, pc}
 801214c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012150:	f845 6f04 	str.w	r6, [r5, #4]!
 8012154:	e7eb      	b.n	801212e <__copybits+0x18>
 8012156:	f840 3b04 	str.w	r3, [r0], #4
 801215a:	e7f4      	b.n	8012146 <__copybits+0x30>

0801215c <__any_on>:
 801215c:	f100 0214 	add.w	r2, r0, #20
 8012160:	6900      	ldr	r0, [r0, #16]
 8012162:	114b      	asrs	r3, r1, #5
 8012164:	4298      	cmp	r0, r3
 8012166:	b510      	push	{r4, lr}
 8012168:	db11      	blt.n	801218e <__any_on+0x32>
 801216a:	dd0a      	ble.n	8012182 <__any_on+0x26>
 801216c:	f011 011f 	ands.w	r1, r1, #31
 8012170:	d007      	beq.n	8012182 <__any_on+0x26>
 8012172:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012176:	fa24 f001 	lsr.w	r0, r4, r1
 801217a:	fa00 f101 	lsl.w	r1, r0, r1
 801217e:	428c      	cmp	r4, r1
 8012180:	d10b      	bne.n	801219a <__any_on+0x3e>
 8012182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012186:	4293      	cmp	r3, r2
 8012188:	d803      	bhi.n	8012192 <__any_on+0x36>
 801218a:	2000      	movs	r0, #0
 801218c:	bd10      	pop	{r4, pc}
 801218e:	4603      	mov	r3, r0
 8012190:	e7f7      	b.n	8012182 <__any_on+0x26>
 8012192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012196:	2900      	cmp	r1, #0
 8012198:	d0f5      	beq.n	8012186 <__any_on+0x2a>
 801219a:	2001      	movs	r0, #1
 801219c:	e7f6      	b.n	801218c <__any_on+0x30>

0801219e <_calloc_r>:
 801219e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121a0:	fba1 2402 	umull	r2, r4, r1, r2
 80121a4:	b94c      	cbnz	r4, 80121ba <_calloc_r+0x1c>
 80121a6:	4611      	mov	r1, r2
 80121a8:	9201      	str	r2, [sp, #4]
 80121aa:	f7fc fb29 	bl	800e800 <_malloc_r>
 80121ae:	9a01      	ldr	r2, [sp, #4]
 80121b0:	4605      	mov	r5, r0
 80121b2:	b930      	cbnz	r0, 80121c2 <_calloc_r+0x24>
 80121b4:	4628      	mov	r0, r5
 80121b6:	b003      	add	sp, #12
 80121b8:	bd30      	pop	{r4, r5, pc}
 80121ba:	220c      	movs	r2, #12
 80121bc:	6002      	str	r2, [r0, #0]
 80121be:	2500      	movs	r5, #0
 80121c0:	e7f8      	b.n	80121b4 <_calloc_r+0x16>
 80121c2:	4621      	mov	r1, r4
 80121c4:	f7fc faf3 	bl	800e7ae <memset>
 80121c8:	e7f4      	b.n	80121b4 <_calloc_r+0x16>
	...

080121cc <_free_r>:
 80121cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121ce:	2900      	cmp	r1, #0
 80121d0:	d044      	beq.n	801225c <_free_r+0x90>
 80121d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121d6:	9001      	str	r0, [sp, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f1a1 0404 	sub.w	r4, r1, #4
 80121de:	bfb8      	it	lt
 80121e0:	18e4      	addlt	r4, r4, r3
 80121e2:	f7ff fb0f 	bl	8011804 <__malloc_lock>
 80121e6:	4a1e      	ldr	r2, [pc, #120]	; (8012260 <_free_r+0x94>)
 80121e8:	9801      	ldr	r0, [sp, #4]
 80121ea:	6813      	ldr	r3, [r2, #0]
 80121ec:	b933      	cbnz	r3, 80121fc <_free_r+0x30>
 80121ee:	6063      	str	r3, [r4, #4]
 80121f0:	6014      	str	r4, [r2, #0]
 80121f2:	b003      	add	sp, #12
 80121f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121f8:	f7ff bb0a 	b.w	8011810 <__malloc_unlock>
 80121fc:	42a3      	cmp	r3, r4
 80121fe:	d908      	bls.n	8012212 <_free_r+0x46>
 8012200:	6825      	ldr	r5, [r4, #0]
 8012202:	1961      	adds	r1, r4, r5
 8012204:	428b      	cmp	r3, r1
 8012206:	bf01      	itttt	eq
 8012208:	6819      	ldreq	r1, [r3, #0]
 801220a:	685b      	ldreq	r3, [r3, #4]
 801220c:	1949      	addeq	r1, r1, r5
 801220e:	6021      	streq	r1, [r4, #0]
 8012210:	e7ed      	b.n	80121ee <_free_r+0x22>
 8012212:	461a      	mov	r2, r3
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	b10b      	cbz	r3, 801221c <_free_r+0x50>
 8012218:	42a3      	cmp	r3, r4
 801221a:	d9fa      	bls.n	8012212 <_free_r+0x46>
 801221c:	6811      	ldr	r1, [r2, #0]
 801221e:	1855      	adds	r5, r2, r1
 8012220:	42a5      	cmp	r5, r4
 8012222:	d10b      	bne.n	801223c <_free_r+0x70>
 8012224:	6824      	ldr	r4, [r4, #0]
 8012226:	4421      	add	r1, r4
 8012228:	1854      	adds	r4, r2, r1
 801222a:	42a3      	cmp	r3, r4
 801222c:	6011      	str	r1, [r2, #0]
 801222e:	d1e0      	bne.n	80121f2 <_free_r+0x26>
 8012230:	681c      	ldr	r4, [r3, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	6053      	str	r3, [r2, #4]
 8012236:	4421      	add	r1, r4
 8012238:	6011      	str	r1, [r2, #0]
 801223a:	e7da      	b.n	80121f2 <_free_r+0x26>
 801223c:	d902      	bls.n	8012244 <_free_r+0x78>
 801223e:	230c      	movs	r3, #12
 8012240:	6003      	str	r3, [r0, #0]
 8012242:	e7d6      	b.n	80121f2 <_free_r+0x26>
 8012244:	6825      	ldr	r5, [r4, #0]
 8012246:	1961      	adds	r1, r4, r5
 8012248:	428b      	cmp	r3, r1
 801224a:	bf04      	itt	eq
 801224c:	6819      	ldreq	r1, [r3, #0]
 801224e:	685b      	ldreq	r3, [r3, #4]
 8012250:	6063      	str	r3, [r4, #4]
 8012252:	bf04      	itt	eq
 8012254:	1949      	addeq	r1, r1, r5
 8012256:	6021      	streq	r1, [r4, #0]
 8012258:	6054      	str	r4, [r2, #4]
 801225a:	e7ca      	b.n	80121f2 <_free_r+0x26>
 801225c:	b003      	add	sp, #12
 801225e:	bd30      	pop	{r4, r5, pc}
 8012260:	200051f8 	.word	0x200051f8

08012264 <__ssputs_r>:
 8012264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012268:	688e      	ldr	r6, [r1, #8]
 801226a:	429e      	cmp	r6, r3
 801226c:	4682      	mov	sl, r0
 801226e:	460c      	mov	r4, r1
 8012270:	4690      	mov	r8, r2
 8012272:	461f      	mov	r7, r3
 8012274:	d838      	bhi.n	80122e8 <__ssputs_r+0x84>
 8012276:	898a      	ldrh	r2, [r1, #12]
 8012278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801227c:	d032      	beq.n	80122e4 <__ssputs_r+0x80>
 801227e:	6825      	ldr	r5, [r4, #0]
 8012280:	6909      	ldr	r1, [r1, #16]
 8012282:	eba5 0901 	sub.w	r9, r5, r1
 8012286:	6965      	ldr	r5, [r4, #20]
 8012288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801228c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012290:	3301      	adds	r3, #1
 8012292:	444b      	add	r3, r9
 8012294:	106d      	asrs	r5, r5, #1
 8012296:	429d      	cmp	r5, r3
 8012298:	bf38      	it	cc
 801229a:	461d      	movcc	r5, r3
 801229c:	0553      	lsls	r3, r2, #21
 801229e:	d531      	bpl.n	8012304 <__ssputs_r+0xa0>
 80122a0:	4629      	mov	r1, r5
 80122a2:	f7fc faad 	bl	800e800 <_malloc_r>
 80122a6:	4606      	mov	r6, r0
 80122a8:	b950      	cbnz	r0, 80122c0 <__ssputs_r+0x5c>
 80122aa:	230c      	movs	r3, #12
 80122ac:	f8ca 3000 	str.w	r3, [sl]
 80122b0:	89a3      	ldrh	r3, [r4, #12]
 80122b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122b6:	81a3      	strh	r3, [r4, #12]
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295
 80122bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c0:	6921      	ldr	r1, [r4, #16]
 80122c2:	464a      	mov	r2, r9
 80122c4:	f7fc fa65 	bl	800e792 <memcpy>
 80122c8:	89a3      	ldrh	r3, [r4, #12]
 80122ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80122ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122d2:	81a3      	strh	r3, [r4, #12]
 80122d4:	6126      	str	r6, [r4, #16]
 80122d6:	6165      	str	r5, [r4, #20]
 80122d8:	444e      	add	r6, r9
 80122da:	eba5 0509 	sub.w	r5, r5, r9
 80122de:	6026      	str	r6, [r4, #0]
 80122e0:	60a5      	str	r5, [r4, #8]
 80122e2:	463e      	mov	r6, r7
 80122e4:	42be      	cmp	r6, r7
 80122e6:	d900      	bls.n	80122ea <__ssputs_r+0x86>
 80122e8:	463e      	mov	r6, r7
 80122ea:	6820      	ldr	r0, [r4, #0]
 80122ec:	4632      	mov	r2, r6
 80122ee:	4641      	mov	r1, r8
 80122f0:	f000 fbd8 	bl	8012aa4 <memmove>
 80122f4:	68a3      	ldr	r3, [r4, #8]
 80122f6:	1b9b      	subs	r3, r3, r6
 80122f8:	60a3      	str	r3, [r4, #8]
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	4433      	add	r3, r6
 80122fe:	6023      	str	r3, [r4, #0]
 8012300:	2000      	movs	r0, #0
 8012302:	e7db      	b.n	80122bc <__ssputs_r+0x58>
 8012304:	462a      	mov	r2, r5
 8012306:	f000 fbe7 	bl	8012ad8 <_realloc_r>
 801230a:	4606      	mov	r6, r0
 801230c:	2800      	cmp	r0, #0
 801230e:	d1e1      	bne.n	80122d4 <__ssputs_r+0x70>
 8012310:	6921      	ldr	r1, [r4, #16]
 8012312:	4650      	mov	r0, sl
 8012314:	f7ff ff5a 	bl	80121cc <_free_r>
 8012318:	e7c7      	b.n	80122aa <__ssputs_r+0x46>
	...

0801231c <_svfiprintf_r>:
 801231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012320:	4698      	mov	r8, r3
 8012322:	898b      	ldrh	r3, [r1, #12]
 8012324:	061b      	lsls	r3, r3, #24
 8012326:	b09d      	sub	sp, #116	; 0x74
 8012328:	4607      	mov	r7, r0
 801232a:	460d      	mov	r5, r1
 801232c:	4614      	mov	r4, r2
 801232e:	d50e      	bpl.n	801234e <_svfiprintf_r+0x32>
 8012330:	690b      	ldr	r3, [r1, #16]
 8012332:	b963      	cbnz	r3, 801234e <_svfiprintf_r+0x32>
 8012334:	2140      	movs	r1, #64	; 0x40
 8012336:	f7fc fa63 	bl	800e800 <_malloc_r>
 801233a:	6028      	str	r0, [r5, #0]
 801233c:	6128      	str	r0, [r5, #16]
 801233e:	b920      	cbnz	r0, 801234a <_svfiprintf_r+0x2e>
 8012340:	230c      	movs	r3, #12
 8012342:	603b      	str	r3, [r7, #0]
 8012344:	f04f 30ff 	mov.w	r0, #4294967295
 8012348:	e0d1      	b.n	80124ee <_svfiprintf_r+0x1d2>
 801234a:	2340      	movs	r3, #64	; 0x40
 801234c:	616b      	str	r3, [r5, #20]
 801234e:	2300      	movs	r3, #0
 8012350:	9309      	str	r3, [sp, #36]	; 0x24
 8012352:	2320      	movs	r3, #32
 8012354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012358:	f8cd 800c 	str.w	r8, [sp, #12]
 801235c:	2330      	movs	r3, #48	; 0x30
 801235e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012508 <_svfiprintf_r+0x1ec>
 8012362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012366:	f04f 0901 	mov.w	r9, #1
 801236a:	4623      	mov	r3, r4
 801236c:	469a      	mov	sl, r3
 801236e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012372:	b10a      	cbz	r2, 8012378 <_svfiprintf_r+0x5c>
 8012374:	2a25      	cmp	r2, #37	; 0x25
 8012376:	d1f9      	bne.n	801236c <_svfiprintf_r+0x50>
 8012378:	ebba 0b04 	subs.w	fp, sl, r4
 801237c:	d00b      	beq.n	8012396 <_svfiprintf_r+0x7a>
 801237e:	465b      	mov	r3, fp
 8012380:	4622      	mov	r2, r4
 8012382:	4629      	mov	r1, r5
 8012384:	4638      	mov	r0, r7
 8012386:	f7ff ff6d 	bl	8012264 <__ssputs_r>
 801238a:	3001      	adds	r0, #1
 801238c:	f000 80aa 	beq.w	80124e4 <_svfiprintf_r+0x1c8>
 8012390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012392:	445a      	add	r2, fp
 8012394:	9209      	str	r2, [sp, #36]	; 0x24
 8012396:	f89a 3000 	ldrb.w	r3, [sl]
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 80a2 	beq.w	80124e4 <_svfiprintf_r+0x1c8>
 80123a0:	2300      	movs	r3, #0
 80123a2:	f04f 32ff 	mov.w	r2, #4294967295
 80123a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123aa:	f10a 0a01 	add.w	sl, sl, #1
 80123ae:	9304      	str	r3, [sp, #16]
 80123b0:	9307      	str	r3, [sp, #28]
 80123b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123b6:	931a      	str	r3, [sp, #104]	; 0x68
 80123b8:	4654      	mov	r4, sl
 80123ba:	2205      	movs	r2, #5
 80123bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123c0:	4851      	ldr	r0, [pc, #324]	; (8012508 <_svfiprintf_r+0x1ec>)
 80123c2:	f7ed ff25 	bl	8000210 <memchr>
 80123c6:	9a04      	ldr	r2, [sp, #16]
 80123c8:	b9d8      	cbnz	r0, 8012402 <_svfiprintf_r+0xe6>
 80123ca:	06d0      	lsls	r0, r2, #27
 80123cc:	bf44      	itt	mi
 80123ce:	2320      	movmi	r3, #32
 80123d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123d4:	0711      	lsls	r1, r2, #28
 80123d6:	bf44      	itt	mi
 80123d8:	232b      	movmi	r3, #43	; 0x2b
 80123da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123de:	f89a 3000 	ldrb.w	r3, [sl]
 80123e2:	2b2a      	cmp	r3, #42	; 0x2a
 80123e4:	d015      	beq.n	8012412 <_svfiprintf_r+0xf6>
 80123e6:	9a07      	ldr	r2, [sp, #28]
 80123e8:	4654      	mov	r4, sl
 80123ea:	2000      	movs	r0, #0
 80123ec:	f04f 0c0a 	mov.w	ip, #10
 80123f0:	4621      	mov	r1, r4
 80123f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123f6:	3b30      	subs	r3, #48	; 0x30
 80123f8:	2b09      	cmp	r3, #9
 80123fa:	d94e      	bls.n	801249a <_svfiprintf_r+0x17e>
 80123fc:	b1b0      	cbz	r0, 801242c <_svfiprintf_r+0x110>
 80123fe:	9207      	str	r2, [sp, #28]
 8012400:	e014      	b.n	801242c <_svfiprintf_r+0x110>
 8012402:	eba0 0308 	sub.w	r3, r0, r8
 8012406:	fa09 f303 	lsl.w	r3, r9, r3
 801240a:	4313      	orrs	r3, r2
 801240c:	9304      	str	r3, [sp, #16]
 801240e:	46a2      	mov	sl, r4
 8012410:	e7d2      	b.n	80123b8 <_svfiprintf_r+0x9c>
 8012412:	9b03      	ldr	r3, [sp, #12]
 8012414:	1d19      	adds	r1, r3, #4
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	9103      	str	r1, [sp, #12]
 801241a:	2b00      	cmp	r3, #0
 801241c:	bfbb      	ittet	lt
 801241e:	425b      	neglt	r3, r3
 8012420:	f042 0202 	orrlt.w	r2, r2, #2
 8012424:	9307      	strge	r3, [sp, #28]
 8012426:	9307      	strlt	r3, [sp, #28]
 8012428:	bfb8      	it	lt
 801242a:	9204      	strlt	r2, [sp, #16]
 801242c:	7823      	ldrb	r3, [r4, #0]
 801242e:	2b2e      	cmp	r3, #46	; 0x2e
 8012430:	d10c      	bne.n	801244c <_svfiprintf_r+0x130>
 8012432:	7863      	ldrb	r3, [r4, #1]
 8012434:	2b2a      	cmp	r3, #42	; 0x2a
 8012436:	d135      	bne.n	80124a4 <_svfiprintf_r+0x188>
 8012438:	9b03      	ldr	r3, [sp, #12]
 801243a:	1d1a      	adds	r2, r3, #4
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	9203      	str	r2, [sp, #12]
 8012440:	2b00      	cmp	r3, #0
 8012442:	bfb8      	it	lt
 8012444:	f04f 33ff 	movlt.w	r3, #4294967295
 8012448:	3402      	adds	r4, #2
 801244a:	9305      	str	r3, [sp, #20]
 801244c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012518 <_svfiprintf_r+0x1fc>
 8012450:	7821      	ldrb	r1, [r4, #0]
 8012452:	2203      	movs	r2, #3
 8012454:	4650      	mov	r0, sl
 8012456:	f7ed fedb 	bl	8000210 <memchr>
 801245a:	b140      	cbz	r0, 801246e <_svfiprintf_r+0x152>
 801245c:	2340      	movs	r3, #64	; 0x40
 801245e:	eba0 000a 	sub.w	r0, r0, sl
 8012462:	fa03 f000 	lsl.w	r0, r3, r0
 8012466:	9b04      	ldr	r3, [sp, #16]
 8012468:	4303      	orrs	r3, r0
 801246a:	3401      	adds	r4, #1
 801246c:	9304      	str	r3, [sp, #16]
 801246e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012472:	4826      	ldr	r0, [pc, #152]	; (801250c <_svfiprintf_r+0x1f0>)
 8012474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012478:	2206      	movs	r2, #6
 801247a:	f7ed fec9 	bl	8000210 <memchr>
 801247e:	2800      	cmp	r0, #0
 8012480:	d038      	beq.n	80124f4 <_svfiprintf_r+0x1d8>
 8012482:	4b23      	ldr	r3, [pc, #140]	; (8012510 <_svfiprintf_r+0x1f4>)
 8012484:	bb1b      	cbnz	r3, 80124ce <_svfiprintf_r+0x1b2>
 8012486:	9b03      	ldr	r3, [sp, #12]
 8012488:	3307      	adds	r3, #7
 801248a:	f023 0307 	bic.w	r3, r3, #7
 801248e:	3308      	adds	r3, #8
 8012490:	9303      	str	r3, [sp, #12]
 8012492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012494:	4433      	add	r3, r6
 8012496:	9309      	str	r3, [sp, #36]	; 0x24
 8012498:	e767      	b.n	801236a <_svfiprintf_r+0x4e>
 801249a:	fb0c 3202 	mla	r2, ip, r2, r3
 801249e:	460c      	mov	r4, r1
 80124a0:	2001      	movs	r0, #1
 80124a2:	e7a5      	b.n	80123f0 <_svfiprintf_r+0xd4>
 80124a4:	2300      	movs	r3, #0
 80124a6:	3401      	adds	r4, #1
 80124a8:	9305      	str	r3, [sp, #20]
 80124aa:	4619      	mov	r1, r3
 80124ac:	f04f 0c0a 	mov.w	ip, #10
 80124b0:	4620      	mov	r0, r4
 80124b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124b6:	3a30      	subs	r2, #48	; 0x30
 80124b8:	2a09      	cmp	r2, #9
 80124ba:	d903      	bls.n	80124c4 <_svfiprintf_r+0x1a8>
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d0c5      	beq.n	801244c <_svfiprintf_r+0x130>
 80124c0:	9105      	str	r1, [sp, #20]
 80124c2:	e7c3      	b.n	801244c <_svfiprintf_r+0x130>
 80124c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80124c8:	4604      	mov	r4, r0
 80124ca:	2301      	movs	r3, #1
 80124cc:	e7f0      	b.n	80124b0 <_svfiprintf_r+0x194>
 80124ce:	ab03      	add	r3, sp, #12
 80124d0:	9300      	str	r3, [sp, #0]
 80124d2:	462a      	mov	r2, r5
 80124d4:	4b0f      	ldr	r3, [pc, #60]	; (8012514 <_svfiprintf_r+0x1f8>)
 80124d6:	a904      	add	r1, sp, #16
 80124d8:	4638      	mov	r0, r7
 80124da:	f7fc faa5 	bl	800ea28 <_printf_float>
 80124de:	1c42      	adds	r2, r0, #1
 80124e0:	4606      	mov	r6, r0
 80124e2:	d1d6      	bne.n	8012492 <_svfiprintf_r+0x176>
 80124e4:	89ab      	ldrh	r3, [r5, #12]
 80124e6:	065b      	lsls	r3, r3, #25
 80124e8:	f53f af2c 	bmi.w	8012344 <_svfiprintf_r+0x28>
 80124ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124ee:	b01d      	add	sp, #116	; 0x74
 80124f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f4:	ab03      	add	r3, sp, #12
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	462a      	mov	r2, r5
 80124fa:	4b06      	ldr	r3, [pc, #24]	; (8012514 <_svfiprintf_r+0x1f8>)
 80124fc:	a904      	add	r1, sp, #16
 80124fe:	4638      	mov	r0, r7
 8012500:	f7fc fd36 	bl	800ef70 <_printf_i>
 8012504:	e7eb      	b.n	80124de <_svfiprintf_r+0x1c2>
 8012506:	bf00      	nop
 8012508:	08013b54 	.word	0x08013b54
 801250c:	08013b5e 	.word	0x08013b5e
 8012510:	0800ea29 	.word	0x0800ea29
 8012514:	08012265 	.word	0x08012265
 8012518:	08013b5a 	.word	0x08013b5a

0801251c <__sfputc_r>:
 801251c:	6893      	ldr	r3, [r2, #8]
 801251e:	3b01      	subs	r3, #1
 8012520:	2b00      	cmp	r3, #0
 8012522:	b410      	push	{r4}
 8012524:	6093      	str	r3, [r2, #8]
 8012526:	da08      	bge.n	801253a <__sfputc_r+0x1e>
 8012528:	6994      	ldr	r4, [r2, #24]
 801252a:	42a3      	cmp	r3, r4
 801252c:	db01      	blt.n	8012532 <__sfputc_r+0x16>
 801252e:	290a      	cmp	r1, #10
 8012530:	d103      	bne.n	801253a <__sfputc_r+0x1e>
 8012532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012536:	f000 b97b 	b.w	8012830 <__swbuf_r>
 801253a:	6813      	ldr	r3, [r2, #0]
 801253c:	1c58      	adds	r0, r3, #1
 801253e:	6010      	str	r0, [r2, #0]
 8012540:	7019      	strb	r1, [r3, #0]
 8012542:	4608      	mov	r0, r1
 8012544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012548:	4770      	bx	lr

0801254a <__sfputs_r>:
 801254a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801254c:	4606      	mov	r6, r0
 801254e:	460f      	mov	r7, r1
 8012550:	4614      	mov	r4, r2
 8012552:	18d5      	adds	r5, r2, r3
 8012554:	42ac      	cmp	r4, r5
 8012556:	d101      	bne.n	801255c <__sfputs_r+0x12>
 8012558:	2000      	movs	r0, #0
 801255a:	e007      	b.n	801256c <__sfputs_r+0x22>
 801255c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012560:	463a      	mov	r2, r7
 8012562:	4630      	mov	r0, r6
 8012564:	f7ff ffda 	bl	801251c <__sfputc_r>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d1f3      	bne.n	8012554 <__sfputs_r+0xa>
 801256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012570 <_vfiprintf_r>:
 8012570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012574:	460d      	mov	r5, r1
 8012576:	b09d      	sub	sp, #116	; 0x74
 8012578:	4614      	mov	r4, r2
 801257a:	4698      	mov	r8, r3
 801257c:	4606      	mov	r6, r0
 801257e:	b118      	cbz	r0, 8012588 <_vfiprintf_r+0x18>
 8012580:	6983      	ldr	r3, [r0, #24]
 8012582:	b90b      	cbnz	r3, 8012588 <_vfiprintf_r+0x18>
 8012584:	f7fc f840 	bl	800e608 <__sinit>
 8012588:	4b89      	ldr	r3, [pc, #548]	; (80127b0 <_vfiprintf_r+0x240>)
 801258a:	429d      	cmp	r5, r3
 801258c:	d11b      	bne.n	80125c6 <_vfiprintf_r+0x56>
 801258e:	6875      	ldr	r5, [r6, #4]
 8012590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012592:	07d9      	lsls	r1, r3, #31
 8012594:	d405      	bmi.n	80125a2 <_vfiprintf_r+0x32>
 8012596:	89ab      	ldrh	r3, [r5, #12]
 8012598:	059a      	lsls	r2, r3, #22
 801259a:	d402      	bmi.n	80125a2 <_vfiprintf_r+0x32>
 801259c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801259e:	f7fc f8f6 	bl	800e78e <__retarget_lock_acquire_recursive>
 80125a2:	89ab      	ldrh	r3, [r5, #12]
 80125a4:	071b      	lsls	r3, r3, #28
 80125a6:	d501      	bpl.n	80125ac <_vfiprintf_r+0x3c>
 80125a8:	692b      	ldr	r3, [r5, #16]
 80125aa:	b9eb      	cbnz	r3, 80125e8 <_vfiprintf_r+0x78>
 80125ac:	4629      	mov	r1, r5
 80125ae:	4630      	mov	r0, r6
 80125b0:	f000 f99e 	bl	80128f0 <__swsetup_r>
 80125b4:	b1c0      	cbz	r0, 80125e8 <_vfiprintf_r+0x78>
 80125b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125b8:	07dc      	lsls	r4, r3, #31
 80125ba:	d50e      	bpl.n	80125da <_vfiprintf_r+0x6a>
 80125bc:	f04f 30ff 	mov.w	r0, #4294967295
 80125c0:	b01d      	add	sp, #116	; 0x74
 80125c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c6:	4b7b      	ldr	r3, [pc, #492]	; (80127b4 <_vfiprintf_r+0x244>)
 80125c8:	429d      	cmp	r5, r3
 80125ca:	d101      	bne.n	80125d0 <_vfiprintf_r+0x60>
 80125cc:	68b5      	ldr	r5, [r6, #8]
 80125ce:	e7df      	b.n	8012590 <_vfiprintf_r+0x20>
 80125d0:	4b79      	ldr	r3, [pc, #484]	; (80127b8 <_vfiprintf_r+0x248>)
 80125d2:	429d      	cmp	r5, r3
 80125d4:	bf08      	it	eq
 80125d6:	68f5      	ldreq	r5, [r6, #12]
 80125d8:	e7da      	b.n	8012590 <_vfiprintf_r+0x20>
 80125da:	89ab      	ldrh	r3, [r5, #12]
 80125dc:	0598      	lsls	r0, r3, #22
 80125de:	d4ed      	bmi.n	80125bc <_vfiprintf_r+0x4c>
 80125e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125e2:	f7fc f8d5 	bl	800e790 <__retarget_lock_release_recursive>
 80125e6:	e7e9      	b.n	80125bc <_vfiprintf_r+0x4c>
 80125e8:	2300      	movs	r3, #0
 80125ea:	9309      	str	r3, [sp, #36]	; 0x24
 80125ec:	2320      	movs	r3, #32
 80125ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80125f6:	2330      	movs	r3, #48	; 0x30
 80125f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80127bc <_vfiprintf_r+0x24c>
 80125fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012600:	f04f 0901 	mov.w	r9, #1
 8012604:	4623      	mov	r3, r4
 8012606:	469a      	mov	sl, r3
 8012608:	f813 2b01 	ldrb.w	r2, [r3], #1
 801260c:	b10a      	cbz	r2, 8012612 <_vfiprintf_r+0xa2>
 801260e:	2a25      	cmp	r2, #37	; 0x25
 8012610:	d1f9      	bne.n	8012606 <_vfiprintf_r+0x96>
 8012612:	ebba 0b04 	subs.w	fp, sl, r4
 8012616:	d00b      	beq.n	8012630 <_vfiprintf_r+0xc0>
 8012618:	465b      	mov	r3, fp
 801261a:	4622      	mov	r2, r4
 801261c:	4629      	mov	r1, r5
 801261e:	4630      	mov	r0, r6
 8012620:	f7ff ff93 	bl	801254a <__sfputs_r>
 8012624:	3001      	adds	r0, #1
 8012626:	f000 80aa 	beq.w	801277e <_vfiprintf_r+0x20e>
 801262a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801262c:	445a      	add	r2, fp
 801262e:	9209      	str	r2, [sp, #36]	; 0x24
 8012630:	f89a 3000 	ldrb.w	r3, [sl]
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 80a2 	beq.w	801277e <_vfiprintf_r+0x20e>
 801263a:	2300      	movs	r3, #0
 801263c:	f04f 32ff 	mov.w	r2, #4294967295
 8012640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012644:	f10a 0a01 	add.w	sl, sl, #1
 8012648:	9304      	str	r3, [sp, #16]
 801264a:	9307      	str	r3, [sp, #28]
 801264c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012650:	931a      	str	r3, [sp, #104]	; 0x68
 8012652:	4654      	mov	r4, sl
 8012654:	2205      	movs	r2, #5
 8012656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801265a:	4858      	ldr	r0, [pc, #352]	; (80127bc <_vfiprintf_r+0x24c>)
 801265c:	f7ed fdd8 	bl	8000210 <memchr>
 8012660:	9a04      	ldr	r2, [sp, #16]
 8012662:	b9d8      	cbnz	r0, 801269c <_vfiprintf_r+0x12c>
 8012664:	06d1      	lsls	r1, r2, #27
 8012666:	bf44      	itt	mi
 8012668:	2320      	movmi	r3, #32
 801266a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801266e:	0713      	lsls	r3, r2, #28
 8012670:	bf44      	itt	mi
 8012672:	232b      	movmi	r3, #43	; 0x2b
 8012674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012678:	f89a 3000 	ldrb.w	r3, [sl]
 801267c:	2b2a      	cmp	r3, #42	; 0x2a
 801267e:	d015      	beq.n	80126ac <_vfiprintf_r+0x13c>
 8012680:	9a07      	ldr	r2, [sp, #28]
 8012682:	4654      	mov	r4, sl
 8012684:	2000      	movs	r0, #0
 8012686:	f04f 0c0a 	mov.w	ip, #10
 801268a:	4621      	mov	r1, r4
 801268c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012690:	3b30      	subs	r3, #48	; 0x30
 8012692:	2b09      	cmp	r3, #9
 8012694:	d94e      	bls.n	8012734 <_vfiprintf_r+0x1c4>
 8012696:	b1b0      	cbz	r0, 80126c6 <_vfiprintf_r+0x156>
 8012698:	9207      	str	r2, [sp, #28]
 801269a:	e014      	b.n	80126c6 <_vfiprintf_r+0x156>
 801269c:	eba0 0308 	sub.w	r3, r0, r8
 80126a0:	fa09 f303 	lsl.w	r3, r9, r3
 80126a4:	4313      	orrs	r3, r2
 80126a6:	9304      	str	r3, [sp, #16]
 80126a8:	46a2      	mov	sl, r4
 80126aa:	e7d2      	b.n	8012652 <_vfiprintf_r+0xe2>
 80126ac:	9b03      	ldr	r3, [sp, #12]
 80126ae:	1d19      	adds	r1, r3, #4
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	9103      	str	r1, [sp, #12]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	bfbb      	ittet	lt
 80126b8:	425b      	neglt	r3, r3
 80126ba:	f042 0202 	orrlt.w	r2, r2, #2
 80126be:	9307      	strge	r3, [sp, #28]
 80126c0:	9307      	strlt	r3, [sp, #28]
 80126c2:	bfb8      	it	lt
 80126c4:	9204      	strlt	r2, [sp, #16]
 80126c6:	7823      	ldrb	r3, [r4, #0]
 80126c8:	2b2e      	cmp	r3, #46	; 0x2e
 80126ca:	d10c      	bne.n	80126e6 <_vfiprintf_r+0x176>
 80126cc:	7863      	ldrb	r3, [r4, #1]
 80126ce:	2b2a      	cmp	r3, #42	; 0x2a
 80126d0:	d135      	bne.n	801273e <_vfiprintf_r+0x1ce>
 80126d2:	9b03      	ldr	r3, [sp, #12]
 80126d4:	1d1a      	adds	r2, r3, #4
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	9203      	str	r2, [sp, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	bfb8      	it	lt
 80126de:	f04f 33ff 	movlt.w	r3, #4294967295
 80126e2:	3402      	adds	r4, #2
 80126e4:	9305      	str	r3, [sp, #20]
 80126e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80127cc <_vfiprintf_r+0x25c>
 80126ea:	7821      	ldrb	r1, [r4, #0]
 80126ec:	2203      	movs	r2, #3
 80126ee:	4650      	mov	r0, sl
 80126f0:	f7ed fd8e 	bl	8000210 <memchr>
 80126f4:	b140      	cbz	r0, 8012708 <_vfiprintf_r+0x198>
 80126f6:	2340      	movs	r3, #64	; 0x40
 80126f8:	eba0 000a 	sub.w	r0, r0, sl
 80126fc:	fa03 f000 	lsl.w	r0, r3, r0
 8012700:	9b04      	ldr	r3, [sp, #16]
 8012702:	4303      	orrs	r3, r0
 8012704:	3401      	adds	r4, #1
 8012706:	9304      	str	r3, [sp, #16]
 8012708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801270c:	482c      	ldr	r0, [pc, #176]	; (80127c0 <_vfiprintf_r+0x250>)
 801270e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012712:	2206      	movs	r2, #6
 8012714:	f7ed fd7c 	bl	8000210 <memchr>
 8012718:	2800      	cmp	r0, #0
 801271a:	d03f      	beq.n	801279c <_vfiprintf_r+0x22c>
 801271c:	4b29      	ldr	r3, [pc, #164]	; (80127c4 <_vfiprintf_r+0x254>)
 801271e:	bb1b      	cbnz	r3, 8012768 <_vfiprintf_r+0x1f8>
 8012720:	9b03      	ldr	r3, [sp, #12]
 8012722:	3307      	adds	r3, #7
 8012724:	f023 0307 	bic.w	r3, r3, #7
 8012728:	3308      	adds	r3, #8
 801272a:	9303      	str	r3, [sp, #12]
 801272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801272e:	443b      	add	r3, r7
 8012730:	9309      	str	r3, [sp, #36]	; 0x24
 8012732:	e767      	b.n	8012604 <_vfiprintf_r+0x94>
 8012734:	fb0c 3202 	mla	r2, ip, r2, r3
 8012738:	460c      	mov	r4, r1
 801273a:	2001      	movs	r0, #1
 801273c:	e7a5      	b.n	801268a <_vfiprintf_r+0x11a>
 801273e:	2300      	movs	r3, #0
 8012740:	3401      	adds	r4, #1
 8012742:	9305      	str	r3, [sp, #20]
 8012744:	4619      	mov	r1, r3
 8012746:	f04f 0c0a 	mov.w	ip, #10
 801274a:	4620      	mov	r0, r4
 801274c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012750:	3a30      	subs	r2, #48	; 0x30
 8012752:	2a09      	cmp	r2, #9
 8012754:	d903      	bls.n	801275e <_vfiprintf_r+0x1ee>
 8012756:	2b00      	cmp	r3, #0
 8012758:	d0c5      	beq.n	80126e6 <_vfiprintf_r+0x176>
 801275a:	9105      	str	r1, [sp, #20]
 801275c:	e7c3      	b.n	80126e6 <_vfiprintf_r+0x176>
 801275e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012762:	4604      	mov	r4, r0
 8012764:	2301      	movs	r3, #1
 8012766:	e7f0      	b.n	801274a <_vfiprintf_r+0x1da>
 8012768:	ab03      	add	r3, sp, #12
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	462a      	mov	r2, r5
 801276e:	4b16      	ldr	r3, [pc, #88]	; (80127c8 <_vfiprintf_r+0x258>)
 8012770:	a904      	add	r1, sp, #16
 8012772:	4630      	mov	r0, r6
 8012774:	f7fc f958 	bl	800ea28 <_printf_float>
 8012778:	4607      	mov	r7, r0
 801277a:	1c78      	adds	r0, r7, #1
 801277c:	d1d6      	bne.n	801272c <_vfiprintf_r+0x1bc>
 801277e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012780:	07d9      	lsls	r1, r3, #31
 8012782:	d405      	bmi.n	8012790 <_vfiprintf_r+0x220>
 8012784:	89ab      	ldrh	r3, [r5, #12]
 8012786:	059a      	lsls	r2, r3, #22
 8012788:	d402      	bmi.n	8012790 <_vfiprintf_r+0x220>
 801278a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801278c:	f7fc f800 	bl	800e790 <__retarget_lock_release_recursive>
 8012790:	89ab      	ldrh	r3, [r5, #12]
 8012792:	065b      	lsls	r3, r3, #25
 8012794:	f53f af12 	bmi.w	80125bc <_vfiprintf_r+0x4c>
 8012798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801279a:	e711      	b.n	80125c0 <_vfiprintf_r+0x50>
 801279c:	ab03      	add	r3, sp, #12
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	462a      	mov	r2, r5
 80127a2:	4b09      	ldr	r3, [pc, #36]	; (80127c8 <_vfiprintf_r+0x258>)
 80127a4:	a904      	add	r1, sp, #16
 80127a6:	4630      	mov	r0, r6
 80127a8:	f7fc fbe2 	bl	800ef70 <_printf_i>
 80127ac:	e7e4      	b.n	8012778 <_vfiprintf_r+0x208>
 80127ae:	bf00      	nop
 80127b0:	08013690 	.word	0x08013690
 80127b4:	080136b0 	.word	0x080136b0
 80127b8:	08013670 	.word	0x08013670
 80127bc:	08013b54 	.word	0x08013b54
 80127c0:	08013b5e 	.word	0x08013b5e
 80127c4:	0800ea29 	.word	0x0800ea29
 80127c8:	0801254b 	.word	0x0801254b
 80127cc:	08013b5a 	.word	0x08013b5a

080127d0 <_read_r>:
 80127d0:	b538      	push	{r3, r4, r5, lr}
 80127d2:	4d07      	ldr	r5, [pc, #28]	; (80127f0 <_read_r+0x20>)
 80127d4:	4604      	mov	r4, r0
 80127d6:	4608      	mov	r0, r1
 80127d8:	4611      	mov	r1, r2
 80127da:	2200      	movs	r2, #0
 80127dc:	602a      	str	r2, [r5, #0]
 80127de:	461a      	mov	r2, r3
 80127e0:	f7f1 fff0 	bl	80047c4 <_read>
 80127e4:	1c43      	adds	r3, r0, #1
 80127e6:	d102      	bne.n	80127ee <_read_r+0x1e>
 80127e8:	682b      	ldr	r3, [r5, #0]
 80127ea:	b103      	cbz	r3, 80127ee <_read_r+0x1e>
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	bd38      	pop	{r3, r4, r5, pc}
 80127f0:	20005200 	.word	0x20005200
 80127f4:	00000000 	.word	0x00000000

080127f8 <nan>:
 80127f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012800 <nan+0x8>
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	00000000 	.word	0x00000000
 8012804:	7ff80000 	.word	0x7ff80000

08012808 <strncmp>:
 8012808:	b510      	push	{r4, lr}
 801280a:	b17a      	cbz	r2, 801282c <strncmp+0x24>
 801280c:	4603      	mov	r3, r0
 801280e:	3901      	subs	r1, #1
 8012810:	1884      	adds	r4, r0, r2
 8012812:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012816:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801281a:	4290      	cmp	r0, r2
 801281c:	d101      	bne.n	8012822 <strncmp+0x1a>
 801281e:	42a3      	cmp	r3, r4
 8012820:	d101      	bne.n	8012826 <strncmp+0x1e>
 8012822:	1a80      	subs	r0, r0, r2
 8012824:	bd10      	pop	{r4, pc}
 8012826:	2800      	cmp	r0, #0
 8012828:	d1f3      	bne.n	8012812 <strncmp+0xa>
 801282a:	e7fa      	b.n	8012822 <strncmp+0x1a>
 801282c:	4610      	mov	r0, r2
 801282e:	e7f9      	b.n	8012824 <strncmp+0x1c>

08012830 <__swbuf_r>:
 8012830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012832:	460e      	mov	r6, r1
 8012834:	4614      	mov	r4, r2
 8012836:	4605      	mov	r5, r0
 8012838:	b118      	cbz	r0, 8012842 <__swbuf_r+0x12>
 801283a:	6983      	ldr	r3, [r0, #24]
 801283c:	b90b      	cbnz	r3, 8012842 <__swbuf_r+0x12>
 801283e:	f7fb fee3 	bl	800e608 <__sinit>
 8012842:	4b21      	ldr	r3, [pc, #132]	; (80128c8 <__swbuf_r+0x98>)
 8012844:	429c      	cmp	r4, r3
 8012846:	d12b      	bne.n	80128a0 <__swbuf_r+0x70>
 8012848:	686c      	ldr	r4, [r5, #4]
 801284a:	69a3      	ldr	r3, [r4, #24]
 801284c:	60a3      	str	r3, [r4, #8]
 801284e:	89a3      	ldrh	r3, [r4, #12]
 8012850:	071a      	lsls	r2, r3, #28
 8012852:	d52f      	bpl.n	80128b4 <__swbuf_r+0x84>
 8012854:	6923      	ldr	r3, [r4, #16]
 8012856:	b36b      	cbz	r3, 80128b4 <__swbuf_r+0x84>
 8012858:	6923      	ldr	r3, [r4, #16]
 801285a:	6820      	ldr	r0, [r4, #0]
 801285c:	1ac0      	subs	r0, r0, r3
 801285e:	6963      	ldr	r3, [r4, #20]
 8012860:	b2f6      	uxtb	r6, r6
 8012862:	4283      	cmp	r3, r0
 8012864:	4637      	mov	r7, r6
 8012866:	dc04      	bgt.n	8012872 <__swbuf_r+0x42>
 8012868:	4621      	mov	r1, r4
 801286a:	4628      	mov	r0, r5
 801286c:	f7fe fbdc 	bl	8011028 <_fflush_r>
 8012870:	bb30      	cbnz	r0, 80128c0 <__swbuf_r+0x90>
 8012872:	68a3      	ldr	r3, [r4, #8]
 8012874:	3b01      	subs	r3, #1
 8012876:	60a3      	str	r3, [r4, #8]
 8012878:	6823      	ldr	r3, [r4, #0]
 801287a:	1c5a      	adds	r2, r3, #1
 801287c:	6022      	str	r2, [r4, #0]
 801287e:	701e      	strb	r6, [r3, #0]
 8012880:	6963      	ldr	r3, [r4, #20]
 8012882:	3001      	adds	r0, #1
 8012884:	4283      	cmp	r3, r0
 8012886:	d004      	beq.n	8012892 <__swbuf_r+0x62>
 8012888:	89a3      	ldrh	r3, [r4, #12]
 801288a:	07db      	lsls	r3, r3, #31
 801288c:	d506      	bpl.n	801289c <__swbuf_r+0x6c>
 801288e:	2e0a      	cmp	r6, #10
 8012890:	d104      	bne.n	801289c <__swbuf_r+0x6c>
 8012892:	4621      	mov	r1, r4
 8012894:	4628      	mov	r0, r5
 8012896:	f7fe fbc7 	bl	8011028 <_fflush_r>
 801289a:	b988      	cbnz	r0, 80128c0 <__swbuf_r+0x90>
 801289c:	4638      	mov	r0, r7
 801289e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128a0:	4b0a      	ldr	r3, [pc, #40]	; (80128cc <__swbuf_r+0x9c>)
 80128a2:	429c      	cmp	r4, r3
 80128a4:	d101      	bne.n	80128aa <__swbuf_r+0x7a>
 80128a6:	68ac      	ldr	r4, [r5, #8]
 80128a8:	e7cf      	b.n	801284a <__swbuf_r+0x1a>
 80128aa:	4b09      	ldr	r3, [pc, #36]	; (80128d0 <__swbuf_r+0xa0>)
 80128ac:	429c      	cmp	r4, r3
 80128ae:	bf08      	it	eq
 80128b0:	68ec      	ldreq	r4, [r5, #12]
 80128b2:	e7ca      	b.n	801284a <__swbuf_r+0x1a>
 80128b4:	4621      	mov	r1, r4
 80128b6:	4628      	mov	r0, r5
 80128b8:	f000 f81a 	bl	80128f0 <__swsetup_r>
 80128bc:	2800      	cmp	r0, #0
 80128be:	d0cb      	beq.n	8012858 <__swbuf_r+0x28>
 80128c0:	f04f 37ff 	mov.w	r7, #4294967295
 80128c4:	e7ea      	b.n	801289c <__swbuf_r+0x6c>
 80128c6:	bf00      	nop
 80128c8:	08013690 	.word	0x08013690
 80128cc:	080136b0 	.word	0x080136b0
 80128d0:	08013670 	.word	0x08013670

080128d4 <__ascii_wctomb>:
 80128d4:	b149      	cbz	r1, 80128ea <__ascii_wctomb+0x16>
 80128d6:	2aff      	cmp	r2, #255	; 0xff
 80128d8:	bf85      	ittet	hi
 80128da:	238a      	movhi	r3, #138	; 0x8a
 80128dc:	6003      	strhi	r3, [r0, #0]
 80128de:	700a      	strbls	r2, [r1, #0]
 80128e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80128e4:	bf98      	it	ls
 80128e6:	2001      	movls	r0, #1
 80128e8:	4770      	bx	lr
 80128ea:	4608      	mov	r0, r1
 80128ec:	4770      	bx	lr
	...

080128f0 <__swsetup_r>:
 80128f0:	4b32      	ldr	r3, [pc, #200]	; (80129bc <__swsetup_r+0xcc>)
 80128f2:	b570      	push	{r4, r5, r6, lr}
 80128f4:	681d      	ldr	r5, [r3, #0]
 80128f6:	4606      	mov	r6, r0
 80128f8:	460c      	mov	r4, r1
 80128fa:	b125      	cbz	r5, 8012906 <__swsetup_r+0x16>
 80128fc:	69ab      	ldr	r3, [r5, #24]
 80128fe:	b913      	cbnz	r3, 8012906 <__swsetup_r+0x16>
 8012900:	4628      	mov	r0, r5
 8012902:	f7fb fe81 	bl	800e608 <__sinit>
 8012906:	4b2e      	ldr	r3, [pc, #184]	; (80129c0 <__swsetup_r+0xd0>)
 8012908:	429c      	cmp	r4, r3
 801290a:	d10f      	bne.n	801292c <__swsetup_r+0x3c>
 801290c:	686c      	ldr	r4, [r5, #4]
 801290e:	89a3      	ldrh	r3, [r4, #12]
 8012910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012914:	0719      	lsls	r1, r3, #28
 8012916:	d42c      	bmi.n	8012972 <__swsetup_r+0x82>
 8012918:	06dd      	lsls	r5, r3, #27
 801291a:	d411      	bmi.n	8012940 <__swsetup_r+0x50>
 801291c:	2309      	movs	r3, #9
 801291e:	6033      	str	r3, [r6, #0]
 8012920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012924:	81a3      	strh	r3, [r4, #12]
 8012926:	f04f 30ff 	mov.w	r0, #4294967295
 801292a:	e03e      	b.n	80129aa <__swsetup_r+0xba>
 801292c:	4b25      	ldr	r3, [pc, #148]	; (80129c4 <__swsetup_r+0xd4>)
 801292e:	429c      	cmp	r4, r3
 8012930:	d101      	bne.n	8012936 <__swsetup_r+0x46>
 8012932:	68ac      	ldr	r4, [r5, #8]
 8012934:	e7eb      	b.n	801290e <__swsetup_r+0x1e>
 8012936:	4b24      	ldr	r3, [pc, #144]	; (80129c8 <__swsetup_r+0xd8>)
 8012938:	429c      	cmp	r4, r3
 801293a:	bf08      	it	eq
 801293c:	68ec      	ldreq	r4, [r5, #12]
 801293e:	e7e6      	b.n	801290e <__swsetup_r+0x1e>
 8012940:	0758      	lsls	r0, r3, #29
 8012942:	d512      	bpl.n	801296a <__swsetup_r+0x7a>
 8012944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012946:	b141      	cbz	r1, 801295a <__swsetup_r+0x6a>
 8012948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801294c:	4299      	cmp	r1, r3
 801294e:	d002      	beq.n	8012956 <__swsetup_r+0x66>
 8012950:	4630      	mov	r0, r6
 8012952:	f7ff fc3b 	bl	80121cc <_free_r>
 8012956:	2300      	movs	r3, #0
 8012958:	6363      	str	r3, [r4, #52]	; 0x34
 801295a:	89a3      	ldrh	r3, [r4, #12]
 801295c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012960:	81a3      	strh	r3, [r4, #12]
 8012962:	2300      	movs	r3, #0
 8012964:	6063      	str	r3, [r4, #4]
 8012966:	6923      	ldr	r3, [r4, #16]
 8012968:	6023      	str	r3, [r4, #0]
 801296a:	89a3      	ldrh	r3, [r4, #12]
 801296c:	f043 0308 	orr.w	r3, r3, #8
 8012970:	81a3      	strh	r3, [r4, #12]
 8012972:	6923      	ldr	r3, [r4, #16]
 8012974:	b94b      	cbnz	r3, 801298a <__swsetup_r+0x9a>
 8012976:	89a3      	ldrh	r3, [r4, #12]
 8012978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801297c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012980:	d003      	beq.n	801298a <__swsetup_r+0x9a>
 8012982:	4621      	mov	r1, r4
 8012984:	4630      	mov	r0, r6
 8012986:	f000 f84d 	bl	8012a24 <__smakebuf_r>
 801298a:	89a0      	ldrh	r0, [r4, #12]
 801298c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012990:	f010 0301 	ands.w	r3, r0, #1
 8012994:	d00a      	beq.n	80129ac <__swsetup_r+0xbc>
 8012996:	2300      	movs	r3, #0
 8012998:	60a3      	str	r3, [r4, #8]
 801299a:	6963      	ldr	r3, [r4, #20]
 801299c:	425b      	negs	r3, r3
 801299e:	61a3      	str	r3, [r4, #24]
 80129a0:	6923      	ldr	r3, [r4, #16]
 80129a2:	b943      	cbnz	r3, 80129b6 <__swsetup_r+0xc6>
 80129a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80129a8:	d1ba      	bne.n	8012920 <__swsetup_r+0x30>
 80129aa:	bd70      	pop	{r4, r5, r6, pc}
 80129ac:	0781      	lsls	r1, r0, #30
 80129ae:	bf58      	it	pl
 80129b0:	6963      	ldrpl	r3, [r4, #20]
 80129b2:	60a3      	str	r3, [r4, #8]
 80129b4:	e7f4      	b.n	80129a0 <__swsetup_r+0xb0>
 80129b6:	2000      	movs	r0, #0
 80129b8:	e7f7      	b.n	80129aa <__swsetup_r+0xba>
 80129ba:	bf00      	nop
 80129bc:	20000014 	.word	0x20000014
 80129c0:	08013690 	.word	0x08013690
 80129c4:	080136b0 	.word	0x080136b0
 80129c8:	08013670 	.word	0x08013670

080129cc <abort>:
 80129cc:	b508      	push	{r3, lr}
 80129ce:	2006      	movs	r0, #6
 80129d0:	f000 f8da 	bl	8012b88 <raise>
 80129d4:	2001      	movs	r0, #1
 80129d6:	f7f1 feeb 	bl	80047b0 <_exit>

080129da <__swhatbuf_r>:
 80129da:	b570      	push	{r4, r5, r6, lr}
 80129dc:	460e      	mov	r6, r1
 80129de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129e2:	2900      	cmp	r1, #0
 80129e4:	b096      	sub	sp, #88	; 0x58
 80129e6:	4614      	mov	r4, r2
 80129e8:	461d      	mov	r5, r3
 80129ea:	da08      	bge.n	80129fe <__swhatbuf_r+0x24>
 80129ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80129f0:	2200      	movs	r2, #0
 80129f2:	602a      	str	r2, [r5, #0]
 80129f4:	061a      	lsls	r2, r3, #24
 80129f6:	d410      	bmi.n	8012a1a <__swhatbuf_r+0x40>
 80129f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129fc:	e00e      	b.n	8012a1c <__swhatbuf_r+0x42>
 80129fe:	466a      	mov	r2, sp
 8012a00:	f000 f8de 	bl	8012bc0 <_fstat_r>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	dbf1      	blt.n	80129ec <__swhatbuf_r+0x12>
 8012a08:	9a01      	ldr	r2, [sp, #4]
 8012a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a12:	425a      	negs	r2, r3
 8012a14:	415a      	adcs	r2, r3
 8012a16:	602a      	str	r2, [r5, #0]
 8012a18:	e7ee      	b.n	80129f8 <__swhatbuf_r+0x1e>
 8012a1a:	2340      	movs	r3, #64	; 0x40
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	6023      	str	r3, [r4, #0]
 8012a20:	b016      	add	sp, #88	; 0x58
 8012a22:	bd70      	pop	{r4, r5, r6, pc}

08012a24 <__smakebuf_r>:
 8012a24:	898b      	ldrh	r3, [r1, #12]
 8012a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a28:	079d      	lsls	r5, r3, #30
 8012a2a:	4606      	mov	r6, r0
 8012a2c:	460c      	mov	r4, r1
 8012a2e:	d507      	bpl.n	8012a40 <__smakebuf_r+0x1c>
 8012a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	6123      	str	r3, [r4, #16]
 8012a38:	2301      	movs	r3, #1
 8012a3a:	6163      	str	r3, [r4, #20]
 8012a3c:	b002      	add	sp, #8
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	ab01      	add	r3, sp, #4
 8012a42:	466a      	mov	r2, sp
 8012a44:	f7ff ffc9 	bl	80129da <__swhatbuf_r>
 8012a48:	9900      	ldr	r1, [sp, #0]
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f7fb fed7 	bl	800e800 <_malloc_r>
 8012a52:	b948      	cbnz	r0, 8012a68 <__smakebuf_r+0x44>
 8012a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a58:	059a      	lsls	r2, r3, #22
 8012a5a:	d4ef      	bmi.n	8012a3c <__smakebuf_r+0x18>
 8012a5c:	f023 0303 	bic.w	r3, r3, #3
 8012a60:	f043 0302 	orr.w	r3, r3, #2
 8012a64:	81a3      	strh	r3, [r4, #12]
 8012a66:	e7e3      	b.n	8012a30 <__smakebuf_r+0xc>
 8012a68:	4b0d      	ldr	r3, [pc, #52]	; (8012aa0 <__smakebuf_r+0x7c>)
 8012a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012a6c:	89a3      	ldrh	r3, [r4, #12]
 8012a6e:	6020      	str	r0, [r4, #0]
 8012a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a74:	81a3      	strh	r3, [r4, #12]
 8012a76:	9b00      	ldr	r3, [sp, #0]
 8012a78:	6163      	str	r3, [r4, #20]
 8012a7a:	9b01      	ldr	r3, [sp, #4]
 8012a7c:	6120      	str	r0, [r4, #16]
 8012a7e:	b15b      	cbz	r3, 8012a98 <__smakebuf_r+0x74>
 8012a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a84:	4630      	mov	r0, r6
 8012a86:	f000 f8ad 	bl	8012be4 <_isatty_r>
 8012a8a:	b128      	cbz	r0, 8012a98 <__smakebuf_r+0x74>
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	f023 0303 	bic.w	r3, r3, #3
 8012a92:	f043 0301 	orr.w	r3, r3, #1
 8012a96:	81a3      	strh	r3, [r4, #12]
 8012a98:	89a0      	ldrh	r0, [r4, #12]
 8012a9a:	4305      	orrs	r5, r0
 8012a9c:	81a5      	strh	r5, [r4, #12]
 8012a9e:	e7cd      	b.n	8012a3c <__smakebuf_r+0x18>
 8012aa0:	0800e5a1 	.word	0x0800e5a1

08012aa4 <memmove>:
 8012aa4:	4288      	cmp	r0, r1
 8012aa6:	b510      	push	{r4, lr}
 8012aa8:	eb01 0402 	add.w	r4, r1, r2
 8012aac:	d902      	bls.n	8012ab4 <memmove+0x10>
 8012aae:	4284      	cmp	r4, r0
 8012ab0:	4623      	mov	r3, r4
 8012ab2:	d807      	bhi.n	8012ac4 <memmove+0x20>
 8012ab4:	1e43      	subs	r3, r0, #1
 8012ab6:	42a1      	cmp	r1, r4
 8012ab8:	d008      	beq.n	8012acc <memmove+0x28>
 8012aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ac2:	e7f8      	b.n	8012ab6 <memmove+0x12>
 8012ac4:	4402      	add	r2, r0
 8012ac6:	4601      	mov	r1, r0
 8012ac8:	428a      	cmp	r2, r1
 8012aca:	d100      	bne.n	8012ace <memmove+0x2a>
 8012acc:	bd10      	pop	{r4, pc}
 8012ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ad6:	e7f7      	b.n	8012ac8 <memmove+0x24>

08012ad8 <_realloc_r>:
 8012ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012adc:	4680      	mov	r8, r0
 8012ade:	4614      	mov	r4, r2
 8012ae0:	460e      	mov	r6, r1
 8012ae2:	b921      	cbnz	r1, 8012aee <_realloc_r+0x16>
 8012ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae8:	4611      	mov	r1, r2
 8012aea:	f7fb be89 	b.w	800e800 <_malloc_r>
 8012aee:	b92a      	cbnz	r2, 8012afc <_realloc_r+0x24>
 8012af0:	f7ff fb6c 	bl	80121cc <_free_r>
 8012af4:	4625      	mov	r5, r4
 8012af6:	4628      	mov	r0, r5
 8012af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012afc:	f000 f882 	bl	8012c04 <_malloc_usable_size_r>
 8012b00:	4284      	cmp	r4, r0
 8012b02:	4607      	mov	r7, r0
 8012b04:	d802      	bhi.n	8012b0c <_realloc_r+0x34>
 8012b06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012b0a:	d812      	bhi.n	8012b32 <_realloc_r+0x5a>
 8012b0c:	4621      	mov	r1, r4
 8012b0e:	4640      	mov	r0, r8
 8012b10:	f7fb fe76 	bl	800e800 <_malloc_r>
 8012b14:	4605      	mov	r5, r0
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d0ed      	beq.n	8012af6 <_realloc_r+0x1e>
 8012b1a:	42bc      	cmp	r4, r7
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	4631      	mov	r1, r6
 8012b20:	bf28      	it	cs
 8012b22:	463a      	movcs	r2, r7
 8012b24:	f7fb fe35 	bl	800e792 <memcpy>
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4640      	mov	r0, r8
 8012b2c:	f7ff fb4e 	bl	80121cc <_free_r>
 8012b30:	e7e1      	b.n	8012af6 <_realloc_r+0x1e>
 8012b32:	4635      	mov	r5, r6
 8012b34:	e7df      	b.n	8012af6 <_realloc_r+0x1e>

08012b36 <_raise_r>:
 8012b36:	291f      	cmp	r1, #31
 8012b38:	b538      	push	{r3, r4, r5, lr}
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	460d      	mov	r5, r1
 8012b3e:	d904      	bls.n	8012b4a <_raise_r+0x14>
 8012b40:	2316      	movs	r3, #22
 8012b42:	6003      	str	r3, [r0, #0]
 8012b44:	f04f 30ff 	mov.w	r0, #4294967295
 8012b48:	bd38      	pop	{r3, r4, r5, pc}
 8012b4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b4c:	b112      	cbz	r2, 8012b54 <_raise_r+0x1e>
 8012b4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b52:	b94b      	cbnz	r3, 8012b68 <_raise_r+0x32>
 8012b54:	4620      	mov	r0, r4
 8012b56:	f000 f831 	bl	8012bbc <_getpid_r>
 8012b5a:	462a      	mov	r2, r5
 8012b5c:	4601      	mov	r1, r0
 8012b5e:	4620      	mov	r0, r4
 8012b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b64:	f000 b818 	b.w	8012b98 <_kill_r>
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d00a      	beq.n	8012b82 <_raise_r+0x4c>
 8012b6c:	1c59      	adds	r1, r3, #1
 8012b6e:	d103      	bne.n	8012b78 <_raise_r+0x42>
 8012b70:	2316      	movs	r3, #22
 8012b72:	6003      	str	r3, [r0, #0]
 8012b74:	2001      	movs	r0, #1
 8012b76:	e7e7      	b.n	8012b48 <_raise_r+0x12>
 8012b78:	2400      	movs	r4, #0
 8012b7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b7e:	4628      	mov	r0, r5
 8012b80:	4798      	blx	r3
 8012b82:	2000      	movs	r0, #0
 8012b84:	e7e0      	b.n	8012b48 <_raise_r+0x12>
	...

08012b88 <raise>:
 8012b88:	4b02      	ldr	r3, [pc, #8]	; (8012b94 <raise+0xc>)
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	6818      	ldr	r0, [r3, #0]
 8012b8e:	f7ff bfd2 	b.w	8012b36 <_raise_r>
 8012b92:	bf00      	nop
 8012b94:	20000014 	.word	0x20000014

08012b98 <_kill_r>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	4d07      	ldr	r5, [pc, #28]	; (8012bb8 <_kill_r+0x20>)
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	4608      	mov	r0, r1
 8012ba2:	4611      	mov	r1, r2
 8012ba4:	602b      	str	r3, [r5, #0]
 8012ba6:	f7f1 fdf3 	bl	8004790 <_kill>
 8012baa:	1c43      	adds	r3, r0, #1
 8012bac:	d102      	bne.n	8012bb4 <_kill_r+0x1c>
 8012bae:	682b      	ldr	r3, [r5, #0]
 8012bb0:	b103      	cbz	r3, 8012bb4 <_kill_r+0x1c>
 8012bb2:	6023      	str	r3, [r4, #0]
 8012bb4:	bd38      	pop	{r3, r4, r5, pc}
 8012bb6:	bf00      	nop
 8012bb8:	20005200 	.word	0x20005200

08012bbc <_getpid_r>:
 8012bbc:	f7f1 bde0 	b.w	8004780 <_getpid>

08012bc0 <_fstat_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	4d07      	ldr	r5, [pc, #28]	; (8012be0 <_fstat_r+0x20>)
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	4608      	mov	r0, r1
 8012bca:	4611      	mov	r1, r2
 8012bcc:	602b      	str	r3, [r5, #0]
 8012bce:	f7f1 fe3e 	bl	800484e <_fstat>
 8012bd2:	1c43      	adds	r3, r0, #1
 8012bd4:	d102      	bne.n	8012bdc <_fstat_r+0x1c>
 8012bd6:	682b      	ldr	r3, [r5, #0]
 8012bd8:	b103      	cbz	r3, 8012bdc <_fstat_r+0x1c>
 8012bda:	6023      	str	r3, [r4, #0]
 8012bdc:	bd38      	pop	{r3, r4, r5, pc}
 8012bde:	bf00      	nop
 8012be0:	20005200 	.word	0x20005200

08012be4 <_isatty_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4d06      	ldr	r5, [pc, #24]	; (8012c00 <_isatty_r+0x1c>)
 8012be8:	2300      	movs	r3, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	602b      	str	r3, [r5, #0]
 8012bf0:	f7f1 fe3d 	bl	800486e <_isatty>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_isatty_r+0x1a>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_isatty_r+0x1a>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	20005200 	.word	0x20005200

08012c04 <_malloc_usable_size_r>:
 8012c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c08:	1f18      	subs	r0, r3, #4
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	bfbc      	itt	lt
 8012c0e:	580b      	ldrlt	r3, [r1, r0]
 8012c10:	18c0      	addlt	r0, r0, r3
 8012c12:	4770      	bx	lr

08012c14 <atan2>:
 8012c14:	f000 b800 	b.w	8012c18 <__ieee754_atan2>

08012c18 <__ieee754_atan2>:
 8012c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	ec57 6b11 	vmov	r6, r7, d1
 8012c20:	4273      	negs	r3, r6
 8012c22:	f8df e184 	ldr.w	lr, [pc, #388]	; 8012da8 <__ieee754_atan2+0x190>
 8012c26:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012c2a:	4333      	orrs	r3, r6
 8012c2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012c30:	4573      	cmp	r3, lr
 8012c32:	ec51 0b10 	vmov	r0, r1, d0
 8012c36:	ee11 8a10 	vmov	r8, s2
 8012c3a:	d80a      	bhi.n	8012c52 <__ieee754_atan2+0x3a>
 8012c3c:	4244      	negs	r4, r0
 8012c3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c42:	4304      	orrs	r4, r0
 8012c44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012c48:	4574      	cmp	r4, lr
 8012c4a:	ee10 9a10 	vmov	r9, s0
 8012c4e:	468c      	mov	ip, r1
 8012c50:	d907      	bls.n	8012c62 <__ieee754_atan2+0x4a>
 8012c52:	4632      	mov	r2, r6
 8012c54:	463b      	mov	r3, r7
 8012c56:	f7ed fb31 	bl	80002bc <__adddf3>
 8012c5a:	ec41 0b10 	vmov	d0, r0, r1
 8012c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012c66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012c6a:	4334      	orrs	r4, r6
 8012c6c:	d103      	bne.n	8012c76 <__ieee754_atan2+0x5e>
 8012c6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c72:	f000 b89d 	b.w	8012db0 <atan>
 8012c76:	17bc      	asrs	r4, r7, #30
 8012c78:	f004 0402 	and.w	r4, r4, #2
 8012c7c:	ea53 0909 	orrs.w	r9, r3, r9
 8012c80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012c84:	d107      	bne.n	8012c96 <__ieee754_atan2+0x7e>
 8012c86:	2c02      	cmp	r4, #2
 8012c88:	d060      	beq.n	8012d4c <__ieee754_atan2+0x134>
 8012c8a:	2c03      	cmp	r4, #3
 8012c8c:	d1e5      	bne.n	8012c5a <__ieee754_atan2+0x42>
 8012c8e:	a142      	add	r1, pc, #264	; (adr r1, 8012d98 <__ieee754_atan2+0x180>)
 8012c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c94:	e7e1      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012c96:	ea52 0808 	orrs.w	r8, r2, r8
 8012c9a:	d106      	bne.n	8012caa <__ieee754_atan2+0x92>
 8012c9c:	f1bc 0f00 	cmp.w	ip, #0
 8012ca0:	da5f      	bge.n	8012d62 <__ieee754_atan2+0x14a>
 8012ca2:	a13f      	add	r1, pc, #252	; (adr r1, 8012da0 <__ieee754_atan2+0x188>)
 8012ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ca8:	e7d7      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012caa:	4572      	cmp	r2, lr
 8012cac:	d10f      	bne.n	8012cce <__ieee754_atan2+0xb6>
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	f104 34ff 	add.w	r4, r4, #4294967295
 8012cb4:	d107      	bne.n	8012cc6 <__ieee754_atan2+0xae>
 8012cb6:	2c02      	cmp	r4, #2
 8012cb8:	d84c      	bhi.n	8012d54 <__ieee754_atan2+0x13c>
 8012cba:	4b35      	ldr	r3, [pc, #212]	; (8012d90 <__ieee754_atan2+0x178>)
 8012cbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012cc0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012cc4:	e7c9      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012cc6:	2c02      	cmp	r4, #2
 8012cc8:	d848      	bhi.n	8012d5c <__ieee754_atan2+0x144>
 8012cca:	4b32      	ldr	r3, [pc, #200]	; (8012d94 <__ieee754_atan2+0x17c>)
 8012ccc:	e7f6      	b.n	8012cbc <__ieee754_atan2+0xa4>
 8012cce:	4573      	cmp	r3, lr
 8012cd0:	d0e4      	beq.n	8012c9c <__ieee754_atan2+0x84>
 8012cd2:	1a9b      	subs	r3, r3, r2
 8012cd4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012cd8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012cdc:	da1e      	bge.n	8012d1c <__ieee754_atan2+0x104>
 8012cde:	2f00      	cmp	r7, #0
 8012ce0:	da01      	bge.n	8012ce6 <__ieee754_atan2+0xce>
 8012ce2:	323c      	adds	r2, #60	; 0x3c
 8012ce4:	db1e      	blt.n	8012d24 <__ieee754_atan2+0x10c>
 8012ce6:	4632      	mov	r2, r6
 8012ce8:	463b      	mov	r3, r7
 8012cea:	f7ed fdc7 	bl	800087c <__aeabi_ddiv>
 8012cee:	ec41 0b10 	vmov	d0, r0, r1
 8012cf2:	f000 f9fd 	bl	80130f0 <fabs>
 8012cf6:	f000 f85b 	bl	8012db0 <atan>
 8012cfa:	ec51 0b10 	vmov	r0, r1, d0
 8012cfe:	2c01      	cmp	r4, #1
 8012d00:	d013      	beq.n	8012d2a <__ieee754_atan2+0x112>
 8012d02:	2c02      	cmp	r4, #2
 8012d04:	d015      	beq.n	8012d32 <__ieee754_atan2+0x11a>
 8012d06:	2c00      	cmp	r4, #0
 8012d08:	d0a7      	beq.n	8012c5a <__ieee754_atan2+0x42>
 8012d0a:	a319      	add	r3, pc, #100	; (adr r3, 8012d70 <__ieee754_atan2+0x158>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed fad2 	bl	80002b8 <__aeabi_dsub>
 8012d14:	a318      	add	r3, pc, #96	; (adr r3, 8012d78 <__ieee754_atan2+0x160>)
 8012d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1a:	e014      	b.n	8012d46 <__ieee754_atan2+0x12e>
 8012d1c:	a118      	add	r1, pc, #96	; (adr r1, 8012d80 <__ieee754_atan2+0x168>)
 8012d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d22:	e7ec      	b.n	8012cfe <__ieee754_atan2+0xe6>
 8012d24:	2000      	movs	r0, #0
 8012d26:	2100      	movs	r1, #0
 8012d28:	e7e9      	b.n	8012cfe <__ieee754_atan2+0xe6>
 8012d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d2e:	4619      	mov	r1, r3
 8012d30:	e793      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012d32:	a30f      	add	r3, pc, #60	; (adr r3, 8012d70 <__ieee754_atan2+0x158>)
 8012d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d38:	f7ed fabe 	bl	80002b8 <__aeabi_dsub>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	460b      	mov	r3, r1
 8012d40:	a10d      	add	r1, pc, #52	; (adr r1, 8012d78 <__ieee754_atan2+0x160>)
 8012d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d46:	f7ed fab7 	bl	80002b8 <__aeabi_dsub>
 8012d4a:	e786      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012d4c:	a10a      	add	r1, pc, #40	; (adr r1, 8012d78 <__ieee754_atan2+0x160>)
 8012d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d52:	e782      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012d54:	a10c      	add	r1, pc, #48	; (adr r1, 8012d88 <__ieee754_atan2+0x170>)
 8012d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d5a:	e77e      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	2100      	movs	r1, #0
 8012d60:	e77b      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012d62:	a107      	add	r1, pc, #28	; (adr r1, 8012d80 <__ieee754_atan2+0x168>)
 8012d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d68:	e777      	b.n	8012c5a <__ieee754_atan2+0x42>
 8012d6a:	bf00      	nop
 8012d6c:	f3af 8000 	nop.w
 8012d70:	33145c07 	.word	0x33145c07
 8012d74:	3ca1a626 	.word	0x3ca1a626
 8012d78:	54442d18 	.word	0x54442d18
 8012d7c:	400921fb 	.word	0x400921fb
 8012d80:	54442d18 	.word	0x54442d18
 8012d84:	3ff921fb 	.word	0x3ff921fb
 8012d88:	54442d18 	.word	0x54442d18
 8012d8c:	3fe921fb 	.word	0x3fe921fb
 8012d90:	08013b68 	.word	0x08013b68
 8012d94:	08013b80 	.word	0x08013b80
 8012d98:	54442d18 	.word	0x54442d18
 8012d9c:	c00921fb 	.word	0xc00921fb
 8012da0:	54442d18 	.word	0x54442d18
 8012da4:	bff921fb 	.word	0xbff921fb
 8012da8:	7ff00000 	.word	0x7ff00000
 8012dac:	00000000 	.word	0x00000000

08012db0 <atan>:
 8012db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db4:	ec55 4b10 	vmov	r4, r5, d0
 8012db8:	4bc3      	ldr	r3, [pc, #780]	; (80130c8 <atan+0x318>)
 8012dba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012dbe:	429e      	cmp	r6, r3
 8012dc0:	46ab      	mov	fp, r5
 8012dc2:	dd18      	ble.n	8012df6 <atan+0x46>
 8012dc4:	4bc1      	ldr	r3, [pc, #772]	; (80130cc <atan+0x31c>)
 8012dc6:	429e      	cmp	r6, r3
 8012dc8:	dc01      	bgt.n	8012dce <atan+0x1e>
 8012dca:	d109      	bne.n	8012de0 <atan+0x30>
 8012dcc:	b144      	cbz	r4, 8012de0 <atan+0x30>
 8012dce:	4622      	mov	r2, r4
 8012dd0:	462b      	mov	r3, r5
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	4629      	mov	r1, r5
 8012dd6:	f7ed fa71 	bl	80002bc <__adddf3>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	460d      	mov	r5, r1
 8012dde:	e006      	b.n	8012dee <atan+0x3e>
 8012de0:	f1bb 0f00 	cmp.w	fp, #0
 8012de4:	f300 8131 	bgt.w	801304a <atan+0x29a>
 8012de8:	a59b      	add	r5, pc, #620	; (adr r5, 8013058 <atan+0x2a8>)
 8012dea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012dee:	ec45 4b10 	vmov	d0, r4, r5
 8012df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df6:	4bb6      	ldr	r3, [pc, #728]	; (80130d0 <atan+0x320>)
 8012df8:	429e      	cmp	r6, r3
 8012dfa:	dc14      	bgt.n	8012e26 <atan+0x76>
 8012dfc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012e00:	429e      	cmp	r6, r3
 8012e02:	dc0d      	bgt.n	8012e20 <atan+0x70>
 8012e04:	a396      	add	r3, pc, #600	; (adr r3, 8013060 <atan+0x2b0>)
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	ee10 0a10 	vmov	r0, s0
 8012e0e:	4629      	mov	r1, r5
 8012e10:	f7ed fa54 	bl	80002bc <__adddf3>
 8012e14:	4baf      	ldr	r3, [pc, #700]	; (80130d4 <atan+0x324>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	f7ed fe96 	bl	8000b48 <__aeabi_dcmpgt>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d1e6      	bne.n	8012dee <atan+0x3e>
 8012e20:	f04f 3aff 	mov.w	sl, #4294967295
 8012e24:	e02b      	b.n	8012e7e <atan+0xce>
 8012e26:	f000 f963 	bl	80130f0 <fabs>
 8012e2a:	4bab      	ldr	r3, [pc, #684]	; (80130d8 <atan+0x328>)
 8012e2c:	429e      	cmp	r6, r3
 8012e2e:	ec55 4b10 	vmov	r4, r5, d0
 8012e32:	f300 80bf 	bgt.w	8012fb4 <atan+0x204>
 8012e36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012e3a:	429e      	cmp	r6, r3
 8012e3c:	f300 80a0 	bgt.w	8012f80 <atan+0x1d0>
 8012e40:	ee10 2a10 	vmov	r2, s0
 8012e44:	ee10 0a10 	vmov	r0, s0
 8012e48:	462b      	mov	r3, r5
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	f7ed fa36 	bl	80002bc <__adddf3>
 8012e50:	4ba0      	ldr	r3, [pc, #640]	; (80130d4 <atan+0x324>)
 8012e52:	2200      	movs	r2, #0
 8012e54:	f7ed fa30 	bl	80002b8 <__aeabi_dsub>
 8012e58:	2200      	movs	r2, #0
 8012e5a:	4606      	mov	r6, r0
 8012e5c:	460f      	mov	r7, r1
 8012e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e62:	4620      	mov	r0, r4
 8012e64:	4629      	mov	r1, r5
 8012e66:	f7ed fa29 	bl	80002bc <__adddf3>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	4630      	mov	r0, r6
 8012e70:	4639      	mov	r1, r7
 8012e72:	f7ed fd03 	bl	800087c <__aeabi_ddiv>
 8012e76:	f04f 0a00 	mov.w	sl, #0
 8012e7a:	4604      	mov	r4, r0
 8012e7c:	460d      	mov	r5, r1
 8012e7e:	4622      	mov	r2, r4
 8012e80:	462b      	mov	r3, r5
 8012e82:	4620      	mov	r0, r4
 8012e84:	4629      	mov	r1, r5
 8012e86:	f7ed fbcf 	bl	8000628 <__aeabi_dmul>
 8012e8a:	4602      	mov	r2, r0
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	4680      	mov	r8, r0
 8012e90:	4689      	mov	r9, r1
 8012e92:	f7ed fbc9 	bl	8000628 <__aeabi_dmul>
 8012e96:	a374      	add	r3, pc, #464	; (adr r3, 8013068 <atan+0x2b8>)
 8012e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	460f      	mov	r7, r1
 8012ea0:	f7ed fbc2 	bl	8000628 <__aeabi_dmul>
 8012ea4:	a372      	add	r3, pc, #456	; (adr r3, 8013070 <atan+0x2c0>)
 8012ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eaa:	f7ed fa07 	bl	80002bc <__adddf3>
 8012eae:	4632      	mov	r2, r6
 8012eb0:	463b      	mov	r3, r7
 8012eb2:	f7ed fbb9 	bl	8000628 <__aeabi_dmul>
 8012eb6:	a370      	add	r3, pc, #448	; (adr r3, 8013078 <atan+0x2c8>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebc:	f7ed f9fe 	bl	80002bc <__adddf3>
 8012ec0:	4632      	mov	r2, r6
 8012ec2:	463b      	mov	r3, r7
 8012ec4:	f7ed fbb0 	bl	8000628 <__aeabi_dmul>
 8012ec8:	a36d      	add	r3, pc, #436	; (adr r3, 8013080 <atan+0x2d0>)
 8012eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ece:	f7ed f9f5 	bl	80002bc <__adddf3>
 8012ed2:	4632      	mov	r2, r6
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	f7ed fba7 	bl	8000628 <__aeabi_dmul>
 8012eda:	a36b      	add	r3, pc, #428	; (adr r3, 8013088 <atan+0x2d8>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f7ed f9ec 	bl	80002bc <__adddf3>
 8012ee4:	4632      	mov	r2, r6
 8012ee6:	463b      	mov	r3, r7
 8012ee8:	f7ed fb9e 	bl	8000628 <__aeabi_dmul>
 8012eec:	a368      	add	r3, pc, #416	; (adr r3, 8013090 <atan+0x2e0>)
 8012eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef2:	f7ed f9e3 	bl	80002bc <__adddf3>
 8012ef6:	4642      	mov	r2, r8
 8012ef8:	464b      	mov	r3, r9
 8012efa:	f7ed fb95 	bl	8000628 <__aeabi_dmul>
 8012efe:	a366      	add	r3, pc, #408	; (adr r3, 8013098 <atan+0x2e8>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	4680      	mov	r8, r0
 8012f06:	4689      	mov	r9, r1
 8012f08:	4630      	mov	r0, r6
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	f7ed fb8c 	bl	8000628 <__aeabi_dmul>
 8012f10:	a363      	add	r3, pc, #396	; (adr r3, 80130a0 <atan+0x2f0>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed f9cf 	bl	80002b8 <__aeabi_dsub>
 8012f1a:	4632      	mov	r2, r6
 8012f1c:	463b      	mov	r3, r7
 8012f1e:	f7ed fb83 	bl	8000628 <__aeabi_dmul>
 8012f22:	a361      	add	r3, pc, #388	; (adr r3, 80130a8 <atan+0x2f8>)
 8012f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f28:	f7ed f9c6 	bl	80002b8 <__aeabi_dsub>
 8012f2c:	4632      	mov	r2, r6
 8012f2e:	463b      	mov	r3, r7
 8012f30:	f7ed fb7a 	bl	8000628 <__aeabi_dmul>
 8012f34:	a35e      	add	r3, pc, #376	; (adr r3, 80130b0 <atan+0x300>)
 8012f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3a:	f7ed f9bd 	bl	80002b8 <__aeabi_dsub>
 8012f3e:	4632      	mov	r2, r6
 8012f40:	463b      	mov	r3, r7
 8012f42:	f7ed fb71 	bl	8000628 <__aeabi_dmul>
 8012f46:	a35c      	add	r3, pc, #368	; (adr r3, 80130b8 <atan+0x308>)
 8012f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4c:	f7ed f9b4 	bl	80002b8 <__aeabi_dsub>
 8012f50:	4632      	mov	r2, r6
 8012f52:	463b      	mov	r3, r7
 8012f54:	f7ed fb68 	bl	8000628 <__aeabi_dmul>
 8012f58:	4602      	mov	r2, r0
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	4640      	mov	r0, r8
 8012f5e:	4649      	mov	r1, r9
 8012f60:	f7ed f9ac 	bl	80002bc <__adddf3>
 8012f64:	4622      	mov	r2, r4
 8012f66:	462b      	mov	r3, r5
 8012f68:	f7ed fb5e 	bl	8000628 <__aeabi_dmul>
 8012f6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	d14b      	bne.n	801300e <atan+0x25e>
 8012f76:	4620      	mov	r0, r4
 8012f78:	4629      	mov	r1, r5
 8012f7a:	f7ed f99d 	bl	80002b8 <__aeabi_dsub>
 8012f7e:	e72c      	b.n	8012dda <atan+0x2a>
 8012f80:	ee10 0a10 	vmov	r0, s0
 8012f84:	4b53      	ldr	r3, [pc, #332]	; (80130d4 <atan+0x324>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	4629      	mov	r1, r5
 8012f8a:	f7ed f995 	bl	80002b8 <__aeabi_dsub>
 8012f8e:	4b51      	ldr	r3, [pc, #324]	; (80130d4 <atan+0x324>)
 8012f90:	4606      	mov	r6, r0
 8012f92:	460f      	mov	r7, r1
 8012f94:	2200      	movs	r2, #0
 8012f96:	4620      	mov	r0, r4
 8012f98:	4629      	mov	r1, r5
 8012f9a:	f7ed f98f 	bl	80002bc <__adddf3>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	f7ed fc69 	bl	800087c <__aeabi_ddiv>
 8012faa:	f04f 0a01 	mov.w	sl, #1
 8012fae:	4604      	mov	r4, r0
 8012fb0:	460d      	mov	r5, r1
 8012fb2:	e764      	b.n	8012e7e <atan+0xce>
 8012fb4:	4b49      	ldr	r3, [pc, #292]	; (80130dc <atan+0x32c>)
 8012fb6:	429e      	cmp	r6, r3
 8012fb8:	da1d      	bge.n	8012ff6 <atan+0x246>
 8012fba:	ee10 0a10 	vmov	r0, s0
 8012fbe:	4b48      	ldr	r3, [pc, #288]	; (80130e0 <atan+0x330>)
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	4629      	mov	r1, r5
 8012fc4:	f7ed f978 	bl	80002b8 <__aeabi_dsub>
 8012fc8:	4b45      	ldr	r3, [pc, #276]	; (80130e0 <atan+0x330>)
 8012fca:	4606      	mov	r6, r0
 8012fcc:	460f      	mov	r7, r1
 8012fce:	2200      	movs	r2, #0
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	f7ed fb28 	bl	8000628 <__aeabi_dmul>
 8012fd8:	4b3e      	ldr	r3, [pc, #248]	; (80130d4 <atan+0x324>)
 8012fda:	2200      	movs	r2, #0
 8012fdc:	f7ed f96e 	bl	80002bc <__adddf3>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	f7ed fc48 	bl	800087c <__aeabi_ddiv>
 8012fec:	f04f 0a02 	mov.w	sl, #2
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	460d      	mov	r5, r1
 8012ff4:	e743      	b.n	8012e7e <atan+0xce>
 8012ff6:	462b      	mov	r3, r5
 8012ff8:	ee10 2a10 	vmov	r2, s0
 8012ffc:	4939      	ldr	r1, [pc, #228]	; (80130e4 <atan+0x334>)
 8012ffe:	2000      	movs	r0, #0
 8013000:	f7ed fc3c 	bl	800087c <__aeabi_ddiv>
 8013004:	f04f 0a03 	mov.w	sl, #3
 8013008:	4604      	mov	r4, r0
 801300a:	460d      	mov	r5, r1
 801300c:	e737      	b.n	8012e7e <atan+0xce>
 801300e:	4b36      	ldr	r3, [pc, #216]	; (80130e8 <atan+0x338>)
 8013010:	4e36      	ldr	r6, [pc, #216]	; (80130ec <atan+0x33c>)
 8013012:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013016:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801301a:	e9da 2300 	ldrd	r2, r3, [sl]
 801301e:	f7ed f94b 	bl	80002b8 <__aeabi_dsub>
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	f7ed f947 	bl	80002b8 <__aeabi_dsub>
 801302a:	4602      	mov	r2, r0
 801302c:	460b      	mov	r3, r1
 801302e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013032:	f7ed f941 	bl	80002b8 <__aeabi_dsub>
 8013036:	f1bb 0f00 	cmp.w	fp, #0
 801303a:	4604      	mov	r4, r0
 801303c:	460d      	mov	r5, r1
 801303e:	f6bf aed6 	bge.w	8012dee <atan+0x3e>
 8013042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013046:	461d      	mov	r5, r3
 8013048:	e6d1      	b.n	8012dee <atan+0x3e>
 801304a:	a51d      	add	r5, pc, #116	; (adr r5, 80130c0 <atan+0x310>)
 801304c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013050:	e6cd      	b.n	8012dee <atan+0x3e>
 8013052:	bf00      	nop
 8013054:	f3af 8000 	nop.w
 8013058:	54442d18 	.word	0x54442d18
 801305c:	bff921fb 	.word	0xbff921fb
 8013060:	8800759c 	.word	0x8800759c
 8013064:	7e37e43c 	.word	0x7e37e43c
 8013068:	e322da11 	.word	0xe322da11
 801306c:	3f90ad3a 	.word	0x3f90ad3a
 8013070:	24760deb 	.word	0x24760deb
 8013074:	3fa97b4b 	.word	0x3fa97b4b
 8013078:	a0d03d51 	.word	0xa0d03d51
 801307c:	3fb10d66 	.word	0x3fb10d66
 8013080:	c54c206e 	.word	0xc54c206e
 8013084:	3fb745cd 	.word	0x3fb745cd
 8013088:	920083ff 	.word	0x920083ff
 801308c:	3fc24924 	.word	0x3fc24924
 8013090:	5555550d 	.word	0x5555550d
 8013094:	3fd55555 	.word	0x3fd55555
 8013098:	2c6a6c2f 	.word	0x2c6a6c2f
 801309c:	bfa2b444 	.word	0xbfa2b444
 80130a0:	52defd9a 	.word	0x52defd9a
 80130a4:	3fadde2d 	.word	0x3fadde2d
 80130a8:	af749a6d 	.word	0xaf749a6d
 80130ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80130b0:	fe231671 	.word	0xfe231671
 80130b4:	3fbc71c6 	.word	0x3fbc71c6
 80130b8:	9998ebc4 	.word	0x9998ebc4
 80130bc:	3fc99999 	.word	0x3fc99999
 80130c0:	54442d18 	.word	0x54442d18
 80130c4:	3ff921fb 	.word	0x3ff921fb
 80130c8:	440fffff 	.word	0x440fffff
 80130cc:	7ff00000 	.word	0x7ff00000
 80130d0:	3fdbffff 	.word	0x3fdbffff
 80130d4:	3ff00000 	.word	0x3ff00000
 80130d8:	3ff2ffff 	.word	0x3ff2ffff
 80130dc:	40038000 	.word	0x40038000
 80130e0:	3ff80000 	.word	0x3ff80000
 80130e4:	bff00000 	.word	0xbff00000
 80130e8:	08013bb8 	.word	0x08013bb8
 80130ec:	08013b98 	.word	0x08013b98

080130f0 <fabs>:
 80130f0:	ec51 0b10 	vmov	r0, r1, d0
 80130f4:	ee10 2a10 	vmov	r2, s0
 80130f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130fc:	ec43 2b10 	vmov	d0, r2, r3
 8013100:	4770      	bx	lr
	...

08013104 <_init>:
 8013104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013106:	bf00      	nop
 8013108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801310a:	bc08      	pop	{r3}
 801310c:	469e      	mov	lr, r3
 801310e:	4770      	bx	lr

08013110 <_fini>:
 8013110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013112:	bf00      	nop
 8013114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013116:	bc08      	pop	{r3}
 8013118:	469e      	mov	lr, r3
 801311a:	4770      	bx	lr
