
BalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800ce08  0800ce08  0001ce08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d350  0800d350  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d358  0800d358  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ab8  200001e0  0800d540  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c98  0800d540  00024c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1b2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d39  00000000  00000000  0003f3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  00043100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  000448c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c9b  00000000  00000000  00045ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014494  00000000  00000000  0005fb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a45c  00000000  00000000  0007400f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e46b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb4  00000000  00000000  0010e4e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cdec 	.word	0x0800cdec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800cdec 	.word	0x0800cdec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LSM6_InitEx>:
#include "LSM6.h"
#include "main.h"
#include "math.h"

bool LSM6_InitEx(I2C_HandleTypeDef *i2c, LSM6_t *LSM6, deviceType device, sa0State sa0)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	460b      	mov	r3, r1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	71bb      	strb	r3, [r7, #6]
	LSM6->i2c = i2c;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	601a      	str	r2, [r3, #0]
	LSM6->_device = device;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	711a      	strb	r2, [r3, #4]
	LSM6->io_timeout = DEFAULT_TIMEOUT;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e80:	80da      	strh	r2, [r3, #6]
	LSM6->did_timeout = false;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2200      	movs	r2, #0
 8000e86:	721a      	strb	r2, [r3, #8]
	LSM6->did_error = false;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	725a      	strb	r2, [r3, #9]

	// perform auto-detection unless device type and SA0 state were both specified
	if (device == device_autoDetect || sa0 == sa0_autoDetect)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d002      	beq.n	8000e9a <LSM6_InitEx+0x42>
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d12f      	bne.n	8000efa <LSM6_InitEx+0xa2>
	{
		// check for LSM6DS33 if device is unidentified or was specified to be this type
		if (device == device_autoDetect || device == device_DS33)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d002      	beq.n	8000ea6 <LSM6_InitEx+0x4e>
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d124      	bne.n	8000ef0 <LSM6_InitEx+0x98>
		{
			// check SA0 high address unless SA0 was specified to be low
			if (sa0 != sa0_low && testReg(LSM6, DS33_SA0_HIGH_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00f      	beq.n	8000ecc <LSM6_InitEx+0x74>
 8000eac:	220f      	movs	r2, #15
 8000eae:	216b      	movs	r1, #107	; 0x6b
 8000eb0:	68b8      	ldr	r0, [r7, #8]
 8000eb2:	f000 f83b 	bl	8000f2c <testReg>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b69      	cmp	r3, #105	; 0x69
 8000eba:	d107      	bne.n	8000ecc <LSM6_InitEx+0x74>
			{
				sa0 = sa0_high;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d114      	bne.n	8000ef0 <LSM6_InitEx+0x98>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e011      	b.n	8000ef0 <LSM6_InitEx+0x98>
			}
			// check SA0 low address unless SA0 was specified to be high
			else if (sa0 != sa0_high && testReg(LSM6, DS33_SA0_LOW_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d00e      	beq.n	8000ef0 <LSM6_InitEx+0x98>
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	216a      	movs	r1, #106	; 0x6a
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	f000 f828 	bl	8000f2c <testReg>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b69      	cmp	r3, #105	; 0x69
 8000ee0:	d106      	bne.n	8000ef0 <LSM6_InitEx+0x98>
			{
				sa0 = sa0_low;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <LSM6_InitEx+0x98>
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
			}
		}

		// make sure device and SA0 were successfully detected; otherwise, indicate failure
		if (sa0 == sa0_autoDetect)
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d101      	bne.n	8000efa <LSM6_InitEx+0xa2>
		{
			return false;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e014      	b.n	8000f24 <LSM6_InitEx+0xcc>
		}
	}

	LSM6->_device = device;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	711a      	strb	r2, [r3, #4]

	switch (device)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <LSM6_InitEx+0xb4>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d009      	beq.n	8000f1e <LSM6_InitEx+0xc6>
 8000f0a:	e00a      	b.n	8000f22 <LSM6_InitEx+0xca>
	{
		case device_DS33:
			LSM6->address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <LSM6_InitEx+0xbe>
 8000f12:	226b      	movs	r2, #107	; 0x6b
 8000f14:	e000      	b.n	8000f18 <LSM6_InitEx+0xc0>
 8000f16:	226a      	movs	r2, #106	; 0x6a
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	715a      	strb	r2, [r3, #5]
			break;
 8000f1c:	e001      	b.n	8000f22 <LSM6_InitEx+0xca>
		case device_autoDetect:
			return false;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <LSM6_InitEx+0xcc>
	}

	return true;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <testReg>:

// Returns chip id if communication is established, return 0 if not
uint8_t testReg(LSM6_t *LSM6, uint8_t address, uint8_t reg)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af04      	add	r7, sp, #16
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	70bb      	strb	r3, [r7, #2]
	uint8_t Value;

	if (HAL_OK == HAL_I2C_Mem_Read(LSM6->i2c, (address)<<1, reg, 1, &Value, 1, LSM6->io_timeout))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b299      	uxth	r1, r3
 8000f48:	78bb      	ldrb	r3, [r7, #2]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	88db      	ldrh	r3, [r3, #6]
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f003 fcfd 	bl	800495c <HAL_I2C_Mem_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <testReg+0x40>
	{
		return Value;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	e000      	b.n	8000f6e <testReg+0x42>
	}
	else
	{
		return false;
 8000f6c:	2300      	movs	r3, #0
	}
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <timeoutOccurred>:

// Did a timeout occur in readAcc(), readGyro(), or read() since the last call to timeoutOccurred()?
bool timeoutOccurred(LSM6_t *LSM6)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_timeout;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7a1b      	ldrb	r3, [r3, #8]
 8000f82:	73fb      	strb	r3, [r7, #15]
	LSM6->did_timeout = false;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	721a      	strb	r2, [r3, #8]
	return tmp;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <errorOccured>:
// Did an error occur in readAcc(), readGyro(), or read() since the last call to errorOccurred()?
bool errorOccured(LSM6_t *LSM6)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_error;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7a5b      	ldrb	r3, [r3, #9]
 8000fa4:	73fb      	strb	r3, [r7, #15]
	LSM6->did_error = false;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	725a      	strb	r2, [r3, #9]
	return tmp;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <enableDefault>:
{
	return LSM6->io_timeout;
}

void enableDefault(LSM6_t *LSM6)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	if (LSM6->_device == device_DS33)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11d      	bne.n	8001006 <enableDefault+0x4c>
	{
	// Accelerometer
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (+/-2 g full scale)
	  writeReg(LSM6, CTRL9_XL, 0x38);	// Accelerometer X, Y, Z axes enabled
 8000fca:	2238      	movs	r2, #56	; 0x38
 8000fcc:	2118      	movs	r1, #24
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f81d 	bl	800100e <writeReg>
	  writeReg(LSM6, CTRL1_XL, 0x30);	// Accelerometer = 52hz
 8000fd4:	2230      	movs	r2, #48	; 0x30
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f818 	bl	800100e <writeReg>
	  writeReg(LSM6, INT1_CTRL, 0x01);	// Accelerometer data ready interrupt on INT1
 8000fde:	2201      	movs	r2, #1
 8000fe0:	210d      	movs	r1, #13
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f813 	bl	800100e <writeReg>

	// Gyroscope
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (245 dps)
	  writeReg(LSM6, CTRL10_C, 0x38);	// Gyroscope X, Y, Z axes enabled
 8000fe8:	2238      	movs	r2, #56	; 0x38
 8000fea:	2119      	movs	r1, #25
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f80e 	bl	800100e <writeReg>
	  writeReg(LSM6, CTRL2_G, 0x30);	// Gyroscope = 52hz
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2111      	movs	r1, #17
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f809 	bl	800100e <writeReg>
	  writeReg(LSM6, INT2_CTRL, 0x02);	// Gyroscope data ready interrupt on INT2
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	210e      	movs	r1, #14
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f804 	bl	800100e <writeReg>
	// Common
	// 0x04 = 0b00000100
	// IF_INC = 1 (automatically increment register address)
	// writeReg(CTRL3_C, 0x04);
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <writeReg>:

// Write 8-bits
void writeReg(LSM6_t *LSM6, uint8_t reg, uint8_t value)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b088      	sub	sp, #32
 8001012:	af04      	add	r7, sp, #16
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	70fb      	strb	r3, [r7, #3]
 800101a:	4613      	mov	r3, r2
 800101c:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	// Write 8-bits
	status = HAL_I2C_Mem_Write(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	795b      	ldrb	r3, [r3, #5]
 8001026:	b29b      	uxth	r3, r3
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	b299      	uxth	r1, r3
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	b29a      	uxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	88db      	ldrh	r3, [r3, #6]
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	1cbb      	adds	r3, r7, #2
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	f003 fb92 	bl	8004768 <HAL_I2C_Mem_Write>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d102      	bne.n	8001054 <writeReg+0x46>
	{
		LSM6->did_timeout = true;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	721a      	strb	r2, [r3, #8]
	}
	if(status == HAL_ERROR)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <writeReg+0x52>
	{
		LSM6->did_error = true;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	725a      	strb	r2, [r3, #9]
	}
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <readReg>:

// Read 8-bits
uint8_t readReg(LSM6_t *LSM6, uint8_t reg)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af04      	add	r7, sp, #16
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	uint8_t value, status;

	// Read 8 bits
	status = HAL_I2C_Mem_Read(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	795b      	ldrb	r3, [r3, #5]
 800107c:	b29b      	uxth	r3, r3
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b299      	uxth	r1, r3
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	88db      	ldrh	r3, [r3, #6]
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 030e 	add.w	r3, r7, #14
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	f003 fc60 	bl	800495c <HAL_I2C_Mem_Read>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d104      	bne.n	80010b0 <readReg+0x48>
	{
		LSM6->did_timeout = true;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	721a      	strb	r2, [r3, #8]
		return 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e008      	b.n	80010c2 <readReg+0x5a>
	}
	if(status == HAL_ERROR)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d104      	bne.n	80010c0 <readReg+0x58>
	{
		LSM6->did_error = true;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	725a      	strb	r2, [r3, #9]
		return 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <readReg+0x5a>
	}

	return value;
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <readAcc>:

uint8_t readAcc(LSM6_t *LSM6)
{
 80010ca:	b590      	push	{r4, r7, lr}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xla = readReg(LSM6, OUTX_L_XL);
 80010d2:	2128      	movs	r1, #40	; 0x28
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffc7 	bl	8001068 <readReg>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	uint8_t xha = readReg(LSM6, OUTX_H_XL);
 80010de:	2129      	movs	r1, #41	; 0x29
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffc1 	bl	8001068 <readReg>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73bb      	strb	r3, [r7, #14]
	uint8_t yla = readReg(LSM6, OUTY_L_XL);
 80010ea:	212a      	movs	r1, #42	; 0x2a
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffbb 	bl	8001068 <readReg>
 80010f2:	4603      	mov	r3, r0
 80010f4:	737b      	strb	r3, [r7, #13]
	uint8_t yha = readReg(LSM6, OUTY_H_XL);
 80010f6:	212b      	movs	r1, #43	; 0x2b
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffb5 	bl	8001068 <readReg>
 80010fe:	4603      	mov	r3, r0
 8001100:	733b      	strb	r3, [r7, #12]
	uint8_t zla = readReg(LSM6, OUTZ_L_XL);
 8001102:	212c      	movs	r1, #44	; 0x2c
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffaf 	bl	8001068 <readReg>
 800110a:	4603      	mov	r3, r0
 800110c:	72fb      	strb	r3, [r7, #11]
	uint8_t zha = readReg(LSM6, OUTZ_H_XL);
 800110e:	212d      	movs	r1, #45	; 0x2d
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffa9 	bl	8001068 <readReg>
 8001116:	4603      	mov	r3, r0
 8001118:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff2b 	bl	8000f76 <timeoutOccurred>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <readAcc+0x60>
	{
		return HAL_BUSY;
 8001126:	2302      	movs	r3, #2
 8001128:	e035      	b.n	8001196 <readAcc+0xcc>
	}
	if (errorOccured(LSM6) == true)
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff34 	bl	8000f98 <errorOccured>
 8001130:	4603      	mov	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <readAcc+0x70>
	{
		return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e02d      	b.n	8001196 <readAcc+0xcc>
	}

	// combine high and low bytes
	LSM6->accelerometer.x = (int16_t)(xha << 8 | xla);
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9a3 	bl	8000494 <__aeabi_i2d>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	e9c2 3404 	strd	r3, r4, [r2, #16]
	LSM6->accelerometer.y = (int16_t)(yha << 8 | yla);
 8001158:	7b3b      	ldrb	r3, [r7, #12]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f994 	bl	8000494 <__aeabi_i2d>
 800116c:	4603      	mov	r3, r0
 800116e:	460c      	mov	r4, r1
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	e9c2 3406 	strd	r3, r4, [r2, #24]
	LSM6->accelerometer.z = (int16_t)(zha << 8 | zla);
 8001176:	7abb      	ldrb	r3, [r7, #10]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f985 	bl	8000494 <__aeabi_i2d>
 800118a:	4603      	mov	r3, r0
 800118c:	460c      	mov	r4, r1
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	e9c2 3408 	strd	r3, r4, [r2, #32]

	return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}

0800119e <readGyro>:

uint8_t readGyro(LSM6_t *LSM6)
{
 800119e:	b590      	push	{r4, r7, lr}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xlg = readReg(LSM6, OUTX_L_G);
 80011a6:	2122      	movs	r1, #34	; 0x22
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff5d 	bl	8001068 <readReg>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
	uint8_t xhg = readReg(LSM6, OUTX_H_G);
 80011b2:	2123      	movs	r1, #35	; 0x23
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff57 	bl	8001068 <readReg>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73bb      	strb	r3, [r7, #14]
	uint8_t ylg = readReg(LSM6, OUTY_L_G);
 80011be:	2124      	movs	r1, #36	; 0x24
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff51 	bl	8001068 <readReg>
 80011c6:	4603      	mov	r3, r0
 80011c8:	737b      	strb	r3, [r7, #13]
	uint8_t yhg = readReg(LSM6, OUTY_H_G);
 80011ca:	2125      	movs	r1, #37	; 0x25
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff4b 	bl	8001068 <readReg>
 80011d2:	4603      	mov	r3, r0
 80011d4:	733b      	strb	r3, [r7, #12]
	uint8_t zlg = readReg(LSM6, OUTZ_L_G);
 80011d6:	2126      	movs	r1, #38	; 0x26
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff45 	bl	8001068 <readReg>
 80011de:	4603      	mov	r3, r0
 80011e0:	72fb      	strb	r3, [r7, #11]
	uint8_t zhg = readReg(LSM6, OUTZ_H_G);
 80011e2:	2127      	movs	r1, #39	; 0x27
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff3f 	bl	8001068 <readReg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fec1 	bl	8000f76 <timeoutOccurred>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <readGyro+0x60>
	{
		return HAL_BUSY;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e035      	b.n	800126a <readGyro+0xcc>
	}
	if (errorOccured(LSM6) == true)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff feca 	bl	8000f98 <errorOccured>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <readGyro+0x70>
	{
		return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e02d      	b.n	800126a <readGyro+0xcc>
	}

	// combine high and low bytes
	LSM6->gyroscope.x = (int16_t)(xhg << 8 | xlg);
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f939 	bl	8000494 <__aeabi_i2d>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	LSM6->gyroscope.y = (int16_t)(yhg << 8 | ylg);
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f92a 	bl	8000494 <__aeabi_i2d>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	LSM6->gyroscope.z = (int16_t)(zhg << 8 | zlg);
 800124a:	7abb      	ldrb	r3, [r7, #10]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f91b 	bl	8000494 <__aeabi_i2d>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}

08001272 <LSM6_Read>:

// Main function to read LSM6 data
uint8_t LSM6_Read(LSM6_t *LSM6)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	uint8_t status;

	// Read accelerometer data
	if ((status = readAcc(LSM6)) != HAL_OK)
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff25 	bl	80010ca <readAcc>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <LSM6_Read+0x1c>
	{
		return status;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	e00a      	b.n	80012a4 <LSM6_Read+0x32>
	}

	// Read gyroscope data
	if ((status = readGyro(LSM6)) != HAL_OK)
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff85 	bl	800119e <readGyro>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <LSM6_Read+0x30>
	{
		return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	e000      	b.n	80012a4 <LSM6_Read+0x32>
	}

	return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <PID_Init>:
 *      Author: mand2
 */
#include "PID.h"

void PID_Init(PID_t *pid, double* Input, double* Output, double* Setpoint, double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24
 80012b8:	6239      	str	r1, [r7, #32]
 80012ba:	61fa      	str	r2, [r7, #28]
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	ed87 0b04 	vstr	d0, [r7, #16]
 80012c2:	ed87 1b02 	vstr	d1, [r7, #8]
 80012c6:	ed87 2b00 	vstr	d2, [r7]
    pid->myOutput = Output;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
    pid->myInput = Input;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
    pid->mySetpoint = Setpoint;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->inAuto = false;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    pid->SampleTime = 50;
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	2232      	movs	r2, #50	; 0x32
 80012e8:	651a      	str	r2, [r3, #80]	; 0x50

    PID_SetOutputLimits(pid, 0, 255);				//default output limit
 80012ea:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001320 <PID_Init+0x70>
 80012ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001328 <PID_Init+0x78>
 80012f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f4:	f000 f909 	bl	800150a <PID_SetOutputLimits>
    PID_SetControllerDirection(pid, ControllerDirection);
 80012f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012fc:	f000 f9cd 	bl	800169a <PID_SetControllerDirection>
    PID_SetTunings(pid, Kp, Ki, Kd, POn);
 8001300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001302:	ed97 2b00 	vldr	d2, [r7]
 8001306:	ed97 1b02 	vldr	d1, [r7, #8]
 800130a:	ed97 0b04 	vldr	d0, [r7, #16]
 800130e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001310:	f000 f80e 	bl	8001330 <PID_SetTunings>
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	f3af 8000 	nop.w
 8001320:	00000000 	.word	0x00000000
 8001324:	406fe000 	.word	0x406fe000
	...

08001330 <PID_SetTunings>:

void PID_SetTunings(PID_t *pid, double Kp, double Ki, double Kd, int POn)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b08b      	sub	sp, #44	; 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	61f8      	str	r0, [r7, #28]
 8001338:	ed87 0b04 	vstr	d0, [r7, #16]
 800133c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001340:	ed87 2b00 	vstr	d2, [r7]
 8001344:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001352:	f7ff fb7b 	bl	8000a4c <__aeabi_dcmplt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 8094 	bne.w	8001486 <PID_SetTunings+0x156>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800136a:	f7ff fb6f 	bl	8000a4c <__aeabi_dcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 8088 	bne.w	8001486 <PID_SetTunings+0x156>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001382:	f7ff fb63 	bl	8000a4c <__aeabi_dcmplt>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d17c      	bne.n	8001486 <PID_SetTunings+0x156>

   pid->pOn = POn;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   pid->pOnE = (POn == P_ON_ERROR);
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b01      	cmp	r3, #1
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

   pid->dispKp = Kp;
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013b0:	e9c2 3400 	strd	r3, r4, [r2]
   pid->dispKi = Ki;
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
   pid->dispKd = Kd;
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013c4:	e9c2 3404 	strd	r3, r4, [r2, #16]

   double SampleTimeInSec = ((double)pid->SampleTime)/1000;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f851 	bl	8000474 <__aeabi_ui2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <PID_SetTunings+0x160>)
 80013d8:	f7ff f9f0 	bl	80007bc <__aeabi_ddiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
   pid->kp = Kp;
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013ea:	e9c2 3406 	strd	r3, r4, [r2, #24]
   pid->ki = Ki * SampleTimeInSec;
 80013ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013f6:	f7ff f8b7 	bl	8000568 <__aeabi_dmul>
 80013fa:	4603      	mov	r3, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	e9c2 3408 	strd	r3, r4, [r2, #32]
   pid->kd = Kd / SampleTimeInSec;
 8001404:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800140c:	f7ff f9d6 	bl	80007bc <__aeabi_ddiv>
 8001410:	4603      	mov	r3, r0
 8001412:	460c      	mov	r4, r1
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  if(pid->controllerDirection == REVERSE)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001420:	2b01      	cmp	r3, #1
 8001422:	d131      	bne.n	8001488 <PID_SetTunings+0x158>
   {
	  pid->kp = (0 - pid->kp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	f04f 0000 	mov.w	r0, #0
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	f7fe fedf 	bl	80001f8 <__aeabi_dsub>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  pid->ki = (0 - pid->ki);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800144a:	461a      	mov	r2, r3
 800144c:	4623      	mov	r3, r4
 800144e:	f04f 0000 	mov.w	r0, #0
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	f7fe fecf 	bl	80001f8 <__aeabi_dsub>
 800145a:	4603      	mov	r3, r0
 800145c:	460c      	mov	r4, r1
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	e9c2 3408 	strd	r3, r4, [r2, #32]
	  pid->kd = (0 - pid->kd);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800146a:	461a      	mov	r2, r3
 800146c:	4623      	mov	r3, r4
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	f7fe febf 	bl	80001f8 <__aeabi_dsub>
 800147a:	4603      	mov	r3, r0
 800147c:	460c      	mov	r4, r1
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8001484:	e000      	b.n	8001488 <PID_SetTunings+0x158>
   if (Kp<0 || Ki<0 || Kd<0) return;
 8001486:	bf00      	nop
   }
}
 8001488:	372c      	adds	r7, #44	; 0x2c
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	408f4000 	.word	0x408f4000

08001494 <PID_SetSampleTime>:

void PID_SetSampleTime(PID_t *pid, int NewSampleTime)
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	dd2e      	ble.n	8001502 <PID_SetSampleTime+0x6e>
   {
      double ratio  = (double)NewSampleTime
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f7fe fff5 	bl	8000494 <__aeabi_i2d>
 80014aa:	4604      	mov	r4, r0
 80014ac:	460d      	mov	r5, r1
                      / (double)pid->SampleTime;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffde 	bl	8000474 <__aeabi_ui2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7ff f97c 	bl	80007bc <__aeabi_ddiv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      pid->ki *= ratio;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d6:	f7ff f847 	bl	8000568 <__aeabi_dmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	e9c2 3408 	strd	r3, r4, [r2, #32]
      pid->kd /= ratio;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ee:	f7ff f965 	bl	80007bc <__aeabi_ddiv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      pid->SampleTime = (unsigned long)NewSampleTime;
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	651a      	str	r2, [r3, #80]	; 0x50
   }
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}

0800150a <PID_SetOutputLimits>:

void PID_SetOutputLimits(PID_t *pid, double Min, double Max)
{
 800150a:	b590      	push	{r4, r7, lr}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	6178      	str	r0, [r7, #20]
 8001512:	ed87 0b02 	vstr	d0, [r7, #8]
 8001516:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 800151a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800151e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001522:	f7ff faa7 	bl	8000a74 <__aeabi_dcmpge>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d161      	bne.n	80015f0 <PID_SetOutputLimits+0xe6>
   pid->outMin = Min;
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001532:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
   pid->outMax = Max;
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	e9d7 3400 	ldrd	r3, r4, [r7]
 800153c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

   if(pid->inAuto)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001546:	2b00      	cmp	r3, #0
 8001548:	d053      	beq.n	80015f2 <PID_SetOutputLimits+0xe8>
   {
	   if(*(pid->myOutput) > pid->outMax) *(pid->myOutput) = pid->outMax;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001558:	461a      	mov	r2, r3
 800155a:	4623      	mov	r3, r4
 800155c:	f7ff fa94 	bl	8000a88 <__aeabi_dcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <PID_SetOutputLimits+0x6c>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001570:	e9c2 3400 	strd	r3, r4, [r2]
 8001574:	e014      	b.n	80015a0 <PID_SetOutputLimits+0x96>
	   else if(*(pid->myOutput) < pid->outMin) *(pid->myOutput) = pid->outMin;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001584:	461a      	mov	r2, r3
 8001586:	4623      	mov	r3, r4
 8001588:	f7ff fa60 	bl	8000a4c <__aeabi_dcmplt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <PID_SetOutputLimits+0x96>
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 800159c:	e9c2 3400 	strd	r3, r4, [r2]

	   if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	f7ff fa6a 	bl	8000a88 <__aeabi_dcmpgt>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <PID_SetOutputLimits+0xbe>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 80015c6:	e014      	b.n	80015f2 <PID_SetOutputLimits+0xe8>
	   else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80015d4:	461a      	mov	r2, r3
 80015d6:	4623      	mov	r3, r4
 80015d8:	f7ff fa38 	bl	8000a4c <__aeabi_dcmplt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <PID_SetOutputLimits+0xe8>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 80015ee:	e000      	b.n	80015f2 <PID_SetOutputLimits+0xe8>
   if(Min >= Max) return;
 80015f0:	bf00      	nop
   }
}
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <PID_SetMode>:

void PID_SetMode(PID_t *pid, int Mode)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !pid->inAuto)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d039      	beq.n	800168a <PID_SetMode+0x92>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800161c:	2b00      	cmp	r3, #0
 800161e:	d134      	bne.n	800168a <PID_SetMode+0x92>
    {  /*we just went from manual to auto*/
    	pid->outputSum = *pid->myOutput;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001624:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    	pid->lastInput = *pid->myInput;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	   if(pid->outputSum > pid->outMax) pid->outputSum = pid->outMax;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	f7ff fa1c 	bl	8000a88 <__aeabi_dcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <PID_SetMode+0x6c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001662:	e012      	b.n	800168a <PID_SetMode+0x92>
	   else if(pid->outputSum < pid->outMin) pid->outputSum = pid->outMin;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	f7ff f9ea 	bl	8000a4c <__aeabi_dcmplt>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <PID_SetMode+0x92>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    }
    pid->inAuto = newAuto;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}

0800169a <PID_SetControllerDirection>:

void PID_SetControllerDirection(PID_t *pid, int Direction)
{
 800169a:	b590      	push	{r4, r7, lr}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
   if(pid->inAuto && (Direction != pid->controllerDirection))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d036      	beq.n	800171c <PID_SetControllerDirection+0x82>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b4:	461a      	mov	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d02f      	beq.n	800171c <PID_SetControllerDirection+0x82>
   {
	   pid->kp = (0 - pid->kp);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4623      	mov	r3, r4
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f7fe fd93 	bl	80001f8 <__aeabi_dsub>
 80016d2:	4603      	mov	r3, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	   pid->ki = (0 - pid->ki);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4623      	mov	r3, r4
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	f7fe fd83 	bl	80001f8 <__aeabi_dsub>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	e9c2 3408 	strd	r3, r4, [r2, #32]
	   pid->kd = (0 - pid->kd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001702:	461a      	mov	r2, r3
 8001704:	4623      	mov	r3, r4
 8001706:	f04f 0000 	mov.w	r0, #0
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	f7fe fd73 	bl	80001f8 <__aeabi_dsub>
 8001712:	4603      	mov	r3, r0
 8001714:	460c      	mov	r4, r1
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   }
   pid->controllerDirection = Direction;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}

0800172e <PID_Compute>:

bool PID_Compute(PID_t *pid)
{
 800172e:	b5b0      	push	{r4, r5, r7, lr}
 8001730:	b08a      	sub	sp, #40	; 0x28
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   if(!pid->inAuto)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <PID_Compute+0x16>
   {
	   return false;
 8001740:	2300      	movs	r3, #0
 8001742:	e0d8      	b.n	80018f6 <PID_Compute+0x1c8>
   }

      /*Compute all the working error variables*/
      double input = *pid->myInput;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800174c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      double error = *pid->mySetpoint - input;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800175c:	f7fe fd4c 	bl	80001f8 <__aeabi_dsub>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	e9c7 3404 	strd	r3, r4, [r7, #16]
      double dInput = (input - pid->lastInput);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800176e:	461a      	mov	r2, r3
 8001770:	4623      	mov	r3, r4
 8001772:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001776:	f7fe fd3f 	bl	80001f8 <__aeabi_dsub>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      pid->outputSum+= (pid->ki * error);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800178e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001792:	f7fe fee9 	bl	8000568 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe fd2d 	bl	80001fc <__adddf3>
 80017a2:	4603      	mov	r3, r0
 80017a4:	460c      	mov	r4, r1
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pid->pOnE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d114      	bne.n	80017e0 <PID_Compute+0xb2>
	  {
    	  pid->outputSum-= pid->kp * dInput;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c6:	f7fe fecf 	bl	8000568 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe fd11 	bl	80001f8 <__aeabi_dsub>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	  }

      if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	f7ff f94a 	bl	8000a88 <__aeabi_dcmpgt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <PID_Compute+0xda>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001806:	e012      	b.n	800182e <PID_Compute+0x100>
      else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	f7ff f918 	bl	8000a4c <__aeabi_dcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <PID_Compute+0x100>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

      /*Add Proportional on Error, if P_ON_E is specified*/
	  double output;
      if(pid->pOnE) output = pid->kp * error;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00d      	beq.n	8001854 <PID_Compute+0x126>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800183e:	461a      	mov	r2, r3
 8001840:	4623      	mov	r3, r4
 8001842:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001846:	f7fe fe8f 	bl	8000568 <__aeabi_dmul>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001852:	e005      	b.n	8001860 <PID_Compute+0x132>
      else output = 0;
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	e9c7 3408 	strd	r3, r4, [r7, #32]

      /*Compute Rest of PID Output*/
      output += pid->outputSum - pid->kd * dInput;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800186c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001870:	f7fe fe7a 	bl	8000568 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fcbc 	bl	80001f8 <__aeabi_dsub>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800188c:	f7fe fcb6 	bl	80001fc <__adddf3>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	e9c7 3408 	strd	r3, r4, [r7, #32]

      if(output > pid->outMax) output = pid->outMax;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800189e:	461a      	mov	r2, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018a6:	f7ff f8ef 	bl	8000a88 <__aeabi_dcmpgt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <PID_Compute+0x18e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80018b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80018ba:	e010      	b.n	80018de <PID_Compute+0x1b0>
      else if(output < pid->outMin) output = pid->outMin;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018ca:	f7ff f8bf 	bl	8000a4c <__aeabi_dcmplt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <PID_Compute+0x1b0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80018da:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *pid->myOutput = output;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80018e6:	e9c2 3400 	strd	r3, r4, [r2]

      /*Remember some variables for next time*/
      pid->lastInput = input;
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80018f0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
      return true;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001900 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 8001904:	482b      	ldr	r0, [pc, #172]	; (80019b4 <MX_FREERTOS_Init+0xb4>)
 8001906:	f005 fce7 	bl	80072d8 <osMutexNew>
 800190a:	4602      	mov	r2, r0
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <MX_FREERTOS_Init+0xb8>)
 800190e:	601a      	str	r2, [r3, #0]

  /* creation of MutexUARTputchar */
  MutexUARTputcharHandle = osMutexNew(&MutexUARTputchar_attributes);
 8001910:	482a      	ldr	r0, [pc, #168]	; (80019bc <MX_FREERTOS_Init+0xbc>)
 8001912:	f005 fce1 	bl	80072d8 <osMutexNew>
 8001916:	4602      	mov	r2, r0
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <MX_FREERTOS_Init+0xc0>)
 800191a:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreLSM6_DataReady */
  SemaphoreLSM6_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreLSM6_DataReady_attributes);
 800191c:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <MX_FREERTOS_Init+0xc4>)
 800191e:	2101      	movs	r1, #1
 8001920:	2001      	movs	r0, #1
 8001922:	f005 fe21 	bl	8007568 <osSemaphoreNew>
 8001926:	4602      	mov	r2, r0
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <MX_FREERTOS_Init+0xc8>)
 800192a:	601a      	str	r2, [r3, #0]

  /* creation of SemaphorePIDCompute */
  SemaphorePIDComputeHandle = osSemaphoreNew(1, 1, &SemaphorePIDCompute_attributes);
 800192c:	4a27      	ldr	r2, [pc, #156]	; (80019cc <MX_FREERTOS_Init+0xcc>)
 800192e:	2101      	movs	r1, #1
 8001930:	2001      	movs	r0, #1
 8001932:	f005 fe19 	bl	8007568 <osSemaphoreNew>
 8001936:	4602      	mov	r2, r0
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MX_FREERTOS_Init+0xd0>)
 800193a:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerPID */
  TimerPIDHandle = osTimerNew(TimerPIDCallback, osTimerPeriodic, NULL, &TimerPID_attributes);
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <MX_FREERTOS_Init+0xd4>)
 800193e:	2200      	movs	r2, #0
 8001940:	2101      	movs	r1, #1
 8001942:	4825      	ldr	r0, [pc, #148]	; (80019d8 <MX_FREERTOS_Init+0xd8>)
 8001944:	f005 fc04 	bl	8007150 <osTimerNew>
 8001948:	4602      	mov	r2, r0
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <MX_FREERTOS_Init+0xdc>)
 800194c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueInputPID */
  QueueInputPIDHandle = osMessageQueueNew (8, sizeof(double), &QueueInputPID_attributes);
 800194e:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <MX_FREERTOS_Init+0xe0>)
 8001950:	2108      	movs	r1, #8
 8001952:	2008      	movs	r0, #8
 8001954:	f005 ff64 	bl	8007820 <osMessageQueueNew>
 8001958:	4602      	mov	r2, r0
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_FREERTOS_Init+0xe4>)
 800195c:	601a      	str	r2, [r3, #0]

  /* creation of QueueOutputPID */
  QueueOutputPIDHandle = osMessageQueueNew (16, sizeof(double), &QueueOutputPID_attributes);
 800195e:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <MX_FREERTOS_Init+0xe8>)
 8001960:	2108      	movs	r1, #8
 8001962:	2010      	movs	r0, #16
 8001964:	f005 ff5c 	bl	8007820 <osMessageQueueNew>
 8001968:	4602      	mov	r2, r0
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <MX_FREERTOS_Init+0xec>)
 800196c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(StartHeartbeatTask, NULL, &Heartbeat_attributes);
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <MX_FREERTOS_Init+0xf0>)
 8001970:	2100      	movs	r1, #0
 8001972:	4820      	ldr	r0, [pc, #128]	; (80019f4 <MX_FREERTOS_Init+0xf4>)
 8001974:	f005 fb02 	bl	8006f7c <osThreadNew>
 8001978:	4602      	mov	r2, r0
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_FREERTOS_Init+0xf8>)
 800197c:	601a      	str	r2, [r3, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(StartIMU_Task, NULL, &IMU_Task_attributes);
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <MX_FREERTOS_Init+0xfc>)
 8001980:	2100      	movs	r1, #0
 8001982:	481f      	ldr	r0, [pc, #124]	; (8001a00 <MX_FREERTOS_Init+0x100>)
 8001984:	f005 fafa 	bl	8006f7c <osThreadNew>
 8001988:	4602      	mov	r2, r0
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_FREERTOS_Init+0x104>)
 800198c:	601a      	str	r2, [r3, #0]

  /* creation of PIDTask */
  PIDTaskHandle = osThreadNew(StartPIDTask, NULL, &PIDTask_attributes);
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <MX_FREERTOS_Init+0x108>)
 8001990:	2100      	movs	r1, #0
 8001992:	481e      	ldr	r0, [pc, #120]	; (8001a0c <MX_FREERTOS_Init+0x10c>)
 8001994:	f005 faf2 	bl	8006f7c <osThreadNew>
 8001998:	4602      	mov	r2, r0
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_FREERTOS_Init+0x110>)
 800199c:	601a      	str	r2, [r3, #0]

  /* creation of StepperMotorsTa */
  StepperMotorsTaHandle = osThreadNew(StartStepperMotorsTask, NULL, &StepperMotorsTa_attributes);
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <MX_FREERTOS_Init+0x114>)
 80019a0:	2100      	movs	r1, #0
 80019a2:	481d      	ldr	r0, [pc, #116]	; (8001a18 <MX_FREERTOS_Init+0x118>)
 80019a4:	f005 faea 	bl	8006f7c <osThreadNew>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_FREERTOS_Init+0x11c>)
 80019ac:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	0800d03c 	.word	0x0800d03c
 80019b8:	20004b10 	.word	0x20004b10
 80019bc:	0800d04c 	.word	0x0800d04c
 80019c0:	20004b30 	.word	0x20004b30
 80019c4:	0800d05c 	.word	0x0800d05c
 80019c8:	20004b1c 	.word	0x20004b1c
 80019cc:	0800d06c 	.word	0x0800d06c
 80019d0:	20004b18 	.word	0x20004b18
 80019d4:	0800d02c 	.word	0x0800d02c
 80019d8:	08001cc5 	.word	0x08001cc5
 80019dc:	20004b20 	.word	0x20004b20
 80019e0:	0800cffc 	.word	0x0800cffc
 80019e4:	20004b34 	.word	0x20004b34
 80019e8:	0800d014 	.word	0x0800d014
 80019ec:	20004b38 	.word	0x20004b38
 80019f0:	0800cf6c 	.word	0x0800cf6c
 80019f4:	08001a21 	.word	0x08001a21
 80019f8:	20004b24 	.word	0x20004b24
 80019fc:	0800cf90 	.word	0x0800cf90
 8001a00:	08001a41 	.word	0x08001a41
 8001a04:	20004b14 	.word	0x20004b14
 8001a08:	0800cfb4 	.word	0x0800cfb4
 8001a0c:	08001b59 	.word	0x08001b59
 8001a10:	20004b2c 	.word	0x20004b2c
 8001a14:	0800cfd8 	.word	0x0800cfd8
 8001a18:	08001c89 	.word	0x08001c89
 8001a1c:	20004b28 	.word	0x20004b28

08001a20 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a28:	2120      	movs	r1, #32
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <StartHeartbeatTask+0x1c>)
 8001a2c:	f002 fd31 	bl	8004492 <HAL_GPIO_TogglePin>
      osDelay(500);
 8001a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a34:	f005 fb48 	bl	80070c8 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a38:	e7f6      	b.n	8001a28 <StartHeartbeatTask+0x8>
 8001a3a:	bf00      	nop
 8001a3c:	40020000 	.word	0x40020000

08001a40 <StartIMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU_Task */
void StartIMU_Task(void *argument)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b099      	sub	sp, #100	; 0x64
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU_Task */
	LSM6_t LSM6DS33;
	double accAngle, outputAngle;
	double prevAngle = 0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f04f 0400 	mov.w	r4, #0
 8001a50:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <StartIMU_Task+0xf4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f005 fcd5 	bl	800740c <osMutexAcquire>
	if (LSM6_InitEx(&hi2c1, &LSM6DS33, device_autoDetect, sa0_autoDetect) == false)
 8001a62:	f107 0110 	add.w	r1, r7, #16
 8001a66:	2302      	movs	r3, #2
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4833      	ldr	r0, [pc, #204]	; (8001b38 <StartIMU_Task+0xf8>)
 8001a6c:	f7ff f9f4 	bl	8000e58 <LSM6_InitEx>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d103      	bne.n	8001a7e <StartIMU_Task+0x3e>
	{
		printf("LSM6 INIT ERROR\n\r");
 8001a76:	4831      	ldr	r0, [pc, #196]	; (8001b3c <StartIMU_Task+0xfc>)
 8001a78:	f002 f82c 	bl	8003ad4 <printf_>
 8001a7c:	e004      	b.n	8001a88 <StartIMU_Task+0x48>
	}
	else
	{
		enableDefault(&LSM6DS33);
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa99 	bl	8000fba <enableDefault>
	}
	osMutexRelease(MutexI2CHandle);
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <StartIMU_Task+0xf4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 fd1b 	bl	80074c8 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <StartIMU_Task+0x100>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 fe02 	bl	80076a4 <osSemaphoreAcquire>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f5      	bne.n	8001a92 <StartIMU_Task+0x52>
    {
    	if(HAL_OK == LSM6_Read(&LSM6DS33))
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fbe1 	bl	8001272 <LSM6_Read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d13a      	bne.n	8001b2c <StartIMU_Task+0xec>
    	{
        	accAngle = calculateAccAngle(LSM6DS33.accelerometer.y, LSM6DS33.accelerometer.z);
 8001ab6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001aba:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001abe:	eeb0 1a46 	vmov.f32	s2, s12
 8001ac2:	eef0 1a66 	vmov.f32	s3, s13
 8001ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aca:	eef0 0a67 	vmov.f32	s1, s15
 8001ace:	f000 f9af 	bl	8001e30 <calculateAccAngle>
 8001ad2:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
        	outputAngle = complementaryFilter(LSM6DS33.gyroscope.x, accAngle, prevAngle);
 8001ad6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001ada:	ed97 2b16 	vldr	d2, [r7, #88]	; 0x58
 8001ade:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae6:	eef0 0a67 	vmov.f32	s1, s15
 8001aea:	f000 f931 	bl	8001d50 <complementaryFilter>
 8001aee:	eeb0 7a40 	vmov.f32	s14, s0
 8001af2:	eef0 7a60 	vmov.f32	s15, s1
 8001af6:	ed87 7b02 	vstr	d7, [r7, #8]
        	osMessageQueuePut(QueueInputPIDHandle, &outputAngle, 0, 0);
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <StartIMU_Task+0x104>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f107 0108 	add.w	r1, r7, #8
 8001b02:	2300      	movs	r3, #0
 8001b04:	2200      	movs	r2, #0
 8001b06:	f005 ff11 	bl	800792c <osMessageQueuePut>
        	prevAngle = outputAngle;
 8001b0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b0e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        	printf("accAngle = %.2f, ", accAngle);
 8001b12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <StartIMU_Task+0x108>)
 8001b18:	f001 ffdc 	bl	8003ad4 <printf_>
        	printf("comp filter = %.2f\n\r", outputAngle);
 8001b1c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <StartIMU_Task+0x10c>)
 8001b26:	f001 ffd5 	bl	8003ad4 <printf_>
 8001b2a:	e7b2      	b.n	8001a92 <StartIMU_Task+0x52>
    	}
    	else
    	{
    		printf("LSM6 READ ERROR\n\r");
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <StartIMU_Task+0x110>)
 8001b2e:	f001 ffd1 	bl	8003ad4 <printf_>
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001b32:	e7ae      	b.n	8001a92 <StartIMU_Task+0x52>
 8001b34:	20004b10 	.word	0x20004b10
 8001b38:	20004b3c 	.word	0x20004b3c
 8001b3c:	0800ceb0 	.word	0x0800ceb0
 8001b40:	20004b1c 	.word	0x20004b1c
 8001b44:	20004b34 	.word	0x20004b34
 8001b48:	0800cec4 	.word	0x0800cec4
 8001b4c:	0800ced8 	.word	0x0800ced8
 8001b50:	0800cef0 	.word	0x0800cef0
 8001b54:	00000000 	.word	0x00000000

08001b58 <StartPIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void *argument)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b0ac      	sub	sp, #176	; 0xb0
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIDTask */
	PID_t PID;
	double input, output;
	double setpoint = PID_SETPOINT;
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double Kp = 21.0;
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	4c3d      	ldr	r4, [pc, #244]	; (8001c68 <StartPIDTask+0x110>)
 8001b72:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	double Ki = 240.0;
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	4c3c      	ldr	r4, [pc, #240]	; (8001c6c <StartPIDTask+0x114>)
 8001b7c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	double Kd = 0.8;
 8001b80:	a433      	add	r4, pc, #204	; (adr r4, 8001c50 <StartPIDTask+0xf8>)
 8001b82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b86:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	PID_Init(&PID, &input, &output, &setpoint, Kp, Ki, Kd, P_ON_ERROR, DIRECT);
 8001b8a:	f107 0408 	add.w	r4, r7, #8
 8001b8e:	f107 0210 	add.w	r2, r7, #16
 8001b92:	f107 0118 	add.w	r1, r7, #24
 8001b96:	f107 0020 	add.w	r0, r7, #32
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	ed97 2b24 	vldr	d2, [r7, #144]	; 0x90
 8001ba6:	ed97 1b26 	vldr	d1, [r7, #152]	; 0x98
 8001baa:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8001bae:	4623      	mov	r3, r4
 8001bb0:	f7ff fb7e 	bl	80012b0 <PID_Init>
	PID_SetMode(&PID, AUTOMATIC);
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fd1c 	bl	80015f8 <PID_SetMode>
	PID_SetSampleTime(&PID, (uint32_t) ((1.0/(float)PID_SAMPLE_TIME) * 1000.0));
 8001bc0:	f107 0320 	add.w	r3, r7, #32
 8001bc4:	210a      	movs	r1, #10
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc64 	bl	8001494 <PID_SetSampleTime>
	PID_SetOutputLimits(&PID, -128, 127);
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001c58 <StartPIDTask+0x100>
 8001bd4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001c60 <StartPIDTask+0x108>
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc96 	bl	800150a <PID_SetOutputLimits>
	osTimerStart(TimerPIDHandle, (PID.SampleTime * osKernelGetTickFreq()) / 1000);
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <StartPIDTask+0x118>)
 8001be0:	681d      	ldr	r5, [r3, #0]
 8001be2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8001be4:	f005 f9c0 	bl	8006f68 <osKernelGetTickFreq>
 8001be8:	4603      	mov	r3, r0
 8001bea:	fb03 f304 	mul.w	r3, r3, r4
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <StartPIDTask+0x11c>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f005 fb2d 	bl	8007258 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphorePIDComputeHandle, osWaitForever);
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <StartPIDTask+0x120>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f04f 31ff 	mov.w	r1, #4294967295
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 fd4c 	bl	80076a4 <osSemaphoreAcquire>
	  osMessageQueueGet(QueueInputPIDHandle, &input, NULL, 0);
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <StartPIDTask+0x124>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f107 0118 	add.w	r1, r7, #24
 8001c14:	2300      	movs	r3, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	f005 fefc 	bl	8007a14 <osMessageQueueGet>
	  PID_Compute(&PID);
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fd84 	bl	800172e <PID_Compute>
	  osMessageQueuePut(QueueOutputPIDHandle, &output, 0, 0);
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <StartPIDTask+0x128>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	f107 0110 	add.w	r1, r7, #16
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2200      	movs	r2, #0
 8001c32:	f005 fe7b 	bl	800792c <osMessageQueuePut>
	  printf("PID input: %.2f, output:%.2f\n\r", input, output);
 8001c36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001c3e:	e9cd 3400 	strd	r3, r4, [sp]
 8001c42:	4613      	mov	r3, r2
 8001c44:	460a      	mov	r2, r1
 8001c46:	480f      	ldr	r0, [pc, #60]	; (8001c84 <StartPIDTask+0x12c>)
 8001c48:	f001 ff44 	bl	8003ad4 <printf_>
	  osSemaphoreAcquire(SemaphorePIDComputeHandle, osWaitForever);
 8001c4c:	e7d7      	b.n	8001bfe <StartPIDTask+0xa6>
 8001c4e:	bf00      	nop
 8001c50:	9999999a 	.word	0x9999999a
 8001c54:	3fe99999 	.word	0x3fe99999
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	405fc000 	.word	0x405fc000
 8001c60:	00000000 	.word	0x00000000
 8001c64:	c0600000 	.word	0xc0600000
 8001c68:	40350000 	.word	0x40350000
 8001c6c:	406e0000 	.word	0x406e0000
 8001c70:	20004b20 	.word	0x20004b20
 8001c74:	10624dd3 	.word	0x10624dd3
 8001c78:	20004b18 	.word	0x20004b18
 8001c7c:	20004b34 	.word	0x20004b34
 8001c80:	20004b38 	.word	0x20004b38
 8001c84:	0800cf04 	.word	0x0800cf04

08001c88 <StartStepperMotorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStepperMotorsTask */
void StartStepperMotorsTask(void *argument)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStepperMotorsTask */
	double pid_output;
  /* Infinite loop */
  for(;;)
  {
    if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &pid_output, NULL, 0))
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <StartStepperMotorsTask+0x34>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	f107 0108 	add.w	r1, r7, #8
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f005 feba 	bl	8007a14 <osMessageQueueGet>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <StartStepperMotorsTask+0x2c>
    {
    	printf("Step motor input:%.2f\n\r", pid_output);
 8001ca6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4623      	mov	r3, r4
 8001cae:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <StartStepperMotorsTask+0x38>)
 8001cb0:	f001 ff10 	bl	8003ad4 <printf_>
    }
    osDelay(5);
 8001cb4:	2005      	movs	r0, #5
 8001cb6:	f005 fa07 	bl	80070c8 <osDelay>
    if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &pid_output, NULL, 0))
 8001cba:	e7e9      	b.n	8001c90 <StartStepperMotorsTask+0x8>
 8001cbc:	20004b38 	.word	0x20004b38
 8001cc0:	0800cf24 	.word	0x0800cf24

08001cc4 <TimerPIDCallback>:
  /* USER CODE END StartStepperMotorsTask */
}

/* TimerPIDCallback function */
void TimerPIDCallback(void *argument)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerPIDCallback */
	osSemaphoreRelease(SemaphorePIDComputeHandle);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <TimerPIDCallback+0x1c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 fd4d 	bl	8007770 <osSemaphoreRelease>
  /* USER CODE END TimerPIDCallback */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20004b18 	.word	0x20004b18

08001ce4 <_putchar>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexUARTputcharHandle, osWaitForever);
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <_putchar+0x38>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fb88 	bl	800740c <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001cfc:	1df9      	adds	r1, r7, #7
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	2201      	movs	r2, #1
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <_putchar+0x3c>)
 8001d06:	f004 fc5e 	bl	80065c6 <HAL_UART_Transmit>
	osMutexRelease(MutexUARTputcharHandle);
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <_putchar+0x38>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f005 fbda 	bl	80074c8 <osMutexRelease>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20004b30 	.word	0x20004b30
 8001d20:	20004c10 	.word	0x20004c10

08001d24 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LSM6_Interrupt_Pin)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d34:	d104      	bne.n	8001d40 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(SemaphoreLSM6_DataReadyHandle);
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 fd18 	bl	8007770 <osSemaphoreRelease>
	}
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20004b1c 	.word	0x20004b1c
 8001d4c:	00000000 	.word	0x00000000

08001d50 <complementaryFilter>:

double complementaryFilter(double gyroX, double accAngle, double prevAngle)
{
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0b04 	vstr	d0, [r7, #16]
 8001d5a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d5e:	ed87 2b00 	vstr	d2, [r7]
	return (COMP_FILTER_GAIN * (prevAngle + ((gyroX*GYRO_SENSITIVITY + GYRO_OFFSET_X)/LSM6_SAMPLE_TIME)))
 8001d62:	a330      	add	r3, pc, #192	; (adr r3, 8001e24 <complementaryFilter+0xd4>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d6c:	f7fe fbfc 	bl	8000568 <__aeabi_dmul>
 8001d70:	4603      	mov	r3, r0
 8001d72:	460c      	mov	r4, r1
 8001d74:	4618      	mov	r0, r3
 8001d76:	4621      	mov	r1, r4
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <complementaryFilter+0xc8>)
 8001d7e:	f7fe fa3b 	bl	80001f8 <__aeabi_dsub>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	4618      	mov	r0, r3
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <complementaryFilter+0xcc>)
 8001d90:	f7fe fd14 	bl	80007bc <__aeabi_ddiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001da0:	f7fe fa2c 	bl	80001fc <__adddf3>
 8001da4:	4603      	mov	r3, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	4618      	mov	r0, r3
 8001daa:	4621      	mov	r1, r4
 8001dac:	a418      	add	r4, pc, #96	; (adr r4, 8001e10 <complementaryFilter+0xc0>)
 8001dae:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4623      	mov	r3, r4
 8001db6:	f7fe fbd7 	bl	8000568 <__aeabi_dmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	4626      	mov	r6, r4
			+ ((1 - COMP_FILTER_GAIN) * accAngle);
 8001dc2:	a413      	add	r4, pc, #76	; (adr r4, 8001e10 <complementaryFilter+0xc0>)
 8001dc4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4623      	mov	r3, r4
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	4913      	ldr	r1, [pc, #76]	; (8001e20 <complementaryFilter+0xd0>)
 8001dd2:	f7fe fa11 	bl	80001f8 <__aeabi_dsub>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460c      	mov	r4, r1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4621      	mov	r1, r4
 8001dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de2:	f7fe fbc1 	bl	8000568 <__aeabi_dmul>
 8001de6:	4603      	mov	r3, r0
 8001de8:	460c      	mov	r4, r1
 8001dea:	461a      	mov	r2, r3
 8001dec:	4623      	mov	r3, r4
 8001dee:	4628      	mov	r0, r5
 8001df0:	4631      	mov	r1, r6
 8001df2:	f7fe fa03 	bl	80001fc <__adddf3>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	ec44 3b17 	vmov	d7, r3, r4
}
 8001dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8001e02:	eef0 0a67 	vmov.f32	s1, s15
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0c:	f3af 8000 	nop.w
 8001e10:	eb851eb8 	.word	0xeb851eb8
 8001e14:	3feeb851 	.word	0x3feeb851
 8001e18:	40180000 	.word	0x40180000
 8001e1c:	404a0000 	.word	0x404a0000
 8001e20:	3ff00000 	.word	0x3ff00000
 8001e24:	1eb851ec 	.word	0x1eb851ec
 8001e28:	3f81eb85 	.word	0x3f81eb85
 8001e2c:	00000000 	.word	0x00000000

08001e30 <calculateAccAngle>:

double calculateAccAngle(double accY, double accZ)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	ed2d 8b02 	vpush	{d8}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e3e:	ed87 1b00 	vstr	d1, [r7]
	return (atan2((accY*ACC_SENSITIVITY + ACC_OFFSET_Y), (accZ*ACC_SENSITIVITY + ACC_OFFSET_Z)) * 180.0/M_PI);
 8001e42:	a32a      	add	r3, pc, #168	; (adr r3, 8001eec <calculateAccAngle+0xbc>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e4c:	f7fe fb8c 	bl	8000568 <__aeabi_dmul>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	4618      	mov	r0, r3
 8001e56:	4621      	mov	r1, r4
 8001e58:	a326      	add	r3, pc, #152	; (adr r3, 8001ef4 <calculateAccAngle+0xc4>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe f9cb 	bl	80001f8 <__aeabi_dsub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	460c      	mov	r4, r1
 8001e66:	ec44 3b18 	vmov	d8, r3, r4
 8001e6a:	a320      	add	r3, pc, #128	; (adr r3, 8001eec <calculateAccAngle+0xbc>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e74:	f7fe fb78 	bl	8000568 <__aeabi_dmul>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4621      	mov	r1, r4
 8001e80:	a31e      	add	r3, pc, #120	; (adr r3, 8001efc <calculateAccAngle+0xcc>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe f9b7 	bl	80001f8 <__aeabi_dsub>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	ec44 3b17 	vmov	d7, r3, r4
 8001e92:	eeb0 1a47 	vmov.f32	s2, s14
 8001e96:	eef0 1a67 	vmov.f32	s3, s15
 8001e9a:	eeb0 0a48 	vmov.f32	s0, s16
 8001e9e:	eef0 0a68 	vmov.f32	s1, s17
 8001ea2:	f00a fd14 	bl	800c8ce <atan2>
 8001ea6:	ec51 0b10 	vmov	r0, r1, d0
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <calculateAccAngle+0xb8>)
 8001eb0:	f7fe fb5a 	bl	8000568 <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4621      	mov	r1, r4
 8001ebc:	a308      	add	r3, pc, #32	; (adr r3, 8001ee0 <calculateAccAngle+0xb0>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fc7b 	bl	80007bc <__aeabi_ddiv>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	ec44 3b17 	vmov	d7, r3, r4
}
 8001ece:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed2:	eef0 0a67 	vmov.f32	s1, s15
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	ecbd 8b02 	vpop	{d8}
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	54442d18 	.word	0x54442d18
 8001ee4:	400921fb 	.word	0x400921fb
 8001ee8:	40668000 	.word	0x40668000
 8001eec:	0a5accd5 	.word	0x0a5accd5
 8001ef0:	3f0ffb48 	.word	0x3f0ffb48
 8001ef4:	47ae147b 	.word	0x47ae147b
 8001ef8:	3fa47ae1 	.word	0x3fa47ae1
 8001efc:	9999999a 	.word	0x9999999a
 8001f00:	3f999999 	.word	0x3f999999

08001f04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <MX_GPIO_Init+0x118>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a3e      	ldr	r2, [pc, #248]	; (800201c <MX_GPIO_Init+0x118>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <MX_GPIO_Init+0x118>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <MX_GPIO_Init+0x118>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a37      	ldr	r2, [pc, #220]	; (800201c <MX_GPIO_Init+0x118>)
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <MX_GPIO_Init+0x118>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <MX_GPIO_Init+0x118>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a30      	ldr	r2, [pc, #192]	; (800201c <MX_GPIO_Init+0x118>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <MX_GPIO_Init+0x118>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <MX_GPIO_Init+0x118>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a29      	ldr	r2, [pc, #164]	; (800201c <MX_GPIO_Init+0x118>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <MX_GPIO_Init+0x118>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|leftMotor_STEP_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001f90:	4823      	ldr	r0, [pc, #140]	; (8002020 <MX_GPIO_Init+0x11c>)
 8001f92:	f002 fa65 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, leftMotor_DIR_Pin|rightMotor_DIR_Pin|rightMotor_STEP_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001f9c:	4821      	ldr	r0, [pc, #132]	; (8002024 <MX_GPIO_Init+0x120>)
 8001f9e:	f002 fa5f 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <MX_GPIO_Init+0x124>)
 8001faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	481d      	ldr	r0, [pc, #116]	; (800202c <MX_GPIO_Init+0x128>)
 8001fb8:	f002 f8d0 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|leftMotor_STEP_Pin;
 8001fbc:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4812      	ldr	r0, [pc, #72]	; (8002020 <MX_GPIO_Init+0x11c>)
 8001fd6:	f002 f8c1 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = leftMotor_DIR_Pin|rightMotor_DIR_Pin|rightMotor_STEP_Pin;
 8001fda:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_GPIO_Init+0x120>)
 8001ff4:	f002 f8b2 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt_Pin;
 8001ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_GPIO_Init+0x12c>)
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_GPIO_Init+0x11c>)
 800200e:	f002 f8a5 	bl	800415c <HAL_GPIO_Init>

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	10210000 	.word	0x10210000
 800202c:	40020800 	.word	0x40020800
 8002030:	10110000 	.word	0x10110000

08002034 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_I2C1_Init+0x50>)
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <MX_I2C1_Init+0x54>)
 800203c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_I2C1_Init+0x50>)
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <MX_I2C1_Init+0x58>)
 8002042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_I2C1_Init+0x50>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_I2C1_Init+0x50>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_I2C1_Init+0x50>)
 8002052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_I2C1_Init+0x50>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_I2C1_Init+0x50>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_I2C1_Init+0x50>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_I2C1_Init+0x50>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_I2C1_Init+0x50>)
 8002072:	f002 fa41 	bl	80044f8 <HAL_I2C_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800207c:	f000 f8f0 	bl	8002260 <Error_Handler>
  }

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20004b3c 	.word	0x20004b3c
 8002088:	40005400 	.word	0x40005400
 800208c:	00061a80 	.word	0x00061a80

08002090 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_I2C_MspInit+0x84>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12c      	bne.n	800210c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_I2C_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_I2C_MspInit+0x88>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_I2C_MspInit+0x88>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	480c      	ldr	r0, [pc, #48]	; (800211c <HAL_I2C_MspInit+0x8c>)
 80020ec:	f002 f836 	bl	800415c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_I2C_MspInit+0x88>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_I2C_MspInit+0x88>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_I2C_MspInit+0x88>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40005400 	.word	0x40005400
 8002118:	40023800 	.word	0x40023800
 800211c:	40020400 	.word	0x40020400

08002120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002124:	f001 fef6 	bl	8003f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002128:	f000 f812 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800212c:	f7ff feea 	bl	8001f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002130:	f001 fe54 	bl	8003ddc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002134:	f7ff ff7e 	bl	8002034 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002138:	f001 fde4 	bl	8003d04 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800213c:	f000 f872 	bl	8002224 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002140:	f004 fea8 	bl	8006e94 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002144:	f7ff fbdc 	bl	8001900 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002148:	f004 fed8 	bl	8006efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800214c:	e7fe      	b.n	800214c <main+0x2c>
	...

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	; 0x50
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	2230      	movs	r2, #48	; 0x30
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f008 fe91 	bl	800ae86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <SystemClock_Config+0xcc>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <SystemClock_Config+0xcc>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <SystemClock_Config+0xcc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <SystemClock_Config+0xd0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a21      	ldr	r2, [pc, #132]	; (8002220 <SystemClock_Config+0xd0>)
 800219a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <SystemClock_Config+0xd0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021b4:	2310      	movs	r3, #16
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b8:	2302      	movs	r3, #2
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021c0:	2310      	movs	r3, #16
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021ca:	2304      	movs	r3, #4
 80021cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021ce:	2304      	movs	r3, #4
 80021d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f942 	bl	8005460 <HAL_RCC_OscConfig>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021e2:	f000 f83d 	bl	8002260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e6:	230f      	movs	r3, #15
 80021e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ea:	2302      	movs	r3, #2
 80021ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fb9c 	bl	8005940 <HAL_RCC_ClockConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800220e:	f000 f827 	bl	8002260 <Error_Handler>
  }
}
 8002212:	bf00      	nop
 8002214:	3750      	adds	r7, #80	; 0x50
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000

08002224 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2105      	movs	r1, #5
 800222c:	2028      	movs	r0, #40	; 0x28
 800222e:	f001 ff6b 	bl	8004108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002232:	2028      	movs	r0, #40	; 0x28
 8002234:	f001 ff84 	bl	8004140 <HAL_NVIC_EnableIRQ>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800224e:	f001 fe83 	bl	8003f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000

08002260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002264:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002266:	e7fe      	b.n	8002266 <Error_Handler+0x6>

08002268 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	4603      	mov	r3, r0
 8002276:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <_out_char+0x1e>
    _putchar(character);
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fd21 	bl	8001ce4 <_putchar>
  }
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e002      	b.n	80022c0 <_strnlen_s+0x16>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <_strnlen_s+0x28>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	603a      	str	r2, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f3      	bne.n	80022ba <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad3      	subs	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b2f      	cmp	r3, #47	; 0x2f
 80022f2:	d904      	bls.n	80022fe <_is_digit+0x1a>
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b39      	cmp	r3, #57	; 0x39
 80022f8:	d801      	bhi.n	80022fe <_is_digit+0x1a>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <_is_digit+0x1c>
 80022fe:	2300      	movs	r3, #0
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800231e:	e00e      	b.n	800233e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4618      	mov	r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6011      	str	r1, [r2, #0]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4403      	add	r3, r0
 800233a:	3b30      	subs	r3, #48	; 0x30
 800233c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ffcd 	bl	80022e4 <_is_digit>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e7      	bne.n	8002320 <_atoi+0xe>
  }
  return i;
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800235a:	b590      	push	{r4, r7, lr}
 800235c:	b087      	sub	sp, #28
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d125      	bne.n	80023c2 <_out_rev+0x68>
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d120      	bne.n	80023c2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e00a      	b.n	800239c <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	1c53      	adds	r3, r2, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	68fc      	ldr	r4, [r7, #12]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	2020      	movs	r0, #32
 8002394:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3f0      	bcc.n	8002386 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80023a4:	e00d      	b.n	80023c2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	3b01      	subs	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	4413      	add	r3, r2
 80023b2:	7818      	ldrb	r0, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	1c53      	adds	r3, r2, #1
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	68fc      	ldr	r4, [r7, #12]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	47a0      	blx	r4
  while (len) {
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ee      	bne.n	80023a6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80023d2:	e007      	b.n	80023e4 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	1c53      	adds	r3, r2, #1
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	68fc      	ldr	r4, [r7, #12]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	2020      	movs	r0, #32
 80023e2:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d8f1      	bhi.n	80023d4 <_out_rev+0x7a>
    }
  }

  return idx;
 80023f0:	687b      	ldr	r3, [r7, #4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}

080023fa <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b088      	sub	sp, #32
 80023fe:	af04      	add	r7, sp, #16
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d136      	bne.n	8002480 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d018      	beq.n	800244a <_ntoa_format+0x50>
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <_ntoa_format+0x50>
 8002422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <_ntoa_format+0x3a>
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <_ntoa_format+0x50>
      width--;
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	3b01      	subs	r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800243a:	e006      	b.n	800244a <_ntoa_format+0x50>
      buf[len++] = '0';
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	61fa      	str	r2, [r7, #28]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4413      	add	r3, r2
 8002446:	2230      	movs	r2, #48	; 0x30
 8002448:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	429a      	cmp	r2, r3
 8002450:	d20a      	bcs.n	8002468 <_ntoa_format+0x6e>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b1f      	cmp	r3, #31
 8002456:	d9f1      	bls.n	800243c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002458:	e006      	b.n	8002468 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	61fa      	str	r2, [r7, #28]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	2230      	movs	r2, #48	; 0x30
 8002466:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <_ntoa_format+0x86>
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	429a      	cmp	r2, r3
 8002478:	d202      	bcs.n	8002480 <_ntoa_format+0x86>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b1f      	cmp	r3, #31
 800247e:	d9ec      	bls.n	800245a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d058      	beq.n	800253c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <_ntoa_format+0xc8>
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <_ntoa_format+0xc8>
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	429a      	cmp	r2, r3
 80024a0:	d003      	beq.n	80024aa <_ntoa_format+0xb0>
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d10b      	bne.n	80024c2 <_ntoa_format+0xc8>
      len--;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <_ntoa_format+0xc8>
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d102      	bne.n	80024c2 <_ntoa_format+0xc8>
        len--;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	3b01      	subs	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d10f      	bne.n	80024e8 <_ntoa_format+0xee>
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <_ntoa_format+0xee>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2b1f      	cmp	r3, #31
 80024d6:	d807      	bhi.n	80024e8 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	61fa      	str	r2, [r7, #28]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4413      	add	r3, r2
 80024e2:	2278      	movs	r2, #120	; 0x78
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e01f      	b.n	8002528 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d10f      	bne.n	800250e <_ntoa_format+0x114>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <_ntoa_format+0x114>
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b1f      	cmp	r3, #31
 80024fc:	d807      	bhi.n	800250e <_ntoa_format+0x114>
      buf[len++] = 'X';
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	61fa      	str	r2, [r7, #28]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4413      	add	r3, r2
 8002508:	2258      	movs	r2, #88	; 0x58
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e00c      	b.n	8002528 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	2b02      	cmp	r3, #2
 8002512:	d109      	bne.n	8002528 <_ntoa_format+0x12e>
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b1f      	cmp	r3, #31
 8002518:	d806      	bhi.n	8002528 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	61fa      	str	r2, [r7, #28]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	2262      	movs	r2, #98	; 0x62
 8002526:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b1f      	cmp	r3, #31
 800252c:	d806      	bhi.n	800253c <_ntoa_format+0x142>
      buf[len++] = '0';
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	61fa      	str	r2, [r7, #28]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	2230      	movs	r2, #48	; 0x30
 800253a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b1f      	cmp	r3, #31
 8002540:	d824      	bhi.n	800258c <_ntoa_format+0x192>
    if (negative) {
 8002542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <_ntoa_format+0x160>
      buf[len++] = '-';
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	61fa      	str	r2, [r7, #28]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	222d      	movs	r2, #45	; 0x2d
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e018      	b.n	800258c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	61fa      	str	r2, [r7, #28]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4413      	add	r3, r2
 800256e:	222b      	movs	r2, #43	; 0x2b
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <_ntoa_format+0x192>
      buf[len++] = ' ';
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	61fa      	str	r2, [r7, #28]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	2220      	movs	r2, #32
 800258a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	9303      	str	r3, [sp, #12]
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff fed9 	bl	800235a <_out_rev>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b096      	sub	sp, #88	; 0x58
 80025b6:	af08      	add	r7, sp, #32
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80025c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	f023 0310 	bic.w	r3, r3, #16
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <_ntoa_long+0x30>
 80025dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d033      	beq.n	800264a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80025e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80025ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025ec:	fb01 f202 	mul.w	r2, r1, r2
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80025f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025fa:	2b09      	cmp	r3, #9
 80025fc:	d804      	bhi.n	8002608 <_ntoa_long+0x56>
 80025fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002602:	3330      	adds	r3, #48	; 0x30
 8002604:	b2da      	uxtb	r2, r3
 8002606:	e00d      	b.n	8002624 <_ntoa_long+0x72>
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <_ntoa_long+0x64>
 8002612:	2241      	movs	r2, #65	; 0x41
 8002614:	e000      	b.n	8002618 <_ntoa_long+0x66>
 8002616:	2261      	movs	r2, #97	; 0x61
 8002618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800261c:	4413      	add	r3, r2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3b0a      	subs	r3, #10
 8002622:	b2da      	uxtb	r2, r3
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	6379      	str	r1, [r7, #52]	; 0x34
 800262a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800262e:	440b      	add	r3, r1
 8002630:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800263e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <_ntoa_long+0x98>
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	2b1f      	cmp	r3, #31
 8002648:	d9cb      	bls.n	80025e2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800264a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264c:	9306      	str	r3, [sp, #24]
 800264e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002650:	9305      	str	r3, [sp, #20]
 8002652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002658:	9303      	str	r3, [sp, #12]
 800265a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fec2 	bl	80023fa <_ntoa_format>
 8002676:	4603      	mov	r3, r0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3738      	adds	r7, #56	; 0x38
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b097      	sub	sp, #92	; 0x5c
 8002684:	af08      	add	r7, sp, #32
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002692:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002696:	4323      	orrs	r3, r4
 8002698:	d103      	bne.n	80026a2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800269a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269c:	f023 0310 	bic.w	r3, r3, #16
 80026a0:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80026a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <_ntoa_long_long+0x34>
 80026ac:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80026b0:	4323      	orrs	r3, r4
 80026b2:	d039      	beq.n	8002728 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 80026b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026bc:	f7fe fa4c 	bl	8000b58 <__aeabi_uldivmod>
 80026c0:	461c      	mov	r4, r3
 80026c2:	4613      	mov	r3, r2
 80026c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80026c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d804      	bhi.n	80026da <_ntoa_long_long+0x5a>
 80026d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026d4:	3330      	adds	r3, #48	; 0x30
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	e00d      	b.n	80026f6 <_ntoa_long_long+0x76>
 80026da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <_ntoa_long_long+0x68>
 80026e4:	2241      	movs	r2, #65	; 0x41
 80026e6:	e000      	b.n	80026ea <_ntoa_long_long+0x6a>
 80026e8:	2261      	movs	r2, #97	; 0x61
 80026ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026ee:	4413      	add	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3b0a      	subs	r3, #10
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	1c59      	adds	r1, r3, #1
 80026fa:	6379      	str	r1, [r7, #52]	; 0x34
 80026fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002700:	440b      	add	r3, r1
 8002702:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800270a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800270e:	f7fe fa23 	bl	8000b58 <__aeabi_uldivmod>
 8002712:	4603      	mov	r3, r0
 8002714:	460c      	mov	r4, r1
 8002716:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800271a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800271e:	4323      	orrs	r3, r4
 8002720:	d002      	beq.n	8002728 <_ntoa_long_long+0xa8>
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	2b1f      	cmp	r3, #31
 8002726:	d9c5      	bls.n	80026b4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800272c:	9206      	str	r2, [sp, #24]
 800272e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002730:	9205      	str	r2, [sp, #20]
 8002732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002734:	9204      	str	r2, [sp, #16]
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff fe53 	bl	80023fa <_ntoa_format>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	373c      	adds	r7, #60	; 0x3c
 800275a:	46bd      	mov	sp, r7
 800275c:	bd90      	pop	{r4, r7, pc}
	...

08002760 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b09d      	sub	sp, #116	; 0x74
 8002764:	af04      	add	r7, sp, #16
 8002766:	6178      	str	r0, [r7, #20]
 8002768:	6139      	str	r1, [r7, #16]
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800278a:	f7fe f955 	bl	8000a38 <__aeabi_dcmpeq>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10f      	bne.n	80027b4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002796:	9303      	str	r3, [sp, #12]
 8002798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	2303      	movs	r3, #3
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	4baf      	ldr	r3, [pc, #700]	; (8002a60 <_ftoa+0x300>)
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff fdd5 	bl	800235a <_out_rev>
 80027b0:	4603      	mov	r3, r0
 80027b2:	e237      	b.n	8002c24 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80027bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c0:	f7fe f944 	bl	8000a4c <__aeabi_dcmplt>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00f      	beq.n	80027ea <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80027ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027cc:	9303      	str	r3, [sp, #12]
 80027ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	2304      	movs	r3, #4
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	4ba3      	ldr	r3, [pc, #652]	; (8002a64 <_ftoa+0x304>)
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6939      	ldr	r1, [r7, #16]
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f7ff fdba 	bl	800235a <_out_rev>
 80027e6:	4603      	mov	r3, r0
 80027e8:	e21c      	b.n	8002c24 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 80027ea:	f04f 32ff 	mov.w	r2, #4294967295
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <_ftoa+0x308>)
 80027f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027f4:	f7fe f948 	bl	8000a88 <__aeabi_dcmpgt>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01d      	beq.n	800283a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80027fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <_ftoa+0xac>
 8002808:	4b98      	ldr	r3, [pc, #608]	; (8002a6c <_ftoa+0x30c>)
 800280a:	e000      	b.n	800280e <_ftoa+0xae>
 800280c:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <_ftoa+0x310>)
 800280e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002810:	f002 0204 	and.w	r2, r2, #4
 8002814:	2a00      	cmp	r2, #0
 8002816:	d001      	beq.n	800281c <_ftoa+0xbc>
 8002818:	2204      	movs	r2, #4
 800281a:	e000      	b.n	800281e <_ftoa+0xbe>
 800281c:	2203      	movs	r2, #3
 800281e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002820:	9103      	str	r1, [sp, #12]
 8002822:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002824:	9102      	str	r1, [sp, #8]
 8002826:	9201      	str	r2, [sp, #4]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7ff fd92 	bl	800235a <_out_rev>
 8002836:	4603      	mov	r3, r0
 8002838:	e1f4      	b.n	8002c24 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800283a:	a385      	add	r3, pc, #532	; (adr r3, 8002a50 <_ftoa+0x2f0>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002844:	f7fe f920 	bl	8000a88 <__aeabi_dcmpgt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <_ftoa+0x102>
 800284e:	a382      	add	r3, pc, #520	; (adr r3, 8002a58 <_ftoa+0x2f8>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002858:	f7fe f8f8 	bl	8000a4c <__aeabi_dcmplt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00f      	beq.n	8002882 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	ed97 0b00 	vldr	d0, [r7]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	6939      	ldr	r1, [r7, #16]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f000 f9dd 	bl	8002c38 <_etoa>
 800287e:	4603      	mov	r3, r0
 8002880:	e1d0      	b.n	8002c24 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002894:	f7fe f8da 	bl	8000a4c <__aeabi_dcmplt>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <_ftoa+0x15c>
    negative = true;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80028a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a8:	f04f 0000 	mov.w	r0, #0
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f7fd fca2 	bl	80001f8 <__aeabi_dsub>
 80028b4:	4603      	mov	r3, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80028bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10e      	bne.n	80028e4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80028c6:	2306      	movs	r3, #6
 80028c8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028ca:	e00b      	b.n	80028e4 <_ftoa+0x184>
    buf[len++] = '0';
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028d6:	4413      	add	r3, r2
 80028d8:	2230      	movs	r2, #48	; 0x30
 80028da:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80028de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e0:	3b01      	subs	r3, #1
 80028e2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e6:	2b1f      	cmp	r3, #31
 80028e8:	d802      	bhi.n	80028f0 <_ftoa+0x190>
 80028ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d8ed      	bhi.n	80028cc <_ftoa+0x16c>
  }

  int whole = (int)value;
 80028f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f4:	f7fe f8e8 	bl	8000ac8 <__aeabi_d2iz>
 80028f8:	4603      	mov	r3, r0
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80028fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028fe:	f7fd fdc9 	bl	8000494 <__aeabi_i2d>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	461a      	mov	r2, r3
 8002908:	4623      	mov	r3, r4
 800290a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800290e:	f7fd fc73 	bl	80001f8 <__aeabi_dsub>
 8002912:	4603      	mov	r3, r0
 8002914:	460c      	mov	r4, r1
 8002916:	4618      	mov	r0, r3
 8002918:	4621      	mov	r1, r4
 800291a:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <_ftoa+0x314>)
 800291c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002926:	461a      	mov	r2, r3
 8002928:	4623      	mov	r3, r4
 800292a:	f7fd fe1d 	bl	8000568 <__aeabi_dmul>
 800292e:	4603      	mov	r3, r0
 8002930:	460c      	mov	r4, r1
 8002932:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002936:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800293a:	f7fe f8ed 	bl	8000b18 <__aeabi_d2uiz>
 800293e:	4603      	mov	r3, r0
 8002940:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002942:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002944:	f7fd fd96 	bl	8000474 <__aeabi_ui2d>
 8002948:	4603      	mov	r3, r0
 800294a:	460c      	mov	r4, r1
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002954:	f7fd fc50 	bl	80001f8 <__aeabi_dsub>
 8002958:	4603      	mov	r3, r0
 800295a:	460c      	mov	r4, r1
 800295c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <_ftoa+0x318>)
 8002966:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800296a:	f7fe f88d 	bl	8000a88 <__aeabi_dcmpgt>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <_ftoa+0x246>
    ++frac;
 8002974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002976:	3301      	adds	r3, #1
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800297a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800297c:	f7fd fd7a 	bl	8000474 <__aeabi_ui2d>
 8002980:	4a3c      	ldr	r2, [pc, #240]	; (8002a74 <_ftoa+0x314>)
 8002982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800298c:	461a      	mov	r2, r3
 800298e:	4623      	mov	r3, r4
 8002990:	f7fe f870 	bl	8000a74 <__aeabi_dcmpge>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <_ftoa+0x270>
      frac = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	3301      	adds	r3, #1
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
 80029a4:	e014      	b.n	80029d0 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <_ftoa+0x318>)
 80029ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80029b0:	f7fe f84c 	bl	8000a4c <__aeabi_dcmplt>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <_ftoa+0x26a>
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80029ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029cc:	3301      	adds	r3, #1
 80029ce:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80029d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d136      	bne.n	8002a44 <_ftoa+0x2e4>
    diff = value - (double)whole;
 80029d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80029d8:	f7fd fd5c 	bl	8000494 <__aeabi_i2d>
 80029dc:	4603      	mov	r3, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	461a      	mov	r2, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029e8:	f7fd fc06 	bl	80001f8 <__aeabi_dsub>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80029f4:	2301      	movs	r3, #1
 80029f6:	461c      	mov	r4, r3
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <_ftoa+0x318>)
 80029fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a02:	f7fe f823 	bl	8000a4c <__aeabi_dcmplt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <_ftoa+0x2b0>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	461c      	mov	r4, r3
 8002a10:	b2e3      	uxtb	r3, r4
 8002a12:	f083 0301 	eor.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <_ftoa+0x2d0>
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_ftoa+0x318>)
 8002a22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a26:	f7fe f82f 	bl	8000a88 <__aeabi_dcmpgt>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d069      	beq.n	8002b04 <_ftoa+0x3a4>
 8002a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	3301      	adds	r3, #1
 8002a40:	657b      	str	r3, [r7, #84]	; 0x54
 8002a42:	e082      	b.n	8002b4a <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 8002a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a48:	e039      	b.n	8002abe <_ftoa+0x35e>
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w
 8002a50:	00000000 	.word	0x00000000
 8002a54:	41cdcd65 	.word	0x41cdcd65
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	c1cdcd65 	.word	0xc1cdcd65
 8002a60:	0800cf3c 	.word	0x0800cf3c
 8002a64:	0800cf40 	.word	0x0800cf40
 8002a68:	7fefffff 	.word	0x7fefffff
 8002a6c:	0800cf48 	.word	0x0800cf48
 8002a70:	0800cf50 	.word	0x0800cf50
 8002a74:	0800d080 	.word	0x0800d080
 8002a78:	3fe00000 	.word	0x3fe00000
      --count;
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002a82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a84:	4b69      	ldr	r3, [pc, #420]	; (8002c2c <_ftoa+0x4cc>)
 8002a86:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	1aca      	subs	r2, r1, r3
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002a9e:	3230      	adds	r2, #48	; 0x30
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <_ftoa+0x4cc>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	2b1f      	cmp	r3, #31
 8002ac2:	d9db      	bls.n	8002a7c <_ftoa+0x31c>
 8002ac4:	e00a      	b.n	8002adc <_ftoa+0x37c>
        break;
 8002ac6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ac8:	e008      	b.n	8002adc <_ftoa+0x37c>
      buf[len++] = '0';
 8002aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ad0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ad4:	4413      	add	r3, r2
 8002ad6:	2230      	movs	r2, #48	; 0x30
 8002ad8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ade:	2b1f      	cmp	r3, #31
 8002ae0:	d804      	bhi.n	8002aec <_ftoa+0x38c>
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ee      	bne.n	8002aca <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aee:	2b1f      	cmp	r3, #31
 8002af0:	d82b      	bhi.n	8002b4a <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002af8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002afc:	4413      	add	r3, r2
 8002afe:	222e      	movs	r2, #46	; 0x2e
 8002b00:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b04:	e021      	b.n	8002b4a <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 8002b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b08:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <_ftoa+0x4d0>)
 8002b0a:	fb83 1302 	smull	r1, r3, r3, r2
 8002b0e:	1099      	asrs	r1, r3, #2
 8002b10:	17d3      	asrs	r3, r2, #31
 8002b12:	1ac9      	subs	r1, r1, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	1ad1      	subs	r1, r2, r3
 8002b1e:	b2ca      	uxtb	r2, r1
 8002b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002b26:	3230      	adds	r2, #48	; 0x30
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b2e:	440b      	add	r3, r1
 8002b30:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b36:	4a3e      	ldr	r2, [pc, #248]	; (8002c30 <_ftoa+0x4d0>)
 8002b38:	fb82 1203 	smull	r1, r2, r2, r3
 8002b3c:	1092      	asrs	r2, r2, #2
 8002b3e:	17db      	asrs	r3, r3, #31
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	657b      	str	r3, [r7, #84]	; 0x54
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4c:	2b1f      	cmp	r3, #31
 8002b4e:	d9da      	bls.n	8002b06 <_ftoa+0x3a6>
 8002b50:	e000      	b.n	8002b54 <_ftoa+0x3f4>
      break;
 8002b52:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d124      	bne.n	8002ba8 <_ftoa+0x448>
 8002b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01f      	beq.n	8002ba8 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <_ftoa+0x43a>
 8002b6e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <_ftoa+0x420>
 8002b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <_ftoa+0x43a>
      width--;
 8002b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b82:	3b01      	subs	r3, #1
 8002b84:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b86:	e008      	b.n	8002b9a <_ftoa+0x43a>
      buf[len++] = '0';
 8002b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b92:	4413      	add	r3, r2
 8002b94:	2230      	movs	r2, #48	; 0x30
 8002b96:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d202      	bcs.n	8002ba8 <_ftoa+0x448>
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	2b1f      	cmp	r3, #31
 8002ba6:	d9ef      	bls.n	8002b88 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002baa:	2b1f      	cmp	r3, #31
 8002bac:	d82a      	bhi.n	8002c04 <_ftoa+0x4a4>
    if (negative) {
 8002bae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <_ftoa+0x46a>
      buf[len++] = '-';
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bc0:	4413      	add	r3, r2
 8002bc2:	222d      	movs	r2, #45	; 0x2d
 8002bc4:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002bc8:	e01c      	b.n	8002c04 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 8002bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bda:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bde:	4413      	add	r3, r2
 8002be0:	222b      	movs	r2, #43	; 0x2b
 8002be2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002be6:	e00d      	b.n	8002c04 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 8002be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <_ftoa+0x4a4>
      buf[len++] = ' ';
 8002bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bf8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c06:	9303      	str	r3, [sp, #12]
 8002c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	f107 0318 	add.w	r3, r7, #24
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	6939      	ldr	r1, [r7, #16]
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f7ff fb9c 	bl	800235a <_out_rev>
 8002c22:	4603      	mov	r3, r0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3764      	adds	r7, #100	; 0x64
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	cccccccd 	.word	0xcccccccd
 8002c30:	66666667 	.word	0x66666667
 8002c34:	00000000 	.word	0x00000000

08002c38 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3c:	b09d      	sub	sp, #116	; 0x74
 8002c3e:	af06      	add	r7, sp, #24
 8002c40:	61f8      	str	r0, [r7, #28]
 8002c42:	61b9      	str	r1, [r7, #24]
 8002c44:	617a      	str	r2, [r7, #20]
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c54:	f7fd fef0 	bl	8000a38 <__aeabi_dcmpeq>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d014      	beq.n	8002c88 <_etoa+0x50>
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	4bc9      	ldr	r3, [pc, #804]	; (8002f88 <_etoa+0x350>)
 8002c64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c68:	f7fd ff0e 	bl	8000a88 <__aeabi_dcmpgt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <_etoa+0x50>
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295
 8002c76:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c7e:	f7fd fee5 	bl	8000a4c <__aeabi_dcmplt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d012      	beq.n	8002cae <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	ed97 0b02 	vldr	d0, [r7, #8]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	69f8      	ldr	r0, [r7, #28]
 8002ca6:	f7ff fd5b 	bl	8002760 <_ftoa>
 8002caa:	4603      	mov	r3, r0
 8002cac:	e24f      	b.n	800314e <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cbe:	f7fd fec5 	bl	8000a4c <__aeabi_dcmplt>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <_etoa+0x94>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	461c      	mov	r4, r3
 8002ccc:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 8002cd0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <_etoa+0xac>
    value = -value;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002cf0:	2306      	movs	r3, #6
 8002cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002cf6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002cfa:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002cfe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f04f 0400 	mov.w	r4, #0
 8002d0a:	0d13      	lsrs	r3, r2, #20
 8002d0c:	2400      	movs	r4, #0
 8002d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d12:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002d18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	4a9a      	ldr	r2, [pc, #616]	; (8002f8c <_etoa+0x354>)
 8002d22:	ea03 0801 	and.w	r8, r3, r1
 8002d26:	ea04 0902 	and.w	r9, r4, r2
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	4a98      	ldr	r2, [pc, #608]	; (8002f90 <_etoa+0x358>)
 8002d30:	ea48 0301 	orr.w	r3, r8, r1
 8002d34:	ea49 0402 	orr.w	r4, r9, r2
 8002d38:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002d3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d3e:	f7fd fba9 	bl	8000494 <__aeabi_i2d>
 8002d42:	a385      	add	r3, pc, #532	; (adr r3, 8002f58 <_etoa+0x320>)
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f7fd fc0e 	bl	8000568 <__aeabi_dmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	460c      	mov	r4, r1
 8002d50:	4618      	mov	r0, r3
 8002d52:	4621      	mov	r1, r4
 8002d54:	a382      	add	r3, pc, #520	; (adr r3, 8002f60 <_etoa+0x328>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fa4f 	bl	80001fc <__adddf3>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	460c      	mov	r4, r1
 8002d62:	4698      	mov	r8, r3
 8002d64:	46a1      	mov	r9, r4
 8002d66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b89      	ldr	r3, [pc, #548]	; (8002f94 <_etoa+0x35c>)
 8002d70:	f7fd fa42 	bl	80001f8 <__aeabi_dsub>
 8002d74:	4603      	mov	r3, r0
 8002d76:	460c      	mov	r4, r1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	a37a      	add	r3, pc, #488	; (adr r3, 8002f68 <_etoa+0x330>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fbf1 	bl	8000568 <__aeabi_dmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	4640      	mov	r0, r8
 8002d90:	4649      	mov	r1, r9
 8002d92:	f7fd fa33 	bl	80001fc <__adddf3>
 8002d96:	4603      	mov	r3, r0
 8002d98:	460c      	mov	r4, r1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	f7fd fe93 	bl	8000ac8 <__aeabi_d2iz>
 8002da2:	4603      	mov	r3, r0
 8002da4:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002da6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002da8:	f7fd fb74 	bl	8000494 <__aeabi_i2d>
 8002dac:	a370      	add	r3, pc, #448	; (adr r3, 8002f70 <_etoa+0x338>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fbd9 	bl	8000568 <__aeabi_dmul>
 8002db6:	4603      	mov	r3, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <_etoa+0x360>)
 8002dc4:	f7fd fa1a 	bl	80001fc <__adddf3>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	4621      	mov	r1, r4
 8002dd0:	f7fd fe7a 	bl	8000ac8 <__aeabi_d2iz>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002dd8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002dda:	f7fd fb5b 	bl	8000494 <__aeabi_i2d>
 8002dde:	a366      	add	r3, pc, #408	; (adr r3, 8002f78 <_etoa+0x340>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fbc0 	bl	8000568 <__aeabi_dmul>
 8002de8:	4603      	mov	r3, r0
 8002dea:	460c      	mov	r4, r1
 8002dec:	4698      	mov	r8, r3
 8002dee:	46a1      	mov	r9, r4
 8002df0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002df2:	f7fd fb4f 	bl	8000494 <__aeabi_i2d>
 8002df6:	a362      	add	r3, pc, #392	; (adr r3, 8002f80 <_etoa+0x348>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fbb4 	bl	8000568 <__aeabi_dmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	461a      	mov	r2, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	4640      	mov	r0, r8
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	f7fd f9f4 	bl	80001f8 <__aeabi_dsub>
 8002e10:	4603      	mov	r3, r0
 8002e12:	460c      	mov	r4, r1
 8002e14:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e20:	f7fd fba2 	bl	8000568 <__aeabi_dmul>
 8002e24:	4603      	mov	r3, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002e32:	4619      	mov	r1, r3
 8002e34:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	f04f 0400 	mov.w	r4, #0
 8002e40:	050c      	lsls	r4, r1, #20
 8002e42:	2300      	movs	r3, #0
 8002e44:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	f7fd f9d2 	bl	80001fc <__adddf3>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	469a      	mov	sl, r3
 8002e5e:	46a3      	mov	fp, r4
 8002e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e6c:	f7fd f9c4 	bl	80001f8 <__aeabi_dsub>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	e9c7 3400 	strd	r3, r4, [r7]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <_etoa+0x364>)
 8002e7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e82:	f7fd fc9b 	bl	80007bc <__aeabi_ddiv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	460c      	mov	r4, r1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <_etoa+0x368>)
 8002e94:	f7fd f9b2 	bl	80001fc <__adddf3>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ea4:	f7fd fc8a 	bl	80007bc <__aeabi_ddiv>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4618      	mov	r0, r3
 8002eae:	4621      	mov	r1, r4
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <_etoa+0x36c>)
 8002eb6:	f7fd f9a1 	bl	80001fc <__adddf3>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ec6:	f7fd fc79 	bl	80007bc <__aeabi_ddiv>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	460c      	mov	r4, r1
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ed6:	f7fd f991 	bl	80001fc <__adddf3>
 8002eda:	4603      	mov	r3, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	4650      	mov	r0, sl
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	f7fd fc69 	bl	80007bc <__aeabi_ddiv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	460c      	mov	r4, r1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <_etoa+0x358>)
 8002ef8:	f7fd f980 	bl	80001fc <__adddf3>
 8002efc:	4603      	mov	r3, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	4640      	mov	r0, r8
 8002f06:	4649      	mov	r1, r9
 8002f08:	f7fd fb2e 	bl	8000568 <__aeabi_dmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002f14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f20:	f7fd fd94 	bl	8000a4c <__aeabi_dcmplt>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <_etoa+0x30e>
    expval--;
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002f30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <_etoa+0x368>)
 8002f3a:	f7fd fc3f 	bl	80007bc <__aeabi_ddiv>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f48:	2b63      	cmp	r3, #99	; 0x63
 8002f4a:	dc2d      	bgt.n	8002fa8 <_etoa+0x370>
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002f52:	db29      	blt.n	8002fa8 <_etoa+0x370>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e028      	b.n	8002faa <_etoa+0x372>
 8002f58:	509f79fb 	.word	0x509f79fb
 8002f5c:	3fd34413 	.word	0x3fd34413
 8002f60:	8b60c8b3 	.word	0x8b60c8b3
 8002f64:	3fc68a28 	.word	0x3fc68a28
 8002f68:	636f4361 	.word	0x636f4361
 8002f6c:	3fd287a7 	.word	0x3fd287a7
 8002f70:	0979a371 	.word	0x0979a371
 8002f74:	400a934f 	.word	0x400a934f
 8002f78:	bbb55516 	.word	0xbbb55516
 8002f7c:	40026bb1 	.word	0x40026bb1
 8002f80:	fefa39ef 	.word	0xfefa39ef
 8002f84:	3fe62e42 	.word	0x3fe62e42
 8002f88:	7fefffff 	.word	0x7fefffff
 8002f8c:	000fffff 	.word	0x000fffff
 8002f90:	3ff00000 	.word	0x3ff00000
 8002f94:	3ff80000 	.word	0x3ff80000
 8002f98:	3fe00000 	.word	0x3fe00000
 8002f9c:	402c0000 	.word	0x402c0000
 8002fa0:	40240000 	.word	0x40240000
 8002fa4:	40180000 	.word	0x40180000
 8002fa8:	2305      	movs	r3, #5
 8002faa:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03d      	beq.n	8003034 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002fb8:	a367      	add	r3, pc, #412	; (adr r3, 8003158 <_etoa+0x520>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fc2:	f7fd fd57 	bl	8000a74 <__aeabi_dcmpge>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d024      	beq.n	8003016 <_etoa+0x3de>
 8002fcc:	a364      	add	r3, pc, #400	; (adr r3, 8003160 <_etoa+0x528>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fd6:	f7fd fd39 	bl	8000a4c <__aeabi_dcmplt>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01a      	beq.n	8003016 <_etoa+0x3de>
      if ((int)prec > expval) {
 8002fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	da07      	bge.n	8002ffa <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 8002fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff8:	e002      	b.n	8003000 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	657b      	str	r3, [r7, #84]	; 0x54
 8003014:	e00e      	b.n	8003034 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <_etoa+0x3fc>
 800301e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <_etoa+0x3fc>
        --prec;
 800302a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800302e:	3b01      	subs	r3, #1
 8003030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003038:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800303a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800303e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003040:	429a      	cmp	r2, r3
 8003042:	d904      	bls.n	800304e <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800304c:	e001      	b.n	8003052 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <_etoa+0x430>
 800305e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <_etoa+0x44e>
    value /= conv.F;
 800306e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800307a:	f7fd fb9f 	bl	80007bc <__aeabi_ddiv>
 800307e:	4603      	mov	r3, r0
 8003080:	460c      	mov	r4, r1
 8003082:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800308a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <_etoa+0x464>
 8003092:	68bd      	ldr	r5, [r7, #8]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800309a:	e001      	b.n	80030a0 <_etoa+0x468>
 800309c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80030a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	ec46 5b10 	vmov	d0, r5, r6
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	69f8      	ldr	r0, [r7, #28]
 80030c0:	f7ff fb4e 	bl	8002760 <_ftoa>
 80030c4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80030c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03f      	beq.n	800314c <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80030cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <_etoa+0x4a4>
 80030d8:	2045      	movs	r0, #69	; 0x45
 80030da:	e000      	b.n	80030de <_etoa+0x4a6>
 80030dc:	2065      	movs	r0, #101	; 0x65
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	1c53      	adds	r3, r2, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	69fc      	ldr	r4, [r7, #28]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	69b9      	ldr	r1, [r7, #24]
 80030ea:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80030ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bfb8      	it	lt
 80030f2:	425b      	neglt	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f8:	0fdb      	lsrs	r3, r3, #31
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030fe:	3a01      	subs	r2, #1
 8003100:	2105      	movs	r1, #5
 8003102:	9105      	str	r1, [sp, #20]
 8003104:	9204      	str	r2, [sp, #16]
 8003106:	2200      	movs	r2, #0
 8003108:	9203      	str	r2, [sp, #12]
 800310a:	220a      	movs	r2, #10
 800310c:	9202      	str	r2, [sp, #8]
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	9000      	str	r0, [sp, #0]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	69f8      	ldr	r0, [r7, #28]
 800311a:	f7ff fa4a 	bl	80025b2 <_ntoa_long>
 800311e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00f      	beq.n	800314c <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800312c:	e007      	b.n	800313e <_etoa+0x506>
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	1c53      	adds	r3, r2, #1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	69fc      	ldr	r4, [r7, #28]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	2020      	movs	r0, #32
 800313c:	47a0      	blx	r4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003148:	429a      	cmp	r2, r3
 800314a:	d8f0      	bhi.n	800312e <_etoa+0x4f6>
    }
  }
  return idx;
 800314c:	697b      	ldr	r3, [r7, #20]
}
 800314e:	4618      	mov	r0, r3
 8003150:	375c      	adds	r7, #92	; 0x5c
 8003152:	46bd      	mov	sp, r7
 8003154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003158:	eb1c432d 	.word	0xeb1c432d
 800315c:	3f1a36e2 	.word	0x3f1a36e2
 8003160:	00000000 	.word	0x00000000
 8003164:	412e8480 	.word	0x412e8480

08003168 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b0a0      	sub	sp, #128	; 0x80
 800316c:	af0a      	add	r7, sp, #40	; 0x28
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 8492 	bne.w	8003aa6 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 8003182:	4ba0      	ldr	r3, [pc, #640]	; (8003404 <_vsnprintf+0x29c>)
 8003184:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8003186:	f000 bc8e 	b.w	8003aa6 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b25      	cmp	r3, #37	; 0x25
 8003190:	d00d      	beq.n	80031ae <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	7818      	ldrb	r0, [r3, #0]
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	1c53      	adds	r3, r2, #1
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
 800319c:	68fc      	ldr	r4, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	47a0      	blx	r4
      format++;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	603b      	str	r3, [r7, #0]
      continue;
 80031aa:	f000 bc7c 	b.w	8003aa6 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	3b20      	subs	r3, #32
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d856      	bhi.n	8003270 <_vsnprintf+0x108>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <_vsnprintf+0x60>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	08003249 	.word	0x08003249
 80031cc:	08003271 	.word	0x08003271
 80031d0:	08003271 	.word	0x08003271
 80031d4:	0800325d 	.word	0x0800325d
 80031d8:	08003271 	.word	0x08003271
 80031dc:	08003271 	.word	0x08003271
 80031e0:	08003271 	.word	0x08003271
 80031e4:	08003271 	.word	0x08003271
 80031e8:	08003271 	.word	0x08003271
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003271 	.word	0x08003271
 80031f4:	08003235 	.word	0x08003235
 80031f8:	08003271 	.word	0x08003271
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003271 	.word	0x08003271
 8003204:	08003271 	.word	0x08003271
 8003208:	0800320d 	.word	0x0800320d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
 800321e:	e02a      	b.n	8003276 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	657b      	str	r3, [r7, #84]	; 0x54
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	2301      	movs	r3, #1
 8003230:	64bb      	str	r3, [r7, #72]	; 0x48
 8003232:	e020      	b.n	8003276 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	2301      	movs	r3, #1
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
 8003246:	e016      	b.n	8003276 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	2301      	movs	r3, #1
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
 800325a:	e00c      	b.n	8003276 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800325c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325e:	f043 0310 	orr.w	r3, r3, #16
 8003262:	657b      	str	r3, [r7, #84]	; 0x54
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	2301      	movs	r3, #1
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
 800326e:	e002      	b.n	8003276 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8003270:	2300      	movs	r3, #0
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
 8003274:	bf00      	nop
      }
    } while (n);
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003278:	2b00      	cmp	r3, #0
 800327a:	d19d      	bne.n	80031b8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f82d 	bl	80022e4 <_is_digit>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <_vsnprintf+0x134>
      width = _atoi(&format);
 8003290:	463b      	mov	r3, r7
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f83d 	bl	8002312 <_atoi>
 8003298:	6538      	str	r0, [r7, #80]	; 0x50
 800329a:	e018      	b.n	80032ce <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b2a      	cmp	r3, #42	; 0x2a
 80032a2:	d114      	bne.n	80032ce <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80032a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da07      	bge.n	80032c4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80032b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	425b      	negs	r3, r3
 80032c0:	653b      	str	r3, [r7, #80]	; 0x50
 80032c2:	e001      	b.n	80032c8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b2e      	cmp	r3, #46	; 0x2e
 80032d8:	d124      	bne.n	8003324 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fff9 	bl	80022e4 <_is_digit>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80032f8:	463b      	mov	r3, r7
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f809 	bl	8002312 <_atoi>
 8003300:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003302:	e00f      	b.n	8003324 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b2a      	cmp	r3, #42	; 0x2a
 800330a:	d10b      	bne.n	8003324 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800330c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	66ba      	str	r2, [r7, #104]	; 0x68
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800331c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3b68      	subs	r3, #104	; 0x68
 800332a:	2b12      	cmp	r3, #18
 800332c:	d866      	bhi.n	80033fc <_vsnprintf+0x294>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <_vsnprintf+0x1cc>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	080033a7 	.word	0x080033a7
 8003338:	080033fd 	.word	0x080033fd
 800333c:	080033dd 	.word	0x080033dd
 8003340:	080033fd 	.word	0x080033fd
 8003344:	08003381 	.word	0x08003381
 8003348:	080033fd 	.word	0x080033fd
 800334c:	080033fd 	.word	0x080033fd
 8003350:	080033fd 	.word	0x080033fd
 8003354:	080033fd 	.word	0x080033fd
 8003358:	080033fd 	.word	0x080033fd
 800335c:	080033fd 	.word	0x080033fd
 8003360:	080033fd 	.word	0x080033fd
 8003364:	080033cd 	.word	0x080033cd
 8003368:	080033fd 	.word	0x080033fd
 800336c:	080033fd 	.word	0x080033fd
 8003370:	080033fd 	.word	0x080033fd
 8003374:	080033fd 	.word	0x080033fd
 8003378:	080033fd 	.word	0x080033fd
 800337c:	080033ed 	.word	0x080033ed
      case 'l' :
        flags |= FLAGS_LONG;
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b6c      	cmp	r3, #108	; 0x6c
 8003394:	d134      	bne.n	8003400 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	603b      	str	r3, [r7, #0]
        }
        break;
 80033a4:	e02c      	b.n	8003400 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 80033a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b68      	cmp	r3, #104	; 0x68
 80033ba:	d125      	bne.n	8003408 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 80033bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	603b      	str	r3, [r7, #0]
        }
        break;
 80033ca:	e01d      	b.n	8003408 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
        break;
 80033da:	e016      	b.n	800340a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	603b      	str	r3, [r7, #0]
        break;
 80033ea:	e00e      	b.n	800340a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	603b      	str	r3, [r7, #0]
        break;
 80033fa:	e006      	b.n	800340a <_vsnprintf+0x2a2>
      default :
        break;
 80033fc:	bf00      	nop
 80033fe:	e004      	b.n	800340a <_vsnprintf+0x2a2>
        break;
 8003400:	bf00      	nop
 8003402:	e002      	b.n	800340a <_vsnprintf+0x2a2>
 8003404:	08002269 	.word	0x08002269
        break;
 8003408:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3b25      	subs	r3, #37	; 0x25
 8003410:	2b53      	cmp	r3, #83	; 0x53
 8003412:	f200 833b 	bhi.w	8003a8c <_vsnprintf+0x924>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <_vsnprintf+0x2b4>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003a75 	.word	0x08003a75
 8003420:	08003a8d 	.word	0x08003a8d
 8003424:	08003a8d 	.word	0x08003a8d
 8003428:	08003a8d 	.word	0x08003a8d
 800342c:	08003a8d 	.word	0x08003a8d
 8003430:	08003a8d 	.word	0x08003a8d
 8003434:	08003a8d 	.word	0x08003a8d
 8003438:	08003a8d 	.word	0x08003a8d
 800343c:	08003a8d 	.word	0x08003a8d
 8003440:	08003a8d 	.word	0x08003a8d
 8003444:	08003a8d 	.word	0x08003a8d
 8003448:	08003a8d 	.word	0x08003a8d
 800344c:	08003a8d 	.word	0x08003a8d
 8003450:	08003a8d 	.word	0x08003a8d
 8003454:	08003a8d 	.word	0x08003a8d
 8003458:	08003a8d 	.word	0x08003a8d
 800345c:	08003a8d 	.word	0x08003a8d
 8003460:	08003a8d 	.word	0x08003a8d
 8003464:	08003a8d 	.word	0x08003a8d
 8003468:	08003a8d 	.word	0x08003a8d
 800346c:	08003a8d 	.word	0x08003a8d
 8003470:	08003a8d 	.word	0x08003a8d
 8003474:	08003a8d 	.word	0x08003a8d
 8003478:	08003a8d 	.word	0x08003a8d
 800347c:	08003a8d 	.word	0x08003a8d
 8003480:	08003a8d 	.word	0x08003a8d
 8003484:	08003a8d 	.word	0x08003a8d
 8003488:	08003a8d 	.word	0x08003a8d
 800348c:	08003a8d 	.word	0x08003a8d
 8003490:	08003a8d 	.word	0x08003a8d
 8003494:	08003a8d 	.word	0x08003a8d
 8003498:	08003a8d 	.word	0x08003a8d
 800349c:	08003845 	.word	0x08003845
 80034a0:	080037f9 	.word	0x080037f9
 80034a4:	08003845 	.word	0x08003845
 80034a8:	08003a8d 	.word	0x08003a8d
 80034ac:	08003a8d 	.word	0x08003a8d
 80034b0:	08003a8d 	.word	0x08003a8d
 80034b4:	08003a8d 	.word	0x08003a8d
 80034b8:	08003a8d 	.word	0x08003a8d
 80034bc:	08003a8d 	.word	0x08003a8d
 80034c0:	08003a8d 	.word	0x08003a8d
 80034c4:	08003a8d 	.word	0x08003a8d
 80034c8:	08003a8d 	.word	0x08003a8d
 80034cc:	08003a8d 	.word	0x08003a8d
 80034d0:	08003a8d 	.word	0x08003a8d
 80034d4:	08003a8d 	.word	0x08003a8d
 80034d8:	08003a8d 	.word	0x08003a8d
 80034dc:	08003a8d 	.word	0x08003a8d
 80034e0:	08003a8d 	.word	0x08003a8d
 80034e4:	08003a8d 	.word	0x08003a8d
 80034e8:	0800356d 	.word	0x0800356d
 80034ec:	08003a8d 	.word	0x08003a8d
 80034f0:	08003a8d 	.word	0x08003a8d
 80034f4:	08003a8d 	.word	0x08003a8d
 80034f8:	08003a8d 	.word	0x08003a8d
 80034fc:	08003a8d 	.word	0x08003a8d
 8003500:	08003a8d 	.word	0x08003a8d
 8003504:	08003a8d 	.word	0x08003a8d
 8003508:	08003a8d 	.word	0x08003a8d
 800350c:	08003a8d 	.word	0x08003a8d
 8003510:	0800356d 	.word	0x0800356d
 8003514:	080038b1 	.word	0x080038b1
 8003518:	0800356d 	.word	0x0800356d
 800351c:	08003845 	.word	0x08003845
 8003520:	080037f9 	.word	0x080037f9
 8003524:	08003845 	.word	0x08003845
 8003528:	08003a8d 	.word	0x08003a8d
 800352c:	0800356d 	.word	0x0800356d
 8003530:	08003a8d 	.word	0x08003a8d
 8003534:	08003a8d 	.word	0x08003a8d
 8003538:	08003a8d 	.word	0x08003a8d
 800353c:	08003a8d 	.word	0x08003a8d
 8003540:	08003a8d 	.word	0x08003a8d
 8003544:	0800356d 	.word	0x0800356d
 8003548:	080039e9 	.word	0x080039e9
 800354c:	08003a8d 	.word	0x08003a8d
 8003550:	08003a8d 	.word	0x08003a8d
 8003554:	08003925 	.word	0x08003925
 8003558:	08003a8d 	.word	0x08003a8d
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003a8d 	.word	0x08003a8d
 8003564:	08003a8d 	.word	0x08003a8d
 8003568:	0800356d 	.word	0x0800356d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b78      	cmp	r3, #120	; 0x78
 8003572:	d003      	beq.n	800357c <_vsnprintf+0x414>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b58      	cmp	r3, #88	; 0x58
 800357a:	d102      	bne.n	8003582 <_vsnprintf+0x41a>
          base = 16U;
 800357c:	2310      	movs	r3, #16
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
 8003580:	e013      	b.n	80035aa <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b6f      	cmp	r3, #111	; 0x6f
 8003588:	d102      	bne.n	8003590 <_vsnprintf+0x428>
          base =  8U;
 800358a:	2308      	movs	r3, #8
 800358c:	643b      	str	r3, [r7, #64]	; 0x40
 800358e:	e00c      	b.n	80035aa <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b62      	cmp	r3, #98	; 0x62
 8003596:	d102      	bne.n	800359e <_vsnprintf+0x436>
          base =  2U;
 8003598:	2302      	movs	r3, #2
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
 800359c:	e005      	b.n	80035aa <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800359e:	230a      	movs	r3, #10
 80035a0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	f023 0310 	bic.w	r3, r3, #16
 80035a8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b58      	cmp	r3, #88	; 0x58
 80035b0:	d103      	bne.n	80035ba <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 80035b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b4:	f043 0320 	orr.w	r3, r3, #32
 80035b8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b69      	cmp	r3, #105	; 0x69
 80035c0:	d007      	beq.n	80035d2 <_vsnprintf+0x46a>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d003      	beq.n	80035d2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	f023 030c 	bic.w	r3, r3, #12
 80035d0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80035d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80035dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b69      	cmp	r3, #105	; 0x69
 80035ea:	d004      	beq.n	80035f6 <_vsnprintf+0x48e>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	f040 808d 	bne.w	8003710 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80035f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02e      	beq.n	800365e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003602:	3307      	adds	r3, #7
 8003604:	f023 0307 	bic.w	r3, r3, #7
 8003608:	f103 0208 	add.w	r2, r3, #8
 800360c:	66ba      	str	r2, [r7, #104]	; 0x68
 800360e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003612:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003616:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f174 0200 	sbcs.w	r2, r4, #0
 8003620:	da02      	bge.n	8003628 <_vsnprintf+0x4c0>
 8003622:	425b      	negs	r3, r3
 8003624:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8003628:	4619      	mov	r1, r3
 800362a:	4622      	mov	r2, r4
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	0fdb      	lsrs	r3, r3, #31
 8003630:	b2d8      	uxtb	r0, r3
 8003632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800363a:	9508      	str	r5, [sp, #32]
 800363c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800363e:	9507      	str	r5, [sp, #28]
 8003640:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8003642:	9506      	str	r5, [sp, #24]
 8003644:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003648:	9002      	str	r0, [sp, #8]
 800364a:	e9cd 1200 	strd	r1, r2, [sp]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff f813 	bl	8002680 <_ntoa_long_long>
 800365a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800365c:	e0c8      	b.n	80037f0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01e      	beq.n	80036a6 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8003668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	66ba      	str	r2, [r7, #104]	; 0x68
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	bfb8      	it	lt
 8003678:	425b      	neglt	r3, r3
 800367a:	4619      	mov	r1, r3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	0fdb      	lsrs	r3, r3, #31
 8003680:	b2db      	uxtb	r3, r3
 8003682:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003684:	9205      	str	r2, [sp, #20]
 8003686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003688:	9204      	str	r2, [sp, #16]
 800368a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800368c:	9203      	str	r2, [sp, #12]
 800368e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003690:	9202      	str	r2, [sp, #8]
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	9100      	str	r1, [sp, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7fe ff88 	bl	80025b2 <_ntoa_long>
 80036a2:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80036a4:	e0a4      	b.n	80037f0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <_vsnprintf+0x554>
 80036b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	66ba      	str	r2, [r7, #104]	; 0x68
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e00e      	b.n	80036da <_vsnprintf+0x572>
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <_vsnprintf+0x56a>
 80036c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	66ba      	str	r2, [r7, #104]	; 0x68
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	e003      	b.n	80036da <_vsnprintf+0x572>
 80036d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036d4:	1d1a      	adds	r2, r3, #4
 80036d6:	66ba      	str	r2, [r7, #104]	; 0x68
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bfb8      	it	lt
 80036e2:	425b      	neglt	r3, r3
 80036e4:	4619      	mov	r1, r3
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	0fdb      	lsrs	r3, r3, #31
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ee:	9205      	str	r2, [sp, #20]
 80036f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036f2:	9204      	str	r2, [sp, #16]
 80036f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f6:	9203      	str	r2, [sp, #12]
 80036f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036fa:	9202      	str	r2, [sp, #8]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	9100      	str	r1, [sp, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7fe ff53 	bl	80025b2 <_ntoa_long>
 800370c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800370e:	e06f      	b.n	80037f0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800371a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371c:	3307      	adds	r3, #7
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	f103 0208 	add.w	r2, r3, #8
 8003726:	66ba      	str	r2, [r7, #104]	; 0x68
 8003728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800372c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800372e:	4611      	mov	r1, r2
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003736:	9008      	str	r0, [sp, #32]
 8003738:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800373a:	9007      	str	r0, [sp, #28]
 800373c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800373e:	9006      	str	r0, [sp, #24]
 8003740:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8003744:	2200      	movs	r2, #0
 8003746:	9202      	str	r2, [sp, #8]
 8003748:	e9cd 3400 	strd	r3, r4, [sp]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7fe ff94 	bl	8002680 <_ntoa_long_long>
 8003758:	6478      	str	r0, [r7, #68]	; 0x44
 800375a:	e049      	b.n	80037f0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800375c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	66ba      	str	r2, [r7, #104]	; 0x68
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003770:	9205      	str	r2, [sp, #20]
 8003772:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003774:	9204      	str	r2, [sp, #16]
 8003776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003778:	9203      	str	r2, [sp, #12]
 800377a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800377c:	9202      	str	r2, [sp, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	9201      	str	r2, [sp, #4]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7fe ff11 	bl	80025b2 <_ntoa_long>
 8003790:	6478      	str	r0, [r7, #68]	; 0x44
 8003792:	e02d      	b.n	80037f0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <_vsnprintf+0x642>
 800379e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e00e      	b.n	80037c8 <_vsnprintf+0x660>
 80037aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <_vsnprintf+0x658>
 80037b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b6:	1d1a      	adds	r2, r3, #4
 80037b8:	66ba      	str	r2, [r7, #104]	; 0x68
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	e003      	b.n	80037c8 <_vsnprintf+0x660>
 80037c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	66ba      	str	r2, [r7, #104]	; 0x68
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80037ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037cc:	9305      	str	r3, [sp, #20]
 80037ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	9303      	str	r3, [sp, #12]
 80037d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d8:	9302      	str	r3, [sp, #8]
 80037da:	2300      	movs	r3, #0
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7fe fee2 	bl	80025b2 <_ntoa_long>
 80037ee:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	603b      	str	r3, [r7, #0]
        break;
 80037f6:	e156      	b.n	8003aa6 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b46      	cmp	r3, #70	; 0x46
 80037fe:	d103      	bne.n	8003808 <_vsnprintf+0x6a0>
 8003800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003802:	f043 0320 	orr.w	r3, r3, #32
 8003806:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380a:	3307      	adds	r3, #7
 800380c:	f023 0307 	bic.w	r3, r3, #7
 8003810:	f103 0208 	add.w	r2, r3, #8
 8003814:	66ba      	str	r2, [r7, #104]	; 0x68
 8003816:	ed93 7b00 	vldr	d7, [r3]
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	eeb0 0a47 	vmov.f32	s0, s14
 800382a:	eef0 0a67 	vmov.f32	s1, s15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7fe ff93 	bl	8002760 <_ftoa>
 800383a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	603b      	str	r3, [r7, #0]
        break;
 8003842:	e130      	b.n	8003aa6 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b67      	cmp	r3, #103	; 0x67
 800384a:	d003      	beq.n	8003854 <_vsnprintf+0x6ec>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b47      	cmp	r3, #71	; 0x47
 8003852:	d103      	bne.n	800385c <_vsnprintf+0x6f4>
 8003854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003856:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b45      	cmp	r3, #69	; 0x45
 8003862:	d003      	beq.n	800386c <_vsnprintf+0x704>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b47      	cmp	r3, #71	; 0x47
 800386a:	d103      	bne.n	8003874 <_vsnprintf+0x70c>
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003876:	3307      	adds	r3, #7
 8003878:	f023 0307 	bic.w	r3, r3, #7
 800387c:	f103 0208 	add.w	r2, r3, #8
 8003880:	66ba      	str	r2, [r7, #104]	; 0x68
 8003882:	ed93 7b00 	vldr	d7, [r3]
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	9302      	str	r3, [sp, #8]
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	eeb0 0a47 	vmov.f32	s0, s14
 8003896:	eef0 0a67 	vmov.f32	s1, s15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7ff f9c9 	bl	8002c38 <_etoa>
 80038a6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	603b      	str	r3, [r7, #0]
        break;
 80038ae:	e0fa      	b.n	8003aa6 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80038b0:	2301      	movs	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80038b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <_vsnprintf+0x774>
          while (l++ < width) {
 80038be:	e007      	b.n	80038d0 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 80038c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c2:	1c53      	adds	r3, r2, #1
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
 80038c6:	68fc      	ldr	r4, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	2020      	movs	r0, #32
 80038ce:	47a0      	blx	r4
          while (l++ < width) {
 80038d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f1      	bhi.n	80038c0 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80038dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2d8      	uxtb	r0, r3
 80038e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e8:	1c53      	adds	r3, r2, #1
 80038ea:	647b      	str	r3, [r7, #68]	; 0x44
 80038ec:	68fc      	ldr	r4, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <_vsnprintf+0x7b4>
          while (l++ < width) {
 80038fe:	e007      	b.n	8003910 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8003900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003902:	1c53      	adds	r3, r2, #1
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
 8003906:	68fc      	ldr	r4, [r7, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	2020      	movs	r0, #32
 800390e:	47a0      	blx	r4
          while (l++ < width) {
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003916:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003918:	429a      	cmp	r2, r3
 800391a:	d8f1      	bhi.n	8003900 <_vsnprintf+0x798>
          }
        }
        format++;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	603b      	str	r3, [r7, #0]
        break;
 8003922:	e0c0      	b.n	8003aa6 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	66ba      	str	r2, [r7, #104]	; 0x68
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <_vsnprintf+0x7d0>
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	e001      	b.n	800393c <_vsnprintf+0x7d4>
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	4619      	mov	r1, r3
 800393e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003940:	f7fe fcb3 	bl	80022aa <_strnlen_s>
 8003944:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8003950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	4293      	cmp	r3, r2
 8003956:	bf28      	it	cs
 8003958:	4613      	movcs	r3, r2
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800395c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11a      	bne.n	800399c <_vsnprintf+0x834>
          while (l++ < width) {
 8003966:	e007      	b.n	8003978 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800396a:	1c53      	adds	r3, r2, #1
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	68fc      	ldr	r4, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	2020      	movs	r0, #32
 8003976:	47a0      	blx	r4
          while (l++ < width) {
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	637a      	str	r2, [r7, #52]	; 0x34
 800397e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003980:	429a      	cmp	r2, r3
 8003982:	d8f1      	bhi.n	8003968 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003984:	e00a      	b.n	800399c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	63ba      	str	r2, [r7, #56]	; 0x38
 800398c:	7818      	ldrb	r0, [r3, #0]
 800398e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003990:	1c53      	adds	r3, r2, #1
 8003992:	647b      	str	r3, [r7, #68]	; 0x44
 8003994:	68fc      	ldr	r4, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <_vsnprintf+0x850>
 80039a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0eb      	beq.n	8003986 <_vsnprintf+0x81e>
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e6      	bne.n	8003986 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00e      	beq.n	80039e0 <_vsnprintf+0x878>
          while (l++ < width) {
 80039c2:	e007      	b.n	80039d4 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 80039c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c6:	1c53      	adds	r3, r2, #1
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ca:	68fc      	ldr	r4, [r7, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	2020      	movs	r0, #32
 80039d2:	47a0      	blx	r4
          while (l++ < width) {
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	637a      	str	r2, [r7, #52]	; 0x34
 80039da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039dc:	429a      	cmp	r2, r3
 80039de:	d8f1      	bhi.n	80039c4 <_vsnprintf+0x85c>
          }
        }
        format++;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	603b      	str	r3, [r7, #0]
        break;
 80039e6:	e05e      	b.n	8003aa6 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80039e8:	2308      	movs	r3, #8
 80039ea:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80039f2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80039fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	66ba      	str	r2, [r7, #104]	; 0x68
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f04f 0400 	mov.w	r4, #0
 8003a0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a10:	9208      	str	r2, [sp, #32]
 8003a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a14:	9207      	str	r2, [sp, #28]
 8003a16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a18:	9206      	str	r2, [sp, #24]
 8003a1a:	f04f 0110 	mov.w	r1, #16
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8003a26:	2200      	movs	r2, #0
 8003a28:	9202      	str	r2, [sp, #8]
 8003a2a:	e9cd 3400 	strd	r3, r4, [sp]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7fe fe23 	bl	8002680 <_ntoa_long_long>
 8003a3a:	6478      	str	r0, [r7, #68]	; 0x44
 8003a3c:	e016      	b.n	8003a6c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	66ba      	str	r2, [r7, #104]	; 0x68
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	9305      	str	r3, [sp, #20]
 8003a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	9303      	str	r3, [sp, #12]
 8003a54:	2310      	movs	r3, #16
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	9200      	str	r2, [sp, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7fe fda4 	bl	80025b2 <_ntoa_long>
 8003a6a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	603b      	str	r3, [r7, #0]
        break;
 8003a72:	e018      	b.n	8003aa6 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a76:	1c53      	adds	r3, r2, #1
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7a:	68fc      	ldr	r4, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	2025      	movs	r0, #37	; 0x25
 8003a82:	47a0      	blx	r4
        format++;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	603b      	str	r3, [r7, #0]
        break;
 8003a8a:	e00c      	b.n	8003aa6 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	7818      	ldrb	r0, [r3, #0]
 8003a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a92:	1c53      	adds	r3, r2, #1
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	68fc      	ldr	r4, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	47a0      	blx	r4
        format++;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	603b      	str	r3, [r7, #0]
        break;
 8003aa4:	bf00      	nop
  while (*format)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f47f ab6d 	bne.w	800318a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <_vsnprintf+0x956>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1e5a      	subs	r2, r3, #1
 8003abc:	e000      	b.n	8003ac0 <_vsnprintf+0x958>
 8003abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac0:	68fc      	ldr	r4, [r7, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3758      	adds	r7, #88	; 0x58
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bdb0      	pop	{r4, r5, r7, pc}

08003ad4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003ad4:	b40f      	push	{r0, r1, r2, r3}
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003ae2:	1d39      	adds	r1, r7, #4
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f04f 32ff 	mov.w	r2, #4294967295
 8003aee:	4806      	ldr	r0, [pc, #24]	; (8003b08 <printf_+0x34>)
 8003af0:	f7ff fb3a 	bl	8003168 <_vsnprintf>
 8003af4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b02:	b004      	add	sp, #16
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	08002285 	.word	0x08002285

08003b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_MspInit+0x54>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <HAL_MspInit+0x54>)
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_MspInit+0x54>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_MspInit+0x54>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_MspInit+0x54>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_MspInit+0x54>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	210f      	movs	r1, #15
 8003b4e:	f06f 0001 	mvn.w	r0, #1
 8003b52:	f000 fad9 	bl	8004108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	2019      	movs	r0, #25
 8003b7a:	f000 fac5 	bl	8004108 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b7e:	2019      	movs	r0, #25
 8003b80:	f000 fade 	bl	8004140 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_InitTick+0xa0>)
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_InitTick+0xa0>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6453      	str	r3, [r2, #68]	; 0x44
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_InitTick+0xa0>)
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ba0:	f107 0210 	add.w	r2, r7, #16
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f002 f8ba 	bl	8005d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f002 f8a4 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8003bb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0c9b      	lsrs	r3, r3, #18
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <HAL_InitTick+0xa8>)
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <HAL_InitTick+0xac>)
 8003bc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_InitTick+0xa8>)
 8003bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003bd2:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <HAL_InitTick+0xa8>)
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_InitTick+0xa8>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_InitTick+0xa8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003be4:	4809      	ldr	r0, [pc, #36]	; (8003c0c <HAL_InitTick+0xa8>)
 8003be6:	f002 f8cf 	bl	8005d88 <HAL_TIM_Base_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003bf0:	4806      	ldr	r0, [pc, #24]	; (8003c0c <HAL_InitTick+0xa8>)
 8003bf2:	f002 f8f4 	bl	8005dde <HAL_TIM_Base_Start_IT>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	e000      	b.n	8003bfc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3730      	adds	r7, #48	; 0x30
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	431bde83 	.word	0x431bde83
 8003c0c:	20004b90 	.word	0x20004b90
 8003c10:	40010000 	.word	0x40010000

08003c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <NMI_Handler+0x4>

08003c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <HardFault_Handler+0x4>

08003c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <MemManage_Handler+0x4>

08003c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c2a:	e7fe      	b.n	8003c2a <BusFault_Handler+0x4>

08003c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c30:	e7fe      	b.n	8003c30 <UsageFault_Handler+0x4>

08003c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c46:	f002 f8ee 	bl	8005e26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20004b90 	.word	0x20004b90

08003c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c5c:	f000 fc34 	bl	80044c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c64:	f000 fc30 	bl	80044c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <_sbrk+0x5c>)
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <_sbrk+0x60>)
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <_sbrk+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <_sbrk+0x64>)
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <_sbrk+0x68>)
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <_sbrk+0x64>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d207      	bcs.n	8003cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c9c:	f007 f8be 	bl	800ae1c <__errno>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e009      	b.n	8003cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <_sbrk+0x64>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <_sbrk+0x64>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_sbrk+0x64>)
 8003cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20020000 	.word	0x20020000
 8003ccc:	00000400 	.word	0x00000400
 8003cd0:	200001fc 	.word	0x200001fc
 8003cd4:	20004c98 	.word	0x20004c98

08003cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <SystemInit+0x28>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <SystemInit+0x28>)
 8003ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <SystemInit+0x28>)
 8003cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d18:	463b      	mov	r3, r7
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d36:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d3c:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d48:	4813      	ldr	r0, [pc, #76]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d4a:	f002 f81d 	bl	8005d88 <HAL_TIM_Base_Init>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d54:	f7fe fa84 	bl	8002260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	4619      	mov	r1, r3
 8003d64:	480c      	ldr	r0, [pc, #48]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d66:	f002 f966 	bl	8006036 <HAL_TIM_ConfigClockSource>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d70:	f7fe fa76 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <MX_TIM2_Init+0x94>)
 8003d82:	f002 fb51 	bl	8006428 <HAL_TIMEx_MasterConfigSynchronization>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003d8c:	f7fe fa68 	bl	8002260 <Error_Handler>
  }

}
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20004bd0 	.word	0x20004bd0

08003d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d10d      	bne.n	8003dca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <MX_USART2_UART_Init+0x50>)
 8003de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003e02:	220c      	movs	r2, #12
 8003e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <MX_USART2_UART_Init+0x4c>)
 8003e14:	f002 fb8a 	bl	800652c <HAL_UART_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e1e:	f7fe fa1f 	bl	8002260 <Error_Handler>
  }

}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20004c10 	.word	0x20004c10
 8003e2c:	40004400 	.word	0x40004400

08003e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <HAL_UART_MspInit+0x84>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d12b      	bne.n	8003eaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_UART_MspInit+0x88>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_UART_MspInit+0x88>)
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_UART_MspInit+0x88>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_UART_MspInit+0x88>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_UART_MspInit+0x88>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_UART_MspInit+0x88>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e9a:	2307      	movs	r3, #7
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4805      	ldr	r0, [pc, #20]	; (8003ebc <HAL_UART_MspInit+0x8c>)
 8003ea6:	f000 f959 	bl	800415c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3728      	adds	r7, #40	; 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40004400 	.word	0x40004400
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40020000 	.word	0x40020000

08003ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ec6:	e003      	b.n	8003ed0 <LoopCopyDataInit>

08003ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ece:	3104      	adds	r1, #4

08003ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ed0:	480b      	ldr	r0, [pc, #44]	; (8003f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ed8:	d3f6      	bcc.n	8003ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003edc:	e002      	b.n	8003ee4 <LoopFillZerobss>

08003ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ee0:	f842 3b04 	str.w	r3, [r2], #4

08003ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ee8:	d3f9      	bcc.n	8003ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003eea:	f7ff fef5 	bl	8003cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eee:	f006 ff9b 	bl	800ae28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ef2:	f7fe f915 	bl	8002120 <main>
  bx  lr    
 8003ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ef8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003efc:	0800d360 	.word	0x0800d360
  ldr  r0, =_sdata
 8003f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f04:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003f08:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003f0c:	20004c98 	.word	0x20004c98

08003f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f10:	e7fe      	b.n	8003f10 <ADC_IRQHandler>
	...

08003f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_Init+0x40>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <HAL_Init+0x40>)
 8003f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_Init+0x40>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_Init+0x40>)
 8003f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_Init+0x40>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_Init+0x40>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	f000 f8d8 	bl	80040f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7ff fe0e 	bl	8003b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f48:	f7ff fde0 	bl	8003b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00

08003f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_IncTick+0x20>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_IncTick+0x24>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_IncTick+0x24>)
 8003f6a:	6013      	str	r3, [r2, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000008 	.word	0x20000008
 8003f7c:	20004c50 	.word	0x20004c50

08003f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return uwTick;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_GetTick+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20004c50 	.word	0x20004c50

08003f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60d3      	str	r3, [r2, #12]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 0307 	and.w	r3, r3, #7
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	2b00      	cmp	r3, #0
 800400c:	db0b      	blt.n	8004026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	4907      	ldr	r1, [pc, #28]	; (8004034 <__NVIC_EnableIRQ+0x38>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2001      	movs	r0, #1
 800401e:	fa00 f202 	lsl.w	r2, r0, r2
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	e000e100 	.word	0xe000e100

08004038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004048:	2b00      	cmp	r3, #0
 800404a:	db0a      	blt.n	8004062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	490c      	ldr	r1, [pc, #48]	; (8004084 <__NVIC_SetPriority+0x4c>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	0112      	lsls	r2, r2, #4
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	440b      	add	r3, r1
 800405c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004060:	e00a      	b.n	8004078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4908      	ldr	r1, [pc, #32]	; (8004088 <__NVIC_SetPriority+0x50>)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3b04      	subs	r3, #4
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	440b      	add	r3, r1
 8004076:	761a      	strb	r2, [r3, #24]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	bf28      	it	cs
 80040aa:	2304      	movcs	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d902      	bls.n	80040bc <NVIC_EncodePriority+0x30>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3b03      	subs	r3, #3
 80040ba:	e000      	b.n	80040be <NVIC_EncodePriority+0x32>
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d4:	f04f 31ff 	mov.w	r1, #4294967295
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43d9      	mvns	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	4313      	orrs	r3, r2
         );
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	; 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ff4c 	bl	8003f98 <__NVIC_SetPriorityGrouping>
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800411a:	f7ff ff61 	bl	8003fe0 <__NVIC_GetPriorityGrouping>
 800411e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f7ff ffb1 	bl	800408c <NVIC_EncodePriority>
 800412a:	4602      	mov	r2, r0
 800412c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff80 	bl	8004038 <__NVIC_SetPriority>
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff54 	bl	8003ffc <__NVIC_EnableIRQ>
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e159      	b.n	800442c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004178:	2201      	movs	r2, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8148 	bne.w	8004426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d00b      	beq.n	80041b6 <HAL_GPIO_Init+0x5a>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d007      	beq.n	80041b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041aa:	2b11      	cmp	r3, #17
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b12      	cmp	r3, #18
 80041b4:	d130      	bne.n	8004218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ec:	2201      	movs	r2, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0201 	and.w	r2, r3, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0xfc>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b12      	cmp	r3, #18
 8004256:	d123      	bne.n	80042a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	220f      	movs	r2, #15
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	08da      	lsrs	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3208      	adds	r2, #8
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a2 	beq.w	8004426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_GPIO_Init+0x2e4>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a55      	ldr	r2, [pc, #340]	; (8004440 <HAL_GPIO_Init+0x2e4>)
 80042ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_GPIO_Init+0x2e4>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fe:	4a51      	ldr	r2, [pc, #324]	; (8004444 <HAL_GPIO_Init+0x2e8>)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	3302      	adds	r3, #2
 8004306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	220f      	movs	r2, #15
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a48      	ldr	r2, [pc, #288]	; (8004448 <HAL_GPIO_Init+0x2ec>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d019      	beq.n	800435e <HAL_GPIO_Init+0x202>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a47      	ldr	r2, [pc, #284]	; (800444c <HAL_GPIO_Init+0x2f0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_GPIO_Init+0x1fe>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a46      	ldr	r2, [pc, #280]	; (8004450 <HAL_GPIO_Init+0x2f4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00d      	beq.n	8004356 <HAL_GPIO_Init+0x1fa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a45      	ldr	r2, [pc, #276]	; (8004454 <HAL_GPIO_Init+0x2f8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <HAL_GPIO_Init+0x1f6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a44      	ldr	r2, [pc, #272]	; (8004458 <HAL_GPIO_Init+0x2fc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <HAL_GPIO_Init+0x1f2>
 800434a:	2304      	movs	r3, #4
 800434c:	e008      	b.n	8004360 <HAL_GPIO_Init+0x204>
 800434e:	2307      	movs	r3, #7
 8004350:	e006      	b.n	8004360 <HAL_GPIO_Init+0x204>
 8004352:	2303      	movs	r3, #3
 8004354:	e004      	b.n	8004360 <HAL_GPIO_Init+0x204>
 8004356:	2302      	movs	r3, #2
 8004358:	e002      	b.n	8004360 <HAL_GPIO_Init+0x204>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_GPIO_Init+0x204>
 800435e:	2300      	movs	r3, #0
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f002 0203 	and.w	r2, r2, #3
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	4093      	lsls	r3, r2
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004370:	4934      	ldr	r1, [pc, #208]	; (8004444 <HAL_GPIO_Init+0x2e8>)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_GPIO_Init+0x300>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043a2:	4a2e      	ldr	r2, [pc, #184]	; (800445c <HAL_GPIO_Init+0x300>)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043a8:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_GPIO_Init+0x300>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_GPIO_Init+0x300>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <HAL_GPIO_Init+0x300>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_GPIO_Init+0x300>)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <HAL_GPIO_Init+0x300>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004420:	4a0e      	ldr	r2, [pc, #56]	; (800445c <HAL_GPIO_Init+0x300>)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	f67f aea2 	bls.w	8004178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004434:	bf00      	nop
 8004436:	3724      	adds	r7, #36	; 0x24
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40023800 	.word	0x40023800
 8004444:	40013800 	.word	0x40013800
 8004448:	40020000 	.word	0x40020000
 800444c:	40020400 	.word	0x40020400
 8004450:	40020800 	.word	0x40020800
 8004454:	40020c00 	.word	0x40020c00
 8004458:	40021000 	.word	0x40021000
 800445c:	40013c00 	.word	0x40013c00

08004460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	807b      	strh	r3, [r7, #2]
 800446c:	4613      	mov	r3, r2
 800446e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004470:	787b      	ldrb	r3, [r7, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800447c:	e003      	b.n	8004486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	041a      	lsls	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	619a      	str	r2, [r3, #24]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	401a      	ands	r2, r3
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d104      	bne.n	80044b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044ac:	887b      	ldrh	r3, [r7, #2]
 80044ae:	041a      	lsls	r2, r3, #16
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80044b4:	e002      	b.n	80044bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fc1c 	bl	8001d24 <HAL_GPIO_EXTI_Callback>
  }
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40013c00 	.word	0x40013c00

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e11f      	b.n	800474a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fdb6 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800455c:	f001 fbba 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8004560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a7b      	ldr	r2, [pc, #492]	; (8004754 <HAL_I2C_Init+0x25c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d807      	bhi.n	800457c <HAL_I2C_Init+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a7a      	ldr	r2, [pc, #488]	; (8004758 <HAL_I2C_Init+0x260>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e006      	b.n	800458a <HAL_I2C_Init+0x92>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a77      	ldr	r2, [pc, #476]	; (800475c <HAL_I2C_Init+0x264>)
 8004580:	4293      	cmp	r3, r2
 8004582:	bf94      	ite	ls
 8004584:	2301      	movls	r3, #1
 8004586:	2300      	movhi	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0db      	b.n	800474a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a72      	ldr	r2, [pc, #456]	; (8004760 <HAL_I2C_Init+0x268>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a64      	ldr	r2, [pc, #400]	; (8004754 <HAL_I2C_Init+0x25c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d802      	bhi.n	80045cc <HAL_I2C_Init+0xd4>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	e009      	b.n	80045e0 <HAL_I2C_Init+0xe8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	4a63      	ldr	r2, [pc, #396]	; (8004764 <HAL_I2C_Init+0x26c>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	3301      	adds	r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4956      	ldr	r1, [pc, #344]	; (8004754 <HAL_I2C_Init+0x25c>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d80d      	bhi.n	800461c <HAL_I2C_Init+0x124>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e59      	subs	r1, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fbb1 f3f3 	udiv	r3, r1, r3
 800460e:	3301      	adds	r3, #1
 8004610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004614:	2b04      	cmp	r3, #4
 8004616:	bf38      	it	cc
 8004618:	2304      	movcc	r3, #4
 800461a:	e04f      	b.n	80046bc <HAL_I2C_Init+0x1c4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <HAL_I2C_Init+0x150>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e012      	b.n	800466e <HAL_I2C_Init+0x176>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	0099      	lsls	r1, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	fbb0 f3f3 	udiv	r3, r0, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x17e>
 8004672:	2301      	movs	r3, #1
 8004674:	e022      	b.n	80046bc <HAL_I2C_Init+0x1c4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <HAL_I2C_Init+0x1a4>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1e58      	subs	r0, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6859      	ldr	r1, [r3, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	440b      	add	r3, r1
 800468c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004690:	3301      	adds	r3, #1
 8004692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	e00f      	b.n	80046bc <HAL_I2C_Init+0x1c4>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	6809      	ldr	r1, [r1, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6911      	ldr	r1, [r2, #16]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	000186a0 	.word	0x000186a0
 8004758:	001e847f 	.word	0x001e847f
 800475c:	003d08ff 	.word	0x003d08ff
 8004760:	431bde83 	.word	0x431bde83
 8004764:	10624dd3 	.word	0x10624dd3

08004768 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	460b      	mov	r3, r1
 800477c:	813b      	strh	r3, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004782:	f7ff fbfd 	bl	8003f80 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	f040 80d9 	bne.w	8004948 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2319      	movs	r3, #25
 800479c:	2201      	movs	r2, #1
 800479e:	496d      	ldr	r1, [pc, #436]	; (8004954 <HAL_I2C_Mem_Write+0x1ec>)
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fc7f 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
 80047ae:	e0cc      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_I2C_Mem_Write+0x56>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0c5      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d007      	beq.n	80047e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2221      	movs	r2, #33	; 0x21
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a4d      	ldr	r2, [pc, #308]	; (8004958 <HAL_I2C_Mem_Write+0x1f0>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004826:	88f8      	ldrh	r0, [r7, #6]
 8004828:	893a      	ldrh	r2, [r7, #8]
 800482a:	8979      	ldrh	r1, [r7, #10]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4603      	mov	r3, r0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fab6 	bl	8004da8 <I2C_RequestMemoryWrite>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d052      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e081      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fd00 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b04      	cmp	r3, #4
 800485c:	d107      	bne.n	800486e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06b      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_I2C_Mem_Write+0x180>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1aa      	bne.n	8004846 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fcec 	bl	80052d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b04      	cmp	r3, #4
 8004906:	d107      	bne.n	8004918 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e016      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	00100002 	.word	0x00100002
 8004958:	ffff0000 	.word	0xffff0000

0800495c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004976:	f7ff fb03 	bl	8003f80 <HAL_GetTick>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b20      	cmp	r3, #32
 8004986:	f040 8208 	bne.w	8004d9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2319      	movs	r3, #25
 8004990:	2201      	movs	r2, #1
 8004992:	497b      	ldr	r1, [pc, #492]	; (8004b80 <HAL_I2C_Mem_Read+0x224>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb85 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
 80049a2:	e1fb      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Mem_Read+0x56>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e1f4      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d007      	beq.n	80049d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2222      	movs	r2, #34	; 0x22
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2240      	movs	r2, #64	; 0x40
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a5b      	ldr	r2, [pc, #364]	; (8004b84 <HAL_I2C_Mem_Read+0x228>)
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a1a:	88f8      	ldrh	r0, [r7, #6]
 8004a1c:	893a      	ldrh	r2, [r7, #8]
 8004a1e:	8979      	ldrh	r1, [r7, #10]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4603      	mov	r3, r0
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fa52 	bl	8004ed4 <I2C_RequestMemoryRead>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e1b0      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d113      	bne.n	8004a6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a42:	2300      	movs	r3, #0
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	623b      	str	r3, [r7, #32]
 8004a56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e184      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d11b      	bne.n	8004aaa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e164      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d11b      	bne.n	8004aea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	e144      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b00:	e138      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	f200 80f1 	bhi.w	8004cee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d123      	bne.n	8004b5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fc1b 	bl	8005354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e139      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b5a:	e10b      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d14e      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4906      	ldr	r1, [pc, #24]	; (8004b88 <HAL_I2C_Mem_Read+0x22c>)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fa98 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e10e      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
 8004b7e:	bf00      	nop
 8004b80:	00100002 	.word	0x00100002
 8004b84:	ffff0000 	.word	0xffff0000
 8004b88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c00:	e0b8      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4966      	ldr	r1, [pc, #408]	; (8004da4 <HAL_I2C_Mem_Read+0x448>)
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fa49 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0bf      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2200      	movs	r2, #0
 8004c66:	494f      	ldr	r1, [pc, #316]	; (8004da4 <HAL_I2C_Mem_Read+0x448>)
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fa1b 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e091      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cec:	e042      	b.n	8004d74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fb2e 	bl	8005354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e04c      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d118      	bne.n	8004d74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f aec2 	bne.w	8004b02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3728      	adds	r7, #40	; 0x28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	00010004 	.word	0x00010004

08004da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	817b      	strh	r3, [r7, #10]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	813b      	strh	r3, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f960 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df8:	d103      	bne.n	8004e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e05f      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	492d      	ldr	r1, [pc, #180]	; (8004ed0 <I2C_RequestMemoryWrite+0x128>)
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f998 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e04c      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa02 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e02b      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d105      	bne.n	8004e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	e021      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e80:	893b      	ldrh	r3, [r7, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	6a39      	ldr	r1, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f9dc 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d107      	bne.n	8004eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e005      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	00010002 	.word	0x00010002

08004ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	4608      	mov	r0, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	817b      	strh	r3, [r7, #10]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	813b      	strh	r3, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8c2 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f34:	d103      	bne.n	8004f3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0aa      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	4952      	ldr	r1, [pc, #328]	; (80050a0 <I2C_RequestMemoryRead+0x1cc>)
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f8fa 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e097      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	6a39      	ldr	r1, [r7, #32]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f964 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d107      	bne.n	8004fa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e076      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d105      	bne.n	8004fbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e021      	b.n	8005000 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	6a39      	ldr	r1, [r7, #32]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f93e 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d107      	bne.n	8004ff2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e050      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	6a39      	ldr	r1, [r7, #32]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f923 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b04      	cmp	r3, #4
 8005016:	d107      	bne.n	8005028 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e035      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	2200      	movs	r2, #0
 8005044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f82b 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00d      	beq.n	8005070 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d103      	bne.n	800506c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e013      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005070:	897b      	ldrh	r3, [r7, #10]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <I2C_RequestMemoryRead+0x1cc>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f863 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b4:	e025      	b.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d021      	beq.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fe ff5f 	bl	8003f80 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d116      	bne.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e023      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10d      	bne.n	8005128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	e00c      	b.n	8005142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	43da      	mvns	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d0b6      	beq.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005160:	e051      	b.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d123      	bne.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0204 	orr.w	r2, r3, #4
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e046      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d021      	beq.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fe fedd 	bl	8003f80 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e020      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10c      	bne.n	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	43da      	mvns	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e00b      	b.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	43da      	mvns	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d18d      	bne.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525c:	e02d      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f8ce 	bl	8005400 <I2C_IsAcknowledgeFailed>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e02d      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d021      	beq.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fe fe83 	bl	8003f80 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d116      	bne.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e007      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d1ca      	bne.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052de:	e02d      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f88d 	bl	8005400 <I2C_IsAcknowledgeFailed>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e02d      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d021      	beq.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7fe fe42 	bl	8003f80 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e007      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d1ca      	bne.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005360:	e042      	b.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b10      	cmp	r3, #16
 800536e:	d119      	bne.n	80053a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0210 	mvn.w	r2, #16
 8005378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e029      	b.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a4:	f7fe fdec 	bl	8003f80 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d116      	bne.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e007      	b.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b40      	cmp	r3, #64	; 0x40
 80053f4:	d1b5      	bne.n	8005362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005416:	d11b      	bne.n	8005450 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005420:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	f043 0204 	orr.w	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e25b      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d075      	beq.n	800556a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800547e:	4ba3      	ldr	r3, [pc, #652]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b04      	cmp	r3, #4
 8005488:	d00c      	beq.n	80054a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548a:	4ba0      	ldr	r3, [pc, #640]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005492:	2b08      	cmp	r3, #8
 8005494:	d112      	bne.n	80054bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005496:	4b9d      	ldr	r3, [pc, #628]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a2:	d10b      	bne.n	80054bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a4:	4b99      	ldr	r3, [pc, #612]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05b      	beq.n	8005568 <HAL_RCC_OscConfig+0x108>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d157      	bne.n	8005568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e236      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d106      	bne.n	80054d4 <HAL_RCC_OscConfig+0x74>
 80054c6:	4b91      	ldr	r3, [pc, #580]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a90      	ldr	r2, [pc, #576]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e01d      	b.n	8005510 <HAL_RCC_OscConfig+0xb0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x98>
 80054de:	4b8b      	ldr	r3, [pc, #556]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a8a      	ldr	r2, [pc, #552]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b88      	ldr	r3, [pc, #544]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a87      	ldr	r2, [pc, #540]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0xb0>
 80054f8:	4b84      	ldr	r3, [pc, #528]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a83      	ldr	r2, [pc, #524]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80054fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a80      	ldr	r2, [pc, #512]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 800550a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fe fd32 	bl	8003f80 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005520:	f7fe fd2e 	bl	8003f80 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e1fb      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b76      	ldr	r3, [pc, #472]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0xc0>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fe fd1e 	bl	8003f80 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005548:	f7fe fd1a 	bl	8003f80 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e1e7      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	4b6c      	ldr	r3, [pc, #432]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0xe8>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d063      	beq.n	800563e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005576:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005582:	4b62      	ldr	r3, [pc, #392]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800558a:	2b08      	cmp	r3, #8
 800558c:	d11c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558e:	4b5f      	ldr	r3, [pc, #380]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d116      	bne.n	80055c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800559a:	4b5c      	ldr	r3, [pc, #368]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_RCC_OscConfig+0x152>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e1bb      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b2:	4b56      	ldr	r3, [pc, #344]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4952      	ldr	r1, [pc, #328]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	e03a      	b.n	800563e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d020      	beq.n	8005612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d0:	4b4f      	ldr	r3, [pc, #316]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fe fcd3 	bl	8003f80 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055de:	f7fe fccf 	bl	8003f80 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e19c      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	4b46      	ldr	r3, [pc, #280]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fc:	4b43      	ldr	r3, [pc, #268]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4940      	ldr	r1, [pc, #256]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]
 8005610:	e015      	b.n	800563e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005612:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fe fcb2 	bl	8003f80 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005620:	f7fe fcae 	bl	8003f80 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e17b      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d030      	beq.n	80056ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005652:	4b30      	ldr	r3, [pc, #192]	; (8005714 <HAL_RCC_OscConfig+0x2b4>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fe fc92 	bl	8003f80 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005660:	f7fe fc8e 	bl	8003f80 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e15b      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 8005674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x200>
 800567e:	e015      	b.n	80056ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005680:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_RCC_OscConfig+0x2b4>)
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005686:	f7fe fc7b 	bl	8003f80 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568e:	f7fe fc77 	bl	8003f80 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e144      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80056a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80a0 	beq.w	80057fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056be:	4b13      	ldr	r3, [pc, #76]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	4a0e      	ldr	r2, [pc, #56]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6413      	str	r3, [r2, #64]	; 0x40
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <HAL_RCC_OscConfig+0x2b8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d121      	bne.n	800573a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <HAL_RCC_OscConfig+0x2b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <HAL_RCC_OscConfig+0x2b8>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005702:	f7fe fc3d 	bl	8003f80 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005708:	e011      	b.n	800572e <HAL_RCC_OscConfig+0x2ce>
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800
 8005710:	42470000 	.word	0x42470000
 8005714:	42470e80 	.word	0x42470e80
 8005718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571c:	f7fe fc30 	bl	8003f80 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e0fd      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572e:	4b81      	ldr	r3, [pc, #516]	; (8005934 <HAL_RCC_OscConfig+0x4d4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d106      	bne.n	8005750 <HAL_RCC_OscConfig+0x2f0>
 8005742:	4b7d      	ldr	r3, [pc, #500]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a7c      	ldr	r2, [pc, #496]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
 800574e:	e01c      	b.n	800578a <HAL_RCC_OscConfig+0x32a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b05      	cmp	r3, #5
 8005756:	d10c      	bne.n	8005772 <HAL_RCC_OscConfig+0x312>
 8005758:	4b77      	ldr	r3, [pc, #476]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a76      	ldr	r2, [pc, #472]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 800575e:	f043 0304 	orr.w	r3, r3, #4
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	4b74      	ldr	r3, [pc, #464]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a73      	ldr	r2, [pc, #460]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	e00b      	b.n	800578a <HAL_RCC_OscConfig+0x32a>
 8005772:	4b71      	ldr	r3, [pc, #452]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a70      	ldr	r2, [pc, #448]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	4b6e      	ldr	r3, [pc, #440]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a6d      	ldr	r2, [pc, #436]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005784:	f023 0304 	bic.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d015      	beq.n	80057be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005792:	f7fe fbf5 	bl	8003f80 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005798:	e00a      	b.n	80057b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579a:	f7fe fbf1 	bl	8003f80 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e0bc      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b0:	4b61      	ldr	r3, [pc, #388]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 80057b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ee      	beq.n	800579a <HAL_RCC_OscConfig+0x33a>
 80057bc:	e014      	b.n	80057e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057be:	f7fe fbdf 	bl	8003f80 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c4:	e00a      	b.n	80057dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fe fbdb 	bl	8003f80 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e0a6      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057dc:	4b56      	ldr	r3, [pc, #344]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ee      	bne.n	80057c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d105      	bne.n	80057fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ee:	4b52      	ldr	r3, [pc, #328]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	4a51      	ldr	r2, [pc, #324]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 80057f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8092 	beq.w	8005928 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005804:	4b4c      	ldr	r3, [pc, #304]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b08      	cmp	r3, #8
 800580e:	d05c      	beq.n	80058ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d141      	bne.n	800589c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005818:	4b48      	ldr	r3, [pc, #288]	; (800593c <HAL_RCC_OscConfig+0x4dc>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581e:	f7fe fbaf 	bl	8003f80 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005826:	f7fe fbab 	bl	8003f80 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e078      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005838:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	019b      	lsls	r3, r3, #6
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	4933      	ldr	r1, [pc, #204]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 800586a:	4313      	orrs	r3, r2
 800586c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586e:	4b33      	ldr	r3, [pc, #204]	; (800593c <HAL_RCC_OscConfig+0x4dc>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fe fb84 	bl	8003f80 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587c:	f7fe fb80 	bl	8003f80 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e04d      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0x41c>
 800589a:	e045      	b.n	8005928 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589c:	4b27      	ldr	r3, [pc, #156]	; (800593c <HAL_RCC_OscConfig+0x4dc>)
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a2:	f7fe fb6d 	bl	8003f80 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058aa:	f7fe fb69 	bl	8003f80 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e036      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <HAL_RCC_OscConfig+0x44a>
 80058c8:	e02e      	b.n	8005928 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e029      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_RCC_OscConfig+0x4d8>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d11c      	bne.n	8005924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d115      	bne.n	8005924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058fe:	4013      	ands	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005904:	4293      	cmp	r3, r2
 8005906:	d10d      	bne.n	8005924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005912:	429a      	cmp	r2, r3
 8005914:	d106      	bne.n	8005924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40007000 	.word	0x40007000
 8005938:	40023800 	.word	0x40023800
 800593c:	42470060 	.word	0x42470060

08005940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0cc      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005954:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d90c      	bls.n	800597c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b65      	ldr	r3, [pc, #404]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b63      	ldr	r3, [pc, #396]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0b8      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d020      	beq.n	80059ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4a58      	ldr	r2, [pc, #352]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800599e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059ac:	4b53      	ldr	r3, [pc, #332]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a52      	ldr	r2, [pc, #328]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b8:	4b50      	ldr	r3, [pc, #320]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	494d      	ldr	r1, [pc, #308]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d044      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d107      	bne.n	80059ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059de:	4b47      	ldr	r3, [pc, #284]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d119      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e07f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d003      	beq.n	80059fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fe:	4b3f      	ldr	r3, [pc, #252]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e06f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e067      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1e:	4b37      	ldr	r3, [pc, #220]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 0203 	bic.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4934      	ldr	r1, [pc, #208]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a30:	f7fe faa6 	bl	8003f80 <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a36:	e00a      	b.n	8005a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a38:	f7fe faa2 	bl	8003f80 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e04f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 020c 	and.w	r2, r3, #12
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1eb      	bne.n	8005a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d20c      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e032      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4916      	ldr	r1, [pc, #88]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	490e      	ldr	r1, [pc, #56]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ac6:	f000 f821 	bl	8005b0c <HAL_RCC_GetSysClockFreq>
 8005aca:	4601      	mov	r1, r0
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	fa21 f303 	lsr.w	r3, r1, r3
 8005ade:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe f83c 	bl	8003b64 <HAL_InitTick>

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40023c00 	.word	0x40023c00
 8005afc:	40023800 	.word	0x40023800
 8005b00:	0800d0d0 	.word	0x0800d0d0
 8005b04:	20000000 	.word	0x20000000
 8005b08:	20000004 	.word	0x20000004

08005b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b22:	4b63      	ldr	r3, [pc, #396]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d007      	beq.n	8005b3e <HAL_RCC_GetSysClockFreq+0x32>
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d008      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0x38>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 80b4 	bne.w	8005ca0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b38:	4b5e      	ldr	r3, [pc, #376]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b3a:	60bb      	str	r3, [r7, #8]
       break;
 8005b3c:	e0b3      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b3e:	4b5e      	ldr	r3, [pc, #376]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b40:	60bb      	str	r3, [r7, #8]
      break;
 8005b42:	e0b0      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b44:	4b5a      	ldr	r3, [pc, #360]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b4e:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d04a      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5a:	4b55      	ldr	r3, [pc, #340]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	f04f 0400 	mov.w	r4, #0
 8005b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	ea03 0501 	and.w	r5, r3, r1
 8005b70:	ea04 0602 	and.w	r6, r4, r2
 8005b74:	4629      	mov	r1, r5
 8005b76:	4632      	mov	r2, r6
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f04f 0400 	mov.w	r4, #0
 8005b80:	0154      	lsls	r4, r2, #5
 8005b82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b86:	014b      	lsls	r3, r1, #5
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	1b49      	subs	r1, r1, r5
 8005b8e:	eb62 0206 	sbc.w	r2, r2, r6
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	f04f 0400 	mov.w	r4, #0
 8005b9a:	0194      	lsls	r4, r2, #6
 8005b9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ba0:	018b      	lsls	r3, r1, #6
 8005ba2:	1a5b      	subs	r3, r3, r1
 8005ba4:	eb64 0402 	sbc.w	r4, r4, r2
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	00e2      	lsls	r2, r4, #3
 8005bb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005bb6:	00d9      	lsls	r1, r3, #3
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4614      	mov	r4, r2
 8005bbc:	195b      	adds	r3, r3, r5
 8005bbe:	eb44 0406 	adc.w	r4, r4, r6
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	0262      	lsls	r2, r4, #9
 8005bcc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005bd0:	0259      	lsls	r1, r3, #9
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	4621      	mov	r1, r4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f04f 0400 	mov.w	r4, #0
 8005be0:	461a      	mov	r2, r3
 8005be2:	4623      	mov	r3, r4
 8005be4:	f7fa ffb8 	bl	8000b58 <__aeabi_uldivmod>
 8005be8:	4603      	mov	r3, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e049      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf0:	4b2f      	ldr	r3, [pc, #188]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	f04f 0400 	mov.w	r4, #0
 8005bfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	ea03 0501 	and.w	r5, r3, r1
 8005c06:	ea04 0602 	and.w	r6, r4, r2
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	4632      	mov	r2, r6
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	f04f 0400 	mov.w	r4, #0
 8005c16:	0154      	lsls	r4, r2, #5
 8005c18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c1c:	014b      	lsls	r3, r1, #5
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4622      	mov	r2, r4
 8005c22:	1b49      	subs	r1, r1, r5
 8005c24:	eb62 0206 	sbc.w	r2, r2, r6
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	f04f 0400 	mov.w	r4, #0
 8005c30:	0194      	lsls	r4, r2, #6
 8005c32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c36:	018b      	lsls	r3, r1, #6
 8005c38:	1a5b      	subs	r3, r3, r1
 8005c3a:	eb64 0402 	sbc.w	r4, r4, r2
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	00e2      	lsls	r2, r4, #3
 8005c48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c4c:	00d9      	lsls	r1, r3, #3
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4614      	mov	r4, r2
 8005c52:	195b      	adds	r3, r3, r5
 8005c54:	eb44 0406 	adc.w	r4, r4, r6
 8005c58:	f04f 0100 	mov.w	r1, #0
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	02a2      	lsls	r2, r4, #10
 8005c62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c66:	0299      	lsls	r1, r3, #10
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4614      	mov	r4, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	4621      	mov	r1, r4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f04f 0400 	mov.w	r4, #0
 8005c76:	461a      	mov	r2, r3
 8005c78:	4623      	mov	r3, r4
 8005c7a:	f7fa ff6d 	bl	8000b58 <__aeabi_uldivmod>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	3301      	adds	r3, #1
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	60bb      	str	r3, [r7, #8]
      break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ca2:	60bb      	str	r3, [r7, #8]
      break;
 8005ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	00f42400 	.word	0x00f42400
 8005cb8:	007a1200 	.word	0x007a1200

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000000 	.word	0x20000000

08005cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cd8:	f7ff fff0 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cdc:	4601      	mov	r1, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0a9b      	lsrs	r3, r3, #10
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4a03      	ldr	r2, [pc, #12]	; (8005cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cea:	5cd3      	ldrb	r3, [r2, r3]
 8005cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	0800d0e0 	.word	0x0800d0e0

08005cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d00:	f7ff ffdc 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d04:	4601      	mov	r1, r0
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0b5b      	lsrs	r3, r3, #13
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	0800d0e0 	.word	0x0800d0e0

08005d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	220f      	movs	r2, #15
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d34:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0203 	and.w	r2, r3, #3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	08db      	lsrs	r3, r3, #3
 8005d5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <HAL_RCC_GetClockConfig+0x60>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800
 8005d84:	40023c00 	.word	0x40023c00

08005d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e01d      	b.n	8005dd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fd fff4 	bl	8003d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f000 fa14 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d007      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d122      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d11b      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0202 	mvn.w	r2, #2
 8005e52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f9a5 	bl	80061b8 <HAL_TIM_IC_CaptureCallback>
 8005e6e:	e005      	b.n	8005e7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f997 	bl	80061a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9a8 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d122      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d11b      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0204 	mvn.w	r2, #4
 8005ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f97b 	bl	80061b8 <HAL_TIM_IC_CaptureCallback>
 8005ec2:	e005      	b.n	8005ed0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f96d 	bl	80061a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f97e 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d122      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d11b      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f06f 0208 	mvn.w	r2, #8
 8005efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2204      	movs	r2, #4
 8005f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f951 	bl	80061b8 <HAL_TIM_IC_CaptureCallback>
 8005f16:	e005      	b.n	8005f24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f943 	bl	80061a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f954 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d122      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d11b      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0210 	mvn.w	r2, #16
 8005f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2208      	movs	r2, #8
 8005f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f927 	bl	80061b8 <HAL_TIM_IC_CaptureCallback>
 8005f6a:	e005      	b.n	8005f78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f919 	bl	80061a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f92a 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d10e      	bne.n	8005faa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0201 	mvn.w	r2, #1
 8005fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fc f949 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d10e      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 faa1 	bl	8006518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d10e      	bne.n	8006002 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d107      	bne.n	8006002 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8ef 	bl	80061e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d10e      	bne.n	800602e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b20      	cmp	r3, #32
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0220 	mvn.w	r2, #32
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa6b 	bl	8006504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_TIM_ConfigClockSource+0x18>
 800604a:	2302      	movs	r3, #2
 800604c:	e0a6      	b.n	800619c <HAL_TIM_ConfigClockSource+0x166>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800606c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006074:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d067      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x120>
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d80b      	bhi.n	80060a2 <HAL_TIM_ConfigClockSource+0x6c>
 800608a:	2b10      	cmp	r3, #16
 800608c:	d073      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x140>
 800608e:	2b10      	cmp	r3, #16
 8006090:	d802      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x62>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d06f      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006096:	e078      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006098:	2b20      	cmp	r3, #32
 800609a:	d06c      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x140>
 800609c:	2b30      	cmp	r3, #48	; 0x30
 800609e:	d06a      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060a0:	e073      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060a2:	2b70      	cmp	r3, #112	; 0x70
 80060a4:	d00d      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x8c>
 80060a6:	2b70      	cmp	r3, #112	; 0x70
 80060a8:	d804      	bhi.n	80060b4 <HAL_TIM_ConfigClockSource+0x7e>
 80060aa:	2b50      	cmp	r3, #80	; 0x50
 80060ac:	d033      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0xe0>
 80060ae:	2b60      	cmp	r3, #96	; 0x60
 80060b0:	d041      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060b2:	e06a      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d066      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0x152>
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060be:	d017      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060c0:	e063      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6899      	ldr	r1, [r3, #8]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f000 f989 	bl	80063e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	609a      	str	r2, [r3, #8]
      break;
 80060ee:	e04c      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6899      	ldr	r1, [r3, #8]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f000 f972 	bl	80063e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006112:	609a      	str	r2, [r3, #8]
      break;
 8006114:	e039      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	461a      	mov	r2, r3
 8006124:	f000 f8e6 	bl	80062f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2150      	movs	r1, #80	; 0x50
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f93f 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 8006134:	e029      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	461a      	mov	r2, r3
 8006144:	f000 f905 	bl	8006352 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2160      	movs	r1, #96	; 0x60
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f92f 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 8006154:	e019      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	461a      	mov	r2, r3
 8006164:	f000 f8c6 	bl	80062f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2140      	movs	r1, #64	; 0x40
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f91f 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 8006174:	e009      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 f916 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 8006186:	e000      	b.n	800618a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006188:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a34      	ldr	r2, [pc, #208]	; (80062d8 <TIM_Base_SetConfig+0xe4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00f      	beq.n	800622c <TIM_Base_SetConfig+0x38>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d00b      	beq.n	800622c <TIM_Base_SetConfig+0x38>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a31      	ldr	r2, [pc, #196]	; (80062dc <TIM_Base_SetConfig+0xe8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d007      	beq.n	800622c <TIM_Base_SetConfig+0x38>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a30      	ldr	r2, [pc, #192]	; (80062e0 <TIM_Base_SetConfig+0xec>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0x38>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <TIM_Base_SetConfig+0xf0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <TIM_Base_SetConfig+0xe4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01b      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624c:	d017      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <TIM_Base_SetConfig+0xe8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <TIM_Base_SetConfig+0xec>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00f      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <TIM_Base_SetConfig+0xf0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00b      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <TIM_Base_SetConfig+0xf4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d007      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <TIM_Base_SetConfig+0xf8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <TIM_Base_SetConfig+0xfc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d108      	bne.n	8006290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <TIM_Base_SetConfig+0xe4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d103      	bne.n	80062c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	615a      	str	r2, [r3, #20]
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800

080062f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0201 	bic.w	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800631e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f023 030a 	bic.w	r3, r3, #10
 8006330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0210 	bic.w	r2, r3, #16
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800637c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	031b      	lsls	r3, r3, #12
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f043 0307 	orr.w	r3, r3, #7
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	431a      	orrs	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800643c:	2302      	movs	r3, #2
 800643e:	e050      	b.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d013      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a13      	ldr	r2, [pc, #76]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10c      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40014000 	.word	0x40014000

08006504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e03f      	b.n	80065be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fd fc6c 	bl	8003e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	; 0x24
 800655c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800656e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f90b 	bl	800678c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b088      	sub	sp, #32
 80065ca:	af02      	add	r7, sp, #8
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	f040 8083 	bne.w	80066ee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_UART_Transmit+0x2e>
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e07b      	b.n	80066f0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_UART_Transmit+0x40>
 8006602:	2302      	movs	r3, #2
 8006604:	e074      	b.n	80066f0 <HAL_UART_Transmit+0x12a>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2221      	movs	r2, #33	; 0x21
 8006618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800661c:	f7fd fcb0 	bl	8003f80 <HAL_GetTick>
 8006620:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006636:	e042      	b.n	80066be <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d122      	bne.n	8006696 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2200      	movs	r2, #0
 8006658:	2180      	movs	r1, #128	; 0x80
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f84c 	bl	80066f8 <UART_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e042      	b.n	80066f0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800667c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	3302      	adds	r3, #2
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	e017      	b.n	80066be <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	3301      	adds	r3, #1
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	e013      	b.n	80066be <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2200      	movs	r2, #0
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f829 	bl	80066f8 <UART_WaitOnFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e01f      	b.n	80066f0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	60ba      	str	r2, [r7, #8]
 80066b6:	781a      	ldrb	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1b7      	bne.n	8006638 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2140      	movs	r1, #64	; 0x40
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f810 	bl	80066f8 <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e006      	b.n	80066f0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006708:	e02c      	b.n	8006764 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d028      	beq.n	8006764 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <UART_WaitOnFlagUntilTimeout+0x30>
 8006718:	f7fd fc32 	bl	8003f80 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	429a      	cmp	r2, r3
 8006726:	d21d      	bcs.n	8006764 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006736:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e00f      	b.n	8006784 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	429a      	cmp	r2, r3
 8006780:	d0c3      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067ce:	f023 030c 	bic.w	r3, r3, #12
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	430b      	orrs	r3, r1
 80067da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fa:	f040 818b 	bne.w	8006b14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4ac1      	ldr	r2, [pc, #772]	; (8006b08 <UART_SetConfig+0x37c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d005      	beq.n	8006814 <UART_SetConfig+0x88>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4abf      	ldr	r2, [pc, #764]	; (8006b0c <UART_SetConfig+0x380>)
 800680e:	4293      	cmp	r3, r2
 8006810:	f040 80bd 	bne.w	800698e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7ff fa72 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8006818:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	461d      	mov	r5, r3
 800681e:	f04f 0600 	mov.w	r6, #0
 8006822:	46a8      	mov	r8, r5
 8006824:	46b1      	mov	r9, r6
 8006826:	eb18 0308 	adds.w	r3, r8, r8
 800682a:	eb49 0409 	adc.w	r4, r9, r9
 800682e:	4698      	mov	r8, r3
 8006830:	46a1      	mov	r9, r4
 8006832:	eb18 0805 	adds.w	r8, r8, r5
 8006836:	eb49 0906 	adc.w	r9, r9, r6
 800683a:	f04f 0100 	mov.w	r1, #0
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006846:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800684a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800684e:	4688      	mov	r8, r1
 8006850:	4691      	mov	r9, r2
 8006852:	eb18 0005 	adds.w	r0, r8, r5
 8006856:	eb49 0106 	adc.w	r1, r9, r6
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	461d      	mov	r5, r3
 8006860:	f04f 0600 	mov.w	r6, #0
 8006864:	196b      	adds	r3, r5, r5
 8006866:	eb46 0406 	adc.w	r4, r6, r6
 800686a:	461a      	mov	r2, r3
 800686c:	4623      	mov	r3, r4
 800686e:	f7fa f973 	bl	8000b58 <__aeabi_uldivmod>
 8006872:	4603      	mov	r3, r0
 8006874:	460c      	mov	r4, r1
 8006876:	461a      	mov	r2, r3
 8006878:	4ba5      	ldr	r3, [pc, #660]	; (8006b10 <UART_SetConfig+0x384>)
 800687a:	fba3 2302 	umull	r2, r3, r3, r2
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	461d      	mov	r5, r3
 8006888:	f04f 0600 	mov.w	r6, #0
 800688c:	46a9      	mov	r9, r5
 800688e:	46b2      	mov	sl, r6
 8006890:	eb19 0309 	adds.w	r3, r9, r9
 8006894:	eb4a 040a 	adc.w	r4, sl, sl
 8006898:	4699      	mov	r9, r3
 800689a:	46a2      	mov	sl, r4
 800689c:	eb19 0905 	adds.w	r9, r9, r5
 80068a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b8:	4689      	mov	r9, r1
 80068ba:	4692      	mov	sl, r2
 80068bc:	eb19 0005 	adds.w	r0, r9, r5
 80068c0:	eb4a 0106 	adc.w	r1, sl, r6
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	461d      	mov	r5, r3
 80068ca:	f04f 0600 	mov.w	r6, #0
 80068ce:	196b      	adds	r3, r5, r5
 80068d0:	eb46 0406 	adc.w	r4, r6, r6
 80068d4:	461a      	mov	r2, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	f7fa f93e 	bl	8000b58 <__aeabi_uldivmod>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b8b      	ldr	r3, [pc, #556]	; (8006b10 <UART_SetConfig+0x384>)
 80068e4:	fba3 1302 	umull	r1, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	2164      	movs	r1, #100	; 0x64
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	3332      	adds	r3, #50	; 0x32
 80068f6:	4a86      	ldr	r2, [pc, #536]	; (8006b10 <UART_SetConfig+0x384>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006904:	4498      	add	r8, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	461d      	mov	r5, r3
 800690a:	f04f 0600 	mov.w	r6, #0
 800690e:	46a9      	mov	r9, r5
 8006910:	46b2      	mov	sl, r6
 8006912:	eb19 0309 	adds.w	r3, r9, r9
 8006916:	eb4a 040a 	adc.w	r4, sl, sl
 800691a:	4699      	mov	r9, r3
 800691c:	46a2      	mov	sl, r4
 800691e:	eb19 0905 	adds.w	r9, r9, r5
 8006922:	eb4a 0a06 	adc.w	sl, sl, r6
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006932:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006936:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800693a:	4689      	mov	r9, r1
 800693c:	4692      	mov	sl, r2
 800693e:	eb19 0005 	adds.w	r0, r9, r5
 8006942:	eb4a 0106 	adc.w	r1, sl, r6
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	461d      	mov	r5, r3
 800694c:	f04f 0600 	mov.w	r6, #0
 8006950:	196b      	adds	r3, r5, r5
 8006952:	eb46 0406 	adc.w	r4, r6, r6
 8006956:	461a      	mov	r2, r3
 8006958:	4623      	mov	r3, r4
 800695a:	f7fa f8fd 	bl	8000b58 <__aeabi_uldivmod>
 800695e:	4603      	mov	r3, r0
 8006960:	460c      	mov	r4, r1
 8006962:	461a      	mov	r2, r3
 8006964:	4b6a      	ldr	r3, [pc, #424]	; (8006b10 <UART_SetConfig+0x384>)
 8006966:	fba3 1302 	umull	r1, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2164      	movs	r1, #100	; 0x64
 800696e:	fb01 f303 	mul.w	r3, r1, r3
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	3332      	adds	r3, #50	; 0x32
 8006978:	4a65      	ldr	r2, [pc, #404]	; (8006b10 <UART_SetConfig+0x384>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	f003 0207 	and.w	r2, r3, #7
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4442      	add	r2, r8
 800698a:	609a      	str	r2, [r3, #8]
 800698c:	e26f      	b.n	8006e6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800698e:	f7ff f9a1 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8006992:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	461d      	mov	r5, r3
 8006998:	f04f 0600 	mov.w	r6, #0
 800699c:	46a8      	mov	r8, r5
 800699e:	46b1      	mov	r9, r6
 80069a0:	eb18 0308 	adds.w	r3, r8, r8
 80069a4:	eb49 0409 	adc.w	r4, r9, r9
 80069a8:	4698      	mov	r8, r3
 80069aa:	46a1      	mov	r9, r4
 80069ac:	eb18 0805 	adds.w	r8, r8, r5
 80069b0:	eb49 0906 	adc.w	r9, r9, r6
 80069b4:	f04f 0100 	mov.w	r1, #0
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069c8:	4688      	mov	r8, r1
 80069ca:	4691      	mov	r9, r2
 80069cc:	eb18 0005 	adds.w	r0, r8, r5
 80069d0:	eb49 0106 	adc.w	r1, r9, r6
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	461d      	mov	r5, r3
 80069da:	f04f 0600 	mov.w	r6, #0
 80069de:	196b      	adds	r3, r5, r5
 80069e0:	eb46 0406 	adc.w	r4, r6, r6
 80069e4:	461a      	mov	r2, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	f7fa f8b6 	bl	8000b58 <__aeabi_uldivmod>
 80069ec:	4603      	mov	r3, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	461a      	mov	r2, r3
 80069f2:	4b47      	ldr	r3, [pc, #284]	; (8006b10 <UART_SetConfig+0x384>)
 80069f4:	fba3 2302 	umull	r2, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	461d      	mov	r5, r3
 8006a02:	f04f 0600 	mov.w	r6, #0
 8006a06:	46a9      	mov	r9, r5
 8006a08:	46b2      	mov	sl, r6
 8006a0a:	eb19 0309 	adds.w	r3, r9, r9
 8006a0e:	eb4a 040a 	adc.w	r4, sl, sl
 8006a12:	4699      	mov	r9, r3
 8006a14:	46a2      	mov	sl, r4
 8006a16:	eb19 0905 	adds.w	r9, r9, r5
 8006a1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a1e:	f04f 0100 	mov.w	r1, #0
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a32:	4689      	mov	r9, r1
 8006a34:	4692      	mov	sl, r2
 8006a36:	eb19 0005 	adds.w	r0, r9, r5
 8006a3a:	eb4a 0106 	adc.w	r1, sl, r6
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	461d      	mov	r5, r3
 8006a44:	f04f 0600 	mov.w	r6, #0
 8006a48:	196b      	adds	r3, r5, r5
 8006a4a:	eb46 0406 	adc.w	r4, r6, r6
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4623      	mov	r3, r4
 8006a52:	f7fa f881 	bl	8000b58 <__aeabi_uldivmod>
 8006a56:	4603      	mov	r3, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	4b2c      	ldr	r3, [pc, #176]	; (8006b10 <UART_SetConfig+0x384>)
 8006a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	2164      	movs	r1, #100	; 0x64
 8006a66:	fb01 f303 	mul.w	r3, r1, r3
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	3332      	adds	r3, #50	; 0x32
 8006a70:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <UART_SetConfig+0x384>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a7e:	4498      	add	r8, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	461d      	mov	r5, r3
 8006a84:	f04f 0600 	mov.w	r6, #0
 8006a88:	46a9      	mov	r9, r5
 8006a8a:	46b2      	mov	sl, r6
 8006a8c:	eb19 0309 	adds.w	r3, r9, r9
 8006a90:	eb4a 040a 	adc.w	r4, sl, sl
 8006a94:	4699      	mov	r9, r3
 8006a96:	46a2      	mov	sl, r4
 8006a98:	eb19 0905 	adds.w	r9, r9, r5
 8006a9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006aa0:	f04f 0100 	mov.w	r1, #0
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ab0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ab4:	4689      	mov	r9, r1
 8006ab6:	4692      	mov	sl, r2
 8006ab8:	eb19 0005 	adds.w	r0, r9, r5
 8006abc:	eb4a 0106 	adc.w	r1, sl, r6
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	f04f 0600 	mov.w	r6, #0
 8006aca:	196b      	adds	r3, r5, r5
 8006acc:	eb46 0406 	adc.w	r4, r6, r6
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	f7fa f840 	bl	8000b58 <__aeabi_uldivmod>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	461a      	mov	r2, r3
 8006ade:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <UART_SetConfig+0x384>)
 8006ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae4:	095b      	lsrs	r3, r3, #5
 8006ae6:	2164      	movs	r1, #100	; 0x64
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	3332      	adds	r3, #50	; 0x32
 8006af2:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <UART_SetConfig+0x384>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	f003 0207 	and.w	r2, r3, #7
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4442      	add	r2, r8
 8006b04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b06:	e1b2      	b.n	8006e6e <UART_SetConfig+0x6e2>
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40011400 	.word	0x40011400
 8006b10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4ad7      	ldr	r2, [pc, #860]	; (8006e78 <UART_SetConfig+0x6ec>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d005      	beq.n	8006b2a <UART_SetConfig+0x39e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4ad6      	ldr	r2, [pc, #856]	; (8006e7c <UART_SetConfig+0x6f0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	f040 80d1 	bne.w	8006ccc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b2a:	f7ff f8e7 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8006b2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	469a      	mov	sl, r3
 8006b34:	f04f 0b00 	mov.w	fp, #0
 8006b38:	46d0      	mov	r8, sl
 8006b3a:	46d9      	mov	r9, fp
 8006b3c:	eb18 0308 	adds.w	r3, r8, r8
 8006b40:	eb49 0409 	adc.w	r4, r9, r9
 8006b44:	4698      	mov	r8, r3
 8006b46:	46a1      	mov	r9, r4
 8006b48:	eb18 080a 	adds.w	r8, r8, sl
 8006b4c:	eb49 090b 	adc.w	r9, r9, fp
 8006b50:	f04f 0100 	mov.w	r1, #0
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b64:	4688      	mov	r8, r1
 8006b66:	4691      	mov	r9, r2
 8006b68:	eb1a 0508 	adds.w	r5, sl, r8
 8006b6c:	eb4b 0609 	adc.w	r6, fp, r9
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4619      	mov	r1, r3
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	f04f 0400 	mov.w	r4, #0
 8006b82:	0094      	lsls	r4, r2, #2
 8006b84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b88:	008b      	lsls	r3, r1, #2
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4623      	mov	r3, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	4631      	mov	r1, r6
 8006b92:	f7f9 ffe1 	bl	8000b58 <__aeabi_uldivmod>
 8006b96:	4603      	mov	r3, r0
 8006b98:	460c      	mov	r4, r1
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4bb8      	ldr	r3, [pc, #736]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	469b      	mov	fp, r3
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	46d9      	mov	r9, fp
 8006bb2:	46e2      	mov	sl, ip
 8006bb4:	eb19 0309 	adds.w	r3, r9, r9
 8006bb8:	eb4a 040a 	adc.w	r4, sl, sl
 8006bbc:	4699      	mov	r9, r3
 8006bbe:	46a2      	mov	sl, r4
 8006bc0:	eb19 090b 	adds.w	r9, r9, fp
 8006bc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bc8:	f04f 0100 	mov.w	r1, #0
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bdc:	4689      	mov	r9, r1
 8006bde:	4692      	mov	sl, r2
 8006be0:	eb1b 0509 	adds.w	r5, fp, r9
 8006be4:	eb4c 060a 	adc.w	r6, ip, sl
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4619      	mov	r1, r3
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	f04f 0400 	mov.w	r4, #0
 8006bfa:	0094      	lsls	r4, r2, #2
 8006bfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c00:	008b      	lsls	r3, r1, #2
 8006c02:	461a      	mov	r2, r3
 8006c04:	4623      	mov	r3, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	4631      	mov	r1, r6
 8006c0a:	f7f9 ffa5 	bl	8000b58 <__aeabi_uldivmod>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	461a      	mov	r2, r3
 8006c14:	4b9a      	ldr	r3, [pc, #616]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006c16:	fba3 1302 	umull	r1, r3, r3, r2
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	2164      	movs	r1, #100	; 0x64
 8006c1e:	fb01 f303 	mul.w	r3, r1, r3
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	3332      	adds	r3, #50	; 0x32
 8006c28:	4a95      	ldr	r2, [pc, #596]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c34:	4498      	add	r8, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	469b      	mov	fp, r3
 8006c3a:	f04f 0c00 	mov.w	ip, #0
 8006c3e:	46d9      	mov	r9, fp
 8006c40:	46e2      	mov	sl, ip
 8006c42:	eb19 0309 	adds.w	r3, r9, r9
 8006c46:	eb4a 040a 	adc.w	r4, sl, sl
 8006c4a:	4699      	mov	r9, r3
 8006c4c:	46a2      	mov	sl, r4
 8006c4e:	eb19 090b 	adds.w	r9, r9, fp
 8006c52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c56:	f04f 0100 	mov.w	r1, #0
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c6a:	4689      	mov	r9, r1
 8006c6c:	4692      	mov	sl, r2
 8006c6e:	eb1b 0509 	adds.w	r5, fp, r9
 8006c72:	eb4c 060a 	adc.w	r6, ip, sl
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	f04f 0400 	mov.w	r4, #0
 8006c88:	0094      	lsls	r4, r2, #2
 8006c8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c8e:	008b      	lsls	r3, r1, #2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4623      	mov	r3, r4
 8006c94:	4628      	mov	r0, r5
 8006c96:	4631      	mov	r1, r6
 8006c98:	f7f9 ff5e 	bl	8000b58 <__aeabi_uldivmod>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b77      	ldr	r3, [pc, #476]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	2164      	movs	r1, #100	; 0x64
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	3332      	adds	r3, #50	; 0x32
 8006cb6:	4a72      	ldr	r2, [pc, #456]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f003 020f 	and.w	r2, r3, #15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4442      	add	r2, r8
 8006cc8:	609a      	str	r2, [r3, #8]
 8006cca:	e0d0      	b.n	8006e6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7ff f802 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	469a      	mov	sl, r3
 8006cd6:	f04f 0b00 	mov.w	fp, #0
 8006cda:	46d0      	mov	r8, sl
 8006cdc:	46d9      	mov	r9, fp
 8006cde:	eb18 0308 	adds.w	r3, r8, r8
 8006ce2:	eb49 0409 	adc.w	r4, r9, r9
 8006ce6:	4698      	mov	r8, r3
 8006ce8:	46a1      	mov	r9, r4
 8006cea:	eb18 080a 	adds.w	r8, r8, sl
 8006cee:	eb49 090b 	adc.w	r9, r9, fp
 8006cf2:	f04f 0100 	mov.w	r1, #0
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d06:	4688      	mov	r8, r1
 8006d08:	4691      	mov	r9, r2
 8006d0a:	eb1a 0508 	adds.w	r5, sl, r8
 8006d0e:	eb4b 0609 	adc.w	r6, fp, r9
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4619      	mov	r1, r3
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	f04f 0400 	mov.w	r4, #0
 8006d24:	0094      	lsls	r4, r2, #2
 8006d26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d2a:	008b      	lsls	r3, r1, #2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4623      	mov	r3, r4
 8006d30:	4628      	mov	r0, r5
 8006d32:	4631      	mov	r1, r6
 8006d34:	f7f9 ff10 	bl	8000b58 <__aeabi_uldivmod>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4b50      	ldr	r3, [pc, #320]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006d40:	fba3 2302 	umull	r2, r3, r3, r2
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	f04f 0c00 	mov.w	ip, #0
 8006d52:	46d9      	mov	r9, fp
 8006d54:	46e2      	mov	sl, ip
 8006d56:	eb19 0309 	adds.w	r3, r9, r9
 8006d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d5e:	4699      	mov	r9, r3
 8006d60:	46a2      	mov	sl, r4
 8006d62:	eb19 090b 	adds.w	r9, r9, fp
 8006d66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d7e:	4689      	mov	r9, r1
 8006d80:	4692      	mov	sl, r2
 8006d82:	eb1b 0509 	adds.w	r5, fp, r9
 8006d86:	eb4c 060a 	adc.w	r6, ip, sl
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	f04f 0400 	mov.w	r4, #0
 8006d9c:	0094      	lsls	r4, r2, #2
 8006d9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006da2:	008b      	lsls	r3, r1, #2
 8006da4:	461a      	mov	r2, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	4631      	mov	r1, r6
 8006dac:	f7f9 fed4 	bl	8000b58 <__aeabi_uldivmod>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	461a      	mov	r2, r3
 8006db6:	4b32      	ldr	r3, [pc, #200]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006db8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	2164      	movs	r1, #100	; 0x64
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	3332      	adds	r3, #50	; 0x32
 8006dca:	4a2d      	ldr	r2, [pc, #180]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd6:	4498      	add	r8, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	469b      	mov	fp, r3
 8006ddc:	f04f 0c00 	mov.w	ip, #0
 8006de0:	46d9      	mov	r9, fp
 8006de2:	46e2      	mov	sl, ip
 8006de4:	eb19 0309 	adds.w	r3, r9, r9
 8006de8:	eb4a 040a 	adc.w	r4, sl, sl
 8006dec:	4699      	mov	r9, r3
 8006dee:	46a2      	mov	sl, r4
 8006df0:	eb19 090b 	adds.w	r9, r9, fp
 8006df4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e0c:	4689      	mov	r9, r1
 8006e0e:	4692      	mov	sl, r2
 8006e10:	eb1b 0509 	adds.w	r5, fp, r9
 8006e14:	eb4c 060a 	adc.w	r6, ip, sl
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	f04f 0400 	mov.w	r4, #0
 8006e2a:	0094      	lsls	r4, r2, #2
 8006e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e30:	008b      	lsls	r3, r1, #2
 8006e32:	461a      	mov	r2, r3
 8006e34:	4623      	mov	r3, r4
 8006e36:	4628      	mov	r0, r5
 8006e38:	4631      	mov	r1, r6
 8006e3a:	f7f9 fe8d 	bl	8000b58 <__aeabi_uldivmod>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	461a      	mov	r2, r3
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006e46:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2164      	movs	r1, #100	; 0x64
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	3332      	adds	r3, #50	; 0x32
 8006e58:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <UART_SetConfig+0x6f4>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4442      	add	r2, r8
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	e7ff      	b.n	8006e6e <UART_SetConfig+0x6e2>
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e78:	40011000 	.word	0x40011000
 8006e7c:	40011400 	.word	0x40011400
 8006e80:	51eb851f 	.word	0x51eb851f

08006e84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e9a:	f3ef 8305 	mrs	r3, IPSR
 8006e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10f      	bne.n	8006ec6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eaa:	607b      	str	r3, [r7, #4]
  return(result);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d105      	bne.n	8006ebe <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <osKernelInitialize+0x3a>
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <osKernelInitialize+0x64>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d103      	bne.n	8006ece <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006ec6:	f06f 0305 	mvn.w	r3, #5
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e00c      	b.n	8006ee8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <osKernelInitialize+0x64>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ed6:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <osKernelInitialize+0x64>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	e002      	b.n	8006ee8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000200 	.word	0x20000200

08006efc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f02:	f3ef 8305 	mrs	r3, IPSR
 8006f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f12:	607b      	str	r3, [r7, #4]
  return(result);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <osKernelStart+0x3a>
 8006f26:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <osKernelStart+0x68>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d103      	bne.n	8006f36 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f2e:	f06f 0305 	mvn.w	r3, #5
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e010      	b.n	8006f58 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <osKernelStart+0x68>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d109      	bne.n	8006f52 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f3e:	f7ff ffa1 	bl	8006e84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f42:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <osKernelStart+0x68>)
 8006f44:	2202      	movs	r2, #2
 8006f46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f48:	f002 f932 	bl	80091b0 <vTaskStartScheduler>
      stat = osOK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e002      	b.n	8006f58 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f58:	68fb      	ldr	r3, [r7, #12]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000200 	.word	0x20000200

08006f68 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8006f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b090      	sub	sp, #64	; 0x40
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f8c:	f3ef 8305 	mrs	r3, IPSR
 8006f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f92:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f040 808f 	bne.w	80070b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8006faa:	617b      	str	r3, [r7, #20]
  return(result);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <osThreadNew+0x3e>
 8006fb2:	4b44      	ldr	r3, [pc, #272]	; (80070c4 <osThreadNew+0x148>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d07e      	beq.n	80070b8 <osThreadNew+0x13c>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d07b      	beq.n	80070b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006fc4:	2318      	movs	r3, #24
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d045      	beq.n	8007064 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <osThreadNew+0x6a>
        name = attr->name;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <osThreadNew+0x90>
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b38      	cmp	r3, #56	; 0x38
 8006ffe:	d805      	bhi.n	800700c <osThreadNew+0x90>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <osThreadNew+0x94>
        return (NULL);
 800700c:	2300      	movs	r3, #0
 800700e:	e054      	b.n	80070ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	089b      	lsrs	r3, r3, #2
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00e      	beq.n	8007046 <osThreadNew+0xca>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b5b      	cmp	r3, #91	; 0x5b
 800702e:	d90a      	bls.n	8007046 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007034:	2b00      	cmp	r3, #0
 8007036:	d006      	beq.n	8007046 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <osThreadNew+0xca>
        mem = 1;
 8007040:	2301      	movs	r3, #1
 8007042:	623b      	str	r3, [r7, #32]
 8007044:	e010      	b.n	8007068 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10c      	bne.n	8007068 <osThreadNew+0xec>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d108      	bne.n	8007068 <osThreadNew+0xec>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <osThreadNew+0xec>
          mem = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	623b      	str	r3, [r7, #32]
 8007062:	e001      	b.n	8007068 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d110      	bne.n	8007090 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f001 fec1 	bl	8008e0c <xTaskCreateStatic>
 800708a:	4603      	mov	r3, r0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	e013      	b.n	80070b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d110      	bne.n	80070b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	b29a      	uxth	r2, r3
 800709a:	f107 0310 	add.w	r3, r7, #16
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f001 ff09 	bl	8008ec0 <xTaskCreate>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d001      	beq.n	80070b8 <osThreadNew+0x13c>
          hTask = NULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070b8:	693b      	ldr	r3, [r7, #16]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3730      	adds	r7, #48	; 0x30
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000200 	.word	0x20000200

080070c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d0:	f3ef 8305 	mrs	r3, IPSR
 80070d4:	613b      	str	r3, [r7, #16]
  return(result);
 80070d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10f      	bne.n	80070fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070dc:	f3ef 8310 	mrs	r3, PRIMASK
 80070e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d105      	bne.n	80070f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e8:	f3ef 8311 	mrs	r3, BASEPRI
 80070ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <osDelay+0x3c>
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <osDelay+0x58>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d103      	bne.n	8007104 <osDelay+0x3c>
    stat = osErrorISR;
 80070fc:	f06f 0305 	mvn.w	r3, #5
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e007      	b.n	8007114 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <osDelay+0x4c>
      vTaskDelay(ticks);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f002 f81a 	bl	8009148 <vTaskDelay>
    }
  }

  return (stat);
 8007114:	697b      	ldr	r3, [r7, #20]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000200 	.word	0x20000200

08007124 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f003 fa3d 	bl	800a5ac <pvTimerGetTimerID>
 8007132:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <TimerCallback+0x22>
    callb->func (callb->arg);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	6852      	ldr	r2, [r2, #4]
 8007142:	4610      	mov	r0, r2
 8007144:	4798      	blx	r3
  }
}
 8007146:	bf00      	nop
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b08e      	sub	sp, #56	; 0x38
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	607a      	str	r2, [r7, #4]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	460b      	mov	r3, r1
 800715e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007164:	f3ef 8305 	mrs	r3, IPSR
 8007168:	61bb      	str	r3, [r7, #24]
  return(result);
 800716a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800716c:	2b00      	cmp	r3, #0
 800716e:	d16a      	bne.n	8007246 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007170:	f3ef 8310 	mrs	r3, PRIMASK
 8007174:	617b      	str	r3, [r7, #20]
  return(result);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d105      	bne.n	8007188 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800717c:	f3ef 8311 	mrs	r3, BASEPRI
 8007180:	613b      	str	r3, [r7, #16]
  return(result);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <osTimerNew+0x40>
 8007188:	4b31      	ldr	r3, [pc, #196]	; (8007250 <osTimerNew+0x100>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d05a      	beq.n	8007246 <osTimerNew+0xf6>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d057      	beq.n	8007246 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007196:	2008      	movs	r0, #8
 8007198:	f003 fc6a 	bl	800aa70 <pvPortMalloc>
 800719c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d050      	beq.n	8007246 <osTimerNew+0xf6>
      callb->func = func;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <osTimerNew+0x6c>
        reload = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ba:	e001      	b.n	80071c0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295
 80071c4:	623b      	str	r3, [r7, #32]
      name = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01c      	beq.n	800720a <osTimerNew+0xba>
        if (attr->name != NULL) {
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <osTimerNew+0x8e>
          name = attr->name;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d006      	beq.n	80071f4 <osTimerNew+0xa4>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	2b2b      	cmp	r3, #43	; 0x2b
 80071ec:	d902      	bls.n	80071f4 <osTimerNew+0xa4>
          mem = 1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	623b      	str	r3, [r7, #32]
 80071f2:	e00c      	b.n	800720e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <osTimerNew+0xbe>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <osTimerNew+0xbe>
            mem = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	623b      	str	r3, [r7, #32]
 8007208:	e001      	b.n	800720e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d10c      	bne.n	800722e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <osTimerNew+0x104>)
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	2101      	movs	r1, #1
 8007224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007226:	f002 fe4c 	bl	8009ec2 <xTimerCreateStatic>
 800722a:	62b8      	str	r0, [r7, #40]	; 0x28
 800722c:	e00b      	b.n	8007246 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d108      	bne.n	8007246 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <osTimerNew+0x104>)
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723c:	2101      	movs	r1, #1
 800723e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007240:	f002 fe1e 	bl	8009e80 <xTimerCreate>
 8007244:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007248:	4618      	mov	r0, r3
 800724a:	3730      	adds	r7, #48	; 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000200 	.word	0x20000200
 8007254:	08007125 	.word	0x08007125

08007258 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af02      	add	r7, sp, #8
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007266:	f3ef 8305 	mrs	r3, IPSR
 800726a:	617b      	str	r3, [r7, #20]
  return(result);
 800726c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10f      	bne.n	8007292 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007272:	f3ef 8310 	mrs	r3, PRIMASK
 8007276:	613b      	str	r3, [r7, #16]
  return(result);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800727e:	f3ef 8311 	mrs	r3, BASEPRI
 8007282:	60fb      	str	r3, [r7, #12]
  return(result);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <osTimerStart+0x42>
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <osTimerStart+0x7c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d103      	bne.n	800729a <osTimerStart+0x42>
    stat = osErrorISR;
 8007292:	f06f 0305 	mvn.w	r3, #5
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e017      	b.n	80072ca <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <osTimerStart+0x50>
    stat = osErrorParameter;
 80072a0:	f06f 0303 	mvn.w	r3, #3
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e010      	b.n	80072ca <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80072a8:	2300      	movs	r3, #0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	2104      	movs	r1, #4
 80072b2:	69b8      	ldr	r0, [r7, #24]
 80072b4:	f002 fe7c 	bl	8009fb0 <xTimerGenericCommand>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d102      	bne.n	80072c4 <osTimerStart+0x6c>
      stat = osOK;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e002      	b.n	80072ca <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80072c4:	f06f 0302 	mvn.w	r3, #2
 80072c8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80072ca:	69fb      	ldr	r3, [r7, #28]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000200 	.word	0x20000200

080072d8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e4:	f3ef 8305 	mrs	r3, IPSR
 80072e8:	613b      	str	r3, [r7, #16]
  return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8085 	bne.w	80073fc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f2:	f3ef 8310 	mrs	r3, PRIMASK
 80072f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007302:	60bb      	str	r3, [r7, #8]
  return(result);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <osMutexNew+0x3a>
 800730a:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <osMutexNew+0x130>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d074      	beq.n	80073fc <osMutexNew+0x124>
    if (attr != NULL) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	e001      	b.n	8007324 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <osMutexNew+0x5c>
      rmtx = 1U;
 800732e:	2301      	movs	r3, #1
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	e001      	b.n	8007338 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d15c      	bne.n	80073fc <osMutexNew+0x124>
      mem = -1;
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d015      	beq.n	800737a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <osMutexNew+0x8c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b4f      	cmp	r3, #79	; 0x4f
 800735c:	d902      	bls.n	8007364 <osMutexNew+0x8c>
          mem = 1;
 800735e:	2301      	movs	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e00c      	b.n	800737e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d108      	bne.n	800737e <osMutexNew+0xa6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <osMutexNew+0xa6>
            mem = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	e001      	b.n	800737e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d112      	bne.n	80073aa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	4619      	mov	r1, r3
 8007390:	2004      	movs	r0, #4
 8007392:	f000 fe08 	bl	8007fa6 <xQueueCreateMutexStatic>
 8007396:	6278      	str	r0, [r7, #36]	; 0x24
 8007398:	e016      	b.n	80073c8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4619      	mov	r1, r3
 80073a0:	2001      	movs	r0, #1
 80073a2:	f000 fe00 	bl	8007fa6 <xQueueCreateMutexStatic>
 80073a6:	6278      	str	r0, [r7, #36]	; 0x24
 80073a8:	e00e      	b.n	80073c8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80073b6:	2004      	movs	r0, #4
 80073b8:	f000 fddd 	bl	8007f76 <xQueueCreateMutex>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24
 80073be:	e003      	b.n	80073c8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80073c0:	2001      	movs	r0, #1
 80073c2:	f000 fdd8 	bl	8007f76 <xQueueCreateMutex>
 80073c6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <osMutexNew+0x110>
        if (attr != NULL) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <osMutexNew+0x104>
          name = attr->name;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	e001      	b.n	80073e0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80073e0:	6979      	ldr	r1, [r7, #20]
 80073e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073e4:	f001 fc8c 	bl	8008d00 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <osMutexNew+0x124>
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3728      	adds	r7, #40	; 0x28
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000200 	.word	0x20000200

0800740c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742a:	f3ef 8305 	mrs	r3, IPSR
 800742e:	613b      	str	r3, [r7, #16]
  return(result);
 8007430:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10f      	bne.n	8007456 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007436:	f3ef 8310 	mrs	r3, PRIMASK
 800743a:	60fb      	str	r3, [r7, #12]
  return(result);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007442:	f3ef 8311 	mrs	r3, BASEPRI
 8007446:	60bb      	str	r3, [r7, #8]
  return(result);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <osMutexAcquire+0x52>
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <osMutexAcquire+0xb8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d103      	bne.n	800745e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007456:	f06f 0305 	mvn.w	r3, #5
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e02c      	b.n	80074b8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007464:	f06f 0303 	mvn.w	r3, #3
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e025      	b.n	80074b8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d011      	beq.n	8007496 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	69b8      	ldr	r0, [r7, #24]
 8007476:	f000 fde4 	bl	8008042 <xQueueTakeMutexRecursive>
 800747a:	4603      	mov	r3, r0
 800747c:	2b01      	cmp	r3, #1
 800747e:	d01b      	beq.n	80074b8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007486:	f06f 0301 	mvn.w	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e014      	b.n	80074b8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800748e:	f06f 0302 	mvn.w	r3, #2
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e010      	b.n	80074b8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	69b8      	ldr	r0, [r7, #24]
 800749a:	f001 f961 	bl	8008760 <xQueueSemaphoreTake>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d009      	beq.n	80074b8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80074aa:	f06f 0301 	mvn.w	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	e002      	b.n	80074b8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80074b2:	f06f 0302 	mvn.w	r3, #2
 80074b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80074b8:	69fb      	ldr	r3, [r7, #28]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20000200 	.word	0x20000200

080074c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e4:	f3ef 8305 	mrs	r3, IPSR
 80074e8:	613b      	str	r3, [r7, #16]
  return(result);
 80074ea:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f0:	f3ef 8310 	mrs	r3, PRIMASK
 80074f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007500:	60bb      	str	r3, [r7, #8]
  return(result);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <osMutexRelease+0x50>
 8007508:	4b16      	ldr	r3, [pc, #88]	; (8007564 <osMutexRelease+0x9c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d103      	bne.n	8007518 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007510:	f06f 0305 	mvn.w	r3, #5
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e01f      	b.n	8007558 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800751e:	f06f 0303 	mvn.w	r3, #3
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e018      	b.n	8007558 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800752c:	69b8      	ldr	r0, [r7, #24]
 800752e:	f000 fd55 	bl	8007fdc <xQueueGiveMutexRecursive>
 8007532:	4603      	mov	r3, r0
 8007534:	2b01      	cmp	r3, #1
 8007536:	d00f      	beq.n	8007558 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007538:	f06f 0302 	mvn.w	r3, #2
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e00b      	b.n	8007558 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007540:	2300      	movs	r3, #0
 8007542:	2200      	movs	r2, #0
 8007544:	2100      	movs	r1, #0
 8007546:	69b8      	ldr	r0, [r7, #24]
 8007548:	f000 fe16 	bl	8008178 <xQueueGenericSend>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d002      	beq.n	8007558 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007552:	f06f 0302 	mvn.w	r3, #2
 8007556:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007558:	69fb      	ldr	r3, [r7, #28]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000200 	.word	0x20000200

08007568 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007568:	b580      	push	{r7, lr}
 800756a:	b08c      	sub	sp, #48	; 0x30
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007578:	f3ef 8305 	mrs	r3, IPSR
 800757c:	61bb      	str	r3, [r7, #24]
  return(result);
 800757e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 8087 	bne.w	8007694 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007586:	f3ef 8310 	mrs	r3, PRIMASK
 800758a:	617b      	str	r3, [r7, #20]
  return(result);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007592:	f3ef 8311 	mrs	r3, BASEPRI
 8007596:	613b      	str	r3, [r7, #16]
  return(result);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <osSemaphoreNew+0x3e>
 800759e:	4b40      	ldr	r3, [pc, #256]	; (80076a0 <osSemaphoreNew+0x138>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d076      	beq.n	8007694 <osSemaphoreNew+0x12c>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d073      	beq.n	8007694 <osSemaphoreNew+0x12c>
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d86f      	bhi.n	8007694 <osSemaphoreNew+0x12c>
    mem = -1;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295
 80075b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d015      	beq.n	80075ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d006      	beq.n	80075d6 <osSemaphoreNew+0x6e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b4f      	cmp	r3, #79	; 0x4f
 80075ce:	d902      	bls.n	80075d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80075d0:	2301      	movs	r3, #1
 80075d2:	623b      	str	r3, [r7, #32]
 80075d4:	e00c      	b.n	80075f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d108      	bne.n	80075f0 <osSemaphoreNew+0x88>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <osSemaphoreNew+0x88>
          mem = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	e001      	b.n	80075f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d04d      	beq.n	8007694 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d129      	bne.n	8007652 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d10b      	bne.n	800761c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	2303      	movs	r3, #3
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	2001      	movs	r0, #1
 8007614:	f000 fbc0 	bl	8007d98 <xQueueGenericCreateStatic>
 8007618:	6278      	str	r0, [r7, #36]	; 0x24
 800761a:	e005      	b.n	8007628 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800761c:	2203      	movs	r2, #3
 800761e:	2100      	movs	r1, #0
 8007620:	2001      	movs	r0, #1
 8007622:	f000 fc2c 	bl	8007e7e <xQueueGenericCreate>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d022      	beq.n	8007674 <osSemaphoreNew+0x10c>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01f      	beq.n	8007674 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007634:	2300      	movs	r3, #0
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800763c:	f000 fd9c 	bl	8008178 <xQueueGenericSend>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d016      	beq.n	8007674 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8007646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007648:	f001 fa0f 	bl	8008a6a <vQueueDelete>
            hSemaphore = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
 8007650:	e010      	b.n	8007674 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d108      	bne.n	800766a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	461a      	mov	r2, r3
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fd23 	bl	80080ac <xQueueCreateCountingSemaphoreStatic>
 8007666:	6278      	str	r0, [r7, #36]	; 0x24
 8007668:	e004      	b.n	8007674 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fd52 	bl	8008116 <xQueueCreateCountingSemaphore>
 8007672:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <osSemaphoreNew+0x120>
          name = attr->name;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e001      	b.n	800768c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800768c:	69f9      	ldr	r1, [r7, #28]
 800768e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007690:	f001 fb36 	bl	8008d00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007696:	4618      	mov	r0, r3
 8007698:	3728      	adds	r7, #40	; 0x28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000200 	.word	0x20000200

080076a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d103      	bne.n	80076c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80076bc:	f06f 0303 	mvn.w	r3, #3
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	e04b      	b.n	800775c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c4:	f3ef 8305 	mrs	r3, IPSR
 80076c8:	617b      	str	r3, [r7, #20]
  return(result);
 80076ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10f      	bne.n	80076f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d0:	f3ef 8310 	mrs	r3, PRIMASK
 80076d4:	613b      	str	r3, [r7, #16]
  return(result);
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076dc:	f3ef 8311 	mrs	r3, BASEPRI
 80076e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d026      	beq.n	8007736 <osSemaphoreAcquire+0x92>
 80076e8:	4b1f      	ldr	r3, [pc, #124]	; (8007768 <osSemaphoreAcquire+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d122      	bne.n	8007736 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80076f6:	f06f 0303 	mvn.w	r3, #3
 80076fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80076fc:	e02d      	b.n	800775a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	461a      	mov	r2, r3
 8007708:	2100      	movs	r1, #0
 800770a:	69b8      	ldr	r0, [r7, #24]
 800770c:	f001 f930 	bl	8008970 <xQueueReceiveFromISR>
 8007710:	4603      	mov	r3, r0
 8007712:	2b01      	cmp	r3, #1
 8007714:	d003      	beq.n	800771e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007716:	f06f 0302 	mvn.w	r3, #2
 800771a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800771c:	e01d      	b.n	800775a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01a      	beq.n	800775a <osSemaphoreAcquire+0xb6>
 8007724:	4b11      	ldr	r3, [pc, #68]	; (800776c <osSemaphoreAcquire+0xc8>)
 8007726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007734:	e011      	b.n	800775a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	69b8      	ldr	r0, [r7, #24]
 800773a:	f001 f811 	bl	8008760 <xQueueSemaphoreTake>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d00b      	beq.n	800775c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800774a:	f06f 0301 	mvn.w	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e004      	b.n	800775c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007752:	f06f 0302 	mvn.w	r3, #2
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	e000      	b.n	800775c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800775a:	bf00      	nop
      }
    }
  }

  return (stat);
 800775c:	69fb      	ldr	r3, [r7, #28]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000200 	.word	0x20000200
 800776c:	e000ed04 	.word	0xe000ed04

08007770 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007786:	f06f 0303 	mvn.w	r3, #3
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e03e      	b.n	800780c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800778e:	f3ef 8305 	mrs	r3, IPSR
 8007792:	617b      	str	r3, [r7, #20]
  return(result);
 8007794:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10f      	bne.n	80077ba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	613b      	str	r3, [r7, #16]
  return(result);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077a6:	f3ef 8311 	mrs	r3, BASEPRI
 80077aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01e      	beq.n	80077f0 <osSemaphoreRelease+0x80>
 80077b2:	4b19      	ldr	r3, [pc, #100]	; (8007818 <osSemaphoreRelease+0xa8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d11a      	bne.n	80077f0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	4619      	mov	r1, r3
 80077c4:	69b8      	ldr	r0, [r7, #24]
 80077c6:	f000 fe65 	bl	8008494 <xQueueGiveFromISR>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d003      	beq.n	80077d8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80077d0:	f06f 0302 	mvn.w	r3, #2
 80077d4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077d6:	e018      	b.n	800780a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <osSemaphoreRelease+0x9a>
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <osSemaphoreRelease+0xac>)
 80077e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077ee:	e00c      	b.n	800780a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80077f0:	2300      	movs	r3, #0
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	69b8      	ldr	r0, [r7, #24]
 80077f8:	f000 fcbe 	bl	8008178 <xQueueGenericSend>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d004      	beq.n	800780c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007802:	f06f 0302 	mvn.w	r3, #2
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e000      	b.n	800780c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800780a:	bf00      	nop
    }
  }

  return (stat);
 800780c:	69fb      	ldr	r3, [r7, #28]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000200 	.word	0x20000200
 800781c:	e000ed04 	.word	0xe000ed04

08007820 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007830:	f3ef 8305 	mrs	r3, IPSR
 8007834:	61bb      	str	r3, [r7, #24]
  return(result);
 8007836:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007838:	2b00      	cmp	r3, #0
 800783a:	d170      	bne.n	800791e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800783c:	f3ef 8310 	mrs	r3, PRIMASK
 8007840:	617b      	str	r3, [r7, #20]
  return(result);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007848:	f3ef 8311 	mrs	r3, BASEPRI
 800784c:	613b      	str	r3, [r7, #16]
  return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <osMessageQueueNew+0x3c>
 8007854:	4b34      	ldr	r3, [pc, #208]	; (8007928 <osMessageQueueNew+0x108>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d060      	beq.n	800791e <osMessageQueueNew+0xfe>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d05d      	beq.n	800791e <osMessageQueueNew+0xfe>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d05a      	beq.n	800791e <osMessageQueueNew+0xfe>
    mem = -1;
 8007868:	f04f 33ff 	mov.w	r3, #4294967295
 800786c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d029      	beq.n	80078c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d012      	beq.n	80078a2 <osMessageQueueNew+0x82>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b4f      	cmp	r3, #79	; 0x4f
 8007882:	d90e      	bls.n	80078a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695a      	ldr	r2, [r3, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	fb01 f303 	mul.w	r3, r1, r3
 8007898:	429a      	cmp	r2, r3
 800789a:	d302      	bcc.n	80078a2 <osMessageQueueNew+0x82>
        mem = 1;
 800789c:	2301      	movs	r3, #1
 800789e:	623b      	str	r3, [r7, #32]
 80078a0:	e014      	b.n	80078cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d110      	bne.n	80078cc <osMessageQueueNew+0xac>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10c      	bne.n	80078cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d108      	bne.n	80078cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <osMessageQueueNew+0xac>
          mem = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	623b      	str	r3, [r7, #32]
 80078c6:	e001      	b.n	80078cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d10c      	bne.n	80078ec <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6899      	ldr	r1, [r3, #8]
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	460b      	mov	r3, r1
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fa58 	bl	8007d98 <xQueueGenericCreateStatic>
 80078e8:	6278      	str	r0, [r7, #36]	; 0x24
 80078ea:	e008      	b.n	80078fe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80078f2:	2200      	movs	r2, #0
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fac1 	bl	8007e7e <xQueueGenericCreate>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00c      	beq.n	800791e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <osMessageQueueNew+0xf2>
        name = attr->name;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	e001      	b.n	8007916 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007916:	69f9      	ldr	r1, [r7, #28]
 8007918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800791a:	f001 f9f1 	bl	8008d00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007920:	4618      	mov	r0, r3
 8007922:	3728      	adds	r7, #40	; 0x28
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20000200 	.word	0x20000200

0800792c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007940:	2300      	movs	r3, #0
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007944:	f3ef 8305 	mrs	r3, IPSR
 8007948:	61fb      	str	r3, [r7, #28]
  return(result);
 800794a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10f      	bne.n	8007970 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007950:	f3ef 8310 	mrs	r3, PRIMASK
 8007954:	61bb      	str	r3, [r7, #24]
  return(result);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800795c:	f3ef 8311 	mrs	r3, BASEPRI
 8007960:	617b      	str	r3, [r7, #20]
  return(result);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d02c      	beq.n	80079c2 <osMessageQueuePut+0x96>
 8007968:	4b28      	ldr	r3, [pc, #160]	; (8007a0c <osMessageQueuePut+0xe0>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d128      	bne.n	80079c2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d005      	beq.n	8007982 <osMessageQueuePut+0x56>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <osMessageQueuePut+0x56>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007982:	f06f 0303 	mvn.w	r3, #3
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007988:	e039      	b.n	80079fe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800798e:	f107 0210 	add.w	r2, r7, #16
 8007992:	2300      	movs	r3, #0
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	6a38      	ldr	r0, [r7, #32]
 8007998:	f000 fce8 	bl	800836c <xQueueGenericSendFromISR>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d003      	beq.n	80079aa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80079a2:	f06f 0302 	mvn.w	r3, #2
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079a8:	e029      	b.n	80079fe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d026      	beq.n	80079fe <osMessageQueuePut+0xd2>
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <osMessageQueuePut+0xe4>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079c0:	e01d      	b.n	80079fe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <osMessageQueuePut+0xa2>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d103      	bne.n	80079d6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80079ce:	f06f 0303 	mvn.w	r3, #3
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
 80079d4:	e014      	b.n	8007a00 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079d6:	2300      	movs	r3, #0
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	6a38      	ldr	r0, [r7, #32]
 80079de:	f000 fbcb 	bl	8008178 <xQueueGenericSend>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d00b      	beq.n	8007a00 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80079ee:	f06f 0301 	mvn.w	r3, #1
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
 80079f4:	e004      	b.n	8007a00 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80079f6:	f06f 0302 	mvn.w	r3, #2
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
 80079fc:	e000      	b.n	8007a00 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3728      	adds	r7, #40	; 0x28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000200 	.word	0x20000200
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a2a:	f3ef 8305 	mrs	r3, IPSR
 8007a2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a30:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a36:	f3ef 8310 	mrs	r3, PRIMASK
 8007a3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a42:	f3ef 8311 	mrs	r3, BASEPRI
 8007a46:	617b      	str	r3, [r7, #20]
  return(result);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d02c      	beq.n	8007aa8 <osMessageQueueGet+0x94>
 8007a4e:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <osMessageQueueGet+0xdc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d128      	bne.n	8007aa8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <osMessageQueueGet+0x54>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <osMessageQueueGet+0x54>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007a68:	f06f 0303 	mvn.w	r3, #3
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a6e:	e038      	b.n	8007ae2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	461a      	mov	r2, r3
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	6a38      	ldr	r0, [r7, #32]
 8007a7e:	f000 ff77 	bl	8008970 <xQueueReceiveFromISR>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d003      	beq.n	8007a90 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007a88:	f06f 0302 	mvn.w	r3, #2
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a8e:	e028      	b.n	8007ae2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d025      	beq.n	8007ae2 <osMessageQueueGet+0xce>
 8007a96:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <osMessageQueueGet+0xe0>)
 8007a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007aa6:	e01c      	b.n	8007ae2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <osMessageQueueGet+0xa0>
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007ab4:	f06f 0303 	mvn.w	r3, #3
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aba:	e013      	b.n	8007ae4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	6a38      	ldr	r0, [r7, #32]
 8007ac2:	f000 fd71 	bl	80085a8 <xQueueReceive>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d00b      	beq.n	8007ae4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007ad2:	f06f 0301 	mvn.w	r3, #1
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad8:	e004      	b.n	8007ae4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007ada:	f06f 0302 	mvn.w	r3, #2
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae0:	e000      	b.n	8007ae4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ae2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3728      	adds	r7, #40	; 0x28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000200 	.word	0x20000200
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4a07      	ldr	r2, [pc, #28]	; (8007b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	4a06      	ldr	r2, [pc, #24]	; (8007b28 <vApplicationGetIdleTaskMemory+0x30>)
 8007b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2280      	movs	r2, #128	; 0x80
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000204 	.word	0x20000204
 8007b28:	20000260 	.word	0x20000260

08007b2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4a07      	ldr	r2, [pc, #28]	; (8007b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4a06      	ldr	r2, [pc, #24]	; (8007b5c <vApplicationGetTimerTaskMemory+0x30>)
 8007b42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b4a:	601a      	str	r2, [r3, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000460 	.word	0x20000460
 8007b5c:	200004bc 	.word	0x200004bc

08007b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f103 0208 	add.w	r2, r3, #8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f04f 32ff 	mov.w	r2, #4294967295
 8007b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f103 0208 	add.w	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f103 0208 	add.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d103      	bne.n	8007c22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	e00c      	b.n	8007c3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3308      	adds	r3, #8
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e002      	b.n	8007c30 <vListInsert+0x2e>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d2f6      	bcs.n	8007c2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6892      	ldr	r2, [r2, #8]
 8007c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6852      	ldr	r2, [r2, #4]
 8007c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d103      	bne.n	8007ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	1e5a      	subs	r2, r3, #1
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d109      	bne.n	8007cf0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	e7fe      	b.n	8007cee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007cf0:	f002 fda4 	bl	800a83c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	68f9      	ldr	r1, [r7, #12]
 8007cfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	441a      	add	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	3b01      	subs	r3, #1
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d26:	fb01 f303 	mul.w	r3, r1, r3
 8007d2a:	441a      	add	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22ff      	movs	r2, #255	; 0xff
 8007d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	22ff      	movs	r2, #255	; 0xff
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d114      	bne.n	8007d70 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01a      	beq.n	8007d84 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3310      	adds	r3, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 fcac 	bl	80096b0 <xTaskRemoveFromEventList>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d012      	beq.n	8007d84 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <xQueueGenericReset+0xcc>)
 8007d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	e009      	b.n	8007d84 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3310      	adds	r3, #16
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fef3 	bl	8007b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3324      	adds	r3, #36	; 0x24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff feee 	bl	8007b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d84:	f002 fd88 	bl	800a898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d88:	2301      	movs	r3, #1
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	; 0x38
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <xQueueGenericCreateStatic+0x28>
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dbe:	e7fe      	b.n	8007dbe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <xQueueGenericCreateStatic+0x42>
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <xQueueGenericCreateStatic+0x4e>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <xQueueGenericCreateStatic+0x52>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <xQueueGenericCreateStatic+0x54>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <xQueueGenericCreateStatic+0x6c>
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	e7fe      	b.n	8007e02 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <xQueueGenericCreateStatic+0x78>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <xQueueGenericCreateStatic+0x7c>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <xQueueGenericCreateStatic+0x7e>
 8007e14:	2300      	movs	r3, #0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <xQueueGenericCreateStatic+0x96>
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	e7fe      	b.n	8007e2c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e2e:	2350      	movs	r3, #80	; 0x50
 8007e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b50      	cmp	r3, #80	; 0x50
 8007e36:	d009      	beq.n	8007e4c <xQueueGenericCreateStatic+0xb4>
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	e7fe      	b.n	8007e4a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00d      	beq.n	8007e74 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e60:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f844 	bl	8007efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3730      	adds	r7, #48	; 0x30
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b08a      	sub	sp, #40	; 0x28
 8007e82:	af02      	add	r7, sp, #8
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <xQueueGenericCreate+0x28>
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	613b      	str	r3, [r7, #16]
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e004      	b.n	8007ebc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	3350      	adds	r3, #80	; 0x50
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f002 fdd5 	bl	800aa70 <pvPortMalloc>
 8007ec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d011      	beq.n	8007ef2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	3350      	adds	r3, #80	; 0x50
 8007ed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ee0:	79fa      	ldrb	r2, [r7, #7]
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f805 	bl	8007efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	69b8      	ldr	r0, [r7, #24]
 8007f2e:	f7ff fecb 	bl	8007cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00e      	beq.n	8007f6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f62:	2300      	movs	r3, #0
 8007f64:	2200      	movs	r2, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f905 	bl	8008178 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	2300      	movs	r3, #0
 8007f86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6939      	ldr	r1, [r7, #16]
 8007f8e:	6978      	ldr	r0, [r7, #20]
 8007f90:	f7ff ff75 	bl	8007e7e <xQueueGenericCreate>
 8007f94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff ffd3 	bl	8007f42 <prvInitialiseMutex>

		return xNewQueue;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
	}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b088      	sub	sp, #32
 8007faa:	af02      	add	r7, sp, #8
 8007fac:	4603      	mov	r3, r0
 8007fae:	6039      	str	r1, [r7, #0]
 8007fb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	6939      	ldr	r1, [r7, #16]
 8007fc4:	6978      	ldr	r0, [r7, #20]
 8007fc6:	f7ff fee7 	bl	8007d98 <xQueueGenericCreateStatic>
 8007fca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ffb8 	bl	8007f42 <prvInitialiseMutex>

		return xNewQueue;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
	}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <xQueueGiveMutexRecursive+0x26>
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e7fe      	b.n	8008000 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	689c      	ldr	r4, [r3, #8]
 8008006:	f001 fd09 	bl	8009a1c <xTaskGetCurrentTaskHandle>
 800800a:	4603      	mov	r3, r0
 800800c:	429c      	cmp	r4, r3
 800800e:	d111      	bne.n	8008034 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6938      	ldr	r0, [r7, #16]
 800802a:	f000 f8a5 	bl	8008178 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800802e:	2301      	movs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	e001      	b.n	8008038 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008038:	697b      	ldr	r3, [r7, #20]
	}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd90      	pop	{r4, r7, pc}

08008042 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008042:	b590      	push	{r4, r7, lr}
 8008044:	b087      	sub	sp, #28
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <xQueueTakeMutexRecursive+0x28>
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e7fe      	b.n	8008068 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	689c      	ldr	r4, [r3, #8]
 800806e:	f001 fcd5 	bl	8009a1c <xTaskGetCurrentTaskHandle>
 8008072:	4603      	mov	r3, r0
 8008074:	429c      	cmp	r4, r3
 8008076:	d107      	bne.n	8008088 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008082:	2301      	movs	r3, #1
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e00c      	b.n	80080a2 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6938      	ldr	r0, [r7, #16]
 800808c:	f000 fb68 	bl	8008760 <xQueueSemaphoreTake>
 8008090:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80080a2:	697b      	ldr	r3, [r7, #20]
	}
 80080a4:	4618      	mov	r0, r3
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd90      	pop	{r4, r7, pc}

080080ac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <xQueueCreateCountingSemaphoreStatic+0x26>
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e7fe      	b.n	80080d0 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d909      	bls.n	80080ee <xQueueCreateCountingSemaphoreStatic+0x42>
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	e7fe      	b.n	80080ec <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080ee:	2302      	movs	r3, #2
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff fe4d 	bl	8007d98 <xQueueGenericCreateStatic>
 80080fe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800810c:	69fb      	ldr	r3, [r7, #28]
	}
 800810e:	4618      	mov	r0, r3
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <xQueueCreateCountingSemaphore+0x24>
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	e7fe      	b.n	8008138 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	429a      	cmp	r2, r3
 8008140:	d909      	bls.n	8008156 <xQueueCreateCountingSemaphore+0x40>
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e7fe      	b.n	8008154 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008156:	2202      	movs	r2, #2
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fe8f 	bl	8007e7e <xQueueGenericCreate>
 8008160:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800816e:	697b      	ldr	r3, [r7, #20]
	}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	; 0x38
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008186:	2300      	movs	r3, #0
 8008188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <xQueueGenericSend+0x30>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a6:	e7fe      	b.n	80081a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <xQueueGenericSend+0x3e>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <xQueueGenericSend+0x42>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericSend+0x44>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d109      	bne.n	80081d4 <xQueueGenericSend+0x5c>
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
 80081d2:	e7fe      	b.n	80081d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d103      	bne.n	80081e2 <xQueueGenericSend+0x6a>
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <xQueueGenericSend+0x6e>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <xQueueGenericSend+0x70>
 80081e6:	2300      	movs	r3, #0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <xQueueGenericSend+0x88>
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	623b      	str	r3, [r7, #32]
 80081fe:	e7fe      	b.n	80081fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008200:	f001 fc1c 	bl	8009a3c <xTaskGetSchedulerState>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <xQueueGenericSend+0x98>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <xQueueGenericSend+0x9c>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <xQueueGenericSend+0x9e>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <xQueueGenericSend+0xb6>
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	e7fe      	b.n	800822c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800822e:	f002 fb05 	bl	800a83c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	429a      	cmp	r2, r3
 800823c:	d302      	bcc.n	8008244 <xQueueGenericSend+0xcc>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d129      	bne.n	8008298 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800824a:	f000 fc48 	bl	8008ade <prvCopyDataToQueue>
 800824e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	d010      	beq.n	800827a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	3324      	adds	r3, #36	; 0x24
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fa27 	bl	80096b0 <xTaskRemoveFromEventList>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d013      	beq.n	8008290 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008268:	4b3f      	ldr	r3, [pc, #252]	; (8008368 <xQueueGenericSend+0x1f0>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	e00a      	b.n	8008290 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008280:	4b39      	ldr	r3, [pc, #228]	; (8008368 <xQueueGenericSend+0x1f0>)
 8008282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008290:	f002 fb02 	bl	800a898 <vPortExitCritical>
				return pdPASS;
 8008294:	2301      	movs	r3, #1
 8008296:	e063      	b.n	8008360 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d103      	bne.n	80082a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800829e:	f002 fafb 	bl	800a898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e05c      	b.n	8008360 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d106      	bne.n	80082ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ac:	f107 0314 	add.w	r3, r7, #20
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fa5f 	bl	8009774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082b6:	2301      	movs	r3, #1
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ba:	f002 faed 	bl	800a898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082be:	f000 ffdb 	bl	8009278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082c2:	f002 fabb 	bl	800a83c <vPortEnterCritical>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082cc:	b25b      	sxtb	r3, r3
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d103      	bne.n	80082dc <xQueueGenericSend+0x164>
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e2:	b25b      	sxtb	r3, r3
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d103      	bne.n	80082f2 <xQueueGenericSend+0x17a>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082f2:	f002 fad1 	bl	800a898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082f6:	1d3a      	adds	r2, r7, #4
 80082f8:	f107 0314 	add.w	r3, r7, #20
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 fa4e 	bl	80097a0 <xTaskCheckForTimeOut>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d124      	bne.n	8008354 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800830a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800830c:	f000 fcdf 	bl	8008cce <prvIsQueueFull>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d018      	beq.n	8008348 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	3310      	adds	r3, #16
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4611      	mov	r1, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f001 f978 	bl	8009614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008326:	f000 fc6a 	bl	8008bfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800832a:	f000 ffb3 	bl	8009294 <xTaskResumeAll>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	f47f af7c 	bne.w	800822e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <xQueueGenericSend+0x1f0>)
 8008338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	e772      	b.n	800822e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800834a:	f000 fc58 	bl	8008bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800834e:	f000 ffa1 	bl	8009294 <xTaskResumeAll>
 8008352:	e76c      	b.n	800822e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008356:	f000 fc52 	bl	8008bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800835a:	f000 ff9b 	bl	8009294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800835e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008360:	4618      	mov	r0, r3
 8008362:	3738      	adds	r7, #56	; 0x38
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	; 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <xQueueGenericSendFromISR+0x2c>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
 8008396:	e7fe      	b.n	8008396 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <xQueueGenericSendFromISR+0x3a>
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <xQueueGenericSendFromISR+0x3e>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <xQueueGenericSendFromISR+0x40>
 80083aa:	2300      	movs	r3, #0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <xQueueGenericSendFromISR+0x58>
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	623b      	str	r3, [r7, #32]
 80083c2:	e7fe      	b.n	80083c2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d103      	bne.n	80083d2 <xQueueGenericSendFromISR+0x66>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <xQueueGenericSendFromISR+0x6a>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <xQueueGenericSendFromISR+0x6c>
 80083d6:	2300      	movs	r3, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <xQueueGenericSendFromISR+0x84>
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	e7fe      	b.n	80083ee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083f0:	f002 fb00 	bl	800a9f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083f4:	f3ef 8211 	mrs	r2, BASEPRI
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	61ba      	str	r2, [r7, #24]
 800840a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800840c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008418:	429a      	cmp	r2, r3
 800841a:	d302      	bcc.n	8008422 <xQueueGenericSendFromISR+0xb6>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d12c      	bne.n	800847c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008432:	f000 fb54 	bl	8008ade <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008436:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d112      	bne.n	8008466 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d016      	beq.n	8008476 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	3324      	adds	r3, #36	; 0x24
 800844c:	4618      	mov	r0, r3
 800844e:	f001 f92f 	bl	80096b0 <xTaskRemoveFromEventList>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00e      	beq.n	8008476 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e007      	b.n	8008476 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800846a:	3301      	adds	r3, #1
 800846c:	b2db      	uxtb	r3, r3
 800846e:	b25a      	sxtb	r2, r3
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800847a:	e001      	b.n	8008480 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800847c:	2300      	movs	r3, #0
 800847e:	637b      	str	r3, [r7, #52]	; 0x34
 8008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008482:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800848c:	4618      	mov	r0, r3
 800848e:	3738      	adds	r7, #56	; 0x38
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <xQueueGiveFromISR+0x28>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
 80084ba:	e7fe      	b.n	80084ba <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <xQueueGiveFromISR+0x44>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	61fb      	str	r3, [r7, #28]
 80084d6:	e7fe      	b.n	80084d6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <xQueueGiveFromISR+0x54>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <xQueueGiveFromISR+0x58>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <xQueueGiveFromISR+0x5a>
 80084ec:	2300      	movs	r3, #0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <xQueueGiveFromISR+0x72>
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e7fe      	b.n	8008504 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008506:	f002 fa75 	bl	800a9f4 <vPortValidateInterruptPriority>
	__asm volatile
 800850a:	f3ef 8211 	mrs	r2, BASEPRI
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	617a      	str	r2, [r7, #20]
 8008520:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008522:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008532:	429a      	cmp	r2, r3
 8008534:	d22b      	bcs.n	800858e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800853c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d112      	bne.n	8008578 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	3324      	adds	r3, #36	; 0x24
 800855e:	4618      	mov	r0, r3
 8008560:	f001 f8a6 	bl	80096b0 <xTaskRemoveFromEventList>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00e      	beq.n	8008588 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2201      	movs	r2, #1
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	e007      	b.n	8008588 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800857c:	3301      	adds	r3, #1
 800857e:	b2db      	uxtb	r3, r3
 8008580:	b25a      	sxtb	r2, r3
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008588:	2301      	movs	r3, #1
 800858a:	637b      	str	r3, [r7, #52]	; 0x34
 800858c:	e001      	b.n	8008592 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800858e:	2300      	movs	r3, #0
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3738      	adds	r7, #56	; 0x38
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08c      	sub	sp, #48	; 0x30
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <xQueueReceive+0x2e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	e7fe      	b.n	80085d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <xQueueReceive+0x3c>
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <xQueueReceive+0x40>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <xQueueReceive+0x42>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <xQueueReceive+0x5a>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e7fe      	b.n	8008600 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008602:	f001 fa1b 	bl	8009a3c <xTaskGetSchedulerState>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <xQueueReceive+0x6a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueReceive+0x6e>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueReceive+0x70>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d109      	bne.n	8008630 <xQueueReceive+0x88>
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	e7fe      	b.n	800862e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008630:	f002 f904 	bl	800a83c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01f      	beq.n	8008680 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008644:	f000 fab5 	bl	8008bb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	1e5a      	subs	r2, r3, #1
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00f      	beq.n	8008678 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f827 	bl	80096b0 <xTaskRemoveFromEventList>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008668:	4b3c      	ldr	r3, [pc, #240]	; (800875c <xQueueReceive+0x1b4>)
 800866a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008678:	f002 f90e 	bl	800a898 <vPortExitCritical>
				return pdPASS;
 800867c:	2301      	movs	r3, #1
 800867e:	e069      	b.n	8008754 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d103      	bne.n	800868e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008686:	f002 f907 	bl	800a898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800868a:	2300      	movs	r3, #0
 800868c:	e062      	b.n	8008754 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	4618      	mov	r0, r3
 800869a:	f001 f86b 	bl	8009774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086a2:	f002 f8f9 	bl	800a898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086a6:	f000 fde7 	bl	8009278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086aa:	f002 f8c7 	bl	800a83c <vPortEnterCritical>
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b4:	b25b      	sxtb	r3, r3
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ba:	d103      	bne.n	80086c4 <xQueueReceive+0x11c>
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d103      	bne.n	80086da <xQueueReceive+0x132>
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086da:	f002 f8dd 	bl	800a898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086de:	1d3a      	adds	r2, r7, #4
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 f85a 	bl	80097a0 <xTaskCheckForTimeOut>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d123      	bne.n	800873a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f4:	f000 fad5 	bl	8008ca2 <prvIsQueueEmpty>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	3324      	adds	r3, #36	; 0x24
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f000 ff84 	bl	8009614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800870c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870e:	f000 fa76 	bl	8008bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008712:	f000 fdbf 	bl	8009294 <xTaskResumeAll>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d189      	bne.n	8008630 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800871c:	4b0f      	ldr	r3, [pc, #60]	; (800875c <xQueueReceive+0x1b4>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	e780      	b.n	8008630 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800872e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008730:	f000 fa65 	bl	8008bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008734:	f000 fdae 	bl	8009294 <xTaskResumeAll>
 8008738:	e77a      	b.n	8008630 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873c:	f000 fa5f 	bl	8008bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008740:	f000 fda8 	bl	8009294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008746:	f000 faac 	bl	8008ca2 <prvIsQueueEmpty>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	f43f af6f 	beq.w	8008630 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008754:	4618      	mov	r0, r3
 8008756:	3730      	adds	r7, #48	; 0x30
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	e000ed04 	.word	0xe000ed04

08008760 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08e      	sub	sp, #56	; 0x38
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008772:	2300      	movs	r3, #0
 8008774:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d109      	bne.n	8008790 <xQueueSemaphoreTake+0x30>
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	623b      	str	r3, [r7, #32]
 800878e:	e7fe      	b.n	800878e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <xQueueSemaphoreTake+0x4c>
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	e7fe      	b.n	80087aa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ac:	f001 f946 	bl	8009a3c <xTaskGetSchedulerState>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <xQueueSemaphoreTake+0x5c>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <xQueueSemaphoreTake+0x60>
 80087bc:	2301      	movs	r3, #1
 80087be:	e000      	b.n	80087c2 <xQueueSemaphoreTake+0x62>
 80087c0:	2300      	movs	r3, #0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d109      	bne.n	80087da <xQueueSemaphoreTake+0x7a>
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	e7fe      	b.n	80087d8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087da:	f002 f82f 	bl	800a83c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d024      	beq.n	8008834 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	1e5a      	subs	r2, r3, #1
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087fa:	f001 fa91 	bl	8009d20 <pvTaskIncrementMutexHeldCount>
 80087fe:	4602      	mov	r2, r0
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00f      	beq.n	800882c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	3310      	adds	r3, #16
 8008810:	4618      	mov	r0, r3
 8008812:	f000 ff4d 	bl	80096b0 <xTaskRemoveFromEventList>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800881c:	4b53      	ldr	r3, [pc, #332]	; (800896c <xQueueSemaphoreTake+0x20c>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800882c:	f002 f834 	bl	800a898 <vPortExitCritical>
				return pdPASS;
 8008830:	2301      	movs	r3, #1
 8008832:	e096      	b.n	8008962 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d110      	bne.n	800885c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <xQueueSemaphoreTake+0xf4>
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	e7fe      	b.n	8008852 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008854:	f002 f820 	bl	800a898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008858:	2300      	movs	r3, #0
 800885a:	e082      	b.n	8008962 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008862:	f107 030c 	add.w	r3, r7, #12
 8008866:	4618      	mov	r0, r3
 8008868:	f000 ff84 	bl	8009774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008870:	f002 f812 	bl	800a898 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008874:	f000 fd00 	bl	8009278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008878:	f001 ffe0 	bl	800a83c <vPortEnterCritical>
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d103      	bne.n	8008892 <xQueueSemaphoreTake+0x132>
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008898:	b25b      	sxtb	r3, r3
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d103      	bne.n	80088a8 <xQueueSemaphoreTake+0x148>
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a8:	f001 fff6 	bl	800a898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ac:	463a      	mov	r2, r7
 80088ae:	f107 030c 	add.w	r3, r7, #12
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 ff73 	bl	80097a0 <xTaskCheckForTimeOut>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d132      	bne.n	8008926 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088c2:	f000 f9ee 	bl	8008ca2 <prvIsQueueEmpty>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d026      	beq.n	800891a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80088d4:	f001 ffb2 	bl	800a83c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 f8cb 	bl	8009a78 <xTaskPriorityInherit>
 80088e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80088e4:	f001 ffd8 	bl	800a898 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	3324      	adds	r3, #36	; 0x24
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fe8f 	bl	8009614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088f8:	f000 f981 	bl	8008bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088fc:	f000 fcca 	bl	8009294 <xTaskResumeAll>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f47f af69 	bne.w	80087da <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008908:	4b18      	ldr	r3, [pc, #96]	; (800896c <xQueueSemaphoreTake+0x20c>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	e75f      	b.n	80087da <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800891a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800891c:	f000 f96f 	bl	8008bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008920:	f000 fcb8 	bl	8009294 <xTaskResumeAll>
 8008924:	e759      	b.n	80087da <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008928:	f000 f969 	bl	8008bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892c:	f000 fcb2 	bl	8009294 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008932:	f000 f9b6 	bl	8008ca2 <prvIsQueueEmpty>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f43f af4e 	beq.w	80087da <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00d      	beq.n	8008960 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008944:	f001 ff7a 	bl	800a83c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800894a:	f000 f8b0 	bl	8008aae <prvGetDisinheritPriorityAfterTimeout>
 800894e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f001 f962 	bl	8009c20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800895c:	f001 ff9c 	bl	800a898 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008962:	4618      	mov	r0, r3
 8008964:	3738      	adds	r7, #56	; 0x38
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	; 0x38
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <xQueueReceiveFromISR+0x2a>
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	623b      	str	r3, [r7, #32]
 8008998:	e7fe      	b.n	8008998 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <xQueueReceiveFromISR+0x38>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <xQueueReceiveFromISR+0x3c>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <xQueueReceiveFromISR+0x3e>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <xQueueReceiveFromISR+0x56>
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e7fe      	b.n	80089c4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089c6:	f002 f815 	bl	800a9f4 <vPortValidateInterruptPriority>
	__asm volatile
 80089ca:	f3ef 8211 	mrs	r2, BASEPRI
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	61ba      	str	r2, [r7, #24]
 80089e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02f      	beq.n	8008a52 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a00:	f000 f8d7 	bl	8008bb2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	1e5a      	subs	r2, r3, #1
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d112      	bne.n	8008a3c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d016      	beq.n	8008a4c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	3310      	adds	r3, #16
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fe44 	bl	80096b0 <xTaskRemoveFromEventList>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00e      	beq.n	8008a4c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e007      	b.n	8008a4c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a40:	3301      	adds	r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	b25a      	sxtb	r2, r3
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a50:	e001      	b.n	8008a56 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3738      	adds	r7, #56	; 0x38
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <vQueueDelete+0x26>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60bb      	str	r3, [r7, #8]
 8008a8e:	e7fe      	b.n	8008a8e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 f95d 	bl	8008d50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f002 f8a7 	bl	800abf4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d006      	beq.n	8008acc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e001      	b.n	8008ad0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
	}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10d      	bne.n	8008b18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d14d      	bne.n	8008ba0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f81d 	bl	8009b48 <xTaskPriorityDisinherit>
 8008b0e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	609a      	str	r2, [r3, #8]
 8008b16:	e043      	b.n	8008ba0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d119      	bne.n	8008b52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6858      	ldr	r0, [r3, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	461a      	mov	r2, r3
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	f002 f9a1 	bl	800ae70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	441a      	add	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d32b      	bcc.n	8008ba0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	605a      	str	r2, [r3, #4]
 8008b50:	e026      	b.n	8008ba0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68d8      	ldr	r0, [r3, #12]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	f002 f987 	bl	800ae70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	425b      	negs	r3, r3
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d207      	bcs.n	8008b8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	425b      	negs	r3, r3
 8008b88:	441a      	add	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d105      	bne.n	8008ba0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ba8:	697b      	ldr	r3, [r7, #20]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d018      	beq.n	8008bf6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d303      	bcc.n	8008be6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68d9      	ldr	r1, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6838      	ldr	r0, [r7, #0]
 8008bf2:	f002 f93d 	bl	800ae70 <memcpy>
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c06:	f001 fe19 	bl	800a83c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c12:	e011      	b.n	8008c38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d012      	beq.n	8008c42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3324      	adds	r3, #36	; 0x24
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 fd45 	bl	80096b0 <xTaskRemoveFromEventList>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c2c:	f000 fe18 	bl	8009860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dce9      	bgt.n	8008c14 <prvUnlockQueue+0x16>
 8008c40:	e000      	b.n	8008c44 <prvUnlockQueue+0x46>
					break;
 8008c42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	22ff      	movs	r2, #255	; 0xff
 8008c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c4c:	f001 fe24 	bl	800a898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c50:	f001 fdf4 	bl	800a83c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c5c:	e011      	b.n	8008c82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d012      	beq.n	8008c8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3310      	adds	r3, #16
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fd20 	bl	80096b0 <xTaskRemoveFromEventList>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c76:	f000 fdf3 	bl	8009860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dce9      	bgt.n	8008c5e <prvUnlockQueue+0x60>
 8008c8a:	e000      	b.n	8008c8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	22ff      	movs	r2, #255	; 0xff
 8008c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c96:	f001 fdff 	bl	800a898 <vPortExitCritical>
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008caa:	f001 fdc7 	bl	800a83c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	e001      	b.n	8008cc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cc0:	f001 fdea 	bl	800a898 <vPortExitCritical>

	return xReturn;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cd6:	f001 fdb1 	bl	800a83c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d102      	bne.n	8008cec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	e001      	b.n	8008cf0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cf0:	f001 fdd2 	bl	800a898 <vPortExitCritical>

	return xReturn;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	e014      	b.n	8008d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d10:	4a0e      	ldr	r2, [pc, #56]	; (8008d4c <vQueueAddToRegistry+0x4c>)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10b      	bne.n	8008d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d1c:	490b      	ldr	r1, [pc, #44]	; (8008d4c <vQueueAddToRegistry+0x4c>)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <vQueueAddToRegistry+0x4c>)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d32:	e005      	b.n	8008d40 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b07      	cmp	r3, #7
 8008d3e:	d9e7      	bls.n	8008d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20004c54 	.word	0x20004c54

08008d50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e016      	b.n	8008d8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d5e:	4a10      	ldr	r2, [pc, #64]	; (8008da0 <vQueueUnregisterQueue+0x50>)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4413      	add	r3, r2
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d10b      	bne.n	8008d86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d6e:	4a0c      	ldr	r2, [pc, #48]	; (8008da0 <vQueueUnregisterQueue+0x50>)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2100      	movs	r1, #0
 8008d74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d78:	4a09      	ldr	r2, [pc, #36]	; (8008da0 <vQueueUnregisterQueue+0x50>)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	4413      	add	r3, r2
 8008d80:	2200      	movs	r2, #0
 8008d82:	605a      	str	r2, [r3, #4]
				break;
 8008d84:	e005      	b.n	8008d92 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b07      	cmp	r3, #7
 8008d90:	d9e5      	bls.n	8008d5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d92:	bf00      	nop
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20004c54 	.word	0x20004c54

08008da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008db4:	f001 fd42 	bl	800a83c <vPortEnterCritical>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dbe:	b25b      	sxtb	r3, r3
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc4:	d103      	bne.n	8008dce <vQueueWaitForMessageRestricted+0x2a>
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d103      	bne.n	8008de4 <vQueueWaitForMessageRestricted+0x40>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de4:	f001 fd58 	bl	800a898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	3324      	adds	r3, #36	; 0x24
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fc2f 	bl	800965c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008dfe:	6978      	ldr	r0, [r7, #20]
 8008e00:	f7ff fefd 	bl	8008bfe <prvUnlockQueue>
	}
 8008e04:	bf00      	nop
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08e      	sub	sp, #56	; 0x38
 8008e10:	af04      	add	r7, sp, #16
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <xTaskCreateStatic+0x28>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	623b      	str	r3, [r7, #32]
 8008e32:	e7fe      	b.n	8008e32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <xTaskCreateStatic+0x42>
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	61fb      	str	r3, [r7, #28]
 8008e4c:	e7fe      	b.n	8008e4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e4e:	235c      	movs	r3, #92	; 0x5c
 8008e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b5c      	cmp	r3, #92	; 0x5c
 8008e56:	d009      	beq.n	8008e6c <xTaskCreateStatic+0x60>
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	e7fe      	b.n	8008e6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01e      	beq.n	8008eb2 <xTaskCreateStatic+0xa6>
 8008e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01b      	beq.n	8008eb2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	9302      	str	r3, [sp, #8]
 8008e94:	f107 0314 	add.w	r3, r7, #20
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f850 	bl	8008f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eac:	f000 f8dc 	bl	8009068 <prvAddNewTaskToReadyList>
 8008eb0:	e001      	b.n	8008eb6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008eb6:	697b      	ldr	r3, [r7, #20]
	}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3728      	adds	r7, #40	; 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08c      	sub	sp, #48	; 0x30
 8008ec4:	af04      	add	r7, sp, #16
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f001 fdcb 	bl	800aa70 <pvPortMalloc>
 8008eda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00e      	beq.n	8008f00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ee2:	205c      	movs	r0, #92	; 0x5c
 8008ee4:	f001 fdc4 	bl	800aa70 <pvPortMalloc>
 8008ee8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8008ef6:	e005      	b.n	8008f04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ef8:	6978      	ldr	r0, [r7, #20]
 8008efa:	f001 fe7b 	bl	800abf4 <vPortFree>
 8008efe:	e001      	b.n	8008f04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d017      	beq.n	8008f3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f12:	88fa      	ldrh	r2, [r7, #6]
 8008f14:	2300      	movs	r3, #0
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	9302      	str	r3, [sp, #8]
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 f80e 	bl	8008f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f2e:	69f8      	ldr	r0, [r7, #28]
 8008f30:	f000 f89a 	bl	8009068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f34:	2301      	movs	r3, #1
 8008f36:	61bb      	str	r3, [r7, #24]
 8008f38:	e002      	b.n	8008f40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f40:	69bb      	ldr	r3, [r7, #24]
	}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b088      	sub	sp, #32
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	461a      	mov	r2, r3
 8008f62:	21a5      	movs	r1, #165	; 0xa5
 8008f64:	f001 ff8f 	bl	800ae86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f72:	3b01      	subs	r3, #1
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <prvInitialiseNewTask+0x56>
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	e7fe      	b.n	8008f9e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01f      	beq.n	8008fe6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61fb      	str	r3, [r7, #28]
 8008faa:	e012      	b.n	8008fd2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	7819      	ldrb	r1, [r3, #0]
 8008fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	4413      	add	r3, r2
 8008fba:	3334      	adds	r3, #52	; 0x34
 8008fbc:	460a      	mov	r2, r1
 8008fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2b0f      	cmp	r3, #15
 8008fd6:	d9e9      	bls.n	8008fac <prvInitialiseNewTask+0x62>
 8008fd8:	e000      	b.n	8008fdc <prvInitialiseNewTask+0x92>
			{
				break;
 8008fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fe4:	e003      	b.n	8008fee <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	2b37      	cmp	r3, #55	; 0x37
 8008ff2:	d901      	bls.n	8008ff8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ff4:	2337      	movs	r3, #55	; 0x37
 8008ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009002:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	2200      	movs	r2, #0
 8009008:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	3304      	adds	r3, #4
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fdc6 	bl	8007ba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	3318      	adds	r3, #24
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fdc1 	bl	8007ba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	2200      	movs	r2, #0
 8009038:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	68f9      	ldr	r1, [r7, #12]
 8009046:	69b8      	ldr	r0, [r7, #24]
 8009048:	f001 fad0 	bl	800a5ec <pxPortInitialiseStack>
 800904c:	4602      	mov	r2, r0
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800905e:	bf00      	nop
 8009060:	3720      	adds	r7, #32
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009070:	f001 fbe4 	bl	800a83c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009074:	4b2d      	ldr	r3, [pc, #180]	; (800912c <prvAddNewTaskToReadyList+0xc4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3301      	adds	r3, #1
 800907a:	4a2c      	ldr	r2, [pc, #176]	; (800912c <prvAddNewTaskToReadyList+0xc4>)
 800907c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800907e:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <prvAddNewTaskToReadyList+0xc8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d109      	bne.n	800909a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009086:	4a2a      	ldr	r2, [pc, #168]	; (8009130 <prvAddNewTaskToReadyList+0xc8>)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800908c:	4b27      	ldr	r3, [pc, #156]	; (800912c <prvAddNewTaskToReadyList+0xc4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d110      	bne.n	80090b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009094:	f000 fc08 	bl	80098a8 <prvInitialiseTaskLists>
 8009098:	e00d      	b.n	80090b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <prvAddNewTaskToReadyList+0xcc>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090a2:	4b23      	ldr	r3, [pc, #140]	; (8009130 <prvAddNewTaskToReadyList+0xc8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d802      	bhi.n	80090b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090b0:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvAddNewTaskToReadyList+0xc8>)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090b6:	4b20      	ldr	r3, [pc, #128]	; (8009138 <prvAddNewTaskToReadyList+0xd0>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	4a1e      	ldr	r2, [pc, #120]	; (8009138 <prvAddNewTaskToReadyList+0xd0>)
 80090be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090c0:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <prvAddNewTaskToReadyList+0xd0>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090cc:	4b1b      	ldr	r3, [pc, #108]	; (800913c <prvAddNewTaskToReadyList+0xd4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d903      	bls.n	80090dc <prvAddNewTaskToReadyList+0x74>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	4a18      	ldr	r2, [pc, #96]	; (800913c <prvAddNewTaskToReadyList+0xd4>)
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4a15      	ldr	r2, [pc, #84]	; (8009140 <prvAddNewTaskToReadyList+0xd8>)
 80090ea:	441a      	add	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fe fd61 	bl	8007bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090f8:	f001 fbce 	bl	800a898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090fc:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <prvAddNewTaskToReadyList+0xcc>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00e      	beq.n	8009122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009104:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <prvAddNewTaskToReadyList+0xc8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910e:	429a      	cmp	r2, r3
 8009110:	d207      	bcs.n	8009122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009112:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <prvAddNewTaskToReadyList+0xdc>)
 8009114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20000d90 	.word	0x20000d90
 8009130:	200008bc 	.word	0x200008bc
 8009134:	20000d9c 	.word	0x20000d9c
 8009138:	20000dac 	.word	0x20000dac
 800913c:	20000d98 	.word	0x20000d98
 8009140:	200008c0 	.word	0x200008c0
 8009144:	e000ed04 	.word	0xe000ed04

08009148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d016      	beq.n	8009188 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800915a:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <vTaskDelay+0x60>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <vTaskDelay+0x2e>
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	60bb      	str	r3, [r7, #8]
 8009174:	e7fe      	b.n	8009174 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009176:	f000 f87f 	bl	8009278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800917a:	2100      	movs	r1, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fde3 	bl	8009d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009182:	f000 f887 	bl	8009294 <xTaskResumeAll>
 8009186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d107      	bne.n	800919e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800918e:	4b07      	ldr	r3, [pc, #28]	; (80091ac <vTaskDelay+0x64>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000db8 	.word	0x20000db8
 80091ac:	e000ed04 	.word	0xe000ed04

080091b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	; 0x28
 80091b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091be:	463a      	mov	r2, r7
 80091c0:	1d39      	adds	r1, r7, #4
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe fc96 	bl	8007af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	9202      	str	r2, [sp, #8]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	2300      	movs	r3, #0
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	460a      	mov	r2, r1
 80091de:	4920      	ldr	r1, [pc, #128]	; (8009260 <vTaskStartScheduler+0xb0>)
 80091e0:	4820      	ldr	r0, [pc, #128]	; (8009264 <vTaskStartScheduler+0xb4>)
 80091e2:	f7ff fe13 	bl	8008e0c <xTaskCreateStatic>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b1f      	ldr	r3, [pc, #124]	; (8009268 <vTaskStartScheduler+0xb8>)
 80091ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <vTaskStartScheduler+0xb8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	e001      	b.n	80091fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d102      	bne.n	800920a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009204:	f000 fdf4 	bl	8009df0 <xTimerCreateTimerTask>
 8009208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d115      	bne.n	800923c <vTaskStartScheduler+0x8c>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009222:	4b12      	ldr	r3, [pc, #72]	; (800926c <vTaskStartScheduler+0xbc>)
 8009224:	f04f 32ff 	mov.w	r2, #4294967295
 8009228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800922a:	4b11      	ldr	r3, [pc, #68]	; (8009270 <vTaskStartScheduler+0xc0>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009230:	4b10      	ldr	r3, [pc, #64]	; (8009274 <vTaskStartScheduler+0xc4>)
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009236:	f001 fa63 	bl	800a700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800923a:	e00d      	b.n	8009258 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d109      	bne.n	8009258 <vTaskStartScheduler+0xa8>
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	e7fe      	b.n	8009256 <vTaskStartScheduler+0xa6>
}
 8009258:	bf00      	nop
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	0800cf54 	.word	0x0800cf54
 8009264:	08009879 	.word	0x08009879
 8009268:	20000db4 	.word	0x20000db4
 800926c:	20000db0 	.word	0x20000db0
 8009270:	20000d9c 	.word	0x20000d9c
 8009274:	20000d94 	.word	0x20000d94

08009278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800927c:	4b04      	ldr	r3, [pc, #16]	; (8009290 <vTaskSuspendAll+0x18>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	4a03      	ldr	r2, [pc, #12]	; (8009290 <vTaskSuspendAll+0x18>)
 8009284:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009286:	bf00      	nop
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	20000db8 	.word	0x20000db8

08009294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800929e:	2300      	movs	r3, #0
 80092a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092a2:	4b41      	ldr	r3, [pc, #260]	; (80093a8 <xTaskResumeAll+0x114>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d109      	bne.n	80092be <xTaskResumeAll+0x2a>
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	e7fe      	b.n	80092bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092be:	f001 fabd 	bl	800a83c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092c2:	4b39      	ldr	r3, [pc, #228]	; (80093a8 <xTaskResumeAll+0x114>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	4a37      	ldr	r2, [pc, #220]	; (80093a8 <xTaskResumeAll+0x114>)
 80092ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092cc:	4b36      	ldr	r3, [pc, #216]	; (80093a8 <xTaskResumeAll+0x114>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d162      	bne.n	800939a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092d4:	4b35      	ldr	r3, [pc, #212]	; (80093ac <xTaskResumeAll+0x118>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d05e      	beq.n	800939a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092dc:	e02f      	b.n	800933e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092de:	4b34      	ldr	r3, [pc, #208]	; (80093b0 <xTaskResumeAll+0x11c>)
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3318      	adds	r3, #24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fcc2 	bl	8007c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe fcbd 	bl	8007c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	4b2d      	ldr	r3, [pc, #180]	; (80093b4 <xTaskResumeAll+0x120>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d903      	bls.n	800930e <xTaskResumeAll+0x7a>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4a2a      	ldr	r2, [pc, #168]	; (80093b4 <xTaskResumeAll+0x120>)
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <xTaskResumeAll+0x124>)
 800931c:	441a      	add	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fe fc48 	bl	8007bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932e:	4b23      	ldr	r3, [pc, #140]	; (80093bc <xTaskResumeAll+0x128>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d302      	bcc.n	800933e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009338:	4b21      	ldr	r3, [pc, #132]	; (80093c0 <xTaskResumeAll+0x12c>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800933e:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <xTaskResumeAll+0x11c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1cb      	bne.n	80092de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800934c:	f000 fb46 	bl	80099dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009350:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <xTaskResumeAll+0x130>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800935c:	f000 f846 	bl	80093ec <xTaskIncrementTick>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d002      	beq.n	800936c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <xTaskResumeAll+0x12c>)
 8009368:	2201      	movs	r2, #1
 800936a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3b01      	subs	r3, #1
 8009370:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f1      	bne.n	800935c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009378:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <xTaskResumeAll+0x130>)
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800937e:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <xTaskResumeAll+0x12c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009386:	2301      	movs	r3, #1
 8009388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800938a:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <xTaskResumeAll+0x134>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800939a:	f001 fa7d 	bl	800a898 <vPortExitCritical>

	return xAlreadyYielded;
 800939e:	68bb      	ldr	r3, [r7, #8]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20000db8 	.word	0x20000db8
 80093ac:	20000d90 	.word	0x20000d90
 80093b0:	20000d50 	.word	0x20000d50
 80093b4:	20000d98 	.word	0x20000d98
 80093b8:	200008c0 	.word	0x200008c0
 80093bc:	200008bc 	.word	0x200008bc
 80093c0:	20000da4 	.word	0x20000da4
 80093c4:	20000da0 	.word	0x20000da0
 80093c8:	e000ed04 	.word	0xe000ed04

080093cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <xTaskGetTickCount+0x1c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093d8:	687b      	ldr	r3, [r7, #4]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	20000d94 	.word	0x20000d94

080093ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093f6:	4b4e      	ldr	r3, [pc, #312]	; (8009530 <xTaskIncrementTick+0x144>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 8088 	bne.w	8009510 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009400:	4b4c      	ldr	r3, [pc, #304]	; (8009534 <xTaskIncrementTick+0x148>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009408:	4a4a      	ldr	r2, [pc, #296]	; (8009534 <xTaskIncrementTick+0x148>)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11f      	bne.n	8009454 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009414:	4b48      	ldr	r3, [pc, #288]	; (8009538 <xTaskIncrementTick+0x14c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <xTaskIncrementTick+0x46>
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	e7fe      	b.n	8009430 <xTaskIncrementTick+0x44>
 8009432:	4b41      	ldr	r3, [pc, #260]	; (8009538 <xTaskIncrementTick+0x14c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	4b40      	ldr	r3, [pc, #256]	; (800953c <xTaskIncrementTick+0x150>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a3e      	ldr	r2, [pc, #248]	; (8009538 <xTaskIncrementTick+0x14c>)
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	4a3e      	ldr	r2, [pc, #248]	; (800953c <xTaskIncrementTick+0x150>)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	4b3e      	ldr	r3, [pc, #248]	; (8009540 <xTaskIncrementTick+0x154>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a3c      	ldr	r2, [pc, #240]	; (8009540 <xTaskIncrementTick+0x154>)
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	f000 fac4 	bl	80099dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009454:	4b3b      	ldr	r3, [pc, #236]	; (8009544 <xTaskIncrementTick+0x158>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	429a      	cmp	r2, r3
 800945c:	d349      	bcc.n	80094f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800945e:	4b36      	ldr	r3, [pc, #216]	; (8009538 <xTaskIncrementTick+0x14c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009468:	4b36      	ldr	r3, [pc, #216]	; (8009544 <xTaskIncrementTick+0x158>)
 800946a:	f04f 32ff 	mov.w	r2, #4294967295
 800946e:	601a      	str	r2, [r3, #0]
					break;
 8009470:	e03f      	b.n	80094f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009472:	4b31      	ldr	r3, [pc, #196]	; (8009538 <xTaskIncrementTick+0x14c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d203      	bcs.n	8009492 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800948a:	4a2e      	ldr	r2, [pc, #184]	; (8009544 <xTaskIncrementTick+0x158>)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009490:	e02f      	b.n	80094f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	3304      	adds	r3, #4
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fbec 	bl	8007c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	3318      	adds	r3, #24
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fbe3 	bl	8007c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	4b25      	ldr	r3, [pc, #148]	; (8009548 <xTaskIncrementTick+0x15c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d903      	bls.n	80094c2 <xTaskIncrementTick+0xd6>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094be:	4a22      	ldr	r2, [pc, #136]	; (8009548 <xTaskIncrementTick+0x15c>)
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4a1f      	ldr	r2, [pc, #124]	; (800954c <xTaskIncrementTick+0x160>)
 80094d0:	441a      	add	r2, r3
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	3304      	adds	r3, #4
 80094d6:	4619      	mov	r1, r3
 80094d8:	4610      	mov	r0, r2
 80094da:	f7fe fb6e 	bl	8007bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e2:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <xTaskIncrementTick+0x164>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3b8      	bcc.n	800945e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80094ec:	2301      	movs	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094f0:	e7b5      	b.n	800945e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094f2:	4b17      	ldr	r3, [pc, #92]	; (8009550 <xTaskIncrementTick+0x164>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	4914      	ldr	r1, [pc, #80]	; (800954c <xTaskIncrementTick+0x160>)
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d907      	bls.n	800951a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800950a:	2301      	movs	r3, #1
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	e004      	b.n	800951a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009510:	4b10      	ldr	r3, [pc, #64]	; (8009554 <xTaskIncrementTick+0x168>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a0f      	ldr	r2, [pc, #60]	; (8009554 <xTaskIncrementTick+0x168>)
 8009518:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800951a:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <xTaskIncrementTick+0x16c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009522:	2301      	movs	r3, #1
 8009524:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009526:	697b      	ldr	r3, [r7, #20]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20000db8 	.word	0x20000db8
 8009534:	20000d94 	.word	0x20000d94
 8009538:	20000d48 	.word	0x20000d48
 800953c:	20000d4c 	.word	0x20000d4c
 8009540:	20000da8 	.word	0x20000da8
 8009544:	20000db0 	.word	0x20000db0
 8009548:	20000d98 	.word	0x20000d98
 800954c:	200008c0 	.word	0x200008c0
 8009550:	200008bc 	.word	0x200008bc
 8009554:	20000da0 	.word	0x20000da0
 8009558:	20000da4 	.word	0x20000da4

0800955c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009562:	4b27      	ldr	r3, [pc, #156]	; (8009600 <vTaskSwitchContext+0xa4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800956a:	4b26      	ldr	r3, [pc, #152]	; (8009604 <vTaskSwitchContext+0xa8>)
 800956c:	2201      	movs	r2, #1
 800956e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009570:	e040      	b.n	80095f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009572:	4b24      	ldr	r3, [pc, #144]	; (8009604 <vTaskSwitchContext+0xa8>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009578:	4b23      	ldr	r3, [pc, #140]	; (8009608 <vTaskSwitchContext+0xac>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	e00f      	b.n	80095a0 <vTaskSwitchContext+0x44>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <vTaskSwitchContext+0x3e>
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	607b      	str	r3, [r7, #4]
 8009598:	e7fe      	b.n	8009598 <vTaskSwitchContext+0x3c>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3b01      	subs	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	491a      	ldr	r1, [pc, #104]	; (800960c <vTaskSwitchContext+0xb0>)
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0e5      	beq.n	8009580 <vTaskSwitchContext+0x24>
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4a13      	ldr	r2, [pc, #76]	; (800960c <vTaskSwitchContext+0xb0>)
 80095c0:	4413      	add	r3, r2
 80095c2:	60bb      	str	r3, [r7, #8]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	685a      	ldr	r2, [r3, #4]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	3308      	adds	r3, #8
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d104      	bne.n	80095e4 <vTaskSwitchContext+0x88>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	605a      	str	r2, [r3, #4]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	4a09      	ldr	r2, [pc, #36]	; (8009610 <vTaskSwitchContext+0xb4>)
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	4a06      	ldr	r2, [pc, #24]	; (8009608 <vTaskSwitchContext+0xac>)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6013      	str	r3, [r2, #0]
}
 80095f4:	bf00      	nop
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	20000db8 	.word	0x20000db8
 8009604:	20000da4 	.word	0x20000da4
 8009608:	20000d98 	.word	0x20000d98
 800960c:	200008c0 	.word	0x200008c0
 8009610:	200008bc 	.word	0x200008bc

08009614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d109      	bne.n	8009638 <vTaskPlaceOnEventList+0x24>
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e7fe      	b.n	8009636 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009638:	4b07      	ldr	r3, [pc, #28]	; (8009658 <vTaskPlaceOnEventList+0x44>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3318      	adds	r3, #24
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7fe fade 	bl	8007c02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009646:	2101      	movs	r1, #1
 8009648:	6838      	ldr	r0, [r7, #0]
 800964a:	f000 fb7d 	bl	8009d48 <prvAddCurrentTaskToDelayedList>
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	200008bc 	.word	0x200008bc

0800965c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <vTaskPlaceOnEventListRestricted+0x26>
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	e7fe      	b.n	8009680 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <vTaskPlaceOnEventListRestricted+0x50>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3318      	adds	r3, #24
 8009688:	4619      	mov	r1, r3
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f7fe fa95 	bl	8007bba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009696:	f04f 33ff 	mov.w	r3, #4294967295
 800969a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	68b8      	ldr	r0, [r7, #8]
 80096a0:	f000 fb52 	bl	8009d48 <prvAddCurrentTaskToDelayedList>
	}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	200008bc 	.word	0x200008bc

080096b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <xTaskRemoveFromEventList+0x2a>
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	e7fe      	b.n	80096d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3318      	adds	r3, #24
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fac8 	bl	8007c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e4:	4b1d      	ldr	r3, [pc, #116]	; (800975c <xTaskRemoveFromEventList+0xac>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11d      	bne.n	8009728 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fabf 	bl	8007c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <xTaskRemoveFromEventList+0xb0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d903      	bls.n	800970a <xTaskRemoveFromEventList+0x5a>
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	4a16      	ldr	r2, [pc, #88]	; (8009760 <xTaskRemoveFromEventList+0xb0>)
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4a13      	ldr	r2, [pc, #76]	; (8009764 <xTaskRemoveFromEventList+0xb4>)
 8009718:	441a      	add	r2, r3
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fe fa4a 	bl	8007bba <vListInsertEnd>
 8009726:	e005      	b.n	8009734 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3318      	adds	r3, #24
 800972c:	4619      	mov	r1, r3
 800972e:	480e      	ldr	r0, [pc, #56]	; (8009768 <xTaskRemoveFromEventList+0xb8>)
 8009730:	f7fe fa43 	bl	8007bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <xTaskRemoveFromEventList+0xbc>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973e:	429a      	cmp	r2, r3
 8009740:	d905      	bls.n	800974e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009742:	2301      	movs	r3, #1
 8009744:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <xTaskRemoveFromEventList+0xc0>)
 8009748:	2201      	movs	r2, #1
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	e001      	b.n	8009752 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009752:	697b      	ldr	r3, [r7, #20]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20000db8 	.word	0x20000db8
 8009760:	20000d98 	.word	0x20000d98
 8009764:	200008c0 	.word	0x200008c0
 8009768:	20000d50 	.word	0x20000d50
 800976c:	200008bc 	.word	0x200008bc
 8009770:	20000da4 	.word	0x20000da4

08009774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <vTaskInternalSetTimeOutState+0x24>)
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009784:	4b05      	ldr	r3, [pc, #20]	; (800979c <vTaskInternalSetTimeOutState+0x28>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	605a      	str	r2, [r3, #4]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	20000da8 	.word	0x20000da8
 800979c:	20000d94 	.word	0x20000d94

080097a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d109      	bne.n	80097c4 <xTaskCheckForTimeOut+0x24>
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	e7fe      	b.n	80097c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <xTaskCheckForTimeOut+0x3e>
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	e7fe      	b.n	80097dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80097de:	f001 f82d 	bl	800a83c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097e2:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <xTaskCheckForTimeOut+0xb8>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d102      	bne.n	8009802 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e023      	b.n	800984a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4b15      	ldr	r3, [pc, #84]	; (800985c <xTaskCheckForTimeOut+0xbc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d007      	beq.n	800981e <xTaskCheckForTimeOut+0x7e>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	429a      	cmp	r2, r3
 8009816:	d302      	bcc.n	800981e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009818:	2301      	movs	r3, #1
 800981a:	61fb      	str	r3, [r7, #28]
 800981c:	e015      	b.n	800984a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	429a      	cmp	r2, r3
 8009826:	d20b      	bcs.n	8009840 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff ff9d 	bl	8009774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800983a:	2300      	movs	r3, #0
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	e004      	b.n	800984a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009846:	2301      	movs	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800984a:	f001 f825 	bl	800a898 <vPortExitCritical>

	return xReturn;
 800984e:	69fb      	ldr	r3, [r7, #28]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20000d94 	.word	0x20000d94
 800985c:	20000da8 	.word	0x20000da8

08009860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009860:	b480      	push	{r7}
 8009862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009864:	4b03      	ldr	r3, [pc, #12]	; (8009874 <vTaskMissedYield+0x14>)
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000da4 	.word	0x20000da4

08009878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009880:	f000 f852 	bl	8009928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009884:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <prvIdleTask+0x28>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d9f9      	bls.n	8009880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <prvIdleTask+0x2c>)
 800988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800989c:	e7f0      	b.n	8009880 <prvIdleTask+0x8>
 800989e:	bf00      	nop
 80098a0:	200008c0 	.word	0x200008c0
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ae:	2300      	movs	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	e00c      	b.n	80098ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4a12      	ldr	r2, [pc, #72]	; (8009908 <prvInitialiseTaskLists+0x60>)
 80098c0:	4413      	add	r3, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe f94c 	bl	8007b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3301      	adds	r3, #1
 80098cc:	607b      	str	r3, [r7, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b37      	cmp	r3, #55	; 0x37
 80098d2:	d9ef      	bls.n	80098b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098d4:	480d      	ldr	r0, [pc, #52]	; (800990c <prvInitialiseTaskLists+0x64>)
 80098d6:	f7fe f943 	bl	8007b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098da:	480d      	ldr	r0, [pc, #52]	; (8009910 <prvInitialiseTaskLists+0x68>)
 80098dc:	f7fe f940 	bl	8007b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098e0:	480c      	ldr	r0, [pc, #48]	; (8009914 <prvInitialiseTaskLists+0x6c>)
 80098e2:	f7fe f93d 	bl	8007b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098e6:	480c      	ldr	r0, [pc, #48]	; (8009918 <prvInitialiseTaskLists+0x70>)
 80098e8:	f7fe f93a 	bl	8007b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098ec:	480b      	ldr	r0, [pc, #44]	; (800991c <prvInitialiseTaskLists+0x74>)
 80098ee:	f7fe f937 	bl	8007b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <prvInitialiseTaskLists+0x78>)
 80098f4:	4a05      	ldr	r2, [pc, #20]	; (800990c <prvInitialiseTaskLists+0x64>)
 80098f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098f8:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <prvInitialiseTaskLists+0x7c>)
 80098fa:	4a05      	ldr	r2, [pc, #20]	; (8009910 <prvInitialiseTaskLists+0x68>)
 80098fc:	601a      	str	r2, [r3, #0]
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200008c0 	.word	0x200008c0
 800990c:	20000d20 	.word	0x20000d20
 8009910:	20000d34 	.word	0x20000d34
 8009914:	20000d50 	.word	0x20000d50
 8009918:	20000d64 	.word	0x20000d64
 800991c:	20000d7c 	.word	0x20000d7c
 8009920:	20000d48 	.word	0x20000d48
 8009924:	20000d4c 	.word	0x20000d4c

08009928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800992e:	e019      	b.n	8009964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009930:	f000 ff84 	bl	800a83c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <prvCheckTasksWaitingTermination+0x4c>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe f997 	bl	8007c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009946:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <prvCheckTasksWaitingTermination+0x50>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3b01      	subs	r3, #1
 800994c:	4a0a      	ldr	r2, [pc, #40]	; (8009978 <prvCheckTasksWaitingTermination+0x50>)
 800994e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <prvCheckTasksWaitingTermination+0x54>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	4a09      	ldr	r2, [pc, #36]	; (800997c <prvCheckTasksWaitingTermination+0x54>)
 8009958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800995a:	f000 ff9d 	bl	800a898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f80e 	bl	8009980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <prvCheckTasksWaitingTermination+0x54>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e1      	bne.n	8009930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000d64 	.word	0x20000d64
 8009978:	20000d90 	.word	0x20000d90
 800997c:	20000d78 	.word	0x20000d78

08009980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800998e:	2b00      	cmp	r3, #0
 8009990:	d108      	bne.n	80099a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	4618      	mov	r0, r3
 8009998:	f001 f92c 	bl	800abf4 <vPortFree>
				vPortFree( pxTCB );
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f929 	bl	800abf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099a2:	e017      	b.n	80099d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d103      	bne.n	80099b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f920 	bl	800abf4 <vPortFree>
	}
 80099b4:	e00e      	b.n	80099d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d009      	beq.n	80099d4 <prvDeleteTCB+0x54>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	e7fe      	b.n	80099d2 <prvDeleteTCB+0x52>
	}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099e2:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <prvResetNextTaskUnblockTime+0x38>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <prvResetNextTaskUnblockTime+0x3c>)
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099f4:	e008      	b.n	8009a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <prvResetNextTaskUnblockTime+0x38>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4a04      	ldr	r2, [pc, #16]	; (8009a18 <prvResetNextTaskUnblockTime+0x3c>)
 8009a06:	6013      	str	r3, [r2, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	20000d48 	.word	0x20000d48
 8009a18:	20000db0 	.word	0x20000db0

08009a1c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <xTaskGetCurrentTaskHandle+0x1c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009a28:	687b      	ldr	r3, [r7, #4]
	}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	200008bc 	.word	0x200008bc

08009a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <xTaskGetSchedulerState+0x34>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d102      	bne.n	8009a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	e008      	b.n	8009a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a50:	4b08      	ldr	r3, [pc, #32]	; (8009a74 <xTaskGetSchedulerState+0x38>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	e001      	b.n	8009a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a62:	687b      	ldr	r3, [r7, #4]
	}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	20000d9c 	.word	0x20000d9c
 8009a74:	20000db8 	.word	0x20000db8

08009a78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d051      	beq.n	8009b32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d241      	bcs.n	8009b20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	db06      	blt.n	8009ab2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa4:	4b25      	ldr	r3, [pc, #148]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6959      	ldr	r1, [r3, #20]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4a1f      	ldr	r2, [pc, #124]	; (8009b40 <xTaskPriorityInherit+0xc8>)
 8009ac4:	4413      	add	r3, r2
 8009ac6:	4299      	cmp	r1, r3
 8009ac8:	d122      	bne.n	8009b10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe f8d0 	bl	8007c74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ad4:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae2:	4b18      	ldr	r3, [pc, #96]	; (8009b44 <xTaskPriorityInherit+0xcc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d903      	bls.n	8009af2 <xTaskPriorityInherit+0x7a>
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	4a15      	ldr	r2, [pc, #84]	; (8009b44 <xTaskPriorityInherit+0xcc>)
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4a10      	ldr	r2, [pc, #64]	; (8009b40 <xTaskPriorityInherit+0xc8>)
 8009b00:	441a      	add	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7fe f856 	bl	8007bba <vListInsertEnd>
 8009b0e:	e004      	b.n	8009b1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b10:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	e008      	b.n	8009b32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d201      	bcs.n	8009b32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b32:	68fb      	ldr	r3, [r7, #12]
	}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200008bc 	.word	0x200008bc
 8009b40:	200008c0 	.word	0x200008c0
 8009b44:	20000d98 	.word	0x20000d98

08009b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d054      	beq.n	8009c08 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b5e:	4b2d      	ldr	r3, [pc, #180]	; (8009c14 <xTaskPriorityDisinherit+0xcc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d009      	beq.n	8009b7c <xTaskPriorityDisinherit+0x34>
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	e7fe      	b.n	8009b7a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d109      	bne.n	8009b98 <xTaskPriorityDisinherit+0x50>
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60bb      	str	r3, [r7, #8]
 8009b96:	e7fe      	b.n	8009b96 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b9c:	1e5a      	subs	r2, r3, #1
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d02c      	beq.n	8009c08 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d128      	bne.n	8009c08 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe f85a 	bl	8007c74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <xTaskPriorityDisinherit+0xd0>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d903      	bls.n	8009be8 <xTaskPriorityDisinherit+0xa0>
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	4a0c      	ldr	r2, [pc, #48]	; (8009c18 <xTaskPriorityDisinherit+0xd0>)
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bec:	4613      	mov	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <xTaskPriorityDisinherit+0xd4>)
 8009bf6:	441a      	add	r2, r3
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7fd ffdb 	bl	8007bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c04:	2301      	movs	r3, #1
 8009c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c08:	697b      	ldr	r3, [r7, #20]
	}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	200008bc 	.word	0x200008bc
 8009c18:	20000d98 	.word	0x20000d98
 8009c1c:	200008c0 	.word	0x200008c0

08009c20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d068      	beq.n	8009d0a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	e7fe      	b.n	8009c52 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d902      	bls.n	8009c64 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	e002      	b.n	8009c6a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d04a      	beq.n	8009d0a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d145      	bne.n	8009d0a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c7e:	4b25      	ldr	r3, [pc, #148]	; (8009d14 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d109      	bne.n	8009c9c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	e7fe      	b.n	8009c9a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	69fa      	ldr	r2, [r7, #28]
 8009ca6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	db04      	blt.n	8009cba <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	6959      	ldr	r1, [r3, #20]
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4a13      	ldr	r2, [pc, #76]	; (8009d18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009cca:	4413      	add	r3, r2
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d11c      	bne.n	8009d0a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fd ffcd 	bl	8007c74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cde:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d903      	bls.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xce>
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cea:	4a0c      	ldr	r2, [pc, #48]	; (8009d1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4a07      	ldr	r2, [pc, #28]	; (8009d18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009cfc:	441a      	add	r2, r3
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4619      	mov	r1, r3
 8009d04:	4610      	mov	r0, r2
 8009d06:	f7fd ff58 	bl	8007bba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d0a:	bf00      	nop
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	200008bc 	.word	0x200008bc
 8009d18:	200008c0 	.word	0x200008c0
 8009d1c:	20000d98 	.word	0x20000d98

08009d20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d24:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d2c:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d32:	3201      	adds	r2, #1
 8009d34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009d36:	4b03      	ldr	r3, [pc, #12]	; (8009d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d38:	681b      	ldr	r3, [r3, #0]
	}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	200008bc 	.word	0x200008bc

08009d48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d52:	4b21      	ldr	r3, [pc, #132]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d58:	4b20      	ldr	r3, [pc, #128]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fd ff88 	bl	8007c74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d10a      	bne.n	8009d82 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d72:	4b1a      	ldr	r3, [pc, #104]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4819      	ldr	r0, [pc, #100]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d7c:	f7fd ff1d 	bl	8007bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d80:	e026      	b.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4413      	add	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d8a:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d209      	bcs.n	8009dae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d9a:	4b12      	ldr	r3, [pc, #72]	; (8009de4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b0f      	ldr	r3, [pc, #60]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fd ff2b 	bl	8007c02 <vListInsert>
}
 8009dac:	e010      	b.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dae:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	f7fd ff21 	bl	8007c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d202      	bcs.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dca:	4a08      	ldr	r2, [pc, #32]	; (8009dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6013      	str	r3, [r2, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000d94 	.word	0x20000d94
 8009ddc:	200008bc 	.word	0x200008bc
 8009de0:	20000d7c 	.word	0x20000d7c
 8009de4:	20000d4c 	.word	0x20000d4c
 8009de8:	20000d48 	.word	0x20000d48
 8009dec:	20000db0 	.word	0x20000db0

08009df0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08a      	sub	sp, #40	; 0x28
 8009df4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dfa:	f000 fb97 	bl	800a52c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dfe:	4b1c      	ldr	r3, [pc, #112]	; (8009e70 <xTimerCreateTimerTask+0x80>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d021      	beq.n	8009e4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e0e:	1d3a      	adds	r2, r7, #4
 8009e10:	f107 0108 	add.w	r1, r7, #8
 8009e14:	f107 030c 	add.w	r3, r7, #12
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fd fe87 	bl	8007b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	9202      	str	r2, [sp, #8]
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	460a      	mov	r2, r1
 8009e30:	4910      	ldr	r1, [pc, #64]	; (8009e74 <xTimerCreateTimerTask+0x84>)
 8009e32:	4811      	ldr	r0, [pc, #68]	; (8009e78 <xTimerCreateTimerTask+0x88>)
 8009e34:	f7fe ffea 	bl	8008e0c <xTaskCreateStatic>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <xTimerCreateTimerTask+0x8c>)
 8009e3c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <xTimerCreateTimerTask+0x8c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e46:	2301      	movs	r3, #1
 8009e48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <xTimerCreateTimerTask+0x74>
 8009e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	e7fe      	b.n	8009e62 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009e64:	697b      	ldr	r3, [r7, #20]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000dec 	.word	0x20000dec
 8009e74:	0800cf5c 	.word	0x0800cf5c
 8009e78:	0800a0e1 	.word	0x0800a0e1
 8009e7c:	20000df0 	.word	0x20000df0

08009e80 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009e8e:	202c      	movs	r0, #44	; 0x2c
 8009e90:	f000 fdee 	bl	800aa70 <pvPortMalloc>
 8009e94:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00d      	beq.n	8009eb8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 f841 	bl	8009f3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009eb8:	697b      	ldr	r3, [r7, #20]
	}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b08a      	sub	sp, #40	; 0x28
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009ed0:	232c      	movs	r3, #44	; 0x2c
 8009ed2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b2c      	cmp	r3, #44	; 0x2c
 8009ed8:	d009      	beq.n	8009eee <xTimerCreateStatic+0x2c>
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	e7fe      	b.n	8009eec <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009eee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <xTimerCreateStatic+0x48>
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e7fe      	b.n	8009f08 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f805 	bl	8009f3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009f30:	69fb      	ldr	r3, [r7, #28]
	}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	60f8      	str	r0, [r7, #12]
 8009f42:	60b9      	str	r1, [r7, #8]
 8009f44:	607a      	str	r2, [r7, #4]
 8009f46:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d109      	bne.n	8009f62 <prvInitialiseNewTimer+0x28>
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e7fe      	b.n	8009f60 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01e      	beq.n	8009fa6 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009f68:	f000 fae0 	bl	800a52c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	6a3a      	ldr	r2, [r7, #32]
 8009f82:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fd fe09 	bl	8007ba0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d008      	beq.n	8009fa6 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9a:	f043 0304 	orr.w	r3, r3, #4
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009fa6:	bf00      	nop
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d109      	bne.n	8009fdc <xTimerGenericCommand+0x2c>
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	623b      	str	r3, [r7, #32]
 8009fda:	e7fe      	b.n	8009fda <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fdc:	4b19      	ldr	r3, [pc, #100]	; (800a044 <xTimerGenericCommand+0x94>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02a      	beq.n	800a03a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b05      	cmp	r3, #5
 8009ff4:	dc18      	bgt.n	800a028 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ff6:	f7ff fd21 	bl	8009a3c <xTaskGetSchedulerState>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d109      	bne.n	800a014 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a000:	4b10      	ldr	r3, [pc, #64]	; (800a044 <xTimerGenericCommand+0x94>)
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	f107 0110 	add.w	r1, r7, #16
 800a008:	2300      	movs	r3, #0
 800a00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a00c:	f7fe f8b4 	bl	8008178 <xQueueGenericSend>
 800a010:	6278      	str	r0, [r7, #36]	; 0x24
 800a012:	e012      	b.n	800a03a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a014:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <xTimerGenericCommand+0x94>)
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	f107 0110 	add.w	r1, r7, #16
 800a01c:	2300      	movs	r3, #0
 800a01e:	2200      	movs	r2, #0
 800a020:	f7fe f8aa 	bl	8008178 <xQueueGenericSend>
 800a024:	6278      	str	r0, [r7, #36]	; 0x24
 800a026:	e008      	b.n	800a03a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a028:	4b06      	ldr	r3, [pc, #24]	; (800a044 <xTimerGenericCommand+0x94>)
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	f107 0110 	add.w	r1, r7, #16
 800a030:	2300      	movs	r3, #0
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	f7fe f99a 	bl	800836c <xQueueGenericSendFromISR>
 800a038:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3728      	adds	r7, #40	; 0x28
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	20000dec 	.word	0x20000dec

0800a048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a052:	4b22      	ldr	r3, [pc, #136]	; (800a0dc <prvProcessExpiredTimer+0x94>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	3304      	adds	r3, #4
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd fe07 	bl	8007c74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d021      	beq.n	800a0b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	699a      	ldr	r2, [r3, #24]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	18d1      	adds	r1, r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	6978      	ldr	r0, [r7, #20]
 800a082:	f000 f8d1 	bl	800a228 <prvInsertTimerInActiveList>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01e      	beq.n	800a0ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a08c:	2300      	movs	r3, #0
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	2300      	movs	r3, #0
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	2100      	movs	r1, #0
 800a096:	6978      	ldr	r0, [r7, #20]
 800a098:	f7ff ff8a 	bl	8009fb0 <xTimerGenericCommand>
 800a09c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d112      	bne.n	800a0ca <prvProcessExpiredTimer+0x82>
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e7fe      	b.n	800a0b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	6978      	ldr	r0, [r7, #20]
 800a0d0:	4798      	blx	r3
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000de4 	.word	0x20000de4

0800a0e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0e8:	f107 0308 	add.w	r3, r7, #8
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 f857 	bl	800a1a0 <prvGetNextExpireTime>
 800a0f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f803 	bl	800a104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0fe:	f000 f8d5 	bl	800a2ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a102:	e7f1      	b.n	800a0e8 <prvTimerTask+0x8>

0800a104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a10e:	f7ff f8b3 	bl	8009278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a112:	f107 0308 	add.w	r3, r7, #8
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f866 	bl	800a1e8 <prvSampleTimeNow>
 800a11c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d130      	bne.n	800a186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <prvProcessTimerOrBlockTask+0x3c>
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d806      	bhi.n	800a140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a132:	f7ff f8af 	bl	8009294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff ff85 	bl	800a048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a13e:	e024      	b.n	800a18a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a146:	4b13      	ldr	r3, [pc, #76]	; (800a194 <prvProcessTimerOrBlockTask+0x90>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <prvProcessTimerOrBlockTask+0x50>
 800a150:	2301      	movs	r3, #1
 800a152:	e000      	b.n	800a156 <prvProcessTimerOrBlockTask+0x52>
 800a154:	2300      	movs	r3, #0
 800a156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a158:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <prvProcessTimerOrBlockTask+0x94>)
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	4619      	mov	r1, r3
 800a166:	f7fe fe1d 	bl	8008da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a16a:	f7ff f893 	bl	8009294 <xTaskResumeAll>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a174:	4b09      	ldr	r3, [pc, #36]	; (800a19c <prvProcessTimerOrBlockTask+0x98>)
 800a176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	f3bf 8f6f 	isb	sy
}
 800a184:	e001      	b.n	800a18a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a186:	f7ff f885 	bl	8009294 <xTaskResumeAll>
}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000de8 	.word	0x20000de8
 800a198:	20000dec 	.word	0x20000dec
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1a8:	4b0e      	ldr	r3, [pc, #56]	; (800a1e4 <prvGetNextExpireTime+0x44>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <prvGetNextExpireTime+0x16>
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	e000      	b.n	800a1b8 <prvGetNextExpireTime+0x18>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1c4:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <prvGetNextExpireTime+0x44>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	e001      	b.n	800a1d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	20000de4 	.word	0x20000de4

0800a1e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1f0:	f7ff f8ec 	bl	80093cc <xTaskGetTickCount>
 800a1f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <prvSampleTimeNow+0x3c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d205      	bcs.n	800a20c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a200:	f000 f930 	bl	800a464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	e002      	b.n	800a212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a212:	4a04      	ldr	r2, [pc, #16]	; (800a224 <prvSampleTimeNow+0x3c>)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20000df4 	.word	0x20000df4

0800a228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d812      	bhi.n	800a274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	1ad2      	subs	r2, r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e01b      	b.n	800a29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a262:	4b10      	ldr	r3, [pc, #64]	; (800a2a4 <prvInsertTimerInActiveList+0x7c>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3304      	adds	r3, #4
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7fd fcc8 	bl	8007c02 <vListInsert>
 800a272:	e012      	b.n	800a29a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d206      	bcs.n	800a28a <prvInsertTimerInActiveList+0x62>
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d302      	bcc.n	800a28a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	e007      	b.n	800a29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <prvInsertTimerInActiveList+0x80>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f7fd fcb4 	bl	8007c02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a29a:	697b      	ldr	r3, [r7, #20]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20000de8 	.word	0x20000de8
 800a2a8:	20000de4 	.word	0x20000de4

0800a2ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08e      	sub	sp, #56	; 0x38
 800a2b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2b2:	e0c6      	b.n	800a442 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	da17      	bge.n	800a2ea <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2ba:	1d3b      	adds	r3, r7, #4
 800a2bc:	3304      	adds	r3, #4
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d109      	bne.n	800a2da <prvProcessReceivedCommands+0x2e>
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	61fb      	str	r3, [r7, #28]
 800a2d8:	e7fe      	b.n	800a2d8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e0:	6850      	ldr	r0, [r2, #4]
 800a2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e4:	6892      	ldr	r2, [r2, #8]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f2c0 80a7 	blt.w	800a440 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	3304      	adds	r3, #4
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd fcb6 	bl	8007c74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a308:	463b      	mov	r3, r7
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff ff6c 	bl	800a1e8 <prvSampleTimeNow>
 800a310:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b09      	cmp	r3, #9
 800a316:	f200 8094 	bhi.w	800a442 <prvProcessReceivedCommands+0x196>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <prvProcessReceivedCommands+0x74>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a349 	.word	0x0800a349
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a349 	.word	0x0800a349
 800a32c:	0800a3bb 	.word	0x0800a3bb
 800a330:	0800a3cf 	.word	0x0800a3cf
 800a334:	0800a417 	.word	0x0800a417
 800a338:	0800a349 	.word	0x0800a349
 800a33c:	0800a349 	.word	0x0800a349
 800a340:	0800a3bb 	.word	0x0800a3bb
 800a344:	0800a3cf 	.word	0x0800a3cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	b2da      	uxtb	r2, r3
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	18d1      	adds	r1, r2, r3
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a368:	f7ff ff5e 	bl	800a228 <prvInsertTimerInActiveList>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d067      	beq.n	800a442 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a378:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d05c      	beq.n	800a442 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	441a      	add	r2, r3
 800a390:	2300      	movs	r3, #0
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	2100      	movs	r1, #0
 800a398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a39a:	f7ff fe09 	bl	8009fb0 <xTimerGenericCommand>
 800a39e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d14d      	bne.n	800a442 <prvProcessReceivedCommands+0x196>
 800a3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	61bb      	str	r3, [r7, #24]
 800a3b8:	e7fe      	b.n	800a3b8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3c0:	f023 0301 	bic.w	r3, r3, #1
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a3cc:	e039      	b.n	800a442 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d4:	f043 0301 	orr.w	r3, r3, #1
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <prvProcessReceivedCommands+0x156>
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	e7fe      	b.n	800a400 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	18d1      	adds	r1, r2, r3
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a410:	f7ff ff0a 	bl	800a228 <prvInsertTimerInActiveList>
					break;
 800a414:	e015      	b.n	800a442 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d103      	bne.n	800a42c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a426:	f000 fbe5 	bl	800abf4 <vPortFree>
 800a42a:	e00a      	b.n	800a442 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a432:	f023 0301 	bic.w	r3, r3, #1
 800a436:	b2da      	uxtb	r2, r3
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a43e:	e000      	b.n	800a442 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a442:	4b07      	ldr	r3, [pc, #28]	; (800a460 <prvProcessReceivedCommands+0x1b4>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	1d39      	adds	r1, r7, #4
 800a448:	2200      	movs	r2, #0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe f8ac 	bl	80085a8 <xQueueReceive>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	f47f af2e 	bne.w	800a2b4 <prvProcessReceivedCommands+0x8>
	}
}
 800a458:	bf00      	nop
 800a45a:	3730      	adds	r7, #48	; 0x30
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20000dec 	.word	0x20000dec

0800a464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a46a:	e047      	b.n	800a4fc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a46c:	4b2d      	ldr	r3, [pc, #180]	; (800a524 <prvSwitchTimerLists+0xc0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a476:	4b2b      	ldr	r3, [pc, #172]	; (800a524 <prvSwitchTimerLists+0xc0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3304      	adds	r3, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7fd fbf5 	bl	8007c74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d02d      	beq.n	800a4fc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d90e      	bls.n	800a4d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4be:	4b19      	ldr	r3, [pc, #100]	; (800a524 <prvSwitchTimerLists+0xc0>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	f7fd fb9a 	bl	8007c02 <vListInsert>
 800a4ce:	e015      	b.n	800a4fc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	2100      	movs	r1, #0
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff fd68 	bl	8009fb0 <xTimerGenericCommand>
 800a4e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <prvSwitchTimerLists+0x98>
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	603b      	str	r3, [r7, #0]
 800a4fa:	e7fe      	b.n	800a4fa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <prvSwitchTimerLists+0xc0>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1b2      	bne.n	800a46c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a506:	4b07      	ldr	r3, [pc, #28]	; (800a524 <prvSwitchTimerLists+0xc0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a50c:	4b06      	ldr	r3, [pc, #24]	; (800a528 <prvSwitchTimerLists+0xc4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a04      	ldr	r2, [pc, #16]	; (800a524 <prvSwitchTimerLists+0xc0>)
 800a512:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a514:	4a04      	ldr	r2, [pc, #16]	; (800a528 <prvSwitchTimerLists+0xc4>)
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	6013      	str	r3, [r2, #0]
}
 800a51a:	bf00      	nop
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000de4 	.word	0x20000de4
 800a528:	20000de8 	.word	0x20000de8

0800a52c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a532:	f000 f983 	bl	800a83c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a536:	4b15      	ldr	r3, [pc, #84]	; (800a58c <prvCheckForValidListAndQueue+0x60>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d120      	bne.n	800a580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a53e:	4814      	ldr	r0, [pc, #80]	; (800a590 <prvCheckForValidListAndQueue+0x64>)
 800a540:	f7fd fb0e 	bl	8007b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a544:	4813      	ldr	r0, [pc, #76]	; (800a594 <prvCheckForValidListAndQueue+0x68>)
 800a546:	f7fd fb0b 	bl	8007b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <prvCheckForValidListAndQueue+0x6c>)
 800a54c:	4a10      	ldr	r2, [pc, #64]	; (800a590 <prvCheckForValidListAndQueue+0x64>)
 800a54e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a550:	4b12      	ldr	r3, [pc, #72]	; (800a59c <prvCheckForValidListAndQueue+0x70>)
 800a552:	4a10      	ldr	r2, [pc, #64]	; (800a594 <prvCheckForValidListAndQueue+0x68>)
 800a554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a556:	2300      	movs	r3, #0
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <prvCheckForValidListAndQueue+0x74>)
 800a55c:	4a11      	ldr	r2, [pc, #68]	; (800a5a4 <prvCheckForValidListAndQueue+0x78>)
 800a55e:	2110      	movs	r1, #16
 800a560:	200a      	movs	r0, #10
 800a562:	f7fd fc19 	bl	8007d98 <xQueueGenericCreateStatic>
 800a566:	4602      	mov	r2, r0
 800a568:	4b08      	ldr	r3, [pc, #32]	; (800a58c <prvCheckForValidListAndQueue+0x60>)
 800a56a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a56c:	4b07      	ldr	r3, [pc, #28]	; (800a58c <prvCheckForValidListAndQueue+0x60>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d005      	beq.n	800a580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <prvCheckForValidListAndQueue+0x60>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	490b      	ldr	r1, [pc, #44]	; (800a5a8 <prvCheckForValidListAndQueue+0x7c>)
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fbc0 	bl	8008d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a580:	f000 f98a 	bl	800a898 <vPortExitCritical>
}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000dec 	.word	0x20000dec
 800a590:	20000dbc 	.word	0x20000dbc
 800a594:	20000dd0 	.word	0x20000dd0
 800a598:	20000de4 	.word	0x20000de4
 800a59c:	20000de8 	.word	0x20000de8
 800a5a0:	20000e98 	.word	0x20000e98
 800a5a4:	20000df8 	.word	0x20000df8
 800a5a8:	0800cf64 	.word	0x0800cf64

0800a5ac <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <pvTimerGetTimerID+0x26>
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e7fe      	b.n	800a5d0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800a5d2:	f000 f933 	bl	800a83c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a5dc:	f000 f95c 	bl	800a898 <vPortExitCritical>

	return pvReturn;
 800a5e0:	693b      	ldr	r3, [r7, #16]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3b04      	subs	r3, #4
 800a5fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3b04      	subs	r3, #4
 800a60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	f023 0201 	bic.w	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3b04      	subs	r3, #4
 800a61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a61c:	4a0c      	ldr	r2, [pc, #48]	; (800a650 <pxPortInitialiseStack+0x64>)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b14      	subs	r3, #20
 800a626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3b04      	subs	r3, #4
 800a632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f06f 0202 	mvn.w	r2, #2
 800a63a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3b20      	subs	r3, #32
 800a640:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a642:	68fb      	ldr	r3, [r7, #12]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	0800a655 	.word	0x0800a655

0800a654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <prvTaskExitError+0x50>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	d009      	beq.n	800a67c <prvTaskExitError+0x28>
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	e7fe      	b.n	800a67a <prvTaskExitError+0x26>
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a68e:	bf00      	nop
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0fc      	beq.n	800a690 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a696:	bf00      	nop
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	2000000c 	.word	0x2000000c
	...

0800a6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6b0:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <pxCurrentTCBConst2>)
 800a6b2:	6819      	ldr	r1, [r3, #0]
 800a6b4:	6808      	ldr	r0, [r1, #0]
 800a6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ba:	f380 8809 	msr	PSP, r0
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f04f 0000 	mov.w	r0, #0
 800a6c6:	f380 8811 	msr	BASEPRI, r0
 800a6ca:	4770      	bx	lr
 800a6cc:	f3af 8000 	nop.w

0800a6d0 <pxCurrentTCBConst2>:
 800a6d0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop

0800a6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6d8:	4808      	ldr	r0, [pc, #32]	; (800a6fc <prvPortStartFirstTask+0x24>)
 800a6da:	6800      	ldr	r0, [r0, #0]
 800a6dc:	6800      	ldr	r0, [r0, #0]
 800a6de:	f380 8808 	msr	MSP, r0
 800a6e2:	f04f 0000 	mov.w	r0, #0
 800a6e6:	f380 8814 	msr	CONTROL, r0
 800a6ea:	b662      	cpsie	i
 800a6ec:	b661      	cpsie	f
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	df00      	svc	0
 800a6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6fa:	bf00      	nop
 800a6fc:	e000ed08 	.word	0xe000ed08

0800a700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a706:	4b44      	ldr	r3, [pc, #272]	; (800a818 <xPortStartScheduler+0x118>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a44      	ldr	r2, [pc, #272]	; (800a81c <xPortStartScheduler+0x11c>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d109      	bne.n	800a724 <xPortStartScheduler+0x24>
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	e7fe      	b.n	800a722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a724:	4b3c      	ldr	r3, [pc, #240]	; (800a818 <xPortStartScheduler+0x118>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a3d      	ldr	r2, [pc, #244]	; (800a820 <xPortStartScheduler+0x120>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d109      	bne.n	800a742 <xPortStartScheduler+0x42>
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	e7fe      	b.n	800a740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a742:	4b38      	ldr	r3, [pc, #224]	; (800a824 <xPortStartScheduler+0x124>)
 800a744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	22ff      	movs	r2, #255	; 0xff
 800a752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a764:	b2da      	uxtb	r2, r3
 800a766:	4b30      	ldr	r3, [pc, #192]	; (800a828 <xPortStartScheduler+0x128>)
 800a768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a76a:	4b30      	ldr	r3, [pc, #192]	; (800a82c <xPortStartScheduler+0x12c>)
 800a76c:	2207      	movs	r2, #7
 800a76e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a770:	e009      	b.n	800a786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a772:	4b2e      	ldr	r3, [pc, #184]	; (800a82c <xPortStartScheduler+0x12c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3b01      	subs	r3, #1
 800a778:	4a2c      	ldr	r2, [pc, #176]	; (800a82c <xPortStartScheduler+0x12c>)
 800a77a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	b2db      	uxtb	r3, r3
 800a784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78e:	2b80      	cmp	r3, #128	; 0x80
 800a790:	d0ef      	beq.n	800a772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a792:	4b26      	ldr	r3, [pc, #152]	; (800a82c <xPortStartScheduler+0x12c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f1c3 0307 	rsb	r3, r3, #7
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	d009      	beq.n	800a7b2 <xPortStartScheduler+0xb2>
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	e7fe      	b.n	800a7b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7b2:	4b1e      	ldr	r3, [pc, #120]	; (800a82c <xPortStartScheduler+0x12c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	4a1c      	ldr	r2, [pc, #112]	; (800a82c <xPortStartScheduler+0x12c>)
 800a7ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7bc:	4b1b      	ldr	r3, [pc, #108]	; (800a82c <xPortStartScheduler+0x12c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7c4:	4a19      	ldr	r2, [pc, #100]	; (800a82c <xPortStartScheduler+0x12c>)
 800a7c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7d0:	4b17      	ldr	r3, [pc, #92]	; (800a830 <xPortStartScheduler+0x130>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a16      	ldr	r2, [pc, #88]	; (800a830 <xPortStartScheduler+0x130>)
 800a7d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7dc:	4b14      	ldr	r3, [pc, #80]	; (800a830 <xPortStartScheduler+0x130>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a13      	ldr	r2, [pc, #76]	; (800a830 <xPortStartScheduler+0x130>)
 800a7e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7e8:	f000 f8d6 	bl	800a998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7ec:	4b11      	ldr	r3, [pc, #68]	; (800a834 <xPortStartScheduler+0x134>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7f2:	f000 f8f5 	bl	800a9e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7f6:	4b10      	ldr	r3, [pc, #64]	; (800a838 <xPortStartScheduler+0x138>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a0f      	ldr	r2, [pc, #60]	; (800a838 <xPortStartScheduler+0x138>)
 800a7fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a802:	f7ff ff69 	bl	800a6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a806:	f7fe fea9 	bl	800955c <vTaskSwitchContext>
	prvTaskExitError();
 800a80a:	f7ff ff23 	bl	800a654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	e000ed00 	.word	0xe000ed00
 800a81c:	410fc271 	.word	0x410fc271
 800a820:	410fc270 	.word	0x410fc270
 800a824:	e000e400 	.word	0xe000e400
 800a828:	20000ee8 	.word	0x20000ee8
 800a82c:	20000eec 	.word	0x20000eec
 800a830:	e000ed20 	.word	0xe000ed20
 800a834:	2000000c 	.word	0x2000000c
 800a838:	e000ef34 	.word	0xe000ef34

0800a83c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a854:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <vPortEnterCritical+0x54>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3301      	adds	r3, #1
 800a85a:	4a0d      	ldr	r2, [pc, #52]	; (800a890 <vPortEnterCritical+0x54>)
 800a85c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a85e:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <vPortEnterCritical+0x54>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d10e      	bne.n	800a884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a866:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <vPortEnterCritical+0x58>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d009      	beq.n	800a884 <vPortEnterCritical+0x48>
 800a870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	603b      	str	r3, [r7, #0]
 800a882:	e7fe      	b.n	800a882 <vPortEnterCritical+0x46>
	}
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	2000000c 	.word	0x2000000c
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a89e:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <vPortExitCritical+0x4c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d109      	bne.n	800a8ba <vPortExitCritical+0x22>
 800a8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	607b      	str	r3, [r7, #4]
 800a8b8:	e7fe      	b.n	800a8b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a8ba:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <vPortExitCritical+0x4c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4a08      	ldr	r2, [pc, #32]	; (800a8e4 <vPortExitCritical+0x4c>)
 800a8c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8c4:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <vPortExitCritical+0x4c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d104      	bne.n	800a8d6 <vPortExitCritical+0x3e>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	2000000c 	.word	0x2000000c
	...

0800a8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8f0:	f3ef 8009 	mrs	r0, PSP
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4b15      	ldr	r3, [pc, #84]	; (800a950 <pxCurrentTCBConst>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	f01e 0f10 	tst.w	lr, #16
 800a900:	bf08      	it	eq
 800a902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	6010      	str	r0, [r2, #0]
 800a90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a914:	f380 8811 	msr	BASEPRI, r0
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f7fe fe1c 	bl	800955c <vTaskSwitchContext>
 800a924:	f04f 0000 	mov.w	r0, #0
 800a928:	f380 8811 	msr	BASEPRI, r0
 800a92c:	bc09      	pop	{r0, r3}
 800a92e:	6819      	ldr	r1, [r3, #0]
 800a930:	6808      	ldr	r0, [r1, #0]
 800a932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a936:	f01e 0f10 	tst.w	lr, #16
 800a93a:	bf08      	it	eq
 800a93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a940:	f380 8809 	msr	PSP, r0
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w

0800a950 <pxCurrentTCBConst>:
 800a950:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a970:	f7fe fd3c 	bl	80093ec <xTaskIncrementTick>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <SysTick_Handler+0x3c>)
 800a97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	2300      	movs	r3, #0
 800a984:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	e000ed04 	.word	0xe000ed04

0800a998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <vPortSetupTimerInterrupt+0x34>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <vPortSetupTimerInterrupt+0x38>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <vPortSetupTimerInterrupt+0x3c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a0a      	ldr	r2, [pc, #40]	; (800a9d8 <vPortSetupTimerInterrupt+0x40>)
 800a9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b2:	099b      	lsrs	r3, r3, #6
 800a9b4:	4a09      	ldr	r2, [pc, #36]	; (800a9dc <vPortSetupTimerInterrupt+0x44>)
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9ba:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <vPortSetupTimerInterrupt+0x34>)
 800a9bc:	2207      	movs	r2, #7
 800a9be:	601a      	str	r2, [r3, #0]
}
 800a9c0:	bf00      	nop
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	e000e010 	.word	0xe000e010
 800a9d0:	e000e018 	.word	0xe000e018
 800a9d4:	20000000 	.word	0x20000000
 800a9d8:	10624dd3 	.word	0x10624dd3
 800a9dc:	e000e014 	.word	0xe000e014

0800a9e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9f0 <vPortEnableVFP+0x10>
 800a9e4:	6801      	ldr	r1, [r0, #0]
 800a9e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9ea:	6001      	str	r1, [r0, #0]
 800a9ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9ee:	bf00      	nop
 800a9f0:	e000ed88 	.word	0xe000ed88

0800a9f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9fa:	f3ef 8305 	mrs	r3, IPSR
 800a9fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b0f      	cmp	r3, #15
 800aa04:	d913      	bls.n	800aa2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa06:	4a16      	ldr	r2, [pc, #88]	; (800aa60 <vPortValidateInterruptPriority+0x6c>)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa10:	4b14      	ldr	r3, [pc, #80]	; (800aa64 <vPortValidateInterruptPriority+0x70>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	7afa      	ldrb	r2, [r7, #11]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d209      	bcs.n	800aa2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	607b      	str	r3, [r7, #4]
 800aa2c:	e7fe      	b.n	800aa2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa2e:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <vPortValidateInterruptPriority+0x74>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <vPortValidateInterruptPriority+0x78>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d909      	bls.n	800aa52 <vPortValidateInterruptPriority+0x5e>
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	e7fe      	b.n	800aa50 <vPortValidateInterruptPriority+0x5c>
	}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	e000e3f0 	.word	0xe000e3f0
 800aa64:	20000ee8 	.word	0x20000ee8
 800aa68:	e000ed0c 	.word	0xe000ed0c
 800aa6c:	20000eec 	.word	0x20000eec

0800aa70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08a      	sub	sp, #40	; 0x28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa7c:	f7fe fbfc 	bl	8009278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa80:	4b57      	ldr	r3, [pc, #348]	; (800abe0 <pvPortMalloc+0x170>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa88:	f000 f90c 	bl	800aca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa8c:	4b55      	ldr	r3, [pc, #340]	; (800abe4 <pvPortMalloc+0x174>)
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4013      	ands	r3, r2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f040 808c 	bne.w	800abb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01c      	beq.n	800aada <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d013      	beq.n	800aada <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f023 0307 	bic.w	r3, r3, #7
 800aab8:	3308      	adds	r3, #8
 800aaba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f003 0307 	and.w	r3, r3, #7
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d009      	beq.n	800aada <pvPortMalloc+0x6a>
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	e7fe      	b.n	800aad8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d068      	beq.n	800abb2 <pvPortMalloc+0x142>
 800aae0:	4b41      	ldr	r3, [pc, #260]	; (800abe8 <pvPortMalloc+0x178>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d863      	bhi.n	800abb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaea:	4b40      	ldr	r3, [pc, #256]	; (800abec <pvPortMalloc+0x17c>)
 800aaec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aaee:	4b3f      	ldr	r3, [pc, #252]	; (800abec <pvPortMalloc+0x17c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaf4:	e004      	b.n	800ab00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d903      	bls.n	800ab12 <pvPortMalloc+0xa2>
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f1      	bne.n	800aaf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab12:	4b33      	ldr	r3, [pc, #204]	; (800abe0 <pvPortMalloc+0x170>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d04a      	beq.n	800abb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2208      	movs	r2, #8
 800ab22:	4413      	add	r3, r2
 800ab24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	1ad2      	subs	r2, r2, r3
 800ab36:	2308      	movs	r3, #8
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d91e      	bls.n	800ab7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4413      	add	r3, r2
 800ab44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <pvPortMalloc+0xf4>
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	613b      	str	r3, [r7, #16]
 800ab62:	e7fe      	b.n	800ab62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	1ad2      	subs	r2, r2, r3
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab76:	69b8      	ldr	r0, [r7, #24]
 800ab78:	f000 f8f6 	bl	800ad68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab7c:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <pvPortMalloc+0x178>)
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	4a18      	ldr	r2, [pc, #96]	; (800abe8 <pvPortMalloc+0x178>)
 800ab88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab8a:	4b17      	ldr	r3, [pc, #92]	; (800abe8 <pvPortMalloc+0x178>)
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	4b18      	ldr	r3, [pc, #96]	; (800abf0 <pvPortMalloc+0x180>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d203      	bcs.n	800ab9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <pvPortMalloc+0x178>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a15      	ldr	r2, [pc, #84]	; (800abf0 <pvPortMalloc+0x180>)
 800ab9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	4b10      	ldr	r3, [pc, #64]	; (800abe4 <pvPortMalloc+0x174>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	431a      	orrs	r2, r3
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abb2:	f7fe fb6f 	bl	8009294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d009      	beq.n	800abd4 <pvPortMalloc+0x164>
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e7fe      	b.n	800abd2 <pvPortMalloc+0x162>
	return pvReturn;
 800abd4:	69fb      	ldr	r3, [r7, #28]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3728      	adds	r7, #40	; 0x28
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20004af8 	.word	0x20004af8
 800abe4:	20004b04 	.word	0x20004b04
 800abe8:	20004afc 	.word	0x20004afc
 800abec:	20004af0 	.word	0x20004af0
 800abf0:	20004b00 	.word	0x20004b00

0800abf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d046      	beq.n	800ac94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac06:	2308      	movs	r3, #8
 800ac08:	425b      	negs	r3, r3
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	4b20      	ldr	r3, [pc, #128]	; (800ac9c <vPortFree+0xa8>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d109      	bne.n	800ac36 <vPortFree+0x42>
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	e7fe      	b.n	800ac34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d009      	beq.n	800ac52 <vPortFree+0x5e>
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	60bb      	str	r3, [r7, #8]
 800ac50:	e7fe      	b.n	800ac50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b11      	ldr	r3, [pc, #68]	; (800ac9c <vPortFree+0xa8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d019      	beq.n	800ac94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d115      	bne.n	800ac94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <vPortFree+0xa8>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	43db      	mvns	r3, r3
 800ac72:	401a      	ands	r2, r3
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac78:	f7fe fafe 	bl	8009278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <vPortFree+0xac>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4413      	add	r3, r2
 800ac86:	4a06      	ldr	r2, [pc, #24]	; (800aca0 <vPortFree+0xac>)
 800ac88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac8a:	6938      	ldr	r0, [r7, #16]
 800ac8c:	f000 f86c 	bl	800ad68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac90:	f7fe fb00 	bl	8009294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac94:	bf00      	nop
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20004b04 	.word	0x20004b04
 800aca0:	20004afc 	.word	0x20004afc

0800aca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800acae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acb0:	4b27      	ldr	r3, [pc, #156]	; (800ad50 <prvHeapInit+0xac>)
 800acb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00c      	beq.n	800acd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3307      	adds	r3, #7
 800acc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 0307 	bic.w	r3, r3, #7
 800acca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	4a1f      	ldr	r2, [pc, #124]	; (800ad50 <prvHeapInit+0xac>)
 800acd4:	4413      	add	r3, r2
 800acd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acdc:	4a1d      	ldr	r2, [pc, #116]	; (800ad54 <prvHeapInit+0xb0>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <prvHeapInit+0xb0>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	4413      	add	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acf0:	2208      	movs	r2, #8
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f023 0307 	bic.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a15      	ldr	r2, [pc, #84]	; (800ad58 <prvHeapInit+0xb4>)
 800ad04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad06:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <prvHeapInit+0xb4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <prvHeapInit+0xb4>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad24:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <prvHeapInit+0xb4>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <prvHeapInit+0xb8>)
 800ad32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <prvHeapInit+0xbc>)
 800ad3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad3c:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <prvHeapInit+0xc0>)
 800ad3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad42:	601a      	str	r2, [r3, #0]
}
 800ad44:	bf00      	nop
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	20000ef0 	.word	0x20000ef0
 800ad54:	20004af0 	.word	0x20004af0
 800ad58:	20004af8 	.word	0x20004af8
 800ad5c:	20004b00 	.word	0x20004b00
 800ad60:	20004afc 	.word	0x20004afc
 800ad64:	20004b04 	.word	0x20004b04

0800ad68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad70:	4b28      	ldr	r3, [pc, #160]	; (800ae14 <prvInsertBlockIntoFreeList+0xac>)
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	e002      	b.n	800ad7c <prvInsertBlockIntoFreeList+0x14>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d8f7      	bhi.n	800ad76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	4413      	add	r3, r2
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d108      	bne.n	800adaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	441a      	add	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	441a      	add	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d118      	bne.n	800adf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <prvInsertBlockIntoFreeList+0xb0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d00d      	beq.n	800ade6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	441a      	add	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e008      	b.n	800adf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ade6:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <prvInsertBlockIntoFreeList+0xb0>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	e003      	b.n	800adf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d002      	beq.n	800ae06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	20004af0 	.word	0x20004af0
 800ae18:	20004af8 	.word	0x20004af8

0800ae1c <__errno>:
 800ae1c:	4b01      	ldr	r3, [pc, #4]	; (800ae24 <__errno+0x8>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20000010 	.word	0x20000010

0800ae28 <__libc_init_array>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4e0d      	ldr	r6, [pc, #52]	; (800ae60 <__libc_init_array+0x38>)
 800ae2c:	4c0d      	ldr	r4, [pc, #52]	; (800ae64 <__libc_init_array+0x3c>)
 800ae2e:	1ba4      	subs	r4, r4, r6
 800ae30:	10a4      	asrs	r4, r4, #2
 800ae32:	2500      	movs	r5, #0
 800ae34:	42a5      	cmp	r5, r4
 800ae36:	d109      	bne.n	800ae4c <__libc_init_array+0x24>
 800ae38:	4e0b      	ldr	r6, [pc, #44]	; (800ae68 <__libc_init_array+0x40>)
 800ae3a:	4c0c      	ldr	r4, [pc, #48]	; (800ae6c <__libc_init_array+0x44>)
 800ae3c:	f001 ffd6 	bl	800cdec <_init>
 800ae40:	1ba4      	subs	r4, r4, r6
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	2500      	movs	r5, #0
 800ae46:	42a5      	cmp	r5, r4
 800ae48:	d105      	bne.n	800ae56 <__libc_init_array+0x2e>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae50:	4798      	blx	r3
 800ae52:	3501      	adds	r5, #1
 800ae54:	e7ee      	b.n	800ae34 <__libc_init_array+0xc>
 800ae56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae5a:	4798      	blx	r3
 800ae5c:	3501      	adds	r5, #1
 800ae5e:	e7f2      	b.n	800ae46 <__libc_init_array+0x1e>
 800ae60:	0800d358 	.word	0x0800d358
 800ae64:	0800d358 	.word	0x0800d358
 800ae68:	0800d358 	.word	0x0800d358
 800ae6c:	0800d35c 	.word	0x0800d35c

0800ae70 <memcpy>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	1e43      	subs	r3, r0, #1
 800ae74:	440a      	add	r2, r1
 800ae76:	4291      	cmp	r1, r2
 800ae78:	d100      	bne.n	800ae7c <memcpy+0xc>
 800ae7a:	bd10      	pop	{r4, pc}
 800ae7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae84:	e7f7      	b.n	800ae76 <memcpy+0x6>

0800ae86 <memset>:
 800ae86:	4402      	add	r2, r0
 800ae88:	4603      	mov	r3, r0
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d100      	bne.n	800ae90 <memset+0xa>
 800ae8e:	4770      	bx	lr
 800ae90:	f803 1b01 	strb.w	r1, [r3], #1
 800ae94:	e7f9      	b.n	800ae8a <memset+0x4>

0800ae96 <__cvt>:
 800ae96:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9a:	ec55 4b10 	vmov	r4, r5, d0
 800ae9e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800aea0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	460e      	mov	r6, r1
 800aea8:	4691      	mov	r9, r2
 800aeaa:	4619      	mov	r1, r3
 800aeac:	bfb8      	it	lt
 800aeae:	4622      	movlt	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	f027 0720 	bic.w	r7, r7, #32
 800aeb6:	bfbb      	ittet	lt
 800aeb8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aebc:	461d      	movlt	r5, r3
 800aebe:	2300      	movge	r3, #0
 800aec0:	232d      	movlt	r3, #45	; 0x2d
 800aec2:	bfb8      	it	lt
 800aec4:	4614      	movlt	r4, r2
 800aec6:	2f46      	cmp	r7, #70	; 0x46
 800aec8:	700b      	strb	r3, [r1, #0]
 800aeca:	d004      	beq.n	800aed6 <__cvt+0x40>
 800aecc:	2f45      	cmp	r7, #69	; 0x45
 800aece:	d100      	bne.n	800aed2 <__cvt+0x3c>
 800aed0:	3601      	adds	r6, #1
 800aed2:	2102      	movs	r1, #2
 800aed4:	e000      	b.n	800aed8 <__cvt+0x42>
 800aed6:	2103      	movs	r1, #3
 800aed8:	ab03      	add	r3, sp, #12
 800aeda:	9301      	str	r3, [sp, #4]
 800aedc:	ab02      	add	r3, sp, #8
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4632      	mov	r2, r6
 800aee2:	4653      	mov	r3, sl
 800aee4:	ec45 4b10 	vmov	d0, r4, r5
 800aee8:	f000 fbae 	bl	800b648 <_dtoa_r>
 800aeec:	2f47      	cmp	r7, #71	; 0x47
 800aeee:	4680      	mov	r8, r0
 800aef0:	d102      	bne.n	800aef8 <__cvt+0x62>
 800aef2:	f019 0f01 	tst.w	r9, #1
 800aef6:	d026      	beq.n	800af46 <__cvt+0xb0>
 800aef8:	2f46      	cmp	r7, #70	; 0x46
 800aefa:	eb08 0906 	add.w	r9, r8, r6
 800aefe:	d111      	bne.n	800af24 <__cvt+0x8e>
 800af00:	f898 3000 	ldrb.w	r3, [r8]
 800af04:	2b30      	cmp	r3, #48	; 0x30
 800af06:	d10a      	bne.n	800af1e <__cvt+0x88>
 800af08:	2200      	movs	r2, #0
 800af0a:	2300      	movs	r3, #0
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 fd92 	bl	8000a38 <__aeabi_dcmpeq>
 800af14:	b918      	cbnz	r0, 800af1e <__cvt+0x88>
 800af16:	f1c6 0601 	rsb	r6, r6, #1
 800af1a:	f8ca 6000 	str.w	r6, [sl]
 800af1e:	f8da 3000 	ldr.w	r3, [sl]
 800af22:	4499      	add	r9, r3
 800af24:	2200      	movs	r2, #0
 800af26:	2300      	movs	r3, #0
 800af28:	4620      	mov	r0, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	f7f5 fd84 	bl	8000a38 <__aeabi_dcmpeq>
 800af30:	b938      	cbnz	r0, 800af42 <__cvt+0xac>
 800af32:	2230      	movs	r2, #48	; 0x30
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	454b      	cmp	r3, r9
 800af38:	d205      	bcs.n	800af46 <__cvt+0xb0>
 800af3a:	1c59      	adds	r1, r3, #1
 800af3c:	9103      	str	r1, [sp, #12]
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	e7f8      	b.n	800af34 <__cvt+0x9e>
 800af42:	f8cd 900c 	str.w	r9, [sp, #12]
 800af46:	9b03      	ldr	r3, [sp, #12]
 800af48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af4a:	eba3 0308 	sub.w	r3, r3, r8
 800af4e:	4640      	mov	r0, r8
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	b004      	add	sp, #16
 800af54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800af58 <__exponent>:
 800af58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af5a:	2900      	cmp	r1, #0
 800af5c:	4604      	mov	r4, r0
 800af5e:	bfba      	itte	lt
 800af60:	4249      	neglt	r1, r1
 800af62:	232d      	movlt	r3, #45	; 0x2d
 800af64:	232b      	movge	r3, #43	; 0x2b
 800af66:	2909      	cmp	r1, #9
 800af68:	f804 2b02 	strb.w	r2, [r4], #2
 800af6c:	7043      	strb	r3, [r0, #1]
 800af6e:	dd20      	ble.n	800afb2 <__exponent+0x5a>
 800af70:	f10d 0307 	add.w	r3, sp, #7
 800af74:	461f      	mov	r7, r3
 800af76:	260a      	movs	r6, #10
 800af78:	fb91 f5f6 	sdiv	r5, r1, r6
 800af7c:	fb06 1115 	mls	r1, r6, r5, r1
 800af80:	3130      	adds	r1, #48	; 0x30
 800af82:	2d09      	cmp	r5, #9
 800af84:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af88:	f103 32ff 	add.w	r2, r3, #4294967295
 800af8c:	4629      	mov	r1, r5
 800af8e:	dc09      	bgt.n	800afa4 <__exponent+0x4c>
 800af90:	3130      	adds	r1, #48	; 0x30
 800af92:	3b02      	subs	r3, #2
 800af94:	f802 1c01 	strb.w	r1, [r2, #-1]
 800af98:	42bb      	cmp	r3, r7
 800af9a:	4622      	mov	r2, r4
 800af9c:	d304      	bcc.n	800afa8 <__exponent+0x50>
 800af9e:	1a10      	subs	r0, r2, r0
 800afa0:	b003      	add	sp, #12
 800afa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa4:	4613      	mov	r3, r2
 800afa6:	e7e7      	b.n	800af78 <__exponent+0x20>
 800afa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afac:	f804 2b01 	strb.w	r2, [r4], #1
 800afb0:	e7f2      	b.n	800af98 <__exponent+0x40>
 800afb2:	2330      	movs	r3, #48	; 0x30
 800afb4:	4419      	add	r1, r3
 800afb6:	7083      	strb	r3, [r0, #2]
 800afb8:	1d02      	adds	r2, r0, #4
 800afba:	70c1      	strb	r1, [r0, #3]
 800afbc:	e7ef      	b.n	800af9e <__exponent+0x46>
	...

0800afc0 <_printf_float>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	b08d      	sub	sp, #52	; 0x34
 800afc6:	460c      	mov	r4, r1
 800afc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800afcc:	4616      	mov	r6, r2
 800afce:	461f      	mov	r7, r3
 800afd0:	4605      	mov	r5, r0
 800afd2:	f001 f8f1 	bl	800c1b8 <_localeconv_r>
 800afd6:	6803      	ldr	r3, [r0, #0]
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f5 f900 	bl	80001e0 <strlen>
 800afe0:	2300      	movs	r3, #0
 800afe2:	930a      	str	r3, [sp, #40]	; 0x28
 800afe4:	f8d8 3000 	ldr.w	r3, [r8]
 800afe8:	9005      	str	r0, [sp, #20]
 800afea:	3307      	adds	r3, #7
 800afec:	f023 0307 	bic.w	r3, r3, #7
 800aff0:	f103 0208 	add.w	r2, r3, #8
 800aff4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aff8:	f8d4 b000 	ldr.w	fp, [r4]
 800affc:	f8c8 2000 	str.w	r2, [r8]
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b008:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b00c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b010:	9307      	str	r3, [sp, #28]
 800b012:	f8cd 8018 	str.w	r8, [sp, #24]
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	4ba7      	ldr	r3, [pc, #668]	; (800b2b8 <_printf_float+0x2f8>)
 800b01c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b020:	f7f5 fd3c 	bl	8000a9c <__aeabi_dcmpun>
 800b024:	bb70      	cbnz	r0, 800b084 <_printf_float+0xc4>
 800b026:	f04f 32ff 	mov.w	r2, #4294967295
 800b02a:	4ba3      	ldr	r3, [pc, #652]	; (800b2b8 <_printf_float+0x2f8>)
 800b02c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b030:	f7f5 fd16 	bl	8000a60 <__aeabi_dcmple>
 800b034:	bb30      	cbnz	r0, 800b084 <_printf_float+0xc4>
 800b036:	2200      	movs	r2, #0
 800b038:	2300      	movs	r3, #0
 800b03a:	4640      	mov	r0, r8
 800b03c:	4649      	mov	r1, r9
 800b03e:	f7f5 fd05 	bl	8000a4c <__aeabi_dcmplt>
 800b042:	b110      	cbz	r0, 800b04a <_printf_float+0x8a>
 800b044:	232d      	movs	r3, #45	; 0x2d
 800b046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b04a:	4a9c      	ldr	r2, [pc, #624]	; (800b2bc <_printf_float+0x2fc>)
 800b04c:	4b9c      	ldr	r3, [pc, #624]	; (800b2c0 <_printf_float+0x300>)
 800b04e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b052:	bf8c      	ite	hi
 800b054:	4690      	movhi	r8, r2
 800b056:	4698      	movls	r8, r3
 800b058:	2303      	movs	r3, #3
 800b05a:	f02b 0204 	bic.w	r2, fp, #4
 800b05e:	6123      	str	r3, [r4, #16]
 800b060:	6022      	str	r2, [r4, #0]
 800b062:	f04f 0900 	mov.w	r9, #0
 800b066:	9700      	str	r7, [sp, #0]
 800b068:	4633      	mov	r3, r6
 800b06a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b06c:	4621      	mov	r1, r4
 800b06e:	4628      	mov	r0, r5
 800b070:	f000 f9e6 	bl	800b440 <_printf_common>
 800b074:	3001      	adds	r0, #1
 800b076:	f040 808d 	bne.w	800b194 <_printf_float+0x1d4>
 800b07a:	f04f 30ff 	mov.w	r0, #4294967295
 800b07e:	b00d      	add	sp, #52	; 0x34
 800b080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b084:	4642      	mov	r2, r8
 800b086:	464b      	mov	r3, r9
 800b088:	4640      	mov	r0, r8
 800b08a:	4649      	mov	r1, r9
 800b08c:	f7f5 fd06 	bl	8000a9c <__aeabi_dcmpun>
 800b090:	b110      	cbz	r0, 800b098 <_printf_float+0xd8>
 800b092:	4a8c      	ldr	r2, [pc, #560]	; (800b2c4 <_printf_float+0x304>)
 800b094:	4b8c      	ldr	r3, [pc, #560]	; (800b2c8 <_printf_float+0x308>)
 800b096:	e7da      	b.n	800b04e <_printf_float+0x8e>
 800b098:	6861      	ldr	r1, [r4, #4]
 800b09a:	1c4b      	adds	r3, r1, #1
 800b09c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b0a0:	a80a      	add	r0, sp, #40	; 0x28
 800b0a2:	d13e      	bne.n	800b122 <_printf_float+0x162>
 800b0a4:	2306      	movs	r3, #6
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b0ae:	ab09      	add	r3, sp, #36	; 0x24
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	ec49 8b10 	vmov	d0, r8, r9
 800b0b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0ba:	6022      	str	r2, [r4, #0]
 800b0bc:	f8cd a004 	str.w	sl, [sp, #4]
 800b0c0:	6861      	ldr	r1, [r4, #4]
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f7ff fee7 	bl	800ae96 <__cvt>
 800b0c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b0cc:	2b47      	cmp	r3, #71	; 0x47
 800b0ce:	4680      	mov	r8, r0
 800b0d0:	d109      	bne.n	800b0e6 <_printf_float+0x126>
 800b0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d4:	1cd8      	adds	r0, r3, #3
 800b0d6:	db02      	blt.n	800b0de <_printf_float+0x11e>
 800b0d8:	6862      	ldr	r2, [r4, #4]
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	dd47      	ble.n	800b16e <_printf_float+0x1ae>
 800b0de:	f1aa 0a02 	sub.w	sl, sl, #2
 800b0e2:	fa5f fa8a 	uxtb.w	sl, sl
 800b0e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b0ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ec:	d824      	bhi.n	800b138 <_printf_float+0x178>
 800b0ee:	3901      	subs	r1, #1
 800b0f0:	4652      	mov	r2, sl
 800b0f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0f6:	9109      	str	r1, [sp, #36]	; 0x24
 800b0f8:	f7ff ff2e 	bl	800af58 <__exponent>
 800b0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0fe:	1813      	adds	r3, r2, r0
 800b100:	2a01      	cmp	r2, #1
 800b102:	4681      	mov	r9, r0
 800b104:	6123      	str	r3, [r4, #16]
 800b106:	dc02      	bgt.n	800b10e <_printf_float+0x14e>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	07d1      	lsls	r1, r2, #31
 800b10c:	d501      	bpl.n	800b112 <_printf_float+0x152>
 800b10e:	3301      	adds	r3, #1
 800b110:	6123      	str	r3, [r4, #16]
 800b112:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0a5      	beq.n	800b066 <_printf_float+0xa6>
 800b11a:	232d      	movs	r3, #45	; 0x2d
 800b11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b120:	e7a1      	b.n	800b066 <_printf_float+0xa6>
 800b122:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b126:	f000 8177 	beq.w	800b418 <_printf_float+0x458>
 800b12a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b12e:	d1bb      	bne.n	800b0a8 <_printf_float+0xe8>
 800b130:	2900      	cmp	r1, #0
 800b132:	d1b9      	bne.n	800b0a8 <_printf_float+0xe8>
 800b134:	2301      	movs	r3, #1
 800b136:	e7b6      	b.n	800b0a6 <_printf_float+0xe6>
 800b138:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b13c:	d119      	bne.n	800b172 <_printf_float+0x1b2>
 800b13e:	2900      	cmp	r1, #0
 800b140:	6863      	ldr	r3, [r4, #4]
 800b142:	dd0c      	ble.n	800b15e <_printf_float+0x19e>
 800b144:	6121      	str	r1, [r4, #16]
 800b146:	b913      	cbnz	r3, 800b14e <_printf_float+0x18e>
 800b148:	6822      	ldr	r2, [r4, #0]
 800b14a:	07d2      	lsls	r2, r2, #31
 800b14c:	d502      	bpl.n	800b154 <_printf_float+0x194>
 800b14e:	3301      	adds	r3, #1
 800b150:	440b      	add	r3, r1
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b156:	65a3      	str	r3, [r4, #88]	; 0x58
 800b158:	f04f 0900 	mov.w	r9, #0
 800b15c:	e7d9      	b.n	800b112 <_printf_float+0x152>
 800b15e:	b913      	cbnz	r3, 800b166 <_printf_float+0x1a6>
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	07d0      	lsls	r0, r2, #31
 800b164:	d501      	bpl.n	800b16a <_printf_float+0x1aa>
 800b166:	3302      	adds	r3, #2
 800b168:	e7f3      	b.n	800b152 <_printf_float+0x192>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e7f1      	b.n	800b152 <_printf_float+0x192>
 800b16e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b172:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b176:	4293      	cmp	r3, r2
 800b178:	db05      	blt.n	800b186 <_printf_float+0x1c6>
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	07d1      	lsls	r1, r2, #31
 800b180:	d5e8      	bpl.n	800b154 <_printf_float+0x194>
 800b182:	3301      	adds	r3, #1
 800b184:	e7e5      	b.n	800b152 <_printf_float+0x192>
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfd4      	ite	le
 800b18a:	f1c3 0302 	rsble	r3, r3, #2
 800b18e:	2301      	movgt	r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	e7de      	b.n	800b152 <_printf_float+0x192>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	055a      	lsls	r2, r3, #21
 800b198:	d407      	bmi.n	800b1aa <_printf_float+0x1ea>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	4642      	mov	r2, r8
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d12b      	bne.n	800b200 <_printf_float+0x240>
 800b1a8:	e767      	b.n	800b07a <_printf_float+0xba>
 800b1aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b1ae:	f240 80dc 	bls.w	800b36a <_printf_float+0x3aa>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1ba:	f7f5 fc3d 	bl	8000a38 <__aeabi_dcmpeq>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d033      	beq.n	800b22a <_printf_float+0x26a>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4a41      	ldr	r2, [pc, #260]	; (800b2cc <_printf_float+0x30c>)
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f43f af54 	beq.w	800b07a <_printf_float+0xba>
 800b1d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	db02      	blt.n	800b1e0 <_printf_float+0x220>
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	07d8      	lsls	r0, r3, #31
 800b1de:	d50f      	bpl.n	800b200 <_printf_float+0x240>
 800b1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f43f af45 	beq.w	800b07a <_printf_float+0xba>
 800b1f0:	f04f 0800 	mov.w	r8, #0
 800b1f4:	f104 091a 	add.w	r9, r4, #26
 800b1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	4543      	cmp	r3, r8
 800b1fe:	dc09      	bgt.n	800b214 <_printf_float+0x254>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	079b      	lsls	r3, r3, #30
 800b204:	f100 8103 	bmi.w	800b40e <_printf_float+0x44e>
 800b208:	68e0      	ldr	r0, [r4, #12]
 800b20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20c:	4298      	cmp	r0, r3
 800b20e:	bfb8      	it	lt
 800b210:	4618      	movlt	r0, r3
 800b212:	e734      	b.n	800b07e <_printf_float+0xbe>
 800b214:	2301      	movs	r3, #1
 800b216:	464a      	mov	r2, r9
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	f43f af2b 	beq.w	800b07a <_printf_float+0xba>
 800b224:	f108 0801 	add.w	r8, r8, #1
 800b228:	e7e6      	b.n	800b1f8 <_printf_float+0x238>
 800b22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dc2b      	bgt.n	800b288 <_printf_float+0x2c8>
 800b230:	2301      	movs	r3, #1
 800b232:	4a26      	ldr	r2, [pc, #152]	; (800b2cc <_printf_float+0x30c>)
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	47b8      	blx	r7
 800b23a:	3001      	adds	r0, #1
 800b23c:	f43f af1d 	beq.w	800b07a <_printf_float+0xba>
 800b240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b242:	b923      	cbnz	r3, 800b24e <_printf_float+0x28e>
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	b913      	cbnz	r3, 800b24e <_printf_float+0x28e>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	07d9      	lsls	r1, r3, #31
 800b24c:	d5d8      	bpl.n	800b200 <_printf_float+0x240>
 800b24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	f43f af0e 	beq.w	800b07a <_printf_float+0xba>
 800b25e:	f04f 0900 	mov.w	r9, #0
 800b262:	f104 0a1a 	add.w	sl, r4, #26
 800b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b268:	425b      	negs	r3, r3
 800b26a:	454b      	cmp	r3, r9
 800b26c:	dc01      	bgt.n	800b272 <_printf_float+0x2b2>
 800b26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b270:	e794      	b.n	800b19c <_printf_float+0x1dc>
 800b272:	2301      	movs	r3, #1
 800b274:	4652      	mov	r2, sl
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	47b8      	blx	r7
 800b27c:	3001      	adds	r0, #1
 800b27e:	f43f aefc 	beq.w	800b07a <_printf_float+0xba>
 800b282:	f109 0901 	add.w	r9, r9, #1
 800b286:	e7ee      	b.n	800b266 <_printf_float+0x2a6>
 800b288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b28c:	429a      	cmp	r2, r3
 800b28e:	bfa8      	it	ge
 800b290:	461a      	movge	r2, r3
 800b292:	2a00      	cmp	r2, #0
 800b294:	4691      	mov	r9, r2
 800b296:	dd07      	ble.n	800b2a8 <_printf_float+0x2e8>
 800b298:	4613      	mov	r3, r2
 800b29a:	4631      	mov	r1, r6
 800b29c:	4642      	mov	r2, r8
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f aee9 	beq.w	800b07a <_printf_float+0xba>
 800b2a8:	f104 031a 	add.w	r3, r4, #26
 800b2ac:	f04f 0b00 	mov.w	fp, #0
 800b2b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2b4:	9306      	str	r3, [sp, #24]
 800b2b6:	e015      	b.n	800b2e4 <_printf_float+0x324>
 800b2b8:	7fefffff 	.word	0x7fefffff
 800b2bc:	0800d0ec 	.word	0x0800d0ec
 800b2c0:	0800d0e8 	.word	0x0800d0e8
 800b2c4:	0800d0f4 	.word	0x0800d0f4
 800b2c8:	0800d0f0 	.word	0x0800d0f0
 800b2cc:	0800d0f8 	.word	0x0800d0f8
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	9a06      	ldr	r2, [sp, #24]
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f aecd 	beq.w	800b07a <_printf_float+0xba>
 800b2e0:	f10b 0b01 	add.w	fp, fp, #1
 800b2e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b2e8:	ebaa 0309 	sub.w	r3, sl, r9
 800b2ec:	455b      	cmp	r3, fp
 800b2ee:	dcef      	bgt.n	800b2d0 <_printf_float+0x310>
 800b2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	44d0      	add	r8, sl
 800b2f8:	db15      	blt.n	800b326 <_printf_float+0x366>
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	07da      	lsls	r2, r3, #31
 800b2fe:	d412      	bmi.n	800b326 <_printf_float+0x366>
 800b300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b302:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b304:	eba3 020a 	sub.w	r2, r3, sl
 800b308:	eba3 0a01 	sub.w	sl, r3, r1
 800b30c:	4592      	cmp	sl, r2
 800b30e:	bfa8      	it	ge
 800b310:	4692      	movge	sl, r2
 800b312:	f1ba 0f00 	cmp.w	sl, #0
 800b316:	dc0e      	bgt.n	800b336 <_printf_float+0x376>
 800b318:	f04f 0800 	mov.w	r8, #0
 800b31c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b320:	f104 091a 	add.w	r9, r4, #26
 800b324:	e019      	b.n	800b35a <_printf_float+0x39a>
 800b326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	d1e5      	bne.n	800b300 <_printf_float+0x340>
 800b334:	e6a1      	b.n	800b07a <_printf_float+0xba>
 800b336:	4653      	mov	r3, sl
 800b338:	4642      	mov	r2, r8
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b8      	blx	r7
 800b340:	3001      	adds	r0, #1
 800b342:	d1e9      	bne.n	800b318 <_printf_float+0x358>
 800b344:	e699      	b.n	800b07a <_printf_float+0xba>
 800b346:	2301      	movs	r3, #1
 800b348:	464a      	mov	r2, r9
 800b34a:	4631      	mov	r1, r6
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b8      	blx	r7
 800b350:	3001      	adds	r0, #1
 800b352:	f43f ae92 	beq.w	800b07a <_printf_float+0xba>
 800b356:	f108 0801 	add.w	r8, r8, #1
 800b35a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	eba3 030a 	sub.w	r3, r3, sl
 800b364:	4543      	cmp	r3, r8
 800b366:	dcee      	bgt.n	800b346 <_printf_float+0x386>
 800b368:	e74a      	b.n	800b200 <_printf_float+0x240>
 800b36a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b36c:	2a01      	cmp	r2, #1
 800b36e:	dc01      	bgt.n	800b374 <_printf_float+0x3b4>
 800b370:	07db      	lsls	r3, r3, #31
 800b372:	d53a      	bpl.n	800b3ea <_printf_float+0x42a>
 800b374:	2301      	movs	r3, #1
 800b376:	4642      	mov	r2, r8
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b8      	blx	r7
 800b37e:	3001      	adds	r0, #1
 800b380:	f43f ae7b 	beq.w	800b07a <_printf_float+0xba>
 800b384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	f108 0801 	add.w	r8, r8, #1
 800b394:	f43f ae71 	beq.w	800b07a <_printf_float+0xba>
 800b398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39a:	2200      	movs	r2, #0
 800b39c:	f103 3aff 	add.w	sl, r3, #4294967295
 800b3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f7f5 fb47 	bl	8000a38 <__aeabi_dcmpeq>
 800b3aa:	b9c8      	cbnz	r0, 800b3e0 <_printf_float+0x420>
 800b3ac:	4653      	mov	r3, sl
 800b3ae:	4642      	mov	r2, r8
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b8      	blx	r7
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	d10e      	bne.n	800b3d8 <_printf_float+0x418>
 800b3ba:	e65e      	b.n	800b07a <_printf_float+0xba>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4652      	mov	r2, sl
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	47b8      	blx	r7
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	f43f ae57 	beq.w	800b07a <_printf_float+0xba>
 800b3cc:	f108 0801 	add.w	r8, r8, #1
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	4543      	cmp	r3, r8
 800b3d6:	dcf1      	bgt.n	800b3bc <_printf_float+0x3fc>
 800b3d8:	464b      	mov	r3, r9
 800b3da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3de:	e6de      	b.n	800b19e <_printf_float+0x1de>
 800b3e0:	f04f 0800 	mov.w	r8, #0
 800b3e4:	f104 0a1a 	add.w	sl, r4, #26
 800b3e8:	e7f2      	b.n	800b3d0 <_printf_float+0x410>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e7df      	b.n	800b3ae <_printf_float+0x3ee>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	464a      	mov	r2, r9
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b8      	blx	r7
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f43f ae3e 	beq.w	800b07a <_printf_float+0xba>
 800b3fe:	f108 0801 	add.w	r8, r8, #1
 800b402:	68e3      	ldr	r3, [r4, #12]
 800b404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b406:	1a9b      	subs	r3, r3, r2
 800b408:	4543      	cmp	r3, r8
 800b40a:	dcf0      	bgt.n	800b3ee <_printf_float+0x42e>
 800b40c:	e6fc      	b.n	800b208 <_printf_float+0x248>
 800b40e:	f04f 0800 	mov.w	r8, #0
 800b412:	f104 0919 	add.w	r9, r4, #25
 800b416:	e7f4      	b.n	800b402 <_printf_float+0x442>
 800b418:	2900      	cmp	r1, #0
 800b41a:	f43f ae8b 	beq.w	800b134 <_printf_float+0x174>
 800b41e:	2300      	movs	r3, #0
 800b420:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b424:	ab09      	add	r3, sp, #36	; 0x24
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	ec49 8b10 	vmov	d0, r8, r9
 800b42c:	6022      	str	r2, [r4, #0]
 800b42e:	f8cd a004 	str.w	sl, [sp, #4]
 800b432:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b436:	4628      	mov	r0, r5
 800b438:	f7ff fd2d 	bl	800ae96 <__cvt>
 800b43c:	4680      	mov	r8, r0
 800b43e:	e648      	b.n	800b0d2 <_printf_float+0x112>

0800b440 <_printf_common>:
 800b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	4691      	mov	r9, r2
 800b446:	461f      	mov	r7, r3
 800b448:	688a      	ldr	r2, [r1, #8]
 800b44a:	690b      	ldr	r3, [r1, #16]
 800b44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b450:	4293      	cmp	r3, r2
 800b452:	bfb8      	it	lt
 800b454:	4613      	movlt	r3, r2
 800b456:	f8c9 3000 	str.w	r3, [r9]
 800b45a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b45e:	4606      	mov	r6, r0
 800b460:	460c      	mov	r4, r1
 800b462:	b112      	cbz	r2, 800b46a <_printf_common+0x2a>
 800b464:	3301      	adds	r3, #1
 800b466:	f8c9 3000 	str.w	r3, [r9]
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	0699      	lsls	r1, r3, #26
 800b46e:	bf42      	ittt	mi
 800b470:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b474:	3302      	addmi	r3, #2
 800b476:	f8c9 3000 	strmi.w	r3, [r9]
 800b47a:	6825      	ldr	r5, [r4, #0]
 800b47c:	f015 0506 	ands.w	r5, r5, #6
 800b480:	d107      	bne.n	800b492 <_printf_common+0x52>
 800b482:	f104 0a19 	add.w	sl, r4, #25
 800b486:	68e3      	ldr	r3, [r4, #12]
 800b488:	f8d9 2000 	ldr.w	r2, [r9]
 800b48c:	1a9b      	subs	r3, r3, r2
 800b48e:	42ab      	cmp	r3, r5
 800b490:	dc28      	bgt.n	800b4e4 <_printf_common+0xa4>
 800b492:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	3300      	adds	r3, #0
 800b49a:	bf18      	it	ne
 800b49c:	2301      	movne	r3, #1
 800b49e:	0692      	lsls	r2, r2, #26
 800b4a0:	d42d      	bmi.n	800b4fe <_printf_common+0xbe>
 800b4a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	47c0      	blx	r8
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d020      	beq.n	800b4f2 <_printf_common+0xb2>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	68e5      	ldr	r5, [r4, #12]
 800b4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b4b8:	f003 0306 	and.w	r3, r3, #6
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	bf08      	it	eq
 800b4c0:	1aad      	subeq	r5, r5, r2
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	6922      	ldr	r2, [r4, #16]
 800b4c6:	bf0c      	ite	eq
 800b4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4cc:	2500      	movne	r5, #0
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	bfc4      	itt	gt
 800b4d2:	1a9b      	subgt	r3, r3, r2
 800b4d4:	18ed      	addgt	r5, r5, r3
 800b4d6:	f04f 0900 	mov.w	r9, #0
 800b4da:	341a      	adds	r4, #26
 800b4dc:	454d      	cmp	r5, r9
 800b4de:	d11a      	bne.n	800b516 <_printf_common+0xd6>
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e008      	b.n	800b4f6 <_printf_common+0xb6>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	47c0      	blx	r8
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d103      	bne.n	800b4fa <_printf_common+0xba>
 800b4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fa:	3501      	adds	r5, #1
 800b4fc:	e7c3      	b.n	800b486 <_printf_common+0x46>
 800b4fe:	18e1      	adds	r1, r4, r3
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	2030      	movs	r0, #48	; 0x30
 800b504:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b508:	4422      	add	r2, r4
 800b50a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b50e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b512:	3302      	adds	r3, #2
 800b514:	e7c5      	b.n	800b4a2 <_printf_common+0x62>
 800b516:	2301      	movs	r3, #1
 800b518:	4622      	mov	r2, r4
 800b51a:	4639      	mov	r1, r7
 800b51c:	4630      	mov	r0, r6
 800b51e:	47c0      	blx	r8
 800b520:	3001      	adds	r0, #1
 800b522:	d0e6      	beq.n	800b4f2 <_printf_common+0xb2>
 800b524:	f109 0901 	add.w	r9, r9, #1
 800b528:	e7d8      	b.n	800b4dc <_printf_common+0x9c>

0800b52a <quorem>:
 800b52a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52e:	6903      	ldr	r3, [r0, #16]
 800b530:	690c      	ldr	r4, [r1, #16]
 800b532:	42a3      	cmp	r3, r4
 800b534:	4680      	mov	r8, r0
 800b536:	f2c0 8082 	blt.w	800b63e <quorem+0x114>
 800b53a:	3c01      	subs	r4, #1
 800b53c:	f101 0714 	add.w	r7, r1, #20
 800b540:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b544:	f100 0614 	add.w	r6, r0, #20
 800b548:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b54c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b550:	eb06 030c 	add.w	r3, r6, ip
 800b554:	3501      	adds	r5, #1
 800b556:	eb07 090c 	add.w	r9, r7, ip
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	fbb0 f5f5 	udiv	r5, r0, r5
 800b560:	b395      	cbz	r5, 800b5c8 <quorem+0x9e>
 800b562:	f04f 0a00 	mov.w	sl, #0
 800b566:	4638      	mov	r0, r7
 800b568:	46b6      	mov	lr, r6
 800b56a:	46d3      	mov	fp, sl
 800b56c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b570:	b293      	uxth	r3, r2
 800b572:	fb05 a303 	mla	r3, r5, r3, sl
 800b576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	ebab 0303 	sub.w	r3, fp, r3
 800b580:	0c12      	lsrs	r2, r2, #16
 800b582:	f8de b000 	ldr.w	fp, [lr]
 800b586:	fb05 a202 	mla	r2, r5, r2, sl
 800b58a:	fa13 f38b 	uxtah	r3, r3, fp
 800b58e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b592:	fa1f fb82 	uxth.w	fp, r2
 800b596:	f8de 2000 	ldr.w	r2, [lr]
 800b59a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b59e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5a8:	4581      	cmp	r9, r0
 800b5aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b5ae:	f84e 3b04 	str.w	r3, [lr], #4
 800b5b2:	d2db      	bcs.n	800b56c <quorem+0x42>
 800b5b4:	f856 300c 	ldr.w	r3, [r6, ip]
 800b5b8:	b933      	cbnz	r3, 800b5c8 <quorem+0x9e>
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	3b04      	subs	r3, #4
 800b5be:	429e      	cmp	r6, r3
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	d330      	bcc.n	800b626 <quorem+0xfc>
 800b5c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	f001 f821 	bl	800c610 <__mcmp>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	db25      	blt.n	800b61e <quorem+0xf4>
 800b5d2:	3501      	adds	r5, #1
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f04f 0c00 	mov.w	ip, #0
 800b5da:	f857 2b04 	ldr.w	r2, [r7], #4
 800b5de:	f8d0 e000 	ldr.w	lr, [r0]
 800b5e2:	b293      	uxth	r3, r2
 800b5e4:	ebac 0303 	sub.w	r3, ip, r3
 800b5e8:	0c12      	lsrs	r2, r2, #16
 800b5ea:	fa13 f38e 	uxtah	r3, r3, lr
 800b5ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b5f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5fc:	45b9      	cmp	r9, r7
 800b5fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b602:	f840 3b04 	str.w	r3, [r0], #4
 800b606:	d2e8      	bcs.n	800b5da <quorem+0xb0>
 800b608:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b60c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b610:	b92a      	cbnz	r2, 800b61e <quorem+0xf4>
 800b612:	3b04      	subs	r3, #4
 800b614:	429e      	cmp	r6, r3
 800b616:	461a      	mov	r2, r3
 800b618:	d30b      	bcc.n	800b632 <quorem+0x108>
 800b61a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b61e:	4628      	mov	r0, r5
 800b620:	b003      	add	sp, #12
 800b622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	3b04      	subs	r3, #4
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	d1ca      	bne.n	800b5c4 <quorem+0x9a>
 800b62e:	3c01      	subs	r4, #1
 800b630:	e7c5      	b.n	800b5be <quorem+0x94>
 800b632:	6812      	ldr	r2, [r2, #0]
 800b634:	3b04      	subs	r3, #4
 800b636:	2a00      	cmp	r2, #0
 800b638:	d1ef      	bne.n	800b61a <quorem+0xf0>
 800b63a:	3c01      	subs	r4, #1
 800b63c:	e7ea      	b.n	800b614 <quorem+0xea>
 800b63e:	2000      	movs	r0, #0
 800b640:	e7ee      	b.n	800b620 <quorem+0xf6>
 800b642:	0000      	movs	r0, r0
 800b644:	0000      	movs	r0, r0
	...

0800b648 <_dtoa_r>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	ec57 6b10 	vmov	r6, r7, d0
 800b650:	b097      	sub	sp, #92	; 0x5c
 800b652:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b654:	9106      	str	r1, [sp, #24]
 800b656:	4604      	mov	r4, r0
 800b658:	920b      	str	r2, [sp, #44]	; 0x2c
 800b65a:	9312      	str	r3, [sp, #72]	; 0x48
 800b65c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b660:	e9cd 6700 	strd	r6, r7, [sp]
 800b664:	b93d      	cbnz	r5, 800b676 <_dtoa_r+0x2e>
 800b666:	2010      	movs	r0, #16
 800b668:	f000 fdb4 	bl	800c1d4 <malloc>
 800b66c:	6260      	str	r0, [r4, #36]	; 0x24
 800b66e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b672:	6005      	str	r5, [r0, #0]
 800b674:	60c5      	str	r5, [r0, #12]
 800b676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	b151      	cbz	r1, 800b692 <_dtoa_r+0x4a>
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	604a      	str	r2, [r1, #4]
 800b680:	2301      	movs	r3, #1
 800b682:	4093      	lsls	r3, r2
 800b684:	608b      	str	r3, [r1, #8]
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fde0 	bl	800c24c <_Bfree>
 800b68c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	1e3b      	subs	r3, r7, #0
 800b694:	bfbb      	ittet	lt
 800b696:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b69a:	9301      	strlt	r3, [sp, #4]
 800b69c:	2300      	movge	r3, #0
 800b69e:	2201      	movlt	r2, #1
 800b6a0:	bfac      	ite	ge
 800b6a2:	f8c8 3000 	strge.w	r3, [r8]
 800b6a6:	f8c8 2000 	strlt.w	r2, [r8]
 800b6aa:	4baf      	ldr	r3, [pc, #700]	; (800b968 <_dtoa_r+0x320>)
 800b6ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b6b0:	ea33 0308 	bics.w	r3, r3, r8
 800b6b4:	d114      	bne.n	800b6e0 <_dtoa_r+0x98>
 800b6b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6b8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	b923      	cbnz	r3, 800b6cc <_dtoa_r+0x84>
 800b6c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f000 8542 	beq.w	800c150 <_dtoa_r+0xb08>
 800b6cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b97c <_dtoa_r+0x334>
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 8544 	beq.w	800c160 <_dtoa_r+0xb18>
 800b6d8:	f10b 0303 	add.w	r3, fp, #3
 800b6dc:	f000 bd3e 	b.w	800c15c <_dtoa_r+0xb14>
 800b6e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	f7f5 f9a4 	bl	8000a38 <__aeabi_dcmpeq>
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	b168      	cbz	r0, 800b710 <_dtoa_r+0xc8>
 800b6f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	6013      	str	r3, [r2, #0]
 800b6fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f000 8524 	beq.w	800c14a <_dtoa_r+0xb02>
 800b702:	4b9a      	ldr	r3, [pc, #616]	; (800b96c <_dtoa_r+0x324>)
 800b704:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b706:	f103 3bff 	add.w	fp, r3, #4294967295
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	f000 bd28 	b.w	800c160 <_dtoa_r+0xb18>
 800b710:	aa14      	add	r2, sp, #80	; 0x50
 800b712:	a915      	add	r1, sp, #84	; 0x54
 800b714:	ec47 6b10 	vmov	d0, r6, r7
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 fff0 	bl	800c6fe <__d2b>
 800b71e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b722:	9004      	str	r0, [sp, #16]
 800b724:	2d00      	cmp	r5, #0
 800b726:	d07c      	beq.n	800b822 <_dtoa_r+0x1da>
 800b728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b72c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b730:	46b2      	mov	sl, r6
 800b732:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b73a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b73e:	2200      	movs	r2, #0
 800b740:	4b8b      	ldr	r3, [pc, #556]	; (800b970 <_dtoa_r+0x328>)
 800b742:	4650      	mov	r0, sl
 800b744:	4659      	mov	r1, fp
 800b746:	f7f4 fd57 	bl	80001f8 <__aeabi_dsub>
 800b74a:	a381      	add	r3, pc, #516	; (adr r3, 800b950 <_dtoa_r+0x308>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 ff0a 	bl	8000568 <__aeabi_dmul>
 800b754:	a380      	add	r3, pc, #512	; (adr r3, 800b958 <_dtoa_r+0x310>)
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	f7f4 fd4f 	bl	80001fc <__adddf3>
 800b75e:	4606      	mov	r6, r0
 800b760:	4628      	mov	r0, r5
 800b762:	460f      	mov	r7, r1
 800b764:	f7f4 fe96 	bl	8000494 <__aeabi_i2d>
 800b768:	a37d      	add	r3, pc, #500	; (adr r3, 800b960 <_dtoa_r+0x318>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7f4 fefb 	bl	8000568 <__aeabi_dmul>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4630      	mov	r0, r6
 800b778:	4639      	mov	r1, r7
 800b77a:	f7f4 fd3f 	bl	80001fc <__adddf3>
 800b77e:	4606      	mov	r6, r0
 800b780:	460f      	mov	r7, r1
 800b782:	f7f5 f9a1 	bl	8000ac8 <__aeabi_d2iz>
 800b786:	2200      	movs	r2, #0
 800b788:	4682      	mov	sl, r0
 800b78a:	2300      	movs	r3, #0
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f5 f95c 	bl	8000a4c <__aeabi_dcmplt>
 800b794:	b148      	cbz	r0, 800b7aa <_dtoa_r+0x162>
 800b796:	4650      	mov	r0, sl
 800b798:	f7f4 fe7c 	bl	8000494 <__aeabi_i2d>
 800b79c:	4632      	mov	r2, r6
 800b79e:	463b      	mov	r3, r7
 800b7a0:	f7f5 f94a 	bl	8000a38 <__aeabi_dcmpeq>
 800b7a4:	b908      	cbnz	r0, 800b7aa <_dtoa_r+0x162>
 800b7a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7aa:	f1ba 0f16 	cmp.w	sl, #22
 800b7ae:	d859      	bhi.n	800b864 <_dtoa_r+0x21c>
 800b7b0:	4970      	ldr	r1, [pc, #448]	; (800b974 <_dtoa_r+0x32c>)
 800b7b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b7b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7be:	f7f5 f963 	bl	8000a88 <__aeabi_dcmpgt>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d050      	beq.n	800b868 <_dtoa_r+0x220>
 800b7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7d0:	1b5d      	subs	r5, r3, r5
 800b7d2:	f1b5 0801 	subs.w	r8, r5, #1
 800b7d6:	bf49      	itett	mi
 800b7d8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b7dc:	2300      	movpl	r3, #0
 800b7de:	9305      	strmi	r3, [sp, #20]
 800b7e0:	f04f 0800 	movmi.w	r8, #0
 800b7e4:	bf58      	it	pl
 800b7e6:	9305      	strpl	r3, [sp, #20]
 800b7e8:	f1ba 0f00 	cmp.w	sl, #0
 800b7ec:	db3e      	blt.n	800b86c <_dtoa_r+0x224>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	44d0      	add	r8, sl
 800b7f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b7f6:	9307      	str	r3, [sp, #28]
 800b7f8:	9b06      	ldr	r3, [sp, #24]
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	f200 8090 	bhi.w	800b920 <_dtoa_r+0x2d8>
 800b800:	2b05      	cmp	r3, #5
 800b802:	bfc4      	itt	gt
 800b804:	3b04      	subgt	r3, #4
 800b806:	9306      	strgt	r3, [sp, #24]
 800b808:	9b06      	ldr	r3, [sp, #24]
 800b80a:	f1a3 0302 	sub.w	r3, r3, #2
 800b80e:	bfcc      	ite	gt
 800b810:	2500      	movgt	r5, #0
 800b812:	2501      	movle	r5, #1
 800b814:	2b03      	cmp	r3, #3
 800b816:	f200 808f 	bhi.w	800b938 <_dtoa_r+0x2f0>
 800b81a:	e8df f003 	tbb	[pc, r3]
 800b81e:	7f7d      	.short	0x7f7d
 800b820:	7131      	.short	0x7131
 800b822:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b826:	441d      	add	r5, r3
 800b828:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b82c:	2820      	cmp	r0, #32
 800b82e:	dd13      	ble.n	800b858 <_dtoa_r+0x210>
 800b830:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	fa08 f800 	lsl.w	r8, r8, r0
 800b83a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b83e:	fa23 f000 	lsr.w	r0, r3, r0
 800b842:	ea48 0000 	orr.w	r0, r8, r0
 800b846:	f7f4 fe15 	bl	8000474 <__aeabi_ui2d>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4682      	mov	sl, r0
 800b84e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b852:	3d01      	subs	r5, #1
 800b854:	9313      	str	r3, [sp, #76]	; 0x4c
 800b856:	e772      	b.n	800b73e <_dtoa_r+0xf6>
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	f1c0 0020 	rsb	r0, r0, #32
 800b85e:	fa03 f000 	lsl.w	r0, r3, r0
 800b862:	e7f0      	b.n	800b846 <_dtoa_r+0x1fe>
 800b864:	2301      	movs	r3, #1
 800b866:	e7b1      	b.n	800b7cc <_dtoa_r+0x184>
 800b868:	900f      	str	r0, [sp, #60]	; 0x3c
 800b86a:	e7b0      	b.n	800b7ce <_dtoa_r+0x186>
 800b86c:	9b05      	ldr	r3, [sp, #20]
 800b86e:	eba3 030a 	sub.w	r3, r3, sl
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	f1ca 0300 	rsb	r3, sl, #0
 800b878:	9307      	str	r3, [sp, #28]
 800b87a:	2300      	movs	r3, #0
 800b87c:	930e      	str	r3, [sp, #56]	; 0x38
 800b87e:	e7bb      	b.n	800b7f8 <_dtoa_r+0x1b0>
 800b880:	2301      	movs	r3, #1
 800b882:	930a      	str	r3, [sp, #40]	; 0x28
 800b884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	dd59      	ble.n	800b93e <_dtoa_r+0x2f6>
 800b88a:	9302      	str	r3, [sp, #8]
 800b88c:	4699      	mov	r9, r3
 800b88e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b890:	2200      	movs	r2, #0
 800b892:	6072      	str	r2, [r6, #4]
 800b894:	2204      	movs	r2, #4
 800b896:	f102 0014 	add.w	r0, r2, #20
 800b89a:	4298      	cmp	r0, r3
 800b89c:	6871      	ldr	r1, [r6, #4]
 800b89e:	d953      	bls.n	800b948 <_dtoa_r+0x300>
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fc9f 	bl	800c1e4 <_Balloc>
 800b8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a8:	6030      	str	r0, [r6, #0]
 800b8aa:	f1b9 0f0e 	cmp.w	r9, #14
 800b8ae:	f8d3 b000 	ldr.w	fp, [r3]
 800b8b2:	f200 80e6 	bhi.w	800ba82 <_dtoa_r+0x43a>
 800b8b6:	2d00      	cmp	r5, #0
 800b8b8:	f000 80e3 	beq.w	800ba82 <_dtoa_r+0x43a>
 800b8bc:	ed9d 7b00 	vldr	d7, [sp]
 800b8c0:	f1ba 0f00 	cmp.w	sl, #0
 800b8c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b8c8:	dd74      	ble.n	800b9b4 <_dtoa_r+0x36c>
 800b8ca:	4a2a      	ldr	r2, [pc, #168]	; (800b974 <_dtoa_r+0x32c>)
 800b8cc:	f00a 030f 	and.w	r3, sl, #15
 800b8d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8d4:	ed93 7b00 	vldr	d7, [r3]
 800b8d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b8dc:	06f0      	lsls	r0, r6, #27
 800b8de:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b8e2:	d565      	bpl.n	800b9b0 <_dtoa_r+0x368>
 800b8e4:	4b24      	ldr	r3, [pc, #144]	; (800b978 <_dtoa_r+0x330>)
 800b8e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8ee:	f7f4 ff65 	bl	80007bc <__aeabi_ddiv>
 800b8f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b8f6:	f006 060f 	and.w	r6, r6, #15
 800b8fa:	2503      	movs	r5, #3
 800b8fc:	4f1e      	ldr	r7, [pc, #120]	; (800b978 <_dtoa_r+0x330>)
 800b8fe:	e04c      	b.n	800b99a <_dtoa_r+0x352>
 800b900:	2301      	movs	r3, #1
 800b902:	930a      	str	r3, [sp, #40]	; 0x28
 800b904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b906:	4453      	add	r3, sl
 800b908:	f103 0901 	add.w	r9, r3, #1
 800b90c:	9302      	str	r3, [sp, #8]
 800b90e:	464b      	mov	r3, r9
 800b910:	2b01      	cmp	r3, #1
 800b912:	bfb8      	it	lt
 800b914:	2301      	movlt	r3, #1
 800b916:	e7ba      	b.n	800b88e <_dtoa_r+0x246>
 800b918:	2300      	movs	r3, #0
 800b91a:	e7b2      	b.n	800b882 <_dtoa_r+0x23a>
 800b91c:	2300      	movs	r3, #0
 800b91e:	e7f0      	b.n	800b902 <_dtoa_r+0x2ba>
 800b920:	2501      	movs	r5, #1
 800b922:	2300      	movs	r3, #0
 800b924:	9306      	str	r3, [sp, #24]
 800b926:	950a      	str	r5, [sp, #40]	; 0x28
 800b928:	f04f 33ff 	mov.w	r3, #4294967295
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	4699      	mov	r9, r3
 800b930:	2200      	movs	r2, #0
 800b932:	2312      	movs	r3, #18
 800b934:	920b      	str	r2, [sp, #44]	; 0x2c
 800b936:	e7aa      	b.n	800b88e <_dtoa_r+0x246>
 800b938:	2301      	movs	r3, #1
 800b93a:	930a      	str	r3, [sp, #40]	; 0x28
 800b93c:	e7f4      	b.n	800b928 <_dtoa_r+0x2e0>
 800b93e:	2301      	movs	r3, #1
 800b940:	9302      	str	r3, [sp, #8]
 800b942:	4699      	mov	r9, r3
 800b944:	461a      	mov	r2, r3
 800b946:	e7f5      	b.n	800b934 <_dtoa_r+0x2ec>
 800b948:	3101      	adds	r1, #1
 800b94a:	6071      	str	r1, [r6, #4]
 800b94c:	0052      	lsls	r2, r2, #1
 800b94e:	e7a2      	b.n	800b896 <_dtoa_r+0x24e>
 800b950:	636f4361 	.word	0x636f4361
 800b954:	3fd287a7 	.word	0x3fd287a7
 800b958:	8b60c8b3 	.word	0x8b60c8b3
 800b95c:	3fc68a28 	.word	0x3fc68a28
 800b960:	509f79fb 	.word	0x509f79fb
 800b964:	3fd34413 	.word	0x3fd34413
 800b968:	7ff00000 	.word	0x7ff00000
 800b96c:	0800d0f9 	.word	0x0800d0f9
 800b970:	3ff80000 	.word	0x3ff80000
 800b974:	0800d130 	.word	0x0800d130
 800b978:	0800d108 	.word	0x0800d108
 800b97c:	0800d103 	.word	0x0800d103
 800b980:	07f1      	lsls	r1, r6, #31
 800b982:	d508      	bpl.n	800b996 <_dtoa_r+0x34e>
 800b984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98c:	f7f4 fdec 	bl	8000568 <__aeabi_dmul>
 800b990:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b994:	3501      	adds	r5, #1
 800b996:	1076      	asrs	r6, r6, #1
 800b998:	3708      	adds	r7, #8
 800b99a:	2e00      	cmp	r6, #0
 800b99c:	d1f0      	bne.n	800b980 <_dtoa_r+0x338>
 800b99e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b9a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a6:	f7f4 ff09 	bl	80007bc <__aeabi_ddiv>
 800b9aa:	e9cd 0100 	strd	r0, r1, [sp]
 800b9ae:	e01a      	b.n	800b9e6 <_dtoa_r+0x39e>
 800b9b0:	2502      	movs	r5, #2
 800b9b2:	e7a3      	b.n	800b8fc <_dtoa_r+0x2b4>
 800b9b4:	f000 80a0 	beq.w	800baf8 <_dtoa_r+0x4b0>
 800b9b8:	f1ca 0600 	rsb	r6, sl, #0
 800b9bc:	4b9f      	ldr	r3, [pc, #636]	; (800bc3c <_dtoa_r+0x5f4>)
 800b9be:	4fa0      	ldr	r7, [pc, #640]	; (800bc40 <_dtoa_r+0x5f8>)
 800b9c0:	f006 020f 	and.w	r2, r6, #15
 800b9c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9d0:	f7f4 fdca 	bl	8000568 <__aeabi_dmul>
 800b9d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b9d8:	1136      	asrs	r6, r6, #4
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2502      	movs	r5, #2
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	d17f      	bne.n	800bae2 <_dtoa_r+0x49a>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e1      	bne.n	800b9aa <_dtoa_r+0x362>
 800b9e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 8087 	beq.w	800bafc <_dtoa_r+0x4b4>
 800b9ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	4b93      	ldr	r3, [pc, #588]	; (800bc44 <_dtoa_r+0x5fc>)
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f5 f827 	bl	8000a4c <__aeabi_dcmplt>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d07c      	beq.n	800bafc <_dtoa_r+0x4b4>
 800ba02:	f1b9 0f00 	cmp.w	r9, #0
 800ba06:	d079      	beq.n	800bafc <_dtoa_r+0x4b4>
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dd35      	ble.n	800ba7a <_dtoa_r+0x432>
 800ba0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ba12:	9308      	str	r3, [sp, #32]
 800ba14:	4639      	mov	r1, r7
 800ba16:	2200      	movs	r2, #0
 800ba18:	4b8b      	ldr	r3, [pc, #556]	; (800bc48 <_dtoa_r+0x600>)
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f7f4 fda4 	bl	8000568 <__aeabi_dmul>
 800ba20:	e9cd 0100 	strd	r0, r1, [sp]
 800ba24:	9f02      	ldr	r7, [sp, #8]
 800ba26:	3501      	adds	r5, #1
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f7f4 fd33 	bl	8000494 <__aeabi_i2d>
 800ba2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba32:	f7f4 fd99 	bl	8000568 <__aeabi_dmul>
 800ba36:	2200      	movs	r2, #0
 800ba38:	4b84      	ldr	r3, [pc, #528]	; (800bc4c <_dtoa_r+0x604>)
 800ba3a:	f7f4 fbdf 	bl	80001fc <__adddf3>
 800ba3e:	4605      	mov	r5, r0
 800ba40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba44:	2f00      	cmp	r7, #0
 800ba46:	d15d      	bne.n	800bb04 <_dtoa_r+0x4bc>
 800ba48:	2200      	movs	r2, #0
 800ba4a:	4b81      	ldr	r3, [pc, #516]	; (800bc50 <_dtoa_r+0x608>)
 800ba4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba50:	f7f4 fbd2 	bl	80001f8 <__aeabi_dsub>
 800ba54:	462a      	mov	r2, r5
 800ba56:	4633      	mov	r3, r6
 800ba58:	e9cd 0100 	strd	r0, r1, [sp]
 800ba5c:	f7f5 f814 	bl	8000a88 <__aeabi_dcmpgt>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	f040 8288 	bne.w	800bf76 <_dtoa_r+0x92e>
 800ba66:	462a      	mov	r2, r5
 800ba68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ba6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba70:	f7f4 ffec 	bl	8000a4c <__aeabi_dcmplt>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f040 827c 	bne.w	800bf72 <_dtoa_r+0x92a>
 800ba7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba7e:	e9cd 2300 	strd	r2, r3, [sp]
 800ba82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f2c0 8150 	blt.w	800bd2a <_dtoa_r+0x6e2>
 800ba8a:	f1ba 0f0e 	cmp.w	sl, #14
 800ba8e:	f300 814c 	bgt.w	800bd2a <_dtoa_r+0x6e2>
 800ba92:	4b6a      	ldr	r3, [pc, #424]	; (800bc3c <_dtoa_r+0x5f4>)
 800ba94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba98:	ed93 7b00 	vldr	d7, [r3]
 800ba9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800baa4:	f280 80d8 	bge.w	800bc58 <_dtoa_r+0x610>
 800baa8:	f1b9 0f00 	cmp.w	r9, #0
 800baac:	f300 80d4 	bgt.w	800bc58 <_dtoa_r+0x610>
 800bab0:	f040 825e 	bne.w	800bf70 <_dtoa_r+0x928>
 800bab4:	2200      	movs	r2, #0
 800bab6:	4b66      	ldr	r3, [pc, #408]	; (800bc50 <_dtoa_r+0x608>)
 800bab8:	ec51 0b17 	vmov	r0, r1, d7
 800babc:	f7f4 fd54 	bl	8000568 <__aeabi_dmul>
 800bac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bac4:	f7f4 ffd6 	bl	8000a74 <__aeabi_dcmpge>
 800bac8:	464f      	mov	r7, r9
 800baca:	464e      	mov	r6, r9
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 8234 	bne.w	800bf3a <_dtoa_r+0x8f2>
 800bad2:	2331      	movs	r3, #49	; 0x31
 800bad4:	f10b 0501 	add.w	r5, fp, #1
 800bad8:	f88b 3000 	strb.w	r3, [fp]
 800badc:	f10a 0a01 	add.w	sl, sl, #1
 800bae0:	e22f      	b.n	800bf42 <_dtoa_r+0x8fa>
 800bae2:	07f2      	lsls	r2, r6, #31
 800bae4:	d505      	bpl.n	800baf2 <_dtoa_r+0x4aa>
 800bae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baea:	f7f4 fd3d 	bl	8000568 <__aeabi_dmul>
 800baee:	3501      	adds	r5, #1
 800baf0:	2301      	movs	r3, #1
 800baf2:	1076      	asrs	r6, r6, #1
 800baf4:	3708      	adds	r7, #8
 800baf6:	e772      	b.n	800b9de <_dtoa_r+0x396>
 800baf8:	2502      	movs	r5, #2
 800bafa:	e774      	b.n	800b9e6 <_dtoa_r+0x39e>
 800bafc:	f8cd a020 	str.w	sl, [sp, #32]
 800bb00:	464f      	mov	r7, r9
 800bb02:	e791      	b.n	800ba28 <_dtoa_r+0x3e0>
 800bb04:	4b4d      	ldr	r3, [pc, #308]	; (800bc3c <_dtoa_r+0x5f4>)
 800bb06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d047      	beq.n	800bba4 <_dtoa_r+0x55c>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	2000      	movs	r0, #0
 800bb1a:	494e      	ldr	r1, [pc, #312]	; (800bc54 <_dtoa_r+0x60c>)
 800bb1c:	f7f4 fe4e 	bl	80007bc <__aeabi_ddiv>
 800bb20:	462a      	mov	r2, r5
 800bb22:	4633      	mov	r3, r6
 800bb24:	f7f4 fb68 	bl	80001f8 <__aeabi_dsub>
 800bb28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb2c:	465d      	mov	r5, fp
 800bb2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb32:	f7f4 ffc9 	bl	8000ac8 <__aeabi_d2iz>
 800bb36:	4606      	mov	r6, r0
 800bb38:	f7f4 fcac 	bl	8000494 <__aeabi_i2d>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb44:	f7f4 fb58 	bl	80001f8 <__aeabi_dsub>
 800bb48:	3630      	adds	r6, #48	; 0x30
 800bb4a:	f805 6b01 	strb.w	r6, [r5], #1
 800bb4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb52:	e9cd 0100 	strd	r0, r1, [sp]
 800bb56:	f7f4 ff79 	bl	8000a4c <__aeabi_dcmplt>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d163      	bne.n	800bc26 <_dtoa_r+0x5de>
 800bb5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb62:	2000      	movs	r0, #0
 800bb64:	4937      	ldr	r1, [pc, #220]	; (800bc44 <_dtoa_r+0x5fc>)
 800bb66:	f7f4 fb47 	bl	80001f8 <__aeabi_dsub>
 800bb6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb6e:	f7f4 ff6d 	bl	8000a4c <__aeabi_dcmplt>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f040 80b7 	bne.w	800bce6 <_dtoa_r+0x69e>
 800bb78:	eba5 030b 	sub.w	r3, r5, fp
 800bb7c:	429f      	cmp	r7, r3
 800bb7e:	f77f af7c 	ble.w	800ba7a <_dtoa_r+0x432>
 800bb82:	2200      	movs	r2, #0
 800bb84:	4b30      	ldr	r3, [pc, #192]	; (800bc48 <_dtoa_r+0x600>)
 800bb86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb8a:	f7f4 fced 	bl	8000568 <__aeabi_dmul>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb94:	4b2c      	ldr	r3, [pc, #176]	; (800bc48 <_dtoa_r+0x600>)
 800bb96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb9a:	f7f4 fce5 	bl	8000568 <__aeabi_dmul>
 800bb9e:	e9cd 0100 	strd	r0, r1, [sp]
 800bba2:	e7c4      	b.n	800bb2e <_dtoa_r+0x4e6>
 800bba4:	462a      	mov	r2, r5
 800bba6:	4633      	mov	r3, r6
 800bba8:	f7f4 fcde 	bl	8000568 <__aeabi_dmul>
 800bbac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbb0:	eb0b 0507 	add.w	r5, fp, r7
 800bbb4:	465e      	mov	r6, fp
 800bbb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbba:	f7f4 ff85 	bl	8000ac8 <__aeabi_d2iz>
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	f7f4 fc68 	bl	8000494 <__aeabi_i2d>
 800bbc4:	3730      	adds	r7, #48	; 0x30
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbce:	f7f4 fb13 	bl	80001f8 <__aeabi_dsub>
 800bbd2:	f806 7b01 	strb.w	r7, [r6], #1
 800bbd6:	42ae      	cmp	r6, r5
 800bbd8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbdc:	f04f 0200 	mov.w	r2, #0
 800bbe0:	d126      	bne.n	800bc30 <_dtoa_r+0x5e8>
 800bbe2:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <_dtoa_r+0x60c>)
 800bbe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbe8:	f7f4 fb08 	bl	80001fc <__adddf3>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf4:	f7f4 ff48 	bl	8000a88 <__aeabi_dcmpgt>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d174      	bne.n	800bce6 <_dtoa_r+0x69e>
 800bbfc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc00:	2000      	movs	r0, #0
 800bc02:	4914      	ldr	r1, [pc, #80]	; (800bc54 <_dtoa_r+0x60c>)
 800bc04:	f7f4 faf8 	bl	80001f8 <__aeabi_dsub>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc10:	f7f4 ff1c 	bl	8000a4c <__aeabi_dcmplt>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f43f af30 	beq.w	800ba7a <_dtoa_r+0x432>
 800bc1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc1e:	2b30      	cmp	r3, #48	; 0x30
 800bc20:	f105 32ff 	add.w	r2, r5, #4294967295
 800bc24:	d002      	beq.n	800bc2c <_dtoa_r+0x5e4>
 800bc26:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bc2a:	e04a      	b.n	800bcc2 <_dtoa_r+0x67a>
 800bc2c:	4615      	mov	r5, r2
 800bc2e:	e7f4      	b.n	800bc1a <_dtoa_r+0x5d2>
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <_dtoa_r+0x600>)
 800bc32:	f7f4 fc99 	bl	8000568 <__aeabi_dmul>
 800bc36:	e9cd 0100 	strd	r0, r1, [sp]
 800bc3a:	e7bc      	b.n	800bbb6 <_dtoa_r+0x56e>
 800bc3c:	0800d130 	.word	0x0800d130
 800bc40:	0800d108 	.word	0x0800d108
 800bc44:	3ff00000 	.word	0x3ff00000
 800bc48:	40240000 	.word	0x40240000
 800bc4c:	401c0000 	.word	0x401c0000
 800bc50:	40140000 	.word	0x40140000
 800bc54:	3fe00000 	.word	0x3fe00000
 800bc58:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc5c:	465d      	mov	r5, fp
 800bc5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc62:	4630      	mov	r0, r6
 800bc64:	4639      	mov	r1, r7
 800bc66:	f7f4 fda9 	bl	80007bc <__aeabi_ddiv>
 800bc6a:	f7f4 ff2d 	bl	8000ac8 <__aeabi_d2iz>
 800bc6e:	4680      	mov	r8, r0
 800bc70:	f7f4 fc10 	bl	8000494 <__aeabi_i2d>
 800bc74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc78:	f7f4 fc76 	bl	8000568 <__aeabi_dmul>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4630      	mov	r0, r6
 800bc82:	4639      	mov	r1, r7
 800bc84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bc88:	f7f4 fab6 	bl	80001f8 <__aeabi_dsub>
 800bc8c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc90:	eba5 060b 	sub.w	r6, r5, fp
 800bc94:	45b1      	cmp	r9, r6
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	d139      	bne.n	800bd10 <_dtoa_r+0x6c8>
 800bc9c:	f7f4 faae 	bl	80001fc <__adddf3>
 800bca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bca4:	4606      	mov	r6, r0
 800bca6:	460f      	mov	r7, r1
 800bca8:	f7f4 feee 	bl	8000a88 <__aeabi_dcmpgt>
 800bcac:	b9c8      	cbnz	r0, 800bce2 <_dtoa_r+0x69a>
 800bcae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 febf 	bl	8000a38 <__aeabi_dcmpeq>
 800bcba:	b110      	cbz	r0, 800bcc2 <_dtoa_r+0x67a>
 800bcbc:	f018 0f01 	tst.w	r8, #1
 800bcc0:	d10f      	bne.n	800bce2 <_dtoa_r+0x69a>
 800bcc2:	9904      	ldr	r1, [sp, #16]
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f000 fac1 	bl	800c24c <_Bfree>
 800bcca:	2300      	movs	r3, #0
 800bccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcce:	702b      	strb	r3, [r5, #0]
 800bcd0:	f10a 0301 	add.w	r3, sl, #1
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 8241 	beq.w	800c160 <_dtoa_r+0xb18>
 800bcde:	601d      	str	r5, [r3, #0]
 800bce0:	e23e      	b.n	800c160 <_dtoa_r+0xb18>
 800bce2:	f8cd a020 	str.w	sl, [sp, #32]
 800bce6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcea:	2a39      	cmp	r2, #57	; 0x39
 800bcec:	f105 33ff 	add.w	r3, r5, #4294967295
 800bcf0:	d108      	bne.n	800bd04 <_dtoa_r+0x6bc>
 800bcf2:	459b      	cmp	fp, r3
 800bcf4:	d10a      	bne.n	800bd0c <_dtoa_r+0x6c4>
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	9308      	str	r3, [sp, #32]
 800bcfc:	2330      	movs	r3, #48	; 0x30
 800bcfe:	f88b 3000 	strb.w	r3, [fp]
 800bd02:	465b      	mov	r3, fp
 800bd04:	781a      	ldrb	r2, [r3, #0]
 800bd06:	3201      	adds	r2, #1
 800bd08:	701a      	strb	r2, [r3, #0]
 800bd0a:	e78c      	b.n	800bc26 <_dtoa_r+0x5de>
 800bd0c:	461d      	mov	r5, r3
 800bd0e:	e7ea      	b.n	800bce6 <_dtoa_r+0x69e>
 800bd10:	2200      	movs	r2, #0
 800bd12:	4b9b      	ldr	r3, [pc, #620]	; (800bf80 <_dtoa_r+0x938>)
 800bd14:	f7f4 fc28 	bl	8000568 <__aeabi_dmul>
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	460f      	mov	r7, r1
 800bd20:	f7f4 fe8a 	bl	8000a38 <__aeabi_dcmpeq>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d09a      	beq.n	800bc5e <_dtoa_r+0x616>
 800bd28:	e7cb      	b.n	800bcc2 <_dtoa_r+0x67a>
 800bd2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	f000 808b 	beq.w	800be48 <_dtoa_r+0x800>
 800bd32:	9a06      	ldr	r2, [sp, #24]
 800bd34:	2a01      	cmp	r2, #1
 800bd36:	dc6e      	bgt.n	800be16 <_dtoa_r+0x7ce>
 800bd38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	d067      	beq.n	800be0e <_dtoa_r+0x7c6>
 800bd3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd42:	9f07      	ldr	r7, [sp, #28]
 800bd44:	9d05      	ldr	r5, [sp, #20]
 800bd46:	9a05      	ldr	r2, [sp, #20]
 800bd48:	2101      	movs	r1, #1
 800bd4a:	441a      	add	r2, r3
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	9205      	str	r2, [sp, #20]
 800bd50:	4498      	add	r8, r3
 800bd52:	f000 fb1b 	bl	800c38c <__i2b>
 800bd56:	4606      	mov	r6, r0
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	dd0c      	ble.n	800bd76 <_dtoa_r+0x72e>
 800bd5c:	f1b8 0f00 	cmp.w	r8, #0
 800bd60:	dd09      	ble.n	800bd76 <_dtoa_r+0x72e>
 800bd62:	4545      	cmp	r5, r8
 800bd64:	9a05      	ldr	r2, [sp, #20]
 800bd66:	462b      	mov	r3, r5
 800bd68:	bfa8      	it	ge
 800bd6a:	4643      	movge	r3, r8
 800bd6c:	1ad2      	subs	r2, r2, r3
 800bd6e:	9205      	str	r2, [sp, #20]
 800bd70:	1aed      	subs	r5, r5, r3
 800bd72:	eba8 0803 	sub.w	r8, r8, r3
 800bd76:	9b07      	ldr	r3, [sp, #28]
 800bd78:	b1eb      	cbz	r3, 800bdb6 <_dtoa_r+0x76e>
 800bd7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d067      	beq.n	800be50 <_dtoa_r+0x808>
 800bd80:	b18f      	cbz	r7, 800bda6 <_dtoa_r+0x75e>
 800bd82:	4631      	mov	r1, r6
 800bd84:	463a      	mov	r2, r7
 800bd86:	4620      	mov	r0, r4
 800bd88:	f000 fba0 	bl	800c4cc <__pow5mult>
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	4601      	mov	r1, r0
 800bd90:	4606      	mov	r6, r0
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fb03 	bl	800c39e <__multiply>
 800bd98:	9904      	ldr	r1, [sp, #16]
 800bd9a:	9008      	str	r0, [sp, #32]
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f000 fa55 	bl	800c24c <_Bfree>
 800bda2:	9b08      	ldr	r3, [sp, #32]
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	9b07      	ldr	r3, [sp, #28]
 800bda8:	1bda      	subs	r2, r3, r7
 800bdaa:	d004      	beq.n	800bdb6 <_dtoa_r+0x76e>
 800bdac:	9904      	ldr	r1, [sp, #16]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 fb8c 	bl	800c4cc <__pow5mult>
 800bdb4:	9004      	str	r0, [sp, #16]
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 fae7 	bl	800c38c <__i2b>
 800bdbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 81d0 	beq.w	800c168 <_dtoa_r+0xb20>
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4601      	mov	r1, r0
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fb7d 	bl	800c4cc <__pow5mult>
 800bdd2:	9b06      	ldr	r3, [sp, #24]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	dc40      	bgt.n	800be5c <_dtoa_r+0x814>
 800bdda:	9b00      	ldr	r3, [sp, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d139      	bne.n	800be54 <_dtoa_r+0x80c>
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d136      	bne.n	800be58 <_dtoa_r+0x810>
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdf0:	0d1b      	lsrs	r3, r3, #20
 800bdf2:	051b      	lsls	r3, r3, #20
 800bdf4:	b12b      	cbz	r3, 800be02 <_dtoa_r+0x7ba>
 800bdf6:	9b05      	ldr	r3, [sp, #20]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	9305      	str	r3, [sp, #20]
 800bdfc:	f108 0801 	add.w	r8, r8, #1
 800be00:	2301      	movs	r3, #1
 800be02:	9307      	str	r3, [sp, #28]
 800be04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be06:	2b00      	cmp	r3, #0
 800be08:	d12a      	bne.n	800be60 <_dtoa_r+0x818>
 800be0a:	2001      	movs	r0, #1
 800be0c:	e030      	b.n	800be70 <_dtoa_r+0x828>
 800be0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be14:	e795      	b.n	800bd42 <_dtoa_r+0x6fa>
 800be16:	9b07      	ldr	r3, [sp, #28]
 800be18:	f109 37ff 	add.w	r7, r9, #4294967295
 800be1c:	42bb      	cmp	r3, r7
 800be1e:	bfbf      	itttt	lt
 800be20:	9b07      	ldrlt	r3, [sp, #28]
 800be22:	9707      	strlt	r7, [sp, #28]
 800be24:	1afa      	sublt	r2, r7, r3
 800be26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800be28:	bfbb      	ittet	lt
 800be2a:	189b      	addlt	r3, r3, r2
 800be2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be2e:	1bdf      	subge	r7, r3, r7
 800be30:	2700      	movlt	r7, #0
 800be32:	f1b9 0f00 	cmp.w	r9, #0
 800be36:	bfb5      	itete	lt
 800be38:	9b05      	ldrlt	r3, [sp, #20]
 800be3a:	9d05      	ldrge	r5, [sp, #20]
 800be3c:	eba3 0509 	sublt.w	r5, r3, r9
 800be40:	464b      	movge	r3, r9
 800be42:	bfb8      	it	lt
 800be44:	2300      	movlt	r3, #0
 800be46:	e77e      	b.n	800bd46 <_dtoa_r+0x6fe>
 800be48:	9f07      	ldr	r7, [sp, #28]
 800be4a:	9d05      	ldr	r5, [sp, #20]
 800be4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800be4e:	e783      	b.n	800bd58 <_dtoa_r+0x710>
 800be50:	9a07      	ldr	r2, [sp, #28]
 800be52:	e7ab      	b.n	800bdac <_dtoa_r+0x764>
 800be54:	2300      	movs	r3, #0
 800be56:	e7d4      	b.n	800be02 <_dtoa_r+0x7ba>
 800be58:	9b00      	ldr	r3, [sp, #0]
 800be5a:	e7d2      	b.n	800be02 <_dtoa_r+0x7ba>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9307      	str	r3, [sp, #28]
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800be66:	6918      	ldr	r0, [r3, #16]
 800be68:	f000 fa42 	bl	800c2f0 <__hi0bits>
 800be6c:	f1c0 0020 	rsb	r0, r0, #32
 800be70:	4440      	add	r0, r8
 800be72:	f010 001f 	ands.w	r0, r0, #31
 800be76:	d047      	beq.n	800bf08 <_dtoa_r+0x8c0>
 800be78:	f1c0 0320 	rsb	r3, r0, #32
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	dd3b      	ble.n	800bef8 <_dtoa_r+0x8b0>
 800be80:	9b05      	ldr	r3, [sp, #20]
 800be82:	f1c0 001c 	rsb	r0, r0, #28
 800be86:	4403      	add	r3, r0
 800be88:	9305      	str	r3, [sp, #20]
 800be8a:	4405      	add	r5, r0
 800be8c:	4480      	add	r8, r0
 800be8e:	9b05      	ldr	r3, [sp, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	dd05      	ble.n	800bea0 <_dtoa_r+0x858>
 800be94:	461a      	mov	r2, r3
 800be96:	9904      	ldr	r1, [sp, #16]
 800be98:	4620      	mov	r0, r4
 800be9a:	f000 fb65 	bl	800c568 <__lshift>
 800be9e:	9004      	str	r0, [sp, #16]
 800bea0:	f1b8 0f00 	cmp.w	r8, #0
 800bea4:	dd05      	ble.n	800beb2 <_dtoa_r+0x86a>
 800bea6:	4639      	mov	r1, r7
 800bea8:	4642      	mov	r2, r8
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 fb5c 	bl	800c568 <__lshift>
 800beb0:	4607      	mov	r7, r0
 800beb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beb4:	b353      	cbz	r3, 800bf0c <_dtoa_r+0x8c4>
 800beb6:	4639      	mov	r1, r7
 800beb8:	9804      	ldr	r0, [sp, #16]
 800beba:	f000 fba9 	bl	800c610 <__mcmp>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	da24      	bge.n	800bf0c <_dtoa_r+0x8c4>
 800bec2:	2300      	movs	r3, #0
 800bec4:	220a      	movs	r2, #10
 800bec6:	9904      	ldr	r1, [sp, #16]
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 f9d6 	bl	800c27a <__multadd>
 800bece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed0:	9004      	str	r0, [sp, #16]
 800bed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 814d 	beq.w	800c176 <_dtoa_r+0xb2e>
 800bedc:	2300      	movs	r3, #0
 800bede:	4631      	mov	r1, r6
 800bee0:	220a      	movs	r2, #10
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 f9c9 	bl	800c27a <__multadd>
 800bee8:	9b02      	ldr	r3, [sp, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	4606      	mov	r6, r0
 800beee:	dc4f      	bgt.n	800bf90 <_dtoa_r+0x948>
 800bef0:	9b06      	ldr	r3, [sp, #24]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	dd4c      	ble.n	800bf90 <_dtoa_r+0x948>
 800bef6:	e011      	b.n	800bf1c <_dtoa_r+0x8d4>
 800bef8:	d0c9      	beq.n	800be8e <_dtoa_r+0x846>
 800befa:	9a05      	ldr	r2, [sp, #20]
 800befc:	331c      	adds	r3, #28
 800befe:	441a      	add	r2, r3
 800bf00:	9205      	str	r2, [sp, #20]
 800bf02:	441d      	add	r5, r3
 800bf04:	4498      	add	r8, r3
 800bf06:	e7c2      	b.n	800be8e <_dtoa_r+0x846>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	e7f6      	b.n	800befa <_dtoa_r+0x8b2>
 800bf0c:	f1b9 0f00 	cmp.w	r9, #0
 800bf10:	dc38      	bgt.n	800bf84 <_dtoa_r+0x93c>
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	dd35      	ble.n	800bf84 <_dtoa_r+0x93c>
 800bf18:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf1c:	9b02      	ldr	r3, [sp, #8]
 800bf1e:	b963      	cbnz	r3, 800bf3a <_dtoa_r+0x8f2>
 800bf20:	4639      	mov	r1, r7
 800bf22:	2205      	movs	r2, #5
 800bf24:	4620      	mov	r0, r4
 800bf26:	f000 f9a8 	bl	800c27a <__multadd>
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	9804      	ldr	r0, [sp, #16]
 800bf30:	f000 fb6e 	bl	800c610 <__mcmp>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	f73f adcc 	bgt.w	800bad2 <_dtoa_r+0x48a>
 800bf3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf3c:	465d      	mov	r5, fp
 800bf3e:	ea6f 0a03 	mvn.w	sl, r3
 800bf42:	f04f 0900 	mov.w	r9, #0
 800bf46:	4639      	mov	r1, r7
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 f97f 	bl	800c24c <_Bfree>
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	f43f aeb7 	beq.w	800bcc2 <_dtoa_r+0x67a>
 800bf54:	f1b9 0f00 	cmp.w	r9, #0
 800bf58:	d005      	beq.n	800bf66 <_dtoa_r+0x91e>
 800bf5a:	45b1      	cmp	r9, r6
 800bf5c:	d003      	beq.n	800bf66 <_dtoa_r+0x91e>
 800bf5e:	4649      	mov	r1, r9
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 f973 	bl	800c24c <_Bfree>
 800bf66:	4631      	mov	r1, r6
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 f96f 	bl	800c24c <_Bfree>
 800bf6e:	e6a8      	b.n	800bcc2 <_dtoa_r+0x67a>
 800bf70:	2700      	movs	r7, #0
 800bf72:	463e      	mov	r6, r7
 800bf74:	e7e1      	b.n	800bf3a <_dtoa_r+0x8f2>
 800bf76:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bf7a:	463e      	mov	r6, r7
 800bf7c:	e5a9      	b.n	800bad2 <_dtoa_r+0x48a>
 800bf7e:	bf00      	nop
 800bf80:	40240000 	.word	0x40240000
 800bf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf86:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 80fa 	beq.w	800c184 <_dtoa_r+0xb3c>
 800bf90:	2d00      	cmp	r5, #0
 800bf92:	dd05      	ble.n	800bfa0 <_dtoa_r+0x958>
 800bf94:	4631      	mov	r1, r6
 800bf96:	462a      	mov	r2, r5
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fae5 	bl	800c568 <__lshift>
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	9b07      	ldr	r3, [sp, #28]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d04c      	beq.n	800c040 <_dtoa_r+0x9f8>
 800bfa6:	6871      	ldr	r1, [r6, #4]
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 f91b 	bl	800c1e4 <_Balloc>
 800bfae:	6932      	ldr	r2, [r6, #16]
 800bfb0:	3202      	adds	r2, #2
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	0092      	lsls	r2, r2, #2
 800bfb6:	f106 010c 	add.w	r1, r6, #12
 800bfba:	300c      	adds	r0, #12
 800bfbc:	f7fe ff58 	bl	800ae70 <memcpy>
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 facf 	bl	800c568 <__lshift>
 800bfca:	9b00      	ldr	r3, [sp, #0]
 800bfcc:	f8cd b014 	str.w	fp, [sp, #20]
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	46b1      	mov	r9, r6
 800bfd6:	9307      	str	r3, [sp, #28]
 800bfd8:	4606      	mov	r6, r0
 800bfda:	4639      	mov	r1, r7
 800bfdc:	9804      	ldr	r0, [sp, #16]
 800bfde:	f7ff faa4 	bl	800b52a <quorem>
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bfea:	9804      	ldr	r0, [sp, #16]
 800bfec:	f000 fb10 	bl	800c610 <__mcmp>
 800bff0:	4632      	mov	r2, r6
 800bff2:	9000      	str	r0, [sp, #0]
 800bff4:	4639      	mov	r1, r7
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fb24 	bl	800c644 <__mdiff>
 800bffc:	68c3      	ldr	r3, [r0, #12]
 800bffe:	4602      	mov	r2, r0
 800c000:	bb03      	cbnz	r3, 800c044 <_dtoa_r+0x9fc>
 800c002:	4601      	mov	r1, r0
 800c004:	9008      	str	r0, [sp, #32]
 800c006:	9804      	ldr	r0, [sp, #16]
 800c008:	f000 fb02 	bl	800c610 <__mcmp>
 800c00c:	9a08      	ldr	r2, [sp, #32]
 800c00e:	4603      	mov	r3, r0
 800c010:	4611      	mov	r1, r2
 800c012:	4620      	mov	r0, r4
 800c014:	9308      	str	r3, [sp, #32]
 800c016:	f000 f919 	bl	800c24c <_Bfree>
 800c01a:	9b08      	ldr	r3, [sp, #32]
 800c01c:	b9a3      	cbnz	r3, 800c048 <_dtoa_r+0xa00>
 800c01e:	9a06      	ldr	r2, [sp, #24]
 800c020:	b992      	cbnz	r2, 800c048 <_dtoa_r+0xa00>
 800c022:	9a07      	ldr	r2, [sp, #28]
 800c024:	b982      	cbnz	r2, 800c048 <_dtoa_r+0xa00>
 800c026:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c02a:	d029      	beq.n	800c080 <_dtoa_r+0xa38>
 800c02c:	9b00      	ldr	r3, [sp, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	dd01      	ble.n	800c036 <_dtoa_r+0x9ee>
 800c032:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	1c5d      	adds	r5, r3, #1
 800c03a:	f883 8000 	strb.w	r8, [r3]
 800c03e:	e782      	b.n	800bf46 <_dtoa_r+0x8fe>
 800c040:	4630      	mov	r0, r6
 800c042:	e7c2      	b.n	800bfca <_dtoa_r+0x982>
 800c044:	2301      	movs	r3, #1
 800c046:	e7e3      	b.n	800c010 <_dtoa_r+0x9c8>
 800c048:	9a00      	ldr	r2, [sp, #0]
 800c04a:	2a00      	cmp	r2, #0
 800c04c:	db04      	blt.n	800c058 <_dtoa_r+0xa10>
 800c04e:	d125      	bne.n	800c09c <_dtoa_r+0xa54>
 800c050:	9a06      	ldr	r2, [sp, #24]
 800c052:	bb1a      	cbnz	r2, 800c09c <_dtoa_r+0xa54>
 800c054:	9a07      	ldr	r2, [sp, #28]
 800c056:	bb0a      	cbnz	r2, 800c09c <_dtoa_r+0xa54>
 800c058:	2b00      	cmp	r3, #0
 800c05a:	ddec      	ble.n	800c036 <_dtoa_r+0x9ee>
 800c05c:	2201      	movs	r2, #1
 800c05e:	9904      	ldr	r1, [sp, #16]
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fa81 	bl	800c568 <__lshift>
 800c066:	4639      	mov	r1, r7
 800c068:	9004      	str	r0, [sp, #16]
 800c06a:	f000 fad1 	bl	800c610 <__mcmp>
 800c06e:	2800      	cmp	r0, #0
 800c070:	dc03      	bgt.n	800c07a <_dtoa_r+0xa32>
 800c072:	d1e0      	bne.n	800c036 <_dtoa_r+0x9ee>
 800c074:	f018 0f01 	tst.w	r8, #1
 800c078:	d0dd      	beq.n	800c036 <_dtoa_r+0x9ee>
 800c07a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c07e:	d1d8      	bne.n	800c032 <_dtoa_r+0x9ea>
 800c080:	9b05      	ldr	r3, [sp, #20]
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	1c5d      	adds	r5, r3, #1
 800c086:	2339      	movs	r3, #57	; 0x39
 800c088:	7013      	strb	r3, [r2, #0]
 800c08a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c08e:	2b39      	cmp	r3, #57	; 0x39
 800c090:	f105 32ff 	add.w	r2, r5, #4294967295
 800c094:	d04f      	beq.n	800c136 <_dtoa_r+0xaee>
 800c096:	3301      	adds	r3, #1
 800c098:	7013      	strb	r3, [r2, #0]
 800c09a:	e754      	b.n	800bf46 <_dtoa_r+0x8fe>
 800c09c:	9a05      	ldr	r2, [sp, #20]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f102 0501 	add.w	r5, r2, #1
 800c0a4:	dd06      	ble.n	800c0b4 <_dtoa_r+0xa6c>
 800c0a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c0aa:	d0e9      	beq.n	800c080 <_dtoa_r+0xa38>
 800c0ac:	f108 0801 	add.w	r8, r8, #1
 800c0b0:	9b05      	ldr	r3, [sp, #20]
 800c0b2:	e7c2      	b.n	800c03a <_dtoa_r+0x9f2>
 800c0b4:	9a02      	ldr	r2, [sp, #8]
 800c0b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c0ba:	eba5 030b 	sub.w	r3, r5, fp
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d021      	beq.n	800c106 <_dtoa_r+0xabe>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	220a      	movs	r2, #10
 800c0c6:	9904      	ldr	r1, [sp, #16]
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f000 f8d6 	bl	800c27a <__multadd>
 800c0ce:	45b1      	cmp	r9, r6
 800c0d0:	9004      	str	r0, [sp, #16]
 800c0d2:	f04f 0300 	mov.w	r3, #0
 800c0d6:	f04f 020a 	mov.w	r2, #10
 800c0da:	4649      	mov	r1, r9
 800c0dc:	4620      	mov	r0, r4
 800c0de:	d105      	bne.n	800c0ec <_dtoa_r+0xaa4>
 800c0e0:	f000 f8cb 	bl	800c27a <__multadd>
 800c0e4:	4681      	mov	r9, r0
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	9505      	str	r5, [sp, #20]
 800c0ea:	e776      	b.n	800bfda <_dtoa_r+0x992>
 800c0ec:	f000 f8c5 	bl	800c27a <__multadd>
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4681      	mov	r9, r0
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	220a      	movs	r2, #10
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 f8be 	bl	800c27a <__multadd>
 800c0fe:	4606      	mov	r6, r0
 800c100:	e7f2      	b.n	800c0e8 <_dtoa_r+0xaa0>
 800c102:	f04f 0900 	mov.w	r9, #0
 800c106:	2201      	movs	r2, #1
 800c108:	9904      	ldr	r1, [sp, #16]
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 fa2c 	bl	800c568 <__lshift>
 800c110:	4639      	mov	r1, r7
 800c112:	9004      	str	r0, [sp, #16]
 800c114:	f000 fa7c 	bl	800c610 <__mcmp>
 800c118:	2800      	cmp	r0, #0
 800c11a:	dcb6      	bgt.n	800c08a <_dtoa_r+0xa42>
 800c11c:	d102      	bne.n	800c124 <_dtoa_r+0xadc>
 800c11e:	f018 0f01 	tst.w	r8, #1
 800c122:	d1b2      	bne.n	800c08a <_dtoa_r+0xa42>
 800c124:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c128:	2b30      	cmp	r3, #48	; 0x30
 800c12a:	f105 32ff 	add.w	r2, r5, #4294967295
 800c12e:	f47f af0a 	bne.w	800bf46 <_dtoa_r+0x8fe>
 800c132:	4615      	mov	r5, r2
 800c134:	e7f6      	b.n	800c124 <_dtoa_r+0xadc>
 800c136:	4593      	cmp	fp, r2
 800c138:	d105      	bne.n	800c146 <_dtoa_r+0xafe>
 800c13a:	2331      	movs	r3, #49	; 0x31
 800c13c:	f10a 0a01 	add.w	sl, sl, #1
 800c140:	f88b 3000 	strb.w	r3, [fp]
 800c144:	e6ff      	b.n	800bf46 <_dtoa_r+0x8fe>
 800c146:	4615      	mov	r5, r2
 800c148:	e79f      	b.n	800c08a <_dtoa_r+0xa42>
 800c14a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c1b0 <_dtoa_r+0xb68>
 800c14e:	e007      	b.n	800c160 <_dtoa_r+0xb18>
 800c150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c152:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c1b4 <_dtoa_r+0xb6c>
 800c156:	b11b      	cbz	r3, 800c160 <_dtoa_r+0xb18>
 800c158:	f10b 0308 	add.w	r3, fp, #8
 800c15c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	4658      	mov	r0, fp
 800c162:	b017      	add	sp, #92	; 0x5c
 800c164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	f77f ae35 	ble.w	800bdda <_dtoa_r+0x792>
 800c170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c172:	9307      	str	r3, [sp, #28]
 800c174:	e649      	b.n	800be0a <_dtoa_r+0x7c2>
 800c176:	9b02      	ldr	r3, [sp, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dc03      	bgt.n	800c184 <_dtoa_r+0xb3c>
 800c17c:	9b06      	ldr	r3, [sp, #24]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	f73f aecc 	bgt.w	800bf1c <_dtoa_r+0x8d4>
 800c184:	465d      	mov	r5, fp
 800c186:	4639      	mov	r1, r7
 800c188:	9804      	ldr	r0, [sp, #16]
 800c18a:	f7ff f9ce 	bl	800b52a <quorem>
 800c18e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c192:	f805 8b01 	strb.w	r8, [r5], #1
 800c196:	9a02      	ldr	r2, [sp, #8]
 800c198:	eba5 030b 	sub.w	r3, r5, fp
 800c19c:	429a      	cmp	r2, r3
 800c19e:	ddb0      	ble.n	800c102 <_dtoa_r+0xaba>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	9904      	ldr	r1, [sp, #16]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 f867 	bl	800c27a <__multadd>
 800c1ac:	9004      	str	r0, [sp, #16]
 800c1ae:	e7ea      	b.n	800c186 <_dtoa_r+0xb3e>
 800c1b0:	0800d0f8 	.word	0x0800d0f8
 800c1b4:	0800d0fa 	.word	0x0800d0fa

0800c1b8 <_localeconv_r>:
 800c1b8:	4b04      	ldr	r3, [pc, #16]	; (800c1cc <_localeconv_r+0x14>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6a18      	ldr	r0, [r3, #32]
 800c1be:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <_localeconv_r+0x18>)
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	bf08      	it	eq
 800c1c4:	4618      	moveq	r0, r3
 800c1c6:	30f0      	adds	r0, #240	; 0xf0
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000010 	.word	0x20000010
 800c1d0:	20000074 	.word	0x20000074

0800c1d4 <malloc>:
 800c1d4:	4b02      	ldr	r3, [pc, #8]	; (800c1e0 <malloc+0xc>)
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	f000 baed 	b.w	800c7b8 <_malloc_r>
 800c1de:	bf00      	nop
 800c1e0:	20000010 	.word	0x20000010

0800c1e4 <_Balloc>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	460e      	mov	r6, r1
 800c1ec:	b93d      	cbnz	r5, 800c1fe <_Balloc+0x1a>
 800c1ee:	2010      	movs	r0, #16
 800c1f0:	f7ff fff0 	bl	800c1d4 <malloc>
 800c1f4:	6260      	str	r0, [r4, #36]	; 0x24
 800c1f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c1fa:	6005      	str	r5, [r0, #0]
 800c1fc:	60c5      	str	r5, [r0, #12]
 800c1fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c200:	68eb      	ldr	r3, [r5, #12]
 800c202:	b183      	cbz	r3, 800c226 <_Balloc+0x42>
 800c204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c20c:	b9b8      	cbnz	r0, 800c23e <_Balloc+0x5a>
 800c20e:	2101      	movs	r1, #1
 800c210:	fa01 f506 	lsl.w	r5, r1, r6
 800c214:	1d6a      	adds	r2, r5, #5
 800c216:	0092      	lsls	r2, r2, #2
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 fabf 	bl	800c79c <_calloc_r>
 800c21e:	b160      	cbz	r0, 800c23a <_Balloc+0x56>
 800c220:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c224:	e00e      	b.n	800c244 <_Balloc+0x60>
 800c226:	2221      	movs	r2, #33	; 0x21
 800c228:	2104      	movs	r1, #4
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 fab6 	bl	800c79c <_calloc_r>
 800c230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c232:	60e8      	str	r0, [r5, #12]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e4      	bne.n	800c204 <_Balloc+0x20>
 800c23a:	2000      	movs	r0, #0
 800c23c:	bd70      	pop	{r4, r5, r6, pc}
 800c23e:	6802      	ldr	r2, [r0, #0]
 800c240:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c244:	2300      	movs	r3, #0
 800c246:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c24a:	e7f7      	b.n	800c23c <_Balloc+0x58>

0800c24c <_Bfree>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c250:	4606      	mov	r6, r0
 800c252:	460d      	mov	r5, r1
 800c254:	b93c      	cbnz	r4, 800c266 <_Bfree+0x1a>
 800c256:	2010      	movs	r0, #16
 800c258:	f7ff ffbc 	bl	800c1d4 <malloc>
 800c25c:	6270      	str	r0, [r6, #36]	; 0x24
 800c25e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c262:	6004      	str	r4, [r0, #0]
 800c264:	60c4      	str	r4, [r0, #12]
 800c266:	b13d      	cbz	r5, 800c278 <_Bfree+0x2c>
 800c268:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c26a:	686a      	ldr	r2, [r5, #4]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c272:	6029      	str	r1, [r5, #0]
 800c274:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c278:	bd70      	pop	{r4, r5, r6, pc}

0800c27a <__multadd>:
 800c27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27e:	690d      	ldr	r5, [r1, #16]
 800c280:	461f      	mov	r7, r3
 800c282:	4606      	mov	r6, r0
 800c284:	460c      	mov	r4, r1
 800c286:	f101 0c14 	add.w	ip, r1, #20
 800c28a:	2300      	movs	r3, #0
 800c28c:	f8dc 0000 	ldr.w	r0, [ip]
 800c290:	b281      	uxth	r1, r0
 800c292:	fb02 7101 	mla	r1, r2, r1, r7
 800c296:	0c0f      	lsrs	r7, r1, #16
 800c298:	0c00      	lsrs	r0, r0, #16
 800c29a:	fb02 7000 	mla	r0, r2, r0, r7
 800c29e:	b289      	uxth	r1, r1
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c2a6:	429d      	cmp	r5, r3
 800c2a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c2ac:	f84c 1b04 	str.w	r1, [ip], #4
 800c2b0:	dcec      	bgt.n	800c28c <__multadd+0x12>
 800c2b2:	b1d7      	cbz	r7, 800c2ea <__multadd+0x70>
 800c2b4:	68a3      	ldr	r3, [r4, #8]
 800c2b6:	42ab      	cmp	r3, r5
 800c2b8:	dc12      	bgt.n	800c2e0 <__multadd+0x66>
 800c2ba:	6861      	ldr	r1, [r4, #4]
 800c2bc:	4630      	mov	r0, r6
 800c2be:	3101      	adds	r1, #1
 800c2c0:	f7ff ff90 	bl	800c1e4 <_Balloc>
 800c2c4:	6922      	ldr	r2, [r4, #16]
 800c2c6:	3202      	adds	r2, #2
 800c2c8:	f104 010c 	add.w	r1, r4, #12
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	0092      	lsls	r2, r2, #2
 800c2d0:	300c      	adds	r0, #12
 800c2d2:	f7fe fdcd 	bl	800ae70 <memcpy>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7ff ffb7 	bl	800c24c <_Bfree>
 800c2de:	4644      	mov	r4, r8
 800c2e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	615f      	str	r7, [r3, #20]
 800c2e8:	6125      	str	r5, [r4, #16]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c2f0 <__hi0bits>:
 800c2f0:	0c02      	lsrs	r2, r0, #16
 800c2f2:	0412      	lsls	r2, r2, #16
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	b9b2      	cbnz	r2, 800c326 <__hi0bits+0x36>
 800c2f8:	0403      	lsls	r3, r0, #16
 800c2fa:	2010      	movs	r0, #16
 800c2fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c300:	bf04      	itt	eq
 800c302:	021b      	lsleq	r3, r3, #8
 800c304:	3008      	addeq	r0, #8
 800c306:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c30a:	bf04      	itt	eq
 800c30c:	011b      	lsleq	r3, r3, #4
 800c30e:	3004      	addeq	r0, #4
 800c310:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c314:	bf04      	itt	eq
 800c316:	009b      	lsleq	r3, r3, #2
 800c318:	3002      	addeq	r0, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	db06      	blt.n	800c32c <__hi0bits+0x3c>
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	d503      	bpl.n	800c32a <__hi0bits+0x3a>
 800c322:	3001      	adds	r0, #1
 800c324:	4770      	bx	lr
 800c326:	2000      	movs	r0, #0
 800c328:	e7e8      	b.n	800c2fc <__hi0bits+0xc>
 800c32a:	2020      	movs	r0, #32
 800c32c:	4770      	bx	lr

0800c32e <__lo0bits>:
 800c32e:	6803      	ldr	r3, [r0, #0]
 800c330:	f013 0207 	ands.w	r2, r3, #7
 800c334:	4601      	mov	r1, r0
 800c336:	d00b      	beq.n	800c350 <__lo0bits+0x22>
 800c338:	07da      	lsls	r2, r3, #31
 800c33a:	d423      	bmi.n	800c384 <__lo0bits+0x56>
 800c33c:	0798      	lsls	r0, r3, #30
 800c33e:	bf49      	itett	mi
 800c340:	085b      	lsrmi	r3, r3, #1
 800c342:	089b      	lsrpl	r3, r3, #2
 800c344:	2001      	movmi	r0, #1
 800c346:	600b      	strmi	r3, [r1, #0]
 800c348:	bf5c      	itt	pl
 800c34a:	600b      	strpl	r3, [r1, #0]
 800c34c:	2002      	movpl	r0, #2
 800c34e:	4770      	bx	lr
 800c350:	b298      	uxth	r0, r3
 800c352:	b9a8      	cbnz	r0, 800c380 <__lo0bits+0x52>
 800c354:	0c1b      	lsrs	r3, r3, #16
 800c356:	2010      	movs	r0, #16
 800c358:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c35c:	bf04      	itt	eq
 800c35e:	0a1b      	lsreq	r3, r3, #8
 800c360:	3008      	addeq	r0, #8
 800c362:	071a      	lsls	r2, r3, #28
 800c364:	bf04      	itt	eq
 800c366:	091b      	lsreq	r3, r3, #4
 800c368:	3004      	addeq	r0, #4
 800c36a:	079a      	lsls	r2, r3, #30
 800c36c:	bf04      	itt	eq
 800c36e:	089b      	lsreq	r3, r3, #2
 800c370:	3002      	addeq	r0, #2
 800c372:	07da      	lsls	r2, r3, #31
 800c374:	d402      	bmi.n	800c37c <__lo0bits+0x4e>
 800c376:	085b      	lsrs	r3, r3, #1
 800c378:	d006      	beq.n	800c388 <__lo0bits+0x5a>
 800c37a:	3001      	adds	r0, #1
 800c37c:	600b      	str	r3, [r1, #0]
 800c37e:	4770      	bx	lr
 800c380:	4610      	mov	r0, r2
 800c382:	e7e9      	b.n	800c358 <__lo0bits+0x2a>
 800c384:	2000      	movs	r0, #0
 800c386:	4770      	bx	lr
 800c388:	2020      	movs	r0, #32
 800c38a:	4770      	bx	lr

0800c38c <__i2b>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	2101      	movs	r1, #1
 800c392:	f7ff ff27 	bl	800c1e4 <_Balloc>
 800c396:	2201      	movs	r2, #1
 800c398:	6144      	str	r4, [r0, #20]
 800c39a:	6102      	str	r2, [r0, #16]
 800c39c:	bd10      	pop	{r4, pc}

0800c39e <__multiply>:
 800c39e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a2:	4614      	mov	r4, r2
 800c3a4:	690a      	ldr	r2, [r1, #16]
 800c3a6:	6923      	ldr	r3, [r4, #16]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	bfb8      	it	lt
 800c3ac:	460b      	movlt	r3, r1
 800c3ae:	4688      	mov	r8, r1
 800c3b0:	bfbc      	itt	lt
 800c3b2:	46a0      	movlt	r8, r4
 800c3b4:	461c      	movlt	r4, r3
 800c3b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c3be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3c6:	eb07 0609 	add.w	r6, r7, r9
 800c3ca:	42b3      	cmp	r3, r6
 800c3cc:	bfb8      	it	lt
 800c3ce:	3101      	addlt	r1, #1
 800c3d0:	f7ff ff08 	bl	800c1e4 <_Balloc>
 800c3d4:	f100 0514 	add.w	r5, r0, #20
 800c3d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c3dc:	462b      	mov	r3, r5
 800c3de:	2200      	movs	r2, #0
 800c3e0:	4573      	cmp	r3, lr
 800c3e2:	d316      	bcc.n	800c412 <__multiply+0x74>
 800c3e4:	f104 0214 	add.w	r2, r4, #20
 800c3e8:	f108 0114 	add.w	r1, r8, #20
 800c3ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c3f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	9b00      	ldr	r3, [sp, #0]
 800c3f8:	9201      	str	r2, [sp, #4]
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d80c      	bhi.n	800c418 <__multiply+0x7a>
 800c3fe:	2e00      	cmp	r6, #0
 800c400:	dd03      	ble.n	800c40a <__multiply+0x6c>
 800c402:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c406:	2b00      	cmp	r3, #0
 800c408:	d05d      	beq.n	800c4c6 <__multiply+0x128>
 800c40a:	6106      	str	r6, [r0, #16]
 800c40c:	b003      	add	sp, #12
 800c40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c412:	f843 2b04 	str.w	r2, [r3], #4
 800c416:	e7e3      	b.n	800c3e0 <__multiply+0x42>
 800c418:	f8b2 b000 	ldrh.w	fp, [r2]
 800c41c:	f1bb 0f00 	cmp.w	fp, #0
 800c420:	d023      	beq.n	800c46a <__multiply+0xcc>
 800c422:	4689      	mov	r9, r1
 800c424:	46ac      	mov	ip, r5
 800c426:	f04f 0800 	mov.w	r8, #0
 800c42a:	f859 4b04 	ldr.w	r4, [r9], #4
 800c42e:	f8dc a000 	ldr.w	sl, [ip]
 800c432:	b2a3      	uxth	r3, r4
 800c434:	fa1f fa8a 	uxth.w	sl, sl
 800c438:	fb0b a303 	mla	r3, fp, r3, sl
 800c43c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c440:	f8dc 4000 	ldr.w	r4, [ip]
 800c444:	4443      	add	r3, r8
 800c446:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c44a:	fb0b 840a 	mla	r4, fp, sl, r8
 800c44e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c452:	46e2      	mov	sl, ip
 800c454:	b29b      	uxth	r3, r3
 800c456:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c45a:	454f      	cmp	r7, r9
 800c45c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c460:	f84a 3b04 	str.w	r3, [sl], #4
 800c464:	d82b      	bhi.n	800c4be <__multiply+0x120>
 800c466:	f8cc 8004 	str.w	r8, [ip, #4]
 800c46a:	9b01      	ldr	r3, [sp, #4]
 800c46c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c470:	3204      	adds	r2, #4
 800c472:	f1ba 0f00 	cmp.w	sl, #0
 800c476:	d020      	beq.n	800c4ba <__multiply+0x11c>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	4689      	mov	r9, r1
 800c47c:	46a8      	mov	r8, r5
 800c47e:	f04f 0b00 	mov.w	fp, #0
 800c482:	f8b9 c000 	ldrh.w	ip, [r9]
 800c486:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c48a:	fb0a 440c 	mla	r4, sl, ip, r4
 800c48e:	445c      	add	r4, fp
 800c490:	46c4      	mov	ip, r8
 800c492:	b29b      	uxth	r3, r3
 800c494:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c498:	f84c 3b04 	str.w	r3, [ip], #4
 800c49c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c4a4:	0c1b      	lsrs	r3, r3, #16
 800c4a6:	fb0a b303 	mla	r3, sl, r3, fp
 800c4aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c4ae:	454f      	cmp	r7, r9
 800c4b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c4b4:	d805      	bhi.n	800c4c2 <__multiply+0x124>
 800c4b6:	f8c8 3004 	str.w	r3, [r8, #4]
 800c4ba:	3504      	adds	r5, #4
 800c4bc:	e79b      	b.n	800c3f6 <__multiply+0x58>
 800c4be:	46d4      	mov	ip, sl
 800c4c0:	e7b3      	b.n	800c42a <__multiply+0x8c>
 800c4c2:	46e0      	mov	r8, ip
 800c4c4:	e7dd      	b.n	800c482 <__multiply+0xe4>
 800c4c6:	3e01      	subs	r6, #1
 800c4c8:	e799      	b.n	800c3fe <__multiply+0x60>
	...

0800c4cc <__pow5mult>:
 800c4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d0:	4615      	mov	r5, r2
 800c4d2:	f012 0203 	ands.w	r2, r2, #3
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	460f      	mov	r7, r1
 800c4da:	d007      	beq.n	800c4ec <__pow5mult+0x20>
 800c4dc:	3a01      	subs	r2, #1
 800c4de:	4c21      	ldr	r4, [pc, #132]	; (800c564 <__pow5mult+0x98>)
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4e6:	f7ff fec8 	bl	800c27a <__multadd>
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	10ad      	asrs	r5, r5, #2
 800c4ee:	d035      	beq.n	800c55c <__pow5mult+0x90>
 800c4f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c4f2:	b93c      	cbnz	r4, 800c504 <__pow5mult+0x38>
 800c4f4:	2010      	movs	r0, #16
 800c4f6:	f7ff fe6d 	bl	800c1d4 <malloc>
 800c4fa:	6270      	str	r0, [r6, #36]	; 0x24
 800c4fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c500:	6004      	str	r4, [r0, #0]
 800c502:	60c4      	str	r4, [r0, #12]
 800c504:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c50c:	b94c      	cbnz	r4, 800c522 <__pow5mult+0x56>
 800c50e:	f240 2171 	movw	r1, #625	; 0x271
 800c512:	4630      	mov	r0, r6
 800c514:	f7ff ff3a 	bl	800c38c <__i2b>
 800c518:	2300      	movs	r3, #0
 800c51a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c51e:	4604      	mov	r4, r0
 800c520:	6003      	str	r3, [r0, #0]
 800c522:	f04f 0800 	mov.w	r8, #0
 800c526:	07eb      	lsls	r3, r5, #31
 800c528:	d50a      	bpl.n	800c540 <__pow5mult+0x74>
 800c52a:	4639      	mov	r1, r7
 800c52c:	4622      	mov	r2, r4
 800c52e:	4630      	mov	r0, r6
 800c530:	f7ff ff35 	bl	800c39e <__multiply>
 800c534:	4639      	mov	r1, r7
 800c536:	4681      	mov	r9, r0
 800c538:	4630      	mov	r0, r6
 800c53a:	f7ff fe87 	bl	800c24c <_Bfree>
 800c53e:	464f      	mov	r7, r9
 800c540:	106d      	asrs	r5, r5, #1
 800c542:	d00b      	beq.n	800c55c <__pow5mult+0x90>
 800c544:	6820      	ldr	r0, [r4, #0]
 800c546:	b938      	cbnz	r0, 800c558 <__pow5mult+0x8c>
 800c548:	4622      	mov	r2, r4
 800c54a:	4621      	mov	r1, r4
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7ff ff26 	bl	800c39e <__multiply>
 800c552:	6020      	str	r0, [r4, #0]
 800c554:	f8c0 8000 	str.w	r8, [r0]
 800c558:	4604      	mov	r4, r0
 800c55a:	e7e4      	b.n	800c526 <__pow5mult+0x5a>
 800c55c:	4638      	mov	r0, r7
 800c55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c562:	bf00      	nop
 800c564:	0800d1f8 	.word	0x0800d1f8

0800c568 <__lshift>:
 800c568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c56c:	460c      	mov	r4, r1
 800c56e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	6849      	ldr	r1, [r1, #4]
 800c576:	eb0a 0903 	add.w	r9, sl, r3
 800c57a:	68a3      	ldr	r3, [r4, #8]
 800c57c:	4607      	mov	r7, r0
 800c57e:	4616      	mov	r6, r2
 800c580:	f109 0501 	add.w	r5, r9, #1
 800c584:	42ab      	cmp	r3, r5
 800c586:	db32      	blt.n	800c5ee <__lshift+0x86>
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff fe2b 	bl	800c1e4 <_Balloc>
 800c58e:	2300      	movs	r3, #0
 800c590:	4680      	mov	r8, r0
 800c592:	f100 0114 	add.w	r1, r0, #20
 800c596:	461a      	mov	r2, r3
 800c598:	4553      	cmp	r3, sl
 800c59a:	db2b      	blt.n	800c5f4 <__lshift+0x8c>
 800c59c:	6920      	ldr	r0, [r4, #16]
 800c59e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5a2:	f104 0314 	add.w	r3, r4, #20
 800c5a6:	f016 021f 	ands.w	r2, r6, #31
 800c5aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5b2:	d025      	beq.n	800c600 <__lshift+0x98>
 800c5b4:	f1c2 0e20 	rsb	lr, r2, #32
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	681e      	ldr	r6, [r3, #0]
 800c5bc:	468a      	mov	sl, r1
 800c5be:	4096      	lsls	r6, r2
 800c5c0:	4330      	orrs	r0, r6
 800c5c2:	f84a 0b04 	str.w	r0, [sl], #4
 800c5c6:	f853 0b04 	ldr.w	r0, [r3], #4
 800c5ca:	459c      	cmp	ip, r3
 800c5cc:	fa20 f00e 	lsr.w	r0, r0, lr
 800c5d0:	d814      	bhi.n	800c5fc <__lshift+0x94>
 800c5d2:	6048      	str	r0, [r1, #4]
 800c5d4:	b108      	cbz	r0, 800c5da <__lshift+0x72>
 800c5d6:	f109 0502 	add.w	r5, r9, #2
 800c5da:	3d01      	subs	r5, #1
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f8c8 5010 	str.w	r5, [r8, #16]
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	f7ff fe32 	bl	800c24c <_Bfree>
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ee:	3101      	adds	r1, #1
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	e7c7      	b.n	800c584 <__lshift+0x1c>
 800c5f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	e7cd      	b.n	800c598 <__lshift+0x30>
 800c5fc:	4651      	mov	r1, sl
 800c5fe:	e7dc      	b.n	800c5ba <__lshift+0x52>
 800c600:	3904      	subs	r1, #4
 800c602:	f853 2b04 	ldr.w	r2, [r3], #4
 800c606:	f841 2f04 	str.w	r2, [r1, #4]!
 800c60a:	459c      	cmp	ip, r3
 800c60c:	d8f9      	bhi.n	800c602 <__lshift+0x9a>
 800c60e:	e7e4      	b.n	800c5da <__lshift+0x72>

0800c610 <__mcmp>:
 800c610:	6903      	ldr	r3, [r0, #16]
 800c612:	690a      	ldr	r2, [r1, #16]
 800c614:	1a9b      	subs	r3, r3, r2
 800c616:	b530      	push	{r4, r5, lr}
 800c618:	d10c      	bne.n	800c634 <__mcmp+0x24>
 800c61a:	0092      	lsls	r2, r2, #2
 800c61c:	3014      	adds	r0, #20
 800c61e:	3114      	adds	r1, #20
 800c620:	1884      	adds	r4, r0, r2
 800c622:	4411      	add	r1, r2
 800c624:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c628:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c62c:	4295      	cmp	r5, r2
 800c62e:	d003      	beq.n	800c638 <__mcmp+0x28>
 800c630:	d305      	bcc.n	800c63e <__mcmp+0x2e>
 800c632:	2301      	movs	r3, #1
 800c634:	4618      	mov	r0, r3
 800c636:	bd30      	pop	{r4, r5, pc}
 800c638:	42a0      	cmp	r0, r4
 800c63a:	d3f3      	bcc.n	800c624 <__mcmp+0x14>
 800c63c:	e7fa      	b.n	800c634 <__mcmp+0x24>
 800c63e:	f04f 33ff 	mov.w	r3, #4294967295
 800c642:	e7f7      	b.n	800c634 <__mcmp+0x24>

0800c644 <__mdiff>:
 800c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c648:	460d      	mov	r5, r1
 800c64a:	4607      	mov	r7, r0
 800c64c:	4611      	mov	r1, r2
 800c64e:	4628      	mov	r0, r5
 800c650:	4614      	mov	r4, r2
 800c652:	f7ff ffdd 	bl	800c610 <__mcmp>
 800c656:	1e06      	subs	r6, r0, #0
 800c658:	d108      	bne.n	800c66c <__mdiff+0x28>
 800c65a:	4631      	mov	r1, r6
 800c65c:	4638      	mov	r0, r7
 800c65e:	f7ff fdc1 	bl	800c1e4 <_Balloc>
 800c662:	2301      	movs	r3, #1
 800c664:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66c:	bfa4      	itt	ge
 800c66e:	4623      	movge	r3, r4
 800c670:	462c      	movge	r4, r5
 800c672:	4638      	mov	r0, r7
 800c674:	6861      	ldr	r1, [r4, #4]
 800c676:	bfa6      	itte	ge
 800c678:	461d      	movge	r5, r3
 800c67a:	2600      	movge	r6, #0
 800c67c:	2601      	movlt	r6, #1
 800c67e:	f7ff fdb1 	bl	800c1e4 <_Balloc>
 800c682:	692b      	ldr	r3, [r5, #16]
 800c684:	60c6      	str	r6, [r0, #12]
 800c686:	6926      	ldr	r6, [r4, #16]
 800c688:	f105 0914 	add.w	r9, r5, #20
 800c68c:	f104 0214 	add.w	r2, r4, #20
 800c690:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c694:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c698:	f100 0514 	add.w	r5, r0, #20
 800c69c:	f04f 0e00 	mov.w	lr, #0
 800c6a0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c6a4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c6a8:	fa1e f18a 	uxtah	r1, lr, sl
 800c6ac:	b2a3      	uxth	r3, r4
 800c6ae:	1ac9      	subs	r1, r1, r3
 800c6b0:	0c23      	lsrs	r3, r4, #16
 800c6b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c6b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c6ba:	b289      	uxth	r1, r1
 800c6bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c6c0:	45c8      	cmp	r8, r9
 800c6c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c6c6:	4694      	mov	ip, r2
 800c6c8:	f845 3b04 	str.w	r3, [r5], #4
 800c6cc:	d8e8      	bhi.n	800c6a0 <__mdiff+0x5c>
 800c6ce:	45bc      	cmp	ip, r7
 800c6d0:	d304      	bcc.n	800c6dc <__mdiff+0x98>
 800c6d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c6d6:	b183      	cbz	r3, 800c6fa <__mdiff+0xb6>
 800c6d8:	6106      	str	r6, [r0, #16]
 800c6da:	e7c5      	b.n	800c668 <__mdiff+0x24>
 800c6dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c6e0:	fa1e f381 	uxtah	r3, lr, r1
 800c6e4:	141a      	asrs	r2, r3, #16
 800c6e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c6f4:	f845 3b04 	str.w	r3, [r5], #4
 800c6f8:	e7e9      	b.n	800c6ce <__mdiff+0x8a>
 800c6fa:	3e01      	subs	r6, #1
 800c6fc:	e7e9      	b.n	800c6d2 <__mdiff+0x8e>

0800c6fe <__d2b>:
 800c6fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c702:	460e      	mov	r6, r1
 800c704:	2101      	movs	r1, #1
 800c706:	ec59 8b10 	vmov	r8, r9, d0
 800c70a:	4615      	mov	r5, r2
 800c70c:	f7ff fd6a 	bl	800c1e4 <_Balloc>
 800c710:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c714:	4607      	mov	r7, r0
 800c716:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c71a:	bb34      	cbnz	r4, 800c76a <__d2b+0x6c>
 800c71c:	9301      	str	r3, [sp, #4]
 800c71e:	f1b8 0300 	subs.w	r3, r8, #0
 800c722:	d027      	beq.n	800c774 <__d2b+0x76>
 800c724:	a802      	add	r0, sp, #8
 800c726:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c72a:	f7ff fe00 	bl	800c32e <__lo0bits>
 800c72e:	9900      	ldr	r1, [sp, #0]
 800c730:	b1f0      	cbz	r0, 800c770 <__d2b+0x72>
 800c732:	9a01      	ldr	r2, [sp, #4]
 800c734:	f1c0 0320 	rsb	r3, r0, #32
 800c738:	fa02 f303 	lsl.w	r3, r2, r3
 800c73c:	430b      	orrs	r3, r1
 800c73e:	40c2      	lsrs	r2, r0
 800c740:	617b      	str	r3, [r7, #20]
 800c742:	9201      	str	r2, [sp, #4]
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	61bb      	str	r3, [r7, #24]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bf14      	ite	ne
 800c74c:	2102      	movne	r1, #2
 800c74e:	2101      	moveq	r1, #1
 800c750:	6139      	str	r1, [r7, #16]
 800c752:	b1c4      	cbz	r4, 800c786 <__d2b+0x88>
 800c754:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c758:	4404      	add	r4, r0
 800c75a:	6034      	str	r4, [r6, #0]
 800c75c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c760:	6028      	str	r0, [r5, #0]
 800c762:	4638      	mov	r0, r7
 800c764:	b003      	add	sp, #12
 800c766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c76a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c76e:	e7d5      	b.n	800c71c <__d2b+0x1e>
 800c770:	6179      	str	r1, [r7, #20]
 800c772:	e7e7      	b.n	800c744 <__d2b+0x46>
 800c774:	a801      	add	r0, sp, #4
 800c776:	f7ff fdda 	bl	800c32e <__lo0bits>
 800c77a:	9b01      	ldr	r3, [sp, #4]
 800c77c:	617b      	str	r3, [r7, #20]
 800c77e:	2101      	movs	r1, #1
 800c780:	6139      	str	r1, [r7, #16]
 800c782:	3020      	adds	r0, #32
 800c784:	e7e5      	b.n	800c752 <__d2b+0x54>
 800c786:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c78a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c78e:	6030      	str	r0, [r6, #0]
 800c790:	6918      	ldr	r0, [r3, #16]
 800c792:	f7ff fdad 	bl	800c2f0 <__hi0bits>
 800c796:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c79a:	e7e1      	b.n	800c760 <__d2b+0x62>

0800c79c <_calloc_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	fb02 f401 	mul.w	r4, r2, r1
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	f000 f808 	bl	800c7b8 <_malloc_r>
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	b118      	cbz	r0, 800c7b4 <_calloc_r+0x18>
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	f7fe fb69 	bl	800ae86 <memset>
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}

0800c7b8 <_malloc_r>:
 800c7b8:	b570      	push	{r4, r5, r6, lr}
 800c7ba:	1ccd      	adds	r5, r1, #3
 800c7bc:	f025 0503 	bic.w	r5, r5, #3
 800c7c0:	3508      	adds	r5, #8
 800c7c2:	2d0c      	cmp	r5, #12
 800c7c4:	bf38      	it	cc
 800c7c6:	250c      	movcc	r5, #12
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	db01      	blt.n	800c7d2 <_malloc_r+0x1a>
 800c7ce:	42a9      	cmp	r1, r5
 800c7d0:	d903      	bls.n	800c7da <_malloc_r+0x22>
 800c7d2:	230c      	movs	r3, #12
 800c7d4:	6033      	str	r3, [r6, #0]
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
 800c7da:	f000 f869 	bl	800c8b0 <__malloc_lock>
 800c7de:	4a21      	ldr	r2, [pc, #132]	; (800c864 <_malloc_r+0xac>)
 800c7e0:	6814      	ldr	r4, [r2, #0]
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	b991      	cbnz	r1, 800c80c <_malloc_r+0x54>
 800c7e6:	4c20      	ldr	r4, [pc, #128]	; (800c868 <_malloc_r+0xb0>)
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	b91b      	cbnz	r3, 800c7f4 <_malloc_r+0x3c>
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f000 f83d 	bl	800c86c <_sbrk_r>
 800c7f2:	6020      	str	r0, [r4, #0]
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f000 f838 	bl	800c86c <_sbrk_r>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d124      	bne.n	800c84a <_malloc_r+0x92>
 800c800:	230c      	movs	r3, #12
 800c802:	6033      	str	r3, [r6, #0]
 800c804:	4630      	mov	r0, r6
 800c806:	f000 f854 	bl	800c8b2 <__malloc_unlock>
 800c80a:	e7e4      	b.n	800c7d6 <_malloc_r+0x1e>
 800c80c:	680b      	ldr	r3, [r1, #0]
 800c80e:	1b5b      	subs	r3, r3, r5
 800c810:	d418      	bmi.n	800c844 <_malloc_r+0x8c>
 800c812:	2b0b      	cmp	r3, #11
 800c814:	d90f      	bls.n	800c836 <_malloc_r+0x7e>
 800c816:	600b      	str	r3, [r1, #0]
 800c818:	50cd      	str	r5, [r1, r3]
 800c81a:	18cc      	adds	r4, r1, r3
 800c81c:	4630      	mov	r0, r6
 800c81e:	f000 f848 	bl	800c8b2 <__malloc_unlock>
 800c822:	f104 000b 	add.w	r0, r4, #11
 800c826:	1d23      	adds	r3, r4, #4
 800c828:	f020 0007 	bic.w	r0, r0, #7
 800c82c:	1ac3      	subs	r3, r0, r3
 800c82e:	d0d3      	beq.n	800c7d8 <_malloc_r+0x20>
 800c830:	425a      	negs	r2, r3
 800c832:	50e2      	str	r2, [r4, r3]
 800c834:	e7d0      	b.n	800c7d8 <_malloc_r+0x20>
 800c836:	428c      	cmp	r4, r1
 800c838:	684b      	ldr	r3, [r1, #4]
 800c83a:	bf16      	itet	ne
 800c83c:	6063      	strne	r3, [r4, #4]
 800c83e:	6013      	streq	r3, [r2, #0]
 800c840:	460c      	movne	r4, r1
 800c842:	e7eb      	b.n	800c81c <_malloc_r+0x64>
 800c844:	460c      	mov	r4, r1
 800c846:	6849      	ldr	r1, [r1, #4]
 800c848:	e7cc      	b.n	800c7e4 <_malloc_r+0x2c>
 800c84a:	1cc4      	adds	r4, r0, #3
 800c84c:	f024 0403 	bic.w	r4, r4, #3
 800c850:	42a0      	cmp	r0, r4
 800c852:	d005      	beq.n	800c860 <_malloc_r+0xa8>
 800c854:	1a21      	subs	r1, r4, r0
 800c856:	4630      	mov	r0, r6
 800c858:	f000 f808 	bl	800c86c <_sbrk_r>
 800c85c:	3001      	adds	r0, #1
 800c85e:	d0cf      	beq.n	800c800 <_malloc_r+0x48>
 800c860:	6025      	str	r5, [r4, #0]
 800c862:	e7db      	b.n	800c81c <_malloc_r+0x64>
 800c864:	20004b08 	.word	0x20004b08
 800c868:	20004b0c 	.word	0x20004b0c

0800c86c <_sbrk_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4c06      	ldr	r4, [pc, #24]	; (800c888 <_sbrk_r+0x1c>)
 800c870:	2300      	movs	r3, #0
 800c872:	4605      	mov	r5, r0
 800c874:	4608      	mov	r0, r1
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	f7f7 f9f8 	bl	8003c6c <_sbrk>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_sbrk_r+0x1a>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	b103      	cbz	r3, 800c886 <_sbrk_r+0x1a>
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20004c94 	.word	0x20004c94

0800c88c <__ascii_mbtowc>:
 800c88c:	b082      	sub	sp, #8
 800c88e:	b901      	cbnz	r1, 800c892 <__ascii_mbtowc+0x6>
 800c890:	a901      	add	r1, sp, #4
 800c892:	b142      	cbz	r2, 800c8a6 <__ascii_mbtowc+0x1a>
 800c894:	b14b      	cbz	r3, 800c8aa <__ascii_mbtowc+0x1e>
 800c896:	7813      	ldrb	r3, [r2, #0]
 800c898:	600b      	str	r3, [r1, #0]
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	1c10      	adds	r0, r2, #0
 800c89e:	bf18      	it	ne
 800c8a0:	2001      	movne	r0, #1
 800c8a2:	b002      	add	sp, #8
 800c8a4:	4770      	bx	lr
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	e7fb      	b.n	800c8a2 <__ascii_mbtowc+0x16>
 800c8aa:	f06f 0001 	mvn.w	r0, #1
 800c8ae:	e7f8      	b.n	800c8a2 <__ascii_mbtowc+0x16>

0800c8b0 <__malloc_lock>:
 800c8b0:	4770      	bx	lr

0800c8b2 <__malloc_unlock>:
 800c8b2:	4770      	bx	lr

0800c8b4 <__ascii_wctomb>:
 800c8b4:	b149      	cbz	r1, 800c8ca <__ascii_wctomb+0x16>
 800c8b6:	2aff      	cmp	r2, #255	; 0xff
 800c8b8:	bf85      	ittet	hi
 800c8ba:	238a      	movhi	r3, #138	; 0x8a
 800c8bc:	6003      	strhi	r3, [r0, #0]
 800c8be:	700a      	strbls	r2, [r1, #0]
 800c8c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8c4:	bf98      	it	ls
 800c8c6:	2001      	movls	r0, #1
 800c8c8:	4770      	bx	lr
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4770      	bx	lr

0800c8ce <atan2>:
 800c8ce:	f000 b803 	b.w	800c8d8 <__ieee754_atan2>
 800c8d2:	0000      	movs	r0, r0
 800c8d4:	0000      	movs	r0, r0
	...

0800c8d8 <__ieee754_atan2>:
 800c8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8dc:	ec57 6b11 	vmov	r6, r7, d1
 800c8e0:	4273      	negs	r3, r6
 800c8e2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c8e6:	4333      	orrs	r3, r6
 800c8e8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800ca90 <__ieee754_atan2+0x1b8>
 800c8ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c8f0:	4573      	cmp	r3, lr
 800c8f2:	ec51 0b10 	vmov	r0, r1, d0
 800c8f6:	ee11 8a10 	vmov	r8, s2
 800c8fa:	d80a      	bhi.n	800c912 <__ieee754_atan2+0x3a>
 800c8fc:	4244      	negs	r4, r0
 800c8fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c902:	4304      	orrs	r4, r0
 800c904:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c908:	4574      	cmp	r4, lr
 800c90a:	468c      	mov	ip, r1
 800c90c:	ee10 9a10 	vmov	r9, s0
 800c910:	d907      	bls.n	800c922 <__ieee754_atan2+0x4a>
 800c912:	4632      	mov	r2, r6
 800c914:	463b      	mov	r3, r7
 800c916:	f7f3 fc71 	bl	80001fc <__adddf3>
 800c91a:	ec41 0b10 	vmov	d0, r0, r1
 800c91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c922:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c926:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c92a:	4334      	orrs	r4, r6
 800c92c:	d103      	bne.n	800c936 <__ieee754_atan2+0x5e>
 800c92e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c932:	f000 b8b1 	b.w	800ca98 <atan>
 800c936:	17bc      	asrs	r4, r7, #30
 800c938:	f004 0402 	and.w	r4, r4, #2
 800c93c:	ea53 0909 	orrs.w	r9, r3, r9
 800c940:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c944:	d107      	bne.n	800c956 <__ieee754_atan2+0x7e>
 800c946:	2c02      	cmp	r4, #2
 800c948:	d073      	beq.n	800ca32 <__ieee754_atan2+0x15a>
 800c94a:	2c03      	cmp	r4, #3
 800c94c:	d1e5      	bne.n	800c91a <__ieee754_atan2+0x42>
 800c94e:	a13e      	add	r1, pc, #248	; (adr r1, 800ca48 <__ieee754_atan2+0x170>)
 800c950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c954:	e7e1      	b.n	800c91a <__ieee754_atan2+0x42>
 800c956:	ea52 0808 	orrs.w	r8, r2, r8
 800c95a:	d106      	bne.n	800c96a <__ieee754_atan2+0x92>
 800c95c:	f1bc 0f00 	cmp.w	ip, #0
 800c960:	da6b      	bge.n	800ca3a <__ieee754_atan2+0x162>
 800c962:	a13b      	add	r1, pc, #236	; (adr r1, 800ca50 <__ieee754_atan2+0x178>)
 800c964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c968:	e7d7      	b.n	800c91a <__ieee754_atan2+0x42>
 800c96a:	4572      	cmp	r2, lr
 800c96c:	d120      	bne.n	800c9b0 <__ieee754_atan2+0xd8>
 800c96e:	4293      	cmp	r3, r2
 800c970:	d111      	bne.n	800c996 <__ieee754_atan2+0xbe>
 800c972:	2c02      	cmp	r4, #2
 800c974:	d007      	beq.n	800c986 <__ieee754_atan2+0xae>
 800c976:	2c03      	cmp	r4, #3
 800c978:	d009      	beq.n	800c98e <__ieee754_atan2+0xb6>
 800c97a:	2c01      	cmp	r4, #1
 800c97c:	d155      	bne.n	800ca2a <__ieee754_atan2+0x152>
 800c97e:	a136      	add	r1, pc, #216	; (adr r1, 800ca58 <__ieee754_atan2+0x180>)
 800c980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c984:	e7c9      	b.n	800c91a <__ieee754_atan2+0x42>
 800c986:	a136      	add	r1, pc, #216	; (adr r1, 800ca60 <__ieee754_atan2+0x188>)
 800c988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c98c:	e7c5      	b.n	800c91a <__ieee754_atan2+0x42>
 800c98e:	a136      	add	r1, pc, #216	; (adr r1, 800ca68 <__ieee754_atan2+0x190>)
 800c990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c994:	e7c1      	b.n	800c91a <__ieee754_atan2+0x42>
 800c996:	2c02      	cmp	r4, #2
 800c998:	d04b      	beq.n	800ca32 <__ieee754_atan2+0x15a>
 800c99a:	2c03      	cmp	r4, #3
 800c99c:	d0d7      	beq.n	800c94e <__ieee754_atan2+0x76>
 800c99e:	2c01      	cmp	r4, #1
 800c9a0:	f04f 0000 	mov.w	r0, #0
 800c9a4:	d102      	bne.n	800c9ac <__ieee754_atan2+0xd4>
 800c9a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c9aa:	e7b6      	b.n	800c91a <__ieee754_atan2+0x42>
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	e7b4      	b.n	800c91a <__ieee754_atan2+0x42>
 800c9b0:	4573      	cmp	r3, lr
 800c9b2:	d0d3      	beq.n	800c95c <__ieee754_atan2+0x84>
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	151b      	asrs	r3, r3, #20
 800c9b8:	2b3c      	cmp	r3, #60	; 0x3c
 800c9ba:	dc1e      	bgt.n	800c9fa <__ieee754_atan2+0x122>
 800c9bc:	2f00      	cmp	r7, #0
 800c9be:	da01      	bge.n	800c9c4 <__ieee754_atan2+0xec>
 800c9c0:	333c      	adds	r3, #60	; 0x3c
 800c9c2:	db1e      	blt.n	800ca02 <__ieee754_atan2+0x12a>
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	f7f3 fef8 	bl	80007bc <__aeabi_ddiv>
 800c9cc:	ec41 0b10 	vmov	d0, r0, r1
 800c9d0:	f000 fa02 	bl	800cdd8 <fabs>
 800c9d4:	f000 f860 	bl	800ca98 <atan>
 800c9d8:	ec51 0b10 	vmov	r0, r1, d0
 800c9dc:	2c01      	cmp	r4, #1
 800c9de:	d013      	beq.n	800ca08 <__ieee754_atan2+0x130>
 800c9e0:	2c02      	cmp	r4, #2
 800c9e2:	d015      	beq.n	800ca10 <__ieee754_atan2+0x138>
 800c9e4:	2c00      	cmp	r4, #0
 800c9e6:	d098      	beq.n	800c91a <__ieee754_atan2+0x42>
 800c9e8:	a321      	add	r3, pc, #132	; (adr r3, 800ca70 <__ieee754_atan2+0x198>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 fc03 	bl	80001f8 <__aeabi_dsub>
 800c9f2:	a321      	add	r3, pc, #132	; (adr r3, 800ca78 <__ieee754_atan2+0x1a0>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	e014      	b.n	800ca24 <__ieee754_atan2+0x14c>
 800c9fa:	a121      	add	r1, pc, #132	; (adr r1, 800ca80 <__ieee754_atan2+0x1a8>)
 800c9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca00:	e7ec      	b.n	800c9dc <__ieee754_atan2+0x104>
 800ca02:	2000      	movs	r0, #0
 800ca04:	2100      	movs	r1, #0
 800ca06:	e7e9      	b.n	800c9dc <__ieee754_atan2+0x104>
 800ca08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	e784      	b.n	800c91a <__ieee754_atan2+0x42>
 800ca10:	a317      	add	r3, pc, #92	; (adr r3, 800ca70 <__ieee754_atan2+0x198>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f7f3 fbef 	bl	80001f8 <__aeabi_dsub>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	a116      	add	r1, pc, #88	; (adr r1, 800ca78 <__ieee754_atan2+0x1a0>)
 800ca20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca24:	f7f3 fbe8 	bl	80001f8 <__aeabi_dsub>
 800ca28:	e777      	b.n	800c91a <__ieee754_atan2+0x42>
 800ca2a:	a117      	add	r1, pc, #92	; (adr r1, 800ca88 <__ieee754_atan2+0x1b0>)
 800ca2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca30:	e773      	b.n	800c91a <__ieee754_atan2+0x42>
 800ca32:	a111      	add	r1, pc, #68	; (adr r1, 800ca78 <__ieee754_atan2+0x1a0>)
 800ca34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca38:	e76f      	b.n	800c91a <__ieee754_atan2+0x42>
 800ca3a:	a111      	add	r1, pc, #68	; (adr r1, 800ca80 <__ieee754_atan2+0x1a8>)
 800ca3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca40:	e76b      	b.n	800c91a <__ieee754_atan2+0x42>
 800ca42:	bf00      	nop
 800ca44:	f3af 8000 	nop.w
 800ca48:	54442d18 	.word	0x54442d18
 800ca4c:	c00921fb 	.word	0xc00921fb
 800ca50:	54442d18 	.word	0x54442d18
 800ca54:	bff921fb 	.word	0xbff921fb
 800ca58:	54442d18 	.word	0x54442d18
 800ca5c:	bfe921fb 	.word	0xbfe921fb
 800ca60:	7f3321d2 	.word	0x7f3321d2
 800ca64:	4002d97c 	.word	0x4002d97c
 800ca68:	7f3321d2 	.word	0x7f3321d2
 800ca6c:	c002d97c 	.word	0xc002d97c
 800ca70:	33145c07 	.word	0x33145c07
 800ca74:	3ca1a626 	.word	0x3ca1a626
 800ca78:	54442d18 	.word	0x54442d18
 800ca7c:	400921fb 	.word	0x400921fb
 800ca80:	54442d18 	.word	0x54442d18
 800ca84:	3ff921fb 	.word	0x3ff921fb
 800ca88:	54442d18 	.word	0x54442d18
 800ca8c:	3fe921fb 	.word	0x3fe921fb
 800ca90:	7ff00000 	.word	0x7ff00000
 800ca94:	00000000 	.word	0x00000000

0800ca98 <atan>:
 800ca98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ec55 4b10 	vmov	r4, r5, d0
 800caa0:	4bc3      	ldr	r3, [pc, #780]	; (800cdb0 <atan+0x318>)
 800caa2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800caa6:	429e      	cmp	r6, r3
 800caa8:	46ab      	mov	fp, r5
 800caaa:	dd18      	ble.n	800cade <atan+0x46>
 800caac:	4bc1      	ldr	r3, [pc, #772]	; (800cdb4 <atan+0x31c>)
 800caae:	429e      	cmp	r6, r3
 800cab0:	dc01      	bgt.n	800cab6 <atan+0x1e>
 800cab2:	d109      	bne.n	800cac8 <atan+0x30>
 800cab4:	b144      	cbz	r4, 800cac8 <atan+0x30>
 800cab6:	4622      	mov	r2, r4
 800cab8:	462b      	mov	r3, r5
 800caba:	4620      	mov	r0, r4
 800cabc:	4629      	mov	r1, r5
 800cabe:	f7f3 fb9d 	bl	80001fc <__adddf3>
 800cac2:	4604      	mov	r4, r0
 800cac4:	460d      	mov	r5, r1
 800cac6:	e006      	b.n	800cad6 <atan+0x3e>
 800cac8:	f1bb 0f00 	cmp.w	fp, #0
 800cacc:	f340 8131 	ble.w	800cd32 <atan+0x29a>
 800cad0:	a59b      	add	r5, pc, #620	; (adr r5, 800cd40 <atan+0x2a8>)
 800cad2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cad6:	ec45 4b10 	vmov	d0, r4, r5
 800cada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cade:	4bb6      	ldr	r3, [pc, #728]	; (800cdb8 <atan+0x320>)
 800cae0:	429e      	cmp	r6, r3
 800cae2:	dc14      	bgt.n	800cb0e <atan+0x76>
 800cae4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cae8:	429e      	cmp	r6, r3
 800caea:	dc0d      	bgt.n	800cb08 <atan+0x70>
 800caec:	a396      	add	r3, pc, #600	; (adr r3, 800cd48 <atan+0x2b0>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	ee10 0a10 	vmov	r0, s0
 800caf6:	4629      	mov	r1, r5
 800caf8:	f7f3 fb80 	bl	80001fc <__adddf3>
 800cafc:	2200      	movs	r2, #0
 800cafe:	4baf      	ldr	r3, [pc, #700]	; (800cdbc <atan+0x324>)
 800cb00:	f7f3 ffc2 	bl	8000a88 <__aeabi_dcmpgt>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d1e6      	bne.n	800cad6 <atan+0x3e>
 800cb08:	f04f 3aff 	mov.w	sl, #4294967295
 800cb0c:	e02b      	b.n	800cb66 <atan+0xce>
 800cb0e:	f000 f963 	bl	800cdd8 <fabs>
 800cb12:	4bab      	ldr	r3, [pc, #684]	; (800cdc0 <atan+0x328>)
 800cb14:	429e      	cmp	r6, r3
 800cb16:	ec55 4b10 	vmov	r4, r5, d0
 800cb1a:	f300 80bf 	bgt.w	800cc9c <atan+0x204>
 800cb1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cb22:	429e      	cmp	r6, r3
 800cb24:	f300 80a0 	bgt.w	800cc68 <atan+0x1d0>
 800cb28:	ee10 2a10 	vmov	r2, s0
 800cb2c:	ee10 0a10 	vmov	r0, s0
 800cb30:	462b      	mov	r3, r5
 800cb32:	4629      	mov	r1, r5
 800cb34:	f7f3 fb62 	bl	80001fc <__adddf3>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4ba0      	ldr	r3, [pc, #640]	; (800cdbc <atan+0x324>)
 800cb3c:	f7f3 fb5c 	bl	80001f8 <__aeabi_dsub>
 800cb40:	2200      	movs	r2, #0
 800cb42:	4606      	mov	r6, r0
 800cb44:	460f      	mov	r7, r1
 800cb46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	f7f3 fb55 	bl	80001fc <__adddf3>
 800cb52:	4602      	mov	r2, r0
 800cb54:	460b      	mov	r3, r1
 800cb56:	4630      	mov	r0, r6
 800cb58:	4639      	mov	r1, r7
 800cb5a:	f7f3 fe2f 	bl	80007bc <__aeabi_ddiv>
 800cb5e:	f04f 0a00 	mov.w	sl, #0
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	4622      	mov	r2, r4
 800cb68:	462b      	mov	r3, r5
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f7f3 fcfb 	bl	8000568 <__aeabi_dmul>
 800cb72:	4602      	mov	r2, r0
 800cb74:	460b      	mov	r3, r1
 800cb76:	4680      	mov	r8, r0
 800cb78:	4689      	mov	r9, r1
 800cb7a:	f7f3 fcf5 	bl	8000568 <__aeabi_dmul>
 800cb7e:	a374      	add	r3, pc, #464	; (adr r3, 800cd50 <atan+0x2b8>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	4606      	mov	r6, r0
 800cb86:	460f      	mov	r7, r1
 800cb88:	f7f3 fcee 	bl	8000568 <__aeabi_dmul>
 800cb8c:	a372      	add	r3, pc, #456	; (adr r3, 800cd58 <atan+0x2c0>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	f7f3 fb33 	bl	80001fc <__adddf3>
 800cb96:	4632      	mov	r2, r6
 800cb98:	463b      	mov	r3, r7
 800cb9a:	f7f3 fce5 	bl	8000568 <__aeabi_dmul>
 800cb9e:	a370      	add	r3, pc, #448	; (adr r3, 800cd60 <atan+0x2c8>)
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	f7f3 fb2a 	bl	80001fc <__adddf3>
 800cba8:	4632      	mov	r2, r6
 800cbaa:	463b      	mov	r3, r7
 800cbac:	f7f3 fcdc 	bl	8000568 <__aeabi_dmul>
 800cbb0:	a36d      	add	r3, pc, #436	; (adr r3, 800cd68 <atan+0x2d0>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f3 fb21 	bl	80001fc <__adddf3>
 800cbba:	4632      	mov	r2, r6
 800cbbc:	463b      	mov	r3, r7
 800cbbe:	f7f3 fcd3 	bl	8000568 <__aeabi_dmul>
 800cbc2:	a36b      	add	r3, pc, #428	; (adr r3, 800cd70 <atan+0x2d8>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	f7f3 fb18 	bl	80001fc <__adddf3>
 800cbcc:	4632      	mov	r2, r6
 800cbce:	463b      	mov	r3, r7
 800cbd0:	f7f3 fcca 	bl	8000568 <__aeabi_dmul>
 800cbd4:	a368      	add	r3, pc, #416	; (adr r3, 800cd78 <atan+0x2e0>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fb0f 	bl	80001fc <__adddf3>
 800cbde:	4642      	mov	r2, r8
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	f7f3 fcc1 	bl	8000568 <__aeabi_dmul>
 800cbe6:	a366      	add	r3, pc, #408	; (adr r3, 800cd80 <atan+0x2e8>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	4680      	mov	r8, r0
 800cbee:	4689      	mov	r9, r1
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	f7f3 fcb8 	bl	8000568 <__aeabi_dmul>
 800cbf8:	a363      	add	r3, pc, #396	; (adr r3, 800cd88 <atan+0x2f0>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f3 fafb 	bl	80001f8 <__aeabi_dsub>
 800cc02:	4632      	mov	r2, r6
 800cc04:	463b      	mov	r3, r7
 800cc06:	f7f3 fcaf 	bl	8000568 <__aeabi_dmul>
 800cc0a:	a361      	add	r3, pc, #388	; (adr r3, 800cd90 <atan+0x2f8>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f3 faf2 	bl	80001f8 <__aeabi_dsub>
 800cc14:	4632      	mov	r2, r6
 800cc16:	463b      	mov	r3, r7
 800cc18:	f7f3 fca6 	bl	8000568 <__aeabi_dmul>
 800cc1c:	a35e      	add	r3, pc, #376	; (adr r3, 800cd98 <atan+0x300>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7f3 fae9 	bl	80001f8 <__aeabi_dsub>
 800cc26:	4632      	mov	r2, r6
 800cc28:	463b      	mov	r3, r7
 800cc2a:	f7f3 fc9d 	bl	8000568 <__aeabi_dmul>
 800cc2e:	a35c      	add	r3, pc, #368	; (adr r3, 800cda0 <atan+0x308>)
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	f7f3 fae0 	bl	80001f8 <__aeabi_dsub>
 800cc38:	4632      	mov	r2, r6
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	f7f3 fc94 	bl	8000568 <__aeabi_dmul>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7f3 fad8 	bl	80001fc <__adddf3>
 800cc4c:	4622      	mov	r2, r4
 800cc4e:	462b      	mov	r3, r5
 800cc50:	f7f3 fc8a 	bl	8000568 <__aeabi_dmul>
 800cc54:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	d14b      	bne.n	800ccf6 <atan+0x25e>
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 fac9 	bl	80001f8 <__aeabi_dsub>
 800cc66:	e72c      	b.n	800cac2 <atan+0x2a>
 800cc68:	ee10 0a10 	vmov	r0, s0
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4b53      	ldr	r3, [pc, #332]	; (800cdbc <atan+0x324>)
 800cc70:	4629      	mov	r1, r5
 800cc72:	f7f3 fac1 	bl	80001f8 <__aeabi_dsub>
 800cc76:	2200      	movs	r2, #0
 800cc78:	4606      	mov	r6, r0
 800cc7a:	460f      	mov	r7, r1
 800cc7c:	4b4f      	ldr	r3, [pc, #316]	; (800cdbc <atan+0x324>)
 800cc7e:	4620      	mov	r0, r4
 800cc80:	4629      	mov	r1, r5
 800cc82:	f7f3 fabb 	bl	80001fc <__adddf3>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	f7f3 fd95 	bl	80007bc <__aeabi_ddiv>
 800cc92:	f04f 0a01 	mov.w	sl, #1
 800cc96:	4604      	mov	r4, r0
 800cc98:	460d      	mov	r5, r1
 800cc9a:	e764      	b.n	800cb66 <atan+0xce>
 800cc9c:	4b49      	ldr	r3, [pc, #292]	; (800cdc4 <atan+0x32c>)
 800cc9e:	429e      	cmp	r6, r3
 800cca0:	dc1d      	bgt.n	800ccde <atan+0x246>
 800cca2:	ee10 0a10 	vmov	r0, s0
 800cca6:	2200      	movs	r2, #0
 800cca8:	4b47      	ldr	r3, [pc, #284]	; (800cdc8 <atan+0x330>)
 800ccaa:	4629      	mov	r1, r5
 800ccac:	f7f3 faa4 	bl	80001f8 <__aeabi_dsub>
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	4b44      	ldr	r3, [pc, #272]	; (800cdc8 <atan+0x330>)
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4629      	mov	r1, r5
 800ccbc:	f7f3 fc54 	bl	8000568 <__aeabi_dmul>
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4b3e      	ldr	r3, [pc, #248]	; (800cdbc <atan+0x324>)
 800ccc4:	f7f3 fa9a 	bl	80001fc <__adddf3>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4630      	mov	r0, r6
 800ccce:	4639      	mov	r1, r7
 800ccd0:	f7f3 fd74 	bl	80007bc <__aeabi_ddiv>
 800ccd4:	f04f 0a02 	mov.w	sl, #2
 800ccd8:	4604      	mov	r4, r0
 800ccda:	460d      	mov	r5, r1
 800ccdc:	e743      	b.n	800cb66 <atan+0xce>
 800ccde:	462b      	mov	r3, r5
 800cce0:	ee10 2a10 	vmov	r2, s0
 800cce4:	2000      	movs	r0, #0
 800cce6:	4939      	ldr	r1, [pc, #228]	; (800cdcc <atan+0x334>)
 800cce8:	f7f3 fd68 	bl	80007bc <__aeabi_ddiv>
 800ccec:	f04f 0a03 	mov.w	sl, #3
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	e737      	b.n	800cb66 <atan+0xce>
 800ccf6:	4b36      	ldr	r3, [pc, #216]	; (800cdd0 <atan+0x338>)
 800ccf8:	4e36      	ldr	r6, [pc, #216]	; (800cdd4 <atan+0x33c>)
 800ccfa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ccfe:	4456      	add	r6, sl
 800cd00:	449a      	add	sl, r3
 800cd02:	e9da 2300 	ldrd	r2, r3, [sl]
 800cd06:	f7f3 fa77 	bl	80001f8 <__aeabi_dsub>
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	462b      	mov	r3, r5
 800cd0e:	f7f3 fa73 	bl	80001f8 <__aeabi_dsub>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cd1a:	f7f3 fa6d 	bl	80001f8 <__aeabi_dsub>
 800cd1e:	f1bb 0f00 	cmp.w	fp, #0
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	f6bf aed6 	bge.w	800cad6 <atan+0x3e>
 800cd2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd2e:	461d      	mov	r5, r3
 800cd30:	e6d1      	b.n	800cad6 <atan+0x3e>
 800cd32:	a51d      	add	r5, pc, #116	; (adr r5, 800cda8 <atan+0x310>)
 800cd34:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd38:	e6cd      	b.n	800cad6 <atan+0x3e>
 800cd3a:	bf00      	nop
 800cd3c:	f3af 8000 	nop.w
 800cd40:	54442d18 	.word	0x54442d18
 800cd44:	3ff921fb 	.word	0x3ff921fb
 800cd48:	8800759c 	.word	0x8800759c
 800cd4c:	7e37e43c 	.word	0x7e37e43c
 800cd50:	e322da11 	.word	0xe322da11
 800cd54:	3f90ad3a 	.word	0x3f90ad3a
 800cd58:	24760deb 	.word	0x24760deb
 800cd5c:	3fa97b4b 	.word	0x3fa97b4b
 800cd60:	a0d03d51 	.word	0xa0d03d51
 800cd64:	3fb10d66 	.word	0x3fb10d66
 800cd68:	c54c206e 	.word	0xc54c206e
 800cd6c:	3fb745cd 	.word	0x3fb745cd
 800cd70:	920083ff 	.word	0x920083ff
 800cd74:	3fc24924 	.word	0x3fc24924
 800cd78:	5555550d 	.word	0x5555550d
 800cd7c:	3fd55555 	.word	0x3fd55555
 800cd80:	2c6a6c2f 	.word	0x2c6a6c2f
 800cd84:	bfa2b444 	.word	0xbfa2b444
 800cd88:	52defd9a 	.word	0x52defd9a
 800cd8c:	3fadde2d 	.word	0x3fadde2d
 800cd90:	af749a6d 	.word	0xaf749a6d
 800cd94:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd98:	fe231671 	.word	0xfe231671
 800cd9c:	3fbc71c6 	.word	0x3fbc71c6
 800cda0:	9998ebc4 	.word	0x9998ebc4
 800cda4:	3fc99999 	.word	0x3fc99999
 800cda8:	54442d18 	.word	0x54442d18
 800cdac:	bff921fb 	.word	0xbff921fb
 800cdb0:	440fffff 	.word	0x440fffff
 800cdb4:	7ff00000 	.word	0x7ff00000
 800cdb8:	3fdbffff 	.word	0x3fdbffff
 800cdbc:	3ff00000 	.word	0x3ff00000
 800cdc0:	3ff2ffff 	.word	0x3ff2ffff
 800cdc4:	40037fff 	.word	0x40037fff
 800cdc8:	3ff80000 	.word	0x3ff80000
 800cdcc:	bff00000 	.word	0xbff00000
 800cdd0:	0800d330 	.word	0x0800d330
 800cdd4:	0800d310 	.word	0x0800d310

0800cdd8 <fabs>:
 800cdd8:	ec51 0b10 	vmov	r0, r1, d0
 800cddc:	ee10 2a10 	vmov	r2, s0
 800cde0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cde4:	ec43 2b10 	vmov	d0, r2, r3
 800cde8:	4770      	bx	lr
	...

0800cdec <_init>:
 800cdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdee:	bf00      	nop
 800cdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdf2:	bc08      	pop	{r3}
 800cdf4:	469e      	mov	lr, r3
 800cdf6:	4770      	bx	lr

0800cdf8 <_fini>:
 800cdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfa:	bf00      	nop
 800cdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfe:	bc08      	pop	{r3}
 800ce00:	469e      	mov	lr, r3
 800ce02:	4770      	bx	lr
