
BalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d934  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800dad8  0800dad8  0001dad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e020  0800e020  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e020  0800e020  0001e020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e028  0800e028  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e028  0800e028  0001e028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e02c  0800e02c  0001e02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b0c  200001e0  0800e210  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004cec  0800e210  00024cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020262  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f68  00000000  00000000  00040472  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001830  00000000  00000000  000443e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  00045c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019fd2  00000000  00000000  00047280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014d74  00000000  00000000  00061252  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a820  00000000  00000000  00075fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001107e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e3c  00000000  00000000  00110864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dabc 	.word	0x0800dabc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800dabc 	.word	0x0800dabc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <DRV8834_Init>:
#include "DRV8834.h"

#define ABS(value) (value < 0 ? -value : value)

void DRV8834_Init(StepMotor_t *stepMotor, TIM_HandleTypeDef *htim, uint32_t channel)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	stepMotor->PWM_timer = htim;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	61da      	str	r2, [r3, #28]
	stepMotor->PWM_timerChannel = channel;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	621a      	str	r2, [r3, #32]
	stepMotor->state = STOPPED;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
	stepMotor->direction = FORWARD;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	705a      	strb	r2, [r3, #1]
	stepMotor->last_counter = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DRV8834_InitPins>:

void DRV8834_InitPins(StepMotor_t *stepMotor, uint16_t dirPin, GPIO_TypeDef* dirPort, uint16_t m0Pin, GPIO_TypeDef* m0Port, uint16_t m1Pin, GPIO_TypeDef* m1Port)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	817b      	strh	r3, [r7, #10]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	813b      	strh	r3, [r7, #8]
	stepMotor->step_motor_pins.DIR_PIN = dirPin;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	897a      	ldrh	r2, [r7, #10]
 8000ea6:	809a      	strh	r2, [r3, #4]
	stepMotor->step_motor_pins.DIR_PORT = dirPort;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	609a      	str	r2, [r3, #8]

	stepMotor->step_motor_pins.M0_PIN = m0Pin;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	893a      	ldrh	r2, [r7, #8]
 8000eb2:	819a      	strh	r2, [r3, #12]
	stepMotor->step_motor_pins.M0_PORT = m0Port;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	611a      	str	r2, [r3, #16]

	stepMotor->step_motor_pins.M1_PIN = m1Pin;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8bba      	ldrh	r2, [r7, #28]
 8000ebe:	829a      	strh	r2, [r3, #20]
	stepMotor->step_motor_pins.M1_PORT = m1Port;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a3a      	ldr	r2, [r7, #32]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <DeinitializePin>:

void DeinitializePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint16_t Mode)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b088      	sub	sp, #32
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	803b      	strh	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

	if(Mode == GPIO_MODE_OUTPUT_PP)
 8000ef2:	883b      	ldrh	r3, [r7, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d113      	bne.n	8000f20 <DeinitializePin+0x4e>
	{
		HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4619      	mov	r1, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f003 febd 	bl	8004c7c <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8000f06:	883b      	ldrh	r3, [r7, #0]
 8000f08:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f003 fd2d 	bl	8004978 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_Pin;
		GPIO_InitStruct.Mode = Mode;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 8000f1e:	e00e      	b.n	8000f3e <DeinitializePin+0x6c>
	else if (Mode == GPIO_MODE_INPUT)
 8000f20:	883b      	ldrh	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10b      	bne.n	8000f3e <DeinitializePin+0x6c>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8000f2a:	883b      	ldrh	r3, [r7, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f003 fd1d 	bl	8004978 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <DRV8834_SetMicrostep>:

uint8_t DRV8834_SetMicrostep(StepMotor_t *stepMotor, uint8_t microstep)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
     *  1  Z    32
     *
     *  Z = high impedance mode (M0 is three-state)
     */

	if(stepMotor->state == CONTINOUS_RUN)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <DRV8834_SetMicrostep+0x18>
	{
		return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e08d      	b.n	800107c <DRV8834_SetMicrostep+0x134>
	}

	switch(microstep)
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	2b1f      	cmp	r3, #31
 8000f66:	d86e      	bhi.n	8001046 <DRV8834_SetMicrostep+0xfe>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <DRV8834_SetMicrostep+0x28>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000ff1 	.word	0x08000ff1
 8000f74:	08001013 	.word	0x08001013
 8000f78:	08001047 	.word	0x08001047
 8000f7c:	08001035 	.word	0x08001035
 8000f80:	08001047 	.word	0x08001047
 8000f84:	08001047 	.word	0x08001047
 8000f88:	08001047 	.word	0x08001047
 8000f8c:	08000ff1 	.word	0x08000ff1
 8000f90:	08001047 	.word	0x08001047
 8000f94:	08001047 	.word	0x08001047
 8000f98:	08001047 	.word	0x08001047
 8000f9c:	08001047 	.word	0x08001047
 8000fa0:	08001047 	.word	0x08001047
 8000fa4:	08001047 	.word	0x08001047
 8000fa8:	08001047 	.word	0x08001047
 8000fac:	08001013 	.word	0x08001013
 8000fb0:	08001047 	.word	0x08001047
 8000fb4:	08001047 	.word	0x08001047
 8000fb8:	08001047 	.word	0x08001047
 8000fbc:	08001047 	.word	0x08001047
 8000fc0:	08001047 	.word	0x08001047
 8000fc4:	08001047 	.word	0x08001047
 8000fc8:	08001047 	.word	0x08001047
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001047 	.word	0x08001047
 8000fd4:	08001047 	.word	0x08001047
 8000fd8:	08001047 	.word	0x08001047
 8000fdc:	08001047 	.word	0x08001047
 8000fe0:	08001047 	.word	0x08001047
 8000fe4:	08001047 	.word	0x08001047
 8000fe8:	08001047 	.word	0x08001047
 8000fec:	08001035 	.word	0x08001035
	{
	case 1:
	case 8:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6918      	ldr	r0, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff ff69 	bl	8000ed2 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_RESET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6918      	ldr	r0, [r3, #16]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	899b      	ldrh	r3, [r3, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f003 ff18 	bl	8004e40 <HAL_GPIO_WritePin>
		break;
 8001010:	e01b      	b.n	800104a <DRV8834_SetMicrostep+0x102>
	case 2:
	case 16:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6918      	ldr	r0, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	899b      	ldrh	r3, [r3, #12]
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff ff58 	bl	8000ed2 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_SET);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6918      	ldr	r0, [r3, #16]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	f003 ff07 	bl	8004e40 <HAL_GPIO_WritePin>
		break;
 8001032:	e00a      	b.n	800104a <DRV8834_SetMicrostep+0x102>
	case 4:
	case 32:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_INPUT);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6918      	ldr	r0, [r3, #16]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	899b      	ldrh	r3, [r3, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff ff47 	bl	8000ed2 <DeinitializePin>
		break;
 8001044:	e001      	b.n	800104a <DRV8834_SetMicrostep+0x102>
	default:
		return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e018      	b.n	800107c <DRV8834_SetMicrostep+0x134>
	}

	if(microstep < 8)
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d808      	bhi.n	8001062 <DRV8834_SetMicrostep+0x11a>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_RESET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6998      	ldr	r0, [r3, #24]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	8a9b      	ldrh	r3, [r3, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f003 fef0 	bl	8004e40 <HAL_GPIO_WritePin>
 8001060:	e007      	b.n	8001072 <DRV8834_SetMicrostep+0x12a>
	}
	else
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_SET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6998      	ldr	r0, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a9b      	ldrh	r3, [r3, #20]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	f003 fee7 	bl	8004e40 <HAL_GPIO_WritePin>
	}

	stepMotor->microstep = microstep;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <DRV8834_StopMotor>:

void DRV8834_StopMotor(StepMotor_t *stepMotor)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	stepMotor->state = STOPPED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, 0);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <DRV8834_StopMotor+0x22>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
 80010a4:	e018      	b.n	80010d8 <DRV8834_StopMotor+0x54>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d105      	bne.n	80010ba <DRV8834_StopMotor+0x36>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	e00e      	b.n	80010d8 <DRV8834_StopMotor+0x54>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d105      	bne.n	80010ce <DRV8834_StopMotor+0x4a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80010cc:	e004      	b.n	80010d8 <DRV8834_StopMotor+0x54>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Stop(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f005 fbdc 	bl	80068a0 <HAL_TIM_PWM_Stop>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DRV8834_SetDirection>:

void DRV8834_SetDirection(StepMotor_t *stepMotor, StepMotorDirection_t dir)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	if((dir == FORWARD) || (dir == BACKWARD))
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <DRV8834_SetDirection+0x18>
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10a      	bne.n	800111e <DRV8834_SetDirection+0x2e>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.DIR_PORT, stepMotor->step_motor_pins.DIR_PIN, dir);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6898      	ldr	r0, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	4619      	mov	r1, r3
 8001114:	f003 fe94 	bl	8004e40 <HAL_GPIO_WritePin>
		stepMotor->direction = dir;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	78fa      	ldrb	r2, [r7, #3]
 800111c:	705a      	strb	r2, [r3, #1]
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <DRV8834_SetSpeed>:

void DRV8834_SetSpeed(StepMotor_t *stepMotor, int32_t speed)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(speed == 0)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d108      	bne.n	800114a <DRV8834_SetSpeed+0x22>
	{
		if(stepMotor->state == STOPPED) return;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 808b 	beq.w	8001258 <DRV8834_SetSpeed+0x130>

		DRV8834_StopMotor(stepMotor);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff9e 	bl	8001084 <DRV8834_StopMotor>
		return;
 8001148:	e087      	b.n	800125a <DRV8834_SetSpeed+0x132>
	}
	else if((speed < 0) && (stepMotor->direction == FORWARD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da08      	bge.n	8001162 <DRV8834_SetSpeed+0x3a>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <DRV8834_SetSpeed+0x3a>
	{
		DRV8834_SetDirection(stepMotor, BACKWARD);
 8001158:	2101      	movs	r1, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffc8 	bl	80010f0 <DRV8834_SetDirection>
 8001160:	e00a      	b.n	8001178 <DRV8834_SetSpeed+0x50>
	}
	else if((speed > 0) && (stepMotor->direction == BACKWARD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd07      	ble.n	8001178 <DRV8834_SetSpeed+0x50>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d103      	bne.n	8001178 <DRV8834_SetSpeed+0x50>
	{
		DRV8834_SetDirection(stepMotor, FORWARD);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffbc 	bl	80010f0 <DRV8834_SetDirection>
	}

	if(speed < 0)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da04      	bge.n	8001188 <DRV8834_SetSpeed+0x60>
	{
		speed = ABS(speed);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	bfb8      	it	lt
 8001184:	425b      	neglt	r3, r3
 8001186:	603b      	str	r3, [r7, #0]
	}
	if(speed > DRV8834_MAX_SPEED)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b32      	cmp	r3, #50	; 0x32
 800118c:	dd01      	ble.n	8001192 <DRV8834_SetSpeed+0x6a>
	{
		speed = DRV8834_MAX_SPEED;
 800118e:	2332      	movs	r3, #50	; 0x32
 8001190:	603b      	str	r3, [r7, #0]
	}


	freq = (speed * (stepMotor->microstep*(DRV8834_MOTOR_MAX_FREQ_HZ - DRV8834_MOTOR_MIN_FREQ_HZ))) / DRV8834_MAX_SPEED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001198:	461a      	mov	r2, r3
 800119a:	f240 135d 	movw	r3, #349	; 0x15d
 800119e:	fb03 f302 	mul.w	r3, r3, r2
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <DRV8834_SetSpeed+0x138>)
 80011aa:	fb82 1203 	smull	r1, r2, r2, r3
 80011ae:	1112      	asrs	r2, r2, #4
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]

#if USING_WHICH_TIMERS == APB1
	counter = PCLK_PRESCALER*HAL_RCC_GetPCLK1Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
 80011b6:	f005 fa63 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 80011ba:	4603      	mov	r3, r0
 80011bc:	005a      	lsls	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	60bb      	str	r3, [r7, #8]
#elif USING_WHICH_TIMERS == APB2
		counter = PCLK_PRESCALER*HAL_RCC_GetPCLK2Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
#else
#error "Choose between APB1 timers or APB2 timers or reimplement code if using both"
#endif
	if(stepMotor->last_counter != counter)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d03f      	beq.n	800125a <DRV8834_SetSpeed+0x132>
	{
		__HAL_TIM_SET_COUNTER(stepMotor->PWM_timer, 0);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(stepMotor->PWM_timer, counter - 1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	3a01      	subs	r2, #1
 80011f8:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, (counter/2) - 1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <DRV8834_SetSpeed+0xea>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	085a      	lsrs	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3a01      	subs	r2, #1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
 8001210:	e01e      	b.n	8001250 <DRV8834_SetSpeed+0x128>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d107      	bne.n	800122a <DRV8834_SetSpeed+0x102>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	085a      	lsrs	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3a01      	subs	r2, #1
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
 8001228:	e012      	b.n	8001250 <DRV8834_SetSpeed+0x128>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	2b08      	cmp	r3, #8
 8001230:	d107      	bne.n	8001242 <DRV8834_SetSpeed+0x11a>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	085a      	lsrs	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3a01      	subs	r2, #1
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001240:	e006      	b.n	8001250 <DRV8834_SetSpeed+0x128>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	085a      	lsrs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3a01      	subs	r2, #1
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
		stepMotor->last_counter = counter;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
 8001256:	e000      	b.n	800125a <DRV8834_SetSpeed+0x132>
		if(stepMotor->state == STOPPED) return;
 8001258:	bf00      	nop
	}
}
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	51eb851f 	.word	0x51eb851f

08001264 <DRV8834_StartMotor>:

void DRV8834_StartMotor(StepMotor_t *stepMotor, int32_t speed)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	stepMotor->state = CONTINOUS_RUN;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]

	DRV8834_SetSpeed(stepMotor, speed);
 8001274:	6839      	ldr	r1, [r7, #0]
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff56 	bl	8001128 <DRV8834_SetSpeed>

	HAL_TIM_PWM_Start(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69da      	ldr	r2, [r3, #28]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f005 fad8 	bl	800683c <HAL_TIM_PWM_Start>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <LSM6_InitEx>:
#include "LSM6.h"
#include "main.h"
#include "math.h"

bool LSM6_InitEx(I2C_HandleTypeDef *i2c, LSM6_t *LSM6, deviceType device, sa0State sa0)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	4613      	mov	r3, r2
 80012a8:	71bb      	strb	r3, [r7, #6]
	LSM6->i2c = i2c;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	601a      	str	r2, [r3, #0]
	LSM6->_device = device;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	711a      	strb	r2, [r3, #4]
	LSM6->io_timeout = DEFAULT_TIMEOUT;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012bc:	80da      	strh	r2, [r3, #6]
	LSM6->did_timeout = false;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2200      	movs	r2, #0
 80012c2:	721a      	strb	r2, [r3, #8]
	LSM6->did_error = false;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2200      	movs	r2, #0
 80012c8:	725a      	strb	r2, [r3, #9]

	// perform auto-detection unless device type and SA0 state were both specified
	if (device == device_autoDetect || sa0 == sa0_autoDetect)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d002      	beq.n	80012d6 <LSM6_InitEx+0x42>
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d12f      	bne.n	8001336 <LSM6_InitEx+0xa2>
	{
		// check for LSM6DS33 if device is unidentified or was specified to be this type
		if (device == device_autoDetect || device == device_DS33)
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <LSM6_InitEx+0x4e>
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d124      	bne.n	800132c <LSM6_InitEx+0x98>
		{
			// check SA0 high address unless SA0 was specified to be low
			if (sa0 != sa0_low && testReg(LSM6, DS33_SA0_HIGH_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00f      	beq.n	8001308 <LSM6_InitEx+0x74>
 80012e8:	220f      	movs	r2, #15
 80012ea:	216b      	movs	r1, #107	; 0x6b
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f000 f83b 	bl	8001368 <testReg>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b69      	cmp	r3, #105	; 0x69
 80012f6:	d107      	bne.n	8001308 <LSM6_InitEx+0x74>
			{
				sa0 = sa0_high;
 80012f8:	2301      	movs	r3, #1
 80012fa:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d114      	bne.n	800132c <LSM6_InitEx+0x98>
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e011      	b.n	800132c <LSM6_InitEx+0x98>
			}
			// check SA0 low address unless SA0 was specified to be high
			else if (sa0 != sa0_high && testReg(LSM6, DS33_SA0_LOW_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d00e      	beq.n	800132c <LSM6_InitEx+0x98>
 800130e:	220f      	movs	r2, #15
 8001310:	216a      	movs	r1, #106	; 0x6a
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f000 f828 	bl	8001368 <testReg>
 8001318:	4603      	mov	r3, r0
 800131a:	2b69      	cmp	r3, #105	; 0x69
 800131c:	d106      	bne.n	800132c <LSM6_InitEx+0x98>
			{
				sa0 = sa0_low;
 800131e:	2300      	movs	r3, #0
 8001320:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <LSM6_InitEx+0x98>
 8001328:	2300      	movs	r3, #0
 800132a:	71fb      	strb	r3, [r7, #7]
			}
		}

		// make sure device and SA0 were successfully detected; otherwise, indicate failure
		if (sa0 == sa0_autoDetect)
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d101      	bne.n	8001336 <LSM6_InitEx+0xa2>
		{
			return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e014      	b.n	8001360 <LSM6_InitEx+0xcc>
		}
	}

	LSM6->_device = device;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	711a      	strb	r2, [r3, #4]

	switch (device)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <LSM6_InitEx+0xb4>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d009      	beq.n	800135a <LSM6_InitEx+0xc6>
 8001346:	e00a      	b.n	800135e <LSM6_InitEx+0xca>
	{
		case device_DS33:
			LSM6->address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <LSM6_InitEx+0xbe>
 800134e:	226b      	movs	r2, #107	; 0x6b
 8001350:	e000      	b.n	8001354 <LSM6_InitEx+0xc0>
 8001352:	226a      	movs	r2, #106	; 0x6a
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	715a      	strb	r2, [r3, #5]
			break;
 8001358:	e001      	b.n	800135e <LSM6_InitEx+0xca>
		case device_autoDetect:
			return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <LSM6_InitEx+0xcc>
	}

	return true;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <testReg>:

// Returns chip id if communication is established, return 0 if not
uint8_t testReg(LSM6_t *LSM6, uint8_t address, uint8_t reg)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af04      	add	r7, sp, #16
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
 8001374:	4613      	mov	r3, r2
 8001376:	70bb      	strb	r3, [r7, #2]
	uint8_t Value;

	if (HAL_OK == HAL_I2C_Mem_Read(LSM6->i2c, (address)<<1, reg, 1, &Value, 1, LSM6->io_timeout))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	b29b      	uxth	r3, r3
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b299      	uxth	r1, r3
 8001384:	78bb      	ldrb	r3, [r7, #2]
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	88db      	ldrh	r3, [r3, #6]
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2301      	movs	r3, #1
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f107 030f 	add.w	r3, r7, #15
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	f003 ffb5 	bl	8005308 <HAL_I2C_Mem_Read>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <testReg+0x40>
	{
		return Value;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	e000      	b.n	80013aa <testReg+0x42>
	}
	else
	{
		return false;
 80013a8:	2300      	movs	r3, #0
	}
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <timeoutOccurred>:

// Did a timeout occur in readAcc(), readGyro(), or read() since the last call to timeoutOccurred()?
bool timeoutOccurred(LSM6_t *LSM6)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_timeout;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7a1b      	ldrb	r3, [r3, #8]
 80013be:	73fb      	strb	r3, [r7, #15]
	LSM6->did_timeout = false;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	721a      	strb	r2, [r3, #8]
	return tmp;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <errorOccured>:
// Did an error occur in readAcc(), readGyro(), or read() since the last call to errorOccurred()?
bool errorOccured(LSM6_t *LSM6)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_error;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7a5b      	ldrb	r3, [r3, #9]
 80013e0:	73fb      	strb	r3, [r7, #15]
	LSM6->did_error = false;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	725a      	strb	r2, [r3, #9]
	return tmp;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <enableDefault>:
{
	return LSM6->io_timeout;
}

void enableDefault(LSM6_t *LSM6)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	if (LSM6->_device == device_DS33)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11d      	bne.n	8001442 <enableDefault+0x4c>
	{
	// Accelerometer
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (+/-2 g full scale)
	  writeReg(LSM6, CTRL9_XL, 0x38);	// Accelerometer X, Y, Z axes enabled
 8001406:	2238      	movs	r2, #56	; 0x38
 8001408:	2118      	movs	r1, #24
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f81d 	bl	800144a <writeReg>
	  writeReg(LSM6, CTRL1_XL, 0x30);	// Accelerometer = 52hz
 8001410:	2230      	movs	r2, #48	; 0x30
 8001412:	2110      	movs	r1, #16
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f818 	bl	800144a <writeReg>
	  writeReg(LSM6, INT1_CTRL, 0x01);	// Accelerometer data ready interrupt on INT1
 800141a:	2201      	movs	r2, #1
 800141c:	210d      	movs	r1, #13
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f813 	bl	800144a <writeReg>

	// Gyroscope
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (245 dps)
	  writeReg(LSM6, CTRL10_C, 0x38);	// Gyroscope X, Y, Z axes enabled
 8001424:	2238      	movs	r2, #56	; 0x38
 8001426:	2119      	movs	r1, #25
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f80e 	bl	800144a <writeReg>
	  writeReg(LSM6, CTRL2_G, 0x30);	// Gyroscope = 52hz
 800142e:	2230      	movs	r2, #48	; 0x30
 8001430:	2111      	movs	r1, #17
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f809 	bl	800144a <writeReg>
	  writeReg(LSM6, INT2_CTRL, 0x02);	// Gyroscope data ready interrupt on INT2
 8001438:	2202      	movs	r2, #2
 800143a:	210e      	movs	r1, #14
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f804 	bl	800144a <writeReg>
	// Common
	// 0x04 = 0b00000100
	// IF_INC = 1 (automatically increment register address)
	// writeReg(CTRL3_C, 0x04);
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <writeReg>:

// Write 8-bits
void writeReg(LSM6_t *LSM6, uint8_t reg, uint8_t value)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b088      	sub	sp, #32
 800144e:	af04      	add	r7, sp, #16
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	70fb      	strb	r3, [r7, #3]
 8001456:	4613      	mov	r3, r2
 8001458:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	// Write 8-bits
	status = HAL_I2C_Mem_Write(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	795b      	ldrb	r3, [r3, #5]
 8001462:	b29b      	uxth	r3, r3
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	b299      	uxth	r1, r3
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	88db      	ldrh	r3, [r3, #6]
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2301      	movs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	1cbb      	adds	r3, r7, #2
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	f003 fe4a 	bl	8005114 <HAL_I2C_Mem_Write>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d102      	bne.n	8001490 <writeReg+0x46>
	{
		LSM6->did_timeout = true;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	721a      	strb	r2, [r3, #8]
	}
	if(status == HAL_ERROR)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <writeReg+0x52>
	{
		LSM6->did_error = true;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	725a      	strb	r2, [r3, #9]
	}
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <readReg>:

// Read 8-bits
uint8_t readReg(LSM6_t *LSM6, uint8_t reg)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
	uint8_t value, status;

	// Read 8 bits
	status = HAL_I2C_Mem_Read(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	795b      	ldrb	r3, [r3, #5]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	b299      	uxth	r1, r3
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	88db      	ldrh	r3, [r3, #6]
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	f107 030e 	add.w	r3, r7, #14
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2301      	movs	r3, #1
 80014d4:	f003 ff18 	bl	8005308 <HAL_I2C_Mem_Read>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d104      	bne.n	80014ec <readReg+0x48>
	{
		LSM6->did_timeout = true;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	721a      	strb	r2, [r3, #8]
		return 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e008      	b.n	80014fe <readReg+0x5a>
	}
	if(status == HAL_ERROR)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d104      	bne.n	80014fc <readReg+0x58>
	{
		LSM6->did_error = true;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	725a      	strb	r2, [r3, #9]
		return 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e000      	b.n	80014fe <readReg+0x5a>
	}

	return value;
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <readAcc>:

uint8_t readAcc(LSM6_t *LSM6)
{
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xla = readReg(LSM6, OUTX_L_XL);
 800150e:	2128      	movs	r1, #40	; 0x28
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffc7 	bl	80014a4 <readReg>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]
	uint8_t xha = readReg(LSM6, OUTX_H_XL);
 800151a:	2129      	movs	r1, #41	; 0x29
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ffc1 	bl	80014a4 <readReg>
 8001522:	4603      	mov	r3, r0
 8001524:	73bb      	strb	r3, [r7, #14]
	uint8_t yla = readReg(LSM6, OUTY_L_XL);
 8001526:	212a      	movs	r1, #42	; 0x2a
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffbb 	bl	80014a4 <readReg>
 800152e:	4603      	mov	r3, r0
 8001530:	737b      	strb	r3, [r7, #13]
	uint8_t yha = readReg(LSM6, OUTY_H_XL);
 8001532:	212b      	movs	r1, #43	; 0x2b
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffb5 	bl	80014a4 <readReg>
 800153a:	4603      	mov	r3, r0
 800153c:	733b      	strb	r3, [r7, #12]
	uint8_t zla = readReg(LSM6, OUTZ_L_XL);
 800153e:	212c      	movs	r1, #44	; 0x2c
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ffaf 	bl	80014a4 <readReg>
 8001546:	4603      	mov	r3, r0
 8001548:	72fb      	strb	r3, [r7, #11]
	uint8_t zha = readReg(LSM6, OUTZ_H_XL);
 800154a:	212d      	movs	r1, #45	; 0x2d
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ffa9 	bl	80014a4 <readReg>
 8001552:	4603      	mov	r3, r0
 8001554:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff2b 	bl	80013b2 <timeoutOccurred>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <readAcc+0x60>
	{
		return HAL_BUSY;
 8001562:	2302      	movs	r3, #2
 8001564:	e035      	b.n	80015d2 <readAcc+0xcc>
	}
	if (errorOccured(LSM6) == true)
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff34 	bl	80013d4 <errorOccured>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <readAcc+0x70>
	{
		return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e02d      	b.n	80015d2 <readAcc+0xcc>
	}

	// combine high and low bytes
	LSM6->accelerometer.x = (int16_t)(xha << 8 | xla);
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff85 	bl	8000494 <__aeabi_i2d>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	e9c2 3404 	strd	r3, r4, [r2, #16]
	LSM6->accelerometer.y = (int16_t)(yha << 8 | yla);
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff76 	bl	8000494 <__aeabi_i2d>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	e9c2 3406 	strd	r3, r4, [r2, #24]
	LSM6->accelerometer.z = (int16_t)(zha << 8 | zla);
 80015b2:	7abb      	ldrb	r3, [r7, #10]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff67 	bl	8000494 <__aeabi_i2d>
 80015c6:	4603      	mov	r3, r0
 80015c8:	460c      	mov	r4, r1
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	e9c2 3408 	strd	r3, r4, [r2, #32]

	return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <readGyro>:

uint8_t readGyro(LSM6_t *LSM6)
{
 80015da:	b590      	push	{r4, r7, lr}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xlg = readReg(LSM6, OUTX_L_G);
 80015e2:	2122      	movs	r1, #34	; 0x22
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff5d 	bl	80014a4 <readReg>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
	uint8_t xhg = readReg(LSM6, OUTX_H_G);
 80015ee:	2123      	movs	r1, #35	; 0x23
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff57 	bl	80014a4 <readReg>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73bb      	strb	r3, [r7, #14]
	uint8_t ylg = readReg(LSM6, OUTY_L_G);
 80015fa:	2124      	movs	r1, #36	; 0x24
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff51 	bl	80014a4 <readReg>
 8001602:	4603      	mov	r3, r0
 8001604:	737b      	strb	r3, [r7, #13]
	uint8_t yhg = readReg(LSM6, OUTY_H_G);
 8001606:	2125      	movs	r1, #37	; 0x25
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff4b 	bl	80014a4 <readReg>
 800160e:	4603      	mov	r3, r0
 8001610:	733b      	strb	r3, [r7, #12]
	uint8_t zlg = readReg(LSM6, OUTZ_L_G);
 8001612:	2126      	movs	r1, #38	; 0x26
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff45 	bl	80014a4 <readReg>
 800161a:	4603      	mov	r3, r0
 800161c:	72fb      	strb	r3, [r7, #11]
	uint8_t zhg = readReg(LSM6, OUTZ_H_G);
 800161e:	2127      	movs	r1, #39	; 0x27
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff3f 	bl	80014a4 <readReg>
 8001626:	4603      	mov	r3, r0
 8001628:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fec1 	bl	80013b2 <timeoutOccurred>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <readGyro+0x60>
	{
		return HAL_BUSY;
 8001636:	2302      	movs	r3, #2
 8001638:	e035      	b.n	80016a6 <readGyro+0xcc>
	}
	if (errorOccured(LSM6) == true)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff feca 	bl	80013d4 <errorOccured>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <readGyro+0x70>
	{
		return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e02d      	b.n	80016a6 <readGyro+0xcc>
	}

	// combine high and low bytes
	LSM6->gyroscope.x = (int16_t)(xhg << 8 | xlg);
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff1b 	bl	8000494 <__aeabi_i2d>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	LSM6->gyroscope.y = (int16_t)(yhg << 8 | ylg);
 8001668:	7b3b      	ldrb	r3, [r7, #12]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7b7b      	ldrb	r3, [r7, #13]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21b      	sxth	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff0c 	bl	8000494 <__aeabi_i2d>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	LSM6->gyroscope.z = (int16_t)(zhg << 8 | zlg);
 8001686:	7abb      	ldrb	r3, [r7, #10]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fefd 	bl	8000494 <__aeabi_i2d>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}

080016ae <LSM6_Read>:

// Main function to read LSM6 data
uint8_t LSM6_Read(LSM6_t *LSM6)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	uint8_t status;

	// Read accelerometer data
	if ((status = readAcc(LSM6)) != HAL_OK)
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff25 	bl	8001506 <readAcc>
 80016bc:	4603      	mov	r3, r0
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <LSM6_Read+0x1c>
	{
		return status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	e00a      	b.n	80016e0 <LSM6_Read+0x32>
	}

	// Read gyroscope data
	if ((status = readGyro(LSM6)) != HAL_OK)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff85 	bl	80015da <readGyro>
 80016d0:	4603      	mov	r3, r0
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <LSM6_Read+0x30>
	{
		return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	e000      	b.n	80016e0 <LSM6_Read+0x32>
	}

	return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <PID_Init>:
 *      Author: mand2
 */
#include "PID.h"

void PID_Init(PID_t *pid, double* Input, double* Output, double* Setpoint, double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6278      	str	r0, [r7, #36]	; 0x24
 80016f0:	6239      	str	r1, [r7, #32]
 80016f2:	61fa      	str	r2, [r7, #28]
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80016fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80016fe:	ed87 2b00 	vstr	d2, [r7]
    pid->myOutput = Output;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
    pid->myInput = Input;
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	6a3a      	ldr	r2, [r7, #32]
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
    pid->mySetpoint = Setpoint;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->inAuto = false;
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    pid->SampleTime = 50;
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	2232      	movs	r2, #50	; 0x32
 8001720:	651a      	str	r2, [r3, #80]	; 0x50

    PID_SetOutputLimits(pid, 0, 255);				//default output limit
 8001722:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001758 <PID_Init+0x70>
 8001726:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001760 <PID_Init+0x78>
 800172a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800172c:	f000 f909 	bl	8001942 <PID_SetOutputLimits>
    PID_SetControllerDirection(pid, ControllerDirection);
 8001730:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001734:	f000 f9cd 	bl	8001ad2 <PID_SetControllerDirection>
    PID_SetTunings(pid, Kp, Ki, Kd, POn);
 8001738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800173a:	ed97 2b00 	vldr	d2, [r7]
 800173e:	ed97 1b02 	vldr	d1, [r7, #8]
 8001742:	ed97 0b04 	vldr	d0, [r7, #16]
 8001746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001748:	f000 f80e 	bl	8001768 <PID_SetTunings>
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	00000000 	.word	0x00000000
 800175c:	406fe000 	.word	0x406fe000
	...

08001768 <PID_SetTunings>:

void PID_SetTunings(PID_t *pid, double Kp, double Ki, double Kd, int POn)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	61f8      	str	r0, [r7, #28]
 8001770:	ed87 0b04 	vstr	d0, [r7, #16]
 8001774:	ed87 1b02 	vstr	d1, [r7, #8]
 8001778:	ed87 2b00 	vstr	d2, [r7]
 800177c:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178a:	f7ff f95f 	bl	8000a4c <__aeabi_dcmplt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 8094 	bne.w	80018be <PID_SetTunings+0x156>
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017a2:	f7ff f953 	bl	8000a4c <__aeabi_dcmplt>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 8088 	bne.w	80018be <PID_SetTunings+0x156>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ba:	f7ff f947 	bl	8000a4c <__aeabi_dcmplt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d17c      	bne.n	80018be <PID_SetTunings+0x156>

   pid->pOn = POn;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   pid->pOnE = (POn == P_ON_ERROR);
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

   pid->dispKp = Kp;
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017e8:	e9c2 3400 	strd	r3, r4, [r2]
   pid->dispKi = Ki;
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
   pid->dispKd = Kd;
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017fc:	e9c2 3404 	strd	r3, r4, [r2, #16]

   double SampleTimeInSec = ((double)pid->SampleTime)/1000;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe35 	bl	8000474 <__aeabi_ui2d>
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <PID_SetTunings+0x160>)
 8001810:	f7fe ffd4 	bl	80007bc <__aeabi_ddiv>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	e9c7 3408 	strd	r3, r4, [r7, #32]
   pid->kp = Kp;
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001822:	e9c2 3406 	strd	r3, r4, [r2, #24]
   pid->ki = Ki * SampleTimeInSec;
 8001826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800182a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800182e:	f7fe fe9b 	bl	8000568 <__aeabi_dmul>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	e9c2 3408 	strd	r3, r4, [r2, #32]
   pid->kd = Kd / SampleTimeInSec;
 800183c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001844:	f7fe ffba 	bl	80007bc <__aeabi_ddiv>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  if(pid->controllerDirection == REVERSE)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001858:	2b01      	cmp	r3, #1
 800185a:	d131      	bne.n	80018c0 <PID_SetTunings+0x158>
   {
	  pid->kp = (0 - pid->kp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001862:	461a      	mov	r2, r3
 8001864:	4623      	mov	r3, r4
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	f7fe fcc3 	bl	80001f8 <__aeabi_dsub>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  pid->ki = (0 - pid->ki);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001882:	461a      	mov	r2, r3
 8001884:	4623      	mov	r3, r4
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	f7fe fcb3 	bl	80001f8 <__aeabi_dsub>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	e9c2 3408 	strd	r3, r4, [r2, #32]
	  pid->kd = (0 - pid->kd);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80018a2:	461a      	mov	r2, r3
 80018a4:	4623      	mov	r3, r4
 80018a6:	f04f 0000 	mov.w	r0, #0
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	f7fe fca3 	bl	80001f8 <__aeabi_dsub>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80018bc:	e000      	b.n	80018c0 <PID_SetTunings+0x158>
   if (Kp<0 || Ki<0 || Kd<0) return;
 80018be:	bf00      	nop
   }
}
 80018c0:	372c      	adds	r7, #44	; 0x2c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	408f4000 	.word	0x408f4000

080018cc <PID_SetSampleTime>:

void PID_SetSampleTime(PID_t *pid, int NewSampleTime)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dd2e      	ble.n	800193a <PID_SetSampleTime+0x6e>
   {
      double ratio  = (double)NewSampleTime
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f7fe fdd9 	bl	8000494 <__aeabi_i2d>
 80018e2:	4604      	mov	r4, r0
 80018e4:	460d      	mov	r5, r1
                      / (double)pid->SampleTime;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdc2 	bl	8000474 <__aeabi_ui2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe ff60 	bl	80007bc <__aeabi_ddiv>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	e9c7 3402 	strd	r3, r4, [r7, #8]
      pid->ki *= ratio;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800190a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190e:	f7fe fe2b 	bl	8000568 <__aeabi_dmul>
 8001912:	4603      	mov	r3, r0
 8001914:	460c      	mov	r4, r1
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	e9c2 3408 	strd	r3, r4, [r2, #32]
      pid->kd /= ratio;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001926:	f7fe ff49 	bl	80007bc <__aeabi_ddiv>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      pid->SampleTime = (unsigned long)NewSampleTime;
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	651a      	str	r2, [r3, #80]	; 0x50
   }
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bdb0      	pop	{r4, r5, r7, pc}

08001942 <PID_SetOutputLimits>:

void PID_SetOutputLimits(PID_t *pid, double Min, double Max)
{
 8001942:	b590      	push	{r4, r7, lr}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	6178      	str	r0, [r7, #20]
 800194a:	ed87 0b02 	vstr	d0, [r7, #8]
 800194e:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 8001952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195a:	f7ff f88b 	bl	8000a74 <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d161      	bne.n	8001a28 <PID_SetOutputLimits+0xe6>
   pid->outMin = Min;
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800196a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
   pid->outMax = Max;
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001974:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

   if(pid->inAuto)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800197e:	2b00      	cmp	r3, #0
 8001980:	d053      	beq.n	8001a2a <PID_SetOutputLimits+0xe8>
   {
	   if(*(pid->myOutput) > pid->outMax) *(pid->myOutput) = pid->outMax;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001990:	461a      	mov	r2, r3
 8001992:	4623      	mov	r3, r4
 8001994:	f7ff f878 	bl	8000a88 <__aeabi_dcmpgt>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <PID_SetOutputLimits+0x6c>
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80019a8:	e9c2 3400 	strd	r3, r4, [r2]
 80019ac:	e014      	b.n	80019d8 <PID_SetOutputLimits+0x96>
	   else if(*(pid->myOutput) < pid->outMin) *(pid->myOutput) = pid->outMin;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80019bc:	461a      	mov	r2, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	f7ff f844 	bl	8000a4c <__aeabi_dcmplt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <PID_SetOutputLimits+0x96>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80019d4:	e9c2 3400 	strd	r3, r4, [r2]

	   if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80019e4:	461a      	mov	r2, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	f7ff f84e 	bl	8000a88 <__aeabi_dcmpgt>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <PID_SetOutputLimits+0xbe>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 80019fe:	e014      	b.n	8001a2a <PID_SetOutputLimits+0xe8>
	   else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	f7ff f81c 	bl	8000a4c <__aeabi_dcmplt>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <PID_SetOutputLimits+0xe8>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001a26:	e000      	b.n	8001a2a <PID_SetOutputLimits+0xe8>
   if(Min >= Max) return;
 8001a28:	bf00      	nop
   }
}
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <PID_SetMode>:

void PID_SetMode(PID_t *pid, int Mode)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !pid->inAuto)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d039      	beq.n	8001ac2 <PID_SetMode+0x92>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d134      	bne.n	8001ac2 <PID_SetMode+0x92>
    {  /*we just went from manual to auto*/
    	pid->outputSum = *pid->myOutput;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    	pid->lastInput = *pid->myInput;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	   if(pid->outputSum > pid->outMax) pid->outputSum = pid->outMax;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	f7ff f800 	bl	8000a88 <__aeabi_dcmpgt>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <PID_SetMode+0x6c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001a9a:	e012      	b.n	8001ac2 <PID_SetMode+0x92>
	   else if(pid->outputSum < pid->outMin) pid->outputSum = pid->outMin;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	f7fe ffce 	bl	8000a4c <__aeabi_dcmplt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <PID_SetMode+0x92>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    }
    pid->inAuto = newAuto;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}

08001ad2 <PID_SetControllerDirection>:

void PID_SetControllerDirection(PID_t *pid, int Direction)
{
 8001ad2:	b590      	push	{r4, r7, lr}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
   if(pid->inAuto && (Direction != pid->controllerDirection))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d036      	beq.n	8001b54 <PID_SetControllerDirection+0x82>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aec:	461a      	mov	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d02f      	beq.n	8001b54 <PID_SetControllerDirection+0x82>
   {
	   pid->kp = (0 - pid->kp);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	f04f 0000 	mov.w	r0, #0
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	f7fe fb77 	bl	80001f8 <__aeabi_dsub>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	e9c2 3406 	strd	r3, r4, [r2, #24]
	   pid->ki = (0 - pid->ki);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	f04f 0000 	mov.w	r0, #0
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	f7fe fb67 	bl	80001f8 <__aeabi_dsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	e9c2 3408 	strd	r3, r4, [r2, #32]
	   pid->kd = (0 - pid->kd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	f7fe fb57 	bl	80001f8 <__aeabi_dsub>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   }
   pid->controllerDirection = Direction;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}

08001b66 <PID_Compute>:

bool PID_Compute(PID_t *pid)
{
 8001b66:	b5b0      	push	{r4, r5, r7, lr}
 8001b68:	b08a      	sub	sp, #40	; 0x28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   if(!pid->inAuto)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <PID_Compute+0x16>
   {
	   return false;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e0d8      	b.n	8001d2e <PID_Compute+0x1c8>
   }

      /*Compute all the working error variables*/
      double input = *pid->myInput;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b84:	e9c7 3406 	strd	r3, r4, [r7, #24]
      double error = *pid->mySetpoint - input;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b94:	f7fe fb30 	bl	80001f8 <__aeabi_dsub>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      double dInput = (input - pid->lastInput);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4623      	mov	r3, r4
 8001baa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bae:	f7fe fb23 	bl	80001f8 <__aeabi_dsub>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      pid->outputSum+= (pid->ki * error);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bca:	f7fe fccd 	bl	8000568 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fb11 	bl	80001fc <__adddf3>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pid->pOnE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d114      	bne.n	8001c18 <PID_Compute+0xb2>
	  {
    	  pid->outputSum-= pid->kp * dInput;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfe:	f7fe fcb3 	bl	8000568 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe faf5 	bl	80001f8 <__aeabi_dsub>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	  }

      if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001c24:	461a      	mov	r2, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	f7fe ff2e 	bl	8000a88 <__aeabi_dcmpgt>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <PID_Compute+0xda>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001c3e:	e012      	b.n	8001c66 <PID_Compute+0x100>
      else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4623      	mov	r3, r4
 8001c50:	f7fe fefc 	bl	8000a4c <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <PID_Compute+0x100>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

      /*Add Proportional on Error, if P_ON_E is specified*/
	  double output;
      if(pid->pOnE) output = pid->kp * error;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00d      	beq.n	8001c8c <PID_Compute+0x126>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4623      	mov	r3, r4
 8001c7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c7e:	f7fe fc73 	bl	8000568 <__aeabi_dmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001c8a:	e005      	b.n	8001c98 <PID_Compute+0x132>
      else output = 0;
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	f04f 0400 	mov.w	r4, #0
 8001c94:	e9c7 3408 	strd	r3, r4, [r7, #32]

      /*Compute Rest of PID Output*/
      output += pid->outputSum - pid->kd * dInput;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ca8:	f7fe fc5e 	bl	8000568 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe faa0 	bl	80001f8 <__aeabi_dsub>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cc4:	f7fe fa9a 	bl	80001fc <__adddf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	e9c7 3408 	strd	r3, r4, [r7, #32]

      if(output > pid->outMax) output = pid->outMax;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cde:	f7fe fed3 	bl	8000a88 <__aeabi_dcmpgt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <PID_Compute+0x18e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001cee:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001cf2:	e010      	b.n	8001d16 <PID_Compute+0x1b0>
      else if(output < pid->outMin) output = pid->outMin;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d02:	f7fe fea3 	bl	8000a4c <__aeabi_dcmplt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <PID_Compute+0x1b0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001d12:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *pid->myOutput = output;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d1e:	e9c2 3400 	strd	r3, r4, [r2]

      /*Remember some variables for next time*/
      pid->lastInput = input;
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d28:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
      return true;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 8001d3c:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <MX_FREERTOS_Init+0x9c>)
 8001d3e:	f006 f9e9 	bl	8008114 <osMutexNew>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <MX_FREERTOS_Init+0xa0>)
 8001d46:	601a      	str	r2, [r3, #0]

  /* creation of MutexUARTputchar */
  MutexUARTputcharHandle = osMutexNew(&MutexUARTputchar_attributes);
 8001d48:	4824      	ldr	r0, [pc, #144]	; (8001ddc <MX_FREERTOS_Init+0xa4>)
 8001d4a:	f006 f9e3 	bl	8008114 <osMutexNew>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <MX_FREERTOS_Init+0xa8>)
 8001d52:	601a      	str	r2, [r3, #0]

  /* creation of MutexMotors */
  MutexMotorsHandle = osMutexNew(&MutexMotors_attributes);
 8001d54:	4823      	ldr	r0, [pc, #140]	; (8001de4 <MX_FREERTOS_Init+0xac>)
 8001d56:	f006 f9dd 	bl	8008114 <osMutexNew>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <MX_FREERTOS_Init+0xb0>)
 8001d5e:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreLSM6_DataReady */
  SemaphoreLSM6_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreLSM6_DataReady_attributes);
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <MX_FREERTOS_Init+0xb4>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	2001      	movs	r0, #1
 8001d66:	f006 fb1d 	bl	80083a4 <osSemaphoreNew>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_FREERTOS_Init+0xb8>)
 8001d6e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueInputPID */
  QueueInputPIDHandle = osMessageQueueNew (8, sizeof(double), &QueueInputPID_attributes);
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <MX_FREERTOS_Init+0xbc>)
 8001d72:	2108      	movs	r1, #8
 8001d74:	2008      	movs	r0, #8
 8001d76:	f006 fc71 	bl	800865c <osMessageQueueNew>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_FREERTOS_Init+0xc0>)
 8001d7e:	601a      	str	r2, [r3, #0]

  /* creation of QueueOutputPID */
  QueueOutputPIDHandle = osMessageQueueNew (16, sizeof(double), &QueueOutputPID_attributes);
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <MX_FREERTOS_Init+0xc4>)
 8001d82:	2108      	movs	r1, #8
 8001d84:	2010      	movs	r0, #16
 8001d86:	f006 fc69 	bl	800865c <osMessageQueueNew>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_FREERTOS_Init+0xc8>)
 8001d8e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(StartHeartbeatTask, NULL, &Heartbeat_attributes);
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_FREERTOS_Init+0xcc>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	481c      	ldr	r0, [pc, #112]	; (8001e08 <MX_FREERTOS_Init+0xd0>)
 8001d96:	f006 f8e9 	bl	8007f6c <osThreadNew>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_FREERTOS_Init+0xd4>)
 8001d9e:	601a      	str	r2, [r3, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(StartIMU_Task, NULL, &IMU_Task_attributes);
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <MX_FREERTOS_Init+0xd8>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	481b      	ldr	r0, [pc, #108]	; (8001e14 <MX_FREERTOS_Init+0xdc>)
 8001da6:	f006 f8e1 	bl	8007f6c <osThreadNew>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_FREERTOS_Init+0xe0>)
 8001dae:	601a      	str	r2, [r3, #0]

  /* creation of PIDTask */
  PIDTaskHandle = osThreadNew(StartPIDTask, NULL, &PIDTask_attributes);
 8001db0:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <MX_FREERTOS_Init+0xe4>)
 8001db2:	2100      	movs	r1, #0
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <MX_FREERTOS_Init+0xe8>)
 8001db6:	f006 f8d9 	bl	8007f6c <osThreadNew>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <MX_FREERTOS_Init+0xec>)
 8001dbe:	601a      	str	r2, [r3, #0]

  /* creation of StepperMotorsTa */
  StepperMotorsTaHandle = osThreadNew(StartStepperMotorsTask, NULL, &StepperMotorsTa_attributes);
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <MX_FREERTOS_Init+0xf0>)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4819      	ldr	r0, [pc, #100]	; (8001e2c <MX_FREERTOS_Init+0xf4>)
 8001dc6:	f006 f8d1 	bl	8007f6c <osThreadNew>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_FREERTOS_Init+0xf8>)
 8001dce:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	0800dd10 	.word	0x0800dd10
 8001dd8:	20004b10 	.word	0x20004b10
 8001ddc:	0800dd20 	.word	0x0800dd20
 8001de0:	20004b44 	.word	0x20004b44
 8001de4:	0800dd30 	.word	0x0800dd30
 8001de8:	20004b14 	.word	0x20004b14
 8001dec:	0800dd40 	.word	0x0800dd40
 8001df0:	20004b28 	.word	0x20004b28
 8001df4:	0800dce0 	.word	0x0800dce0
 8001df8:	20004b48 	.word	0x20004b48
 8001dfc:	0800dcf8 	.word	0x0800dcf8
 8001e00:	20004b4c 	.word	0x20004b4c
 8001e04:	0800dc50 	.word	0x0800dc50
 8001e08:	08001e35 	.word	0x08001e35
 8001e0c:	20004b38 	.word	0x20004b38
 8001e10:	0800dc74 	.word	0x0800dc74
 8001e14:	08001e49 	.word	0x08001e49
 8001e18:	20004b18 	.word	0x20004b18
 8001e1c:	0800dc98 	.word	0x0800dc98
 8001e20:	08001ff9 	.word	0x08001ff9
 8001e24:	20004b40 	.word	0x20004b40
 8001e28:	0800dcbc 	.word	0x0800dcbc
 8001e2c:	08002185 	.word	0x08002185
 8001e30:	20004b3c 	.word	0x20004b3c

08001e34 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
      osDelay(500);
 8001e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e40:	f006 f93a 	bl	80080b8 <osDelay>
 8001e44:	e7fa      	b.n	8001e3c <StartHeartbeatTask+0x8>
	...

08001e48 <StartIMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU_Task */
void StartIMU_Task(void *argument)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b099      	sub	sp, #100	; 0x64
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU_Task */
	LSM6_t LSM6DS33;
	double accAngle, outputAngle;
	double prevAngle = 0;
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f04f 0400 	mov.w	r4, #0
 8001e58:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	osDelay(150);
 8001e5c:	2096      	movs	r0, #150	; 0x96
 8001e5e:	f006 f92b 	bl	80080b8 <osDelay>
	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <StartIMU_Task+0x180>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 f9ec 	bl	8008248 <osMutexAcquire>
	if (LSM6_InitEx(&hi2c1, &LSM6DS33, device_autoDetect, sa0_autoDetect) == false)
 8001e70:	f107 0110 	add.w	r1, r7, #16
 8001e74:	2302      	movs	r3, #2
 8001e76:	2201      	movs	r2, #1
 8001e78:	4854      	ldr	r0, [pc, #336]	; (8001fcc <StartIMU_Task+0x184>)
 8001e7a:	f7ff fa0b 	bl	8001294 <LSM6_InitEx>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <StartIMU_Task+0x44>
	{
		printf("LSM6 INIT ERROR\n\r");
 8001e84:	4852      	ldr	r0, [pc, #328]	; (8001fd0 <StartIMU_Task+0x188>)
 8001e86:	f002 f91d 	bl	80040c4 <printf_>
 8001e8a:	e004      	b.n	8001e96 <StartIMU_Task+0x4e>
	}
	else
	{
		enableDefault(&LSM6DS33);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fab0 	bl	80013f6 <enableDefault>
	}
	osMutexRelease(MutexI2CHandle);
 8001e96:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <StartIMU_Task+0x180>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f006 fa32 	bl	8008304 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <StartIMU_Task+0x18c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 fb19 	bl	80084e0 <osSemaphoreAcquire>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f5      	bne.n	8001ea0 <StartIMU_Task+0x58>
    {
    	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8001eb4:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <StartIMU_Task+0x180>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f006 f9c3 	bl	8008248 <osMutexAcquire>
    	if(HAL_OK == LSM6_Read(&LSM6DS33))
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fbf1 	bl	80016ae <LSM6_Read>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d169      	bne.n	8001fa6 <StartIMU_Task+0x15e>
    	{
    		osMutexRelease(MutexI2CHandle);
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <StartIMU_Task+0x180>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f006 fa14 	bl	8008304 <osMutexRelease>
        	accAngle = calculateAccAngle(LSM6DS33.accelerometer.y, LSM6DS33.accelerometer.z);
 8001edc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ee0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001ee4:	eeb0 1a46 	vmov.f32	s2, s12
 8001ee8:	eef0 1a66 	vmov.f32	s3, s13
 8001eec:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef0:	eef0 0a67 	vmov.f32	s1, s15
 8001ef4:	f000 fa88 	bl	8002408 <calculateAccAngle>
 8001ef8:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
        	outputAngle = complementaryFilter(LSM6DS33.gyroscope.x, accAngle, prevAngle);
 8001efc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f00:	ed97 2b16 	vldr	d2, [r7, #88]	; 0x58
 8001f04:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001f08:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0c:	eef0 0a67 	vmov.f32	s1, s15
 8001f10:	f000 fa0e 	bl	8002330 <complementaryFilter>
 8001f14:	eeb0 7a40 	vmov.f32	s14, s0
 8001f18:	eef0 7a60 	vmov.f32	s15, s1
 8001f1c:	ed87 7b02 	vstr	d7, [r7, #8]
        	osMessageQueuePut(QueueInputPIDHandle, &outputAngle, 0, 0);
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <StartIMU_Task+0x190>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	f107 0108 	add.w	r1, r7, #8
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f006 fc1c 	bl	8008768 <osMessageQueuePut>
        	prevAngle = outputAngle;
 8001f30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f34:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        	printf("aY = %.2f, ", LSM6DS33.accelerometer.y*ACC_SENSITIVITY);
 8001f38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f3c:	a31e      	add	r3, pc, #120	; (adr r3, 8001fb8 <StartIMU_Task+0x170>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fb11 	bl	8000568 <__aeabi_dmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	460c      	mov	r4, r1
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	4823      	ldr	r0, [pc, #140]	; (8001fdc <StartIMU_Task+0x194>)
 8001f50:	f002 f8b8 	bl	80040c4 <printf_>
        	printf("aZ = %.2f, ", LSM6DS33.accelerometer.z*ACC_SENSITIVITY);
 8001f54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f58:	a317      	add	r3, pc, #92	; (adr r3, 8001fb8 <StartIMU_Task+0x170>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb03 	bl	8000568 <__aeabi_dmul>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	461a      	mov	r2, r3
 8001f68:	4623      	mov	r3, r4
 8001f6a:	481d      	ldr	r0, [pc, #116]	; (8001fe0 <StartIMU_Task+0x198>)
 8001f6c:	f002 f8aa 	bl	80040c4 <printf_>
        	printf("gX = %.2f, ", LSM6DS33.gyroscope.x*GYRO_SENSITIVITY);
 8001f70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f74:	a312      	add	r3, pc, #72	; (adr r3, 8001fc0 <StartIMU_Task+0x178>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe faf5 	bl	8000568 <__aeabi_dmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	461a      	mov	r2, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <StartIMU_Task+0x19c>)
 8001f88:	f002 f89c 	bl	80040c4 <printf_>
        	printf("accAngle = %.2f, ", accAngle);
 8001f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f90:	4815      	ldr	r0, [pc, #84]	; (8001fe8 <StartIMU_Task+0x1a0>)
 8001f92:	f002 f897 	bl	80040c4 <printf_>
        	printf("comp filter = %.2f\n\r", outputAngle);
 8001f96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	4813      	ldr	r0, [pc, #76]	; (8001fec <StartIMU_Task+0x1a4>)
 8001fa0:	f002 f890 	bl	80040c4 <printf_>
 8001fa4:	e77c      	b.n	8001ea0 <StartIMU_Task+0x58>
    	}
    	else
    	{
    		osMutexRelease(MutexI2CHandle);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <StartIMU_Task+0x180>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 f9aa 	bl	8008304 <osMutexRelease>
    		printf("LSM6 READ ERROR\n\r");
 8001fb0:	480f      	ldr	r0, [pc, #60]	; (8001ff0 <StartIMU_Task+0x1a8>)
 8001fb2:	f002 f887 	bl	80040c4 <printf_>
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001fb6:	e773      	b.n	8001ea0 <StartIMU_Task+0x58>
 8001fb8:	0a5accd5 	.word	0x0a5accd5
 8001fbc:	3f0ffb48 	.word	0x3f0ffb48
 8001fc0:	1eb851ec 	.word	0x1eb851ec
 8001fc4:	3f81eb85 	.word	0x3f81eb85
 8001fc8:	20004b10 	.word	0x20004b10
 8001fcc:	20004b50 	.word	0x20004b50
 8001fd0:	0800db6c 	.word	0x0800db6c
 8001fd4:	20004b28 	.word	0x20004b28
 8001fd8:	20004b48 	.word	0x20004b48
 8001fdc:	0800db80 	.word	0x0800db80
 8001fe0:	0800db8c 	.word	0x0800db8c
 8001fe4:	0800db98 	.word	0x0800db98
 8001fe8:	0800dba4 	.word	0x0800dba4
 8001fec:	0800dbb8 	.word	0x0800dbb8
 8001ff0:	0800dbd0 	.word	0x0800dbd0
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <StartPIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void *argument)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b0ad      	sub	sp, #180	; 0xb4
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIDTask */
	PID_t PID;
	double input, output;
	double setpoint = PID_SETPOINT;
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	f04f 0400 	mov.w	r4, #0
 8002008:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double Kp = 3.0;
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	4c51      	ldr	r4, [pc, #324]	; (8002158 <StartPIDTask+0x160>)
 8002012:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
//	char KpTemp[5];
	double Ki = 14.0;
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	4c50      	ldr	r4, [pc, #320]	; (800215c <StartPIDTask+0x164>)
 800201c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	double Kd = 0.015;
 8002020:	a447      	add	r4, pc, #284	; (adr r4, 8002140 <StartPIDTask+0x148>)
 8002022:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002026:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	PID_Init(&PID, &input, &output, &setpoint, Kp, Ki, Kd, P_ON_ERROR, DIRECT);
 800202a:	f107 0408 	add.w	r4, r7, #8
 800202e:	f107 0210 	add.w	r2, r7, #16
 8002032:	f107 0118 	add.w	r1, r7, #24
 8002036:	f107 0020 	add.w	r0, r7, #32
 800203a:	2300      	movs	r3, #0
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	2301      	movs	r3, #1
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	ed97 2b24 	vldr	d2, [r7, #144]	; 0x90
 8002046:	ed97 1b26 	vldr	d1, [r7, #152]	; 0x98
 800204a:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800204e:	4623      	mov	r3, r4
 8002050:	f7ff fb4a 	bl	80016e8 <PID_Init>
	PID_SetMode(&PID, AUTOMATIC);
 8002054:	f107 0320 	add.w	r3, r7, #32
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fce8 	bl	8001a30 <PID_SetMode>
	PID_SetSampleTime(&PID, (uint32_t) ((1.0/(float)PID_SAMPLE_TIME) * 1000.0));
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	2113      	movs	r1, #19
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc30 	bl	80018cc <PID_SetSampleTime>
	PID_SetOutputLimits(&PID, -DRV8834_MAX_SPEED, DRV8834_MAX_SPEED);
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002148 <StartPIDTask+0x150>
 8002074:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8002150 <StartPIDTask+0x158>
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fc62 	bl	8001942 <PID_SetOutputLimits>
//	osTimerStart(TimerPIDHandle, (PID.SampleTime * osKernelGetTickFreq()) / 1000);
  /* Infinite loop */
  for(;;)
  {
	  //osSemaphoreAcquire(SemaphorePIDComputeHandle, osWaitForever);
	  osMessageQueueGet(QueueInputPIDHandle, &input, NULL, osWaitForever);
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <StartPIDTask+0x168>)
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	f107 0118 	add.w	r1, r7, #24
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	2200      	movs	r2, #0
 800208c:	f006 fbe0 	bl	8008850 <osMessageQueueGet>
//	  if(HAL_OK == HAL_UART_Receive(&huart2, (uint8_t*)KpTemp, sizeof(KpTemp), 2))
//	  {
//		  Kp = atof(KpTemp);
//	  }
//	  printf("Kp: %.2f\n\r", Kp);
	  pidMonitorInput = input;
 8002090:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002094:	4a33      	ldr	r2, [pc, #204]	; (8002164 <StartPIDTask+0x16c>)
 8002096:	e9c2 3400 	strd	r3, r4, [r2]
	  if(input < 40 && input >-40)
 800209a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <StartPIDTask+0x170>)
 80020a4:	f7fe fcd2 	bl	8000a4c <__aeabi_dcmplt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00f      	beq.n	80020ce <StartPIDTask+0xd6>
 80020ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <StartPIDTask+0x174>)
 80020b8:	f7fe fce6 	bl	8000a88 <__aeabi_dcmpgt>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <StartPIDTask+0xd6>
	  {
		  PID_Compute(&PID);
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd4d 	bl	8001b66 <PID_Compute>
 80020cc:	e005      	b.n	80020da <StartPIDTask+0xe2>
	  }
	  else
	  {
		  output = 0.0;
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  }

	  if(output < 5 && output > -5)
 80020da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <StartPIDTask+0x178>)
 80020e4:	f7fe fcb2 	bl	8000a4c <__aeabi_dcmplt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <StartPIDTask+0x116>
 80020ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <StartPIDTask+0x17c>)
 80020f8:	f7fe fcc6 	bl	8000a88 <__aeabi_dcmpgt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <StartPIDTask+0x116>
	  {
		  output = 0.0;
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	f04f 0400 	mov.w	r4, #0
 800210a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  }
	  osMessageQueuePut(QueueOutputPIDHandle, &output, 0, 0);
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <StartPIDTask+0x180>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	f107 0110 	add.w	r1, r7, #16
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	f006 fb25 	bl	8008768 <osMessageQueuePut>
	  pidMonitorOutput = output;
 800211e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <StartPIDTask+0x184>)
 8002124:	e9c2 3400 	strd	r3, r4, [r2]
	  printf("PID input: %.2f, output:%.2f\n\r", input, output);
 8002128:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800212c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002130:	e9cd 3400 	strd	r3, r4, [sp]
 8002134:	4613      	mov	r3, r2
 8002136:	460a      	mov	r2, r1
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <StartPIDTask+0x188>)
 800213a:	f001 ffc3 	bl	80040c4 <printf_>
	  osMessageQueueGet(QueueInputPIDHandle, &input, NULL, osWaitForever);
 800213e:	e79e      	b.n	800207e <StartPIDTask+0x86>
 8002140:	eb851eb8 	.word	0xeb851eb8
 8002144:	3f8eb851 	.word	0x3f8eb851
 8002148:	00000000 	.word	0x00000000
 800214c:	40490000 	.word	0x40490000
 8002150:	00000000 	.word	0x00000000
 8002154:	c0490000 	.word	0xc0490000
 8002158:	40080000 	.word	0x40080000
 800215c:	402c0000 	.word	0x402c0000
 8002160:	20004b48 	.word	0x20004b48
 8002164:	20004b30 	.word	0x20004b30
 8002168:	40440000 	.word	0x40440000
 800216c:	c0440000 	.word	0xc0440000
 8002170:	40140000 	.word	0x40140000
 8002174:	c0140000 	.word	0xc0140000
 8002178:	20004b4c 	.word	0x20004b4c
 800217c:	20004b20 	.word	0x20004b20
 8002180:	0800dbe4 	.word	0x0800dbe4

08002184 <StartStepperMotorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStepperMotorsTask */
void StartStepperMotorsTask(void *argument)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b0a1      	sub	sp, #132	; 0x84
 8002188:	af04      	add	r7, sp, #16
 800218a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStepperMotorsTask */
	StepMotor_t rightMotor;
	StepMotor_t leftMotor;
	double pid_output;
	int32_t speed = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	66fb      	str	r3, [r7, #108]	; 0x6c

	DRV8834_Init(&leftMotor, &htim2, TIM_CHANNEL_3);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2208      	movs	r2, #8
 8002196:	4945      	ldr	r1, [pc, #276]	; (80022ac <StartStepperMotorsTask+0x128>)
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fe5d 	bl	8000e58 <DRV8834_Init>
	DRV8834_InitPins(&leftMotor, leftMotor_DIR_Pin, leftMotor_DIR_GPIO_Port,
 800219e:	f107 0014 	add.w	r0, r7, #20
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <StartStepperMotorsTask+0x12c>)
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2320      	movs	r3, #32
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <StartStepperMotorsTask+0x12c>)
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2340      	movs	r3, #64	; 0x40
 80021b0:	4a3f      	ldr	r2, [pc, #252]	; (80022b0 <StartStepperMotorsTask+0x12c>)
 80021b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b6:	f7fe fe6a 	bl	8000e8e <DRV8834_InitPins>
			leftMotor_M0_Pin, leftMotor_M0_GPIO_Port, leftMotor_M1_Pin, leftMotor_M1_GPIO_Port);
	DRV8834_SetMicrostep(&leftMotor, 4);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	2104      	movs	r1, #4
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fec1 	bl	8000f48 <DRV8834_SetMicrostep>

	DRV8834_Init(&rightMotor, &htim4, TIM_CHANNEL_1);
 80021c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ca:	2200      	movs	r2, #0
 80021cc:	4939      	ldr	r1, [pc, #228]	; (80022b4 <StartStepperMotorsTask+0x130>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fe42 	bl	8000e58 <DRV8834_Init>
	DRV8834_InitPins(&rightMotor, rightMotor_DIR_Pin, rightMotor_DIR_GPIO_Port,
 80021d4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80021d8:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <StartStepperMotorsTask+0x134>)
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	2320      	movs	r3, #32
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <StartStepperMotorsTask+0x134>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2310      	movs	r3, #16
 80021e6:	4a32      	ldr	r2, [pc, #200]	; (80022b0 <StartStepperMotorsTask+0x12c>)
 80021e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ec:	f7fe fe4f 	bl	8000e8e <DRV8834_InitPins>
			rightMotor_M0_Pin, rightMotor_M0_GPIO_Port, rightMotor_M1_Pin, rightMotor_M1_GPIO_Port);
	DRV8834_SetMicrostep(&rightMotor, 4);
 80021f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021f4:	2104      	movs	r1, #4
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fea6 	bl	8000f48 <DRV8834_SetMicrostep>
//	DRV8834_StartMotor(&rightMotor, 1);
  /* Infinite loop */
  for(;;)
  {
	//osThreadFlagsWait(PID_DATA_READY, osFlagsWaitAll, osWaitForever);
    if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &pid_output, NULL, osWaitForever))
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <StartStepperMotorsTask+0x138>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	f107 0108 	add.w	r1, r7, #8
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
 8002208:	2200      	movs	r2, #0
 800220a:	f006 fb21 	bl	8008850 <osMessageQueueGet>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f3      	bne.n	80021fc <StartStepperMotorsTask+0x78>
    {
    	speed = (int32_t) pid_output;
 8002214:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	4621      	mov	r1, r4
 800221c:	f7fe fc54 	bl	8000ac8 <__aeabi_d2iz>
 8002220:	4603      	mov	r3, r0
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
    	printf("Step motor input speed:%d\n\r", speed);
 8002224:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002226:	4826      	ldr	r0, [pc, #152]	; (80022c0 <StartStepperMotorsTask+0x13c>)
 8002228:	f001 ff4c 	bl	80040c4 <printf_>
    	if((leftMotor.state == STOPPED) && (rightMotor.state == STOPPED) && (speed != 0))
 800222c:	7d3b      	ldrb	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d121      	bne.n	8002276 <StartStepperMotorsTask+0xf2>
 8002232:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11d      	bne.n	8002276 <StartStepperMotorsTask+0xf2>
 800223a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01a      	beq.n	8002276 <StartStepperMotorsTask+0xf2>
    	{
    		osMutexAcquire(MutexMotorsHandle, osWaitForever);
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <StartStepperMotorsTask+0x140>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	4618      	mov	r0, r3
 800224a:	f005 fffd 	bl	8008248 <osMutexAcquire>
    		DRV8834_StartMotor(&leftMotor, -speed);
 800224e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002250:	425a      	negs	r2, r3
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f803 	bl	8001264 <DRV8834_StartMotor>
    		DRV8834_StartMotor(&rightMotor, speed);
 800225e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002262:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fffd 	bl	8001264 <DRV8834_StartMotor>
    		osMutexRelease(MutexMotorsHandle);
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <StartStepperMotorsTask+0x140>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f006 f848 	bl	8008304 <osMutexRelease>
 8002274:	e019      	b.n	80022aa <StartStepperMotorsTask+0x126>
    	}
    	else
    	{
    		osMutexAcquire(MutexMotorsHandle, osWaitForever);
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <StartStepperMotorsTask+0x140>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f04f 31ff 	mov.w	r1, #4294967295
 800227e:	4618      	mov	r0, r3
 8002280:	f005 ffe2 	bl	8008248 <osMutexAcquire>
        	DRV8834_SetSpeed(&leftMotor, -speed);
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	425a      	negs	r2, r3
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe ff4a 	bl	8001128 <DRV8834_SetSpeed>
        	DRV8834_SetSpeed(&rightMotor, speed);
 8002294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002298:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe ff44 	bl	8001128 <DRV8834_SetSpeed>
    		osMutexRelease(MutexMotorsHandle);
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <StartStepperMotorsTask+0x140>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 f82d 	bl	8008304 <osMutexRelease>
    if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &pid_output, NULL, osWaitForever))
 80022aa:	e7a7      	b.n	80021fc <StartStepperMotorsTask+0x78>
 80022ac:	20004c24 	.word	0x20004c24
 80022b0:	40020000 	.word	0x40020000
 80022b4:	20004be4 	.word	0x20004be4
 80022b8:	40020400 	.word	0x40020400
 80022bc:	20004b4c 	.word	0x20004b4c
 80022c0:	0800dc04 	.word	0x0800dc04
 80022c4:	20004b14 	.word	0x20004b14

080022c8 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexUARTputcharHandle, osWaitForever);
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <_putchar+0x38>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f04f 31ff 	mov.w	r1, #4294967295
 80022da:	4618      	mov	r0, r3
 80022dc:	f005 ffb4 	bl	8008248 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 10);
 80022e0:	1df9      	adds	r1, r7, #7
 80022e2:	230a      	movs	r3, #10
 80022e4:	2201      	movs	r2, #1
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <_putchar+0x3c>)
 80022e8:	f005 f96f 	bl	80075ca <HAL_UART_Transmit>
	osMutexRelease(MutexUARTputcharHandle);
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <_putchar+0x38>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f006 f807 	bl	8008304 <osMutexRelease>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20004b44 	.word	0x20004b44
 8002304:	20004c64 	.word	0x20004c64

08002308 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LSM6_Interrupt_Pin)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d104      	bne.n	8002324 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(SemaphoreLSM6_DataReadyHandle);
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_GPIO_EXTI_Callback+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f006 f944 	bl	80085ac <osSemaphoreRelease>
	}
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20004b28 	.word	0x20004b28

08002330 <complementaryFilter>:
{
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

double complementaryFilter(double gyroX, double accAngle, double prevAngle)
{
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	ed87 0b04 	vstr	d0, [r7, #16]
 800233a:	ed87 1b02 	vstr	d1, [r7, #8]
 800233e:	ed87 2b00 	vstr	d2, [r7]
	return (COMP_FILTER_GAIN * (prevAngle + ((gyroX*GYRO_SENSITIVITY + GYRO_OFFSET_X)/LSM6_SAMPLE_TIME)))
 8002342:	a32f      	add	r3, pc, #188	; (adr r3, 8002400 <complementaryFilter+0xd0>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800234c:	f7fe f90c 	bl	8000568 <__aeabi_dmul>
 8002350:	4603      	mov	r3, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4618      	mov	r0, r3
 8002356:	4621      	mov	r1, r4
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002360:	f7fd ff4a 	bl	80001f8 <__aeabi_dsub>
 8002364:	4603      	mov	r3, r0
 8002366:	460c      	mov	r4, r1
 8002368:	4618      	mov	r0, r3
 800236a:	4621      	mov	r1, r4
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <complementaryFilter+0xc8>)
 8002372:	f7fe fa23 	bl	80007bc <__aeabi_ddiv>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	4618      	mov	r0, r3
 800237c:	4621      	mov	r1, r4
 800237e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002382:	f7fd ff3b 	bl	80001fc <__adddf3>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	4618      	mov	r0, r3
 800238c:	4621      	mov	r1, r4
 800238e:	a418      	add	r4, pc, #96	; (adr r4, 80023f0 <complementaryFilter+0xc0>)
 8002390:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	f7fe f8e6 	bl	8000568 <__aeabi_dmul>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	461d      	mov	r5, r3
 80023a2:	4626      	mov	r6, r4
			+ ((1 - COMP_FILTER_GAIN) * accAngle);
 80023a4:	a412      	add	r4, pc, #72	; (adr r4, 80023f0 <complementaryFilter+0xc0>)
 80023a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4623      	mov	r3, r4
 80023ae:	f04f 0000 	mov.w	r0, #0
 80023b2:	4912      	ldr	r1, [pc, #72]	; (80023fc <complementaryFilter+0xcc>)
 80023b4:	f7fd ff20 	bl	80001f8 <__aeabi_dsub>
 80023b8:	4603      	mov	r3, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	4618      	mov	r0, r3
 80023be:	4621      	mov	r1, r4
 80023c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c4:	f7fe f8d0 	bl	8000568 <__aeabi_dmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	461a      	mov	r2, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	4628      	mov	r0, r5
 80023d2:	4631      	mov	r1, r6
 80023d4:	f7fd ff12 	bl	80001fc <__adddf3>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	ec44 3b17 	vmov	d7, r3, r4
}
 80023e0:	eeb0 0a47 	vmov.f32	s0, s14
 80023e4:	eef0 0a67 	vmov.f32	s1, s15
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	eb851eb8 	.word	0xeb851eb8
 80023f4:	3feeb851 	.word	0x3feeb851
 80023f8:	404a0000 	.word	0x404a0000
 80023fc:	3ff00000 	.word	0x3ff00000
 8002400:	1eb851ec 	.word	0x1eb851ec
 8002404:	3f81eb85 	.word	0x3f81eb85

08002408 <calculateAccAngle>:

double calculateAccAngle(double accY, double accZ)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	ed2d 8b02 	vpush	{d8}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	ed87 0b02 	vstr	d0, [r7, #8]
 8002416:	ed87 1b00 	vstr	d1, [r7]
	return (atan2((accY*ACC_SENSITIVITY + ACC_OFFSET_Y), (accZ*ACC_SENSITIVITY + ACC_OFFSET_Z)) * 180.0/M_PI);
 800241a:	a32a      	add	r3, pc, #168	; (adr r3, 80024c4 <calculateAccAngle+0xbc>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002424:	f7fe f8a0 	bl	8000568 <__aeabi_dmul>
 8002428:	4603      	mov	r3, r0
 800242a:	460c      	mov	r4, r1
 800242c:	4618      	mov	r0, r3
 800242e:	4621      	mov	r1, r4
 8002430:	a326      	add	r3, pc, #152	; (adr r3, 80024cc <calculateAccAngle+0xc4>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fd fee1 	bl	80001fc <__adddf3>
 800243a:	4603      	mov	r3, r0
 800243c:	460c      	mov	r4, r1
 800243e:	ec44 3b18 	vmov	d8, r3, r4
 8002442:	a320      	add	r3, pc, #128	; (adr r3, 80024c4 <calculateAccAngle+0xbc>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800244c:	f7fe f88c 	bl	8000568 <__aeabi_dmul>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	4618      	mov	r0, r3
 8002456:	4621      	mov	r1, r4
 8002458:	a31e      	add	r3, pc, #120	; (adr r3, 80024d4 <calculateAccAngle+0xcc>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fd fecb 	bl	80001f8 <__aeabi_dsub>
 8002462:	4603      	mov	r3, r0
 8002464:	460c      	mov	r4, r1
 8002466:	ec44 3b17 	vmov	d7, r3, r4
 800246a:	eeb0 1a47 	vmov.f32	s2, s14
 800246e:	eef0 1a67 	vmov.f32	s3, s15
 8002472:	eeb0 0a48 	vmov.f32	s0, s16
 8002476:	eef0 0a68 	vmov.f32	s1, s17
 800247a:	f00b f890 	bl	800d59e <atan2>
 800247e:	ec51 0b10 	vmov	r0, r1, d0
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <calculateAccAngle+0xb8>)
 8002488:	f7fe f86e 	bl	8000568 <__aeabi_dmul>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	4618      	mov	r0, r3
 8002492:	4621      	mov	r1, r4
 8002494:	a308      	add	r3, pc, #32	; (adr r3, 80024b8 <calculateAccAngle+0xb0>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe f98f 	bl	80007bc <__aeabi_ddiv>
 800249e:	4603      	mov	r3, r0
 80024a0:	460c      	mov	r4, r1
 80024a2:	ec44 3b17 	vmov	d7, r3, r4
}
 80024a6:	eeb0 0a47 	vmov.f32	s0, s14
 80024aa:	eef0 0a67 	vmov.f32	s1, s15
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	ecbd 8b02 	vpop	{d8}
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	54442d18 	.word	0x54442d18
 80024bc:	400921fb 	.word	0x400921fb
 80024c0:	40668000 	.word	0x40668000
 80024c4:	0a5accd5 	.word	0x0a5accd5
 80024c8:	3f0ffb48 	.word	0x3f0ffb48
 80024cc:	9999999a 	.word	0x9999999a
 80024d0:	3fa99999 	.word	0x3fa99999
 80024d4:	47ae147b 	.word	0x47ae147b
 80024d8:	3f947ae1 	.word	0x3f947ae1

080024dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	4b44      	ldr	r3, [pc, #272]	; (8002608 <MX_GPIO_Init+0x12c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a43      	ldr	r2, [pc, #268]	; (8002608 <MX_GPIO_Init+0x12c>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a3c      	ldr	r2, [pc, #240]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a35      	ldr	r2, [pc, #212]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <MX_GPIO_Init+0x12c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <MX_GPIO_Init+0x12c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <MX_GPIO_Init+0x12c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	f44f 7158 	mov.w	r1, #864	; 0x360
 8002568:	4828      	ldr	r0, [pc, #160]	; (800260c <MX_GPIO_Init+0x130>)
 800256a:	f002 fc69 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, rightMotor_M0_Pin|rightMotor_M1_Pin, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	2130      	movs	r1, #48	; 0x30
 8002572:	4827      	ldr	r0, [pc, #156]	; (8002610 <MX_GPIO_Init+0x134>)
 8002574:	f002 fc64 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <MX_GPIO_Init+0x138>)
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	4822      	ldr	r0, [pc, #136]	; (8002618 <MX_GPIO_Init+0x13c>)
 800258e:	f002 f9f3 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin;
 8002592:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4818      	ldr	r0, [pc, #96]	; (800260c <MX_GPIO_Init+0x130>)
 80025ac:	f002 f9e4 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt_Pin;
 80025b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <MX_GPIO_Init+0x140>)
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4811      	ldr	r0, [pc, #68]	; (800260c <MX_GPIO_Init+0x130>)
 80025c6:	f002 f9d7 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = rightMotor_M0_Pin|rightMotor_M1_Pin;
 80025ca:	2330      	movs	r3, #48	; 0x30
 80025cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <MX_GPIO_Init+0x134>)
 80025e2:	f002 f9c9 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_GPIO_Init+0x134>)
 80025fa:	f002 f9bd 	bl	8004978 <HAL_GPIO_Init>

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	10210000 	.word	0x10210000
 8002618:	40020800 	.word	0x40020800
 800261c:	10110000 	.word	0x10110000

08002620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <MX_I2C1_Init+0x50>)
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <MX_I2C1_Init+0x54>)
 8002628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_I2C1_Init+0x50>)
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <MX_I2C1_Init+0x58>)
 800262e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MX_I2C1_Init+0x50>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_I2C1_Init+0x50>)
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_I2C1_Init+0x50>)
 800263e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <MX_I2C1_Init+0x50>)
 8002646:	2200      	movs	r2, #0
 8002648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_I2C1_Init+0x50>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <MX_I2C1_Init+0x50>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_I2C1_Init+0x50>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <MX_I2C1_Init+0x50>)
 800265e:	f002 fc21 	bl	8004ea4 <HAL_I2C_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002668:	f000 f8f2 	bl	8002850 <Error_Handler>
  }

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20004b50 	.word	0x20004b50
 8002674:	40005400 	.word	0x40005400
 8002678:	00061a80 	.word	0x00061a80

0800267c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_I2C_MspInit+0x84>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12c      	bne.n	80026f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_I2C_MspInit+0x88>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_I2C_MspInit+0x88>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_I2C_MspInit+0x88>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c0:	2312      	movs	r3, #18
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026cc:	2304      	movs	r3, #4
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	480c      	ldr	r0, [pc, #48]	; (8002708 <HAL_I2C_MspInit+0x8c>)
 80026d8:	f002 f94e 	bl	8004978 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_I2C_MspInit+0x88>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_I2C_MspInit+0x88>)
 80026e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_I2C_MspInit+0x88>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40005400 	.word	0x40005400
 8002704:	40023800 	.word	0x40023800
 8002708:	40020400 	.word	0x40020400

0800270c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f002 f80e 	bl	8004730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f000 f814 	bl	8002740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002718:	f7ff fee0 	bl	80024dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800271c:	f001 ff6c 	bl	80045f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002720:	f7ff ff7e 	bl	8002620 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002724:	f001 fe5c 	bl	80043e0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002728:	f001 fde4 	bl	80042f4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800272c:	f000 f872 	bl	8002814 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002730:	f005 fbb2 	bl	8007e98 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002734:	f7ff fb00 	bl	8001d38 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002738:	f005 fbe2 	bl	8007f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800273c:	e7fe      	b.n	800273c <main+0x30>
	...

08002740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b094      	sub	sp, #80	; 0x50
 8002744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002746:	f107 0320 	add.w	r3, r7, #32
 800274a:	2230      	movs	r2, #48	; 0x30
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f009 fa01 	bl	800bb56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <SystemClock_Config+0xcc>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <SystemClock_Config+0xcc>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <SystemClock_Config+0xcc>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <SystemClock_Config+0xd0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <SystemClock_Config+0xd0>)
 800278a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <SystemClock_Config+0xd0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800279c:	2302      	movs	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027a4:	2310      	movs	r3, #16
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a8:	2302      	movs	r3, #2
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80027b0:	2310      	movs	r3, #16
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027ba:	2304      	movs	r3, #4
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027be:	2304      	movs	r3, #4
 80027c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c2:	f107 0320 	add.w	r3, r7, #32
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 fb20 	bl	8005e0c <HAL_RCC_OscConfig>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027d2:	f000 f83d 	bl	8002850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d6:	230f      	movs	r3, #15
 80027d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027da:	2302      	movs	r3, #2
 80027dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fd7a 	bl	80062ec <HAL_RCC_ClockConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027fe:	f000 f827 	bl	8002850 <Error_Handler>
  }
}
 8002802:	bf00      	nop
 8002804:	3750      	adds	r7, #80	; 0x50
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000

08002814 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2105      	movs	r1, #5
 800281c:	2028      	movs	r0, #40	; 0x28
 800281e:	f002 f881 	bl	8004924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002822:	2028      	movs	r0, #40	; 0x28
 8002824:	f002 f89a 	bl	800495c <HAL_NVIC_EnableIRQ>
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800283e:	f001 ff99 	bl	8004774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40014400 	.word	0x40014400

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002856:	e7fe      	b.n	8002856 <Error_Handler+0x6>

08002858 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <_out_char+0x1e>
    _putchar(character);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fd1b 	bl	80022c8 <_putchar>
  }
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e002      	b.n	80028b0 <_strnlen_s+0x16>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <_strnlen_s+0x28>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	603a      	str	r2, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f3      	bne.n	80028aa <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1ad3      	subs	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b2f      	cmp	r3, #47	; 0x2f
 80028e2:	d904      	bls.n	80028ee <_is_digit+0x1a>
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b39      	cmp	r3, #57	; 0x39
 80028e8:	d801      	bhi.n	80028ee <_is_digit+0x1a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <_is_digit+0x1c>
 80028ee:	2300      	movs	r3, #0
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800290e:	e00e      	b.n	800292e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4618      	mov	r0, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6011      	str	r1, [r2, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4403      	add	r3, r0
 800292a:	3b30      	subs	r3, #48	; 0x30
 800292c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ffcd 	bl	80028d4 <_is_digit>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e7      	bne.n	8002910 <_atoi+0xe>
  }
  return i;
 8002940:	68fb      	ldr	r3, [r7, #12]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d125      	bne.n	80029b2 <_out_rev+0x68>
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d120      	bne.n	80029b2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e00a      	b.n	800298c <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	1c53      	adds	r3, r2, #1
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	68fc      	ldr	r4, [r7, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	2020      	movs	r0, #32
 8002984:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	429a      	cmp	r2, r3
 8002992:	d3f0      	bcc.n	8002976 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002994:	e00d      	b.n	80029b2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	3b01      	subs	r3, #1
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	4413      	add	r3, r2
 80029a2:	7818      	ldrb	r0, [r3, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	1c53      	adds	r3, r2, #1
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	68fc      	ldr	r4, [r7, #12]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	47a0      	blx	r4
  while (len) {
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ee      	bne.n	8002996 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80029c2:	e007      	b.n	80029d4 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	1c53      	adds	r3, r2, #1
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	68fc      	ldr	r4, [r7, #12]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	2020      	movs	r0, #32
 80029d2:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029dc:	429a      	cmp	r2, r3
 80029de:	d8f1      	bhi.n	80029c4 <_out_rev+0x7a>
    }
  }

  return idx;
 80029e0:	687b      	ldr	r3, [r7, #4]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}

080029ea <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b088      	sub	sp, #32
 80029ee:	af04      	add	r7, sp, #16
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d136      	bne.n	8002a70 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d018      	beq.n	8002a3a <_ntoa_format+0x50>
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d013      	beq.n	8002a3a <_ntoa_format+0x50>
 8002a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <_ntoa_format+0x3a>
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <_ntoa_format+0x50>
      width--;
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	3b01      	subs	r3, #1
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a2a:	e006      	b.n	8002a3a <_ntoa_format+0x50>
      buf[len++] = '0';
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4413      	add	r3, r2
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d20a      	bcs.n	8002a58 <_ntoa_format+0x6e>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b1f      	cmp	r3, #31
 8002a46:	d9f1      	bls.n	8002a2c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a48:	e006      	b.n	8002a58 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	61fa      	str	r2, [r7, #28]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	2230      	movs	r2, #48	; 0x30
 8002a56:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <_ntoa_format+0x86>
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d202      	bcs.n	8002a70 <_ntoa_format+0x86>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b1f      	cmp	r3, #31
 8002a6e:	d9ec      	bls.n	8002a4a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d058      	beq.n	8002b2c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <_ntoa_format+0xc8>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <_ntoa_format+0xc8>
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d003      	beq.n	8002a9a <_ntoa_format+0xb0>
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d10b      	bne.n	8002ab2 <_ntoa_format+0xc8>
      len--;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <_ntoa_format+0xc8>
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d102      	bne.n	8002ab2 <_ntoa_format+0xc8>
        len--;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d10f      	bne.n	8002ad8 <_ntoa_format+0xee>
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <_ntoa_format+0xee>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2b1f      	cmp	r3, #31
 8002ac6:	d807      	bhi.n	8002ad8 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2278      	movs	r2, #120	; 0x78
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e01f      	b.n	8002b18 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d10f      	bne.n	8002afe <_ntoa_format+0x114>
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <_ntoa_format+0x114>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b1f      	cmp	r3, #31
 8002aec:	d807      	bhi.n	8002afe <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	61fa      	str	r2, [r7, #28]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4413      	add	r3, r2
 8002af8:	2258      	movs	r2, #88	; 0x58
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e00c      	b.n	8002b18 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d109      	bne.n	8002b18 <_ntoa_format+0x12e>
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b1f      	cmp	r3, #31
 8002b08:	d806      	bhi.n	8002b18 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	61fa      	str	r2, [r7, #28]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	2262      	movs	r2, #98	; 0x62
 8002b16:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b1f      	cmp	r3, #31
 8002b1c:	d806      	bhi.n	8002b2c <_ntoa_format+0x142>
      buf[len++] = '0';
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	61fa      	str	r2, [r7, #28]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	2230      	movs	r2, #48	; 0x30
 8002b2a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b1f      	cmp	r3, #31
 8002b30:	d824      	bhi.n	8002b7c <_ntoa_format+0x192>
    if (negative) {
 8002b32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <_ntoa_format+0x160>
      buf[len++] = '-';
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	61fa      	str	r2, [r7, #28]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	222d      	movs	r2, #45	; 0x2d
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e018      	b.n	8002b7c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	61fa      	str	r2, [r7, #28]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	222b      	movs	r2, #43	; 0x2b
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e00b      	b.n	8002b7c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	61fa      	str	r2, [r7, #28]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	2220      	movs	r2, #32
 8002b7a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	9303      	str	r3, [sp, #12]
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fed9 	bl	800294a <_out_rev>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b096      	sub	sp, #88	; 0x58
 8002ba6:	af08      	add	r7, sp, #32
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	f023 0310 	bic.w	r3, r3, #16
 8002bc0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <_ntoa_long+0x30>
 8002bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d033      	beq.n	8002c3a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8002bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bdc:	fb01 f202 	mul.w	r2, r1, r2
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	d804      	bhi.n	8002bf8 <_ntoa_long+0x56>
 8002bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bf2:	3330      	adds	r3, #48	; 0x30
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	e00d      	b.n	8002c14 <_ntoa_long+0x72>
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <_ntoa_long+0x64>
 8002c02:	2241      	movs	r2, #65	; 0x41
 8002c04:	e000      	b.n	8002c08 <_ntoa_long+0x66>
 8002c06:	2261      	movs	r2, #97	; 0x61
 8002c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3b0a      	subs	r3, #10
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	1c59      	adds	r1, r3, #1
 8002c18:	6379      	str	r1, [r7, #52]	; 0x34
 8002c1a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002c1e:	440b      	add	r3, r1
 8002c20:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002c24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <_ntoa_long+0x98>
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	2b1f      	cmp	r3, #31
 8002c38:	d9cb      	bls.n	8002bd2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	9306      	str	r3, [sp, #24]
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c40:	9305      	str	r3, [sp, #20]
 8002c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c44:	9304      	str	r3, [sp, #16]
 8002c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c48:	9303      	str	r3, [sp, #12]
 8002c4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002c4e:	9302      	str	r3, [sp, #8]
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fec2 	bl	80029ea <_ntoa_format>
 8002c66:	4603      	mov	r3, r0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3738      	adds	r7, #56	; 0x38
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b097      	sub	sp, #92	; 0x5c
 8002c74:	af08      	add	r7, sp, #32
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002c82:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002c86:	4323      	orrs	r3, r4
 8002c88:	d103      	bne.n	8002c92 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8c:	f023 0310 	bic.w	r3, r3, #16
 8002c90:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <_ntoa_long_long+0x34>
 8002c9c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	d039      	beq.n	8002d18 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8002ca4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ca8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cac:	f7fd ff54 	bl	8000b58 <__aeabi_uldivmod>
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d804      	bhi.n	8002cca <_ntoa_long_long+0x5a>
 8002cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc4:	3330      	adds	r3, #48	; 0x30
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	e00d      	b.n	8002ce6 <_ntoa_long_long+0x76>
 8002cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <_ntoa_long_long+0x68>
 8002cd4:	2241      	movs	r2, #65	; 0x41
 8002cd6:	e000      	b.n	8002cda <_ntoa_long_long+0x6a>
 8002cd8:	2261      	movs	r2, #97	; 0x61
 8002cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cde:	4413      	add	r3, r2
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	3b0a      	subs	r3, #10
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	1c59      	adds	r1, r3, #1
 8002cea:	6379      	str	r1, [r7, #52]	; 0x34
 8002cec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002cfe:	f7fd ff2b 	bl	8000b58 <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002d0a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002d0e:	4323      	orrs	r3, r4
 8002d10:	d002      	beq.n	8002d18 <_ntoa_long_long+0xa8>
 8002d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d14:	2b1f      	cmp	r3, #31
 8002d16:	d9c5      	bls.n	8002ca4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d1c:	9206      	str	r2, [sp, #24]
 8002d1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002d20:	9205      	str	r2, [sp, #20]
 8002d22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d24:	9204      	str	r2, [sp, #16]
 8002d26:	9303      	str	r3, [sp, #12]
 8002d28:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fe53 	bl	80029ea <_ntoa_format>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	373c      	adds	r7, #60	; 0x3c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd90      	pop	{r4, r7, pc}
	...

08002d50 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b09d      	sub	sp, #116	; 0x74
 8002d54:	af04      	add	r7, sp, #16
 8002d56:	6178      	str	r0, [r7, #20]
 8002d58:	6139      	str	r1, [r7, #16]
 8002d5a:	60fa      	str	r2, [r7, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d7a:	f7fd fe5d 	bl	8000a38 <__aeabi_dcmpeq>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10f      	bne.n	8002da4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d86:	9303      	str	r3, [sp, #12]
 8002d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	4baf      	ldr	r3, [pc, #700]	; (8003050 <_ftoa+0x300>)
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6939      	ldr	r1, [r7, #16]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7ff fdd5 	bl	800294a <_out_rev>
 8002da0:	4603      	mov	r3, r0
 8002da2:	e237      	b.n	8003214 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db0:	f7fd fe4c 	bl	8000a4c <__aeabi_dcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00f      	beq.n	8002dda <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	4ba3      	ldr	r3, [pc, #652]	; (8003054 <_ftoa+0x304>)
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6939      	ldr	r1, [r7, #16]
 8002dd0:	6978      	ldr	r0, [r7, #20]
 8002dd2:	f7ff fdba 	bl	800294a <_out_rev>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	e21c      	b.n	8003214 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8002dda:	f04f 32ff 	mov.w	r2, #4294967295
 8002dde:	4b9e      	ldr	r3, [pc, #632]	; (8003058 <_ftoa+0x308>)
 8002de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002de4:	f7fd fe50 	bl	8000a88 <__aeabi_dcmpgt>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d01d      	beq.n	8002e2a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <_ftoa+0xac>
 8002df8:	4b98      	ldr	r3, [pc, #608]	; (800305c <_ftoa+0x30c>)
 8002dfa:	e000      	b.n	8002dfe <_ftoa+0xae>
 8002dfc:	4b98      	ldr	r3, [pc, #608]	; (8003060 <_ftoa+0x310>)
 8002dfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e00:	f002 0204 	and.w	r2, r2, #4
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d001      	beq.n	8002e0c <_ftoa+0xbc>
 8002e08:	2204      	movs	r2, #4
 8002e0a:	e000      	b.n	8002e0e <_ftoa+0xbe>
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002e10:	9103      	str	r1, [sp, #12]
 8002e12:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e14:	9102      	str	r1, [sp, #8]
 8002e16:	9201      	str	r2, [sp, #4]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	6939      	ldr	r1, [r7, #16]
 8002e20:	6978      	ldr	r0, [r7, #20]
 8002e22:	f7ff fd92 	bl	800294a <_out_rev>
 8002e26:	4603      	mov	r3, r0
 8002e28:	e1f4      	b.n	8003214 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002e2a:	a385      	add	r3, pc, #532	; (adr r3, 8003040 <_ftoa+0x2f0>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e34:	f7fd fe28 	bl	8000a88 <__aeabi_dcmpgt>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <_ftoa+0x102>
 8002e3e:	a382      	add	r3, pc, #520	; (adr r3, 8003048 <_ftoa+0x2f8>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e48:	f7fd fe00 	bl	8000a4c <__aeabi_dcmplt>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00f      	beq.n	8002e72 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e54:	9302      	str	r3, [sp, #8]
 8002e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	ed97 0b00 	vldr	d0, [r7]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	6939      	ldr	r1, [r7, #16]
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f000 f9dd 	bl	8003228 <_etoa>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	e1d0      	b.n	8003214 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e84:	f7fd fde2 	bl	8000a4c <__aeabi_dcmplt>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <_ftoa+0x15c>
    negative = true;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	f7fd f9aa 	bl	80001f8 <__aeabi_dsub>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002eba:	e00b      	b.n	8002ed4 <_ftoa+0x184>
    buf[len++] = '0';
 8002ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ec2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ec6:	4413      	add	r3, r2
 8002ec8:	2230      	movs	r2, #48	; 0x30
 8002eca:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed6:	2b1f      	cmp	r3, #31
 8002ed8:	d802      	bhi.n	8002ee0 <_ftoa+0x190>
 8002eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	d8ed      	bhi.n	8002ebc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ee4:	f7fd fdf0 	bl	8000ac8 <__aeabi_d2iz>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002eec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002eee:	f7fd fad1 	bl	8000494 <__aeabi_i2d>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002efe:	f7fd f97b 	bl	80001f8 <__aeabi_dsub>
 8002f02:	4603      	mov	r3, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	4618      	mov	r0, r3
 8002f08:	4621      	mov	r1, r4
 8002f0a:	4a56      	ldr	r2, [pc, #344]	; (8003064 <_ftoa+0x314>)
 8002f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4623      	mov	r3, r4
 8002f1a:	f7fd fb25 	bl	8000568 <__aeabi_dmul>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460c      	mov	r4, r1
 8002f22:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002f26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f2a:	f7fd fdf5 	bl	8000b18 <__aeabi_d2uiz>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002f32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f34:	f7fd fa9e 	bl	8000474 <__aeabi_ui2d>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4623      	mov	r3, r4
 8002f40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f44:	f7fd f958 	bl	80001f8 <__aeabi_dsub>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	4b44      	ldr	r3, [pc, #272]	; (8003068 <_ftoa+0x318>)
 8002f56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f5a:	f7fd fd95 	bl	8000a88 <__aeabi_dcmpgt>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d018      	beq.n	8002f96 <_ftoa+0x246>
    ++frac;
 8002f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f66:	3301      	adds	r3, #1
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002f6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f6c:	f7fd fa82 	bl	8000474 <__aeabi_ui2d>
 8002f70:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <_ftoa+0x314>)
 8002f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	f7fd fd78 	bl	8000a74 <__aeabi_dcmpge>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01a      	beq.n	8002fc0 <_ftoa+0x270>
      frac = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f90:	3301      	adds	r3, #1
 8002f92:	657b      	str	r3, [r7, #84]	; 0x54
 8002f94:	e014      	b.n	8002fc0 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <_ftoa+0x318>)
 8002f9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002fa0:	f7fd fd54 	bl	8000a4c <__aeabi_dcmplt>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <_ftoa+0x26a>
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d136      	bne.n	8003034 <_ftoa+0x2e4>
    diff = value - (double)whole;
 8002fc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002fc8:	f7fd fa64 	bl	8000494 <__aeabi_i2d>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fd8:	f7fd f90e 	bl	80001f8 <__aeabi_dsub>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <_ftoa+0x318>)
 8002fee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002ff2:	f7fd fd2b 	bl	8000a4c <__aeabi_dcmplt>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <_ftoa+0x2b0>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	461c      	mov	r4, r3
 8003000:	b2e3      	uxtb	r3, r4
 8003002:	f083 0301 	eor.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <_ftoa+0x2d0>
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <_ftoa+0x318>)
 8003012:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003016:	f7fd fd37 	bl	8000a88 <__aeabi_dcmpgt>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d069      	beq.n	80030f4 <_ftoa+0x3a4>
 8003020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8087 	beq.w	800313a <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800302c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302e:	3301      	adds	r3, #1
 8003030:	657b      	str	r3, [r7, #84]	; 0x54
 8003032:	e082      	b.n	800313a <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 8003034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003038:	e039      	b.n	80030ae <_ftoa+0x35e>
 800303a:	bf00      	nop
 800303c:	f3af 8000 	nop.w
 8003040:	00000000 	.word	0x00000000
 8003044:	41cdcd65 	.word	0x41cdcd65
 8003048:	00000000 	.word	0x00000000
 800304c:	c1cdcd65 	.word	0xc1cdcd65
 8003050:	0800dc20 	.word	0x0800dc20
 8003054:	0800dc24 	.word	0x0800dc24
 8003058:	7fefffff 	.word	0x7fefffff
 800305c:	0800dc2c 	.word	0x0800dc2c
 8003060:	0800dc34 	.word	0x0800dc34
 8003064:	0800dd50 	.word	0x0800dd50
 8003068:	3fe00000 	.word	0x3fe00000
      --count;
 800306c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306e:	3b01      	subs	r3, #1
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003074:	4b69      	ldr	r3, [pc, #420]	; (800321c <_ftoa+0x4cc>)
 8003076:	fba3 2301 	umull	r2, r3, r3, r1
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	1aca      	subs	r2, r1, r3
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308a:	1c59      	adds	r1, r3, #1
 800308c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800308e:	3230      	adds	r2, #48	; 0x30
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003096:	440b      	add	r3, r1
 8003098:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309e:	4a5f      	ldr	r2, [pc, #380]	; (800321c <_ftoa+0x4cc>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	653b      	str	r3, [r7, #80]	; 0x50
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b0:	2b1f      	cmp	r3, #31
 80030b2:	d9db      	bls.n	800306c <_ftoa+0x31c>
 80030b4:	e00a      	b.n	80030cc <_ftoa+0x37c>
        break;
 80030b6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80030b8:	e008      	b.n	80030cc <_ftoa+0x37c>
      buf[len++] = '0';
 80030ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030c4:	4413      	add	r3, r2
 80030c6:	2230      	movs	r2, #48	; 0x30
 80030c8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80030cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ce:	2b1f      	cmp	r3, #31
 80030d0:	d804      	bhi.n	80030dc <_ftoa+0x38c>
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ee      	bne.n	80030ba <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	2b1f      	cmp	r3, #31
 80030e0:	d82b      	bhi.n	800313a <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 80030e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030ec:	4413      	add	r3, r2
 80030ee:	222e      	movs	r2, #46	; 0x2e
 80030f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030f4:	e021      	b.n	800313a <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 80030f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030f8:	4b49      	ldr	r3, [pc, #292]	; (8003220 <_ftoa+0x4d0>)
 80030fa:	fb83 1302 	smull	r1, r3, r3, r2
 80030fe:	1099      	asrs	r1, r3, #2
 8003100:	17d3      	asrs	r3, r2, #31
 8003102:	1ac9      	subs	r1, r1, r3
 8003104:	460b      	mov	r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	1ad1      	subs	r1, r2, r3
 800310e:	b2ca      	uxtb	r2, r1
 8003110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003116:	3230      	adds	r2, #48	; 0x30
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800311e:	440b      	add	r3, r1
 8003120:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003126:	4a3e      	ldr	r2, [pc, #248]	; (8003220 <_ftoa+0x4d0>)
 8003128:	fb82 1203 	smull	r1, r2, r2, r3
 800312c:	1092      	asrs	r2, r2, #2
 800312e:	17db      	asrs	r3, r3, #31
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
 8003134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313c:	2b1f      	cmp	r3, #31
 800313e:	d9da      	bls.n	80030f6 <_ftoa+0x3a6>
 8003140:	e000      	b.n	8003144 <_ftoa+0x3f4>
      break;
 8003142:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d124      	bne.n	8003198 <_ftoa+0x448>
 800314e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <_ftoa+0x43a>
 800315e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <_ftoa+0x420>
 8003166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <_ftoa+0x43a>
      width--;
 8003170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003172:	3b01      	subs	r3, #1
 8003174:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003176:	e008      	b.n	800318a <_ftoa+0x43a>
      buf[len++] = '0';
 8003178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800317e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003182:	4413      	add	r3, r2
 8003184:	2230      	movs	r2, #48	; 0x30
 8003186:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800318a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800318c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318e:	429a      	cmp	r2, r3
 8003190:	d202      	bcs.n	8003198 <_ftoa+0x448>
 8003192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003194:	2b1f      	cmp	r3, #31
 8003196:	d9ef      	bls.n	8003178 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319a:	2b1f      	cmp	r3, #31
 800319c:	d82a      	bhi.n	80031f4 <_ftoa+0x4a4>
    if (negative) {
 800319e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <_ftoa+0x46a>
      buf[len++] = '-';
 80031a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031b0:	4413      	add	r3, r2
 80031b2:	222d      	movs	r2, #45	; 0x2d
 80031b4:	f803 2c48 	strb.w	r2, [r3, #-72]
 80031b8:	e01c      	b.n	80031f4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80031ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80031c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ce:	4413      	add	r3, r2
 80031d0:	222b      	movs	r2, #43	; 0x2b
 80031d2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80031d6:	e00d      	b.n	80031f4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 80031d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <_ftoa+0x4a4>
      buf[len++] = ' ';
 80031e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ec:	4413      	add	r3, r2
 80031ee:	2220      	movs	r2, #32
 80031f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80031f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031f6:	9303      	str	r3, [sp, #12]
 80031f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	f107 0318 	add.w	r3, r7, #24
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6939      	ldr	r1, [r7, #16]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7ff fb9c 	bl	800294a <_out_rev>
 8003212:	4603      	mov	r3, r0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3764      	adds	r7, #100	; 0x64
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	cccccccd 	.word	0xcccccccd
 8003220:	66666667 	.word	0x66666667
 8003224:	00000000 	.word	0x00000000

08003228 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	b09d      	sub	sp, #116	; 0x74
 800322e:	af06      	add	r7, sp, #24
 8003230:	61f8      	str	r0, [r7, #28]
 8003232:	61b9      	str	r1, [r7, #24]
 8003234:	617a      	str	r2, [r7, #20]
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800323c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003244:	f7fd fbf8 	bl	8000a38 <__aeabi_dcmpeq>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d014      	beq.n	8003278 <_etoa+0x50>
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	4bc9      	ldr	r3, [pc, #804]	; (8003578 <_etoa+0x350>)
 8003254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003258:	f7fd fc16 	bl	8000a88 <__aeabi_dcmpgt>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <_etoa+0x50>
 8003262:	f04f 32ff 	mov.w	r2, #4294967295
 8003266:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800326a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326e:	f7fd fbed 	bl	8000a4c <__aeabi_dcmplt>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800327c:	9302      	str	r3, [sp, #8]
 800327e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	ed97 0b02 	vldr	d0, [r7, #8]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	69f8      	ldr	r0, [r7, #28]
 8003296:	f7ff fd5b 	bl	8002d50 <_ftoa>
 800329a:	4603      	mov	r3, r0
 800329c:	e24f      	b.n	800373e <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800329e:	2301      	movs	r3, #1
 80032a0:	461c      	mov	r4, r3
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ae:	f7fd fbcd 	bl	8000a4c <__aeabi_dcmplt>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <_etoa+0x94>
 80032b8:	2300      	movs	r3, #0
 80032ba:	461c      	mov	r4, r3
 80032bc:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80032c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <_etoa+0xac>
    value = -value;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80032d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80032e0:	2306      	movs	r3, #6
 80032e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80032e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032ea:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80032ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f04f 0400 	mov.w	r4, #0
 80032fa:	0d13      	lsrs	r3, r2, #20
 80032fc:	2400      	movs	r4, #0
 80032fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003302:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003308:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	4a9a      	ldr	r2, [pc, #616]	; (800357c <_etoa+0x354>)
 8003312:	ea03 0801 	and.w	r8, r3, r1
 8003316:	ea04 0902 	and.w	r9, r4, r2
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	4a98      	ldr	r2, [pc, #608]	; (8003580 <_etoa+0x358>)
 8003320:	ea48 0301 	orr.w	r3, r8, r1
 8003324:	ea49 0402 	orr.w	r4, r9, r2
 8003328:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800332c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800332e:	f7fd f8b1 	bl	8000494 <__aeabi_i2d>
 8003332:	a385      	add	r3, pc, #532	; (adr r3, 8003548 <_etoa+0x320>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd f916 	bl	8000568 <__aeabi_dmul>
 800333c:	4603      	mov	r3, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4618      	mov	r0, r3
 8003342:	4621      	mov	r1, r4
 8003344:	a382      	add	r3, pc, #520	; (adr r3, 8003550 <_etoa+0x328>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fc ff57 	bl	80001fc <__adddf3>
 800334e:	4603      	mov	r3, r0
 8003350:	460c      	mov	r4, r1
 8003352:	4698      	mov	r8, r3
 8003354:	46a1      	mov	r9, r4
 8003356:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	4b89      	ldr	r3, [pc, #548]	; (8003584 <_etoa+0x35c>)
 8003360:	f7fc ff4a 	bl	80001f8 <__aeabi_dsub>
 8003364:	4603      	mov	r3, r0
 8003366:	460c      	mov	r4, r1
 8003368:	4618      	mov	r0, r3
 800336a:	4621      	mov	r1, r4
 800336c:	a37a      	add	r3, pc, #488	; (adr r3, 8003558 <_etoa+0x330>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fd f8f9 	bl	8000568 <__aeabi_dmul>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	4640      	mov	r0, r8
 8003380:	4649      	mov	r1, r9
 8003382:	f7fc ff3b 	bl	80001fc <__adddf3>
 8003386:	4603      	mov	r3, r0
 8003388:	460c      	mov	r4, r1
 800338a:	4618      	mov	r0, r3
 800338c:	4621      	mov	r1, r4
 800338e:	f7fd fb9b 	bl	8000ac8 <__aeabi_d2iz>
 8003392:	4603      	mov	r3, r0
 8003394:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003396:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003398:	f7fd f87c 	bl	8000494 <__aeabi_i2d>
 800339c:	a370      	add	r3, pc, #448	; (adr r3, 8003560 <_etoa+0x338>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f7fd f8e1 	bl	8000568 <__aeabi_dmul>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	4618      	mov	r0, r3
 80033ac:	4621      	mov	r1, r4
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	4b75      	ldr	r3, [pc, #468]	; (8003588 <_etoa+0x360>)
 80033b4:	f7fc ff22 	bl	80001fc <__adddf3>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	4618      	mov	r0, r3
 80033be:	4621      	mov	r1, r4
 80033c0:	f7fd fb82 	bl	8000ac8 <__aeabi_d2iz>
 80033c4:	4603      	mov	r3, r0
 80033c6:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80033c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80033ca:	f7fd f863 	bl	8000494 <__aeabi_i2d>
 80033ce:	a366      	add	r3, pc, #408	; (adr r3, 8003568 <_etoa+0x340>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fd f8c8 	bl	8000568 <__aeabi_dmul>
 80033d8:	4603      	mov	r3, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	4698      	mov	r8, r3
 80033de:	46a1      	mov	r9, r4
 80033e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80033e2:	f7fd f857 	bl	8000494 <__aeabi_i2d>
 80033e6:	a362      	add	r3, pc, #392	; (adr r3, 8003570 <_etoa+0x348>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fd f8bc 	bl	8000568 <__aeabi_dmul>
 80033f0:	4603      	mov	r3, r0
 80033f2:	460c      	mov	r4, r1
 80033f4:	461a      	mov	r2, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	4640      	mov	r0, r8
 80033fa:	4649      	mov	r1, r9
 80033fc:	f7fc fefc 	bl	80001f8 <__aeabi_dsub>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800340c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003410:	f7fd f8aa 	bl	8000568 <__aeabi_dmul>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003422:	4619      	mov	r1, r3
 8003424:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	f04f 0400 	mov.w	r4, #0
 8003430:	050c      	lsls	r4, r1, #20
 8003432:	2300      	movs	r3, #0
 8003434:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800343c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	f7fc feda 	bl	80001fc <__adddf3>
 8003448:	4603      	mov	r3, r0
 800344a:	460c      	mov	r4, r1
 800344c:	469a      	mov	sl, r3
 800344e:	46a3      	mov	fp, r4
 8003450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800345c:	f7fc fecc 	bl	80001f8 <__aeabi_dsub>
 8003460:	4603      	mov	r3, r0
 8003462:	460c      	mov	r4, r1
 8003464:	e9c7 3400 	strd	r3, r4, [r7]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	4b47      	ldr	r3, [pc, #284]	; (800358c <_etoa+0x364>)
 800346e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003472:	f7fd f9a3 	bl	80007bc <__aeabi_ddiv>
 8003476:	4603      	mov	r3, r0
 8003478:	460c      	mov	r4, r1
 800347a:	4618      	mov	r0, r3
 800347c:	4621      	mov	r1, r4
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <_etoa+0x368>)
 8003484:	f7fc feba 	bl	80001fc <__adddf3>
 8003488:	4603      	mov	r3, r0
 800348a:	460c      	mov	r4, r1
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003494:	f7fd f992 	bl	80007bc <__aeabi_ddiv>
 8003498:	4603      	mov	r3, r0
 800349a:	460c      	mov	r4, r1
 800349c:	4618      	mov	r0, r3
 800349e:	4621      	mov	r1, r4
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <_etoa+0x36c>)
 80034a6:	f7fc fea9 	bl	80001fc <__adddf3>
 80034aa:	4603      	mov	r3, r0
 80034ac:	460c      	mov	r4, r1
 80034ae:	461a      	mov	r2, r3
 80034b0:	4623      	mov	r3, r4
 80034b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80034b6:	f7fd f981 	bl	80007bc <__aeabi_ddiv>
 80034ba:	4603      	mov	r3, r0
 80034bc:	460c      	mov	r4, r1
 80034be:	461a      	mov	r2, r3
 80034c0:	4623      	mov	r3, r4
 80034c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034c6:	f7fc fe99 	bl	80001fc <__adddf3>
 80034ca:	4603      	mov	r3, r0
 80034cc:	460c      	mov	r4, r1
 80034ce:	461a      	mov	r2, r3
 80034d0:	4623      	mov	r3, r4
 80034d2:	4650      	mov	r0, sl
 80034d4:	4659      	mov	r1, fp
 80034d6:	f7fd f971 	bl	80007bc <__aeabi_ddiv>
 80034da:	4603      	mov	r3, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	4618      	mov	r0, r3
 80034e0:	4621      	mov	r1, r4
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <_etoa+0x358>)
 80034e8:	f7fc fe88 	bl	80001fc <__adddf3>
 80034ec:	4603      	mov	r3, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	461a      	mov	r2, r3
 80034f2:	4623      	mov	r3, r4
 80034f4:	4640      	mov	r0, r8
 80034f6:	4649      	mov	r1, r9
 80034f8:	f7fd f836 	bl	8000568 <__aeabi_dmul>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8003504:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003510:	f7fd fa9c 	bl	8000a4c <__aeabi_dcmplt>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <_etoa+0x30e>
    expval--;
 800351a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351c:	3b01      	subs	r3, #1
 800351e:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003520:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <_etoa+0x368>)
 800352a:	f7fd f947 	bl	80007bc <__aeabi_ddiv>
 800352e:	4603      	mov	r3, r0
 8003530:	460c      	mov	r4, r1
 8003532:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2b63      	cmp	r3, #99	; 0x63
 800353a:	dc2d      	bgt.n	8003598 <_etoa+0x370>
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003542:	db29      	blt.n	8003598 <_etoa+0x370>
 8003544:	2304      	movs	r3, #4
 8003546:	e028      	b.n	800359a <_etoa+0x372>
 8003548:	509f79fb 	.word	0x509f79fb
 800354c:	3fd34413 	.word	0x3fd34413
 8003550:	8b60c8b3 	.word	0x8b60c8b3
 8003554:	3fc68a28 	.word	0x3fc68a28
 8003558:	636f4361 	.word	0x636f4361
 800355c:	3fd287a7 	.word	0x3fd287a7
 8003560:	0979a371 	.word	0x0979a371
 8003564:	400a934f 	.word	0x400a934f
 8003568:	bbb55516 	.word	0xbbb55516
 800356c:	40026bb1 	.word	0x40026bb1
 8003570:	fefa39ef 	.word	0xfefa39ef
 8003574:	3fe62e42 	.word	0x3fe62e42
 8003578:	7fefffff 	.word	0x7fefffff
 800357c:	000fffff 	.word	0x000fffff
 8003580:	3ff00000 	.word	0x3ff00000
 8003584:	3ff80000 	.word	0x3ff80000
 8003588:	3fe00000 	.word	0x3fe00000
 800358c:	402c0000 	.word	0x402c0000
 8003590:	40240000 	.word	0x40240000
 8003594:	40180000 	.word	0x40180000
 8003598:	2305      	movs	r3, #5
 800359a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800359c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d03d      	beq.n	8003624 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80035a8:	a367      	add	r3, pc, #412	; (adr r3, 8003748 <_etoa+0x520>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035b2:	f7fd fa5f 	bl	8000a74 <__aeabi_dcmpge>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d024      	beq.n	8003606 <_etoa+0x3de>
 80035bc:	a364      	add	r3, pc, #400	; (adr r3, 8003750 <_etoa+0x528>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035c6:	f7fd fa41 	bl	8000a4c <__aeabi_dcmplt>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <_etoa+0x3de>
      if ((int)prec > expval) {
 80035d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035d6:	429a      	cmp	r2, r3
 80035d8:	da07      	bge.n	80035ea <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 80035da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035e8:	e002      	b.n	80035f0 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80035f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	657b      	str	r3, [r7, #84]	; 0x54
 8003604:	e00e      	b.n	8003624 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <_etoa+0x3fc>
 800360e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <_etoa+0x3fc>
        --prec;
 800361a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361e:	3b01      	subs	r3, #1
 8003620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800362a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	429a      	cmp	r2, r3
 8003632:	d904      	bls.n	800363e <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	e001      	b.n	8003642 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <_etoa+0x430>
 800364e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <_etoa+0x44e>
    value /= conv.F;
 800365e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003662:	461a      	mov	r2, r3
 8003664:	4623      	mov	r3, r4
 8003666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800366a:	f7fd f8a7 	bl	80007bc <__aeabi_ddiv>
 800366e:	4603      	mov	r3, r0
 8003670:	460c      	mov	r4, r1
 8003672:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800367a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <_etoa+0x464>
 8003682:	68bd      	ldr	r5, [r7, #8]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800368a:	e001      	b.n	8003690 <_etoa+0x468>
 800368c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	ec46 5b10 	vmov	d0, r5, r6
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	69f8      	ldr	r0, [r7, #28]
 80036b0:	f7ff fb4e 	bl	8002d50 <_ftoa>
 80036b4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03f      	beq.n	800373c <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80036bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <_etoa+0x4a4>
 80036c8:	2045      	movs	r0, #69	; 0x45
 80036ca:	e000      	b.n	80036ce <_etoa+0x4a6>
 80036cc:	2065      	movs	r0, #101	; 0x65
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	1c53      	adds	r3, r2, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	69fc      	ldr	r4, [r7, #28]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	69b9      	ldr	r1, [r7, #24]
 80036da:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80036dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bfb8      	it	lt
 80036e2:	425b      	neglt	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e8:	0fdb      	lsrs	r3, r3, #31
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036ee:	3a01      	subs	r2, #1
 80036f0:	2105      	movs	r1, #5
 80036f2:	9105      	str	r1, [sp, #20]
 80036f4:	9204      	str	r2, [sp, #16]
 80036f6:	2200      	movs	r2, #0
 80036f8:	9203      	str	r2, [sp, #12]
 80036fa:	220a      	movs	r2, #10
 80036fc:	9202      	str	r2, [sp, #8]
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	9000      	str	r0, [sp, #0]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	69f8      	ldr	r0, [r7, #28]
 800370a:	f7ff fa4a 	bl	8002ba2 <_ntoa_long>
 800370e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00f      	beq.n	800373c <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800371c:	e007      	b.n	800372e <_etoa+0x506>
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	1c53      	adds	r3, r2, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	69fc      	ldr	r4, [r7, #28]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	69b9      	ldr	r1, [r7, #24]
 800372a:	2020      	movs	r0, #32
 800372c:	47a0      	blx	r4
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003738:	429a      	cmp	r2, r3
 800373a:	d8f0      	bhi.n	800371e <_etoa+0x4f6>
    }
  }
  return idx;
 800373c:	697b      	ldr	r3, [r7, #20]
}
 800373e:	4618      	mov	r0, r3
 8003740:	375c      	adds	r7, #92	; 0x5c
 8003742:	46bd      	mov	sp, r7
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003748:	eb1c432d 	.word	0xeb1c432d
 800374c:	3f1a36e2 	.word	0x3f1a36e2
 8003750:	00000000 	.word	0x00000000
 8003754:	412e8480 	.word	0x412e8480

08003758 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b0a0      	sub	sp, #128	; 0x80
 800375c:	af0a      	add	r7, sp, #40	; 0x28
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f040 8492 	bne.w	8004096 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 8003772:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <_vsnprintf+0x29c>)
 8003774:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8003776:	f000 bc8e 	b.w	8004096 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b25      	cmp	r3, #37	; 0x25
 8003780:	d00d      	beq.n	800379e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	7818      	ldrb	r0, [r3, #0]
 8003786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003788:	1c53      	adds	r3, r2, #1
 800378a:	647b      	str	r3, [r7, #68]	; 0x44
 800378c:	68fc      	ldr	r4, [r7, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	47a0      	blx	r4
      format++;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	603b      	str	r3, [r7, #0]
      continue;
 800379a:	f000 bc7c 	b.w	8004096 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3b20      	subs	r3, #32
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d856      	bhi.n	8003860 <_vsnprintf+0x108>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <_vsnprintf+0x60>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	08003839 	.word	0x08003839
 80037bc:	08003861 	.word	0x08003861
 80037c0:	08003861 	.word	0x08003861
 80037c4:	0800384d 	.word	0x0800384d
 80037c8:	08003861 	.word	0x08003861
 80037cc:	08003861 	.word	0x08003861
 80037d0:	08003861 	.word	0x08003861
 80037d4:	08003861 	.word	0x08003861
 80037d8:	08003861 	.word	0x08003861
 80037dc:	08003861 	.word	0x08003861
 80037e0:	08003861 	.word	0x08003861
 80037e4:	08003825 	.word	0x08003825
 80037e8:	08003861 	.word	0x08003861
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003861 	.word	0x08003861
 80037f4:	08003861 	.word	0x08003861
 80037f8:	080037fd 	.word	0x080037fd
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	2301      	movs	r3, #1
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
 800380e:	e02a      	b.n	8003866 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	2301      	movs	r3, #1
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
 8003822:	e020      	b.n	8003866 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	657b      	str	r3, [r7, #84]	; 0x54
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	2301      	movs	r3, #1
 8003834:	64bb      	str	r3, [r7, #72]	; 0x48
 8003836:	e016      	b.n	8003866 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	f043 0308 	orr.w	r3, r3, #8
 800383e:	657b      	str	r3, [r7, #84]	; 0x54
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	2301      	movs	r3, #1
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
 800384a:	e00c      	b.n	8003866 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	f043 0310 	orr.w	r3, r3, #16
 8003852:	657b      	str	r3, [r7, #84]	; 0x54
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	2301      	movs	r3, #1
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
 800385e:	e002      	b.n	8003866 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8003860:	2300      	movs	r3, #0
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
 8003864:	bf00      	nop
      }
    } while (n);
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003868:	2b00      	cmp	r3, #0
 800386a:	d19d      	bne.n	80037a8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff f82d 	bl	80028d4 <_is_digit>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <_vsnprintf+0x134>
      width = _atoi(&format);
 8003880:	463b      	mov	r3, r7
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f83d 	bl	8002902 <_atoi>
 8003888:	6538      	str	r0, [r7, #80]	; 0x50
 800388a:	e018      	b.n	80038be <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b2a      	cmp	r3, #42	; 0x2a
 8003892:	d114      	bne.n	80038be <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8003894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003896:	1d1a      	adds	r2, r3, #4
 8003898:	66ba      	str	r2, [r7, #104]	; 0x68
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da07      	bge.n	80038b4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80038a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	425b      	negs	r3, r3
 80038b0:	653b      	str	r3, [r7, #80]	; 0x50
 80038b2:	e001      	b.n	80038b8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b2e      	cmp	r3, #46	; 0x2e
 80038c8:	d124      	bne.n	8003914 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80038ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fff9 	bl	80028d4 <_is_digit>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80038e8:	463b      	mov	r3, r7
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f809 	bl	8002902 <_atoi>
 80038f0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80038f2:	e00f      	b.n	8003914 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b2a      	cmp	r3, #42	; 0x2a
 80038fa:	d10b      	bne.n	8003914 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80038fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	66ba      	str	r2, [r7, #104]	; 0x68
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800390c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	3b68      	subs	r3, #104	; 0x68
 800391a:	2b12      	cmp	r3, #18
 800391c:	d866      	bhi.n	80039ec <_vsnprintf+0x294>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <_vsnprintf+0x1cc>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003997 	.word	0x08003997
 8003928:	080039ed 	.word	0x080039ed
 800392c:	080039cd 	.word	0x080039cd
 8003930:	080039ed 	.word	0x080039ed
 8003934:	08003971 	.word	0x08003971
 8003938:	080039ed 	.word	0x080039ed
 800393c:	080039ed 	.word	0x080039ed
 8003940:	080039ed 	.word	0x080039ed
 8003944:	080039ed 	.word	0x080039ed
 8003948:	080039ed 	.word	0x080039ed
 800394c:	080039ed 	.word	0x080039ed
 8003950:	080039ed 	.word	0x080039ed
 8003954:	080039bd 	.word	0x080039bd
 8003958:	080039ed 	.word	0x080039ed
 800395c:	080039ed 	.word	0x080039ed
 8003960:	080039ed 	.word	0x080039ed
 8003964:	080039ed 	.word	0x080039ed
 8003968:	080039ed 	.word	0x080039ed
 800396c:	080039dd 	.word	0x080039dd
      case 'l' :
        flags |= FLAGS_LONG;
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003976:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b6c      	cmp	r3, #108	; 0x6c
 8003984:	d134      	bne.n	80039f0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8003986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800398c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	603b      	str	r3, [r7, #0]
        }
        break;
 8003994:	e02c      	b.n	80039f0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b68      	cmp	r3, #104	; 0x68
 80039aa:	d125      	bne.n	80039f8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 80039ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	603b      	str	r3, [r7, #0]
        }
        break;
 80039ba:	e01d      	b.n	80039f8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80039bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	603b      	str	r3, [r7, #0]
        break;
 80039ca:	e016      	b.n	80039fa <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80039cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	603b      	str	r3, [r7, #0]
        break;
 80039da:	e00e      	b.n	80039fa <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80039dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	603b      	str	r3, [r7, #0]
        break;
 80039ea:	e006      	b.n	80039fa <_vsnprintf+0x2a2>
      default :
        break;
 80039ec:	bf00      	nop
 80039ee:	e004      	b.n	80039fa <_vsnprintf+0x2a2>
        break;
 80039f0:	bf00      	nop
 80039f2:	e002      	b.n	80039fa <_vsnprintf+0x2a2>
 80039f4:	08002859 	.word	0x08002859
        break;
 80039f8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	3b25      	subs	r3, #37	; 0x25
 8003a00:	2b53      	cmp	r3, #83	; 0x53
 8003a02:	f200 833b 	bhi.w	800407c <_vsnprintf+0x924>
 8003a06:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <_vsnprintf+0x2b4>)
 8003a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0c:	08004065 	.word	0x08004065
 8003a10:	0800407d 	.word	0x0800407d
 8003a14:	0800407d 	.word	0x0800407d
 8003a18:	0800407d 	.word	0x0800407d
 8003a1c:	0800407d 	.word	0x0800407d
 8003a20:	0800407d 	.word	0x0800407d
 8003a24:	0800407d 	.word	0x0800407d
 8003a28:	0800407d 	.word	0x0800407d
 8003a2c:	0800407d 	.word	0x0800407d
 8003a30:	0800407d 	.word	0x0800407d
 8003a34:	0800407d 	.word	0x0800407d
 8003a38:	0800407d 	.word	0x0800407d
 8003a3c:	0800407d 	.word	0x0800407d
 8003a40:	0800407d 	.word	0x0800407d
 8003a44:	0800407d 	.word	0x0800407d
 8003a48:	0800407d 	.word	0x0800407d
 8003a4c:	0800407d 	.word	0x0800407d
 8003a50:	0800407d 	.word	0x0800407d
 8003a54:	0800407d 	.word	0x0800407d
 8003a58:	0800407d 	.word	0x0800407d
 8003a5c:	0800407d 	.word	0x0800407d
 8003a60:	0800407d 	.word	0x0800407d
 8003a64:	0800407d 	.word	0x0800407d
 8003a68:	0800407d 	.word	0x0800407d
 8003a6c:	0800407d 	.word	0x0800407d
 8003a70:	0800407d 	.word	0x0800407d
 8003a74:	0800407d 	.word	0x0800407d
 8003a78:	0800407d 	.word	0x0800407d
 8003a7c:	0800407d 	.word	0x0800407d
 8003a80:	0800407d 	.word	0x0800407d
 8003a84:	0800407d 	.word	0x0800407d
 8003a88:	0800407d 	.word	0x0800407d
 8003a8c:	08003e35 	.word	0x08003e35
 8003a90:	08003de9 	.word	0x08003de9
 8003a94:	08003e35 	.word	0x08003e35
 8003a98:	0800407d 	.word	0x0800407d
 8003a9c:	0800407d 	.word	0x0800407d
 8003aa0:	0800407d 	.word	0x0800407d
 8003aa4:	0800407d 	.word	0x0800407d
 8003aa8:	0800407d 	.word	0x0800407d
 8003aac:	0800407d 	.word	0x0800407d
 8003ab0:	0800407d 	.word	0x0800407d
 8003ab4:	0800407d 	.word	0x0800407d
 8003ab8:	0800407d 	.word	0x0800407d
 8003abc:	0800407d 	.word	0x0800407d
 8003ac0:	0800407d 	.word	0x0800407d
 8003ac4:	0800407d 	.word	0x0800407d
 8003ac8:	0800407d 	.word	0x0800407d
 8003acc:	0800407d 	.word	0x0800407d
 8003ad0:	0800407d 	.word	0x0800407d
 8003ad4:	0800407d 	.word	0x0800407d
 8003ad8:	08003b5d 	.word	0x08003b5d
 8003adc:	0800407d 	.word	0x0800407d
 8003ae0:	0800407d 	.word	0x0800407d
 8003ae4:	0800407d 	.word	0x0800407d
 8003ae8:	0800407d 	.word	0x0800407d
 8003aec:	0800407d 	.word	0x0800407d
 8003af0:	0800407d 	.word	0x0800407d
 8003af4:	0800407d 	.word	0x0800407d
 8003af8:	0800407d 	.word	0x0800407d
 8003afc:	0800407d 	.word	0x0800407d
 8003b00:	08003b5d 	.word	0x08003b5d
 8003b04:	08003ea1 	.word	0x08003ea1
 8003b08:	08003b5d 	.word	0x08003b5d
 8003b0c:	08003e35 	.word	0x08003e35
 8003b10:	08003de9 	.word	0x08003de9
 8003b14:	08003e35 	.word	0x08003e35
 8003b18:	0800407d 	.word	0x0800407d
 8003b1c:	08003b5d 	.word	0x08003b5d
 8003b20:	0800407d 	.word	0x0800407d
 8003b24:	0800407d 	.word	0x0800407d
 8003b28:	0800407d 	.word	0x0800407d
 8003b2c:	0800407d 	.word	0x0800407d
 8003b30:	0800407d 	.word	0x0800407d
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003fd9 	.word	0x08003fd9
 8003b3c:	0800407d 	.word	0x0800407d
 8003b40:	0800407d 	.word	0x0800407d
 8003b44:	08003f15 	.word	0x08003f15
 8003b48:	0800407d 	.word	0x0800407d
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	0800407d 	.word	0x0800407d
 8003b54:	0800407d 	.word	0x0800407d
 8003b58:	08003b5d 	.word	0x08003b5d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b78      	cmp	r3, #120	; 0x78
 8003b62:	d003      	beq.n	8003b6c <_vsnprintf+0x414>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b58      	cmp	r3, #88	; 0x58
 8003b6a:	d102      	bne.n	8003b72 <_vsnprintf+0x41a>
          base = 16U;
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b70:	e013      	b.n	8003b9a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b6f      	cmp	r3, #111	; 0x6f
 8003b78:	d102      	bne.n	8003b80 <_vsnprintf+0x428>
          base =  8U;
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7e:	e00c      	b.n	8003b9a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b62      	cmp	r3, #98	; 0x62
 8003b86:	d102      	bne.n	8003b8e <_vsnprintf+0x436>
          base =  2U;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8c:	e005      	b.n	8003b9a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8003b8e:	230a      	movs	r3, #10
 8003b90:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b94:	f023 0310 	bic.w	r3, r3, #16
 8003b98:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b58      	cmp	r3, #88	; 0x58
 8003ba0:	d103      	bne.n	8003baa <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	f043 0320 	orr.w	r3, r3, #32
 8003ba8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b69      	cmp	r3, #105	; 0x69
 8003bb0:	d007      	beq.n	8003bc2 <_vsnprintf+0x46a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d003      	beq.n	8003bc2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbc:	f023 030c 	bic.w	r3, r3, #12
 8003bc0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b69      	cmp	r3, #105	; 0x69
 8003bda:	d004      	beq.n	8003be6 <_vsnprintf+0x48e>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b64      	cmp	r3, #100	; 0x64
 8003be2:	f040 808d 	bne.w	8003d00 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02e      	beq.n	8003c4e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bf2:	3307      	adds	r3, #7
 8003bf4:	f023 0307 	bic.w	r3, r3, #7
 8003bf8:	f103 0208 	add.w	r2, r3, #8
 8003bfc:	66ba      	str	r2, [r7, #104]	; 0x68
 8003bfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c02:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f174 0200 	sbcs.w	r2, r4, #0
 8003c10:	da02      	bge.n	8003c18 <_vsnprintf+0x4c0>
 8003c12:	425b      	negs	r3, r3
 8003c14:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	0fdb      	lsrs	r3, r3, #31
 8003c20:	b2d8      	uxtb	r0, r3
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	f04f 0400 	mov.w	r4, #0
 8003c28:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003c2a:	9508      	str	r5, [sp, #32]
 8003c2c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8003c2e:	9507      	str	r5, [sp, #28]
 8003c30:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8003c32:	9506      	str	r5, [sp, #24]
 8003c34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003c38:	9002      	str	r0, [sp, #8]
 8003c3a:	e9cd 1200 	strd	r1, r2, [sp]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff f813 	bl	8002c70 <_ntoa_long_long>
 8003c4a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003c4c:	e0c8      	b.n	8003de0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01e      	beq.n	8003c96 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8003c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	66ba      	str	r2, [r7, #104]	; 0x68
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bfb8      	it	lt
 8003c68:	425b      	neglt	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	0fdb      	lsrs	r3, r3, #31
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c74:	9205      	str	r2, [sp, #20]
 8003c76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c78:	9204      	str	r2, [sp, #16]
 8003c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c7c:	9203      	str	r2, [sp, #12]
 8003c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c80:	9202      	str	r2, [sp, #8]
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	9100      	str	r1, [sp, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7fe ff88 	bl	8002ba2 <_ntoa_long>
 8003c92:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003c94:	e0a4      	b.n	8003de0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <_vsnprintf+0x554>
 8003ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	66ba      	str	r2, [r7, #104]	; 0x68
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e00e      	b.n	8003cca <_vsnprintf+0x572>
 8003cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <_vsnprintf+0x56a>
 8003cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	66ba      	str	r2, [r7, #104]	; 0x68
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b21b      	sxth	r3, r3
 8003cc0:	e003      	b.n	8003cca <_vsnprintf+0x572>
 8003cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfb8      	it	lt
 8003cd2:	425b      	neglt	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	0fdb      	lsrs	r3, r3, #31
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cde:	9205      	str	r2, [sp, #20]
 8003ce0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ce2:	9204      	str	r2, [sp, #16]
 8003ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce6:	9203      	str	r2, [sp, #12]
 8003ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cea:	9202      	str	r2, [sp, #8]
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	9100      	str	r1, [sp, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7fe ff53 	bl	8002ba2 <_ntoa_long>
 8003cfc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003cfe:	e06f      	b.n	8003de0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d020      	beq.n	8003d4c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d0c:	3307      	adds	r3, #7
 8003d0e:	f023 0307 	bic.w	r3, r3, #7
 8003d12:	f103 0208 	add.w	r2, r3, #8
 8003d16:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d1e:	4611      	mov	r1, r2
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003d26:	9008      	str	r0, [sp, #32]
 8003d28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003d2a:	9007      	str	r0, [sp, #28]
 8003d2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003d2e:	9006      	str	r0, [sp, #24]
 8003d30:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8003d34:	2200      	movs	r2, #0
 8003d36:	9202      	str	r2, [sp, #8]
 8003d38:	e9cd 3400 	strd	r3, r4, [sp]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fe ff94 	bl	8002c70 <_ntoa_long_long>
 8003d48:	6478      	str	r0, [r7, #68]	; 0x44
 8003d4a:	e049      	b.n	8003de0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d60:	9205      	str	r2, [sp, #20]
 8003d62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d64:	9204      	str	r2, [sp, #16]
 8003d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d68:	9203      	str	r2, [sp, #12]
 8003d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6c:	9202      	str	r2, [sp, #8]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	9201      	str	r2, [sp, #4]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7fe ff11 	bl	8002ba2 <_ntoa_long>
 8003d80:	6478      	str	r0, [r7, #68]	; 0x44
 8003d82:	e02d      	b.n	8003de0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <_vsnprintf+0x642>
 8003d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e00e      	b.n	8003db8 <_vsnprintf+0x660>
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <_vsnprintf+0x658>
 8003da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	66ba      	str	r2, [r7, #104]	; 0x68
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	e003      	b.n	8003db8 <_vsnprintf+0x660>
 8003db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db2:	1d1a      	adds	r2, r3, #4
 8003db4:	66ba      	str	r2, [r7, #104]	; 0x68
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbc:	9305      	str	r3, [sp, #20]
 8003dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc0:	9304      	str	r3, [sp, #16]
 8003dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc4:	9303      	str	r3, [sp, #12]
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	9302      	str	r3, [sp, #8]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7fe fee2 	bl	8002ba2 <_ntoa_long>
 8003dde:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	603b      	str	r3, [r7, #0]
        break;
 8003de6:	e156      	b.n	8004096 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b46      	cmp	r3, #70	; 0x46
 8003dee:	d103      	bne.n	8003df8 <_vsnprintf+0x6a0>
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	f043 0320 	orr.w	r3, r3, #32
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	f103 0208 	add.w	r2, r3, #8
 8003e04:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e06:	ed93 7b00 	vldr	d7, [r3]
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0c:	9302      	str	r3, [sp, #8]
 8003e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	eeb0 0a47 	vmov.f32	s0, s14
 8003e1a:	eef0 0a67 	vmov.f32	s1, s15
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7fe ff93 	bl	8002d50 <_ftoa>
 8003e2a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	603b      	str	r3, [r7, #0]
        break;
 8003e32:	e130      	b.n	8004096 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b67      	cmp	r3, #103	; 0x67
 8003e3a:	d003      	beq.n	8003e44 <_vsnprintf+0x6ec>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b47      	cmp	r3, #71	; 0x47
 8003e42:	d103      	bne.n	8003e4c <_vsnprintf+0x6f4>
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e4a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b45      	cmp	r3, #69	; 0x45
 8003e52:	d003      	beq.n	8003e5c <_vsnprintf+0x704>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b47      	cmp	r3, #71	; 0x47
 8003e5a:	d103      	bne.n	8003e64 <_vsnprintf+0x70c>
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e66:	3307      	adds	r3, #7
 8003e68:	f023 0307 	bic.w	r3, r3, #7
 8003e6c:	f103 0208 	add.w	r2, r3, #8
 8003e70:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e72:	ed93 7b00 	vldr	d7, [r3]
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	9302      	str	r3, [sp, #8]
 8003e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	eeb0 0a47 	vmov.f32	s0, s14
 8003e86:	eef0 0a67 	vmov.f32	s1, s15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff f9c9 	bl	8003228 <_etoa>
 8003e96:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	603b      	str	r3, [r7, #0]
        break;
 8003e9e:	e0fa      	b.n	8004096 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10e      	bne.n	8003ecc <_vsnprintf+0x774>
          while (l++ < width) {
 8003eae:	e007      	b.n	8003ec0 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 8003eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb2:	1c53      	adds	r3, r2, #1
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb6:	68fc      	ldr	r4, [r7, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	2020      	movs	r0, #32
 8003ebe:	47a0      	blx	r4
          while (l++ < width) {
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d8f1      	bhi.n	8003eb0 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	66ba      	str	r2, [r7, #104]	; 0x68
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b2d8      	uxtb	r0, r3
 8003ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ed8:	1c53      	adds	r3, r2, #1
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
 8003edc:	68fc      	ldr	r4, [r7, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <_vsnprintf+0x7b4>
          while (l++ < width) {
 8003eee:	e007      	b.n	8003f00 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8003ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ef2:	1c53      	adds	r3, r2, #1
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef6:	68fc      	ldr	r4, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	2020      	movs	r0, #32
 8003efe:	47a0      	blx	r4
          while (l++ < width) {
 8003f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8f1      	bhi.n	8003ef0 <_vsnprintf+0x798>
          }
        }
        format++;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	603b      	str	r3, [r7, #0]
        break;
 8003f12:	e0c0      	b.n	8004096 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	66ba      	str	r2, [r7, #104]	; 0x68
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <_vsnprintf+0x7d0>
 8003f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f26:	e001      	b.n	8003f2c <_vsnprintf+0x7d4>
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f30:	f7fe fcb3 	bl	800289a <_strnlen_s>
 8003f34:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8003f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf28      	it	cs
 8003f48:	4613      	movcs	r3, r2
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11a      	bne.n	8003f8c <_vsnprintf+0x834>
          while (l++ < width) {
 8003f56:	e007      	b.n	8003f68 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f5a:	1c53      	adds	r3, r2, #1
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5e:	68fc      	ldr	r4, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	2020      	movs	r0, #32
 8003f66:	47a0      	blx	r4
          while (l++ < width) {
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d8f1      	bhi.n	8003f58 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f74:	e00a      	b.n	8003f8c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f7c:	7818      	ldrb	r0, [r3, #0]
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f80:	1c53      	adds	r3, r2, #1
 8003f82:	647b      	str	r3, [r7, #68]	; 0x44
 8003f84:	68fc      	ldr	r4, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <_vsnprintf+0x850>
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0eb      	beq.n	8003f76 <_vsnprintf+0x81e>
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00e      	beq.n	8003fd0 <_vsnprintf+0x878>
          while (l++ < width) {
 8003fb2:	e007      	b.n	8003fc4 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 8003fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fb6:	1c53      	adds	r3, r2, #1
 8003fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fba:	68fc      	ldr	r4, [r7, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	2020      	movs	r0, #32
 8003fc2:	47a0      	blx	r4
          while (l++ < width) {
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	637a      	str	r2, [r7, #52]	; 0x34
 8003fca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d8f1      	bhi.n	8003fb4 <_vsnprintf+0x85c>
          }
        }
        format++;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	603b      	str	r3, [r7, #0]
        break;
 8003fd6:	e05e      	b.n	8004096 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003fd8:	2308      	movs	r3, #8
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fde:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8003fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	66ba      	str	r2, [r7, #104]	; 0x68
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f04f 0400 	mov.w	r4, #0
 8003ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004000:	9208      	str	r2, [sp, #32]
 8004002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004004:	9207      	str	r2, [sp, #28]
 8004006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004008:	9206      	str	r2, [sp, #24]
 800400a:	f04f 0110 	mov.w	r1, #16
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004016:	2200      	movs	r2, #0
 8004018:	9202      	str	r2, [sp, #8]
 800401a:	e9cd 3400 	strd	r3, r4, [sp]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7fe fe23 	bl	8002c70 <_ntoa_long_long>
 800402a:	6478      	str	r0, [r7, #68]	; 0x44
 800402c:	e016      	b.n	800405c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800402e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004030:	1d1a      	adds	r2, r3, #4
 8004032:	66ba      	str	r2, [r7, #104]	; 0x68
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403a:	9305      	str	r3, [sp, #20]
 800403c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	2310      	movs	r3, #16
 8004046:	9302      	str	r3, [sp, #8]
 8004048:	2300      	movs	r3, #0
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	9200      	str	r2, [sp, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7fe fda4 	bl	8002ba2 <_ntoa_long>
 800405a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	603b      	str	r3, [r7, #0]
        break;
 8004062:	e018      	b.n	8004096 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004066:	1c53      	adds	r3, r2, #1
 8004068:	647b      	str	r3, [r7, #68]	; 0x44
 800406a:	68fc      	ldr	r4, [r7, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	2025      	movs	r0, #37	; 0x25
 8004072:	47a0      	blx	r4
        format++;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	603b      	str	r3, [r7, #0]
        break;
 800407a:	e00c      	b.n	8004096 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	7818      	ldrb	r0, [r3, #0]
 8004080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004082:	1c53      	adds	r3, r2, #1
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
 8004086:	68fc      	ldr	r4, [r7, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	47a0      	blx	r4
        format++;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	603b      	str	r3, [r7, #0]
        break;
 8004094:	bf00      	nop
  while (*format)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f ab6d 	bne.w	800377a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80040a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d302      	bcc.n	80040ae <_vsnprintf+0x956>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	1e5a      	subs	r2, r3, #1
 80040ac:	e000      	b.n	80040b0 <_vsnprintf+0x958>
 80040ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b0:	68fc      	ldr	r4, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	2000      	movs	r0, #0
 80040b8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80040ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3758      	adds	r7, #88	; 0x58
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdb0      	pop	{r4, r5, r7, pc}

080040c4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80040c4:	b40f      	push	{r0, r1, r2, r3}
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80040cc:	f107 031c 	add.w	r3, r7, #28
 80040d0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80040d2:	1d39      	adds	r1, r7, #4
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	4806      	ldr	r0, [pc, #24]	; (80040f8 <printf_+0x34>)
 80040e0:	f7ff fb3a 	bl	8003758 <_vsnprintf>
 80040e4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f2:	b004      	add	sp, #16
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	08002875 	.word	0x08002875

080040fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_MspInit+0x54>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	4a11      	ldr	r2, [pc, #68]	; (8004150 <HAL_MspInit+0x54>)
 800410c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004110:	6453      	str	r3, [r2, #68]	; 0x44
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <HAL_MspInit+0x54>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_MspInit+0x54>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <HAL_MspInit+0x54>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b08      	ldr	r3, [pc, #32]	; (8004150 <HAL_MspInit+0x54>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	210f      	movs	r1, #15
 800413e:	f06f 0001 	mvn.w	r0, #1
 8004142:	f000 fbef 	bl	8004924 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800

08004154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08c      	sub	sp, #48	; 0x30
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004164:	2200      	movs	r2, #0
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	2019      	movs	r0, #25
 800416a:	f000 fbdb 	bl	8004924 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800416e:	2019      	movs	r0, #25
 8004170:	f000 fbf4 	bl	800495c <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_InitTick+0xa0>)
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <HAL_InitTick+0xa0>)
 800417e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004182:	6453      	str	r3, [r2, #68]	; 0x44
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_InitTick+0xa0>)
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004190:	f107 0210 	add.w	r2, r7, #16
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f002 fa98 	bl	80066d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80041a0:	f002 fa82 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
 80041a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <HAL_InitTick+0xa4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0c9b      	lsrs	r3, r3, #18
 80041b0:	3b01      	subs	r3, #1
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_InitTick+0xa8>)
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <HAL_InitTick+0xac>)
 80041b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_InitTick+0xa8>)
 80041bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041c0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <HAL_InitTick+0xa8>)
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_InitTick+0xa8>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_InitTick+0xa8>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80041d4:	4809      	ldr	r0, [pc, #36]	; (80041fc <HAL_InitTick+0xa8>)
 80041d6:	f002 faad 	bl	8006734 <HAL_TIM_Base_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80041e0:	4806      	ldr	r0, [pc, #24]	; (80041fc <HAL_InitTick+0xa8>)
 80041e2:	f002 fad2 	bl	800678a <HAL_TIM_Base_Start_IT>
 80041e6:	4603      	mov	r3, r0
 80041e8:	e000      	b.n	80041ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	20004ba4 	.word	0x20004ba4
 8004200:	40014400 	.word	0x40014400

08004204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004208:	e7fe      	b.n	8004208 <NMI_Handler+0x4>

0800420a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800420a:	b480      	push	{r7}
 800420c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800420e:	e7fe      	b.n	800420e <HardFault_Handler+0x4>

08004210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004214:	e7fe      	b.n	8004214 <MemManage_Handler+0x4>

08004216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800421a:	e7fe      	b.n	800421a <BusFault_Handler+0x4>

0800421c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004220:	e7fe      	b.n	8004220 <UsageFault_Handler+0x4>

08004222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004236:	f002 fb7f 	bl	8006938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20004ba4 	.word	0x20004ba4

08004244 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004248:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800424c:	f000 fe12 	bl	8004e74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004250:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004254:	f000 fe0e 	bl	8004e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}

0800425c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004264:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <_sbrk+0x5c>)
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <_sbrk+0x60>)
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <_sbrk+0x64>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <_sbrk+0x64>)
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <_sbrk+0x68>)
 800427c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <_sbrk+0x64>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d207      	bcs.n	800429c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800428c:	f007 fc2e 	bl	800baec <__errno>
 8004290:	4602      	mov	r2, r0
 8004292:	230c      	movs	r3, #12
 8004294:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	e009      	b.n	80042b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <_sbrk+0x64>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <_sbrk+0x64>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <_sbrk+0x64>)
 80042ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20020000 	.word	0x20020000
 80042bc:	00000400 	.word	0x00000400
 80042c0:	200001fc 	.word	0x200001fc
 80042c4:	20004cf0 	.word	0x20004cf0

080042c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <SystemInit+0x28>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <SystemInit+0x28>)
 80042d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <SystemInit+0x28>)
 80042de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042e2:	609a      	str	r2, [r3, #8]
#endif
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08e      	sub	sp, #56	; 0x38
 80042f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004308:	f107 0320 	add.w	r3, r7, #32
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
 8004320:	615a      	str	r2, [r3, #20]
 8004322:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8004324:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <MX_TIM2_Init+0xe8>)
 8004326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800432a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <MX_TIM2_Init+0xe8>)
 800432e:	2253      	movs	r2, #83	; 0x53
 8004330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004332:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <MX_TIM2_Init+0xe8>)
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <MX_TIM2_Init+0xe8>)
 800433a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800433e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004340:	4b26      	ldr	r3, [pc, #152]	; (80043dc <MX_TIM2_Init+0xe8>)
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004346:	4b25      	ldr	r3, [pc, #148]	; (80043dc <MX_TIM2_Init+0xe8>)
 8004348:	2200      	movs	r2, #0
 800434a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800434c:	4823      	ldr	r0, [pc, #140]	; (80043dc <MX_TIM2_Init+0xe8>)
 800434e:	f002 f9f1 	bl	8006734 <HAL_TIM_Base_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004358:	f7fe fa7a 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800435c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004366:	4619      	mov	r1, r3
 8004368:	481c      	ldr	r0, [pc, #112]	; (80043dc <MX_TIM2_Init+0xe8>)
 800436a:	f002 fcb3 	bl	8006cd4 <HAL_TIM_ConfigClockSource>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004374:	f7fe fa6c 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004378:	4818      	ldr	r0, [pc, #96]	; (80043dc <MX_TIM2_Init+0xe8>)
 800437a:	f002 fa2a 	bl	80067d2 <HAL_TIM_PWM_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004384:	f7fe fa64 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004388:	2300      	movs	r3, #0
 800438a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800438c:	2300      	movs	r3, #0
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004390:	f107 0320 	add.w	r3, r7, #32
 8004394:	4619      	mov	r1, r3
 8004396:	4811      	ldr	r0, [pc, #68]	; (80043dc <MX_TIM2_Init+0xe8>)
 8004398:	f003 f848 	bl	800742c <HAL_TIMEx_MasterConfigSynchronization>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80043a2:	f7fe fa55 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043a6:	2360      	movs	r3, #96	; 0x60
 80043a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80043aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80043ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	2208      	movs	r2, #8
 80043bc:	4619      	mov	r1, r3
 80043be:	4807      	ldr	r0, [pc, #28]	; (80043dc <MX_TIM2_Init+0xe8>)
 80043c0:	f002 fbc2 	bl	8006b48 <HAL_TIM_PWM_ConfigChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80043ca:	f7fe fa41 	bl	8002850 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80043ce:	4803      	ldr	r0, [pc, #12]	; (80043dc <MX_TIM2_Init+0xe8>)
 80043d0:	f000 f8b4 	bl	800453c <HAL_TIM_MspPostInit>

}
 80043d4:	bf00      	nop
 80043d6:	3738      	adds	r7, #56	; 0x38
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20004c24 	.word	0x20004c24

080043e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	; 0x38
 80043e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f4:	f107 0320 	add.w	r3, r7, #32
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
 800440c:	615a      	str	r2, [r3, #20]
 800440e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004412:	4a2e      	ldr	r2, [pc, #184]	; (80044cc <MX_TIM4_Init+0xec>)
 8004414:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004418:	2253      	movs	r2, #83	; 0x53
 800441a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441c:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <MX_TIM4_Init+0xe8>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004422:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004428:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <MX_TIM4_Init+0xe8>)
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004430:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004432:	2200      	movs	r2, #0
 8004434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004436:	4824      	ldr	r0, [pc, #144]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004438:	f002 f97c 	bl	8006734 <HAL_TIM_Base_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004442:	f7fe fa05 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800444c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004450:	4619      	mov	r1, r3
 8004452:	481d      	ldr	r0, [pc, #116]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004454:	f002 fc3e 	bl	8006cd4 <HAL_TIM_ConfigClockSource>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800445e:	f7fe f9f7 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004462:	4819      	ldr	r0, [pc, #100]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004464:	f002 f9b5 	bl	80067d2 <HAL_TIM_PWM_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800446e:	f7fe f9ef 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800447a:	f107 0320 	add.w	r3, r7, #32
 800447e:	4619      	mov	r1, r3
 8004480:	4811      	ldr	r0, [pc, #68]	; (80044c8 <MX_TIM4_Init+0xe8>)
 8004482:	f002 ffd3 	bl	800742c <HAL_TIMEx_MasterConfigSynchronization>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800448c:	f7fe f9e0 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004490:	2360      	movs	r3, #96	; 0x60
 8004492:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8004494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	2200      	movs	r2, #0
 80044a6:	4619      	mov	r1, r3
 80044a8:	4807      	ldr	r0, [pc, #28]	; (80044c8 <MX_TIM4_Init+0xe8>)
 80044aa:	f002 fb4d 	bl	8006b48 <HAL_TIM_PWM_ConfigChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80044b4:	f7fe f9cc 	bl	8002850 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80044b8:	4803      	ldr	r0, [pc, #12]	; (80044c8 <MX_TIM4_Init+0xe8>)
 80044ba:	f000 f83f 	bl	800453c <HAL_TIM_MspPostInit>

}
 80044be:	bf00      	nop
 80044c0:	3738      	adds	r7, #56	; 0x38
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20004be4 	.word	0x20004be4
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_TIM_Base_MspInit+0x64>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <HAL_TIM_Base_MspInit+0x64>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <HAL_TIM_Base_MspInit+0x64>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80044fe:	e012      	b.n	8004526 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_TIM_Base_MspInit+0x68>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10d      	bne.n	8004526 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_TIM_Base_MspInit+0x64>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	4a08      	ldr	r2, [pc, #32]	; (8004534 <HAL_TIM_Base_MspInit+0x64>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6413      	str	r3, [r2, #64]	; 0x40
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_TIM_Base_MspInit+0x64>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	40000800 	.word	0x40000800

0800453c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d11f      	bne.n	800459e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_TIM_MspPostInit+0xb0>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <HAL_TIM_MspPostInit+0xb0>)
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_TIM_MspPostInit+0xb0>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = leftMotor_STEP_Pin;
 800457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800458c:	2301      	movs	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	4816      	ldr	r0, [pc, #88]	; (80045f0 <HAL_TIM_MspPostInit+0xb4>)
 8004598:	f000 f9ee 	bl	8004978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800459c:	e022      	b.n	80045e4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_TIM_MspPostInit+0xb8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d11d      	bne.n	80045e4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_TIM_MspPostInit+0xb0>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <HAL_TIM_MspPostInit+0xb0>)
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	6313      	str	r3, [r2, #48]	; 0x30
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_TIM_MspPostInit+0xb0>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightMotor_STEP_Pin;
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c8:	2302      	movs	r3, #2
 80045ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045d4:	2302      	movs	r3, #2
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 80045d8:	f107 0314 	add.w	r3, r7, #20
 80045dc:	4619      	mov	r1, r3
 80045de:	4804      	ldr	r0, [pc, #16]	; (80045f0 <HAL_TIM_MspPostInit+0xb4>)
 80045e0:	f000 f9ca 	bl	8004978 <HAL_GPIO_Init>
}
 80045e4:	bf00      	nop
 80045e6:	3728      	adds	r7, #40	; 0x28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40020400 	.word	0x40020400
 80045f4:	40000800 	.word	0x40000800

080045f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 80045fe:	4a12      	ldr	r2, [pc, #72]	; (8004648 <MX_USART2_UART_Init+0x50>)
 8004600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 8004604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 800461e:	220c      	movs	r2, #12
 8004620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800462e:	4805      	ldr	r0, [pc, #20]	; (8004644 <MX_USART2_UART_Init+0x4c>)
 8004630:	f002 ff7e 	bl	8007530 <HAL_UART_Init>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800463a:	f7fe f909 	bl	8002850 <Error_Handler>
  }

}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20004c64 	.word	0x20004c64
 8004648:	40004400 	.word	0x40004400

0800464c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_UART_MspInit+0x84>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12b      	bne.n	80046c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <HAL_UART_MspInit+0x88>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <HAL_UART_MspInit+0x88>)
 8004678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_UART_MspInit+0x88>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <HAL_UART_MspInit+0x88>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <HAL_UART_MspInit+0x88>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_UART_MspInit+0x88>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046a6:	230c      	movs	r3, #12
 80046a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b2:	2303      	movs	r3, #3
 80046b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046b6:	2307      	movs	r3, #7
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	; (80046d8 <HAL_UART_MspInit+0x8c>)
 80046c2:	f000 f959 	bl	8004978 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80046c6:	bf00      	nop
 80046c8:	3728      	adds	r7, #40	; 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40004400 	.word	0x40004400
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40020000 	.word	0x40020000

080046dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80046dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046e2:	e003      	b.n	80046ec <LoopCopyDataInit>

080046e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046ea:	3104      	adds	r1, #4

080046ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046ec:	480b      	ldr	r0, [pc, #44]	; (800471c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80046f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046f4:	d3f6      	bcc.n	80046e4 <CopyDataInit>
  ldr  r2, =_sbss
 80046f6:	4a0b      	ldr	r2, [pc, #44]	; (8004724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80046f8:	e002      	b.n	8004700 <LoopFillZerobss>

080046fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80046fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80046fc:	f842 3b04 	str.w	r3, [r2], #4

08004700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004704:	d3f9      	bcc.n	80046fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004706:	f7ff fddf 	bl	80042c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800470a:	f007 f9f5 	bl	800baf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800470e:	f7fd fffd 	bl	800270c <main>
  bx  lr    
 8004712:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004714:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004718:	0800e030 	.word	0x0800e030
  ldr  r0, =_sdata
 800471c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004720:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004724:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004728:	20004cec 	.word	0x20004cec

0800472c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800472c:	e7fe      	b.n	800472c <ADC_IRQHandler>
	...

08004730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_Init+0x40>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <HAL_Init+0x40>)
 800473a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_Init+0x40>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_Init+0x40>)
 8004746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800474a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_Init+0x40>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a07      	ldr	r2, [pc, #28]	; (8004770 <HAL_Init+0x40>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004758:	2003      	movs	r0, #3
 800475a:	f000 f8d8 	bl	800490e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800475e:	2000      	movs	r0, #0
 8004760:	f7ff fcf8 	bl	8004154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004764:	f7ff fcca 	bl	80040fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023c00 	.word	0x40023c00

08004774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_IncTick+0x20>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_IncTick+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4413      	add	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_IncTick+0x24>)
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000008 	.word	0x20000008
 8004798:	20004ca4 	.word	0x20004ca4

0800479c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_GetTick+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20004ca4 	.word	0x20004ca4

080047b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e6:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	60d3      	str	r3, [r2, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <__NVIC_GetPriorityGrouping+0x18>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f003 0307 	and.w	r3, r3, #7
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db0b      	blt.n	8004842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	4907      	ldr	r1, [pc, #28]	; (8004850 <__NVIC_EnableIRQ+0x38>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2001      	movs	r0, #1
 800483a:	fa00 f202 	lsl.w	r2, r0, r2
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e100 	.word	0xe000e100

08004854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db0a      	blt.n	800487e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	490c      	ldr	r1, [pc, #48]	; (80048a0 <__NVIC_SetPriority+0x4c>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	440b      	add	r3, r1
 8004878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800487c:	e00a      	b.n	8004894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4908      	ldr	r1, [pc, #32]	; (80048a4 <__NVIC_SetPriority+0x50>)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3b04      	subs	r3, #4
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	440b      	add	r3, r1
 8004892:	761a      	strb	r2, [r3, #24]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f1c3 0307 	rsb	r3, r3, #7
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	bf28      	it	cs
 80048c6:	2304      	movcs	r3, #4
 80048c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d902      	bls.n	80048d8 <NVIC_EncodePriority+0x30>
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3b03      	subs	r3, #3
 80048d6:	e000      	b.n	80048da <NVIC_EncodePriority+0x32>
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	401a      	ands	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f0:	f04f 31ff 	mov.w	r1, #4294967295
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	43d9      	mvns	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	4313      	orrs	r3, r2
         );
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff4c 	bl	80047b4 <__NVIC_SetPriorityGrouping>
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004936:	f7ff ff61 	bl	80047fc <__NVIC_GetPriorityGrouping>
 800493a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	6978      	ldr	r0, [r7, #20]
 8004942:	f7ff ffb1 	bl	80048a8 <NVIC_EncodePriority>
 8004946:	4602      	mov	r2, r0
 8004948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ff80 	bl	8004854 <__NVIC_SetPriority>
}
 8004954:	bf00      	nop
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff54 	bl	8004818 <__NVIC_EnableIRQ>
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e159      	b.n	8004c48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004994:	2201      	movs	r2, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f040 8148 	bne.w	8004c42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d00b      	beq.n	80049d2 <HAL_GPIO_Init+0x5a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d007      	beq.n	80049d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c6:	2b11      	cmp	r3, #17
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b12      	cmp	r3, #18
 80049d0:	d130      	bne.n	8004a34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0xfc>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d123      	bne.n	8004abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3208      	adds	r2, #8
 8004a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	220f      	movs	r2, #15
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	08da      	lsrs	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80a2 	beq.w	8004c42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <HAL_GPIO_Init+0x2e4>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4a55      	ldr	r2, [pc, #340]	; (8004c5c <HAL_GPIO_Init+0x2e4>)
 8004b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0e:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_GPIO_Init+0x2e4>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b1a:	4a51      	ldr	r2, [pc, #324]	; (8004c60 <HAL_GPIO_Init+0x2e8>)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	3302      	adds	r3, #2
 8004b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	220f      	movs	r2, #15
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a48      	ldr	r2, [pc, #288]	; (8004c64 <HAL_GPIO_Init+0x2ec>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d019      	beq.n	8004b7a <HAL_GPIO_Init+0x202>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <HAL_GPIO_Init+0x2f0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_GPIO_Init+0x1fe>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a46      	ldr	r2, [pc, #280]	; (8004c6c <HAL_GPIO_Init+0x2f4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00d      	beq.n	8004b72 <HAL_GPIO_Init+0x1fa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a45      	ldr	r2, [pc, #276]	; (8004c70 <HAL_GPIO_Init+0x2f8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <HAL_GPIO_Init+0x1f6>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a44      	ldr	r2, [pc, #272]	; (8004c74 <HAL_GPIO_Init+0x2fc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_GPIO_Init+0x1f2>
 8004b66:	2304      	movs	r3, #4
 8004b68:	e008      	b.n	8004b7c <HAL_GPIO_Init+0x204>
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x204>
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e004      	b.n	8004b7c <HAL_GPIO_Init+0x204>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e002      	b.n	8004b7c <HAL_GPIO_Init+0x204>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_GPIO_Init+0x204>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	f002 0203 	and.w	r2, r2, #3
 8004b82:	0092      	lsls	r2, r2, #2
 8004b84:	4093      	lsls	r3, r2
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b8c:	4934      	ldr	r1, [pc, #208]	; (8004c60 <HAL_GPIO_Init+0x2e8>)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	3302      	adds	r3, #2
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b9a:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bbe:	4a2e      	ldr	r2, [pc, #184]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004be8:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bee:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c12:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <HAL_GPIO_Init+0x300>)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3301      	adds	r3, #1
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	f67f aea2 	bls.w	8004994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c50:	bf00      	nop
 8004c52:	3724      	adds	r7, #36	; 0x24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40013800 	.word	0x40013800
 8004c64:	40020000 	.word	0x40020000
 8004c68:	40020400 	.word	0x40020400
 8004c6c:	40020800 	.word	0x40020800
 8004c70:	40020c00 	.word	0x40020c00
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e0bb      	b.n	8004e10 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c98:	2201      	movs	r2, #1
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	f040 80ab 	bne.w	8004e0a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004cb4:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <HAL_GPIO_DeInit+0x1a8>)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	3302      	adds	r3, #2
 8004cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	220f      	movs	r2, #15
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a53      	ldr	r2, [pc, #332]	; (8004e28 <HAL_GPIO_DeInit+0x1ac>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d019      	beq.n	8004d12 <HAL_GPIO_DeInit+0x96>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	; (8004e2c <HAL_GPIO_DeInit+0x1b0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <HAL_GPIO_DeInit+0x92>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a51      	ldr	r2, [pc, #324]	; (8004e30 <HAL_GPIO_DeInit+0x1b4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00d      	beq.n	8004d0a <HAL_GPIO_DeInit+0x8e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a50      	ldr	r2, [pc, #320]	; (8004e34 <HAL_GPIO_DeInit+0x1b8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <HAL_GPIO_DeInit+0x8a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a4f      	ldr	r2, [pc, #316]	; (8004e38 <HAL_GPIO_DeInit+0x1bc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_GPIO_DeInit+0x86>
 8004cfe:	2304      	movs	r3, #4
 8004d00:	e008      	b.n	8004d14 <HAL_GPIO_DeInit+0x98>
 8004d02:	2307      	movs	r3, #7
 8004d04:	e006      	b.n	8004d14 <HAL_GPIO_DeInit+0x98>
 8004d06:	2303      	movs	r3, #3
 8004d08:	e004      	b.n	8004d14 <HAL_GPIO_DeInit+0x98>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e002      	b.n	8004d14 <HAL_GPIO_DeInit+0x98>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <HAL_GPIO_DeInit+0x98>
 8004d12:	2300      	movs	r3, #0
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	f002 0203 	and.w	r2, r2, #3
 8004d1a:	0092      	lsls	r2, r2, #2
 8004d1c:	4093      	lsls	r3, r2
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d132      	bne.n	8004d8a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	4943      	ldr	r1, [pc, #268]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d32:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	4940      	ldr	r1, [pc, #256]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	493c      	ldr	r1, [pc, #240]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	4939      	ldr	r1, [pc, #228]	; (8004e3c <HAL_GPIO_DeInit+0x1c0>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <HAL_GPIO_DeInit+0x1a8>)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	089b      	lsrs	r3, r3, #2
 8004d72:	3302      	adds	r3, #2
 8004d74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	4829      	ldr	r0, [pc, #164]	; (8004e24 <HAL_GPIO_DeInit+0x1a8>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	400a      	ands	r2, r1
 8004d84:	3302      	adds	r3, #2
 8004d86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2103      	movs	r1, #3
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	08da      	lsrs	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3208      	adds	r2, #8
 8004da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	220f      	movs	r2, #15
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	08d2      	lsrs	r2, r2, #3
 8004dc0:	4019      	ands	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3208      	adds	r2, #8
 8004dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	401a      	ands	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	2101      	movs	r1, #1
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	2103      	movs	r1, #3
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	401a      	ands	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	f67f af40 	bls.w	8004c98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40013800 	.word	0x40013800
 8004e28:	40020000 	.word	0x40020000
 8004e2c:	40020400 	.word	0x40020400
 8004e30:	40020800 	.word	0x40020800
 8004e34:	40020c00 	.word	0x40020c00
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40013c00 	.word	0x40013c00

08004e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e50:	787b      	ldrb	r3, [r7, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e56:	887a      	ldrh	r2, [r7, #2]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e5c:	e003      	b.n	8004e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fa38 	bl	8002308 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40013c00 	.word	0x40013c00

08004ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e11f      	b.n	80050f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fd fbd6 	bl	800267c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	; 0x24
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f08:	f001 fbba 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a7b      	ldr	r2, [pc, #492]	; (8005100 <HAL_I2C_Init+0x25c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d807      	bhi.n	8004f28 <HAL_I2C_Init+0x84>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a7a      	ldr	r2, [pc, #488]	; (8005104 <HAL_I2C_Init+0x260>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bf94      	ite	ls
 8004f20:	2301      	movls	r3, #1
 8004f22:	2300      	movhi	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e006      	b.n	8004f36 <HAL_I2C_Init+0x92>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a77      	ldr	r2, [pc, #476]	; (8005108 <HAL_I2C_Init+0x264>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bf94      	ite	ls
 8004f30:	2301      	movls	r3, #1
 8004f32:	2300      	movhi	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0db      	b.n	80050f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a72      	ldr	r2, [pc, #456]	; (800510c <HAL_I2C_Init+0x268>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0c9b      	lsrs	r3, r3, #18
 8004f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a64      	ldr	r2, [pc, #400]	; (8005100 <HAL_I2C_Init+0x25c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d802      	bhi.n	8004f78 <HAL_I2C_Init+0xd4>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	e009      	b.n	8004f8c <HAL_I2C_Init+0xe8>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	4a63      	ldr	r2, [pc, #396]	; (8005110 <HAL_I2C_Init+0x26c>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4956      	ldr	r1, [pc, #344]	; (8005100 <HAL_I2C_Init+0x25c>)
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	d80d      	bhi.n	8004fc8 <HAL_I2C_Init+0x124>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1e59      	subs	r1, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	bf38      	it	cc
 8004fc4:	2304      	movcc	r3, #4
 8004fc6:	e04f      	b.n	8005068 <HAL_I2C_Init+0x1c4>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <HAL_I2C_Init+0x150>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1e58      	subs	r0, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	440b      	add	r3, r1
 8004fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e012      	b.n	800501a <HAL_I2C_Init+0x176>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1e58      	subs	r0, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	0099      	lsls	r1, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	fbb0 f3f3 	udiv	r3, r0, r3
 800500a:	3301      	adds	r3, #1
 800500c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Init+0x17e>
 800501e:	2301      	movs	r3, #1
 8005020:	e022      	b.n	8005068 <HAL_I2C_Init+0x1c4>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10e      	bne.n	8005048 <HAL_I2C_Init+0x1a4>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1e58      	subs	r0, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6859      	ldr	r1, [r3, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	fbb0 f3f3 	udiv	r3, r0, r3
 800503c:	3301      	adds	r3, #1
 800503e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	e00f      	b.n	8005068 <HAL_I2C_Init+0x1c4>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1e58      	subs	r0, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	0099      	lsls	r1, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	fbb0 f3f3 	udiv	r3, r0, r3
 800505e:	3301      	adds	r3, #1
 8005060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	6809      	ldr	r1, [r1, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6911      	ldr	r1, [r2, #16]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68d2      	ldr	r2, [r2, #12]
 80050a2:	4311      	orrs	r1, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	000186a0 	.word	0x000186a0
 8005104:	001e847f 	.word	0x001e847f
 8005108:	003d08ff 	.word	0x003d08ff
 800510c:	431bde83 	.word	0x431bde83
 8005110:	10624dd3 	.word	0x10624dd3

08005114 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	461a      	mov	r2, r3
 8005122:	4603      	mov	r3, r0
 8005124:	817b      	strh	r3, [r7, #10]
 8005126:	460b      	mov	r3, r1
 8005128:	813b      	strh	r3, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800512e:	f7ff fb35 	bl	800479c <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b20      	cmp	r3, #32
 800513e:	f040 80d9 	bne.w	80052f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2319      	movs	r3, #25
 8005148:	2201      	movs	r2, #1
 800514a:	496d      	ldr	r1, [pc, #436]	; (8005300 <HAL_I2C_Mem_Write+0x1ec>)
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fc7f 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
 800515a:	e0cc      	b.n	80052f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_I2C_Mem_Write+0x56>
 8005166:	2302      	movs	r3, #2
 8005168:	e0c5      	b.n	80052f6 <HAL_I2C_Mem_Write+0x1e2>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d007      	beq.n	8005190 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2221      	movs	r2, #33	; 0x21
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2240      	movs	r2, #64	; 0x40
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a4d      	ldr	r2, [pc, #308]	; (8005304 <HAL_I2C_Mem_Write+0x1f0>)
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051d2:	88f8      	ldrh	r0, [r7, #6]
 80051d4:	893a      	ldrh	r2, [r7, #8]
 80051d6:	8979      	ldrh	r1, [r7, #10]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4603      	mov	r3, r0
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fab6 	bl	8005754 <I2C_RequestMemoryWrite>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d052      	beq.n	8005294 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e081      	b.n	80052f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fd00 	bl	8005bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b04      	cmp	r3, #4
 8005208:	d107      	bne.n	800521a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e06b      	b.n	80052f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	781a      	ldrb	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b04      	cmp	r3, #4
 800525a:	d11b      	bne.n	8005294 <HAL_I2C_Mem_Write+0x180>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d017      	beq.n	8005294 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1aa      	bne.n	80051f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fcec 	bl	8005c7e <I2C_WaitOnBTFFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d107      	bne.n	80052c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e016      	b.n	80052f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	00100002 	.word	0x00100002
 8005304:	ffff0000 	.word	0xffff0000

08005308 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08c      	sub	sp, #48	; 0x30
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	4608      	mov	r0, r1
 8005312:	4611      	mov	r1, r2
 8005314:	461a      	mov	r2, r3
 8005316:	4603      	mov	r3, r0
 8005318:	817b      	strh	r3, [r7, #10]
 800531a:	460b      	mov	r3, r1
 800531c:	813b      	strh	r3, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005322:	f7ff fa3b 	bl	800479c <HAL_GetTick>
 8005326:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b20      	cmp	r3, #32
 8005332:	f040 8208 	bne.w	8005746 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	2319      	movs	r3, #25
 800533c:	2201      	movs	r2, #1
 800533e:	497b      	ldr	r1, [pc, #492]	; (800552c <HAL_I2C_Mem_Read+0x224>)
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fb85 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
 800534e:	e1fb      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_I2C_Mem_Read+0x56>
 800535a:	2302      	movs	r3, #2
 800535c:	e1f4      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d007      	beq.n	8005384 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005392:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2222      	movs	r2, #34	; 0x22
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2240      	movs	r2, #64	; 0x40
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a5b      	ldr	r2, [pc, #364]	; (8005530 <HAL_I2C_Mem_Read+0x228>)
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053c6:	88f8      	ldrh	r0, [r7, #6]
 80053c8:	893a      	ldrh	r2, [r7, #8]
 80053ca:	8979      	ldrh	r1, [r7, #10]
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4603      	mov	r3, r0
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa52 	bl	8005880 <I2C_RequestMemoryRead>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e1b0      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d113      	bne.n	8005416 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	623b      	str	r3, [r7, #32]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	623b      	str	r3, [r7, #32]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e184      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	2b01      	cmp	r3, #1
 800541c:	d11b      	bne.n	8005456 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e164      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	2b02      	cmp	r3, #2
 800545c:	d11b      	bne.n	8005496 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	e144      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80054ac:	e138      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	f200 80f1 	bhi.w	800569a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d123      	bne.n	8005508 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fc1b 	bl	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e139      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005506:	e10b      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	2b02      	cmp	r3, #2
 800550e:	d14e      	bne.n	80055ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2200      	movs	r2, #0
 8005518:	4906      	ldr	r1, [pc, #24]	; (8005534 <HAL_I2C_Mem_Read+0x22c>)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fa98 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e10e      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
 800552a:	bf00      	nop
 800552c:	00100002 	.word	0x00100002
 8005530:	ffff0000 	.word	0xffff0000
 8005534:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055ac:	e0b8      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2200      	movs	r2, #0
 80055b6:	4966      	ldr	r1, [pc, #408]	; (8005750 <HAL_I2C_Mem_Read+0x448>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fa49 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0bf      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2200      	movs	r2, #0
 8005612:	494f      	ldr	r1, [pc, #316]	; (8005750 <HAL_I2C_Mem_Read+0x448>)
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa1b 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e091      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005698:	e042      	b.n	8005720 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fb2e 	bl	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e04c      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d118      	bne.n	8005720 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f aec2 	bne.w	80054ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3728      	adds	r7, #40	; 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	00010004 	.word	0x00010004

08005754 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	2200      	movs	r2, #0
 8005786:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f960 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d103      	bne.n	80057ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e05f      	b.n	8005872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057b2:	897b      	ldrh	r3, [r7, #10]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	492d      	ldr	r1, [pc, #180]	; (800587c <I2C_RequestMemoryWrite+0x128>)
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f998 	bl	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e04c      	b.n	8005872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	6a39      	ldr	r1, [r7, #32]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fa02 	bl	8005bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00d      	beq.n	800581a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2b04      	cmp	r3, #4
 8005804:	d107      	bne.n	8005816 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005814:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e02b      	b.n	8005872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d105      	bne.n	800582c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005820:	893b      	ldrh	r3, [r7, #8]
 8005822:	b2da      	uxtb	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	611a      	str	r2, [r3, #16]
 800582a:	e021      	b.n	8005870 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800582c:	893b      	ldrh	r3, [r7, #8]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	b29b      	uxth	r3, r3
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	6a39      	ldr	r1, [r7, #32]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f9dc 	bl	8005bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b04      	cmp	r3, #4
 8005850:	d107      	bne.n	8005862 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005860:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e005      	b.n	8005872 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	00010002 	.word	0x00010002

08005880 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	461a      	mov	r2, r3
 800588e:	4603      	mov	r3, r0
 8005890:	817b      	strh	r3, [r7, #10]
 8005892:	460b      	mov	r3, r1
 8005894:	813b      	strh	r3, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f8c2 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00d      	beq.n	80058ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e0:	d103      	bne.n	80058ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e0aa      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058ee:	897b      	ldrh	r3, [r7, #10]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	6a3a      	ldr	r2, [r7, #32]
 8005902:	4952      	ldr	r1, [pc, #328]	; (8005a4c <I2C_RequestMemoryRead+0x1cc>)
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f8fa 	bl	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e097      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	6a39      	ldr	r1, [r7, #32]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f964 	bl	8005bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	2b04      	cmp	r3, #4
 8005940:	d107      	bne.n	8005952 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005950:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e076      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d105      	bne.n	8005968 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800595c:	893b      	ldrh	r3, [r7, #8]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	611a      	str	r2, [r3, #16]
 8005966:	e021      	b.n	80059ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005968:	893b      	ldrh	r3, [r7, #8]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b29b      	uxth	r3, r3
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005978:	6a39      	ldr	r1, [r7, #32]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f93e 	bl	8005bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	2b04      	cmp	r3, #4
 800598c:	d107      	bne.n	800599e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800599c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e050      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a2:	893b      	ldrh	r3, [r7, #8]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ae:	6a39      	ldr	r1, [r7, #32]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f923 	bl	8005bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d107      	bne.n	80059d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e035      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f82b 	bl	8005a50 <I2C_WaitOnFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00d      	beq.n	8005a1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0e:	d103      	bne.n	8005a18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e013      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a1c:	897b      	ldrh	r3, [r7, #10]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	6a3a      	ldr	r2, [r7, #32]
 8005a30:	4906      	ldr	r1, [pc, #24]	; (8005a4c <I2C_RequestMemoryRead+0x1cc>)
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f863 	bl	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	00010002 	.word	0x00010002

08005a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a60:	e025      	b.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d021      	beq.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fe fe97 	bl	800479c <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d116      	bne.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e023      	b.n	8005af6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d10d      	bne.n	8005ad4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	e00c      	b.n	8005aee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	43da      	mvns	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d0b6      	beq.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b0c:	e051      	b.n	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1c:	d123      	bne.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0204 	orr.w	r2, r3, #4
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e046      	b.n	8005bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d021      	beq.n	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6e:	f7fe fe15 	bl	800479c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0220 	orr.w	r2, r3, #32
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e020      	b.n	8005bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d10c      	bne.n	8005bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	e00b      	b.n	8005bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	43da      	mvns	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4013      	ands	r3, r2
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d18d      	bne.n	8005b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c08:	e02d      	b.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f8ce 	bl	8005dac <I2C_IsAcknowledgeFailed>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e02d      	b.n	8005c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d021      	beq.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fe fdbb 	bl	800479c <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d116      	bne.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e007      	b.n	8005c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d1ca      	bne.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c8a:	e02d      	b.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f88d 	bl	8005dac <I2C_IsAcknowledgeFailed>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e02d      	b.n	8005cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d021      	beq.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fe fd7a 	bl	800479c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d116      	bne.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e007      	b.n	8005cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d1ca      	bne.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d0c:	e042      	b.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d119      	bne.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0210 	mvn.w	r2, #16
 8005d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e029      	b.n	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d50:	f7fe fd24 	bl	800479c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d116      	bne.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e007      	b.n	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d1b5      	bne.n	8005d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc2:	d11b      	bne.n	8005dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	f043 0204 	orr.w	r2, r3, #4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e25b      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d075      	beq.n	8005f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e2a:	4ba3      	ldr	r3, [pc, #652]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00c      	beq.n	8005e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e36:	4ba0      	ldr	r3, [pc, #640]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d112      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b9d      	ldr	r3, [pc, #628]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	4b99      	ldr	r3, [pc, #612]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05b      	beq.n	8005f14 <HAL_RCC_OscConfig+0x108>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d157      	bne.n	8005f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e236      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d106      	bne.n	8005e80 <HAL_RCC_OscConfig+0x74>
 8005e72:	4b91      	ldr	r3, [pc, #580]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a90      	ldr	r2, [pc, #576]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e01d      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x98>
 8005e8a:	4b8b      	ldr	r3, [pc, #556]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a8a      	ldr	r2, [pc, #552]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a87      	ldr	r2, [pc, #540]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005ea4:	4b84      	ldr	r3, [pc, #528]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a83      	ldr	r2, [pc, #524]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a80      	ldr	r2, [pc, #512]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fe fc6a 	bl	800479c <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ecc:	f7fe fc66 	bl	800479c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e1fb      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ede:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0xc0>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fe fc56 	bl	800479c <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fe fc52 	bl	800479c <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e1e7      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f06:	4b6c      	ldr	r3, [pc, #432]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xe8>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d063      	beq.n	8005fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f22:	4b65      	ldr	r3, [pc, #404]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b62      	ldr	r3, [pc, #392]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d11c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b5f      	ldr	r3, [pc, #380]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	4b5c      	ldr	r3, [pc, #368]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e1bb      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	4b56      	ldr	r3, [pc, #344]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4952      	ldr	r1, [pc, #328]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f72:	e03a      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	; (80060bc <HAL_RCC_OscConfig+0x2b0>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fe fc0b 	bl	800479c <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fe fc07 	bl	800479c <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e19c      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9c:	4b46      	ldr	r3, [pc, #280]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa8:	4b43      	ldr	r3, [pc, #268]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4940      	ldr	r1, [pc, #256]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	e015      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCC_OscConfig+0x2b0>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fe fbea 	bl	800479c <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fcc:	f7fe fbe6 	bl	800479c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e17b      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fde:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d030      	beq.n	8006058 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <HAL_RCC_OscConfig+0x2b4>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fe fbca 	bl	800479c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600c:	f7fe fbc6 	bl	800479c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e15b      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601e:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x200>
 800602a:	e015      	b.n	8006058 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <HAL_RCC_OscConfig+0x2b4>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fe fbb3 	bl	800479c <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603a:	f7fe fbaf 	bl	800479c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e144      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 800604e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f0      	bne.n	800603a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80a0 	beq.w	80061a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606a:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	4a0e      	ldr	r2, [pc, #56]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006084:	6413      	str	r3, [r2, #64]	; 0x40
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <HAL_RCC_OscConfig+0x2b8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d121      	bne.n	80060e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <HAL_RCC_OscConfig+0x2b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <HAL_RCC_OscConfig+0x2b8>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ae:	f7fe fb75 	bl	800479c <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b4:	e011      	b.n	80060da <HAL_RCC_OscConfig+0x2ce>
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800
 80060bc:	42470000 	.word	0x42470000
 80060c0:	42470e80 	.word	0x42470e80
 80060c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c8:	f7fe fb68 	bl	800479c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e0fd      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060da:	4b81      	ldr	r3, [pc, #516]	; (80062e0 <HAL_RCC_OscConfig+0x4d4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d106      	bne.n	80060fc <HAL_RCC_OscConfig+0x2f0>
 80060ee:	4b7d      	ldr	r3, [pc, #500]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	4a7c      	ldr	r2, [pc, #496]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6713      	str	r3, [r2, #112]	; 0x70
 80060fa:	e01c      	b.n	8006136 <HAL_RCC_OscConfig+0x32a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b05      	cmp	r3, #5
 8006102:	d10c      	bne.n	800611e <HAL_RCC_OscConfig+0x312>
 8006104:	4b77      	ldr	r3, [pc, #476]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	4a76      	ldr	r2, [pc, #472]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	6713      	str	r3, [r2, #112]	; 0x70
 8006110:	4b74      	ldr	r3, [pc, #464]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	4a73      	ldr	r2, [pc, #460]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	6713      	str	r3, [r2, #112]	; 0x70
 800611c:	e00b      	b.n	8006136 <HAL_RCC_OscConfig+0x32a>
 800611e:	4b71      	ldr	r3, [pc, #452]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	4a70      	ldr	r2, [pc, #448]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	6713      	str	r3, [r2, #112]	; 0x70
 800612a:	4b6e      	ldr	r3, [pc, #440]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a6d      	ldr	r2, [pc, #436]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d015      	beq.n	800616a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613e:	f7fe fb2d 	bl	800479c <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	e00a      	b.n	800615c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fe fb29 	bl	800479c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0bc      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615c:	4b61      	ldr	r3, [pc, #388]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0ee      	beq.n	8006146 <HAL_RCC_OscConfig+0x33a>
 8006168:	e014      	b.n	8006194 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616a:	f7fe fb17 	bl	800479c <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006170:	e00a      	b.n	8006188 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006172:	f7fe fb13 	bl	800479c <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006180:	4293      	cmp	r3, r2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e0a6      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006188:	4b56      	ldr	r3, [pc, #344]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ee      	bne.n	8006172 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619a:	4b52      	ldr	r3, [pc, #328]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	4a51      	ldr	r2, [pc, #324]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 80061a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8092 	beq.w	80062d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061b0:	4b4c      	ldr	r3, [pc, #304]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d05c      	beq.n	8006276 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d141      	bne.n	8006248 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c4:	4b48      	ldr	r3, [pc, #288]	; (80062e8 <HAL_RCC_OscConfig+0x4dc>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ca:	f7fe fae7 	bl	800479c <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d2:	f7fe fae3 	bl	800479c <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e078      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e4:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	019b      	lsls	r3, r3, #6
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	4933      	ldr	r1, [pc, #204]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006216:	4313      	orrs	r3, r2
 8006218:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800621a:	4b33      	ldr	r3, [pc, #204]	; (80062e8 <HAL_RCC_OscConfig+0x4dc>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fe fabc 	bl	800479c <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006228:	f7fe fab8 	bl	800479c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e04d      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623a:	4b2a      	ldr	r3, [pc, #168]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x41c>
 8006246:	e045      	b.n	80062d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006248:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_RCC_OscConfig+0x4dc>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624e:	f7fe faa5 	bl	800479c <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006256:	f7fe faa1 	bl	800479c <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e036      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006268:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f0      	bne.n	8006256 <HAL_RCC_OscConfig+0x44a>
 8006274:	e02e      	b.n	80062d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e029      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006282:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <HAL_RCC_OscConfig+0x4d8>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	429a      	cmp	r2, r3
 8006294:	d11c      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d115      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062aa:	4013      	ands	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10d      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062be:	429a      	cmp	r2, r3
 80062c0:	d106      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d001      	beq.n	80062d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40007000 	.word	0x40007000
 80062e4:	40023800 	.word	0x40023800
 80062e8:	42470060 	.word	0x42470060

080062ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0cc      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006300:	4b68      	ldr	r3, [pc, #416]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d90c      	bls.n	8006328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b65      	ldr	r3, [pc, #404]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0b8      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006340:	4b59      	ldr	r3, [pc, #356]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	4a58      	ldr	r2, [pc, #352]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800634a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006358:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006364:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	494d      	ldr	r1, [pc, #308]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d044      	beq.n	800640c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d119      	bne.n	80063ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07f      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d003      	beq.n	80063aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d107      	bne.n	80063ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063aa:	4b3f      	ldr	r3, [pc, #252]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e06f      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ba:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e067      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ca:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f023 0203 	bic.w	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4934      	ldr	r1, [pc, #208]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063dc:	f7fe f9de 	bl	800479c <HAL_GetTick>
 80063e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e4:	f7fe f9da 	bl	800479c <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e04f      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fa:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 020c 	and.w	r2, r3, #12
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	429a      	cmp	r2, r3
 800640a:	d1eb      	bne.n	80063e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d20c      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e032      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4916      	ldr	r1, [pc, #88]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	490e      	ldr	r1, [pc, #56]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006472:	f000 f821 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 8006476:	4601      	mov	r1, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <HAL_RCC_ClockConfig+0x1c0>)
 8006484:	5cd3      	ldrb	r3, [r2, r3]
 8006486:	fa21 f303 	lsr.w	r3, r1, r3
 800648a:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <HAL_RCC_ClockConfig+0x1c4>)
 800648c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fd fe5e 	bl	8004154 <HAL_InitTick>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40023c00 	.word	0x40023c00
 80064a8:	40023800 	.word	0x40023800
 80064ac:	0800dda0 	.word	0x0800dda0
 80064b0:	20000000 	.word	0x20000000
 80064b4:	20000004 	.word	0x20000004

080064b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	607b      	str	r3, [r7, #4]
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	2300      	movs	r3, #0
 80064c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ce:	4b63      	ldr	r3, [pc, #396]	; (800665c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d007      	beq.n	80064ea <HAL_RCC_GetSysClockFreq+0x32>
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d008      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x38>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f040 80b4 	bne.w	800664c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064e4:	4b5e      	ldr	r3, [pc, #376]	; (8006660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064e6:	60bb      	str	r3, [r7, #8]
       break;
 80064e8:	e0b3      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ea:	4b5e      	ldr	r3, [pc, #376]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80064ec:	60bb      	str	r3, [r7, #8]
      break;
 80064ee:	e0b0      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064f0:	4b5a      	ldr	r3, [pc, #360]	; (800665c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064fa:	4b58      	ldr	r3, [pc, #352]	; (800665c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d04a      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006506:	4b55      	ldr	r3, [pc, #340]	; (800665c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	099b      	lsrs	r3, r3, #6
 800650c:	f04f 0400 	mov.w	r4, #0
 8006510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	ea03 0501 	and.w	r5, r3, r1
 800651c:	ea04 0602 	and.w	r6, r4, r2
 8006520:	4629      	mov	r1, r5
 8006522:	4632      	mov	r2, r6
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	f04f 0400 	mov.w	r4, #0
 800652c:	0154      	lsls	r4, r2, #5
 800652e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006532:	014b      	lsls	r3, r1, #5
 8006534:	4619      	mov	r1, r3
 8006536:	4622      	mov	r2, r4
 8006538:	1b49      	subs	r1, r1, r5
 800653a:	eb62 0206 	sbc.w	r2, r2, r6
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	f04f 0400 	mov.w	r4, #0
 8006546:	0194      	lsls	r4, r2, #6
 8006548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800654c:	018b      	lsls	r3, r1, #6
 800654e:	1a5b      	subs	r3, r3, r1
 8006550:	eb64 0402 	sbc.w	r4, r4, r2
 8006554:	f04f 0100 	mov.w	r1, #0
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	00e2      	lsls	r2, r4, #3
 800655e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006562:	00d9      	lsls	r1, r3, #3
 8006564:	460b      	mov	r3, r1
 8006566:	4614      	mov	r4, r2
 8006568:	195b      	adds	r3, r3, r5
 800656a:	eb44 0406 	adc.w	r4, r4, r6
 800656e:	f04f 0100 	mov.w	r1, #0
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	0262      	lsls	r2, r4, #9
 8006578:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800657c:	0259      	lsls	r1, r3, #9
 800657e:	460b      	mov	r3, r1
 8006580:	4614      	mov	r4, r2
 8006582:	4618      	mov	r0, r3
 8006584:	4621      	mov	r1, r4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f04f 0400 	mov.w	r4, #0
 800658c:	461a      	mov	r2, r3
 800658e:	4623      	mov	r3, r4
 8006590:	f7fa fae2 	bl	8000b58 <__aeabi_uldivmod>
 8006594:	4603      	mov	r3, r0
 8006596:	460c      	mov	r4, r1
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e049      	b.n	8006630 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800659c:	4b2f      	ldr	r3, [pc, #188]	; (800665c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	099b      	lsrs	r3, r3, #6
 80065a2:	f04f 0400 	mov.w	r4, #0
 80065a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	ea03 0501 	and.w	r5, r3, r1
 80065b2:	ea04 0602 	and.w	r6, r4, r2
 80065b6:	4629      	mov	r1, r5
 80065b8:	4632      	mov	r2, r6
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	f04f 0400 	mov.w	r4, #0
 80065c2:	0154      	lsls	r4, r2, #5
 80065c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065c8:	014b      	lsls	r3, r1, #5
 80065ca:	4619      	mov	r1, r3
 80065cc:	4622      	mov	r2, r4
 80065ce:	1b49      	subs	r1, r1, r5
 80065d0:	eb62 0206 	sbc.w	r2, r2, r6
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	f04f 0400 	mov.w	r4, #0
 80065dc:	0194      	lsls	r4, r2, #6
 80065de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065e2:	018b      	lsls	r3, r1, #6
 80065e4:	1a5b      	subs	r3, r3, r1
 80065e6:	eb64 0402 	sbc.w	r4, r4, r2
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	00e2      	lsls	r2, r4, #3
 80065f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065f8:	00d9      	lsls	r1, r3, #3
 80065fa:	460b      	mov	r3, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	195b      	adds	r3, r3, r5
 8006600:	eb44 0406 	adc.w	r4, r4, r6
 8006604:	f04f 0100 	mov.w	r1, #0
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	02a2      	lsls	r2, r4, #10
 800660e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006612:	0299      	lsls	r1, r3, #10
 8006614:	460b      	mov	r3, r1
 8006616:	4614      	mov	r4, r2
 8006618:	4618      	mov	r0, r3
 800661a:	4621      	mov	r1, r4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f04f 0400 	mov.w	r4, #0
 8006622:	461a      	mov	r2, r3
 8006624:	4623      	mov	r3, r4
 8006626:	f7fa fa97 	bl	8000b58 <__aeabi_uldivmod>
 800662a:	4603      	mov	r3, r0
 800662c:	460c      	mov	r4, r1
 800662e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	3301      	adds	r3, #1
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	fbb2 f3f3 	udiv	r3, r2, r3
 8006648:	60bb      	str	r3, [r7, #8]
      break;
 800664a:	e002      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800664e:	60bb      	str	r3, [r7, #8]
      break;
 8006650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006652:	68bb      	ldr	r3, [r7, #8]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	00f42400 	.word	0x00f42400
 8006664:	007a1200 	.word	0x007a1200

08006668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <HAL_RCC_GetHCLKFreq+0x14>)
 800666e:	681b      	ldr	r3, [r3, #0]
}
 8006670:	4618      	mov	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000000 	.word	0x20000000

08006680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006684:	f7ff fff0 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 8006688:	4601      	mov	r1, r0
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0a9b      	lsrs	r3, r3, #10
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	4a03      	ldr	r2, [pc, #12]	; (80066a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006696:	5cd3      	ldrb	r3, [r2, r3]
 8006698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40023800 	.word	0x40023800
 80066a4:	0800ddb0 	.word	0x0800ddb0

080066a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066ac:	f7ff ffdc 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 80066b0:	4601      	mov	r1, r0
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	0b5b      	lsrs	r3, r3, #13
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	4a03      	ldr	r2, [pc, #12]	; (80066cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066be:	5cd3      	ldrb	r3, [r2, r3]
 80066c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40023800 	.word	0x40023800
 80066cc:	0800ddb0 	.word	0x0800ddb0

080066d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	220f      	movs	r2, #15
 80066de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <HAL_RCC_GetClockConfig+0x5c>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0203 	and.w	r2, r3, #3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <HAL_RCC_GetClockConfig+0x5c>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <HAL_RCC_GetClockConfig+0x5c>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006704:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_RCC_GetClockConfig+0x5c>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	08db      	lsrs	r3, r3, #3
 800670a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <HAL_RCC_GetClockConfig+0x60>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 020f 	and.w	r2, r3, #15
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	601a      	str	r2, [r3, #0]
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800
 8006730:	40023c00 	.word	0x40023c00

08006734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e01d      	b.n	8006782 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fd feb8 	bl	80044d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f000 fb8e 	bl	8006e94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0201 	orr.w	r2, r2, #1
 80067a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b06      	cmp	r3, #6
 80067b2:	d007      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e01d      	b.n	8006820 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f815 	bl	8006828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3304      	adds	r3, #4
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f000 fb3f 	bl	8006e94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2201      	movs	r2, #1
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fdc6 	bl	80073e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a10      	ldr	r2, [pc, #64]	; (800689c <HAL_TIM_PWM_Start+0x60>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d107      	bne.n	800686e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b06      	cmp	r3, #6
 800687e:	d007      	beq.n	8006890 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000

080068a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2200      	movs	r2, #0
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fd94 	bl	80073e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <HAL_TIM_PWM_Stop+0x94>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d117      	bne.n	80068f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80068cc:	4013      	ands	r3, r2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10f      	bne.n	80068f2 <HAL_TIM_PWM_Stop+0x52>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	f240 4344 	movw	r3, #1092	; 0x444
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_PWM_Stop+0x52>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <HAL_TIM_PWM_Stop+0x82>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a1a      	ldr	r2, [r3, #32]
 8006908:	f240 4344 	movw	r3, #1092	; 0x444
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d107      	bne.n	8006922 <HAL_TIM_PWM_Stop+0x82>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40010000 	.word	0x40010000

08006938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b02      	cmp	r3, #2
 800694c:	d122      	bne.n	8006994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b02      	cmp	r3, #2
 800695a:	d11b      	bne.n	8006994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0202 	mvn.w	r2, #2
 8006964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa6b 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006980:	e005      	b.n	800698e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa5d 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa6e 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d122      	bne.n	80069e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d11b      	bne.n	80069e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0204 	mvn.w	r2, #4
 80069b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa41 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa33 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fa44 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d122      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d11b      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0208 	mvn.w	r2, #8
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2204      	movs	r2, #4
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa17 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa09 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa1a 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b10      	cmp	r3, #16
 8006a48:	d122      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d11b      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0210 	mvn.w	r2, #16
 8006a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2208      	movs	r2, #8
 8006a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9ed 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9df 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f9f0 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10e      	bne.n	8006abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d107      	bne.n	8006abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0201 	mvn.w	r2, #1
 8006ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fb feb8 	bl	800282c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	2b80      	cmp	r3, #128	; 0x80
 8006ac8:	d10e      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d107      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fd1a 	bl	800751c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d10e      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d107      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f9b5 	bl	8006e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d10e      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d107      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0220 	mvn.w	r2, #32
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fce4 	bl	8007508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e0b4      	b.n	8006ccc <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	f200 809f 	bhi.w	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bb5 	.word	0x08006bb5
 8006b84:	08006cb9 	.word	0x08006cb9
 8006b88:	08006cb9 	.word	0x08006cb9
 8006b8c:	08006cb9 	.word	0x08006cb9
 8006b90:	08006bf5 	.word	0x08006bf5
 8006b94:	08006cb9 	.word	0x08006cb9
 8006b98:	08006cb9 	.word	0x08006cb9
 8006b9c:	08006cb9 	.word	0x08006cb9
 8006ba0:	08006c37 	.word	0x08006c37
 8006ba4:	08006cb9 	.word	0x08006cb9
 8006ba8:	08006cb9 	.word	0x08006cb9
 8006bac:	08006cb9 	.word	0x08006cb9
 8006bb0:	08006c77 	.word	0x08006c77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f9ea 	bl	8006f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0208 	orr.w	r2, r2, #8
 8006bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0204 	bic.w	r2, r2, #4
 8006bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6999      	ldr	r1, [r3, #24]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	619a      	str	r2, [r3, #24]
      break;
 8006bf2:	e062      	b.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fa30 	bl	8007060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	619a      	str	r2, [r3, #24]
      break;
 8006c34:	e041      	b.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fa7b 	bl	8007138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0208 	orr.w	r2, r2, #8
 8006c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0204 	bic.w	r2, r2, #4
 8006c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	61da      	str	r2, [r3, #28]
      break;
 8006c74:	e021      	b.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fac5 	bl	800720c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	021a      	lsls	r2, r3, #8
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	61da      	str	r2, [r3, #28]
      break;
 8006cb6:	e000      	b.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006cb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIM_ConfigClockSource+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e0a6      	b.n	8006e3a <HAL_TIM_ConfigClockSource+0x166>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d067      	beq.n	8006df4 <HAL_TIM_ConfigClockSource+0x120>
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d80b      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x6c>
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d073      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0x140>
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d802      	bhi.n	8006d36 <HAL_TIM_ConfigClockSource+0x62>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d06f      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d34:	e078      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d06c      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0x140>
 8006d3a:	2b30      	cmp	r3, #48	; 0x30
 8006d3c:	d06a      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d3e:	e073      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d40:	2b70      	cmp	r3, #112	; 0x70
 8006d42:	d00d      	beq.n	8006d60 <HAL_TIM_ConfigClockSource+0x8c>
 8006d44:	2b70      	cmp	r3, #112	; 0x70
 8006d46:	d804      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x7e>
 8006d48:	2b50      	cmp	r3, #80	; 0x50
 8006d4a:	d033      	beq.n	8006db4 <HAL_TIM_ConfigClockSource+0xe0>
 8006d4c:	2b60      	cmp	r3, #96	; 0x60
 8006d4e:	d041      	beq.n	8006dd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d50:	e06a      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d56:	d066      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x152>
 8006d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5c:	d017      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d5e:	e063      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6899      	ldr	r1, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f000 fb16 	bl	80073a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	609a      	str	r2, [r3, #8]
      break;
 8006d8c:	e04c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6899      	ldr	r1, [r3, #8]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f000 faff 	bl	80073a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db0:	609a      	str	r2, [r3, #8]
      break;
 8006db2:	e039      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6859      	ldr	r1, [r3, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f000 fa73 	bl	80072ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2150      	movs	r1, #80	; 0x50
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 facc 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 8006dd2:	e029      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6859      	ldr	r1, [r3, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f000 fa92 	bl	800730a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2160      	movs	r1, #96	; 0x60
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fabc 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 8006df2:	e019      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	461a      	mov	r2, r3
 8006e02:	f000 fa53 	bl	80072ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2140      	movs	r1, #64	; 0x40
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 faac 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 8006e12:	e009      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f000 faa3 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 8006e24:	e000      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a34      	ldr	r2, [pc, #208]	; (8006f78 <TIM_Base_SetConfig+0xe4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00f      	beq.n	8006ecc <TIM_Base_SetConfig+0x38>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb2:	d00b      	beq.n	8006ecc <TIM_Base_SetConfig+0x38>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a31      	ldr	r2, [pc, #196]	; (8006f7c <TIM_Base_SetConfig+0xe8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d007      	beq.n	8006ecc <TIM_Base_SetConfig+0x38>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a30      	ldr	r2, [pc, #192]	; (8006f80 <TIM_Base_SetConfig+0xec>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0x38>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <TIM_Base_SetConfig+0xf0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d108      	bne.n	8006ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <TIM_Base_SetConfig+0xe4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01b      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d017      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	; (8006f7c <TIM_Base_SetConfig+0xe8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a21      	ldr	r2, [pc, #132]	; (8006f80 <TIM_Base_SetConfig+0xec>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00f      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a20      	ldr	r2, [pc, #128]	; (8006f84 <TIM_Base_SetConfig+0xf0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1f      	ldr	r2, [pc, #124]	; (8006f88 <TIM_Base_SetConfig+0xf4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1e      	ldr	r2, [pc, #120]	; (8006f8c <TIM_Base_SetConfig+0xf8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_Base_SetConfig+0x8a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <TIM_Base_SetConfig+0xfc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d108      	bne.n	8006f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <TIM_Base_SetConfig+0xe4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d103      	bne.n	8006f64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	615a      	str	r2, [r3, #20]
}
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800

08006f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f023 0201 	bic.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f023 0302 	bic.w	r3, r3, #2
 8006fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a1c      	ldr	r2, [pc, #112]	; (800705c <TIM_OC1_SetConfig+0xc8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10c      	bne.n	800700a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0308 	bic.w	r3, r3, #8
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a13      	ldr	r2, [pc, #76]	; (800705c <TIM_OC1_SetConfig+0xc8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d111      	bne.n	8007036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40010000 	.word	0x40010000

08007060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f023 0210 	bic.w	r2, r3, #16
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 0320 	bic.w	r3, r3, #32
 80070aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1e      	ldr	r2, [pc, #120]	; (8007134 <TIM_OC2_SetConfig+0xd4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10d      	bne.n	80070dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <TIM_OC2_SetConfig+0xd4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d113      	bne.n	800710c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40010000 	.word	0x40010000

08007138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <TIM_OC3_SetConfig+0xd0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10d      	bne.n	80071b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800719c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a14      	ldr	r2, [pc, #80]	; (8007208 <TIM_OC3_SetConfig+0xd0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d113      	bne.n	80071e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	40010000 	.word	0x40010000

0800720c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <TIM_OC4_SetConfig+0x9c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d109      	bne.n	8007280 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	019b      	lsls	r3, r3, #6
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000

080072ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 030a 	bic.w	r3, r3, #10
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730a:	b480      	push	{r7}
 800730c:	b087      	sub	sp, #28
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f023 0210 	bic.w	r2, r3, #16
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	f043 0307 	orr.w	r3, r3, #7
 800738c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	609a      	str	r2, [r3, #8]
}
 80073d4:	bf00      	nop
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2201      	movs	r2, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1a      	ldr	r2, [r3, #32]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	431a      	orrs	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007440:	2302      	movs	r3, #2
 8007442:	e050      	b.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1c      	ldr	r2, [pc, #112]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d018      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007490:	d013      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a16      	ldr	r2, [pc, #88]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a15      	ldr	r2, [pc, #84]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a13      	ldr	r2, [pc, #76]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10c      	bne.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40014000 	.word	0x40014000

08007508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e03f      	b.n	80075c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fd f878 	bl	800464c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2224      	movs	r2, #36	; 0x24
 8007560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f90b 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695a      	ldr	r2, [r3, #20]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b088      	sub	sp, #32
 80075ce:	af02      	add	r7, sp, #8
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	f040 8083 	bne.w	80076f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <HAL_UART_Transmit+0x2e>
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e07b      	b.n	80076f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_UART_Transmit+0x40>
 8007606:	2302      	movs	r3, #2
 8007608:	e074      	b.n	80076f4 <HAL_UART_Transmit+0x12a>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2221      	movs	r2, #33	; 0x21
 800761c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007620:	f7fd f8bc 	bl	800479c <HAL_GetTick>
 8007624:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800763a:	e042      	b.n	80076c2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007652:	d122      	bne.n	800769a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f84c 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e042      	b.n	80076f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007680:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	3302      	adds	r3, #2
 800768e:	60bb      	str	r3, [r7, #8]
 8007690:	e017      	b.n	80076c2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3301      	adds	r3, #1
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	e013      	b.n	80076c2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2200      	movs	r2, #0
 80076a2:	2180      	movs	r1, #128	; 0x80
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f829 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e01f      	b.n	80076f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	60ba      	str	r2, [r7, #8]
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1b7      	bne.n	800763c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2140      	movs	r1, #64	; 0x40
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f810 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e006      	b.n	80076f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770c:	e02c      	b.n	8007768 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d028      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <UART_WaitOnFlagUntilTimeout+0x30>
 800771c:	f7fd f83e 	bl	800479c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d21d      	bcs.n	8007768 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800773a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695a      	ldr	r2, [r3, #20]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e00f      	b.n	8007788 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4013      	ands	r3, r2
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	429a      	cmp	r2, r3
 8007776:	bf0c      	ite	eq
 8007778:	2301      	moveq	r3, #1
 800777a:	2300      	movne	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	429a      	cmp	r2, r3
 8007784:	d0c3      	beq.n	800770e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80077d2:	f023 030c 	bic.w	r3, r3, #12
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	430b      	orrs	r3, r1
 80077de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fe:	f040 818b 	bne.w	8007b18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4ac1      	ldr	r2, [pc, #772]	; (8007b0c <UART_SetConfig+0x37c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d005      	beq.n	8007818 <UART_SetConfig+0x88>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4abf      	ldr	r2, [pc, #764]	; (8007b10 <UART_SetConfig+0x380>)
 8007812:	4293      	cmp	r3, r2
 8007814:	f040 80bd 	bne.w	8007992 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007818:	f7fe ff46 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
 800781c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	461d      	mov	r5, r3
 8007822:	f04f 0600 	mov.w	r6, #0
 8007826:	46a8      	mov	r8, r5
 8007828:	46b1      	mov	r9, r6
 800782a:	eb18 0308 	adds.w	r3, r8, r8
 800782e:	eb49 0409 	adc.w	r4, r9, r9
 8007832:	4698      	mov	r8, r3
 8007834:	46a1      	mov	r9, r4
 8007836:	eb18 0805 	adds.w	r8, r8, r5
 800783a:	eb49 0906 	adc.w	r9, r9, r6
 800783e:	f04f 0100 	mov.w	r1, #0
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800784a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800784e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007852:	4688      	mov	r8, r1
 8007854:	4691      	mov	r9, r2
 8007856:	eb18 0005 	adds.w	r0, r8, r5
 800785a:	eb49 0106 	adc.w	r1, r9, r6
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	461d      	mov	r5, r3
 8007864:	f04f 0600 	mov.w	r6, #0
 8007868:	196b      	adds	r3, r5, r5
 800786a:	eb46 0406 	adc.w	r4, r6, r6
 800786e:	461a      	mov	r2, r3
 8007870:	4623      	mov	r3, r4
 8007872:	f7f9 f971 	bl	8000b58 <__aeabi_uldivmod>
 8007876:	4603      	mov	r3, r0
 8007878:	460c      	mov	r4, r1
 800787a:	461a      	mov	r2, r3
 800787c:	4ba5      	ldr	r3, [pc, #660]	; (8007b14 <UART_SetConfig+0x384>)
 800787e:	fba3 2302 	umull	r2, r3, r3, r2
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	461d      	mov	r5, r3
 800788c:	f04f 0600 	mov.w	r6, #0
 8007890:	46a9      	mov	r9, r5
 8007892:	46b2      	mov	sl, r6
 8007894:	eb19 0309 	adds.w	r3, r9, r9
 8007898:	eb4a 040a 	adc.w	r4, sl, sl
 800789c:	4699      	mov	r9, r3
 800789e:	46a2      	mov	sl, r4
 80078a0:	eb19 0905 	adds.w	r9, r9, r5
 80078a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078bc:	4689      	mov	r9, r1
 80078be:	4692      	mov	sl, r2
 80078c0:	eb19 0005 	adds.w	r0, r9, r5
 80078c4:	eb4a 0106 	adc.w	r1, sl, r6
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	461d      	mov	r5, r3
 80078ce:	f04f 0600 	mov.w	r6, #0
 80078d2:	196b      	adds	r3, r5, r5
 80078d4:	eb46 0406 	adc.w	r4, r6, r6
 80078d8:	461a      	mov	r2, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	f7f9 f93c 	bl	8000b58 <__aeabi_uldivmod>
 80078e0:	4603      	mov	r3, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	461a      	mov	r2, r3
 80078e6:	4b8b      	ldr	r3, [pc, #556]	; (8007b14 <UART_SetConfig+0x384>)
 80078e8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	2164      	movs	r1, #100	; 0x64
 80078f0:	fb01 f303 	mul.w	r3, r1, r3
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	3332      	adds	r3, #50	; 0x32
 80078fa:	4a86      	ldr	r2, [pc, #536]	; (8007b14 <UART_SetConfig+0x384>)
 80078fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007908:	4498      	add	r8, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	461d      	mov	r5, r3
 800790e:	f04f 0600 	mov.w	r6, #0
 8007912:	46a9      	mov	r9, r5
 8007914:	46b2      	mov	sl, r6
 8007916:	eb19 0309 	adds.w	r3, r9, r9
 800791a:	eb4a 040a 	adc.w	r4, sl, sl
 800791e:	4699      	mov	r9, r3
 8007920:	46a2      	mov	sl, r4
 8007922:	eb19 0905 	adds.w	r9, r9, r5
 8007926:	eb4a 0a06 	adc.w	sl, sl, r6
 800792a:	f04f 0100 	mov.w	r1, #0
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007936:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800793a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800793e:	4689      	mov	r9, r1
 8007940:	4692      	mov	sl, r2
 8007942:	eb19 0005 	adds.w	r0, r9, r5
 8007946:	eb4a 0106 	adc.w	r1, sl, r6
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	461d      	mov	r5, r3
 8007950:	f04f 0600 	mov.w	r6, #0
 8007954:	196b      	adds	r3, r5, r5
 8007956:	eb46 0406 	adc.w	r4, r6, r6
 800795a:	461a      	mov	r2, r3
 800795c:	4623      	mov	r3, r4
 800795e:	f7f9 f8fb 	bl	8000b58 <__aeabi_uldivmod>
 8007962:	4603      	mov	r3, r0
 8007964:	460c      	mov	r4, r1
 8007966:	461a      	mov	r2, r3
 8007968:	4b6a      	ldr	r3, [pc, #424]	; (8007b14 <UART_SetConfig+0x384>)
 800796a:	fba3 1302 	umull	r1, r3, r3, r2
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	2164      	movs	r1, #100	; 0x64
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	3332      	adds	r3, #50	; 0x32
 800797c:	4a65      	ldr	r2, [pc, #404]	; (8007b14 <UART_SetConfig+0x384>)
 800797e:	fba2 2303 	umull	r2, r3, r2, r3
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	f003 0207 	and.w	r2, r3, #7
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4442      	add	r2, r8
 800798e:	609a      	str	r2, [r3, #8]
 8007990:	e26f      	b.n	8007e72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007992:	f7fe fe75 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8007996:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	461d      	mov	r5, r3
 800799c:	f04f 0600 	mov.w	r6, #0
 80079a0:	46a8      	mov	r8, r5
 80079a2:	46b1      	mov	r9, r6
 80079a4:	eb18 0308 	adds.w	r3, r8, r8
 80079a8:	eb49 0409 	adc.w	r4, r9, r9
 80079ac:	4698      	mov	r8, r3
 80079ae:	46a1      	mov	r9, r4
 80079b0:	eb18 0805 	adds.w	r8, r8, r5
 80079b4:	eb49 0906 	adc.w	r9, r9, r6
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079cc:	4688      	mov	r8, r1
 80079ce:	4691      	mov	r9, r2
 80079d0:	eb18 0005 	adds.w	r0, r8, r5
 80079d4:	eb49 0106 	adc.w	r1, r9, r6
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	461d      	mov	r5, r3
 80079de:	f04f 0600 	mov.w	r6, #0
 80079e2:	196b      	adds	r3, r5, r5
 80079e4:	eb46 0406 	adc.w	r4, r6, r6
 80079e8:	461a      	mov	r2, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	f7f9 f8b4 	bl	8000b58 <__aeabi_uldivmod>
 80079f0:	4603      	mov	r3, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	461a      	mov	r2, r3
 80079f6:	4b47      	ldr	r3, [pc, #284]	; (8007b14 <UART_SetConfig+0x384>)
 80079f8:	fba3 2302 	umull	r2, r3, r3, r2
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	461d      	mov	r5, r3
 8007a06:	f04f 0600 	mov.w	r6, #0
 8007a0a:	46a9      	mov	r9, r5
 8007a0c:	46b2      	mov	sl, r6
 8007a0e:	eb19 0309 	adds.w	r3, r9, r9
 8007a12:	eb4a 040a 	adc.w	r4, sl, sl
 8007a16:	4699      	mov	r9, r3
 8007a18:	46a2      	mov	sl, r4
 8007a1a:	eb19 0905 	adds.w	r9, r9, r5
 8007a1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a36:	4689      	mov	r9, r1
 8007a38:	4692      	mov	sl, r2
 8007a3a:	eb19 0005 	adds.w	r0, r9, r5
 8007a3e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	461d      	mov	r5, r3
 8007a48:	f04f 0600 	mov.w	r6, #0
 8007a4c:	196b      	adds	r3, r5, r5
 8007a4e:	eb46 0406 	adc.w	r4, r6, r6
 8007a52:	461a      	mov	r2, r3
 8007a54:	4623      	mov	r3, r4
 8007a56:	f7f9 f87f 	bl	8000b58 <__aeabi_uldivmod>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b2c      	ldr	r3, [pc, #176]	; (8007b14 <UART_SetConfig+0x384>)
 8007a62:	fba3 1302 	umull	r1, r3, r3, r2
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	2164      	movs	r1, #100	; 0x64
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	3332      	adds	r3, #50	; 0x32
 8007a74:	4a27      	ldr	r2, [pc, #156]	; (8007b14 <UART_SetConfig+0x384>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a82:	4498      	add	r8, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	461d      	mov	r5, r3
 8007a88:	f04f 0600 	mov.w	r6, #0
 8007a8c:	46a9      	mov	r9, r5
 8007a8e:	46b2      	mov	sl, r6
 8007a90:	eb19 0309 	adds.w	r3, r9, r9
 8007a94:	eb4a 040a 	adc.w	r4, sl, sl
 8007a98:	4699      	mov	r9, r3
 8007a9a:	46a2      	mov	sl, r4
 8007a9c:	eb19 0905 	adds.w	r9, r9, r5
 8007aa0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007aa4:	f04f 0100 	mov.w	r1, #0
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ab4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ab8:	4689      	mov	r9, r1
 8007aba:	4692      	mov	sl, r2
 8007abc:	eb19 0005 	adds.w	r0, r9, r5
 8007ac0:	eb4a 0106 	adc.w	r1, sl, r6
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	461d      	mov	r5, r3
 8007aca:	f04f 0600 	mov.w	r6, #0
 8007ace:	196b      	adds	r3, r5, r5
 8007ad0:	eb46 0406 	adc.w	r4, r6, r6
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	f7f9 f83e 	bl	8000b58 <__aeabi_uldivmod>
 8007adc:	4603      	mov	r3, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <UART_SetConfig+0x384>)
 8007ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	2164      	movs	r1, #100	; 0x64
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	3332      	adds	r3, #50	; 0x32
 8007af6:	4a07      	ldr	r2, [pc, #28]	; (8007b14 <UART_SetConfig+0x384>)
 8007af8:	fba2 2303 	umull	r2, r3, r2, r3
 8007afc:	095b      	lsrs	r3, r3, #5
 8007afe:	f003 0207 	and.w	r2, r3, #7
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4442      	add	r2, r8
 8007b08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b0a:	e1b2      	b.n	8007e72 <UART_SetConfig+0x6e2>
 8007b0c:	40011000 	.word	0x40011000
 8007b10:	40011400 	.word	0x40011400
 8007b14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4ad7      	ldr	r2, [pc, #860]	; (8007e7c <UART_SetConfig+0x6ec>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d005      	beq.n	8007b2e <UART_SetConfig+0x39e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4ad6      	ldr	r2, [pc, #856]	; (8007e80 <UART_SetConfig+0x6f0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	f040 80d1 	bne.w	8007cd0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b2e:	f7fe fdbb 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
 8007b32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	469a      	mov	sl, r3
 8007b38:	f04f 0b00 	mov.w	fp, #0
 8007b3c:	46d0      	mov	r8, sl
 8007b3e:	46d9      	mov	r9, fp
 8007b40:	eb18 0308 	adds.w	r3, r8, r8
 8007b44:	eb49 0409 	adc.w	r4, r9, r9
 8007b48:	4698      	mov	r8, r3
 8007b4a:	46a1      	mov	r9, r4
 8007b4c:	eb18 080a 	adds.w	r8, r8, sl
 8007b50:	eb49 090b 	adc.w	r9, r9, fp
 8007b54:	f04f 0100 	mov.w	r1, #0
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b68:	4688      	mov	r8, r1
 8007b6a:	4691      	mov	r9, r2
 8007b6c:	eb1a 0508 	adds.w	r5, sl, r8
 8007b70:	eb4b 0609 	adc.w	r6, fp, r9
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	f04f 0400 	mov.w	r4, #0
 8007b86:	0094      	lsls	r4, r2, #2
 8007b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4623      	mov	r3, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	4631      	mov	r1, r6
 8007b96:	f7f8 ffdf 	bl	8000b58 <__aeabi_uldivmod>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4bb8      	ldr	r3, [pc, #736]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	469b      	mov	fp, r3
 8007bb0:	f04f 0c00 	mov.w	ip, #0
 8007bb4:	46d9      	mov	r9, fp
 8007bb6:	46e2      	mov	sl, ip
 8007bb8:	eb19 0309 	adds.w	r3, r9, r9
 8007bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8007bc0:	4699      	mov	r9, r3
 8007bc2:	46a2      	mov	sl, r4
 8007bc4:	eb19 090b 	adds.w	r9, r9, fp
 8007bc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007be0:	4689      	mov	r9, r1
 8007be2:	4692      	mov	sl, r2
 8007be4:	eb1b 0509 	adds.w	r5, fp, r9
 8007be8:	eb4c 060a 	adc.w	r6, ip, sl
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	f04f 0400 	mov.w	r4, #0
 8007bfe:	0094      	lsls	r4, r2, #2
 8007c00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c04:	008b      	lsls	r3, r1, #2
 8007c06:	461a      	mov	r2, r3
 8007c08:	4623      	mov	r3, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	f7f8 ffa3 	bl	8000b58 <__aeabi_uldivmod>
 8007c12:	4603      	mov	r3, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	461a      	mov	r2, r3
 8007c18:	4b9a      	ldr	r3, [pc, #616]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	2164      	movs	r1, #100	; 0x64
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	3332      	adds	r3, #50	; 0x32
 8007c2c:	4a95      	ldr	r2, [pc, #596]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c38:	4498      	add	r8, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	469b      	mov	fp, r3
 8007c3e:	f04f 0c00 	mov.w	ip, #0
 8007c42:	46d9      	mov	r9, fp
 8007c44:	46e2      	mov	sl, ip
 8007c46:	eb19 0309 	adds.w	r3, r9, r9
 8007c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c4e:	4699      	mov	r9, r3
 8007c50:	46a2      	mov	sl, r4
 8007c52:	eb19 090b 	adds.w	r9, r9, fp
 8007c56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c6e:	4689      	mov	r9, r1
 8007c70:	4692      	mov	sl, r2
 8007c72:	eb1b 0509 	adds.w	r5, fp, r9
 8007c76:	eb4c 060a 	adc.w	r6, ip, sl
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	0094      	lsls	r4, r2, #2
 8007c8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4623      	mov	r3, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	f7f8 ff5c 	bl	8000b58 <__aeabi_uldivmod>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4b77      	ldr	r3, [pc, #476]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	2164      	movs	r1, #100	; 0x64
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	3332      	adds	r3, #50	; 0x32
 8007cba:	4a72      	ldr	r2, [pc, #456]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 020f 	and.w	r2, r3, #15
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4442      	add	r2, r8
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	e0d0      	b.n	8007e72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fe fcd6 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8007cd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	469a      	mov	sl, r3
 8007cda:	f04f 0b00 	mov.w	fp, #0
 8007cde:	46d0      	mov	r8, sl
 8007ce0:	46d9      	mov	r9, fp
 8007ce2:	eb18 0308 	adds.w	r3, r8, r8
 8007ce6:	eb49 0409 	adc.w	r4, r9, r9
 8007cea:	4698      	mov	r8, r3
 8007cec:	46a1      	mov	r9, r4
 8007cee:	eb18 080a 	adds.w	r8, r8, sl
 8007cf2:	eb49 090b 	adc.w	r9, r9, fp
 8007cf6:	f04f 0100 	mov.w	r1, #0
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d0a:	4688      	mov	r8, r1
 8007d0c:	4691      	mov	r9, r2
 8007d0e:	eb1a 0508 	adds.w	r5, sl, r8
 8007d12:	eb4b 0609 	adc.w	r6, fp, r9
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	0094      	lsls	r4, r2, #2
 8007d2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d2e:	008b      	lsls	r3, r1, #2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4623      	mov	r3, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	4631      	mov	r1, r6
 8007d38:	f7f8 ff0e 	bl	8000b58 <__aeabi_uldivmod>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b50      	ldr	r3, [pc, #320]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007d44:	fba3 2302 	umull	r2, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	469b      	mov	fp, r3
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	46d9      	mov	r9, fp
 8007d58:	46e2      	mov	sl, ip
 8007d5a:	eb19 0309 	adds.w	r3, r9, r9
 8007d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d62:	4699      	mov	r9, r3
 8007d64:	46a2      	mov	sl, r4
 8007d66:	eb19 090b 	adds.w	r9, r9, fp
 8007d6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d82:	4689      	mov	r9, r1
 8007d84:	4692      	mov	sl, r2
 8007d86:	eb1b 0509 	adds.w	r5, fp, r9
 8007d8a:	eb4c 060a 	adc.w	r6, ip, sl
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	f04f 0400 	mov.w	r4, #0
 8007da0:	0094      	lsls	r4, r2, #2
 8007da2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007da6:	008b      	lsls	r3, r1, #2
 8007da8:	461a      	mov	r2, r3
 8007daa:	4623      	mov	r3, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	4631      	mov	r1, r6
 8007db0:	f7f8 fed2 	bl	8000b58 <__aeabi_uldivmod>
 8007db4:	4603      	mov	r3, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b32      	ldr	r3, [pc, #200]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	2164      	movs	r1, #100	; 0x64
 8007dc4:	fb01 f303 	mul.w	r3, r1, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	3332      	adds	r3, #50	; 0x32
 8007dce:	4a2d      	ldr	r2, [pc, #180]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dda:	4498      	add	r8, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	469b      	mov	fp, r3
 8007de0:	f04f 0c00 	mov.w	ip, #0
 8007de4:	46d9      	mov	r9, fp
 8007de6:	46e2      	mov	sl, ip
 8007de8:	eb19 0309 	adds.w	r3, r9, r9
 8007dec:	eb4a 040a 	adc.w	r4, sl, sl
 8007df0:	4699      	mov	r9, r3
 8007df2:	46a2      	mov	sl, r4
 8007df4:	eb19 090b 	adds.w	r9, r9, fp
 8007df8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dfc:	f04f 0100 	mov.w	r1, #0
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e10:	4689      	mov	r9, r1
 8007e12:	4692      	mov	sl, r2
 8007e14:	eb1b 0509 	adds.w	r5, fp, r9
 8007e18:	eb4c 060a 	adc.w	r6, ip, sl
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4619      	mov	r1, r3
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	f04f 0400 	mov.w	r4, #0
 8007e2e:	0094      	lsls	r4, r2, #2
 8007e30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e34:	008b      	lsls	r3, r1, #2
 8007e36:	461a      	mov	r2, r3
 8007e38:	4623      	mov	r3, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	f7f8 fe8b 	bl	8000b58 <__aeabi_uldivmod>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	461a      	mov	r2, r3
 8007e48:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	2164      	movs	r1, #100	; 0x64
 8007e52:	fb01 f303 	mul.w	r3, r1, r3
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	3332      	adds	r3, #50	; 0x32
 8007e5c:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <UART_SetConfig+0x6f4>)
 8007e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	f003 020f 	and.w	r2, r3, #15
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4442      	add	r2, r8
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	e7ff      	b.n	8007e72 <UART_SetConfig+0x6e2>
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	40011000 	.word	0x40011000
 8007e80:	40011400 	.word	0x40011400
 8007e84:	51eb851f 	.word	0x51eb851f

08007e88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007e8c:	bf00      	nop
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e9e:	f3ef 8305 	mrs	r3, IPSR
 8007ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10f      	bne.n	8007eca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8007eae:	607b      	str	r3, [r7, #4]
  return(result);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007eba:	603b      	str	r3, [r7, #0]
  return(result);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <osKernelInitialize+0x3a>
 8007ec2:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <osKernelInitialize+0x64>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d103      	bne.n	8007ed2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007eca:	f06f 0305 	mvn.w	r3, #5
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e00c      	b.n	8007eec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <osKernelInitialize+0x64>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d105      	bne.n	8007ee6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <osKernelInitialize+0x64>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e002      	b.n	8007eec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000200 	.word	0x20000200

08007f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f06:	f3ef 8305 	mrs	r3, IPSR
 8007f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f12:	f3ef 8310 	mrs	r3, PRIMASK
 8007f16:	607b      	str	r3, [r7, #4]
  return(result);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8007f22:	603b      	str	r3, [r7, #0]
  return(result);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <osKernelStart+0x3a>
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	; (8007f68 <osKernelStart+0x68>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d103      	bne.n	8007f3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007f32:	f06f 0305 	mvn.w	r3, #5
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e010      	b.n	8007f5c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <osKernelStart+0x68>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d109      	bne.n	8007f56 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f42:	f7ff ffa1 	bl	8007e88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f46:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <osKernelStart+0x68>)
 8007f48:	2202      	movs	r2, #2
 8007f4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f4c:	f002 f84e 	bl	8009fec <vTaskStartScheduler>
      stat = osOK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e002      	b.n	8007f5c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000200 	.word	0x20000200

08007f6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b090      	sub	sp, #64	; 0x40
 8007f70:	af04      	add	r7, sp, #16
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f7c:	f3ef 8305 	mrs	r3, IPSR
 8007f80:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f82:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 808f 	bne.w	80080a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d105      	bne.n	8007fa2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f96:	f3ef 8311 	mrs	r3, BASEPRI
 8007f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <osThreadNew+0x3e>
 8007fa2:	4b44      	ldr	r3, [pc, #272]	; (80080b4 <osThreadNew+0x148>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d07e      	beq.n	80080a8 <osThreadNew+0x13c>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d07b      	beq.n	80080a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007fb4:	2318      	movs	r3, #24
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d045      	beq.n	8008054 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <osThreadNew+0x6a>
        name = attr->name;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <osThreadNew+0x90>
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	2b38      	cmp	r3, #56	; 0x38
 8007fee:	d805      	bhi.n	8007ffc <osThreadNew+0x90>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <osThreadNew+0x94>
        return (NULL);
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e054      	b.n	80080aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	089b      	lsrs	r3, r3, #2
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <osThreadNew+0xca>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b5b      	cmp	r3, #91	; 0x5b
 800801e:	d90a      	bls.n	8008036 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008024:	2b00      	cmp	r3, #0
 8008026:	d006      	beq.n	8008036 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <osThreadNew+0xca>
        mem = 1;
 8008030:	2301      	movs	r3, #1
 8008032:	623b      	str	r3, [r7, #32]
 8008034:	e010      	b.n	8008058 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10c      	bne.n	8008058 <osThreadNew+0xec>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d108      	bne.n	8008058 <osThreadNew+0xec>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <osThreadNew+0xec>
          mem = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	623b      	str	r3, [r7, #32]
 8008052:	e001      	b.n	8008058 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d110      	bne.n	8008080 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008066:	9202      	str	r2, [sp, #8]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 fde7 	bl	8009c48 <xTaskCreateStatic>
 800807a:	4603      	mov	r3, r0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e013      	b.n	80080a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d110      	bne.n	80080a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	b29a      	uxth	r2, r3
 800808a:	f107 0310 	add.w	r3, r7, #16
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f001 fe2f 	bl	8009cfc <xTaskCreate>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <osThreadNew+0x13c>
          hTask = NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080a8:	693b      	ldr	r3, [r7, #16]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3730      	adds	r7, #48	; 0x30
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000200 	.word	0x20000200

080080b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c0:	f3ef 8305 	mrs	r3, IPSR
 80080c4:	613b      	str	r3, [r7, #16]
  return(result);
 80080c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10f      	bne.n	80080ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080cc:	f3ef 8310 	mrs	r3, PRIMASK
 80080d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080d8:	f3ef 8311 	mrs	r3, BASEPRI
 80080dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <osDelay+0x3c>
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <osDelay+0x58>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d103      	bne.n	80080f4 <osDelay+0x3c>
    stat = osErrorISR;
 80080ec:	f06f 0305 	mvn.w	r3, #5
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e007      	b.n	8008104 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <osDelay+0x4c>
      vTaskDelay(ticks);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 ff40 	bl	8009f84 <vTaskDelay>
    }
  }

  return (stat);
 8008104:	697b      	ldr	r3, [r7, #20]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000200 	.word	0x20000200

08008114 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800811c:	2300      	movs	r3, #0
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008120:	f3ef 8305 	mrs	r3, IPSR
 8008124:	613b      	str	r3, [r7, #16]
  return(result);
 8008126:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 8085 	bne.w	8008238 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800812e:	f3ef 8310 	mrs	r3, PRIMASK
 8008132:	60fb      	str	r3, [r7, #12]
  return(result);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800813a:	f3ef 8311 	mrs	r3, BASEPRI
 800813e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <osMutexNew+0x3a>
 8008146:	4b3f      	ldr	r3, [pc, #252]	; (8008244 <osMutexNew+0x130>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d074      	beq.n	8008238 <osMutexNew+0x124>
    if (attr != NULL) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	e001      	b.n	8008160 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <osMutexNew+0x5c>
      rmtx = 1U;
 800816a:	2301      	movs	r3, #1
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	e001      	b.n	8008174 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d15c      	bne.n	8008238 <osMutexNew+0x124>
      mem = -1;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d015      	beq.n	80081b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <osMutexNew+0x8c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b4f      	cmp	r3, #79	; 0x4f
 8008198:	d902      	bls.n	80081a0 <osMutexNew+0x8c>
          mem = 1;
 800819a:	2301      	movs	r3, #1
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e00c      	b.n	80081ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d108      	bne.n	80081ba <osMutexNew+0xa6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <osMutexNew+0xa6>
            mem = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	e001      	b.n	80081ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d112      	bne.n	80081e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	4619      	mov	r1, r3
 80081cc:	2004      	movs	r0, #4
 80081ce:	f000 fe08 	bl	8008de2 <xQueueCreateMutexStatic>
 80081d2:	6278      	str	r0, [r7, #36]	; 0x24
 80081d4:	e016      	b.n	8008204 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	4619      	mov	r1, r3
 80081dc:	2001      	movs	r0, #1
 80081de:	f000 fe00 	bl	8008de2 <xQueueCreateMutexStatic>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24
 80081e4:	e00e      	b.n	8008204 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10b      	bne.n	8008204 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80081f2:	2004      	movs	r0, #4
 80081f4:	f000 fddd 	bl	8008db2 <xQueueCreateMutex>
 80081f8:	6278      	str	r0, [r7, #36]	; 0x24
 80081fa:	e003      	b.n	8008204 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80081fc:	2001      	movs	r0, #1
 80081fe:	f000 fdd8 	bl	8008db2 <xQueueCreateMutex>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00c      	beq.n	8008224 <osMutexNew+0x110>
        if (attr != NULL) {
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <osMutexNew+0x104>
          name = attr->name;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e001      	b.n	800821c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800821c:	6979      	ldr	r1, [r7, #20]
 800821e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008220:	f001 fc8c 	bl	8009b3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	d006      	beq.n	8008238 <osMutexNew+0x124>
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800823a:	4618      	mov	r0, r3
 800823c:	3728      	adds	r7, #40	; 0x28
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000200 	.word	0x20000200

08008248 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008266:	f3ef 8305 	mrs	r3, IPSR
 800826a:	613b      	str	r3, [r7, #16]
  return(result);
 800826c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10f      	bne.n	8008292 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008272:	f3ef 8310 	mrs	r3, PRIMASK
 8008276:	60fb      	str	r3, [r7, #12]
  return(result);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800827e:	f3ef 8311 	mrs	r3, BASEPRI
 8008282:	60bb      	str	r3, [r7, #8]
  return(result);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <osMutexAcquire+0x52>
 800828a:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <osMutexAcquire+0xb8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d103      	bne.n	800829a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008292:	f06f 0305 	mvn.w	r3, #5
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	e02c      	b.n	80082f4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80082a0:	f06f 0303 	mvn.w	r3, #3
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e025      	b.n	80082f4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d011      	beq.n	80082d2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	69b8      	ldr	r0, [r7, #24]
 80082b2:	f000 fde4 	bl	8008e7e <xQueueTakeMutexRecursive>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d01b      	beq.n	80082f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80082c2:	f06f 0301 	mvn.w	r3, #1
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	e014      	b.n	80082f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80082ca:	f06f 0302 	mvn.w	r3, #2
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	e010      	b.n	80082f4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	69b8      	ldr	r0, [r7, #24]
 80082d6:	f001 f961 	bl	800959c <xQueueSemaphoreTake>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d009      	beq.n	80082f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80082e6:	f06f 0301 	mvn.w	r3, #1
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	e002      	b.n	80082f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80082ee:	f06f 0302 	mvn.w	r3, #2
 80082f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80082f4:	69fb      	ldr	r3, [r7, #28]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3720      	adds	r7, #32
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000200 	.word	0x20000200

08008304 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008320:	f3ef 8305 	mrs	r3, IPSR
 8008324:	613b      	str	r3, [r7, #16]
  return(result);
 8008326:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10f      	bne.n	800834c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800832c:	f3ef 8310 	mrs	r3, PRIMASK
 8008330:	60fb      	str	r3, [r7, #12]
  return(result);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008338:	f3ef 8311 	mrs	r3, BASEPRI
 800833c:	60bb      	str	r3, [r7, #8]
  return(result);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <osMutexRelease+0x50>
 8008344:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <osMutexRelease+0x9c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d103      	bne.n	8008354 <osMutexRelease+0x50>
    stat = osErrorISR;
 800834c:	f06f 0305 	mvn.w	r3, #5
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e01f      	b.n	8008394 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d103      	bne.n	8008362 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800835a:	f06f 0303 	mvn.w	r3, #3
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	e018      	b.n	8008394 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008368:	69b8      	ldr	r0, [r7, #24]
 800836a:	f000 fd55 	bl	8008e18 <xQueueGiveMutexRecursive>
 800836e:	4603      	mov	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d00f      	beq.n	8008394 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008374:	f06f 0302 	mvn.w	r3, #2
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	e00b      	b.n	8008394 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	69b8      	ldr	r0, [r7, #24]
 8008384:	f000 fe16 	bl	8008fb4 <xQueueGenericSend>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d002      	beq.n	8008394 <osMutexRelease+0x90>
        stat = osErrorResource;
 800838e:	f06f 0302 	mvn.w	r3, #2
 8008392:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008394:	69fb      	ldr	r3, [r7, #28]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000200 	.word	0x20000200

080083a4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08c      	sub	sp, #48	; 0x30
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b4:	f3ef 8305 	mrs	r3, IPSR
 80083b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80083ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f040 8087 	bne.w	80084d0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c2:	f3ef 8310 	mrs	r3, PRIMASK
 80083c6:	617b      	str	r3, [r7, #20]
  return(result);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d105      	bne.n	80083da <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083ce:	f3ef 8311 	mrs	r3, BASEPRI
 80083d2:	613b      	str	r3, [r7, #16]
  return(result);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <osSemaphoreNew+0x3e>
 80083da:	4b40      	ldr	r3, [pc, #256]	; (80084dc <osSemaphoreNew+0x138>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d076      	beq.n	80084d0 <osSemaphoreNew+0x12c>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d073      	beq.n	80084d0 <osSemaphoreNew+0x12c>
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d86f      	bhi.n	80084d0 <osSemaphoreNew+0x12c>
    mem = -1;
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295
 80083f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d015      	beq.n	8008428 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d006      	beq.n	8008412 <osSemaphoreNew+0x6e>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	2b4f      	cmp	r3, #79	; 0x4f
 800840a:	d902      	bls.n	8008412 <osSemaphoreNew+0x6e>
        mem = 1;
 800840c:	2301      	movs	r3, #1
 800840e:	623b      	str	r3, [r7, #32]
 8008410:	e00c      	b.n	800842c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d108      	bne.n	800842c <osSemaphoreNew+0x88>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <osSemaphoreNew+0x88>
          mem = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	623b      	str	r3, [r7, #32]
 8008426:	e001      	b.n	800842c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008432:	d04d      	beq.n	80084d0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d129      	bne.n	800848e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10b      	bne.n	8008458 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	2303      	movs	r3, #3
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	2200      	movs	r2, #0
 800844c:	2100      	movs	r1, #0
 800844e:	2001      	movs	r0, #1
 8008450:	f000 fbc0 	bl	8008bd4 <xQueueGenericCreateStatic>
 8008454:	6278      	str	r0, [r7, #36]	; 0x24
 8008456:	e005      	b.n	8008464 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008458:	2203      	movs	r2, #3
 800845a:	2100      	movs	r1, #0
 800845c:	2001      	movs	r0, #1
 800845e:	f000 fc2c 	bl	8008cba <xQueueGenericCreate>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d022      	beq.n	80084b0 <osSemaphoreNew+0x10c>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01f      	beq.n	80084b0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008470:	2300      	movs	r3, #0
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008478:	f000 fd9c 	bl	8008fb4 <xQueueGenericSend>
 800847c:	4603      	mov	r3, r0
 800847e:	2b01      	cmp	r3, #1
 8008480:	d016      	beq.n	80084b0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8008482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008484:	f001 fa0f 	bl	80098a6 <vQueueDelete>
            hSemaphore = NULL;
 8008488:	2300      	movs	r3, #0
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
 800848c:	e010      	b.n	80084b0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d108      	bne.n	80084a6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	461a      	mov	r2, r3
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fd23 	bl	8008ee8 <xQueueCreateCountingSemaphoreStatic>
 80084a2:	6278      	str	r0, [r7, #36]	; 0x24
 80084a4:	e004      	b.n	80084b0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fd52 	bl	8008f52 <xQueueCreateCountingSemaphore>
 80084ae:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00c      	beq.n	80084d0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <osSemaphoreNew+0x120>
          name = attr->name;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e001      	b.n	80084c8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80084c8:	69f9      	ldr	r1, [r7, #28]
 80084ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084cc:	f001 fb36 	bl	8009b3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3728      	adds	r7, #40	; 0x28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000200 	.word	0x20000200

080084e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80084f8:	f06f 0303 	mvn.w	r3, #3
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	e04b      	b.n	8008598 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008500:	f3ef 8305 	mrs	r3, IPSR
 8008504:	617b      	str	r3, [r7, #20]
  return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10f      	bne.n	800852c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800850c:	f3ef 8310 	mrs	r3, PRIMASK
 8008510:	613b      	str	r3, [r7, #16]
  return(result);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008518:	f3ef 8311 	mrs	r3, BASEPRI
 800851c:	60fb      	str	r3, [r7, #12]
  return(result);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d026      	beq.n	8008572 <osSemaphoreAcquire+0x92>
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <osSemaphoreAcquire+0xc4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d122      	bne.n	8008572 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008532:	f06f 0303 	mvn.w	r3, #3
 8008536:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008538:	e02d      	b.n	8008596 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800853e:	f107 0308 	add.w	r3, r7, #8
 8008542:	461a      	mov	r2, r3
 8008544:	2100      	movs	r1, #0
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f001 f930 	bl	80097ac <xQueueReceiveFromISR>
 800854c:	4603      	mov	r3, r0
 800854e:	2b01      	cmp	r3, #1
 8008550:	d003      	beq.n	800855a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008552:	f06f 0302 	mvn.w	r3, #2
 8008556:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008558:	e01d      	b.n	8008596 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01a      	beq.n	8008596 <osSemaphoreAcquire+0xb6>
 8008560:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <osSemaphoreAcquire+0xc8>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008570:	e011      	b.n	8008596 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	69b8      	ldr	r0, [r7, #24]
 8008576:	f001 f811 	bl	800959c <xQueueSemaphoreTake>
 800857a:	4603      	mov	r3, r0
 800857c:	2b01      	cmp	r3, #1
 800857e:	d00b      	beq.n	8008598 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008586:	f06f 0301 	mvn.w	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
 800858c:	e004      	b.n	8008598 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800858e:	f06f 0302 	mvn.w	r3, #2
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	e000      	b.n	8008598 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008596:	bf00      	nop
      }
    }
  }

  return (stat);
 8008598:	69fb      	ldr	r3, [r7, #28]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3720      	adds	r7, #32
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000200 	.word	0x20000200
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80085c2:	f06f 0303 	mvn.w	r3, #3
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	e03e      	b.n	8008648 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ca:	f3ef 8305 	mrs	r3, IPSR
 80085ce:	617b      	str	r3, [r7, #20]
  return(result);
 80085d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10f      	bne.n	80085f6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085d6:	f3ef 8310 	mrs	r3, PRIMASK
 80085da:	613b      	str	r3, [r7, #16]
  return(result);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085e2:	f3ef 8311 	mrs	r3, BASEPRI
 80085e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01e      	beq.n	800862c <osSemaphoreRelease+0x80>
 80085ee:	4b19      	ldr	r3, [pc, #100]	; (8008654 <osSemaphoreRelease+0xa8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d11a      	bne.n	800862c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80085fa:	f107 0308 	add.w	r3, r7, #8
 80085fe:	4619      	mov	r1, r3
 8008600:	69b8      	ldr	r0, [r7, #24]
 8008602:	f000 fe65 	bl	80092d0 <xQueueGiveFromISR>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d003      	beq.n	8008614 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800860c:	f06f 0302 	mvn.w	r3, #2
 8008610:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008612:	e018      	b.n	8008646 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d015      	beq.n	8008646 <osSemaphoreRelease+0x9a>
 800861a:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <osSemaphoreRelease+0xac>)
 800861c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800862a:	e00c      	b.n	8008646 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800862c:	2300      	movs	r3, #0
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	69b8      	ldr	r0, [r7, #24]
 8008634:	f000 fcbe 	bl	8008fb4 <xQueueGenericSend>
 8008638:	4603      	mov	r3, r0
 800863a:	2b01      	cmp	r3, #1
 800863c:	d004      	beq.n	8008648 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800863e:	f06f 0302 	mvn.w	r3, #2
 8008642:	61fb      	str	r3, [r7, #28]
 8008644:	e000      	b.n	8008648 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008646:	bf00      	nop
    }
  }

  return (stat);
 8008648:	69fb      	ldr	r3, [r7, #28]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000200 	.word	0x20000200
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b08c      	sub	sp, #48	; 0x30
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800866c:	f3ef 8305 	mrs	r3, IPSR
 8008670:	61bb      	str	r3, [r7, #24]
  return(result);
 8008672:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008674:	2b00      	cmp	r3, #0
 8008676:	d170      	bne.n	800875a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008678:	f3ef 8310 	mrs	r3, PRIMASK
 800867c:	617b      	str	r3, [r7, #20]
  return(result);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008684:	f3ef 8311 	mrs	r3, BASEPRI
 8008688:	613b      	str	r3, [r7, #16]
  return(result);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <osMessageQueueNew+0x3c>
 8008690:	4b34      	ldr	r3, [pc, #208]	; (8008764 <osMessageQueueNew+0x108>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d060      	beq.n	800875a <osMessageQueueNew+0xfe>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d05d      	beq.n	800875a <osMessageQueueNew+0xfe>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d05a      	beq.n	800875a <osMessageQueueNew+0xfe>
    mem = -1;
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295
 80086a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d029      	beq.n	8008704 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d012      	beq.n	80086de <osMessageQueueNew+0x82>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b4f      	cmp	r3, #79	; 0x4f
 80086be:	d90e      	bls.n	80086de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695a      	ldr	r2, [r3, #20]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	fb01 f303 	mul.w	r3, r1, r3
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d302      	bcc.n	80086de <osMessageQueueNew+0x82>
        mem = 1;
 80086d8:	2301      	movs	r3, #1
 80086da:	623b      	str	r3, [r7, #32]
 80086dc:	e014      	b.n	8008708 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d110      	bne.n	8008708 <osMessageQueueNew+0xac>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10c      	bne.n	8008708 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d108      	bne.n	8008708 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d104      	bne.n	8008708 <osMessageQueueNew+0xac>
          mem = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	623b      	str	r3, [r7, #32]
 8008702:	e001      	b.n	8008708 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d10c      	bne.n	8008728 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691a      	ldr	r2, [r3, #16]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6899      	ldr	r1, [r3, #8]
 8008716:	2300      	movs	r3, #0
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	460b      	mov	r3, r1
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fa58 	bl	8008bd4 <xQueueGenericCreateStatic>
 8008724:	6278      	str	r0, [r7, #36]	; 0x24
 8008726:	e008      	b.n	800873a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800872e:	2200      	movs	r2, #0
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fac1 	bl	8008cba <xQueueGenericCreate>
 8008738:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00c      	beq.n	800875a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <osMessageQueueNew+0xf2>
        name = attr->name;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e001      	b.n	8008752 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008752:	69f9      	ldr	r1, [r7, #28]
 8008754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008756:	f001 f9f1 	bl	8009b3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800875c:	4618      	mov	r0, r3
 800875e:	3728      	adds	r7, #40	; 0x28
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20000200 	.word	0x20000200

08008768 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800877c:	2300      	movs	r3, #0
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008780:	f3ef 8305 	mrs	r3, IPSR
 8008784:	61fb      	str	r3, [r7, #28]
  return(result);
 8008786:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10f      	bne.n	80087ac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878c:	f3ef 8310 	mrs	r3, PRIMASK
 8008790:	61bb      	str	r3, [r7, #24]
  return(result);
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008798:	f3ef 8311 	mrs	r3, BASEPRI
 800879c:	617b      	str	r3, [r7, #20]
  return(result);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d02c      	beq.n	80087fe <osMessageQueuePut+0x96>
 80087a4:	4b28      	ldr	r3, [pc, #160]	; (8008848 <osMessageQueuePut+0xe0>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d128      	bne.n	80087fe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <osMessageQueuePut+0x56>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <osMessageQueuePut+0x56>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80087be:	f06f 0303 	mvn.w	r3, #3
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087c4:	e039      	b.n	800883a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80087ca:	f107 0210 	add.w	r2, r7, #16
 80087ce:	2300      	movs	r3, #0
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	6a38      	ldr	r0, [r7, #32]
 80087d4:	f000 fce8 	bl	80091a8 <xQueueGenericSendFromISR>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d003      	beq.n	80087e6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80087de:	f06f 0302 	mvn.w	r3, #2
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087e4:	e029      	b.n	800883a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d026      	beq.n	800883a <osMessageQueuePut+0xd2>
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <osMessageQueuePut+0xe4>)
 80087ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087fc:	e01d      	b.n	800883a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <osMessageQueuePut+0xa2>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800880a:	f06f 0303 	mvn.w	r3, #3
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
 8008810:	e014      	b.n	800883c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008812:	2300      	movs	r3, #0
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	6a38      	ldr	r0, [r7, #32]
 800881a:	f000 fbcb 	bl	8008fb4 <xQueueGenericSend>
 800881e:	4603      	mov	r3, r0
 8008820:	2b01      	cmp	r3, #1
 8008822:	d00b      	beq.n	800883c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800882a:	f06f 0301 	mvn.w	r3, #1
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
 8008830:	e004      	b.n	800883c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008832:	f06f 0302 	mvn.w	r3, #2
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
 8008838:	e000      	b.n	800883c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800883a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800883e:	4618      	mov	r0, r3
 8008840:	3728      	adds	r7, #40	; 0x28
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000200 	.word	0x20000200
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008862:	2300      	movs	r3, #0
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008866:	f3ef 8305 	mrs	r3, IPSR
 800886a:	61fb      	str	r3, [r7, #28]
  return(result);
 800886c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10f      	bne.n	8008892 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008872:	f3ef 8310 	mrs	r3, PRIMASK
 8008876:	61bb      	str	r3, [r7, #24]
  return(result);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800887e:	f3ef 8311 	mrs	r3, BASEPRI
 8008882:	617b      	str	r3, [r7, #20]
  return(result);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d02c      	beq.n	80088e4 <osMessageQueueGet+0x94>
 800888a:	4b28      	ldr	r3, [pc, #160]	; (800892c <osMessageQueueGet+0xdc>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d128      	bne.n	80088e4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <osMessageQueueGet+0x54>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <osMessageQueueGet+0x54>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80088a4:	f06f 0303 	mvn.w	r3, #3
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088aa:	e038      	b.n	800891e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80088b0:	f107 0310 	add.w	r3, r7, #16
 80088b4:	461a      	mov	r2, r3
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	6a38      	ldr	r0, [r7, #32]
 80088ba:	f000 ff77 	bl	80097ac <xQueueReceiveFromISR>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d003      	beq.n	80088cc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80088c4:	f06f 0302 	mvn.w	r3, #2
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088ca:	e028      	b.n	800891e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d025      	beq.n	800891e <osMessageQueueGet+0xce>
 80088d2:	4b17      	ldr	r3, [pc, #92]	; (8008930 <osMessageQueueGet+0xe0>)
 80088d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088e2:	e01c      	b.n	800891e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <osMessageQueueGet+0xa0>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d103      	bne.n	80088f8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80088f0:	f06f 0303 	mvn.w	r3, #3
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
 80088f6:	e013      	b.n	8008920 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	6a38      	ldr	r0, [r7, #32]
 80088fe:	f000 fd71 	bl	80093e4 <xQueueReceive>
 8008902:	4603      	mov	r3, r0
 8008904:	2b01      	cmp	r3, #1
 8008906:	d00b      	beq.n	8008920 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800890e:	f06f 0301 	mvn.w	r3, #1
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
 8008914:	e004      	b.n	8008920 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008916:	f06f 0302 	mvn.w	r3, #2
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
 800891c:	e000      	b.n	8008920 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800891e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008922:	4618      	mov	r0, r3
 8008924:	3728      	adds	r7, #40	; 0x28
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000200 	.word	0x20000200
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a07      	ldr	r2, [pc, #28]	; (8008960 <vApplicationGetIdleTaskMemory+0x2c>)
 8008944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4a06      	ldr	r2, [pc, #24]	; (8008964 <vApplicationGetIdleTaskMemory+0x30>)
 800894a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2280      	movs	r2, #128	; 0x80
 8008950:	601a      	str	r2, [r3, #0]
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20000204 	.word	0x20000204
 8008964:	20000260 	.word	0x20000260

08008968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a07      	ldr	r2, [pc, #28]	; (8008994 <vApplicationGetTimerTaskMemory+0x2c>)
 8008978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a06      	ldr	r2, [pc, #24]	; (8008998 <vApplicationGetTimerTaskMemory+0x30>)
 800897e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008986:	601a      	str	r2, [r3, #0]
}
 8008988:	bf00      	nop
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	20000460 	.word	0x20000460
 8008998:	200004bc 	.word	0x200004bc

0800899c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f103 0208 	add.w	r2, r3, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295
 80089b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f103 0208 	add.w	r2, r3, #8
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f103 0208 	add.w	r2, r3, #8
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a54:	d103      	bne.n	8008a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	e00c      	b.n	8008a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3308      	adds	r3, #8
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e002      	b.n	8008a6c <vListInsert+0x2e>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d2f6      	bcs.n	8008a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6892      	ldr	r2, [r2, #8]
 8008ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6852      	ldr	r2, [r2, #4]
 8008ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d103      	bne.n	8008ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	1e5a      	subs	r2, r3, #1
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	60bb      	str	r3, [r7, #8]
 8008b2a:	e7fe      	b.n	8008b2a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b2c:	f002 fcee 	bl	800b50c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	441a      	add	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	22ff      	movs	r2, #255	; 0xff
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	22ff      	movs	r2, #255	; 0xff
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d114      	bne.n	8008bac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01a      	beq.n	8008bc0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3310      	adds	r3, #16
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fcac 	bl	800a4ec <xTaskRemoveFromEventList>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d012      	beq.n	8008bc0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <xQueueGenericReset+0xcc>)
 8008b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	e009      	b.n	8008bc0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3310      	adds	r3, #16
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fef3 	bl	800899c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3324      	adds	r3, #36	; 0x24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff feee 	bl	800899c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bc0:	f002 fcd2 	bl	800b568 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bc4:	2301      	movs	r3, #1
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08e      	sub	sp, #56	; 0x38
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <xQueueGenericCreateStatic+0x28>
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bfa:	e7fe      	b.n	8008bfa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <xQueueGenericCreateStatic+0x42>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
 8008c14:	e7fe      	b.n	8008c14 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <xQueueGenericCreateStatic+0x4e>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <xQueueGenericCreateStatic+0x52>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e000      	b.n	8008c28 <xQueueGenericCreateStatic+0x54>
 8008c26:	2300      	movs	r3, #0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d109      	bne.n	8008c40 <xQueueGenericCreateStatic+0x6c>
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	623b      	str	r3, [r7, #32]
 8008c3e:	e7fe      	b.n	8008c3e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <xQueueGenericCreateStatic+0x78>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <xQueueGenericCreateStatic+0x7c>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <xQueueGenericCreateStatic+0x7e>
 8008c50:	2300      	movs	r3, #0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <xQueueGenericCreateStatic+0x96>
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	61fb      	str	r3, [r7, #28]
 8008c68:	e7fe      	b.n	8008c68 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c6a:	2350      	movs	r3, #80	; 0x50
 8008c6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b50      	cmp	r3, #80	; 0x50
 8008c72:	d009      	beq.n	8008c88 <xQueueGenericCreateStatic+0xb4>
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e7fe      	b.n	8008c86 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00d      	beq.n	8008cb0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f844 	bl	8008d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3730      	adds	r7, #48	; 0x30
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b08a      	sub	sp, #40	; 0x28
 8008cbe:	af02      	add	r7, sp, #8
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <xQueueGenericCreate+0x28>
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d102      	bne.n	8008cee <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e004      	b.n	8008cf8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	fb02 f303 	mul.w	r3, r2, r3
 8008cf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3350      	adds	r3, #80	; 0x50
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f002 fd1f 	bl	800b740 <pvPortMalloc>
 8008d02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d011      	beq.n	8008d2e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	3350      	adds	r3, #80	; 0x50
 8008d12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d1c:	79fa      	ldrb	r2, [r7, #7]
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	4613      	mov	r3, r2
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 f805 	bl	8008d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e002      	b.n	8008d5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d66:	2101      	movs	r1, #1
 8008d68:	69b8      	ldr	r0, [r7, #24]
 8008d6a:	f7ff fecb 	bl	8008b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00e      	beq.n	8008daa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2200      	movs	r2, #0
 8008da2:	2100      	movs	r1, #0
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f905 	bl	8008fb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	4603      	mov	r3, r0
 8008dba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6939      	ldr	r1, [r7, #16]
 8008dca:	6978      	ldr	r0, [r7, #20]
 8008dcc:	f7ff ff75 	bl	8008cba <xQueueGenericCreate>
 8008dd0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff ffd3 	bl	8008d7e <prvInitialiseMutex>

		return xNewQueue;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b088      	sub	sp, #32
 8008de6:	af02      	add	r7, sp, #8
 8008de8:	4603      	mov	r3, r0
 8008dea:	6039      	str	r1, [r7, #0]
 8008dec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008dee:	2301      	movs	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	6939      	ldr	r1, [r7, #16]
 8008e00:	6978      	ldr	r0, [r7, #20]
 8008e02:	f7ff fee7 	bl	8008bd4 <xQueueGenericCreateStatic>
 8008e06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff ffb8 	bl	8008d7e <prvInitialiseMutex>

		return xNewQueue;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <xQueueGiveMutexRecursive+0x26>
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	e7fe      	b.n	8008e3c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	689c      	ldr	r4, [r3, #8]
 8008e42:	f001 fd09 	bl	800a858 <xTaskGetCurrentTaskHandle>
 8008e46:	4603      	mov	r3, r0
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	d111      	bne.n	8008e70 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	1e5a      	subs	r2, r3, #1
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2200      	movs	r2, #0
 8008e62:	2100      	movs	r1, #0
 8008e64:	6938      	ldr	r0, [r7, #16]
 8008e66:	f000 f8a5 	bl	8008fb4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e001      	b.n	8008e74 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008e74:	697b      	ldr	r3, [r7, #20]
	}
 8008e76:	4618      	mov	r0, r3
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd90      	pop	{r4, r7, pc}

08008e7e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008e7e:	b590      	push	{r4, r7, lr}
 8008e80:	b087      	sub	sp, #28
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d109      	bne.n	8008ea6 <xQueueTakeMutexRecursive+0x28>
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e7fe      	b.n	8008ea4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	689c      	ldr	r4, [r3, #8]
 8008eaa:	f001 fcd5 	bl	800a858 <xTaskGetCurrentTaskHandle>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	d107      	bne.n	8008ec4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	e00c      	b.n	8008ede <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6938      	ldr	r0, [r7, #16]
 8008ec8:	f000 fb68 	bl	800959c <xQueueSemaphoreTake>
 8008ecc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008ede:	697b      	ldr	r3, [r7, #20]
	}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd90      	pop	{r4, r7, pc}

08008ee8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08a      	sub	sp, #40	; 0x28
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d109      	bne.n	8008f0e <xQueueCreateCountingSemaphoreStatic+0x26>
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e7fe      	b.n	8008f0c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d909      	bls.n	8008f2a <xQueueCreateCountingSemaphoreStatic+0x42>
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	e7fe      	b.n	8008f28 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fe4d 	bl	8008bd4 <xQueueGenericCreateStatic>
 8008f3a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f48:	69fb      	ldr	r3, [r7, #28]
	}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b086      	sub	sp, #24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <xQueueCreateCountingSemaphore+0x24>
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	613b      	str	r3, [r7, #16]
 8008f74:	e7fe      	b.n	8008f74 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d909      	bls.n	8008f92 <xQueueCreateCountingSemaphore+0x40>
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e7fe      	b.n	8008f90 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f92:	2202      	movs	r2, #2
 8008f94:	2100      	movs	r1, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff fe8f 	bl	8008cba <xQueueGenericCreate>
 8008f9c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008faa:	697b      	ldr	r3, [r7, #20]
	}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08e      	sub	sp, #56	; 0x38
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <xQueueGenericSend+0x30>
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fe2:	e7fe      	b.n	8008fe2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d103      	bne.n	8008ff2 <xQueueGenericSend+0x3e>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <xQueueGenericSend+0x42>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <xQueueGenericSend+0x44>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d109      	bne.n	8009010 <xQueueGenericSend+0x5c>
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
 800900e:	e7fe      	b.n	800900e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d103      	bne.n	800901e <xQueueGenericSend+0x6a>
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <xQueueGenericSend+0x6e>
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <xQueueGenericSend+0x70>
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <xQueueGenericSend+0x88>
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	e7fe      	b.n	800903a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800903c:	f001 fc1c 	bl	800a878 <xTaskGetSchedulerState>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <xQueueGenericSend+0x98>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <xQueueGenericSend+0x9c>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <xQueueGenericSend+0x9e>
 8009050:	2300      	movs	r3, #0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <xQueueGenericSend+0xb6>
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	e7fe      	b.n	8009068 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800906a:	f002 fa4f 	bl	800b50c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	429a      	cmp	r2, r3
 8009078:	d302      	bcc.n	8009080 <xQueueGenericSend+0xcc>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d129      	bne.n	80090d4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009086:	f000 fc48 	bl	800991a <prvCopyDataToQueue>
 800908a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d010      	beq.n	80090b6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	3324      	adds	r3, #36	; 0x24
 8009098:	4618      	mov	r0, r3
 800909a:	f001 fa27 	bl	800a4ec <xTaskRemoveFromEventList>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d013      	beq.n	80090cc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090a4:	4b3f      	ldr	r3, [pc, #252]	; (80091a4 <xQueueGenericSend+0x1f0>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	e00a      	b.n	80090cc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d007      	beq.n	80090cc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090bc:	4b39      	ldr	r3, [pc, #228]	; (80091a4 <xQueueGenericSend+0x1f0>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090cc:	f002 fa4c 	bl	800b568 <vPortExitCritical>
				return pdPASS;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e063      	b.n	800919c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090da:	f002 fa45 	bl	800b568 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	e05c      	b.n	800919c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 fa5f 	bl	800a5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090f2:	2301      	movs	r3, #1
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090f6:	f002 fa37 	bl	800b568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090fa:	f000 ffdb 	bl	800a0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090fe:	f002 fa05 	bl	800b50c <vPortEnterCritical>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009108:	b25b      	sxtb	r3, r3
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d103      	bne.n	8009118 <xQueueGenericSend+0x164>
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800911e:	b25b      	sxtb	r3, r3
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	d103      	bne.n	800912e <xQueueGenericSend+0x17a>
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800912e:	f002 fa1b 	bl	800b568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009132:	1d3a      	adds	r2, r7, #4
 8009134:	f107 0314 	add.w	r3, r7, #20
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fa4e 	bl	800a5dc <xTaskCheckForTimeOut>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d124      	bne.n	8009190 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009148:	f000 fcdf 	bl	8009b0a <prvIsQueueFull>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d018      	beq.n	8009184 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	3310      	adds	r3, #16
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4611      	mov	r1, r2
 800915a:	4618      	mov	r0, r3
 800915c:	f001 f978 	bl	800a450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009162:	f000 fc6a 	bl	8009a3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009166:	f000 ffb3 	bl	800a0d0 <xTaskResumeAll>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	f47f af7c 	bne.w	800906a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <xQueueGenericSend+0x1f0>)
 8009174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	e772      	b.n	800906a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009186:	f000 fc58 	bl	8009a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800918a:	f000 ffa1 	bl	800a0d0 <xTaskResumeAll>
 800918e:	e76c      	b.n	800906a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009192:	f000 fc52 	bl	8009a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009196:	f000 ff9b 	bl	800a0d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800919a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800919c:	4618      	mov	r0, r3
 800919e:	3738      	adds	r7, #56	; 0x38
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08e      	sub	sp, #56	; 0x38
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d109      	bne.n	80091d4 <xQueueGenericSendFromISR+0x2c>
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
 80091d2:	e7fe      	b.n	80091d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d103      	bne.n	80091e2 <xQueueGenericSendFromISR+0x3a>
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <xQueueGenericSendFromISR+0x3e>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e000      	b.n	80091e8 <xQueueGenericSendFromISR+0x40>
 80091e6:	2300      	movs	r3, #0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <xQueueGenericSendFromISR+0x58>
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	623b      	str	r3, [r7, #32]
 80091fe:	e7fe      	b.n	80091fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d103      	bne.n	800920e <xQueueGenericSendFromISR+0x66>
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <xQueueGenericSendFromISR+0x6a>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueGenericSendFromISR+0x6c>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <xQueueGenericSendFromISR+0x84>
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61fb      	str	r3, [r7, #28]
 800922a:	e7fe      	b.n	800922a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800922c:	f002 fa4a 	bl	800b6c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009230:	f3ef 8211 	mrs	r2, BASEPRI
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	61ba      	str	r2, [r7, #24]
 8009246:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009248:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009254:	429a      	cmp	r2, r3
 8009256:	d302      	bcc.n	800925e <xQueueGenericSendFromISR+0xb6>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d12c      	bne.n	80092b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800926e:	f000 fb54 	bl	800991a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009272:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d112      	bne.n	80092a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	d016      	beq.n	80092b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	4618      	mov	r0, r3
 800928a:	f001 f92f 	bl	800a4ec <xTaskRemoveFromEventList>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00e      	beq.n	80092b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00b      	beq.n	80092b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	e007      	b.n	80092b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092a6:	3301      	adds	r3, #1
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	b25a      	sxtb	r2, r3
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092b2:	2301      	movs	r3, #1
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80092b6:	e001      	b.n	80092bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	637b      	str	r3, [r7, #52]	; 0x34
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3738      	adds	r7, #56	; 0x38
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08e      	sub	sp, #56	; 0x38
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d109      	bne.n	80092f8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	623b      	str	r3, [r7, #32]
 80092f6:	e7fe      	b.n	80092f6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d009      	beq.n	8009314 <xQueueGiveFromISR+0x44>
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	e7fe      	b.n	8009312 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d103      	bne.n	8009324 <xQueueGiveFromISR+0x54>
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <xQueueGiveFromISR+0x58>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <xQueueGiveFromISR+0x5a>
 8009328:	2300      	movs	r3, #0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <xQueueGiveFromISR+0x72>
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	e7fe      	b.n	8009340 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009342:	f002 f9bf 	bl	800b6c4 <vPortValidateInterruptPriority>
	__asm volatile
 8009346:	f3ef 8211 	mrs	r2, BASEPRI
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	617a      	str	r2, [r7, #20]
 800935c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800935e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800936e:	429a      	cmp	r2, r3
 8009370:	d22b      	bcs.n	80093ca <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938c:	d112      	bne.n	80093b4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d016      	beq.n	80093c4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	3324      	adds	r3, #36	; 0x24
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f8a6 	bl	800a4ec <xTaskRemoveFromEventList>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00e      	beq.n	80093c4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2201      	movs	r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	e007      	b.n	80093c4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093b8:	3301      	adds	r3, #1
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	b25a      	sxtb	r2, r3
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093c4:	2301      	movs	r3, #1
 80093c6:	637b      	str	r3, [r7, #52]	; 0x34
 80093c8:	e001      	b.n	80093ce <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3738      	adds	r7, #56	; 0x38
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08c      	sub	sp, #48	; 0x30
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <xQueueReceive+0x2e>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	623b      	str	r3, [r7, #32]
 8009410:	e7fe      	b.n	8009410 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <xQueueReceive+0x3c>
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <xQueueReceive+0x40>
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <xQueueReceive+0x42>
 8009424:	2300      	movs	r3, #0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d109      	bne.n	800943e <xQueueReceive+0x5a>
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	61fb      	str	r3, [r7, #28]
 800943c:	e7fe      	b.n	800943c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800943e:	f001 fa1b 	bl	800a878 <xTaskGetSchedulerState>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <xQueueReceive+0x6a>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <xQueueReceive+0x6e>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <xQueueReceive+0x70>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <xQueueReceive+0x88>
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e7fe      	b.n	800946a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800946c:	f002 f84e 	bl	800b50c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01f      	beq.n	80094bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800947c:	68b9      	ldr	r1, [r7, #8]
 800947e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009480:	f000 fab5 	bl	80099ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	1e5a      	subs	r2, r3, #1
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00f      	beq.n	80094b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	3310      	adds	r3, #16
 8009498:	4618      	mov	r0, r3
 800949a:	f001 f827 	bl	800a4ec <xTaskRemoveFromEventList>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094a4:	4b3c      	ldr	r3, [pc, #240]	; (8009598 <xQueueReceive+0x1b4>)
 80094a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094b4:	f002 f858 	bl	800b568 <vPortExitCritical>
				return pdPASS;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e069      	b.n	8009590 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d103      	bne.n	80094ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094c2:	f002 f851 	bl	800b568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e062      	b.n	8009590 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d106      	bne.n	80094de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094d0:	f107 0310 	add.w	r3, r7, #16
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 f86b 	bl	800a5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094de:	f002 f843 	bl	800b568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094e2:	f000 fde7 	bl	800a0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094e6:	f002 f811 	bl	800b50c <vPortEnterCritical>
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094f0:	b25b      	sxtb	r3, r3
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d103      	bne.n	8009500 <xQueueReceive+0x11c>
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009506:	b25b      	sxtb	r3, r3
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d103      	bne.n	8009516 <xQueueReceive+0x132>
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009516:	f002 f827 	bl	800b568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800951a:	1d3a      	adds	r2, r7, #4
 800951c:	f107 0310 	add.w	r3, r7, #16
 8009520:	4611      	mov	r1, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f001 f85a 	bl	800a5dc <xTaskCheckForTimeOut>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d123      	bne.n	8009576 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800952e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009530:	f000 fad5 	bl	8009ade <prvIsQueueEmpty>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d017      	beq.n	800956a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	3324      	adds	r3, #36	; 0x24
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	4611      	mov	r1, r2
 8009542:	4618      	mov	r0, r3
 8009544:	f000 ff84 	bl	800a450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954a:	f000 fa76 	bl	8009a3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800954e:	f000 fdbf 	bl	800a0d0 <xTaskResumeAll>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d189      	bne.n	800946c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009558:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <xQueueReceive+0x1b4>)
 800955a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	e780      	b.n	800946c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800956a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956c:	f000 fa65 	bl	8009a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009570:	f000 fdae 	bl	800a0d0 <xTaskResumeAll>
 8009574:	e77a      	b.n	800946c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009578:	f000 fa5f 	bl	8009a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800957c:	f000 fda8 	bl	800a0d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009582:	f000 faac 	bl	8009ade <prvIsQueueEmpty>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	f43f af6f 	beq.w	800946c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800958e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009590:	4618      	mov	r0, r3
 8009592:	3730      	adds	r7, #48	; 0x30
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08e      	sub	sp, #56	; 0x38
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d109      	bne.n	80095cc <xQueueSemaphoreTake+0x30>
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	623b      	str	r3, [r7, #32]
 80095ca:	e7fe      	b.n	80095ca <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d009      	beq.n	80095e8 <xQueueSemaphoreTake+0x4c>
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	e7fe      	b.n	80095e6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095e8:	f001 f946 	bl	800a878 <xTaskGetSchedulerState>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <xQueueSemaphoreTake+0x5c>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <xQueueSemaphoreTake+0x60>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <xQueueSemaphoreTake+0x62>
 80095fc:	2300      	movs	r3, #0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <xQueueSemaphoreTake+0x7a>
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	61bb      	str	r3, [r7, #24]
 8009614:	e7fe      	b.n	8009614 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009616:	f001 ff79 	bl	800b50c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	d024      	beq.n	8009670 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	1e5a      	subs	r2, r3, #1
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d104      	bne.n	8009640 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009636:	f001 fa91 	bl	800ab5c <pvTaskIncrementMutexHeldCount>
 800963a:	4602      	mov	r2, r0
 800963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00f      	beq.n	8009668 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	3310      	adds	r3, #16
 800964c:	4618      	mov	r0, r3
 800964e:	f000 ff4d 	bl	800a4ec <xTaskRemoveFromEventList>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009658:	4b53      	ldr	r3, [pc, #332]	; (80097a8 <xQueueSemaphoreTake+0x20c>)
 800965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009668:	f001 ff7e 	bl	800b568 <vPortExitCritical>
				return pdPASS;
 800966c:	2301      	movs	r3, #1
 800966e:	e096      	b.n	800979e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d110      	bne.n	8009698 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <xQueueSemaphoreTake+0xf4>
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e7fe      	b.n	800968e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009690:	f001 ff6a 	bl	800b568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009694:	2300      	movs	r3, #0
 8009696:	e082      	b.n	800979e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800969e:	f107 030c 	add.w	r3, r7, #12
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 ff84 	bl	800a5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096ac:	f001 ff5c 	bl	800b568 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096b0:	f000 fd00 	bl	800a0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096b4:	f001 ff2a 	bl	800b50c <vPortEnterCritical>
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096be:	b25b      	sxtb	r3, r3
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d103      	bne.n	80096ce <xQueueSemaphoreTake+0x132>
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096da:	d103      	bne.n	80096e4 <xQueueSemaphoreTake+0x148>
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096e4:	f001 ff40 	bl	800b568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096e8:	463a      	mov	r2, r7
 80096ea:	f107 030c 	add.w	r3, r7, #12
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 ff73 	bl	800a5dc <xTaskCheckForTimeOut>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d132      	bne.n	8009762 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096fe:	f000 f9ee 	bl	8009ade <prvIsQueueEmpty>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d026      	beq.n	8009756 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d109      	bne.n	8009724 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009710:	f001 fefc 	bl	800b50c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	4618      	mov	r0, r3
 800971a:	f001 f8cb 	bl	800a8b4 <xTaskPriorityInherit>
 800971e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009720:	f001 ff22 	bl	800b568 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	3324      	adds	r3, #36	; 0x24
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fe8f 	bl	800a450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009734:	f000 f981 	bl	8009a3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009738:	f000 fcca 	bl	800a0d0 <xTaskResumeAll>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	f47f af69 	bne.w	8009616 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009744:	4b18      	ldr	r3, [pc, #96]	; (80097a8 <xQueueSemaphoreTake+0x20c>)
 8009746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	e75f      	b.n	8009616 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009758:	f000 f96f 	bl	8009a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800975c:	f000 fcb8 	bl	800a0d0 <xTaskResumeAll>
 8009760:	e759      	b.n	8009616 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009764:	f000 f969 	bl	8009a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009768:	f000 fcb2 	bl	800a0d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800976c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800976e:	f000 f9b6 	bl	8009ade <prvIsQueueEmpty>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	f43f af4e 	beq.w	8009616 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00d      	beq.n	800979c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009780:	f001 fec4 	bl	800b50c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009786:	f000 f8b0 	bl	80098ea <prvGetDisinheritPriorityAfterTimeout>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009792:	4618      	mov	r0, r3
 8009794:	f001 f962 	bl	800aa5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009798:	f001 fee6 	bl	800b568 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800979c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3738      	adds	r7, #56	; 0x38
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	e000ed04 	.word	0xe000ed04

080097ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08e      	sub	sp, #56	; 0x38
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <xQueueReceiveFromISR+0x2a>
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	623b      	str	r3, [r7, #32]
 80097d4:	e7fe      	b.n	80097d4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d103      	bne.n	80097e4 <xQueueReceiveFromISR+0x38>
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <xQueueReceiveFromISR+0x3c>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <xQueueReceiveFromISR+0x3e>
 80097e8:	2300      	movs	r3, #0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <xQueueReceiveFromISR+0x56>
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e7fe      	b.n	8009800 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009802:	f001 ff5f 	bl	800b6c4 <vPortValidateInterruptPriority>
	__asm volatile
 8009806:	f3ef 8211 	mrs	r2, BASEPRI
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	61ba      	str	r2, [r7, #24]
 800981c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800981e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d02f      	beq.n	800988e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800983c:	f000 f8d7 	bl	80099ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	1e5a      	subs	r2, r3, #1
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009850:	d112      	bne.n	8009878 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d016      	beq.n	8009888 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	3310      	adds	r3, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fe44 	bl	800a4ec <xTaskRemoveFromEventList>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00e      	beq.n	8009888 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	e007      	b.n	8009888 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800987c:	3301      	adds	r3, #1
 800987e:	b2db      	uxtb	r3, r3
 8009880:	b25a      	sxtb	r2, r3
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009888:	2301      	movs	r3, #1
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
 800988c:	e001      	b.n	8009892 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800988e:	2300      	movs	r3, #0
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800989c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3738      	adds	r7, #56	; 0x38
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <vQueueDelete+0x26>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	60bb      	str	r3, [r7, #8]
 80098ca:	e7fe      	b.n	80098ca <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 f95d 	bl	8009b8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f001 fff1 	bl	800b8c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80098ea:	b480      	push	{r7}
 80098ec:	b085      	sub	sp, #20
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d006      	beq.n	8009908 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	e001      	b.n	800990c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800990c:	68fb      	ldr	r3, [r7, #12]
	}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10d      	bne.n	8009954 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d14d      	bne.n	80099dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f81d 	bl	800a984 <xTaskPriorityDisinherit>
 800994a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	609a      	str	r2, [r3, #8]
 8009952:	e043      	b.n	80099dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d119      	bne.n	800998e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6858      	ldr	r0, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	461a      	mov	r2, r3
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	f002 f8eb 	bl	800bb40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	441a      	add	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	429a      	cmp	r2, r3
 8009982:	d32b      	bcc.n	80099dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	605a      	str	r2, [r3, #4]
 800998c:	e026      	b.n	80099dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68d8      	ldr	r0, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	461a      	mov	r2, r3
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	f002 f8d1 	bl	800bb40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	425b      	negs	r3, r3
 80099a8:	441a      	add	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d207      	bcs.n	80099ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	425b      	negs	r3, r3
 80099c4:	441a      	add	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d105      	bne.n	80099dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	3b01      	subs	r3, #1
 80099da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099e4:	697b      	ldr	r3, [r7, #20]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d018      	beq.n	8009a32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	441a      	add	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d303      	bcc.n	8009a22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68d9      	ldr	r1, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6838      	ldr	r0, [r7, #0]
 8009a2e:	f002 f887 	bl	800bb40 <memcpy>
	}
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a42:	f001 fd63 	bl	800b50c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a4e:	e011      	b.n	8009a74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d012      	beq.n	8009a7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fd45 	bl	800a4ec <xTaskRemoveFromEventList>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a68:	f000 fe18 	bl	800a69c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dce9      	bgt.n	8009a50 <prvUnlockQueue+0x16>
 8009a7c:	e000      	b.n	8009a80 <prvUnlockQueue+0x46>
					break;
 8009a7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	22ff      	movs	r2, #255	; 0xff
 8009a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a88:	f001 fd6e 	bl	800b568 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a8c:	f001 fd3e 	bl	800b50c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a98:	e011      	b.n	8009abe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d012      	beq.n	8009ac8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3310      	adds	r3, #16
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fd20 	bl	800a4ec <xTaskRemoveFromEventList>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ab2:	f000 fdf3 	bl	800a69c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dce9      	bgt.n	8009a9a <prvUnlockQueue+0x60>
 8009ac6:	e000      	b.n	8009aca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ac8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	22ff      	movs	r2, #255	; 0xff
 8009ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ad2:	f001 fd49 	bl	800b568 <vPortExitCritical>
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ae6:	f001 fd11 	bl	800b50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d102      	bne.n	8009af8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e001      	b.n	8009afc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f001 fd34 	bl	800b568 <vPortExitCritical>

	return xReturn;
 8009b00:	68fb      	ldr	r3, [r7, #12]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b12:	f001 fcfb 	bl	800b50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d102      	bne.n	8009b28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b22:	2301      	movs	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	e001      	b.n	8009b2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b2c:	f001 fd1c 	bl	800b568 <vPortExitCritical>

	return xReturn;
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e014      	b.n	8009b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b4c:	4a0e      	ldr	r2, [pc, #56]	; (8009b88 <vQueueAddToRegistry+0x4c>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10b      	bne.n	8009b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b58:	490b      	ldr	r1, [pc, #44]	; (8009b88 <vQueueAddToRegistry+0x4c>)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b62:	4a09      	ldr	r2, [pc, #36]	; (8009b88 <vQueueAddToRegistry+0x4c>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	4413      	add	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b6e:	e005      	b.n	8009b7c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	d9e7      	bls.n	8009b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b7c:	bf00      	nop
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20004ca8 	.word	0x20004ca8

08009b8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b94:	2300      	movs	r3, #0
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	e016      	b.n	8009bc8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009b9a:	4a10      	ldr	r2, [pc, #64]	; (8009bdc <vQueueUnregisterQueue+0x50>)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d10b      	bne.n	8009bc2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009baa:	4a0c      	ldr	r2, [pc, #48]	; (8009bdc <vQueueUnregisterQueue+0x50>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2100      	movs	r1, #0
 8009bb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009bb4:	4a09      	ldr	r2, [pc, #36]	; (8009bdc <vQueueUnregisterQueue+0x50>)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	605a      	str	r2, [r3, #4]
				break;
 8009bc0:	e005      	b.n	8009bce <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b07      	cmp	r3, #7
 8009bcc:	d9e5      	bls.n	8009b9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20004ca8 	.word	0x20004ca8

08009be0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009bf0:	f001 fc8c 	bl	800b50c <vPortEnterCritical>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bfa:	b25b      	sxtb	r3, r3
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d103      	bne.n	8009c0a <vQueueWaitForMessageRestricted+0x2a>
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c10:	b25b      	sxtb	r3, r3
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d103      	bne.n	8009c20 <vQueueWaitForMessageRestricted+0x40>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c20:	f001 fca2 	bl	800b568 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	3324      	adds	r3, #36	; 0x24
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fc2f 	bl	800a498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c3a:	6978      	ldr	r0, [r7, #20]
 8009c3c:	f7ff fefd 	bl	8009a3a <prvUnlockQueue>
	}
 8009c40:	bf00      	nop
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08e      	sub	sp, #56	; 0x38
 8009c4c:	af04      	add	r7, sp, #16
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d109      	bne.n	8009c70 <xTaskCreateStatic+0x28>
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	623b      	str	r3, [r7, #32]
 8009c6e:	e7fe      	b.n	8009c6e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d109      	bne.n	8009c8a <xTaskCreateStatic+0x42>
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	e7fe      	b.n	8009c88 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c8a:	235c      	movs	r3, #92	; 0x5c
 8009c8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b5c      	cmp	r3, #92	; 0x5c
 8009c92:	d009      	beq.n	8009ca8 <xTaskCreateStatic+0x60>
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	e7fe      	b.n	8009ca6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ca8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01e      	beq.n	8009cee <xTaskCreateStatic+0xa6>
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d01b      	beq.n	8009cee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cbe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9303      	str	r3, [sp, #12]
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	9302      	str	r3, [sp, #8]
 8009cd0:	f107 0314 	add.w	r3, r7, #20
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f850 	bl	8009d86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ce8:	f000 f8dc 	bl	8009ea4 <prvAddNewTaskToReadyList>
 8009cec:	e001      	b.n	8009cf2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cf2:	697b      	ldr	r3, [r7, #20]
	}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3728      	adds	r7, #40	; 0x28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af04      	add	r7, sp, #16
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 fd15 	bl	800b740 <pvPortMalloc>
 8009d16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00e      	beq.n	8009d3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d1e:	205c      	movs	r0, #92	; 0x5c
 8009d20:	f001 fd0e 	bl	800b740 <pvPortMalloc>
 8009d24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	631a      	str	r2, [r3, #48]	; 0x30
 8009d32:	e005      	b.n	8009d40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d34:	6978      	ldr	r0, [r7, #20]
 8009d36:	f001 fdc5 	bl	800b8c4 <vPortFree>
 8009d3a:	e001      	b.n	8009d40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d017      	beq.n	8009d76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d4e:	88fa      	ldrh	r2, [r7, #6]
 8009d50:	2300      	movs	r3, #0
 8009d52:	9303      	str	r3, [sp, #12]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	68b9      	ldr	r1, [r7, #8]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 f80e 	bl	8009d86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d6a:	69f8      	ldr	r0, [r7, #28]
 8009d6c:	f000 f89a 	bl	8009ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d70:	2301      	movs	r3, #1
 8009d72:	61bb      	str	r3, [r7, #24]
 8009d74:	e002      	b.n	8009d7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d76:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3720      	adds	r7, #32
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b088      	sub	sp, #32
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	607a      	str	r2, [r7, #4]
 8009d92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	21a5      	movs	r1, #165	; 0xa5
 8009da0:	f001 fed9 	bl	800bb56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009dae:	3b01      	subs	r3, #1
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	f023 0307 	bic.w	r3, r3, #7
 8009dbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d009      	beq.n	8009ddc <prvInitialiseNewTask+0x56>
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	e7fe      	b.n	8009dda <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d01f      	beq.n	8009e22 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	e012      	b.n	8009e0e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	4413      	add	r3, r2
 8009dee:	7819      	ldrb	r1, [r3, #0]
 8009df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	4413      	add	r3, r2
 8009df6:	3334      	adds	r3, #52	; 0x34
 8009df8:	460a      	mov	r2, r1
 8009dfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	4413      	add	r3, r2
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d006      	beq.n	8009e16 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	2b0f      	cmp	r3, #15
 8009e12:	d9e9      	bls.n	8009de8 <prvInitialiseNewTask+0x62>
 8009e14:	e000      	b.n	8009e18 <prvInitialiseNewTask+0x92>
			{
				break;
 8009e16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e20:	e003      	b.n	8009e2a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	2b37      	cmp	r3, #55	; 0x37
 8009e2e:	d901      	bls.n	8009e34 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e30:	2337      	movs	r3, #55	; 0x37
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	2200      	movs	r2, #0
 8009e44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	3304      	adds	r3, #4
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe fdc6 	bl	80089dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	3318      	adds	r3, #24
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe fdc1 	bl	80089dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	2200      	movs	r2, #0
 8009e74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	68f9      	ldr	r1, [r7, #12]
 8009e82:	69b8      	ldr	r0, [r7, #24]
 8009e84:	f001 fa18 	bl	800b2b8 <pxPortInitialiseStack>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e9a:	bf00      	nop
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009eac:	f001 fb2e 	bl	800b50c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009eb0:	4b2d      	ldr	r3, [pc, #180]	; (8009f68 <prvAddNewTaskToReadyList+0xc4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	4a2c      	ldr	r2, [pc, #176]	; (8009f68 <prvAddNewTaskToReadyList+0xc4>)
 8009eb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eba:	4b2c      	ldr	r3, [pc, #176]	; (8009f6c <prvAddNewTaskToReadyList+0xc8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ec2:	4a2a      	ldr	r2, [pc, #168]	; (8009f6c <prvAddNewTaskToReadyList+0xc8>)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ec8:	4b27      	ldr	r3, [pc, #156]	; (8009f68 <prvAddNewTaskToReadyList+0xc4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d110      	bne.n	8009ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ed0:	f000 fc08 	bl	800a6e4 <prvInitialiseTaskLists>
 8009ed4:	e00d      	b.n	8009ef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ed6:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <prvAddNewTaskToReadyList+0xcc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ede:	4b23      	ldr	r3, [pc, #140]	; (8009f6c <prvAddNewTaskToReadyList+0xc8>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d802      	bhi.n	8009ef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009eec:	4a1f      	ldr	r2, [pc, #124]	; (8009f6c <prvAddNewTaskToReadyList+0xc8>)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ef2:	4b20      	ldr	r3, [pc, #128]	; (8009f74 <prvAddNewTaskToReadyList+0xd0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	4a1e      	ldr	r2, [pc, #120]	; (8009f74 <prvAddNewTaskToReadyList+0xd0>)
 8009efa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009efc:	4b1d      	ldr	r3, [pc, #116]	; (8009f74 <prvAddNewTaskToReadyList+0xd0>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <prvAddNewTaskToReadyList+0xd4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d903      	bls.n	8009f18 <prvAddNewTaskToReadyList+0x74>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	4a18      	ldr	r2, [pc, #96]	; (8009f78 <prvAddNewTaskToReadyList+0xd4>)
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4a15      	ldr	r2, [pc, #84]	; (8009f7c <prvAddNewTaskToReadyList+0xd8>)
 8009f26:	441a      	add	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fe fd61 	bl	80089f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f34:	f001 fb18 	bl	800b568 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f38:	4b0d      	ldr	r3, [pc, #52]	; (8009f70 <prvAddNewTaskToReadyList+0xcc>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00e      	beq.n	8009f5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f40:	4b0a      	ldr	r3, [pc, #40]	; (8009f6c <prvAddNewTaskToReadyList+0xc8>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d207      	bcs.n	8009f5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <prvAddNewTaskToReadyList+0xdc>)
 8009f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000d90 	.word	0x20000d90
 8009f6c:	200008bc 	.word	0x200008bc
 8009f70:	20000d9c 	.word	0x20000d9c
 8009f74:	20000dac 	.word	0x20000dac
 8009f78:	20000d98 	.word	0x20000d98
 8009f7c:	200008c0 	.word	0x200008c0
 8009f80:	e000ed04 	.word	0xe000ed04

08009f84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d016      	beq.n	8009fc4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f96:	4b13      	ldr	r3, [pc, #76]	; (8009fe4 <vTaskDelay+0x60>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d009      	beq.n	8009fb2 <vTaskDelay+0x2e>
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	60bb      	str	r3, [r7, #8]
 8009fb0:	e7fe      	b.n	8009fb0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009fb2:	f000 f87f 	bl	800a0b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fde3 	bl	800ab84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fbe:	f000 f887 	bl	800a0d0 <xTaskResumeAll>
 8009fc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d107      	bne.n	8009fda <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009fca:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <vTaskDelay+0x64>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000db8 	.word	0x20000db8
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	; 0x28
 8009ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ffa:	463a      	mov	r2, r7
 8009ffc:	1d39      	adds	r1, r7, #4
 8009ffe:	f107 0308 	add.w	r3, r7, #8
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fc96 	bl	8008934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	9202      	str	r2, [sp, #8]
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	2300      	movs	r3, #0
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	2300      	movs	r3, #0
 800a018:	460a      	mov	r2, r1
 800a01a:	4920      	ldr	r1, [pc, #128]	; (800a09c <vTaskStartScheduler+0xb0>)
 800a01c:	4820      	ldr	r0, [pc, #128]	; (800a0a0 <vTaskStartScheduler+0xb4>)
 800a01e:	f7ff fe13 	bl	8009c48 <xTaskCreateStatic>
 800a022:	4602      	mov	r2, r0
 800a024:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <vTaskStartScheduler+0xb8>)
 800a026:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <vTaskStartScheduler+0xb8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a030:	2301      	movs	r3, #1
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	e001      	b.n	800a03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d102      	bne.n	800a046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a040:	f000 fdf4 	bl	800ac2c <xTimerCreateTimerTask>
 800a044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d115      	bne.n	800a078 <vTaskStartScheduler+0x8c>
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <vTaskStartScheduler+0xbc>)
 800a060:	f04f 32ff 	mov.w	r2, #4294967295
 800a064:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a066:	4b11      	ldr	r3, [pc, #68]	; (800a0ac <vTaskStartScheduler+0xc0>)
 800a068:	2201      	movs	r2, #1
 800a06a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a06c:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <vTaskStartScheduler+0xc4>)
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a072:	f001 f9ad 	bl	800b3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a076:	e00d      	b.n	800a094 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d109      	bne.n	800a094 <vTaskStartScheduler+0xa8>
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	e7fe      	b.n	800a092 <vTaskStartScheduler+0xa6>
}
 800a094:	bf00      	nop
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	0800dc38 	.word	0x0800dc38
 800a0a0:	0800a6b5 	.word	0x0800a6b5
 800a0a4:	20000db4 	.word	0x20000db4
 800a0a8:	20000db0 	.word	0x20000db0
 800a0ac:	20000d9c 	.word	0x20000d9c
 800a0b0:	20000d94 	.word	0x20000d94

0800a0b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a0b8:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <vTaskSuspendAll+0x18>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a03      	ldr	r2, [pc, #12]	; (800a0cc <vTaskSuspendAll+0x18>)
 800a0c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a0c2:	bf00      	nop
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	20000db8 	.word	0x20000db8

0800a0d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0de:	4b41      	ldr	r3, [pc, #260]	; (800a1e4 <xTaskResumeAll+0x114>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <xTaskResumeAll+0x2a>
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	e7fe      	b.n	800a0f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0fa:	f001 fa07 	bl	800b50c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0fe:	4b39      	ldr	r3, [pc, #228]	; (800a1e4 <xTaskResumeAll+0x114>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3b01      	subs	r3, #1
 800a104:	4a37      	ldr	r2, [pc, #220]	; (800a1e4 <xTaskResumeAll+0x114>)
 800a106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a108:	4b36      	ldr	r3, [pc, #216]	; (800a1e4 <xTaskResumeAll+0x114>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d162      	bne.n	800a1d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a110:	4b35      	ldr	r3, [pc, #212]	; (800a1e8 <xTaskResumeAll+0x118>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d05e      	beq.n	800a1d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a118:	e02f      	b.n	800a17a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11a:	4b34      	ldr	r3, [pc, #208]	; (800a1ec <xTaskResumeAll+0x11c>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3318      	adds	r3, #24
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fcc2 	bl	8008ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3304      	adds	r3, #4
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe fcbd 	bl	8008ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13a:	4b2d      	ldr	r3, [pc, #180]	; (800a1f0 <xTaskResumeAll+0x120>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d903      	bls.n	800a14a <xTaskResumeAll+0x7a>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a2a      	ldr	r2, [pc, #168]	; (800a1f0 <xTaskResumeAll+0x120>)
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4a27      	ldr	r2, [pc, #156]	; (800a1f4 <xTaskResumeAll+0x124>)
 800a158:	441a      	add	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fe fc48 	bl	80089f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16a:	4b23      	ldr	r3, [pc, #140]	; (800a1f8 <xTaskResumeAll+0x128>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	429a      	cmp	r2, r3
 800a172:	d302      	bcc.n	800a17a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a174:	4b21      	ldr	r3, [pc, #132]	; (800a1fc <xTaskResumeAll+0x12c>)
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a17a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ec <xTaskResumeAll+0x11c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1cb      	bne.n	800a11a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a188:	f000 fb46 	bl	800a818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a18c:	4b1c      	ldr	r3, [pc, #112]	; (800a200 <xTaskResumeAll+0x130>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a198:	f000 f846 	bl	800a228 <xTaskIncrementTick>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a1a2:	4b16      	ldr	r3, [pc, #88]	; (800a1fc <xTaskResumeAll+0x12c>)
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f1      	bne.n	800a198 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a1b4:	4b12      	ldr	r3, [pc, #72]	; (800a200 <xTaskResumeAll+0x130>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1ba:	4b10      	ldr	r3, [pc, #64]	; (800a1fc <xTaskResumeAll+0x12c>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <xTaskResumeAll+0x134>)
 800a1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1d6:	f001 f9c7 	bl	800b568 <vPortExitCritical>

	return xAlreadyYielded;
 800a1da:	68bb      	ldr	r3, [r7, #8]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000db8 	.word	0x20000db8
 800a1e8:	20000d90 	.word	0x20000d90
 800a1ec:	20000d50 	.word	0x20000d50
 800a1f0:	20000d98 	.word	0x20000d98
 800a1f4:	200008c0 	.word	0x200008c0
 800a1f8:	200008bc 	.word	0x200008bc
 800a1fc:	20000da4 	.word	0x20000da4
 800a200:	20000da0 	.word	0x20000da0
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <xTaskGetTickCount+0x1c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a214:	687b      	ldr	r3, [r7, #4]
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000d94 	.word	0x20000d94

0800a228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a22e:	2300      	movs	r3, #0
 800a230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a232:	4b4e      	ldr	r3, [pc, #312]	; (800a36c <xTaskIncrementTick+0x144>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 8088 	bne.w	800a34c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a23c:	4b4c      	ldr	r3, [pc, #304]	; (800a370 <xTaskIncrementTick+0x148>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3301      	adds	r3, #1
 800a242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a244:	4a4a      	ldr	r2, [pc, #296]	; (800a370 <xTaskIncrementTick+0x148>)
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d11f      	bne.n	800a290 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a250:	4b48      	ldr	r3, [pc, #288]	; (800a374 <xTaskIncrementTick+0x14c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <xTaskIncrementTick+0x46>
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	e7fe      	b.n	800a26c <xTaskIncrementTick+0x44>
 800a26e:	4b41      	ldr	r3, [pc, #260]	; (800a374 <xTaskIncrementTick+0x14c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	4b40      	ldr	r3, [pc, #256]	; (800a378 <xTaskIncrementTick+0x150>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a3e      	ldr	r2, [pc, #248]	; (800a374 <xTaskIncrementTick+0x14c>)
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	4a3e      	ldr	r2, [pc, #248]	; (800a378 <xTaskIncrementTick+0x150>)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	4b3e      	ldr	r3, [pc, #248]	; (800a37c <xTaskIncrementTick+0x154>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3301      	adds	r3, #1
 800a288:	4a3c      	ldr	r2, [pc, #240]	; (800a37c <xTaskIncrementTick+0x154>)
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	f000 fac4 	bl	800a818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a290:	4b3b      	ldr	r3, [pc, #236]	; (800a380 <xTaskIncrementTick+0x158>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	429a      	cmp	r2, r3
 800a298:	d349      	bcc.n	800a32e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29a:	4b36      	ldr	r3, [pc, #216]	; (800a374 <xTaskIncrementTick+0x14c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a4:	4b36      	ldr	r3, [pc, #216]	; (800a380 <xTaskIncrementTick+0x158>)
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	601a      	str	r2, [r3, #0]
					break;
 800a2ac:	e03f      	b.n	800a32e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ae:	4b31      	ldr	r3, [pc, #196]	; (800a374 <xTaskIncrementTick+0x14c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d203      	bcs.n	800a2ce <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2c6:	4a2e      	ldr	r2, [pc, #184]	; (800a380 <xTaskIncrementTick+0x158>)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2cc:	e02f      	b.n	800a32e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe fbec 	bl	8008ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	3318      	adds	r3, #24
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe fbe3 	bl	8008ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ee:	4b25      	ldr	r3, [pc, #148]	; (800a384 <xTaskIncrementTick+0x15c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d903      	bls.n	800a2fe <xTaskIncrementTick+0xd6>
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fa:	4a22      	ldr	r2, [pc, #136]	; (800a384 <xTaskIncrementTick+0x15c>)
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4a1f      	ldr	r2, [pc, #124]	; (800a388 <xTaskIncrementTick+0x160>)
 800a30c:	441a      	add	r2, r3
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	3304      	adds	r3, #4
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7fe fb6e 	bl	80089f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31e:	4b1b      	ldr	r3, [pc, #108]	; (800a38c <xTaskIncrementTick+0x164>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	429a      	cmp	r2, r3
 800a326:	d3b8      	bcc.n	800a29a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a328:	2301      	movs	r3, #1
 800a32a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a32c:	e7b5      	b.n	800a29a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a32e:	4b17      	ldr	r3, [pc, #92]	; (800a38c <xTaskIncrementTick+0x164>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a334:	4914      	ldr	r1, [pc, #80]	; (800a388 <xTaskIncrementTick+0x160>)
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d907      	bls.n	800a356 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a346:	2301      	movs	r3, #1
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e004      	b.n	800a356 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a34c:	4b10      	ldr	r3, [pc, #64]	; (800a390 <xTaskIncrementTick+0x168>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	4a0f      	ldr	r2, [pc, #60]	; (800a390 <xTaskIncrementTick+0x168>)
 800a354:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a356:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <xTaskIncrementTick+0x16c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a35e:	2301      	movs	r3, #1
 800a360:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a362:	697b      	ldr	r3, [r7, #20]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000db8 	.word	0x20000db8
 800a370:	20000d94 	.word	0x20000d94
 800a374:	20000d48 	.word	0x20000d48
 800a378:	20000d4c 	.word	0x20000d4c
 800a37c:	20000da8 	.word	0x20000da8
 800a380:	20000db0 	.word	0x20000db0
 800a384:	20000d98 	.word	0x20000d98
 800a388:	200008c0 	.word	0x200008c0
 800a38c:	200008bc 	.word	0x200008bc
 800a390:	20000da0 	.word	0x20000da0
 800a394:	20000da4 	.word	0x20000da4

0800a398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a39e:	4b27      	ldr	r3, [pc, #156]	; (800a43c <vTaskSwitchContext+0xa4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3a6:	4b26      	ldr	r3, [pc, #152]	; (800a440 <vTaskSwitchContext+0xa8>)
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3ac:	e040      	b.n	800a430 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a3ae:	4b24      	ldr	r3, [pc, #144]	; (800a440 <vTaskSwitchContext+0xa8>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b4:	4b23      	ldr	r3, [pc, #140]	; (800a444 <vTaskSwitchContext+0xac>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]
 800a3ba:	e00f      	b.n	800a3dc <vTaskSwitchContext+0x44>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <vTaskSwitchContext+0x3e>
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	607b      	str	r3, [r7, #4]
 800a3d4:	e7fe      	b.n	800a3d4 <vTaskSwitchContext+0x3c>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	491a      	ldr	r1, [pc, #104]	; (800a448 <vTaskSwitchContext+0xb0>)
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	440b      	add	r3, r1
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0e5      	beq.n	800a3bc <vTaskSwitchContext+0x24>
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4a13      	ldr	r2, [pc, #76]	; (800a448 <vTaskSwitchContext+0xb0>)
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60bb      	str	r3, [r7, #8]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3308      	adds	r3, #8
 800a412:	429a      	cmp	r2, r3
 800a414:	d104      	bne.n	800a420 <vTaskSwitchContext+0x88>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	605a      	str	r2, [r3, #4]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	4a09      	ldr	r2, [pc, #36]	; (800a44c <vTaskSwitchContext+0xb4>)
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	4a06      	ldr	r2, [pc, #24]	; (800a444 <vTaskSwitchContext+0xac>)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6013      	str	r3, [r2, #0]
}
 800a430:	bf00      	nop
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000db8 	.word	0x20000db8
 800a440:	20000da4 	.word	0x20000da4
 800a444:	20000d98 	.word	0x20000d98
 800a448:	200008c0 	.word	0x200008c0
 800a44c:	200008bc 	.word	0x200008bc

0800a450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <vTaskPlaceOnEventList+0x24>
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e7fe      	b.n	800a472 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a474:	4b07      	ldr	r3, [pc, #28]	; (800a494 <vTaskPlaceOnEventList+0x44>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3318      	adds	r3, #24
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7fe fade 	bl	8008a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a482:	2101      	movs	r1, #1
 800a484:	6838      	ldr	r0, [r7, #0]
 800a486:	f000 fb7d 	bl	800ab84 <prvAddCurrentTaskToDelayedList>
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200008bc 	.word	0x200008bc

0800a498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d109      	bne.n	800a4be <vTaskPlaceOnEventListRestricted+0x26>
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	617b      	str	r3, [r7, #20]
 800a4bc:	e7fe      	b.n	800a4bc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4be:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <vTaskPlaceOnEventListRestricted+0x50>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3318      	adds	r3, #24
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7fe fa95 	bl	80089f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	68b8      	ldr	r0, [r7, #8]
 800a4dc:	f000 fb52 	bl	800ab84 <prvAddCurrentTaskToDelayedList>
	}
 800a4e0:	bf00      	nop
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	200008bc 	.word	0x200008bc

0800a4ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <xTaskRemoveFromEventList+0x2a>
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e7fe      	b.n	800a514 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	3318      	adds	r3, #24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fac8 	bl	8008ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a520:	4b1d      	ldr	r3, [pc, #116]	; (800a598 <xTaskRemoveFromEventList+0xac>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d11d      	bne.n	800a564 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3304      	adds	r3, #4
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fabf 	bl	8008ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a536:	4b19      	ldr	r3, [pc, #100]	; (800a59c <xTaskRemoveFromEventList+0xb0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d903      	bls.n	800a546 <xTaskRemoveFromEventList+0x5a>
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a542:	4a16      	ldr	r2, [pc, #88]	; (800a59c <xTaskRemoveFromEventList+0xb0>)
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4a13      	ldr	r2, [pc, #76]	; (800a5a0 <xTaskRemoveFromEventList+0xb4>)
 800a554:	441a      	add	r2, r3
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	3304      	adds	r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7fe fa4a 	bl	80089f6 <vListInsertEnd>
 800a562:	e005      	b.n	800a570 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	3318      	adds	r3, #24
 800a568:	4619      	mov	r1, r3
 800a56a:	480e      	ldr	r0, [pc, #56]	; (800a5a4 <xTaskRemoveFromEventList+0xb8>)
 800a56c:	f7fe fa43 	bl	80089f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a574:	4b0c      	ldr	r3, [pc, #48]	; (800a5a8 <xTaskRemoveFromEventList+0xbc>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d905      	bls.n	800a58a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a582:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <xTaskRemoveFromEventList+0xc0>)
 800a584:	2201      	movs	r2, #1
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e001      	b.n	800a58e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a58e:	697b      	ldr	r3, [r7, #20]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000db8 	.word	0x20000db8
 800a59c:	20000d98 	.word	0x20000d98
 800a5a0:	200008c0 	.word	0x200008c0
 800a5a4:	20000d50 	.word	0x20000d50
 800a5a8:	200008bc 	.word	0x200008bc
 800a5ac:	20000da4 	.word	0x20000da4

0800a5b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5b8:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <vTaskInternalSetTimeOutState+0x24>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <vTaskInternalSetTimeOutState+0x28>)
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	605a      	str	r2, [r3, #4]
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	20000da8 	.word	0x20000da8
 800a5d8:	20000d94 	.word	0x20000d94

0800a5dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d109      	bne.n	800a600 <xTaskCheckForTimeOut+0x24>
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e7fe      	b.n	800a5fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <xTaskCheckForTimeOut+0x3e>
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e7fe      	b.n	800a618 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a61a:	f000 ff77 	bl	800b50c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a61e:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <xTaskCheckForTimeOut+0xb8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	69ba      	ldr	r2, [r7, #24]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	d102      	bne.n	800a63e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a638:	2300      	movs	r3, #0
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	e023      	b.n	800a686 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <xTaskCheckForTimeOut+0xbc>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d007      	beq.n	800a65a <xTaskCheckForTimeOut+0x7e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	429a      	cmp	r2, r3
 800a652:	d302      	bcc.n	800a65a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a654:	2301      	movs	r3, #1
 800a656:	61fb      	str	r3, [r7, #28]
 800a658:	e015      	b.n	800a686 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	429a      	cmp	r2, r3
 800a662:	d20b      	bcs.n	800a67c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff9d 	bl	800a5b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	61fb      	str	r3, [r7, #28]
 800a67a:	e004      	b.n	800a686 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a682:	2301      	movs	r3, #1
 800a684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a686:	f000 ff6f 	bl	800b568 <vPortExitCritical>

	return xReturn;
 800a68a:	69fb      	ldr	r3, [r7, #28]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20000d94 	.word	0x20000d94
 800a698:	20000da8 	.word	0x20000da8

0800a69c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6a0:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <vTaskMissedYield+0x14>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20000da4 	.word	0x20000da4

0800a6b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6bc:	f000 f852 	bl	800a764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6c0:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <prvIdleTask+0x28>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d9f9      	bls.n	800a6bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6c8:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <prvIdleTask+0x2c>)
 800a6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6d8:	e7f0      	b.n	800a6bc <prvIdleTask+0x8>
 800a6da:	bf00      	nop
 800a6dc:	200008c0 	.word	0x200008c0
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	607b      	str	r3, [r7, #4]
 800a6ee:	e00c      	b.n	800a70a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4a12      	ldr	r2, [pc, #72]	; (800a744 <prvInitialiseTaskLists+0x60>)
 800a6fc:	4413      	add	r3, r2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe f94c 	bl	800899c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3301      	adds	r3, #1
 800a708:	607b      	str	r3, [r7, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b37      	cmp	r3, #55	; 0x37
 800a70e:	d9ef      	bls.n	800a6f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a710:	480d      	ldr	r0, [pc, #52]	; (800a748 <prvInitialiseTaskLists+0x64>)
 800a712:	f7fe f943 	bl	800899c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a716:	480d      	ldr	r0, [pc, #52]	; (800a74c <prvInitialiseTaskLists+0x68>)
 800a718:	f7fe f940 	bl	800899c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a71c:	480c      	ldr	r0, [pc, #48]	; (800a750 <prvInitialiseTaskLists+0x6c>)
 800a71e:	f7fe f93d 	bl	800899c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a722:	480c      	ldr	r0, [pc, #48]	; (800a754 <prvInitialiseTaskLists+0x70>)
 800a724:	f7fe f93a 	bl	800899c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a728:	480b      	ldr	r0, [pc, #44]	; (800a758 <prvInitialiseTaskLists+0x74>)
 800a72a:	f7fe f937 	bl	800899c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a72e:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <prvInitialiseTaskLists+0x78>)
 800a730:	4a05      	ldr	r2, [pc, #20]	; (800a748 <prvInitialiseTaskLists+0x64>)
 800a732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <prvInitialiseTaskLists+0x7c>)
 800a736:	4a05      	ldr	r2, [pc, #20]	; (800a74c <prvInitialiseTaskLists+0x68>)
 800a738:	601a      	str	r2, [r3, #0]
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	200008c0 	.word	0x200008c0
 800a748:	20000d20 	.word	0x20000d20
 800a74c:	20000d34 	.word	0x20000d34
 800a750:	20000d50 	.word	0x20000d50
 800a754:	20000d64 	.word	0x20000d64
 800a758:	20000d7c 	.word	0x20000d7c
 800a75c:	20000d48 	.word	0x20000d48
 800a760:	20000d4c 	.word	0x20000d4c

0800a764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a76a:	e019      	b.n	800a7a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a76c:	f000 fece 	bl	800b50c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <prvCheckTasksWaitingTermination+0x4c>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe f997 	bl	8008ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a782:	4b0c      	ldr	r3, [pc, #48]	; (800a7b4 <prvCheckTasksWaitingTermination+0x50>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3b01      	subs	r3, #1
 800a788:	4a0a      	ldr	r2, [pc, #40]	; (800a7b4 <prvCheckTasksWaitingTermination+0x50>)
 800a78a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <prvCheckTasksWaitingTermination+0x54>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3b01      	subs	r3, #1
 800a792:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <prvCheckTasksWaitingTermination+0x54>)
 800a794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a796:	f000 fee7 	bl	800b568 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f80e 	bl	800a7bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <prvCheckTasksWaitingTermination+0x54>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e1      	bne.n	800a76c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000d64 	.word	0x20000d64
 800a7b4:	20000d90 	.word	0x20000d90
 800a7b8:	20000d78 	.word	0x20000d78

0800a7bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d108      	bne.n	800a7e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 f876 	bl	800b8c4 <vPortFree>
				vPortFree( pxTCB );
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f873 	bl	800b8c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7de:	e017      	b.n	800a810 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d103      	bne.n	800a7f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 f86a 	bl	800b8c4 <vPortFree>
	}
 800a7f0:	e00e      	b.n	800a810 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d009      	beq.n	800a810 <prvDeleteTCB+0x54>
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e7fe      	b.n	800a80e <prvDeleteTCB+0x52>
	}
 800a810:	bf00      	nop
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <prvResetNextTaskUnblockTime+0x38>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <prvResetNextTaskUnblockTime+0x3c>)
 800a82a:	f04f 32ff 	mov.w	r2, #4294967295
 800a82e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a830:	e008      	b.n	800a844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a832:	4b07      	ldr	r3, [pc, #28]	; (800a850 <prvResetNextTaskUnblockTime+0x38>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	4a04      	ldr	r2, [pc, #16]	; (800a854 <prvResetNextTaskUnblockTime+0x3c>)
 800a842:	6013      	str	r3, [r2, #0]
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20000d48 	.word	0x20000d48
 800a854:	20000db0 	.word	0x20000db0

0800a858 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <xTaskGetCurrentTaskHandle+0x1c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a864:	687b      	ldr	r3, [r7, #4]
	}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	200008bc 	.word	0x200008bc

0800a878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a87e:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <xTaskGetSchedulerState+0x34>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a886:	2301      	movs	r3, #1
 800a888:	607b      	str	r3, [r7, #4]
 800a88a:	e008      	b.n	800a89e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a88c:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <xTaskGetSchedulerState+0x38>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a894:	2302      	movs	r3, #2
 800a896:	607b      	str	r3, [r7, #4]
 800a898:	e001      	b.n	800a89e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a89e:	687b      	ldr	r3, [r7, #4]
	}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	20000d9c 	.word	0x20000d9c
 800a8b0:	20000db8 	.word	0x20000db8

0800a8b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d051      	beq.n	800a96e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ce:	4b2a      	ldr	r3, [pc, #168]	; (800a978 <xTaskPriorityInherit+0xc4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d241      	bcs.n	800a95c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	db06      	blt.n	800a8ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <xTaskPriorityInherit+0xc4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6959      	ldr	r1, [r3, #20]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <xTaskPriorityInherit+0xc8>)
 800a900:	4413      	add	r3, r2
 800a902:	4299      	cmp	r1, r3
 800a904:	d122      	bne.n	800a94c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	3304      	adds	r3, #4
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe f8d0 	bl	8008ab0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a910:	4b19      	ldr	r3, [pc, #100]	; (800a978 <xTaskPriorityInherit+0xc4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91e:	4b18      	ldr	r3, [pc, #96]	; (800a980 <xTaskPriorityInherit+0xcc>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d903      	bls.n	800a92e <xTaskPriorityInherit+0x7a>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	4a15      	ldr	r2, [pc, #84]	; (800a980 <xTaskPriorityInherit+0xcc>)
 800a92c:	6013      	str	r3, [r2, #0]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4a10      	ldr	r2, [pc, #64]	; (800a97c <xTaskPriorityInherit+0xc8>)
 800a93c:	441a      	add	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	3304      	adds	r3, #4
 800a942:	4619      	mov	r1, r3
 800a944:	4610      	mov	r0, r2
 800a946:	f7fe f856 	bl	80089f6 <vListInsertEnd>
 800a94a:	e004      	b.n	800a956 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a94c:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <xTaskPriorityInherit+0xc4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a956:	2301      	movs	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e008      	b.n	800a96e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <xTaskPriorityInherit+0xc4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	429a      	cmp	r2, r3
 800a968:	d201      	bcs.n	800a96e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a96a:	2301      	movs	r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a96e:	68fb      	ldr	r3, [r7, #12]
	}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	200008bc 	.word	0x200008bc
 800a97c:	200008c0 	.word	0x200008c0
 800a980:	20000d98 	.word	0x20000d98

0800a984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a990:	2300      	movs	r3, #0
 800a992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d054      	beq.n	800aa44 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a99a:	4b2d      	ldr	r3, [pc, #180]	; (800aa50 <xTaskPriorityDisinherit+0xcc>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d009      	beq.n	800a9b8 <xTaskPriorityDisinherit+0x34>
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	e7fe      	b.n	800a9b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d109      	bne.n	800a9d4 <xTaskPriorityDisinherit+0x50>
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	e7fe      	b.n	800a9d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d8:	1e5a      	subs	r2, r3, #1
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d02c      	beq.n	800aa44 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d128      	bne.n	800aa44 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe f85a 	bl	8008ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <xTaskPriorityDisinherit+0xd0>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d903      	bls.n	800aa24 <xTaskPriorityDisinherit+0xa0>
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	4a0c      	ldr	r2, [pc, #48]	; (800aa54 <xTaskPriorityDisinherit+0xd0>)
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4a09      	ldr	r2, [pc, #36]	; (800aa58 <xTaskPriorityDisinherit+0xd4>)
 800aa32:	441a      	add	r2, r3
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f7fd ffdb 	bl	80089f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa44:	697b      	ldr	r3, [r7, #20]
	}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200008bc 	.word	0x200008bc
 800aa54:	20000d98 	.word	0x20000d98
 800aa58:	200008c0 	.word	0x200008c0

0800aa5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d068      	beq.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e7fe      	b.n	800aa8e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d902      	bls.n	800aaa0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	61fb      	str	r3, [r7, #28]
 800aa9e:	e002      	b.n	800aaa6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	69fa      	ldr	r2, [r7, #28]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d04a      	beq.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d145      	bne.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aaba:	4b25      	ldr	r3, [pc, #148]	; (800ab50 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d109      	bne.n	800aad8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	60bb      	str	r3, [r7, #8]
 800aad6:	e7fe      	b.n	800aad6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db04      	blt.n	800aaf6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	6959      	ldr	r1, [r3, #20]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab06:	4413      	add	r3, r2
 800ab08:	4299      	cmp	r1, r3
 800ab0a:	d11c      	bne.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fd ffcd 	bl	8008ab0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1a:	4b0f      	ldr	r3, [pc, #60]	; (800ab58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d903      	bls.n	800ab2a <vTaskPriorityDisinheritAfterTimeout+0xce>
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab26:	4a0c      	ldr	r2, [pc, #48]	; (800ab58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4a07      	ldr	r2, [pc, #28]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab38:	441a      	add	r2, r3
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f7fd ff58 	bl	80089f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab46:	bf00      	nop
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	200008bc 	.word	0x200008bc
 800ab54:	200008c0 	.word	0x200008c0
 800ab58:	20000d98 	.word	0x20000d98

0800ab5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab60:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab6e:	3201      	adds	r2, #1
 800ab70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ab72:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab74:	681b      	ldr	r3, [r3, #0]
	}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	200008bc 	.word	0x200008bc

0800ab84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab8e:	4b21      	ldr	r3, [pc, #132]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab94:	4b20      	ldr	r3, [pc, #128]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fd ff88 	bl	8008ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba6:	d10a      	bne.n	800abbe <prvAddCurrentTaskToDelayedList+0x3a>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d007      	beq.n	800abbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abae:	4b1a      	ldr	r3, [pc, #104]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x94>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3304      	adds	r3, #4
 800abb4:	4619      	mov	r1, r3
 800abb6:	4819      	ldr	r0, [pc, #100]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x98>)
 800abb8:	f7fd ff1d 	bl	80089f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abbc:	e026      	b.n	800ac0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4413      	add	r3, r2
 800abc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d209      	bcs.n	800abea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x94>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3304      	adds	r3, #4
 800abe0:	4619      	mov	r1, r3
 800abe2:	4610      	mov	r0, r2
 800abe4:	f7fd ff2b 	bl	8008a3e <vListInsert>
}
 800abe8:	e010      	b.n	800ac0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abea:	4b0e      	ldr	r3, [pc, #56]	; (800ac24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	4b0a      	ldr	r3, [pc, #40]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f7fd ff21 	bl	8008a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abfc:	4b0a      	ldr	r3, [pc, #40]	; (800ac28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d202      	bcs.n	800ac0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac06:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6013      	str	r3, [r2, #0]
}
 800ac0c:	bf00      	nop
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000d94 	.word	0x20000d94
 800ac18:	200008bc 	.word	0x200008bc
 800ac1c:	20000d7c 	.word	0x20000d7c
 800ac20:	20000d4c 	.word	0x20000d4c
 800ac24:	20000d48 	.word	0x20000d48
 800ac28:	20000db0 	.word	0x20000db0

0800ac2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac36:	f000 faff 	bl	800b238 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac3a:	4b1c      	ldr	r3, [pc, #112]	; (800acac <xTimerCreateTimerTask+0x80>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d021      	beq.n	800ac86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac4a:	1d3a      	adds	r2, r7, #4
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fd fe87 	bl	8008968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	9202      	str	r2, [sp, #8]
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	2302      	movs	r3, #2
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	460a      	mov	r2, r1
 800ac6c:	4910      	ldr	r1, [pc, #64]	; (800acb0 <xTimerCreateTimerTask+0x84>)
 800ac6e:	4811      	ldr	r0, [pc, #68]	; (800acb4 <xTimerCreateTimerTask+0x88>)
 800ac70:	f7fe ffea 	bl	8009c48 <xTaskCreateStatic>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4b10      	ldr	r3, [pc, #64]	; (800acb8 <xTimerCreateTimerTask+0x8c>)
 800ac78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac7a:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <xTimerCreateTimerTask+0x8c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac82:	2301      	movs	r3, #1
 800ac84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d109      	bne.n	800aca0 <xTimerCreateTimerTask+0x74>
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	613b      	str	r3, [r7, #16]
 800ac9e:	e7fe      	b.n	800ac9e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800aca0:	697b      	ldr	r3, [r7, #20]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000dec 	.word	0x20000dec
 800acb0:	0800dc40 	.word	0x0800dc40
 800acb4:	0800aded 	.word	0x0800aded
 800acb8:	20000df0 	.word	0x20000df0

0800acbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08a      	sub	sp, #40	; 0x28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acca:	2300      	movs	r3, #0
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <xTimerGenericCommand+0x2c>
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	623b      	str	r3, [r7, #32]
 800ace6:	e7fe      	b.n	800ace6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ace8:	4b19      	ldr	r3, [pc, #100]	; (800ad50 <xTimerGenericCommand+0x94>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02a      	beq.n	800ad46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	dc18      	bgt.n	800ad34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad02:	f7ff fdb9 	bl	800a878 <xTaskGetSchedulerState>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d109      	bne.n	800ad20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad0c:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <xTimerGenericCommand+0x94>)
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	f107 0110 	add.w	r1, r7, #16
 800ad14:	2300      	movs	r3, #0
 800ad16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad18:	f7fe f94c 	bl	8008fb4 <xQueueGenericSend>
 800ad1c:	6278      	str	r0, [r7, #36]	; 0x24
 800ad1e:	e012      	b.n	800ad46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad20:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <xTimerGenericCommand+0x94>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	f107 0110 	add.w	r1, r7, #16
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f7fe f942 	bl	8008fb4 <xQueueGenericSend>
 800ad30:	6278      	str	r0, [r7, #36]	; 0x24
 800ad32:	e008      	b.n	800ad46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad34:	4b06      	ldr	r3, [pc, #24]	; (800ad50 <xTimerGenericCommand+0x94>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	f107 0110 	add.w	r1, r7, #16
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	f7fe fa32 	bl	80091a8 <xQueueGenericSendFromISR>
 800ad44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3728      	adds	r7, #40	; 0x28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20000dec 	.word	0x20000dec

0800ad54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad5e:	4b22      	ldr	r3, [pc, #136]	; (800ade8 <prvProcessExpiredTimer+0x94>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fd fe9f 	bl	8008ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d021      	beq.n	800adc4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	699a      	ldr	r2, [r3, #24]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	18d1      	adds	r1, r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	6978      	ldr	r0, [r7, #20]
 800ad8e:	f000 f8d1 	bl	800af34 <prvInsertTimerInActiveList>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01e      	beq.n	800add6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	2100      	movs	r1, #0
 800ada2:	6978      	ldr	r0, [r7, #20]
 800ada4:	f7ff ff8a 	bl	800acbc <xTimerGenericCommand>
 800ada8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d112      	bne.n	800add6 <prvProcessExpiredTimer+0x82>
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	e7fe      	b.n	800adc2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adca:	f023 0301 	bic.w	r3, r3, #1
 800adce:	b2da      	uxtb	r2, r3
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	6978      	ldr	r0, [r7, #20]
 800addc:	4798      	blx	r3
}
 800adde:	bf00      	nop
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20000de4 	.word	0x20000de4

0800adec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 f857 	bl	800aeac <prvGetNextExpireTime>
 800adfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4619      	mov	r1, r3
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f803 	bl	800ae10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae0a:	f000 f8d5 	bl	800afb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae0e:	e7f1      	b.n	800adf4 <prvTimerTask+0x8>

0800ae10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae1a:	f7ff f94b 	bl	800a0b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae1e:	f107 0308 	add.w	r3, r7, #8
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 f866 	bl	800aef4 <prvSampleTimeNow>
 800ae28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d130      	bne.n	800ae92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10a      	bne.n	800ae4c <prvProcessTimerOrBlockTask+0x3c>
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d806      	bhi.n	800ae4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae3e:	f7ff f947 	bl	800a0d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae42:	68f9      	ldr	r1, [r7, #12]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff ff85 	bl	800ad54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae4a:	e024      	b.n	800ae96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d008      	beq.n	800ae64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae52:	4b13      	ldr	r3, [pc, #76]	; (800aea0 <prvProcessTimerOrBlockTask+0x90>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <prvProcessTimerOrBlockTask+0x50>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <prvProcessTimerOrBlockTask+0x52>
 800ae60:	2300      	movs	r3, #0
 800ae62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae64:	4b0f      	ldr	r3, [pc, #60]	; (800aea4 <prvProcessTimerOrBlockTask+0x94>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7fe feb5 	bl	8009be0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae76:	f7ff f92b 	bl	800a0d0 <xTaskResumeAll>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae80:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <prvProcessTimerOrBlockTask+0x98>)
 800ae82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	f3bf 8f6f 	isb	sy
}
 800ae90:	e001      	b.n	800ae96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae92:	f7ff f91d 	bl	800a0d0 <xTaskResumeAll>
}
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000de8 	.word	0x20000de8
 800aea4:	20000dec 	.word	0x20000dec
 800aea8:	e000ed04 	.word	0xe000ed04

0800aeac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <prvGetNextExpireTime+0x44>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <prvGetNextExpireTime+0x16>
 800aebe:	2201      	movs	r2, #1
 800aec0:	e000      	b.n	800aec4 <prvGetNextExpireTime+0x18>
 800aec2:	2200      	movs	r2, #0
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d105      	bne.n	800aedc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <prvGetNextExpireTime+0x44>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	e001      	b.n	800aee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aee0:	68fb      	ldr	r3, [r7, #12]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	20000de4 	.word	0x20000de4

0800aef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aefc:	f7ff f984 	bl	800a208 <xTaskGetTickCount>
 800af00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <prvSampleTimeNow+0x3c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d205      	bcs.n	800af18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af0c:	f000 f930 	bl	800b170 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	e002      	b.n	800af1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af1e:	4a04      	ldr	r2, [pc, #16]	; (800af30 <prvSampleTimeNow+0x3c>)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af24:	68fb      	ldr	r3, [r7, #12]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000df4 	.word	0x20000df4

0800af34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d812      	bhi.n	800af80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	1ad2      	subs	r2, r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	429a      	cmp	r2, r3
 800af66:	d302      	bcc.n	800af6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af68:	2301      	movs	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e01b      	b.n	800afa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <prvInsertTimerInActiveList+0x7c>)
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3304      	adds	r3, #4
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f7fd fd60 	bl	8008a3e <vListInsert>
 800af7e:	e012      	b.n	800afa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d206      	bcs.n	800af96 <prvInsertTimerInActiveList+0x62>
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d302      	bcc.n	800af96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	e007      	b.n	800afa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af96:	4b07      	ldr	r3, [pc, #28]	; (800afb4 <prvInsertTimerInActiveList+0x80>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3304      	adds	r3, #4
 800af9e:	4619      	mov	r1, r3
 800afa0:	4610      	mov	r0, r2
 800afa2:	f7fd fd4c 	bl	8008a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afa6:	697b      	ldr	r3, [r7, #20]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000de8 	.word	0x20000de8
 800afb4:	20000de4 	.word	0x20000de4

0800afb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08e      	sub	sp, #56	; 0x38
 800afbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afbe:	e0c6      	b.n	800b14e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	da17      	bge.n	800aff6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afc6:	1d3b      	adds	r3, r7, #4
 800afc8:	3304      	adds	r3, #4
 800afca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <prvProcessReceivedCommands+0x2e>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e7fe      	b.n	800afe4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afec:	6850      	ldr	r0, [r2, #4]
 800afee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff0:	6892      	ldr	r2, [r2, #8]
 800aff2:	4611      	mov	r1, r2
 800aff4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f2c0 80a7 	blt.w	800b14c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	3304      	adds	r3, #4
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fd4e 	bl	8008ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b014:	463b      	mov	r3, r7
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff ff6c 	bl	800aef4 <prvSampleTimeNow>
 800b01c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b09      	cmp	r3, #9
 800b022:	f200 8094 	bhi.w	800b14e <prvProcessReceivedCommands+0x196>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <prvProcessReceivedCommands+0x74>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b055 	.word	0x0800b055
 800b030:	0800b055 	.word	0x0800b055
 800b034:	0800b055 	.word	0x0800b055
 800b038:	0800b0c7 	.word	0x0800b0c7
 800b03c:	0800b0db 	.word	0x0800b0db
 800b040:	0800b123 	.word	0x0800b123
 800b044:	0800b055 	.word	0x0800b055
 800b048:	0800b055 	.word	0x0800b055
 800b04c:	0800b0c7 	.word	0x0800b0c7
 800b050:	0800b0db 	.word	0x0800b0db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	18d1      	adds	r1, r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b074:	f7ff ff5e 	bl	800af34 <prvInsertTimerInActiveList>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d067      	beq.n	800b14e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b084:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b08c:	f003 0304 	and.w	r3, r3, #4
 800b090:	2b00      	cmp	r3, #0
 800b092:	d05c      	beq.n	800b14e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	441a      	add	r2, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0a6:	f7ff fe09 	bl	800acbc <xTimerGenericCommand>
 800b0aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d14d      	bne.n	800b14e <prvProcessReceivedCommands+0x196>
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	61bb      	str	r3, [r7, #24]
 800b0c4:	e7fe      	b.n	800b0c4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0d8:	e039      	b.n	800b14e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d109      	bne.n	800b10e <prvProcessReceivedCommands+0x156>
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e7fe      	b.n	800b10c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	699a      	ldr	r2, [r3, #24]
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	18d1      	adds	r1, r2, r3
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b11c:	f7ff ff0a 	bl	800af34 <prvInsertTimerInActiveList>
					break;
 800b120:	e015      	b.n	800b14e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d103      	bne.n	800b138 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b132:	f000 fbc7 	bl	800b8c4 <vPortFree>
 800b136:	e00a      	b.n	800b14e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b13e:	f023 0301 	bic.w	r3, r3, #1
 800b142:	b2da      	uxtb	r2, r3
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b14a:	e000      	b.n	800b14e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b14c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b14e:	4b07      	ldr	r3, [pc, #28]	; (800b16c <prvProcessReceivedCommands+0x1b4>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	1d39      	adds	r1, r7, #4
 800b154:	2200      	movs	r2, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe f944 	bl	80093e4 <xQueueReceive>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f47f af2e 	bne.w	800afc0 <prvProcessReceivedCommands+0x8>
	}
}
 800b164:	bf00      	nop
 800b166:	3730      	adds	r7, #48	; 0x30
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20000dec 	.word	0x20000dec

0800b170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b088      	sub	sp, #32
 800b174:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b176:	e047      	b.n	800b208 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b178:	4b2d      	ldr	r3, [pc, #180]	; (800b230 <prvSwitchTimerLists+0xc0>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b182:	4b2b      	ldr	r3, [pc, #172]	; (800b230 <prvSwitchTimerLists+0xc0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3304      	adds	r3, #4
 800b190:	4618      	mov	r0, r3
 800b192:	f7fd fc8d 	bl	8008ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d02d      	beq.n	800b208 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d90e      	bls.n	800b1dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1ca:	4b19      	ldr	r3, [pc, #100]	; (800b230 <prvSwitchTimerLists+0xc0>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f7fd fc32 	bl	8008a3e <vListInsert>
 800b1da:	e015      	b.n	800b208 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff fd68 	bl	800acbc <xTimerGenericCommand>
 800b1ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d109      	bne.n	800b208 <prvSwitchTimerLists+0x98>
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	e7fe      	b.n	800b206 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b208:	4b09      	ldr	r3, [pc, #36]	; (800b230 <prvSwitchTimerLists+0xc0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1b2      	bne.n	800b178 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b212:	4b07      	ldr	r3, [pc, #28]	; (800b230 <prvSwitchTimerLists+0xc0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b218:	4b06      	ldr	r3, [pc, #24]	; (800b234 <prvSwitchTimerLists+0xc4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a04      	ldr	r2, [pc, #16]	; (800b230 <prvSwitchTimerLists+0xc0>)
 800b21e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b220:	4a04      	ldr	r2, [pc, #16]	; (800b234 <prvSwitchTimerLists+0xc4>)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	6013      	str	r3, [r2, #0]
}
 800b226:	bf00      	nop
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	20000de4 	.word	0x20000de4
 800b234:	20000de8 	.word	0x20000de8

0800b238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b23e:	f000 f965 	bl	800b50c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d120      	bne.n	800b28c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b24a:	4814      	ldr	r0, [pc, #80]	; (800b29c <prvCheckForValidListAndQueue+0x64>)
 800b24c:	f7fd fba6 	bl	800899c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b250:	4813      	ldr	r0, [pc, #76]	; (800b2a0 <prvCheckForValidListAndQueue+0x68>)
 800b252:	f7fd fba3 	bl	800899c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b256:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <prvCheckForValidListAndQueue+0x6c>)
 800b258:	4a10      	ldr	r2, [pc, #64]	; (800b29c <prvCheckForValidListAndQueue+0x64>)
 800b25a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b25c:	4b12      	ldr	r3, [pc, #72]	; (800b2a8 <prvCheckForValidListAndQueue+0x70>)
 800b25e:	4a10      	ldr	r2, [pc, #64]	; (800b2a0 <prvCheckForValidListAndQueue+0x68>)
 800b260:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b262:	2300      	movs	r3, #0
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <prvCheckForValidListAndQueue+0x74>)
 800b268:	4a11      	ldr	r2, [pc, #68]	; (800b2b0 <prvCheckForValidListAndQueue+0x78>)
 800b26a:	2110      	movs	r1, #16
 800b26c:	200a      	movs	r0, #10
 800b26e:	f7fd fcb1 	bl	8008bd4 <xQueueGenericCreateStatic>
 800b272:	4602      	mov	r2, r0
 800b274:	4b08      	ldr	r3, [pc, #32]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b276:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b278:	4b07      	ldr	r3, [pc, #28]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	490b      	ldr	r1, [pc, #44]	; (800b2b4 <prvCheckForValidListAndQueue+0x7c>)
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fc58 	bl	8009b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b28c:	f000 f96c 	bl	800b568 <vPortExitCritical>
}
 800b290:	bf00      	nop
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000dec 	.word	0x20000dec
 800b29c:	20000dbc 	.word	0x20000dbc
 800b2a0:	20000dd0 	.word	0x20000dd0
 800b2a4:	20000de4 	.word	0x20000de4
 800b2a8:	20000de8 	.word	0x20000de8
 800b2ac:	20000e98 	.word	0x20000e98
 800b2b0:	20000df8 	.word	0x20000df8
 800b2b4:	0800dc48 	.word	0x0800dc48

0800b2b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3b04      	subs	r3, #4
 800b2c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3b04      	subs	r3, #4
 800b2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f023 0201 	bic.w	r2, r3, #1
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3b04      	subs	r3, #4
 800b2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2e8:	4a0c      	ldr	r2, [pc, #48]	; (800b31c <pxPortInitialiseStack+0x64>)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3b14      	subs	r3, #20
 800b2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3b04      	subs	r3, #4
 800b2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f06f 0202 	mvn.w	r2, #2
 800b306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3b20      	subs	r3, #32
 800b30c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b30e:	68fb      	ldr	r3, [r7, #12]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	0800b321 	.word	0x0800b321

0800b320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b32a:	4b11      	ldr	r3, [pc, #68]	; (800b370 <prvTaskExitError+0x50>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b332:	d009      	beq.n	800b348 <prvTaskExitError+0x28>
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	60fb      	str	r3, [r7, #12]
 800b346:	e7fe      	b.n	800b346 <prvTaskExitError+0x26>
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b35a:	bf00      	nop
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0fc      	beq.n	800b35c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b362:	bf00      	nop
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	2000000c 	.word	0x2000000c
	...

0800b380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <pxCurrentTCBConst2>)
 800b382:	6819      	ldr	r1, [r3, #0]
 800b384:	6808      	ldr	r0, [r1, #0]
 800b386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38a:	f380 8809 	msr	PSP, r0
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f04f 0000 	mov.w	r0, #0
 800b396:	f380 8811 	msr	BASEPRI, r0
 800b39a:	4770      	bx	lr
 800b39c:	f3af 8000 	nop.w

0800b3a0 <pxCurrentTCBConst2>:
 800b3a0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop

0800b3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3a8:	4808      	ldr	r0, [pc, #32]	; (800b3cc <prvPortStartFirstTask+0x24>)
 800b3aa:	6800      	ldr	r0, [r0, #0]
 800b3ac:	6800      	ldr	r0, [r0, #0]
 800b3ae:	f380 8808 	msr	MSP, r0
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f380 8814 	msr	CONTROL, r0
 800b3ba:	b662      	cpsie	i
 800b3bc:	b661      	cpsie	f
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	df00      	svc	0
 800b3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3ca:	bf00      	nop
 800b3cc:	e000ed08 	.word	0xe000ed08

0800b3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3d6:	4b44      	ldr	r3, [pc, #272]	; (800b4e8 <xPortStartScheduler+0x118>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a44      	ldr	r2, [pc, #272]	; (800b4ec <xPortStartScheduler+0x11c>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d109      	bne.n	800b3f4 <xPortStartScheduler+0x24>
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	613b      	str	r3, [r7, #16]
 800b3f2:	e7fe      	b.n	800b3f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3f4:	4b3c      	ldr	r3, [pc, #240]	; (800b4e8 <xPortStartScheduler+0x118>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a3d      	ldr	r2, [pc, #244]	; (800b4f0 <xPortStartScheduler+0x120>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d109      	bne.n	800b412 <xPortStartScheduler+0x42>
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	e7fe      	b.n	800b410 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b412:	4b38      	ldr	r3, [pc, #224]	; (800b4f4 <xPortStartScheduler+0x124>)
 800b414:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	22ff      	movs	r2, #255	; 0xff
 800b422:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b434:	b2da      	uxtb	r2, r3
 800b436:	4b30      	ldr	r3, [pc, #192]	; (800b4f8 <xPortStartScheduler+0x128>)
 800b438:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b43a:	4b30      	ldr	r3, [pc, #192]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b43c:	2207      	movs	r2, #7
 800b43e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b440:	e009      	b.n	800b456 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b442:	4b2e      	ldr	r3, [pc, #184]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3b01      	subs	r3, #1
 800b448:	4a2c      	ldr	r2, [pc, #176]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b44a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b44c:	78fb      	ldrb	r3, [r7, #3]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	b2db      	uxtb	r3, r3
 800b454:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b456:	78fb      	ldrb	r3, [r7, #3]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b45e:	2b80      	cmp	r3, #128	; 0x80
 800b460:	d0ef      	beq.n	800b442 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b462:	4b26      	ldr	r3, [pc, #152]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1c3 0307 	rsb	r3, r3, #7
 800b46a:	2b04      	cmp	r3, #4
 800b46c:	d009      	beq.n	800b482 <xPortStartScheduler+0xb2>
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	60bb      	str	r3, [r7, #8]
 800b480:	e7fe      	b.n	800b480 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b482:	4b1e      	ldr	r3, [pc, #120]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	4a1c      	ldr	r2, [pc, #112]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b48a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b48c:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b494:	4a19      	ldr	r2, [pc, #100]	; (800b4fc <xPortStartScheduler+0x12c>)
 800b496:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4a0:	4b17      	ldr	r3, [pc, #92]	; (800b500 <xPortStartScheduler+0x130>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a16      	ldr	r2, [pc, #88]	; (800b500 <xPortStartScheduler+0x130>)
 800b4a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4ac:	4b14      	ldr	r3, [pc, #80]	; (800b500 <xPortStartScheduler+0x130>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a13      	ldr	r2, [pc, #76]	; (800b500 <xPortStartScheduler+0x130>)
 800b4b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4b8:	f000 f8d6 	bl	800b668 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4bc:	4b11      	ldr	r3, [pc, #68]	; (800b504 <xPortStartScheduler+0x134>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4c2:	f000 f8f5 	bl	800b6b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4c6:	4b10      	ldr	r3, [pc, #64]	; (800b508 <xPortStartScheduler+0x138>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a0f      	ldr	r2, [pc, #60]	; (800b508 <xPortStartScheduler+0x138>)
 800b4cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4d2:	f7ff ff69 	bl	800b3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4d6:	f7fe ff5f 	bl	800a398 <vTaskSwitchContext>
	prvTaskExitError();
 800b4da:	f7ff ff21 	bl	800b320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	e000ed00 	.word	0xe000ed00
 800b4ec:	410fc271 	.word	0x410fc271
 800b4f0:	410fc270 	.word	0x410fc270
 800b4f4:	e000e400 	.word	0xe000e400
 800b4f8:	20000ee8 	.word	0x20000ee8
 800b4fc:	20000eec 	.word	0x20000eec
 800b500:	e000ed20 	.word	0xe000ed20
 800b504:	2000000c 	.word	0x2000000c
 800b508:	e000ef34 	.word	0xe000ef34

0800b50c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b524:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <vPortEnterCritical+0x54>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a0d      	ldr	r2, [pc, #52]	; (800b560 <vPortEnterCritical+0x54>)
 800b52c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <vPortEnterCritical+0x54>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d10e      	bne.n	800b554 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b536:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <vPortEnterCritical+0x58>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d009      	beq.n	800b554 <vPortEnterCritical+0x48>
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	603b      	str	r3, [r7, #0]
 800b552:	e7fe      	b.n	800b552 <vPortEnterCritical+0x46>
	}
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	2000000c 	.word	0x2000000c
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b56e:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <vPortExitCritical+0x4c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <vPortExitCritical+0x22>
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	607b      	str	r3, [r7, #4]
 800b588:	e7fe      	b.n	800b588 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b58a:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vPortExitCritical+0x4c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3b01      	subs	r3, #1
 800b590:	4a08      	ldr	r2, [pc, #32]	; (800b5b4 <vPortExitCritical+0x4c>)
 800b592:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b594:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <vPortExitCritical+0x4c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d104      	bne.n	800b5a6 <vPortExitCritical+0x3e>
 800b59c:	2300      	movs	r3, #0
 800b59e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5a6:	bf00      	nop
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	2000000c 	.word	0x2000000c
	...

0800b5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5c0:	f3ef 8009 	mrs	r0, PSP
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	4b15      	ldr	r3, [pc, #84]	; (800b620 <pxCurrentTCBConst>)
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	f01e 0f10 	tst.w	lr, #16
 800b5d0:	bf08      	it	eq
 800b5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5e4:	f380 8811 	msr	BASEPRI, r0
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f7fe fed2 	bl	800a398 <vTaskSwitchContext>
 800b5f4:	f04f 0000 	mov.w	r0, #0
 800b5f8:	f380 8811 	msr	BASEPRI, r0
 800b5fc:	bc09      	pop	{r0, r3}
 800b5fe:	6819      	ldr	r1, [r3, #0]
 800b600:	6808      	ldr	r0, [r1, #0]
 800b602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b606:	f01e 0f10 	tst.w	lr, #16
 800b60a:	bf08      	it	eq
 800b60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b610:	f380 8809 	msr	PSP, r0
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w

0800b620 <pxCurrentTCBConst>:
 800b620:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop

0800b628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b640:	f7fe fdf2 	bl	800a228 <xTaskIncrementTick>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b64a:	4b06      	ldr	r3, [pc, #24]	; (800b664 <SysTick_Handler+0x3c>)
 800b64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	2300      	movs	r3, #0
 800b654:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b66c:	4b0b      	ldr	r3, [pc, #44]	; (800b69c <vPortSetupTimerInterrupt+0x34>)
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b672:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <vPortSetupTimerInterrupt+0x38>)
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <vPortSetupTimerInterrupt+0x3c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a0a      	ldr	r2, [pc, #40]	; (800b6a8 <vPortSetupTimerInterrupt+0x40>)
 800b67e:	fba2 2303 	umull	r2, r3, r2, r3
 800b682:	099b      	lsrs	r3, r3, #6
 800b684:	4a09      	ldr	r2, [pc, #36]	; (800b6ac <vPortSetupTimerInterrupt+0x44>)
 800b686:	3b01      	subs	r3, #1
 800b688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b68a:	4b04      	ldr	r3, [pc, #16]	; (800b69c <vPortSetupTimerInterrupt+0x34>)
 800b68c:	2207      	movs	r2, #7
 800b68e:	601a      	str	r2, [r3, #0]
}
 800b690:	bf00      	nop
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	e000e010 	.word	0xe000e010
 800b6a0:	e000e018 	.word	0xe000e018
 800b6a4:	20000000 	.word	0x20000000
 800b6a8:	10624dd3 	.word	0x10624dd3
 800b6ac:	e000e014 	.word	0xe000e014

0800b6b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6c0 <vPortEnableVFP+0x10>
 800b6b4:	6801      	ldr	r1, [r0, #0]
 800b6b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ba:	6001      	str	r1, [r0, #0]
 800b6bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6be:	bf00      	nop
 800b6c0:	e000ed88 	.word	0xe000ed88

0800b6c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6ca:	f3ef 8305 	mrs	r3, IPSR
 800b6ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	d913      	bls.n	800b6fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6d6:	4a16      	ldr	r2, [pc, #88]	; (800b730 <vPortValidateInterruptPriority+0x6c>)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	4413      	add	r3, r2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6e0:	4b14      	ldr	r3, [pc, #80]	; (800b734 <vPortValidateInterruptPriority+0x70>)
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	7afa      	ldrb	r2, [r7, #11]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d209      	bcs.n	800b6fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
 800b6fc:	e7fe      	b.n	800b6fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6fe:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <vPortValidateInterruptPriority+0x74>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b706:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <vPortValidateInterruptPriority+0x78>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d909      	bls.n	800b722 <vPortValidateInterruptPriority+0x5e>
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	e7fe      	b.n	800b720 <vPortValidateInterruptPriority+0x5c>
	}
 800b722:	bf00      	nop
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	e000e3f0 	.word	0xe000e3f0
 800b734:	20000ee8 	.word	0x20000ee8
 800b738:	e000ed0c 	.word	0xe000ed0c
 800b73c:	20000eec 	.word	0x20000eec

0800b740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b748:	2300      	movs	r3, #0
 800b74a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b74c:	f7fe fcb2 	bl	800a0b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b750:	4b57      	ldr	r3, [pc, #348]	; (800b8b0 <pvPortMalloc+0x170>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b758:	f000 f90c 	bl	800b974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b75c:	4b55      	ldr	r3, [pc, #340]	; (800b8b4 <pvPortMalloc+0x174>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4013      	ands	r3, r2
 800b764:	2b00      	cmp	r3, #0
 800b766:	f040 808c 	bne.w	800b882 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d01c      	beq.n	800b7aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b770:	2208      	movs	r2, #8
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4413      	add	r3, r2
 800b776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f003 0307 	and.w	r3, r3, #7
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d013      	beq.n	800b7aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f023 0307 	bic.w	r3, r3, #7
 800b788:	3308      	adds	r3, #8
 800b78a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <pvPortMalloc+0x6a>
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e7fe      	b.n	800b7a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d068      	beq.n	800b882 <pvPortMalloc+0x142>
 800b7b0:	4b41      	ldr	r3, [pc, #260]	; (800b8b8 <pvPortMalloc+0x178>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d863      	bhi.n	800b882 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7ba:	4b40      	ldr	r3, [pc, #256]	; (800b8bc <pvPortMalloc+0x17c>)
 800b7bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7be:	4b3f      	ldr	r3, [pc, #252]	; (800b8bc <pvPortMalloc+0x17c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7c4:	e004      	b.n	800b7d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d903      	bls.n	800b7e2 <pvPortMalloc+0xa2>
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1f1      	bne.n	800b7c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7e2:	4b33      	ldr	r3, [pc, #204]	; (800b8b0 <pvPortMalloc+0x170>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d04a      	beq.n	800b882 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	4413      	add	r3, r2
 800b7f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	1ad2      	subs	r2, r2, r3
 800b806:	2308      	movs	r3, #8
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d91e      	bls.n	800b84c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4413      	add	r3, r2
 800b814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <pvPortMalloc+0xf4>
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	e7fe      	b.n	800b832 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	1ad2      	subs	r2, r2, r3
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b846:	69b8      	ldr	r0, [r7, #24]
 800b848:	f000 f8f6 	bl	800ba38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b84c:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <pvPortMalloc+0x178>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	4a18      	ldr	r2, [pc, #96]	; (800b8b8 <pvPortMalloc+0x178>)
 800b858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b85a:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <pvPortMalloc+0x178>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	4b18      	ldr	r3, [pc, #96]	; (800b8c0 <pvPortMalloc+0x180>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	429a      	cmp	r2, r3
 800b864:	d203      	bcs.n	800b86e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b866:	4b14      	ldr	r3, [pc, #80]	; (800b8b8 <pvPortMalloc+0x178>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a15      	ldr	r2, [pc, #84]	; (800b8c0 <pvPortMalloc+0x180>)
 800b86c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	4b10      	ldr	r3, [pc, #64]	; (800b8b4 <pvPortMalloc+0x174>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	431a      	orrs	r2, r3
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b882:	f7fe fc25 	bl	800a0d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	f003 0307 	and.w	r3, r3, #7
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d009      	beq.n	800b8a4 <pvPortMalloc+0x164>
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	e7fe      	b.n	800b8a2 <pvPortMalloc+0x162>
	return pvReturn;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3728      	adds	r7, #40	; 0x28
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20004af8 	.word	0x20004af8
 800b8b4:	20004b04 	.word	0x20004b04
 800b8b8:	20004afc 	.word	0x20004afc
 800b8bc:	20004af0 	.word	0x20004af0
 800b8c0:	20004b00 	.word	0x20004b00

0800b8c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d046      	beq.n	800b964 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	425b      	negs	r3, r3
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	4413      	add	r3, r2
 800b8de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	4b20      	ldr	r3, [pc, #128]	; (800b96c <vPortFree+0xa8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d109      	bne.n	800b906 <vPortFree+0x42>
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	e7fe      	b.n	800b904 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d009      	beq.n	800b922 <vPortFree+0x5e>
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60bb      	str	r3, [r7, #8]
 800b920:	e7fe      	b.n	800b920 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	4b11      	ldr	r3, [pc, #68]	; (800b96c <vPortFree+0xa8>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4013      	ands	r3, r2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d019      	beq.n	800b964 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d115      	bne.n	800b964 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	4b0b      	ldr	r3, [pc, #44]	; (800b96c <vPortFree+0xa8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	43db      	mvns	r3, r3
 800b942:	401a      	ands	r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b948:	f7fe fbb4 	bl	800a0b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	4b07      	ldr	r3, [pc, #28]	; (800b970 <vPortFree+0xac>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4413      	add	r3, r2
 800b956:	4a06      	ldr	r2, [pc, #24]	; (800b970 <vPortFree+0xac>)
 800b958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b95a:	6938      	ldr	r0, [r7, #16]
 800b95c:	f000 f86c 	bl	800ba38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b960:	f7fe fbb6 	bl	800a0d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b964:	bf00      	nop
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20004b04 	.word	0x20004b04
 800b970:	20004afc 	.word	0x20004afc

0800b974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b97a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b980:	4b27      	ldr	r3, [pc, #156]	; (800ba20 <prvHeapInit+0xac>)
 800b982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f003 0307 	and.w	r3, r3, #7
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00c      	beq.n	800b9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3307      	adds	r3, #7
 800b992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f023 0307 	bic.w	r3, r3, #7
 800b99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ba20 <prvHeapInit+0xac>)
 800b9a4:	4413      	add	r3, r2
 800b9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ba24 <prvHeapInit+0xb0>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <prvHeapInit+0xb0>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9c0:	2208      	movs	r2, #8
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f023 0307 	bic.w	r3, r3, #7
 800b9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4a15      	ldr	r2, [pc, #84]	; (800ba28 <prvHeapInit+0xb4>)
 800b9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9d6:	4b14      	ldr	r3, [pc, #80]	; (800ba28 <prvHeapInit+0xb4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9de:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <prvHeapInit+0xb4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <prvHeapInit+0xb4>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	4a0a      	ldr	r2, [pc, #40]	; (800ba2c <prvHeapInit+0xb8>)
 800ba02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	4a09      	ldr	r2, [pc, #36]	; (800ba30 <prvHeapInit+0xbc>)
 800ba0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba0c:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <prvHeapInit+0xc0>)
 800ba0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba12:	601a      	str	r2, [r3, #0]
}
 800ba14:	bf00      	nop
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	20000ef0 	.word	0x20000ef0
 800ba24:	20004af0 	.word	0x20004af0
 800ba28:	20004af8 	.word	0x20004af8
 800ba2c:	20004b00 	.word	0x20004b00
 800ba30:	20004afc 	.word	0x20004afc
 800ba34:	20004b04 	.word	0x20004b04

0800ba38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba40:	4b28      	ldr	r3, [pc, #160]	; (800bae4 <prvInsertBlockIntoFreeList+0xac>)
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	e002      	b.n	800ba4c <prvInsertBlockIntoFreeList+0x14>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d8f7      	bhi.n	800ba46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	4413      	add	r3, r2
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d108      	bne.n	800ba7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	441a      	add	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	441a      	add	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d118      	bne.n	800bac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b15      	ldr	r3, [pc, #84]	; (800bae8 <prvInsertBlockIntoFreeList+0xb0>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d00d      	beq.n	800bab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	441a      	add	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	e008      	b.n	800bac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bab6:	4b0c      	ldr	r3, [pc, #48]	; (800bae8 <prvInsertBlockIntoFreeList+0xb0>)
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	e003      	b.n	800bac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d002      	beq.n	800bad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad6:	bf00      	nop
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	20004af0 	.word	0x20004af0
 800bae8:	20004af8 	.word	0x20004af8

0800baec <__errno>:
 800baec:	4b01      	ldr	r3, [pc, #4]	; (800baf4 <__errno+0x8>)
 800baee:	6818      	ldr	r0, [r3, #0]
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20000010 	.word	0x20000010

0800baf8 <__libc_init_array>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	4e0d      	ldr	r6, [pc, #52]	; (800bb30 <__libc_init_array+0x38>)
 800bafc:	4c0d      	ldr	r4, [pc, #52]	; (800bb34 <__libc_init_array+0x3c>)
 800bafe:	1ba4      	subs	r4, r4, r6
 800bb00:	10a4      	asrs	r4, r4, #2
 800bb02:	2500      	movs	r5, #0
 800bb04:	42a5      	cmp	r5, r4
 800bb06:	d109      	bne.n	800bb1c <__libc_init_array+0x24>
 800bb08:	4e0b      	ldr	r6, [pc, #44]	; (800bb38 <__libc_init_array+0x40>)
 800bb0a:	4c0c      	ldr	r4, [pc, #48]	; (800bb3c <__libc_init_array+0x44>)
 800bb0c:	f001 ffd6 	bl	800dabc <_init>
 800bb10:	1ba4      	subs	r4, r4, r6
 800bb12:	10a4      	asrs	r4, r4, #2
 800bb14:	2500      	movs	r5, #0
 800bb16:	42a5      	cmp	r5, r4
 800bb18:	d105      	bne.n	800bb26 <__libc_init_array+0x2e>
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb20:	4798      	blx	r3
 800bb22:	3501      	adds	r5, #1
 800bb24:	e7ee      	b.n	800bb04 <__libc_init_array+0xc>
 800bb26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb2a:	4798      	blx	r3
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	e7f2      	b.n	800bb16 <__libc_init_array+0x1e>
 800bb30:	0800e028 	.word	0x0800e028
 800bb34:	0800e028 	.word	0x0800e028
 800bb38:	0800e028 	.word	0x0800e028
 800bb3c:	0800e02c 	.word	0x0800e02c

0800bb40 <memcpy>:
 800bb40:	b510      	push	{r4, lr}
 800bb42:	1e43      	subs	r3, r0, #1
 800bb44:	440a      	add	r2, r1
 800bb46:	4291      	cmp	r1, r2
 800bb48:	d100      	bne.n	800bb4c <memcpy+0xc>
 800bb4a:	bd10      	pop	{r4, pc}
 800bb4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb54:	e7f7      	b.n	800bb46 <memcpy+0x6>

0800bb56 <memset>:
 800bb56:	4402      	add	r2, r0
 800bb58:	4603      	mov	r3, r0
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d100      	bne.n	800bb60 <memset+0xa>
 800bb5e:	4770      	bx	lr
 800bb60:	f803 1b01 	strb.w	r1, [r3], #1
 800bb64:	e7f9      	b.n	800bb5a <memset+0x4>

0800bb66 <__cvt>:
 800bb66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6a:	ec55 4b10 	vmov	r4, r5, d0
 800bb6e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bb70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb74:	2d00      	cmp	r5, #0
 800bb76:	460e      	mov	r6, r1
 800bb78:	4691      	mov	r9, r2
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	bfb8      	it	lt
 800bb7e:	4622      	movlt	r2, r4
 800bb80:	462b      	mov	r3, r5
 800bb82:	f027 0720 	bic.w	r7, r7, #32
 800bb86:	bfbb      	ittet	lt
 800bb88:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb8c:	461d      	movlt	r5, r3
 800bb8e:	2300      	movge	r3, #0
 800bb90:	232d      	movlt	r3, #45	; 0x2d
 800bb92:	bfb8      	it	lt
 800bb94:	4614      	movlt	r4, r2
 800bb96:	2f46      	cmp	r7, #70	; 0x46
 800bb98:	700b      	strb	r3, [r1, #0]
 800bb9a:	d004      	beq.n	800bba6 <__cvt+0x40>
 800bb9c:	2f45      	cmp	r7, #69	; 0x45
 800bb9e:	d100      	bne.n	800bba2 <__cvt+0x3c>
 800bba0:	3601      	adds	r6, #1
 800bba2:	2102      	movs	r1, #2
 800bba4:	e000      	b.n	800bba8 <__cvt+0x42>
 800bba6:	2103      	movs	r1, #3
 800bba8:	ab03      	add	r3, sp, #12
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	ab02      	add	r3, sp, #8
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	4632      	mov	r2, r6
 800bbb2:	4653      	mov	r3, sl
 800bbb4:	ec45 4b10 	vmov	d0, r4, r5
 800bbb8:	f000 fbae 	bl	800c318 <_dtoa_r>
 800bbbc:	2f47      	cmp	r7, #71	; 0x47
 800bbbe:	4680      	mov	r8, r0
 800bbc0:	d102      	bne.n	800bbc8 <__cvt+0x62>
 800bbc2:	f019 0f01 	tst.w	r9, #1
 800bbc6:	d026      	beq.n	800bc16 <__cvt+0xb0>
 800bbc8:	2f46      	cmp	r7, #70	; 0x46
 800bbca:	eb08 0906 	add.w	r9, r8, r6
 800bbce:	d111      	bne.n	800bbf4 <__cvt+0x8e>
 800bbd0:	f898 3000 	ldrb.w	r3, [r8]
 800bbd4:	2b30      	cmp	r3, #48	; 0x30
 800bbd6:	d10a      	bne.n	800bbee <__cvt+0x88>
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 ff2a 	bl	8000a38 <__aeabi_dcmpeq>
 800bbe4:	b918      	cbnz	r0, 800bbee <__cvt+0x88>
 800bbe6:	f1c6 0601 	rsb	r6, r6, #1
 800bbea:	f8ca 6000 	str.w	r6, [sl]
 800bbee:	f8da 3000 	ldr.w	r3, [sl]
 800bbf2:	4499      	add	r9, r3
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 ff1c 	bl	8000a38 <__aeabi_dcmpeq>
 800bc00:	b938      	cbnz	r0, 800bc12 <__cvt+0xac>
 800bc02:	2230      	movs	r2, #48	; 0x30
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	454b      	cmp	r3, r9
 800bc08:	d205      	bcs.n	800bc16 <__cvt+0xb0>
 800bc0a:	1c59      	adds	r1, r3, #1
 800bc0c:	9103      	str	r1, [sp, #12]
 800bc0e:	701a      	strb	r2, [r3, #0]
 800bc10:	e7f8      	b.n	800bc04 <__cvt+0x9e>
 800bc12:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc1a:	eba3 0308 	sub.w	r3, r3, r8
 800bc1e:	4640      	mov	r0, r8
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	b004      	add	sp, #16
 800bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bc28 <__exponent>:
 800bc28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	bfba      	itte	lt
 800bc30:	4249      	neglt	r1, r1
 800bc32:	232d      	movlt	r3, #45	; 0x2d
 800bc34:	232b      	movge	r3, #43	; 0x2b
 800bc36:	2909      	cmp	r1, #9
 800bc38:	f804 2b02 	strb.w	r2, [r4], #2
 800bc3c:	7043      	strb	r3, [r0, #1]
 800bc3e:	dd20      	ble.n	800bc82 <__exponent+0x5a>
 800bc40:	f10d 0307 	add.w	r3, sp, #7
 800bc44:	461f      	mov	r7, r3
 800bc46:	260a      	movs	r6, #10
 800bc48:	fb91 f5f6 	sdiv	r5, r1, r6
 800bc4c:	fb06 1115 	mls	r1, r6, r5, r1
 800bc50:	3130      	adds	r1, #48	; 0x30
 800bc52:	2d09      	cmp	r5, #9
 800bc54:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc58:	f103 32ff 	add.w	r2, r3, #4294967295
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	dc09      	bgt.n	800bc74 <__exponent+0x4c>
 800bc60:	3130      	adds	r1, #48	; 0x30
 800bc62:	3b02      	subs	r3, #2
 800bc64:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc68:	42bb      	cmp	r3, r7
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	d304      	bcc.n	800bc78 <__exponent+0x50>
 800bc6e:	1a10      	subs	r0, r2, r0
 800bc70:	b003      	add	sp, #12
 800bc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc74:	4613      	mov	r3, r2
 800bc76:	e7e7      	b.n	800bc48 <__exponent+0x20>
 800bc78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7c:	f804 2b01 	strb.w	r2, [r4], #1
 800bc80:	e7f2      	b.n	800bc68 <__exponent+0x40>
 800bc82:	2330      	movs	r3, #48	; 0x30
 800bc84:	4419      	add	r1, r3
 800bc86:	7083      	strb	r3, [r0, #2]
 800bc88:	1d02      	adds	r2, r0, #4
 800bc8a:	70c1      	strb	r1, [r0, #3]
 800bc8c:	e7ef      	b.n	800bc6e <__exponent+0x46>
	...

0800bc90 <_printf_float>:
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	b08d      	sub	sp, #52	; 0x34
 800bc96:	460c      	mov	r4, r1
 800bc98:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	461f      	mov	r7, r3
 800bca0:	4605      	mov	r5, r0
 800bca2:	f001 f8f1 	bl	800ce88 <_localeconv_r>
 800bca6:	6803      	ldr	r3, [r0, #0]
 800bca8:	9304      	str	r3, [sp, #16]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7f4 fa98 	bl	80001e0 <strlen>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	930a      	str	r3, [sp, #40]	; 0x28
 800bcb4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcb8:	9005      	str	r0, [sp, #20]
 800bcba:	3307      	adds	r3, #7
 800bcbc:	f023 0307 	bic.w	r3, r3, #7
 800bcc0:	f103 0208 	add.w	r2, r3, #8
 800bcc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bcc8:	f8d4 b000 	ldr.w	fp, [r4]
 800bccc:	f8c8 2000 	str.w	r2, [r8]
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bcd8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bcdc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bce0:	9307      	str	r3, [sp, #28]
 800bce2:	f8cd 8018 	str.w	r8, [sp, #24]
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	4ba7      	ldr	r3, [pc, #668]	; (800bf88 <_printf_float+0x2f8>)
 800bcec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcf0:	f7f4 fed4 	bl	8000a9c <__aeabi_dcmpun>
 800bcf4:	bb70      	cbnz	r0, 800bd54 <_printf_float+0xc4>
 800bcf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfa:	4ba3      	ldr	r3, [pc, #652]	; (800bf88 <_printf_float+0x2f8>)
 800bcfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd00:	f7f4 feae 	bl	8000a60 <__aeabi_dcmple>
 800bd04:	bb30      	cbnz	r0, 800bd54 <_printf_float+0xc4>
 800bd06:	2200      	movs	r2, #0
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fe9d 	bl	8000a4c <__aeabi_dcmplt>
 800bd12:	b110      	cbz	r0, 800bd1a <_printf_float+0x8a>
 800bd14:	232d      	movs	r3, #45	; 0x2d
 800bd16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd1a:	4a9c      	ldr	r2, [pc, #624]	; (800bf8c <_printf_float+0x2fc>)
 800bd1c:	4b9c      	ldr	r3, [pc, #624]	; (800bf90 <_printf_float+0x300>)
 800bd1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bd22:	bf8c      	ite	hi
 800bd24:	4690      	movhi	r8, r2
 800bd26:	4698      	movls	r8, r3
 800bd28:	2303      	movs	r3, #3
 800bd2a:	f02b 0204 	bic.w	r2, fp, #4
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	6022      	str	r2, [r4, #0]
 800bd32:	f04f 0900 	mov.w	r9, #0
 800bd36:	9700      	str	r7, [sp, #0]
 800bd38:	4633      	mov	r3, r6
 800bd3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 f9e6 	bl	800c110 <_printf_common>
 800bd44:	3001      	adds	r0, #1
 800bd46:	f040 808d 	bne.w	800be64 <_printf_float+0x1d4>
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	b00d      	add	sp, #52	; 0x34
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	4642      	mov	r2, r8
 800bd56:	464b      	mov	r3, r9
 800bd58:	4640      	mov	r0, r8
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	f7f4 fe9e 	bl	8000a9c <__aeabi_dcmpun>
 800bd60:	b110      	cbz	r0, 800bd68 <_printf_float+0xd8>
 800bd62:	4a8c      	ldr	r2, [pc, #560]	; (800bf94 <_printf_float+0x304>)
 800bd64:	4b8c      	ldr	r3, [pc, #560]	; (800bf98 <_printf_float+0x308>)
 800bd66:	e7da      	b.n	800bd1e <_printf_float+0x8e>
 800bd68:	6861      	ldr	r1, [r4, #4]
 800bd6a:	1c4b      	adds	r3, r1, #1
 800bd6c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bd70:	a80a      	add	r0, sp, #40	; 0x28
 800bd72:	d13e      	bne.n	800bdf2 <_printf_float+0x162>
 800bd74:	2306      	movs	r3, #6
 800bd76:	6063      	str	r3, [r4, #4]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bd7e:	ab09      	add	r3, sp, #36	; 0x24
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	ec49 8b10 	vmov	d0, r8, r9
 800bd86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd8a:	6022      	str	r2, [r4, #0]
 800bd8c:	f8cd a004 	str.w	sl, [sp, #4]
 800bd90:	6861      	ldr	r1, [r4, #4]
 800bd92:	4628      	mov	r0, r5
 800bd94:	f7ff fee7 	bl	800bb66 <__cvt>
 800bd98:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bd9c:	2b47      	cmp	r3, #71	; 0x47
 800bd9e:	4680      	mov	r8, r0
 800bda0:	d109      	bne.n	800bdb6 <_printf_float+0x126>
 800bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda4:	1cd8      	adds	r0, r3, #3
 800bda6:	db02      	blt.n	800bdae <_printf_float+0x11e>
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	dd47      	ble.n	800be3e <_printf_float+0x1ae>
 800bdae:	f1aa 0a02 	sub.w	sl, sl, #2
 800bdb2:	fa5f fa8a 	uxtb.w	sl, sl
 800bdb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bdba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdbc:	d824      	bhi.n	800be08 <_printf_float+0x178>
 800bdbe:	3901      	subs	r1, #1
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdc6:	9109      	str	r1, [sp, #36]	; 0x24
 800bdc8:	f7ff ff2e 	bl	800bc28 <__exponent>
 800bdcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdce:	1813      	adds	r3, r2, r0
 800bdd0:	2a01      	cmp	r2, #1
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	6123      	str	r3, [r4, #16]
 800bdd6:	dc02      	bgt.n	800bdde <_printf_float+0x14e>
 800bdd8:	6822      	ldr	r2, [r4, #0]
 800bdda:	07d1      	lsls	r1, r2, #31
 800bddc:	d501      	bpl.n	800bde2 <_printf_float+0x152>
 800bdde:	3301      	adds	r3, #1
 800bde0:	6123      	str	r3, [r4, #16]
 800bde2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0a5      	beq.n	800bd36 <_printf_float+0xa6>
 800bdea:	232d      	movs	r3, #45	; 0x2d
 800bdec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdf0:	e7a1      	b.n	800bd36 <_printf_float+0xa6>
 800bdf2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bdf6:	f000 8177 	beq.w	800c0e8 <_printf_float+0x458>
 800bdfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bdfe:	d1bb      	bne.n	800bd78 <_printf_float+0xe8>
 800be00:	2900      	cmp	r1, #0
 800be02:	d1b9      	bne.n	800bd78 <_printf_float+0xe8>
 800be04:	2301      	movs	r3, #1
 800be06:	e7b6      	b.n	800bd76 <_printf_float+0xe6>
 800be08:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800be0c:	d119      	bne.n	800be42 <_printf_float+0x1b2>
 800be0e:	2900      	cmp	r1, #0
 800be10:	6863      	ldr	r3, [r4, #4]
 800be12:	dd0c      	ble.n	800be2e <_printf_float+0x19e>
 800be14:	6121      	str	r1, [r4, #16]
 800be16:	b913      	cbnz	r3, 800be1e <_printf_float+0x18e>
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	07d2      	lsls	r2, r2, #31
 800be1c:	d502      	bpl.n	800be24 <_printf_float+0x194>
 800be1e:	3301      	adds	r3, #1
 800be20:	440b      	add	r3, r1
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be26:	65a3      	str	r3, [r4, #88]	; 0x58
 800be28:	f04f 0900 	mov.w	r9, #0
 800be2c:	e7d9      	b.n	800bde2 <_printf_float+0x152>
 800be2e:	b913      	cbnz	r3, 800be36 <_printf_float+0x1a6>
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	07d0      	lsls	r0, r2, #31
 800be34:	d501      	bpl.n	800be3a <_printf_float+0x1aa>
 800be36:	3302      	adds	r3, #2
 800be38:	e7f3      	b.n	800be22 <_printf_float+0x192>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e7f1      	b.n	800be22 <_printf_float+0x192>
 800be3e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800be42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be46:	4293      	cmp	r3, r2
 800be48:	db05      	blt.n	800be56 <_printf_float+0x1c6>
 800be4a:	6822      	ldr	r2, [r4, #0]
 800be4c:	6123      	str	r3, [r4, #16]
 800be4e:	07d1      	lsls	r1, r2, #31
 800be50:	d5e8      	bpl.n	800be24 <_printf_float+0x194>
 800be52:	3301      	adds	r3, #1
 800be54:	e7e5      	b.n	800be22 <_printf_float+0x192>
 800be56:	2b00      	cmp	r3, #0
 800be58:	bfd4      	ite	le
 800be5a:	f1c3 0302 	rsble	r3, r3, #2
 800be5e:	2301      	movgt	r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	e7de      	b.n	800be22 <_printf_float+0x192>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	055a      	lsls	r2, r3, #21
 800be68:	d407      	bmi.n	800be7a <_printf_float+0x1ea>
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	4642      	mov	r2, r8
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	d12b      	bne.n	800bed0 <_printf_float+0x240>
 800be78:	e767      	b.n	800bd4a <_printf_float+0xba>
 800be7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800be7e:	f240 80dc 	bls.w	800c03a <_printf_float+0x3aa>
 800be82:	2200      	movs	r2, #0
 800be84:	2300      	movs	r3, #0
 800be86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be8a:	f7f4 fdd5 	bl	8000a38 <__aeabi_dcmpeq>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d033      	beq.n	800befa <_printf_float+0x26a>
 800be92:	2301      	movs	r3, #1
 800be94:	4a41      	ldr	r2, [pc, #260]	; (800bf9c <_printf_float+0x30c>)
 800be96:	4631      	mov	r1, r6
 800be98:	4628      	mov	r0, r5
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	f43f af54 	beq.w	800bd4a <_printf_float+0xba>
 800bea2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bea6:	429a      	cmp	r2, r3
 800bea8:	db02      	blt.n	800beb0 <_printf_float+0x220>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	07d8      	lsls	r0, r3, #31
 800beae:	d50f      	bpl.n	800bed0 <_printf_float+0x240>
 800beb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb4:	4631      	mov	r1, r6
 800beb6:	4628      	mov	r0, r5
 800beb8:	47b8      	blx	r7
 800beba:	3001      	adds	r0, #1
 800bebc:	f43f af45 	beq.w	800bd4a <_printf_float+0xba>
 800bec0:	f04f 0800 	mov.w	r8, #0
 800bec4:	f104 091a 	add.w	r9, r4, #26
 800bec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beca:	3b01      	subs	r3, #1
 800becc:	4543      	cmp	r3, r8
 800bece:	dc09      	bgt.n	800bee4 <_printf_float+0x254>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	079b      	lsls	r3, r3, #30
 800bed4:	f100 8103 	bmi.w	800c0de <_printf_float+0x44e>
 800bed8:	68e0      	ldr	r0, [r4, #12]
 800beda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bedc:	4298      	cmp	r0, r3
 800bede:	bfb8      	it	lt
 800bee0:	4618      	movlt	r0, r3
 800bee2:	e734      	b.n	800bd4e <_printf_float+0xbe>
 800bee4:	2301      	movs	r3, #1
 800bee6:	464a      	mov	r2, r9
 800bee8:	4631      	mov	r1, r6
 800beea:	4628      	mov	r0, r5
 800beec:	47b8      	blx	r7
 800beee:	3001      	adds	r0, #1
 800bef0:	f43f af2b 	beq.w	800bd4a <_printf_float+0xba>
 800bef4:	f108 0801 	add.w	r8, r8, #1
 800bef8:	e7e6      	b.n	800bec8 <_printf_float+0x238>
 800befa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc2b      	bgt.n	800bf58 <_printf_float+0x2c8>
 800bf00:	2301      	movs	r3, #1
 800bf02:	4a26      	ldr	r2, [pc, #152]	; (800bf9c <_printf_float+0x30c>)
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	f43f af1d 	beq.w	800bd4a <_printf_float+0xba>
 800bf10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf12:	b923      	cbnz	r3, 800bf1e <_printf_float+0x28e>
 800bf14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf16:	b913      	cbnz	r3, 800bf1e <_printf_float+0x28e>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	07d9      	lsls	r1, r3, #31
 800bf1c:	d5d8      	bpl.n	800bed0 <_printf_float+0x240>
 800bf1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf22:	4631      	mov	r1, r6
 800bf24:	4628      	mov	r0, r5
 800bf26:	47b8      	blx	r7
 800bf28:	3001      	adds	r0, #1
 800bf2a:	f43f af0e 	beq.w	800bd4a <_printf_float+0xba>
 800bf2e:	f04f 0900 	mov.w	r9, #0
 800bf32:	f104 0a1a 	add.w	sl, r4, #26
 800bf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf38:	425b      	negs	r3, r3
 800bf3a:	454b      	cmp	r3, r9
 800bf3c:	dc01      	bgt.n	800bf42 <_printf_float+0x2b2>
 800bf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf40:	e794      	b.n	800be6c <_printf_float+0x1dc>
 800bf42:	2301      	movs	r3, #1
 800bf44:	4652      	mov	r2, sl
 800bf46:	4631      	mov	r1, r6
 800bf48:	4628      	mov	r0, r5
 800bf4a:	47b8      	blx	r7
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f43f aefc 	beq.w	800bd4a <_printf_float+0xba>
 800bf52:	f109 0901 	add.w	r9, r9, #1
 800bf56:	e7ee      	b.n	800bf36 <_printf_float+0x2a6>
 800bf58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	bfa8      	it	ge
 800bf60:	461a      	movge	r2, r3
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	4691      	mov	r9, r2
 800bf66:	dd07      	ble.n	800bf78 <_printf_float+0x2e8>
 800bf68:	4613      	mov	r3, r2
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	f43f aee9 	beq.w	800bd4a <_printf_float+0xba>
 800bf78:	f104 031a 	add.w	r3, r4, #26
 800bf7c:	f04f 0b00 	mov.w	fp, #0
 800bf80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf84:	9306      	str	r3, [sp, #24]
 800bf86:	e015      	b.n	800bfb4 <_printf_float+0x324>
 800bf88:	7fefffff 	.word	0x7fefffff
 800bf8c:	0800ddbc 	.word	0x0800ddbc
 800bf90:	0800ddb8 	.word	0x0800ddb8
 800bf94:	0800ddc4 	.word	0x0800ddc4
 800bf98:	0800ddc0 	.word	0x0800ddc0
 800bf9c:	0800ddc8 	.word	0x0800ddc8
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	9a06      	ldr	r2, [sp, #24]
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	47b8      	blx	r7
 800bfaa:	3001      	adds	r0, #1
 800bfac:	f43f aecd 	beq.w	800bd4a <_printf_float+0xba>
 800bfb0:	f10b 0b01 	add.w	fp, fp, #1
 800bfb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bfb8:	ebaa 0309 	sub.w	r3, sl, r9
 800bfbc:	455b      	cmp	r3, fp
 800bfbe:	dcef      	bgt.n	800bfa0 <_printf_float+0x310>
 800bfc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	44d0      	add	r8, sl
 800bfc8:	db15      	blt.n	800bff6 <_printf_float+0x366>
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	07da      	lsls	r2, r3, #31
 800bfce:	d412      	bmi.n	800bff6 <_printf_float+0x366>
 800bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfd4:	eba3 020a 	sub.w	r2, r3, sl
 800bfd8:	eba3 0a01 	sub.w	sl, r3, r1
 800bfdc:	4592      	cmp	sl, r2
 800bfde:	bfa8      	it	ge
 800bfe0:	4692      	movge	sl, r2
 800bfe2:	f1ba 0f00 	cmp.w	sl, #0
 800bfe6:	dc0e      	bgt.n	800c006 <_printf_float+0x376>
 800bfe8:	f04f 0800 	mov.w	r8, #0
 800bfec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bff0:	f104 091a 	add.w	r9, r4, #26
 800bff4:	e019      	b.n	800c02a <_printf_float+0x39a>
 800bff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bffa:	4631      	mov	r1, r6
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b8      	blx	r7
 800c000:	3001      	adds	r0, #1
 800c002:	d1e5      	bne.n	800bfd0 <_printf_float+0x340>
 800c004:	e6a1      	b.n	800bd4a <_printf_float+0xba>
 800c006:	4653      	mov	r3, sl
 800c008:	4642      	mov	r2, r8
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b8      	blx	r7
 800c010:	3001      	adds	r0, #1
 800c012:	d1e9      	bne.n	800bfe8 <_printf_float+0x358>
 800c014:	e699      	b.n	800bd4a <_printf_float+0xba>
 800c016:	2301      	movs	r3, #1
 800c018:	464a      	mov	r2, r9
 800c01a:	4631      	mov	r1, r6
 800c01c:	4628      	mov	r0, r5
 800c01e:	47b8      	blx	r7
 800c020:	3001      	adds	r0, #1
 800c022:	f43f ae92 	beq.w	800bd4a <_printf_float+0xba>
 800c026:	f108 0801 	add.w	r8, r8, #1
 800c02a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	eba3 030a 	sub.w	r3, r3, sl
 800c034:	4543      	cmp	r3, r8
 800c036:	dcee      	bgt.n	800c016 <_printf_float+0x386>
 800c038:	e74a      	b.n	800bed0 <_printf_float+0x240>
 800c03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c03c:	2a01      	cmp	r2, #1
 800c03e:	dc01      	bgt.n	800c044 <_printf_float+0x3b4>
 800c040:	07db      	lsls	r3, r3, #31
 800c042:	d53a      	bpl.n	800c0ba <_printf_float+0x42a>
 800c044:	2301      	movs	r3, #1
 800c046:	4642      	mov	r2, r8
 800c048:	4631      	mov	r1, r6
 800c04a:	4628      	mov	r0, r5
 800c04c:	47b8      	blx	r7
 800c04e:	3001      	adds	r0, #1
 800c050:	f43f ae7b 	beq.w	800bd4a <_printf_float+0xba>
 800c054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	f108 0801 	add.w	r8, r8, #1
 800c064:	f43f ae71 	beq.w	800bd4a <_printf_float+0xba>
 800c068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06a:	2200      	movs	r2, #0
 800c06c:	f103 3aff 	add.w	sl, r3, #4294967295
 800c070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c074:	2300      	movs	r3, #0
 800c076:	f7f4 fcdf 	bl	8000a38 <__aeabi_dcmpeq>
 800c07a:	b9c8      	cbnz	r0, 800c0b0 <_printf_float+0x420>
 800c07c:	4653      	mov	r3, sl
 800c07e:	4642      	mov	r2, r8
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	d10e      	bne.n	800c0a8 <_printf_float+0x418>
 800c08a:	e65e      	b.n	800bd4a <_printf_float+0xba>
 800c08c:	2301      	movs	r3, #1
 800c08e:	4652      	mov	r2, sl
 800c090:	4631      	mov	r1, r6
 800c092:	4628      	mov	r0, r5
 800c094:	47b8      	blx	r7
 800c096:	3001      	adds	r0, #1
 800c098:	f43f ae57 	beq.w	800bd4a <_printf_float+0xba>
 800c09c:	f108 0801 	add.w	r8, r8, #1
 800c0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	4543      	cmp	r3, r8
 800c0a6:	dcf1      	bgt.n	800c08c <_printf_float+0x3fc>
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0ae:	e6de      	b.n	800be6e <_printf_float+0x1de>
 800c0b0:	f04f 0800 	mov.w	r8, #0
 800c0b4:	f104 0a1a 	add.w	sl, r4, #26
 800c0b8:	e7f2      	b.n	800c0a0 <_printf_float+0x410>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e7df      	b.n	800c07e <_printf_float+0x3ee>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	464a      	mov	r2, r9
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	47b8      	blx	r7
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f43f ae3e 	beq.w	800bd4a <_printf_float+0xba>
 800c0ce:	f108 0801 	add.w	r8, r8, #1
 800c0d2:	68e3      	ldr	r3, [r4, #12]
 800c0d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0d6:	1a9b      	subs	r3, r3, r2
 800c0d8:	4543      	cmp	r3, r8
 800c0da:	dcf0      	bgt.n	800c0be <_printf_float+0x42e>
 800c0dc:	e6fc      	b.n	800bed8 <_printf_float+0x248>
 800c0de:	f04f 0800 	mov.w	r8, #0
 800c0e2:	f104 0919 	add.w	r9, r4, #25
 800c0e6:	e7f4      	b.n	800c0d2 <_printf_float+0x442>
 800c0e8:	2900      	cmp	r1, #0
 800c0ea:	f43f ae8b 	beq.w	800be04 <_printf_float+0x174>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c0f4:	ab09      	add	r3, sp, #36	; 0x24
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	ec49 8b10 	vmov	d0, r8, r9
 800c0fc:	6022      	str	r2, [r4, #0]
 800c0fe:	f8cd a004 	str.w	sl, [sp, #4]
 800c102:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c106:	4628      	mov	r0, r5
 800c108:	f7ff fd2d 	bl	800bb66 <__cvt>
 800c10c:	4680      	mov	r8, r0
 800c10e:	e648      	b.n	800bda2 <_printf_float+0x112>

0800c110 <_printf_common>:
 800c110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	4691      	mov	r9, r2
 800c116:	461f      	mov	r7, r3
 800c118:	688a      	ldr	r2, [r1, #8]
 800c11a:	690b      	ldr	r3, [r1, #16]
 800c11c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c120:	4293      	cmp	r3, r2
 800c122:	bfb8      	it	lt
 800c124:	4613      	movlt	r3, r2
 800c126:	f8c9 3000 	str.w	r3, [r9]
 800c12a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c12e:	4606      	mov	r6, r0
 800c130:	460c      	mov	r4, r1
 800c132:	b112      	cbz	r2, 800c13a <_printf_common+0x2a>
 800c134:	3301      	adds	r3, #1
 800c136:	f8c9 3000 	str.w	r3, [r9]
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	0699      	lsls	r1, r3, #26
 800c13e:	bf42      	ittt	mi
 800c140:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c144:	3302      	addmi	r3, #2
 800c146:	f8c9 3000 	strmi.w	r3, [r9]
 800c14a:	6825      	ldr	r5, [r4, #0]
 800c14c:	f015 0506 	ands.w	r5, r5, #6
 800c150:	d107      	bne.n	800c162 <_printf_common+0x52>
 800c152:	f104 0a19 	add.w	sl, r4, #25
 800c156:	68e3      	ldr	r3, [r4, #12]
 800c158:	f8d9 2000 	ldr.w	r2, [r9]
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	42ab      	cmp	r3, r5
 800c160:	dc28      	bgt.n	800c1b4 <_printf_common+0xa4>
 800c162:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	3300      	adds	r3, #0
 800c16a:	bf18      	it	ne
 800c16c:	2301      	movne	r3, #1
 800c16e:	0692      	lsls	r2, r2, #26
 800c170:	d42d      	bmi.n	800c1ce <_printf_common+0xbe>
 800c172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c176:	4639      	mov	r1, r7
 800c178:	4630      	mov	r0, r6
 800c17a:	47c0      	blx	r8
 800c17c:	3001      	adds	r0, #1
 800c17e:	d020      	beq.n	800c1c2 <_printf_common+0xb2>
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	68e5      	ldr	r5, [r4, #12]
 800c184:	f8d9 2000 	ldr.w	r2, [r9]
 800c188:	f003 0306 	and.w	r3, r3, #6
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	bf08      	it	eq
 800c190:	1aad      	subeq	r5, r5, r2
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	6922      	ldr	r2, [r4, #16]
 800c196:	bf0c      	ite	eq
 800c198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c19c:	2500      	movne	r5, #0
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	bfc4      	itt	gt
 800c1a2:	1a9b      	subgt	r3, r3, r2
 800c1a4:	18ed      	addgt	r5, r5, r3
 800c1a6:	f04f 0900 	mov.w	r9, #0
 800c1aa:	341a      	adds	r4, #26
 800c1ac:	454d      	cmp	r5, r9
 800c1ae:	d11a      	bne.n	800c1e6 <_printf_common+0xd6>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e008      	b.n	800c1c6 <_printf_common+0xb6>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	4652      	mov	r2, sl
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	47c0      	blx	r8
 800c1be:	3001      	adds	r0, #1
 800c1c0:	d103      	bne.n	800c1ca <_printf_common+0xba>
 800c1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ca:	3501      	adds	r5, #1
 800c1cc:	e7c3      	b.n	800c156 <_printf_common+0x46>
 800c1ce:	18e1      	adds	r1, r4, r3
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	2030      	movs	r0, #48	; 0x30
 800c1d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1d8:	4422      	add	r2, r4
 800c1da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1e2:	3302      	adds	r3, #2
 800c1e4:	e7c5      	b.n	800c172 <_printf_common+0x62>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	47c0      	blx	r8
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d0e6      	beq.n	800c1c2 <_printf_common+0xb2>
 800c1f4:	f109 0901 	add.w	r9, r9, #1
 800c1f8:	e7d8      	b.n	800c1ac <_printf_common+0x9c>

0800c1fa <quorem>:
 800c1fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fe:	6903      	ldr	r3, [r0, #16]
 800c200:	690c      	ldr	r4, [r1, #16]
 800c202:	42a3      	cmp	r3, r4
 800c204:	4680      	mov	r8, r0
 800c206:	f2c0 8082 	blt.w	800c30e <quorem+0x114>
 800c20a:	3c01      	subs	r4, #1
 800c20c:	f101 0714 	add.w	r7, r1, #20
 800c210:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c214:	f100 0614 	add.w	r6, r0, #20
 800c218:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c21c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c220:	eb06 030c 	add.w	r3, r6, ip
 800c224:	3501      	adds	r5, #1
 800c226:	eb07 090c 	add.w	r9, r7, ip
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	fbb0 f5f5 	udiv	r5, r0, r5
 800c230:	b395      	cbz	r5, 800c298 <quorem+0x9e>
 800c232:	f04f 0a00 	mov.w	sl, #0
 800c236:	4638      	mov	r0, r7
 800c238:	46b6      	mov	lr, r6
 800c23a:	46d3      	mov	fp, sl
 800c23c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c240:	b293      	uxth	r3, r2
 800c242:	fb05 a303 	mla	r3, r5, r3, sl
 800c246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	ebab 0303 	sub.w	r3, fp, r3
 800c250:	0c12      	lsrs	r2, r2, #16
 800c252:	f8de b000 	ldr.w	fp, [lr]
 800c256:	fb05 a202 	mla	r2, r5, r2, sl
 800c25a:	fa13 f38b 	uxtah	r3, r3, fp
 800c25e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c262:	fa1f fb82 	uxth.w	fp, r2
 800c266:	f8de 2000 	ldr.w	r2, [lr]
 800c26a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c26e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c272:	b29b      	uxth	r3, r3
 800c274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c278:	4581      	cmp	r9, r0
 800c27a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c27e:	f84e 3b04 	str.w	r3, [lr], #4
 800c282:	d2db      	bcs.n	800c23c <quorem+0x42>
 800c284:	f856 300c 	ldr.w	r3, [r6, ip]
 800c288:	b933      	cbnz	r3, 800c298 <quorem+0x9e>
 800c28a:	9b01      	ldr	r3, [sp, #4]
 800c28c:	3b04      	subs	r3, #4
 800c28e:	429e      	cmp	r6, r3
 800c290:	461a      	mov	r2, r3
 800c292:	d330      	bcc.n	800c2f6 <quorem+0xfc>
 800c294:	f8c8 4010 	str.w	r4, [r8, #16]
 800c298:	4640      	mov	r0, r8
 800c29a:	f001 f821 	bl	800d2e0 <__mcmp>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	db25      	blt.n	800c2ee <quorem+0xf4>
 800c2a2:	3501      	adds	r5, #1
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f04f 0c00 	mov.w	ip, #0
 800c2aa:	f857 2b04 	ldr.w	r2, [r7], #4
 800c2ae:	f8d0 e000 	ldr.w	lr, [r0]
 800c2b2:	b293      	uxth	r3, r2
 800c2b4:	ebac 0303 	sub.w	r3, ip, r3
 800c2b8:	0c12      	lsrs	r2, r2, #16
 800c2ba:	fa13 f38e 	uxtah	r3, r3, lr
 800c2be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2cc:	45b9      	cmp	r9, r7
 800c2ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c2d2:	f840 3b04 	str.w	r3, [r0], #4
 800c2d6:	d2e8      	bcs.n	800c2aa <quorem+0xb0>
 800c2d8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c2dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c2e0:	b92a      	cbnz	r2, 800c2ee <quorem+0xf4>
 800c2e2:	3b04      	subs	r3, #4
 800c2e4:	429e      	cmp	r6, r3
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	d30b      	bcc.n	800c302 <quorem+0x108>
 800c2ea:	f8c8 4010 	str.w	r4, [r8, #16]
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	b003      	add	sp, #12
 800c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	6812      	ldr	r2, [r2, #0]
 800c2f8:	3b04      	subs	r3, #4
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	d1ca      	bne.n	800c294 <quorem+0x9a>
 800c2fe:	3c01      	subs	r4, #1
 800c300:	e7c5      	b.n	800c28e <quorem+0x94>
 800c302:	6812      	ldr	r2, [r2, #0]
 800c304:	3b04      	subs	r3, #4
 800c306:	2a00      	cmp	r2, #0
 800c308:	d1ef      	bne.n	800c2ea <quorem+0xf0>
 800c30a:	3c01      	subs	r4, #1
 800c30c:	e7ea      	b.n	800c2e4 <quorem+0xea>
 800c30e:	2000      	movs	r0, #0
 800c310:	e7ee      	b.n	800c2f0 <quorem+0xf6>
 800c312:	0000      	movs	r0, r0
 800c314:	0000      	movs	r0, r0
	...

0800c318 <_dtoa_r>:
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	ec57 6b10 	vmov	r6, r7, d0
 800c320:	b097      	sub	sp, #92	; 0x5c
 800c322:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c324:	9106      	str	r1, [sp, #24]
 800c326:	4604      	mov	r4, r0
 800c328:	920b      	str	r2, [sp, #44]	; 0x2c
 800c32a:	9312      	str	r3, [sp, #72]	; 0x48
 800c32c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c330:	e9cd 6700 	strd	r6, r7, [sp]
 800c334:	b93d      	cbnz	r5, 800c346 <_dtoa_r+0x2e>
 800c336:	2010      	movs	r0, #16
 800c338:	f000 fdb4 	bl	800cea4 <malloc>
 800c33c:	6260      	str	r0, [r4, #36]	; 0x24
 800c33e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c342:	6005      	str	r5, [r0, #0]
 800c344:	60c5      	str	r5, [r0, #12]
 800c346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c348:	6819      	ldr	r1, [r3, #0]
 800c34a:	b151      	cbz	r1, 800c362 <_dtoa_r+0x4a>
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	604a      	str	r2, [r1, #4]
 800c350:	2301      	movs	r3, #1
 800c352:	4093      	lsls	r3, r2
 800c354:	608b      	str	r3, [r1, #8]
 800c356:	4620      	mov	r0, r4
 800c358:	f000 fde0 	bl	800cf1c <_Bfree>
 800c35c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c35e:	2200      	movs	r2, #0
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	1e3b      	subs	r3, r7, #0
 800c364:	bfbb      	ittet	lt
 800c366:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c36a:	9301      	strlt	r3, [sp, #4]
 800c36c:	2300      	movge	r3, #0
 800c36e:	2201      	movlt	r2, #1
 800c370:	bfac      	ite	ge
 800c372:	f8c8 3000 	strge.w	r3, [r8]
 800c376:	f8c8 2000 	strlt.w	r2, [r8]
 800c37a:	4baf      	ldr	r3, [pc, #700]	; (800c638 <_dtoa_r+0x320>)
 800c37c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c380:	ea33 0308 	bics.w	r3, r3, r8
 800c384:	d114      	bne.n	800c3b0 <_dtoa_r+0x98>
 800c386:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c388:	f242 730f 	movw	r3, #9999	; 0x270f
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	9b00      	ldr	r3, [sp, #0]
 800c390:	b923      	cbnz	r3, 800c39c <_dtoa_r+0x84>
 800c392:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c396:	2800      	cmp	r0, #0
 800c398:	f000 8542 	beq.w	800ce20 <_dtoa_r+0xb08>
 800c39c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c39e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c64c <_dtoa_r+0x334>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 8544 	beq.w	800ce30 <_dtoa_r+0xb18>
 800c3a8:	f10b 0303 	add.w	r3, fp, #3
 800c3ac:	f000 bd3e 	b.w	800ce2c <_dtoa_r+0xb14>
 800c3b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f4 fb3c 	bl	8000a38 <__aeabi_dcmpeq>
 800c3c0:	4681      	mov	r9, r0
 800c3c2:	b168      	cbz	r0, 800c3e0 <_dtoa_r+0xc8>
 800c3c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	6013      	str	r3, [r2, #0]
 800c3ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 8524 	beq.w	800ce1a <_dtoa_r+0xb02>
 800c3d2:	4b9a      	ldr	r3, [pc, #616]	; (800c63c <_dtoa_r+0x324>)
 800c3d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3d6:	f103 3bff 	add.w	fp, r3, #4294967295
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	f000 bd28 	b.w	800ce30 <_dtoa_r+0xb18>
 800c3e0:	aa14      	add	r2, sp, #80	; 0x50
 800c3e2:	a915      	add	r1, sp, #84	; 0x54
 800c3e4:	ec47 6b10 	vmov	d0, r6, r7
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 fff0 	bl	800d3ce <__d2b>
 800c3ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3f2:	9004      	str	r0, [sp, #16]
 800c3f4:	2d00      	cmp	r5, #0
 800c3f6:	d07c      	beq.n	800c4f2 <_dtoa_r+0x1da>
 800c3f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c400:	46b2      	mov	sl, r6
 800c402:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c40a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c40e:	2200      	movs	r2, #0
 800c410:	4b8b      	ldr	r3, [pc, #556]	; (800c640 <_dtoa_r+0x328>)
 800c412:	4650      	mov	r0, sl
 800c414:	4659      	mov	r1, fp
 800c416:	f7f3 feef 	bl	80001f8 <__aeabi_dsub>
 800c41a:	a381      	add	r3, pc, #516	; (adr r3, 800c620 <_dtoa_r+0x308>)
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	f7f4 f8a2 	bl	8000568 <__aeabi_dmul>
 800c424:	a380      	add	r3, pc, #512	; (adr r3, 800c628 <_dtoa_r+0x310>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	f7f3 fee7 	bl	80001fc <__adddf3>
 800c42e:	4606      	mov	r6, r0
 800c430:	4628      	mov	r0, r5
 800c432:	460f      	mov	r7, r1
 800c434:	f7f4 f82e 	bl	8000494 <__aeabi_i2d>
 800c438:	a37d      	add	r3, pc, #500	; (adr r3, 800c630 <_dtoa_r+0x318>)
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f7f4 f893 	bl	8000568 <__aeabi_dmul>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4630      	mov	r0, r6
 800c448:	4639      	mov	r1, r7
 800c44a:	f7f3 fed7 	bl	80001fc <__adddf3>
 800c44e:	4606      	mov	r6, r0
 800c450:	460f      	mov	r7, r1
 800c452:	f7f4 fb39 	bl	8000ac8 <__aeabi_d2iz>
 800c456:	2200      	movs	r2, #0
 800c458:	4682      	mov	sl, r0
 800c45a:	2300      	movs	r3, #0
 800c45c:	4630      	mov	r0, r6
 800c45e:	4639      	mov	r1, r7
 800c460:	f7f4 faf4 	bl	8000a4c <__aeabi_dcmplt>
 800c464:	b148      	cbz	r0, 800c47a <_dtoa_r+0x162>
 800c466:	4650      	mov	r0, sl
 800c468:	f7f4 f814 	bl	8000494 <__aeabi_i2d>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	f7f4 fae2 	bl	8000a38 <__aeabi_dcmpeq>
 800c474:	b908      	cbnz	r0, 800c47a <_dtoa_r+0x162>
 800c476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c47a:	f1ba 0f16 	cmp.w	sl, #22
 800c47e:	d859      	bhi.n	800c534 <_dtoa_r+0x21c>
 800c480:	4970      	ldr	r1, [pc, #448]	; (800c644 <_dtoa_r+0x32c>)
 800c482:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c48a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c48e:	f7f4 fafb 	bl	8000a88 <__aeabi_dcmpgt>
 800c492:	2800      	cmp	r0, #0
 800c494:	d050      	beq.n	800c538 <_dtoa_r+0x220>
 800c496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c49a:	2300      	movs	r3, #0
 800c49c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c49e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4a0:	1b5d      	subs	r5, r3, r5
 800c4a2:	f1b5 0801 	subs.w	r8, r5, #1
 800c4a6:	bf49      	itett	mi
 800c4a8:	f1c5 0301 	rsbmi	r3, r5, #1
 800c4ac:	2300      	movpl	r3, #0
 800c4ae:	9305      	strmi	r3, [sp, #20]
 800c4b0:	f04f 0800 	movmi.w	r8, #0
 800c4b4:	bf58      	it	pl
 800c4b6:	9305      	strpl	r3, [sp, #20]
 800c4b8:	f1ba 0f00 	cmp.w	sl, #0
 800c4bc:	db3e      	blt.n	800c53c <_dtoa_r+0x224>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	44d0      	add	r8, sl
 800c4c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c4c6:	9307      	str	r3, [sp, #28]
 800c4c8:	9b06      	ldr	r3, [sp, #24]
 800c4ca:	2b09      	cmp	r3, #9
 800c4cc:	f200 8090 	bhi.w	800c5f0 <_dtoa_r+0x2d8>
 800c4d0:	2b05      	cmp	r3, #5
 800c4d2:	bfc4      	itt	gt
 800c4d4:	3b04      	subgt	r3, #4
 800c4d6:	9306      	strgt	r3, [sp, #24]
 800c4d8:	9b06      	ldr	r3, [sp, #24]
 800c4da:	f1a3 0302 	sub.w	r3, r3, #2
 800c4de:	bfcc      	ite	gt
 800c4e0:	2500      	movgt	r5, #0
 800c4e2:	2501      	movle	r5, #1
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	f200 808f 	bhi.w	800c608 <_dtoa_r+0x2f0>
 800c4ea:	e8df f003 	tbb	[pc, r3]
 800c4ee:	7f7d      	.short	0x7f7d
 800c4f0:	7131      	.short	0x7131
 800c4f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c4f6:	441d      	add	r5, r3
 800c4f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c4fc:	2820      	cmp	r0, #32
 800c4fe:	dd13      	ble.n	800c528 <_dtoa_r+0x210>
 800c500:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c504:	9b00      	ldr	r3, [sp, #0]
 800c506:	fa08 f800 	lsl.w	r8, r8, r0
 800c50a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c50e:	fa23 f000 	lsr.w	r0, r3, r0
 800c512:	ea48 0000 	orr.w	r0, r8, r0
 800c516:	f7f3 ffad 	bl	8000474 <__aeabi_ui2d>
 800c51a:	2301      	movs	r3, #1
 800c51c:	4682      	mov	sl, r0
 800c51e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c522:	3d01      	subs	r5, #1
 800c524:	9313      	str	r3, [sp, #76]	; 0x4c
 800c526:	e772      	b.n	800c40e <_dtoa_r+0xf6>
 800c528:	9b00      	ldr	r3, [sp, #0]
 800c52a:	f1c0 0020 	rsb	r0, r0, #32
 800c52e:	fa03 f000 	lsl.w	r0, r3, r0
 800c532:	e7f0      	b.n	800c516 <_dtoa_r+0x1fe>
 800c534:	2301      	movs	r3, #1
 800c536:	e7b1      	b.n	800c49c <_dtoa_r+0x184>
 800c538:	900f      	str	r0, [sp, #60]	; 0x3c
 800c53a:	e7b0      	b.n	800c49e <_dtoa_r+0x186>
 800c53c:	9b05      	ldr	r3, [sp, #20]
 800c53e:	eba3 030a 	sub.w	r3, r3, sl
 800c542:	9305      	str	r3, [sp, #20]
 800c544:	f1ca 0300 	rsb	r3, sl, #0
 800c548:	9307      	str	r3, [sp, #28]
 800c54a:	2300      	movs	r3, #0
 800c54c:	930e      	str	r3, [sp, #56]	; 0x38
 800c54e:	e7bb      	b.n	800c4c8 <_dtoa_r+0x1b0>
 800c550:	2301      	movs	r3, #1
 800c552:	930a      	str	r3, [sp, #40]	; 0x28
 800c554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c556:	2b00      	cmp	r3, #0
 800c558:	dd59      	ble.n	800c60e <_dtoa_r+0x2f6>
 800c55a:	9302      	str	r3, [sp, #8]
 800c55c:	4699      	mov	r9, r3
 800c55e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c560:	2200      	movs	r2, #0
 800c562:	6072      	str	r2, [r6, #4]
 800c564:	2204      	movs	r2, #4
 800c566:	f102 0014 	add.w	r0, r2, #20
 800c56a:	4298      	cmp	r0, r3
 800c56c:	6871      	ldr	r1, [r6, #4]
 800c56e:	d953      	bls.n	800c618 <_dtoa_r+0x300>
 800c570:	4620      	mov	r0, r4
 800c572:	f000 fc9f 	bl	800ceb4 <_Balloc>
 800c576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c578:	6030      	str	r0, [r6, #0]
 800c57a:	f1b9 0f0e 	cmp.w	r9, #14
 800c57e:	f8d3 b000 	ldr.w	fp, [r3]
 800c582:	f200 80e6 	bhi.w	800c752 <_dtoa_r+0x43a>
 800c586:	2d00      	cmp	r5, #0
 800c588:	f000 80e3 	beq.w	800c752 <_dtoa_r+0x43a>
 800c58c:	ed9d 7b00 	vldr	d7, [sp]
 800c590:	f1ba 0f00 	cmp.w	sl, #0
 800c594:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c598:	dd74      	ble.n	800c684 <_dtoa_r+0x36c>
 800c59a:	4a2a      	ldr	r2, [pc, #168]	; (800c644 <_dtoa_r+0x32c>)
 800c59c:	f00a 030f 	and.w	r3, sl, #15
 800c5a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c5a4:	ed93 7b00 	vldr	d7, [r3]
 800c5a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c5ac:	06f0      	lsls	r0, r6, #27
 800c5ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c5b2:	d565      	bpl.n	800c680 <_dtoa_r+0x368>
 800c5b4:	4b24      	ldr	r3, [pc, #144]	; (800c648 <_dtoa_r+0x330>)
 800c5b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5be:	f7f4 f8fd 	bl	80007bc <__aeabi_ddiv>
 800c5c2:	e9cd 0100 	strd	r0, r1, [sp]
 800c5c6:	f006 060f 	and.w	r6, r6, #15
 800c5ca:	2503      	movs	r5, #3
 800c5cc:	4f1e      	ldr	r7, [pc, #120]	; (800c648 <_dtoa_r+0x330>)
 800c5ce:	e04c      	b.n	800c66a <_dtoa_r+0x352>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d6:	4453      	add	r3, sl
 800c5d8:	f103 0901 	add.w	r9, r3, #1
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	464b      	mov	r3, r9
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	bfb8      	it	lt
 800c5e4:	2301      	movlt	r3, #1
 800c5e6:	e7ba      	b.n	800c55e <_dtoa_r+0x246>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e7b2      	b.n	800c552 <_dtoa_r+0x23a>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	e7f0      	b.n	800c5d2 <_dtoa_r+0x2ba>
 800c5f0:	2501      	movs	r5, #1
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9306      	str	r3, [sp, #24]
 800c5f6:	950a      	str	r5, [sp, #40]	; 0x28
 800c5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5fc:	9302      	str	r3, [sp, #8]
 800c5fe:	4699      	mov	r9, r3
 800c600:	2200      	movs	r2, #0
 800c602:	2312      	movs	r3, #18
 800c604:	920b      	str	r2, [sp, #44]	; 0x2c
 800c606:	e7aa      	b.n	800c55e <_dtoa_r+0x246>
 800c608:	2301      	movs	r3, #1
 800c60a:	930a      	str	r3, [sp, #40]	; 0x28
 800c60c:	e7f4      	b.n	800c5f8 <_dtoa_r+0x2e0>
 800c60e:	2301      	movs	r3, #1
 800c610:	9302      	str	r3, [sp, #8]
 800c612:	4699      	mov	r9, r3
 800c614:	461a      	mov	r2, r3
 800c616:	e7f5      	b.n	800c604 <_dtoa_r+0x2ec>
 800c618:	3101      	adds	r1, #1
 800c61a:	6071      	str	r1, [r6, #4]
 800c61c:	0052      	lsls	r2, r2, #1
 800c61e:	e7a2      	b.n	800c566 <_dtoa_r+0x24e>
 800c620:	636f4361 	.word	0x636f4361
 800c624:	3fd287a7 	.word	0x3fd287a7
 800c628:	8b60c8b3 	.word	0x8b60c8b3
 800c62c:	3fc68a28 	.word	0x3fc68a28
 800c630:	509f79fb 	.word	0x509f79fb
 800c634:	3fd34413 	.word	0x3fd34413
 800c638:	7ff00000 	.word	0x7ff00000
 800c63c:	0800ddc9 	.word	0x0800ddc9
 800c640:	3ff80000 	.word	0x3ff80000
 800c644:	0800de00 	.word	0x0800de00
 800c648:	0800ddd8 	.word	0x0800ddd8
 800c64c:	0800ddd3 	.word	0x0800ddd3
 800c650:	07f1      	lsls	r1, r6, #31
 800c652:	d508      	bpl.n	800c666 <_dtoa_r+0x34e>
 800c654:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c65c:	f7f3 ff84 	bl	8000568 <__aeabi_dmul>
 800c660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c664:	3501      	adds	r5, #1
 800c666:	1076      	asrs	r6, r6, #1
 800c668:	3708      	adds	r7, #8
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	d1f0      	bne.n	800c650 <_dtoa_r+0x338>
 800c66e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c672:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c676:	f7f4 f8a1 	bl	80007bc <__aeabi_ddiv>
 800c67a:	e9cd 0100 	strd	r0, r1, [sp]
 800c67e:	e01a      	b.n	800c6b6 <_dtoa_r+0x39e>
 800c680:	2502      	movs	r5, #2
 800c682:	e7a3      	b.n	800c5cc <_dtoa_r+0x2b4>
 800c684:	f000 80a0 	beq.w	800c7c8 <_dtoa_r+0x4b0>
 800c688:	f1ca 0600 	rsb	r6, sl, #0
 800c68c:	4b9f      	ldr	r3, [pc, #636]	; (800c90c <_dtoa_r+0x5f4>)
 800c68e:	4fa0      	ldr	r7, [pc, #640]	; (800c910 <_dtoa_r+0x5f8>)
 800c690:	f006 020f 	and.w	r2, r6, #15
 800c694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6a0:	f7f3 ff62 	bl	8000568 <__aeabi_dmul>
 800c6a4:	e9cd 0100 	strd	r0, r1, [sp]
 800c6a8:	1136      	asrs	r6, r6, #4
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2502      	movs	r5, #2
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	d17f      	bne.n	800c7b2 <_dtoa_r+0x49a>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e1      	bne.n	800c67a <_dtoa_r+0x362>
 800c6b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 8087 	beq.w	800c7cc <_dtoa_r+0x4b4>
 800c6be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4b93      	ldr	r3, [pc, #588]	; (800c914 <_dtoa_r+0x5fc>)
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	f7f4 f9bf 	bl	8000a4c <__aeabi_dcmplt>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d07c      	beq.n	800c7cc <_dtoa_r+0x4b4>
 800c6d2:	f1b9 0f00 	cmp.w	r9, #0
 800c6d6:	d079      	beq.n	800c7cc <_dtoa_r+0x4b4>
 800c6d8:	9b02      	ldr	r3, [sp, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dd35      	ble.n	800c74a <_dtoa_r+0x432>
 800c6de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c6e2:	9308      	str	r3, [sp, #32]
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	4b8b      	ldr	r3, [pc, #556]	; (800c918 <_dtoa_r+0x600>)
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f7f3 ff3c 	bl	8000568 <__aeabi_dmul>
 800c6f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c6f4:	9f02      	ldr	r7, [sp, #8]
 800c6f6:	3501      	adds	r5, #1
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f7f3 fecb 	bl	8000494 <__aeabi_i2d>
 800c6fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c702:	f7f3 ff31 	bl	8000568 <__aeabi_dmul>
 800c706:	2200      	movs	r2, #0
 800c708:	4b84      	ldr	r3, [pc, #528]	; (800c91c <_dtoa_r+0x604>)
 800c70a:	f7f3 fd77 	bl	80001fc <__adddf3>
 800c70e:	4605      	mov	r5, r0
 800c710:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c714:	2f00      	cmp	r7, #0
 800c716:	d15d      	bne.n	800c7d4 <_dtoa_r+0x4bc>
 800c718:	2200      	movs	r2, #0
 800c71a:	4b81      	ldr	r3, [pc, #516]	; (800c920 <_dtoa_r+0x608>)
 800c71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c720:	f7f3 fd6a 	bl	80001f8 <__aeabi_dsub>
 800c724:	462a      	mov	r2, r5
 800c726:	4633      	mov	r3, r6
 800c728:	e9cd 0100 	strd	r0, r1, [sp]
 800c72c:	f7f4 f9ac 	bl	8000a88 <__aeabi_dcmpgt>
 800c730:	2800      	cmp	r0, #0
 800c732:	f040 8288 	bne.w	800cc46 <_dtoa_r+0x92e>
 800c736:	462a      	mov	r2, r5
 800c738:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c740:	f7f4 f984 	bl	8000a4c <__aeabi_dcmplt>
 800c744:	2800      	cmp	r0, #0
 800c746:	f040 827c 	bne.w	800cc42 <_dtoa_r+0x92a>
 800c74a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c74e:	e9cd 2300 	strd	r2, r3, [sp]
 800c752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c754:	2b00      	cmp	r3, #0
 800c756:	f2c0 8150 	blt.w	800c9fa <_dtoa_r+0x6e2>
 800c75a:	f1ba 0f0e 	cmp.w	sl, #14
 800c75e:	f300 814c 	bgt.w	800c9fa <_dtoa_r+0x6e2>
 800c762:	4b6a      	ldr	r3, [pc, #424]	; (800c90c <_dtoa_r+0x5f4>)
 800c764:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c768:	ed93 7b00 	vldr	d7, [r3]
 800c76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c774:	f280 80d8 	bge.w	800c928 <_dtoa_r+0x610>
 800c778:	f1b9 0f00 	cmp.w	r9, #0
 800c77c:	f300 80d4 	bgt.w	800c928 <_dtoa_r+0x610>
 800c780:	f040 825e 	bne.w	800cc40 <_dtoa_r+0x928>
 800c784:	2200      	movs	r2, #0
 800c786:	4b66      	ldr	r3, [pc, #408]	; (800c920 <_dtoa_r+0x608>)
 800c788:	ec51 0b17 	vmov	r0, r1, d7
 800c78c:	f7f3 feec 	bl	8000568 <__aeabi_dmul>
 800c790:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c794:	f7f4 f96e 	bl	8000a74 <__aeabi_dcmpge>
 800c798:	464f      	mov	r7, r9
 800c79a:	464e      	mov	r6, r9
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f040 8234 	bne.w	800cc0a <_dtoa_r+0x8f2>
 800c7a2:	2331      	movs	r3, #49	; 0x31
 800c7a4:	f10b 0501 	add.w	r5, fp, #1
 800c7a8:	f88b 3000 	strb.w	r3, [fp]
 800c7ac:	f10a 0a01 	add.w	sl, sl, #1
 800c7b0:	e22f      	b.n	800cc12 <_dtoa_r+0x8fa>
 800c7b2:	07f2      	lsls	r2, r6, #31
 800c7b4:	d505      	bpl.n	800c7c2 <_dtoa_r+0x4aa>
 800c7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ba:	f7f3 fed5 	bl	8000568 <__aeabi_dmul>
 800c7be:	3501      	adds	r5, #1
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	1076      	asrs	r6, r6, #1
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	e772      	b.n	800c6ae <_dtoa_r+0x396>
 800c7c8:	2502      	movs	r5, #2
 800c7ca:	e774      	b.n	800c6b6 <_dtoa_r+0x39e>
 800c7cc:	f8cd a020 	str.w	sl, [sp, #32]
 800c7d0:	464f      	mov	r7, r9
 800c7d2:	e791      	b.n	800c6f8 <_dtoa_r+0x3e0>
 800c7d4:	4b4d      	ldr	r3, [pc, #308]	; (800c90c <_dtoa_r+0x5f4>)
 800c7d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d047      	beq.n	800c874 <_dtoa_r+0x55c>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	494e      	ldr	r1, [pc, #312]	; (800c924 <_dtoa_r+0x60c>)
 800c7ec:	f7f3 ffe6 	bl	80007bc <__aeabi_ddiv>
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	4633      	mov	r3, r6
 800c7f4:	f7f3 fd00 	bl	80001f8 <__aeabi_dsub>
 800c7f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7fc:	465d      	mov	r5, fp
 800c7fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c802:	f7f4 f961 	bl	8000ac8 <__aeabi_d2iz>
 800c806:	4606      	mov	r6, r0
 800c808:	f7f3 fe44 	bl	8000494 <__aeabi_i2d>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c814:	f7f3 fcf0 	bl	80001f8 <__aeabi_dsub>
 800c818:	3630      	adds	r6, #48	; 0x30
 800c81a:	f805 6b01 	strb.w	r6, [r5], #1
 800c81e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c822:	e9cd 0100 	strd	r0, r1, [sp]
 800c826:	f7f4 f911 	bl	8000a4c <__aeabi_dcmplt>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d163      	bne.n	800c8f6 <_dtoa_r+0x5de>
 800c82e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c832:	2000      	movs	r0, #0
 800c834:	4937      	ldr	r1, [pc, #220]	; (800c914 <_dtoa_r+0x5fc>)
 800c836:	f7f3 fcdf 	bl	80001f8 <__aeabi_dsub>
 800c83a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c83e:	f7f4 f905 	bl	8000a4c <__aeabi_dcmplt>
 800c842:	2800      	cmp	r0, #0
 800c844:	f040 80b7 	bne.w	800c9b6 <_dtoa_r+0x69e>
 800c848:	eba5 030b 	sub.w	r3, r5, fp
 800c84c:	429f      	cmp	r7, r3
 800c84e:	f77f af7c 	ble.w	800c74a <_dtoa_r+0x432>
 800c852:	2200      	movs	r2, #0
 800c854:	4b30      	ldr	r3, [pc, #192]	; (800c918 <_dtoa_r+0x600>)
 800c856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c85a:	f7f3 fe85 	bl	8000568 <__aeabi_dmul>
 800c85e:	2200      	movs	r2, #0
 800c860:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c864:	4b2c      	ldr	r3, [pc, #176]	; (800c918 <_dtoa_r+0x600>)
 800c866:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c86a:	f7f3 fe7d 	bl	8000568 <__aeabi_dmul>
 800c86e:	e9cd 0100 	strd	r0, r1, [sp]
 800c872:	e7c4      	b.n	800c7fe <_dtoa_r+0x4e6>
 800c874:	462a      	mov	r2, r5
 800c876:	4633      	mov	r3, r6
 800c878:	f7f3 fe76 	bl	8000568 <__aeabi_dmul>
 800c87c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c880:	eb0b 0507 	add.w	r5, fp, r7
 800c884:	465e      	mov	r6, fp
 800c886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c88a:	f7f4 f91d 	bl	8000ac8 <__aeabi_d2iz>
 800c88e:	4607      	mov	r7, r0
 800c890:	f7f3 fe00 	bl	8000494 <__aeabi_i2d>
 800c894:	3730      	adds	r7, #48	; 0x30
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c89e:	f7f3 fcab 	bl	80001f8 <__aeabi_dsub>
 800c8a2:	f806 7b01 	strb.w	r7, [r6], #1
 800c8a6:	42ae      	cmp	r6, r5
 800c8a8:	e9cd 0100 	strd	r0, r1, [sp]
 800c8ac:	f04f 0200 	mov.w	r2, #0
 800c8b0:	d126      	bne.n	800c900 <_dtoa_r+0x5e8>
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <_dtoa_r+0x60c>)
 800c8b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8b8:	f7f3 fca0 	bl	80001fc <__adddf3>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8c4:	f7f4 f8e0 	bl	8000a88 <__aeabi_dcmpgt>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d174      	bne.n	800c9b6 <_dtoa_r+0x69e>
 800c8cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	4914      	ldr	r1, [pc, #80]	; (800c924 <_dtoa_r+0x60c>)
 800c8d4:	f7f3 fc90 	bl	80001f8 <__aeabi_dsub>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8e0:	f7f4 f8b4 	bl	8000a4c <__aeabi_dcmplt>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	f43f af30 	beq.w	800c74a <_dtoa_r+0x432>
 800c8ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8ee:	2b30      	cmp	r3, #48	; 0x30
 800c8f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c8f4:	d002      	beq.n	800c8fc <_dtoa_r+0x5e4>
 800c8f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c8fa:	e04a      	b.n	800c992 <_dtoa_r+0x67a>
 800c8fc:	4615      	mov	r5, r2
 800c8fe:	e7f4      	b.n	800c8ea <_dtoa_r+0x5d2>
 800c900:	4b05      	ldr	r3, [pc, #20]	; (800c918 <_dtoa_r+0x600>)
 800c902:	f7f3 fe31 	bl	8000568 <__aeabi_dmul>
 800c906:	e9cd 0100 	strd	r0, r1, [sp]
 800c90a:	e7bc      	b.n	800c886 <_dtoa_r+0x56e>
 800c90c:	0800de00 	.word	0x0800de00
 800c910:	0800ddd8 	.word	0x0800ddd8
 800c914:	3ff00000 	.word	0x3ff00000
 800c918:	40240000 	.word	0x40240000
 800c91c:	401c0000 	.word	0x401c0000
 800c920:	40140000 	.word	0x40140000
 800c924:	3fe00000 	.word	0x3fe00000
 800c928:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c92c:	465d      	mov	r5, fp
 800c92e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c932:	4630      	mov	r0, r6
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 ff41 	bl	80007bc <__aeabi_ddiv>
 800c93a:	f7f4 f8c5 	bl	8000ac8 <__aeabi_d2iz>
 800c93e:	4680      	mov	r8, r0
 800c940:	f7f3 fda8 	bl	8000494 <__aeabi_i2d>
 800c944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c948:	f7f3 fe0e 	bl	8000568 <__aeabi_dmul>
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c958:	f7f3 fc4e 	bl	80001f8 <__aeabi_dsub>
 800c95c:	f805 6b01 	strb.w	r6, [r5], #1
 800c960:	eba5 060b 	sub.w	r6, r5, fp
 800c964:	45b1      	cmp	r9, r6
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	d139      	bne.n	800c9e0 <_dtoa_r+0x6c8>
 800c96c:	f7f3 fc46 	bl	80001fc <__adddf3>
 800c970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c974:	4606      	mov	r6, r0
 800c976:	460f      	mov	r7, r1
 800c978:	f7f4 f886 	bl	8000a88 <__aeabi_dcmpgt>
 800c97c:	b9c8      	cbnz	r0, 800c9b2 <_dtoa_r+0x69a>
 800c97e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c982:	4630      	mov	r0, r6
 800c984:	4639      	mov	r1, r7
 800c986:	f7f4 f857 	bl	8000a38 <__aeabi_dcmpeq>
 800c98a:	b110      	cbz	r0, 800c992 <_dtoa_r+0x67a>
 800c98c:	f018 0f01 	tst.w	r8, #1
 800c990:	d10f      	bne.n	800c9b2 <_dtoa_r+0x69a>
 800c992:	9904      	ldr	r1, [sp, #16]
 800c994:	4620      	mov	r0, r4
 800c996:	f000 fac1 	bl	800cf1c <_Bfree>
 800c99a:	2300      	movs	r3, #0
 800c99c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c99e:	702b      	strb	r3, [r5, #0]
 800c9a0:	f10a 0301 	add.w	r3, sl, #1
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 8241 	beq.w	800ce30 <_dtoa_r+0xb18>
 800c9ae:	601d      	str	r5, [r3, #0]
 800c9b0:	e23e      	b.n	800ce30 <_dtoa_r+0xb18>
 800c9b2:	f8cd a020 	str.w	sl, [sp, #32]
 800c9b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c9ba:	2a39      	cmp	r2, #57	; 0x39
 800c9bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800c9c0:	d108      	bne.n	800c9d4 <_dtoa_r+0x6bc>
 800c9c2:	459b      	cmp	fp, r3
 800c9c4:	d10a      	bne.n	800c9dc <_dtoa_r+0x6c4>
 800c9c6:	9b08      	ldr	r3, [sp, #32]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9308      	str	r3, [sp, #32]
 800c9cc:	2330      	movs	r3, #48	; 0x30
 800c9ce:	f88b 3000 	strb.w	r3, [fp]
 800c9d2:	465b      	mov	r3, fp
 800c9d4:	781a      	ldrb	r2, [r3, #0]
 800c9d6:	3201      	adds	r2, #1
 800c9d8:	701a      	strb	r2, [r3, #0]
 800c9da:	e78c      	b.n	800c8f6 <_dtoa_r+0x5de>
 800c9dc:	461d      	mov	r5, r3
 800c9de:	e7ea      	b.n	800c9b6 <_dtoa_r+0x69e>
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	4b9b      	ldr	r3, [pc, #620]	; (800cc50 <_dtoa_r+0x938>)
 800c9e4:	f7f3 fdc0 	bl	8000568 <__aeabi_dmul>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	460f      	mov	r7, r1
 800c9f0:	f7f4 f822 	bl	8000a38 <__aeabi_dcmpeq>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d09a      	beq.n	800c92e <_dtoa_r+0x616>
 800c9f8:	e7cb      	b.n	800c992 <_dtoa_r+0x67a>
 800c9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9fc:	2a00      	cmp	r2, #0
 800c9fe:	f000 808b 	beq.w	800cb18 <_dtoa_r+0x800>
 800ca02:	9a06      	ldr	r2, [sp, #24]
 800ca04:	2a01      	cmp	r2, #1
 800ca06:	dc6e      	bgt.n	800cae6 <_dtoa_r+0x7ce>
 800ca08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca0a:	2a00      	cmp	r2, #0
 800ca0c:	d067      	beq.n	800cade <_dtoa_r+0x7c6>
 800ca0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca12:	9f07      	ldr	r7, [sp, #28]
 800ca14:	9d05      	ldr	r5, [sp, #20]
 800ca16:	9a05      	ldr	r2, [sp, #20]
 800ca18:	2101      	movs	r1, #1
 800ca1a:	441a      	add	r2, r3
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	9205      	str	r2, [sp, #20]
 800ca20:	4498      	add	r8, r3
 800ca22:	f000 fb1b 	bl	800d05c <__i2b>
 800ca26:	4606      	mov	r6, r0
 800ca28:	2d00      	cmp	r5, #0
 800ca2a:	dd0c      	ble.n	800ca46 <_dtoa_r+0x72e>
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	dd09      	ble.n	800ca46 <_dtoa_r+0x72e>
 800ca32:	4545      	cmp	r5, r8
 800ca34:	9a05      	ldr	r2, [sp, #20]
 800ca36:	462b      	mov	r3, r5
 800ca38:	bfa8      	it	ge
 800ca3a:	4643      	movge	r3, r8
 800ca3c:	1ad2      	subs	r2, r2, r3
 800ca3e:	9205      	str	r2, [sp, #20]
 800ca40:	1aed      	subs	r5, r5, r3
 800ca42:	eba8 0803 	sub.w	r8, r8, r3
 800ca46:	9b07      	ldr	r3, [sp, #28]
 800ca48:	b1eb      	cbz	r3, 800ca86 <_dtoa_r+0x76e>
 800ca4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d067      	beq.n	800cb20 <_dtoa_r+0x808>
 800ca50:	b18f      	cbz	r7, 800ca76 <_dtoa_r+0x75e>
 800ca52:	4631      	mov	r1, r6
 800ca54:	463a      	mov	r2, r7
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 fba0 	bl	800d19c <__pow5mult>
 800ca5c:	9a04      	ldr	r2, [sp, #16]
 800ca5e:	4601      	mov	r1, r0
 800ca60:	4606      	mov	r6, r0
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 fb03 	bl	800d06e <__multiply>
 800ca68:	9904      	ldr	r1, [sp, #16]
 800ca6a:	9008      	str	r0, [sp, #32]
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 fa55 	bl	800cf1c <_Bfree>
 800ca72:	9b08      	ldr	r3, [sp, #32]
 800ca74:	9304      	str	r3, [sp, #16]
 800ca76:	9b07      	ldr	r3, [sp, #28]
 800ca78:	1bda      	subs	r2, r3, r7
 800ca7a:	d004      	beq.n	800ca86 <_dtoa_r+0x76e>
 800ca7c:	9904      	ldr	r1, [sp, #16]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 fb8c 	bl	800d19c <__pow5mult>
 800ca84:	9004      	str	r0, [sp, #16]
 800ca86:	2101      	movs	r1, #1
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 fae7 	bl	800d05c <__i2b>
 800ca8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca90:	4607      	mov	r7, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 81d0 	beq.w	800ce38 <_dtoa_r+0xb20>
 800ca98:	461a      	mov	r2, r3
 800ca9a:	4601      	mov	r1, r0
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f000 fb7d 	bl	800d19c <__pow5mult>
 800caa2:	9b06      	ldr	r3, [sp, #24]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	4607      	mov	r7, r0
 800caa8:	dc40      	bgt.n	800cb2c <_dtoa_r+0x814>
 800caaa:	9b00      	ldr	r3, [sp, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d139      	bne.n	800cb24 <_dtoa_r+0x80c>
 800cab0:	9b01      	ldr	r3, [sp, #4]
 800cab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d136      	bne.n	800cb28 <_dtoa_r+0x810>
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cac0:	0d1b      	lsrs	r3, r3, #20
 800cac2:	051b      	lsls	r3, r3, #20
 800cac4:	b12b      	cbz	r3, 800cad2 <_dtoa_r+0x7ba>
 800cac6:	9b05      	ldr	r3, [sp, #20]
 800cac8:	3301      	adds	r3, #1
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	f108 0801 	add.w	r8, r8, #1
 800cad0:	2301      	movs	r3, #1
 800cad2:	9307      	str	r3, [sp, #28]
 800cad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d12a      	bne.n	800cb30 <_dtoa_r+0x818>
 800cada:	2001      	movs	r0, #1
 800cadc:	e030      	b.n	800cb40 <_dtoa_r+0x828>
 800cade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cae0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cae4:	e795      	b.n	800ca12 <_dtoa_r+0x6fa>
 800cae6:	9b07      	ldr	r3, [sp, #28]
 800cae8:	f109 37ff 	add.w	r7, r9, #4294967295
 800caec:	42bb      	cmp	r3, r7
 800caee:	bfbf      	itttt	lt
 800caf0:	9b07      	ldrlt	r3, [sp, #28]
 800caf2:	9707      	strlt	r7, [sp, #28]
 800caf4:	1afa      	sublt	r2, r7, r3
 800caf6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800caf8:	bfbb      	ittet	lt
 800cafa:	189b      	addlt	r3, r3, r2
 800cafc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cafe:	1bdf      	subge	r7, r3, r7
 800cb00:	2700      	movlt	r7, #0
 800cb02:	f1b9 0f00 	cmp.w	r9, #0
 800cb06:	bfb5      	itete	lt
 800cb08:	9b05      	ldrlt	r3, [sp, #20]
 800cb0a:	9d05      	ldrge	r5, [sp, #20]
 800cb0c:	eba3 0509 	sublt.w	r5, r3, r9
 800cb10:	464b      	movge	r3, r9
 800cb12:	bfb8      	it	lt
 800cb14:	2300      	movlt	r3, #0
 800cb16:	e77e      	b.n	800ca16 <_dtoa_r+0x6fe>
 800cb18:	9f07      	ldr	r7, [sp, #28]
 800cb1a:	9d05      	ldr	r5, [sp, #20]
 800cb1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cb1e:	e783      	b.n	800ca28 <_dtoa_r+0x710>
 800cb20:	9a07      	ldr	r2, [sp, #28]
 800cb22:	e7ab      	b.n	800ca7c <_dtoa_r+0x764>
 800cb24:	2300      	movs	r3, #0
 800cb26:	e7d4      	b.n	800cad2 <_dtoa_r+0x7ba>
 800cb28:	9b00      	ldr	r3, [sp, #0]
 800cb2a:	e7d2      	b.n	800cad2 <_dtoa_r+0x7ba>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cb36:	6918      	ldr	r0, [r3, #16]
 800cb38:	f000 fa42 	bl	800cfc0 <__hi0bits>
 800cb3c:	f1c0 0020 	rsb	r0, r0, #32
 800cb40:	4440      	add	r0, r8
 800cb42:	f010 001f 	ands.w	r0, r0, #31
 800cb46:	d047      	beq.n	800cbd8 <_dtoa_r+0x8c0>
 800cb48:	f1c0 0320 	rsb	r3, r0, #32
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	dd3b      	ble.n	800cbc8 <_dtoa_r+0x8b0>
 800cb50:	9b05      	ldr	r3, [sp, #20]
 800cb52:	f1c0 001c 	rsb	r0, r0, #28
 800cb56:	4403      	add	r3, r0
 800cb58:	9305      	str	r3, [sp, #20]
 800cb5a:	4405      	add	r5, r0
 800cb5c:	4480      	add	r8, r0
 800cb5e:	9b05      	ldr	r3, [sp, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dd05      	ble.n	800cb70 <_dtoa_r+0x858>
 800cb64:	461a      	mov	r2, r3
 800cb66:	9904      	ldr	r1, [sp, #16]
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fb65 	bl	800d238 <__lshift>
 800cb6e:	9004      	str	r0, [sp, #16]
 800cb70:	f1b8 0f00 	cmp.w	r8, #0
 800cb74:	dd05      	ble.n	800cb82 <_dtoa_r+0x86a>
 800cb76:	4639      	mov	r1, r7
 800cb78:	4642      	mov	r2, r8
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 fb5c 	bl	800d238 <__lshift>
 800cb80:	4607      	mov	r7, r0
 800cb82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb84:	b353      	cbz	r3, 800cbdc <_dtoa_r+0x8c4>
 800cb86:	4639      	mov	r1, r7
 800cb88:	9804      	ldr	r0, [sp, #16]
 800cb8a:	f000 fba9 	bl	800d2e0 <__mcmp>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	da24      	bge.n	800cbdc <_dtoa_r+0x8c4>
 800cb92:	2300      	movs	r3, #0
 800cb94:	220a      	movs	r2, #10
 800cb96:	9904      	ldr	r1, [sp, #16]
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 f9d6 	bl	800cf4a <__multadd>
 800cb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba0:	9004      	str	r0, [sp, #16]
 800cba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 814d 	beq.w	800ce46 <_dtoa_r+0xb2e>
 800cbac:	2300      	movs	r3, #0
 800cbae:	4631      	mov	r1, r6
 800cbb0:	220a      	movs	r2, #10
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 f9c9 	bl	800cf4a <__multadd>
 800cbb8:	9b02      	ldr	r3, [sp, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	dc4f      	bgt.n	800cc60 <_dtoa_r+0x948>
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	dd4c      	ble.n	800cc60 <_dtoa_r+0x948>
 800cbc6:	e011      	b.n	800cbec <_dtoa_r+0x8d4>
 800cbc8:	d0c9      	beq.n	800cb5e <_dtoa_r+0x846>
 800cbca:	9a05      	ldr	r2, [sp, #20]
 800cbcc:	331c      	adds	r3, #28
 800cbce:	441a      	add	r2, r3
 800cbd0:	9205      	str	r2, [sp, #20]
 800cbd2:	441d      	add	r5, r3
 800cbd4:	4498      	add	r8, r3
 800cbd6:	e7c2      	b.n	800cb5e <_dtoa_r+0x846>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	e7f6      	b.n	800cbca <_dtoa_r+0x8b2>
 800cbdc:	f1b9 0f00 	cmp.w	r9, #0
 800cbe0:	dc38      	bgt.n	800cc54 <_dtoa_r+0x93c>
 800cbe2:	9b06      	ldr	r3, [sp, #24]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	dd35      	ble.n	800cc54 <_dtoa_r+0x93c>
 800cbe8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbec:	9b02      	ldr	r3, [sp, #8]
 800cbee:	b963      	cbnz	r3, 800cc0a <_dtoa_r+0x8f2>
 800cbf0:	4639      	mov	r1, r7
 800cbf2:	2205      	movs	r2, #5
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 f9a8 	bl	800cf4a <__multadd>
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	9804      	ldr	r0, [sp, #16]
 800cc00:	f000 fb6e 	bl	800d2e0 <__mcmp>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f73f adcc 	bgt.w	800c7a2 <_dtoa_r+0x48a>
 800cc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc0c:	465d      	mov	r5, fp
 800cc0e:	ea6f 0a03 	mvn.w	sl, r3
 800cc12:	f04f 0900 	mov.w	r9, #0
 800cc16:	4639      	mov	r1, r7
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 f97f 	bl	800cf1c <_Bfree>
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	f43f aeb7 	beq.w	800c992 <_dtoa_r+0x67a>
 800cc24:	f1b9 0f00 	cmp.w	r9, #0
 800cc28:	d005      	beq.n	800cc36 <_dtoa_r+0x91e>
 800cc2a:	45b1      	cmp	r9, r6
 800cc2c:	d003      	beq.n	800cc36 <_dtoa_r+0x91e>
 800cc2e:	4649      	mov	r1, r9
 800cc30:	4620      	mov	r0, r4
 800cc32:	f000 f973 	bl	800cf1c <_Bfree>
 800cc36:	4631      	mov	r1, r6
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f000 f96f 	bl	800cf1c <_Bfree>
 800cc3e:	e6a8      	b.n	800c992 <_dtoa_r+0x67a>
 800cc40:	2700      	movs	r7, #0
 800cc42:	463e      	mov	r6, r7
 800cc44:	e7e1      	b.n	800cc0a <_dtoa_r+0x8f2>
 800cc46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc4a:	463e      	mov	r6, r7
 800cc4c:	e5a9      	b.n	800c7a2 <_dtoa_r+0x48a>
 800cc4e:	bf00      	nop
 800cc50:	40240000 	.word	0x40240000
 800cc54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc56:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80fa 	beq.w	800ce54 <_dtoa_r+0xb3c>
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	dd05      	ble.n	800cc70 <_dtoa_r+0x958>
 800cc64:	4631      	mov	r1, r6
 800cc66:	462a      	mov	r2, r5
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 fae5 	bl	800d238 <__lshift>
 800cc6e:	4606      	mov	r6, r0
 800cc70:	9b07      	ldr	r3, [sp, #28]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d04c      	beq.n	800cd10 <_dtoa_r+0x9f8>
 800cc76:	6871      	ldr	r1, [r6, #4]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f91b 	bl	800ceb4 <_Balloc>
 800cc7e:	6932      	ldr	r2, [r6, #16]
 800cc80:	3202      	adds	r2, #2
 800cc82:	4605      	mov	r5, r0
 800cc84:	0092      	lsls	r2, r2, #2
 800cc86:	f106 010c 	add.w	r1, r6, #12
 800cc8a:	300c      	adds	r0, #12
 800cc8c:	f7fe ff58 	bl	800bb40 <memcpy>
 800cc90:	2201      	movs	r2, #1
 800cc92:	4629      	mov	r1, r5
 800cc94:	4620      	mov	r0, r4
 800cc96:	f000 facf 	bl	800d238 <__lshift>
 800cc9a:	9b00      	ldr	r3, [sp, #0]
 800cc9c:	f8cd b014 	str.w	fp, [sp, #20]
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	46b1      	mov	r9, r6
 800cca6:	9307      	str	r3, [sp, #28]
 800cca8:	4606      	mov	r6, r0
 800ccaa:	4639      	mov	r1, r7
 800ccac:	9804      	ldr	r0, [sp, #16]
 800ccae:	f7ff faa4 	bl	800c1fa <quorem>
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ccba:	9804      	ldr	r0, [sp, #16]
 800ccbc:	f000 fb10 	bl	800d2e0 <__mcmp>
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	9000      	str	r0, [sp, #0]
 800ccc4:	4639      	mov	r1, r7
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fb24 	bl	800d314 <__mdiff>
 800cccc:	68c3      	ldr	r3, [r0, #12]
 800ccce:	4602      	mov	r2, r0
 800ccd0:	bb03      	cbnz	r3, 800cd14 <_dtoa_r+0x9fc>
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	9008      	str	r0, [sp, #32]
 800ccd6:	9804      	ldr	r0, [sp, #16]
 800ccd8:	f000 fb02 	bl	800d2e0 <__mcmp>
 800ccdc:	9a08      	ldr	r2, [sp, #32]
 800ccde:	4603      	mov	r3, r0
 800cce0:	4611      	mov	r1, r2
 800cce2:	4620      	mov	r0, r4
 800cce4:	9308      	str	r3, [sp, #32]
 800cce6:	f000 f919 	bl	800cf1c <_Bfree>
 800ccea:	9b08      	ldr	r3, [sp, #32]
 800ccec:	b9a3      	cbnz	r3, 800cd18 <_dtoa_r+0xa00>
 800ccee:	9a06      	ldr	r2, [sp, #24]
 800ccf0:	b992      	cbnz	r2, 800cd18 <_dtoa_r+0xa00>
 800ccf2:	9a07      	ldr	r2, [sp, #28]
 800ccf4:	b982      	cbnz	r2, 800cd18 <_dtoa_r+0xa00>
 800ccf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ccfa:	d029      	beq.n	800cd50 <_dtoa_r+0xa38>
 800ccfc:	9b00      	ldr	r3, [sp, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	dd01      	ble.n	800cd06 <_dtoa_r+0x9ee>
 800cd02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cd06:	9b05      	ldr	r3, [sp, #20]
 800cd08:	1c5d      	adds	r5, r3, #1
 800cd0a:	f883 8000 	strb.w	r8, [r3]
 800cd0e:	e782      	b.n	800cc16 <_dtoa_r+0x8fe>
 800cd10:	4630      	mov	r0, r6
 800cd12:	e7c2      	b.n	800cc9a <_dtoa_r+0x982>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e7e3      	b.n	800cce0 <_dtoa_r+0x9c8>
 800cd18:	9a00      	ldr	r2, [sp, #0]
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	db04      	blt.n	800cd28 <_dtoa_r+0xa10>
 800cd1e:	d125      	bne.n	800cd6c <_dtoa_r+0xa54>
 800cd20:	9a06      	ldr	r2, [sp, #24]
 800cd22:	bb1a      	cbnz	r2, 800cd6c <_dtoa_r+0xa54>
 800cd24:	9a07      	ldr	r2, [sp, #28]
 800cd26:	bb0a      	cbnz	r2, 800cd6c <_dtoa_r+0xa54>
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	ddec      	ble.n	800cd06 <_dtoa_r+0x9ee>
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	9904      	ldr	r1, [sp, #16]
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 fa81 	bl	800d238 <__lshift>
 800cd36:	4639      	mov	r1, r7
 800cd38:	9004      	str	r0, [sp, #16]
 800cd3a:	f000 fad1 	bl	800d2e0 <__mcmp>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	dc03      	bgt.n	800cd4a <_dtoa_r+0xa32>
 800cd42:	d1e0      	bne.n	800cd06 <_dtoa_r+0x9ee>
 800cd44:	f018 0f01 	tst.w	r8, #1
 800cd48:	d0dd      	beq.n	800cd06 <_dtoa_r+0x9ee>
 800cd4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd4e:	d1d8      	bne.n	800cd02 <_dtoa_r+0x9ea>
 800cd50:	9b05      	ldr	r3, [sp, #20]
 800cd52:	9a05      	ldr	r2, [sp, #20]
 800cd54:	1c5d      	adds	r5, r3, #1
 800cd56:	2339      	movs	r3, #57	; 0x39
 800cd58:	7013      	strb	r3, [r2, #0]
 800cd5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd5e:	2b39      	cmp	r3, #57	; 0x39
 800cd60:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd64:	d04f      	beq.n	800ce06 <_dtoa_r+0xaee>
 800cd66:	3301      	adds	r3, #1
 800cd68:	7013      	strb	r3, [r2, #0]
 800cd6a:	e754      	b.n	800cc16 <_dtoa_r+0x8fe>
 800cd6c:	9a05      	ldr	r2, [sp, #20]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f102 0501 	add.w	r5, r2, #1
 800cd74:	dd06      	ble.n	800cd84 <_dtoa_r+0xa6c>
 800cd76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd7a:	d0e9      	beq.n	800cd50 <_dtoa_r+0xa38>
 800cd7c:	f108 0801 	add.w	r8, r8, #1
 800cd80:	9b05      	ldr	r3, [sp, #20]
 800cd82:	e7c2      	b.n	800cd0a <_dtoa_r+0x9f2>
 800cd84:	9a02      	ldr	r2, [sp, #8]
 800cd86:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cd8a:	eba5 030b 	sub.w	r3, r5, fp
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d021      	beq.n	800cdd6 <_dtoa_r+0xabe>
 800cd92:	2300      	movs	r3, #0
 800cd94:	220a      	movs	r2, #10
 800cd96:	9904      	ldr	r1, [sp, #16]
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 f8d6 	bl	800cf4a <__multadd>
 800cd9e:	45b1      	cmp	r9, r6
 800cda0:	9004      	str	r0, [sp, #16]
 800cda2:	f04f 0300 	mov.w	r3, #0
 800cda6:	f04f 020a 	mov.w	r2, #10
 800cdaa:	4649      	mov	r1, r9
 800cdac:	4620      	mov	r0, r4
 800cdae:	d105      	bne.n	800cdbc <_dtoa_r+0xaa4>
 800cdb0:	f000 f8cb 	bl	800cf4a <__multadd>
 800cdb4:	4681      	mov	r9, r0
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	9505      	str	r5, [sp, #20]
 800cdba:	e776      	b.n	800ccaa <_dtoa_r+0x992>
 800cdbc:	f000 f8c5 	bl	800cf4a <__multadd>
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4681      	mov	r9, r0
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	220a      	movs	r2, #10
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 f8be 	bl	800cf4a <__multadd>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	e7f2      	b.n	800cdb8 <_dtoa_r+0xaa0>
 800cdd2:	f04f 0900 	mov.w	r9, #0
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	9904      	ldr	r1, [sp, #16]
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fa2c 	bl	800d238 <__lshift>
 800cde0:	4639      	mov	r1, r7
 800cde2:	9004      	str	r0, [sp, #16]
 800cde4:	f000 fa7c 	bl	800d2e0 <__mcmp>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	dcb6      	bgt.n	800cd5a <_dtoa_r+0xa42>
 800cdec:	d102      	bne.n	800cdf4 <_dtoa_r+0xadc>
 800cdee:	f018 0f01 	tst.w	r8, #1
 800cdf2:	d1b2      	bne.n	800cd5a <_dtoa_r+0xa42>
 800cdf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdf8:	2b30      	cmp	r3, #48	; 0x30
 800cdfa:	f105 32ff 	add.w	r2, r5, #4294967295
 800cdfe:	f47f af0a 	bne.w	800cc16 <_dtoa_r+0x8fe>
 800ce02:	4615      	mov	r5, r2
 800ce04:	e7f6      	b.n	800cdf4 <_dtoa_r+0xadc>
 800ce06:	4593      	cmp	fp, r2
 800ce08:	d105      	bne.n	800ce16 <_dtoa_r+0xafe>
 800ce0a:	2331      	movs	r3, #49	; 0x31
 800ce0c:	f10a 0a01 	add.w	sl, sl, #1
 800ce10:	f88b 3000 	strb.w	r3, [fp]
 800ce14:	e6ff      	b.n	800cc16 <_dtoa_r+0x8fe>
 800ce16:	4615      	mov	r5, r2
 800ce18:	e79f      	b.n	800cd5a <_dtoa_r+0xa42>
 800ce1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ce80 <_dtoa_r+0xb68>
 800ce1e:	e007      	b.n	800ce30 <_dtoa_r+0xb18>
 800ce20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce22:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ce84 <_dtoa_r+0xb6c>
 800ce26:	b11b      	cbz	r3, 800ce30 <_dtoa_r+0xb18>
 800ce28:	f10b 0308 	add.w	r3, fp, #8
 800ce2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	4658      	mov	r0, fp
 800ce32:	b017      	add	sp, #92	; 0x5c
 800ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	f77f ae35 	ble.w	800caaa <_dtoa_r+0x792>
 800ce40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce42:	9307      	str	r3, [sp, #28]
 800ce44:	e649      	b.n	800cada <_dtoa_r+0x7c2>
 800ce46:	9b02      	ldr	r3, [sp, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	dc03      	bgt.n	800ce54 <_dtoa_r+0xb3c>
 800ce4c:	9b06      	ldr	r3, [sp, #24]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	f73f aecc 	bgt.w	800cbec <_dtoa_r+0x8d4>
 800ce54:	465d      	mov	r5, fp
 800ce56:	4639      	mov	r1, r7
 800ce58:	9804      	ldr	r0, [sp, #16]
 800ce5a:	f7ff f9ce 	bl	800c1fa <quorem>
 800ce5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ce62:	f805 8b01 	strb.w	r8, [r5], #1
 800ce66:	9a02      	ldr	r2, [sp, #8]
 800ce68:	eba5 030b 	sub.w	r3, r5, fp
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	ddb0      	ble.n	800cdd2 <_dtoa_r+0xaba>
 800ce70:	2300      	movs	r3, #0
 800ce72:	220a      	movs	r2, #10
 800ce74:	9904      	ldr	r1, [sp, #16]
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 f867 	bl	800cf4a <__multadd>
 800ce7c:	9004      	str	r0, [sp, #16]
 800ce7e:	e7ea      	b.n	800ce56 <_dtoa_r+0xb3e>
 800ce80:	0800ddc8 	.word	0x0800ddc8
 800ce84:	0800ddca 	.word	0x0800ddca

0800ce88 <_localeconv_r>:
 800ce88:	4b04      	ldr	r3, [pc, #16]	; (800ce9c <_localeconv_r+0x14>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6a18      	ldr	r0, [r3, #32]
 800ce8e:	4b04      	ldr	r3, [pc, #16]	; (800cea0 <_localeconv_r+0x18>)
 800ce90:	2800      	cmp	r0, #0
 800ce92:	bf08      	it	eq
 800ce94:	4618      	moveq	r0, r3
 800ce96:	30f0      	adds	r0, #240	; 0xf0
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	20000010 	.word	0x20000010
 800cea0:	20000074 	.word	0x20000074

0800cea4 <malloc>:
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <malloc+0xc>)
 800cea6:	4601      	mov	r1, r0
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	f000 baed 	b.w	800d488 <_malloc_r>
 800ceae:	bf00      	nop
 800ceb0:	20000010 	.word	0x20000010

0800ceb4 <_Balloc>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ceb8:	4604      	mov	r4, r0
 800ceba:	460e      	mov	r6, r1
 800cebc:	b93d      	cbnz	r5, 800cece <_Balloc+0x1a>
 800cebe:	2010      	movs	r0, #16
 800cec0:	f7ff fff0 	bl	800cea4 <malloc>
 800cec4:	6260      	str	r0, [r4, #36]	; 0x24
 800cec6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ceca:	6005      	str	r5, [r0, #0]
 800cecc:	60c5      	str	r5, [r0, #12]
 800cece:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ced0:	68eb      	ldr	r3, [r5, #12]
 800ced2:	b183      	cbz	r3, 800cef6 <_Balloc+0x42>
 800ced4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cedc:	b9b8      	cbnz	r0, 800cf0e <_Balloc+0x5a>
 800cede:	2101      	movs	r1, #1
 800cee0:	fa01 f506 	lsl.w	r5, r1, r6
 800cee4:	1d6a      	adds	r2, r5, #5
 800cee6:	0092      	lsls	r2, r2, #2
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 fabf 	bl	800d46c <_calloc_r>
 800ceee:	b160      	cbz	r0, 800cf0a <_Balloc+0x56>
 800cef0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cef4:	e00e      	b.n	800cf14 <_Balloc+0x60>
 800cef6:	2221      	movs	r2, #33	; 0x21
 800cef8:	2104      	movs	r1, #4
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fab6 	bl	800d46c <_calloc_r>
 800cf00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf02:	60e8      	str	r0, [r5, #12]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1e4      	bne.n	800ced4 <_Balloc+0x20>
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
 800cf0e:	6802      	ldr	r2, [r0, #0]
 800cf10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cf14:	2300      	movs	r3, #0
 800cf16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf1a:	e7f7      	b.n	800cf0c <_Balloc+0x58>

0800cf1c <_Bfree>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cf20:	4606      	mov	r6, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	b93c      	cbnz	r4, 800cf36 <_Bfree+0x1a>
 800cf26:	2010      	movs	r0, #16
 800cf28:	f7ff ffbc 	bl	800cea4 <malloc>
 800cf2c:	6270      	str	r0, [r6, #36]	; 0x24
 800cf2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf32:	6004      	str	r4, [r0, #0]
 800cf34:	60c4      	str	r4, [r0, #12]
 800cf36:	b13d      	cbz	r5, 800cf48 <_Bfree+0x2c>
 800cf38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cf3a:	686a      	ldr	r2, [r5, #4]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf42:	6029      	str	r1, [r5, #0]
 800cf44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cf48:	bd70      	pop	{r4, r5, r6, pc}

0800cf4a <__multadd>:
 800cf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4e:	690d      	ldr	r5, [r1, #16]
 800cf50:	461f      	mov	r7, r3
 800cf52:	4606      	mov	r6, r0
 800cf54:	460c      	mov	r4, r1
 800cf56:	f101 0c14 	add.w	ip, r1, #20
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f8dc 0000 	ldr.w	r0, [ip]
 800cf60:	b281      	uxth	r1, r0
 800cf62:	fb02 7101 	mla	r1, r2, r1, r7
 800cf66:	0c0f      	lsrs	r7, r1, #16
 800cf68:	0c00      	lsrs	r0, r0, #16
 800cf6a:	fb02 7000 	mla	r0, r2, r0, r7
 800cf6e:	b289      	uxth	r1, r1
 800cf70:	3301      	adds	r3, #1
 800cf72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cf76:	429d      	cmp	r5, r3
 800cf78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cf7c:	f84c 1b04 	str.w	r1, [ip], #4
 800cf80:	dcec      	bgt.n	800cf5c <__multadd+0x12>
 800cf82:	b1d7      	cbz	r7, 800cfba <__multadd+0x70>
 800cf84:	68a3      	ldr	r3, [r4, #8]
 800cf86:	42ab      	cmp	r3, r5
 800cf88:	dc12      	bgt.n	800cfb0 <__multadd+0x66>
 800cf8a:	6861      	ldr	r1, [r4, #4]
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	3101      	adds	r1, #1
 800cf90:	f7ff ff90 	bl	800ceb4 <_Balloc>
 800cf94:	6922      	ldr	r2, [r4, #16]
 800cf96:	3202      	adds	r2, #2
 800cf98:	f104 010c 	add.w	r1, r4, #12
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	0092      	lsls	r2, r2, #2
 800cfa0:	300c      	adds	r0, #12
 800cfa2:	f7fe fdcd 	bl	800bb40 <memcpy>
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7ff ffb7 	bl	800cf1c <_Bfree>
 800cfae:	4644      	mov	r4, r8
 800cfb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	615f      	str	r7, [r3, #20]
 800cfb8:	6125      	str	r5, [r4, #16]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfc0 <__hi0bits>:
 800cfc0:	0c02      	lsrs	r2, r0, #16
 800cfc2:	0412      	lsls	r2, r2, #16
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	b9b2      	cbnz	r2, 800cff6 <__hi0bits+0x36>
 800cfc8:	0403      	lsls	r3, r0, #16
 800cfca:	2010      	movs	r0, #16
 800cfcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cfd0:	bf04      	itt	eq
 800cfd2:	021b      	lsleq	r3, r3, #8
 800cfd4:	3008      	addeq	r0, #8
 800cfd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cfda:	bf04      	itt	eq
 800cfdc:	011b      	lsleq	r3, r3, #4
 800cfde:	3004      	addeq	r0, #4
 800cfe0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cfe4:	bf04      	itt	eq
 800cfe6:	009b      	lsleq	r3, r3, #2
 800cfe8:	3002      	addeq	r0, #2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	db06      	blt.n	800cffc <__hi0bits+0x3c>
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	d503      	bpl.n	800cffa <__hi0bits+0x3a>
 800cff2:	3001      	adds	r0, #1
 800cff4:	4770      	bx	lr
 800cff6:	2000      	movs	r0, #0
 800cff8:	e7e8      	b.n	800cfcc <__hi0bits+0xc>
 800cffa:	2020      	movs	r0, #32
 800cffc:	4770      	bx	lr

0800cffe <__lo0bits>:
 800cffe:	6803      	ldr	r3, [r0, #0]
 800d000:	f013 0207 	ands.w	r2, r3, #7
 800d004:	4601      	mov	r1, r0
 800d006:	d00b      	beq.n	800d020 <__lo0bits+0x22>
 800d008:	07da      	lsls	r2, r3, #31
 800d00a:	d423      	bmi.n	800d054 <__lo0bits+0x56>
 800d00c:	0798      	lsls	r0, r3, #30
 800d00e:	bf49      	itett	mi
 800d010:	085b      	lsrmi	r3, r3, #1
 800d012:	089b      	lsrpl	r3, r3, #2
 800d014:	2001      	movmi	r0, #1
 800d016:	600b      	strmi	r3, [r1, #0]
 800d018:	bf5c      	itt	pl
 800d01a:	600b      	strpl	r3, [r1, #0]
 800d01c:	2002      	movpl	r0, #2
 800d01e:	4770      	bx	lr
 800d020:	b298      	uxth	r0, r3
 800d022:	b9a8      	cbnz	r0, 800d050 <__lo0bits+0x52>
 800d024:	0c1b      	lsrs	r3, r3, #16
 800d026:	2010      	movs	r0, #16
 800d028:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d02c:	bf04      	itt	eq
 800d02e:	0a1b      	lsreq	r3, r3, #8
 800d030:	3008      	addeq	r0, #8
 800d032:	071a      	lsls	r2, r3, #28
 800d034:	bf04      	itt	eq
 800d036:	091b      	lsreq	r3, r3, #4
 800d038:	3004      	addeq	r0, #4
 800d03a:	079a      	lsls	r2, r3, #30
 800d03c:	bf04      	itt	eq
 800d03e:	089b      	lsreq	r3, r3, #2
 800d040:	3002      	addeq	r0, #2
 800d042:	07da      	lsls	r2, r3, #31
 800d044:	d402      	bmi.n	800d04c <__lo0bits+0x4e>
 800d046:	085b      	lsrs	r3, r3, #1
 800d048:	d006      	beq.n	800d058 <__lo0bits+0x5a>
 800d04a:	3001      	adds	r0, #1
 800d04c:	600b      	str	r3, [r1, #0]
 800d04e:	4770      	bx	lr
 800d050:	4610      	mov	r0, r2
 800d052:	e7e9      	b.n	800d028 <__lo0bits+0x2a>
 800d054:	2000      	movs	r0, #0
 800d056:	4770      	bx	lr
 800d058:	2020      	movs	r0, #32
 800d05a:	4770      	bx	lr

0800d05c <__i2b>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	460c      	mov	r4, r1
 800d060:	2101      	movs	r1, #1
 800d062:	f7ff ff27 	bl	800ceb4 <_Balloc>
 800d066:	2201      	movs	r2, #1
 800d068:	6144      	str	r4, [r0, #20]
 800d06a:	6102      	str	r2, [r0, #16]
 800d06c:	bd10      	pop	{r4, pc}

0800d06e <__multiply>:
 800d06e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d072:	4614      	mov	r4, r2
 800d074:	690a      	ldr	r2, [r1, #16]
 800d076:	6923      	ldr	r3, [r4, #16]
 800d078:	429a      	cmp	r2, r3
 800d07a:	bfb8      	it	lt
 800d07c:	460b      	movlt	r3, r1
 800d07e:	4688      	mov	r8, r1
 800d080:	bfbc      	itt	lt
 800d082:	46a0      	movlt	r8, r4
 800d084:	461c      	movlt	r4, r3
 800d086:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d08a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d08e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d092:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d096:	eb07 0609 	add.w	r6, r7, r9
 800d09a:	42b3      	cmp	r3, r6
 800d09c:	bfb8      	it	lt
 800d09e:	3101      	addlt	r1, #1
 800d0a0:	f7ff ff08 	bl	800ceb4 <_Balloc>
 800d0a4:	f100 0514 	add.w	r5, r0, #20
 800d0a8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d0ac:	462b      	mov	r3, r5
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	4573      	cmp	r3, lr
 800d0b2:	d316      	bcc.n	800d0e2 <__multiply+0x74>
 800d0b4:	f104 0214 	add.w	r2, r4, #20
 800d0b8:	f108 0114 	add.w	r1, r8, #20
 800d0bc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d0c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	9201      	str	r2, [sp, #4]
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d80c      	bhi.n	800d0e8 <__multiply+0x7a>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	dd03      	ble.n	800d0da <__multiply+0x6c>
 800d0d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d05d      	beq.n	800d196 <__multiply+0x128>
 800d0da:	6106      	str	r6, [r0, #16]
 800d0dc:	b003      	add	sp, #12
 800d0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e2:	f843 2b04 	str.w	r2, [r3], #4
 800d0e6:	e7e3      	b.n	800d0b0 <__multiply+0x42>
 800d0e8:	f8b2 b000 	ldrh.w	fp, [r2]
 800d0ec:	f1bb 0f00 	cmp.w	fp, #0
 800d0f0:	d023      	beq.n	800d13a <__multiply+0xcc>
 800d0f2:	4689      	mov	r9, r1
 800d0f4:	46ac      	mov	ip, r5
 800d0f6:	f04f 0800 	mov.w	r8, #0
 800d0fa:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0fe:	f8dc a000 	ldr.w	sl, [ip]
 800d102:	b2a3      	uxth	r3, r4
 800d104:	fa1f fa8a 	uxth.w	sl, sl
 800d108:	fb0b a303 	mla	r3, fp, r3, sl
 800d10c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d110:	f8dc 4000 	ldr.w	r4, [ip]
 800d114:	4443      	add	r3, r8
 800d116:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d11a:	fb0b 840a 	mla	r4, fp, sl, r8
 800d11e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d122:	46e2      	mov	sl, ip
 800d124:	b29b      	uxth	r3, r3
 800d126:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d12a:	454f      	cmp	r7, r9
 800d12c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d130:	f84a 3b04 	str.w	r3, [sl], #4
 800d134:	d82b      	bhi.n	800d18e <__multiply+0x120>
 800d136:	f8cc 8004 	str.w	r8, [ip, #4]
 800d13a:	9b01      	ldr	r3, [sp, #4]
 800d13c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d140:	3204      	adds	r2, #4
 800d142:	f1ba 0f00 	cmp.w	sl, #0
 800d146:	d020      	beq.n	800d18a <__multiply+0x11c>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	4689      	mov	r9, r1
 800d14c:	46a8      	mov	r8, r5
 800d14e:	f04f 0b00 	mov.w	fp, #0
 800d152:	f8b9 c000 	ldrh.w	ip, [r9]
 800d156:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d15a:	fb0a 440c 	mla	r4, sl, ip, r4
 800d15e:	445c      	add	r4, fp
 800d160:	46c4      	mov	ip, r8
 800d162:	b29b      	uxth	r3, r3
 800d164:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d168:	f84c 3b04 	str.w	r3, [ip], #4
 800d16c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d170:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d174:	0c1b      	lsrs	r3, r3, #16
 800d176:	fb0a b303 	mla	r3, sl, r3, fp
 800d17a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d17e:	454f      	cmp	r7, r9
 800d180:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d184:	d805      	bhi.n	800d192 <__multiply+0x124>
 800d186:	f8c8 3004 	str.w	r3, [r8, #4]
 800d18a:	3504      	adds	r5, #4
 800d18c:	e79b      	b.n	800d0c6 <__multiply+0x58>
 800d18e:	46d4      	mov	ip, sl
 800d190:	e7b3      	b.n	800d0fa <__multiply+0x8c>
 800d192:	46e0      	mov	r8, ip
 800d194:	e7dd      	b.n	800d152 <__multiply+0xe4>
 800d196:	3e01      	subs	r6, #1
 800d198:	e799      	b.n	800d0ce <__multiply+0x60>
	...

0800d19c <__pow5mult>:
 800d19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a0:	4615      	mov	r5, r2
 800d1a2:	f012 0203 	ands.w	r2, r2, #3
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	460f      	mov	r7, r1
 800d1aa:	d007      	beq.n	800d1bc <__pow5mult+0x20>
 800d1ac:	3a01      	subs	r2, #1
 800d1ae:	4c21      	ldr	r4, [pc, #132]	; (800d234 <__pow5mult+0x98>)
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1b6:	f7ff fec8 	bl	800cf4a <__multadd>
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	10ad      	asrs	r5, r5, #2
 800d1be:	d035      	beq.n	800d22c <__pow5mult+0x90>
 800d1c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1c2:	b93c      	cbnz	r4, 800d1d4 <__pow5mult+0x38>
 800d1c4:	2010      	movs	r0, #16
 800d1c6:	f7ff fe6d 	bl	800cea4 <malloc>
 800d1ca:	6270      	str	r0, [r6, #36]	; 0x24
 800d1cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1d0:	6004      	str	r4, [r0, #0]
 800d1d2:	60c4      	str	r4, [r0, #12]
 800d1d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1dc:	b94c      	cbnz	r4, 800d1f2 <__pow5mult+0x56>
 800d1de:	f240 2171 	movw	r1, #625	; 0x271
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ff3a 	bl	800d05c <__i2b>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	6003      	str	r3, [r0, #0]
 800d1f2:	f04f 0800 	mov.w	r8, #0
 800d1f6:	07eb      	lsls	r3, r5, #31
 800d1f8:	d50a      	bpl.n	800d210 <__pow5mult+0x74>
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7ff ff35 	bl	800d06e <__multiply>
 800d204:	4639      	mov	r1, r7
 800d206:	4681      	mov	r9, r0
 800d208:	4630      	mov	r0, r6
 800d20a:	f7ff fe87 	bl	800cf1c <_Bfree>
 800d20e:	464f      	mov	r7, r9
 800d210:	106d      	asrs	r5, r5, #1
 800d212:	d00b      	beq.n	800d22c <__pow5mult+0x90>
 800d214:	6820      	ldr	r0, [r4, #0]
 800d216:	b938      	cbnz	r0, 800d228 <__pow5mult+0x8c>
 800d218:	4622      	mov	r2, r4
 800d21a:	4621      	mov	r1, r4
 800d21c:	4630      	mov	r0, r6
 800d21e:	f7ff ff26 	bl	800d06e <__multiply>
 800d222:	6020      	str	r0, [r4, #0]
 800d224:	f8c0 8000 	str.w	r8, [r0]
 800d228:	4604      	mov	r4, r0
 800d22a:	e7e4      	b.n	800d1f6 <__pow5mult+0x5a>
 800d22c:	4638      	mov	r0, r7
 800d22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d232:	bf00      	nop
 800d234:	0800dec8 	.word	0x0800dec8

0800d238 <__lshift>:
 800d238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d23c:	460c      	mov	r4, r1
 800d23e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	6849      	ldr	r1, [r1, #4]
 800d246:	eb0a 0903 	add.w	r9, sl, r3
 800d24a:	68a3      	ldr	r3, [r4, #8]
 800d24c:	4607      	mov	r7, r0
 800d24e:	4616      	mov	r6, r2
 800d250:	f109 0501 	add.w	r5, r9, #1
 800d254:	42ab      	cmp	r3, r5
 800d256:	db32      	blt.n	800d2be <__lshift+0x86>
 800d258:	4638      	mov	r0, r7
 800d25a:	f7ff fe2b 	bl	800ceb4 <_Balloc>
 800d25e:	2300      	movs	r3, #0
 800d260:	4680      	mov	r8, r0
 800d262:	f100 0114 	add.w	r1, r0, #20
 800d266:	461a      	mov	r2, r3
 800d268:	4553      	cmp	r3, sl
 800d26a:	db2b      	blt.n	800d2c4 <__lshift+0x8c>
 800d26c:	6920      	ldr	r0, [r4, #16]
 800d26e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d272:	f104 0314 	add.w	r3, r4, #20
 800d276:	f016 021f 	ands.w	r2, r6, #31
 800d27a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d27e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d282:	d025      	beq.n	800d2d0 <__lshift+0x98>
 800d284:	f1c2 0e20 	rsb	lr, r2, #32
 800d288:	2000      	movs	r0, #0
 800d28a:	681e      	ldr	r6, [r3, #0]
 800d28c:	468a      	mov	sl, r1
 800d28e:	4096      	lsls	r6, r2
 800d290:	4330      	orrs	r0, r6
 800d292:	f84a 0b04 	str.w	r0, [sl], #4
 800d296:	f853 0b04 	ldr.w	r0, [r3], #4
 800d29a:	459c      	cmp	ip, r3
 800d29c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d2a0:	d814      	bhi.n	800d2cc <__lshift+0x94>
 800d2a2:	6048      	str	r0, [r1, #4]
 800d2a4:	b108      	cbz	r0, 800d2aa <__lshift+0x72>
 800d2a6:	f109 0502 	add.w	r5, r9, #2
 800d2aa:	3d01      	subs	r5, #1
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	f7ff fe32 	bl	800cf1c <_Bfree>
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2be:	3101      	adds	r1, #1
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	e7c7      	b.n	800d254 <__lshift+0x1c>
 800d2c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	e7cd      	b.n	800d268 <__lshift+0x30>
 800d2cc:	4651      	mov	r1, sl
 800d2ce:	e7dc      	b.n	800d28a <__lshift+0x52>
 800d2d0:	3904      	subs	r1, #4
 800d2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2da:	459c      	cmp	ip, r3
 800d2dc:	d8f9      	bhi.n	800d2d2 <__lshift+0x9a>
 800d2de:	e7e4      	b.n	800d2aa <__lshift+0x72>

0800d2e0 <__mcmp>:
 800d2e0:	6903      	ldr	r3, [r0, #16]
 800d2e2:	690a      	ldr	r2, [r1, #16]
 800d2e4:	1a9b      	subs	r3, r3, r2
 800d2e6:	b530      	push	{r4, r5, lr}
 800d2e8:	d10c      	bne.n	800d304 <__mcmp+0x24>
 800d2ea:	0092      	lsls	r2, r2, #2
 800d2ec:	3014      	adds	r0, #20
 800d2ee:	3114      	adds	r1, #20
 800d2f0:	1884      	adds	r4, r0, r2
 800d2f2:	4411      	add	r1, r2
 800d2f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2fc:	4295      	cmp	r5, r2
 800d2fe:	d003      	beq.n	800d308 <__mcmp+0x28>
 800d300:	d305      	bcc.n	800d30e <__mcmp+0x2e>
 800d302:	2301      	movs	r3, #1
 800d304:	4618      	mov	r0, r3
 800d306:	bd30      	pop	{r4, r5, pc}
 800d308:	42a0      	cmp	r0, r4
 800d30a:	d3f3      	bcc.n	800d2f4 <__mcmp+0x14>
 800d30c:	e7fa      	b.n	800d304 <__mcmp+0x24>
 800d30e:	f04f 33ff 	mov.w	r3, #4294967295
 800d312:	e7f7      	b.n	800d304 <__mcmp+0x24>

0800d314 <__mdiff>:
 800d314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d318:	460d      	mov	r5, r1
 800d31a:	4607      	mov	r7, r0
 800d31c:	4611      	mov	r1, r2
 800d31e:	4628      	mov	r0, r5
 800d320:	4614      	mov	r4, r2
 800d322:	f7ff ffdd 	bl	800d2e0 <__mcmp>
 800d326:	1e06      	subs	r6, r0, #0
 800d328:	d108      	bne.n	800d33c <__mdiff+0x28>
 800d32a:	4631      	mov	r1, r6
 800d32c:	4638      	mov	r0, r7
 800d32e:	f7ff fdc1 	bl	800ceb4 <_Balloc>
 800d332:	2301      	movs	r3, #1
 800d334:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33c:	bfa4      	itt	ge
 800d33e:	4623      	movge	r3, r4
 800d340:	462c      	movge	r4, r5
 800d342:	4638      	mov	r0, r7
 800d344:	6861      	ldr	r1, [r4, #4]
 800d346:	bfa6      	itte	ge
 800d348:	461d      	movge	r5, r3
 800d34a:	2600      	movge	r6, #0
 800d34c:	2601      	movlt	r6, #1
 800d34e:	f7ff fdb1 	bl	800ceb4 <_Balloc>
 800d352:	692b      	ldr	r3, [r5, #16]
 800d354:	60c6      	str	r6, [r0, #12]
 800d356:	6926      	ldr	r6, [r4, #16]
 800d358:	f105 0914 	add.w	r9, r5, #20
 800d35c:	f104 0214 	add.w	r2, r4, #20
 800d360:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d364:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d368:	f100 0514 	add.w	r5, r0, #20
 800d36c:	f04f 0e00 	mov.w	lr, #0
 800d370:	f852 ab04 	ldr.w	sl, [r2], #4
 800d374:	f859 4b04 	ldr.w	r4, [r9], #4
 800d378:	fa1e f18a 	uxtah	r1, lr, sl
 800d37c:	b2a3      	uxth	r3, r4
 800d37e:	1ac9      	subs	r1, r1, r3
 800d380:	0c23      	lsrs	r3, r4, #16
 800d382:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d386:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d38a:	b289      	uxth	r1, r1
 800d38c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d390:	45c8      	cmp	r8, r9
 800d392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d396:	4694      	mov	ip, r2
 800d398:	f845 3b04 	str.w	r3, [r5], #4
 800d39c:	d8e8      	bhi.n	800d370 <__mdiff+0x5c>
 800d39e:	45bc      	cmp	ip, r7
 800d3a0:	d304      	bcc.n	800d3ac <__mdiff+0x98>
 800d3a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d3a6:	b183      	cbz	r3, 800d3ca <__mdiff+0xb6>
 800d3a8:	6106      	str	r6, [r0, #16]
 800d3aa:	e7c5      	b.n	800d338 <__mdiff+0x24>
 800d3ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3b0:	fa1e f381 	uxtah	r3, lr, r1
 800d3b4:	141a      	asrs	r2, r3, #16
 800d3b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d3c4:	f845 3b04 	str.w	r3, [r5], #4
 800d3c8:	e7e9      	b.n	800d39e <__mdiff+0x8a>
 800d3ca:	3e01      	subs	r6, #1
 800d3cc:	e7e9      	b.n	800d3a2 <__mdiff+0x8e>

0800d3ce <__d2b>:
 800d3ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3d2:	460e      	mov	r6, r1
 800d3d4:	2101      	movs	r1, #1
 800d3d6:	ec59 8b10 	vmov	r8, r9, d0
 800d3da:	4615      	mov	r5, r2
 800d3dc:	f7ff fd6a 	bl	800ceb4 <_Balloc>
 800d3e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d3e4:	4607      	mov	r7, r0
 800d3e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3ea:	bb34      	cbnz	r4, 800d43a <__d2b+0x6c>
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	f1b8 0300 	subs.w	r3, r8, #0
 800d3f2:	d027      	beq.n	800d444 <__d2b+0x76>
 800d3f4:	a802      	add	r0, sp, #8
 800d3f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d3fa:	f7ff fe00 	bl	800cffe <__lo0bits>
 800d3fe:	9900      	ldr	r1, [sp, #0]
 800d400:	b1f0      	cbz	r0, 800d440 <__d2b+0x72>
 800d402:	9a01      	ldr	r2, [sp, #4]
 800d404:	f1c0 0320 	rsb	r3, r0, #32
 800d408:	fa02 f303 	lsl.w	r3, r2, r3
 800d40c:	430b      	orrs	r3, r1
 800d40e:	40c2      	lsrs	r2, r0
 800d410:	617b      	str	r3, [r7, #20]
 800d412:	9201      	str	r2, [sp, #4]
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	61bb      	str	r3, [r7, #24]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	bf14      	ite	ne
 800d41c:	2102      	movne	r1, #2
 800d41e:	2101      	moveq	r1, #1
 800d420:	6139      	str	r1, [r7, #16]
 800d422:	b1c4      	cbz	r4, 800d456 <__d2b+0x88>
 800d424:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d428:	4404      	add	r4, r0
 800d42a:	6034      	str	r4, [r6, #0]
 800d42c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d430:	6028      	str	r0, [r5, #0]
 800d432:	4638      	mov	r0, r7
 800d434:	b003      	add	sp, #12
 800d436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d43a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d43e:	e7d5      	b.n	800d3ec <__d2b+0x1e>
 800d440:	6179      	str	r1, [r7, #20]
 800d442:	e7e7      	b.n	800d414 <__d2b+0x46>
 800d444:	a801      	add	r0, sp, #4
 800d446:	f7ff fdda 	bl	800cffe <__lo0bits>
 800d44a:	9b01      	ldr	r3, [sp, #4]
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	2101      	movs	r1, #1
 800d450:	6139      	str	r1, [r7, #16]
 800d452:	3020      	adds	r0, #32
 800d454:	e7e5      	b.n	800d422 <__d2b+0x54>
 800d456:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d45a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d45e:	6030      	str	r0, [r6, #0]
 800d460:	6918      	ldr	r0, [r3, #16]
 800d462:	f7ff fdad 	bl	800cfc0 <__hi0bits>
 800d466:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d46a:	e7e1      	b.n	800d430 <__d2b+0x62>

0800d46c <_calloc_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	fb02 f401 	mul.w	r4, r2, r1
 800d472:	4621      	mov	r1, r4
 800d474:	f000 f808 	bl	800d488 <_malloc_r>
 800d478:	4605      	mov	r5, r0
 800d47a:	b118      	cbz	r0, 800d484 <_calloc_r+0x18>
 800d47c:	4622      	mov	r2, r4
 800d47e:	2100      	movs	r1, #0
 800d480:	f7fe fb69 	bl	800bb56 <memset>
 800d484:	4628      	mov	r0, r5
 800d486:	bd38      	pop	{r3, r4, r5, pc}

0800d488 <_malloc_r>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	1ccd      	adds	r5, r1, #3
 800d48c:	f025 0503 	bic.w	r5, r5, #3
 800d490:	3508      	adds	r5, #8
 800d492:	2d0c      	cmp	r5, #12
 800d494:	bf38      	it	cc
 800d496:	250c      	movcc	r5, #12
 800d498:	2d00      	cmp	r5, #0
 800d49a:	4606      	mov	r6, r0
 800d49c:	db01      	blt.n	800d4a2 <_malloc_r+0x1a>
 800d49e:	42a9      	cmp	r1, r5
 800d4a0:	d903      	bls.n	800d4aa <_malloc_r+0x22>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	6033      	str	r3, [r6, #0]
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
 800d4aa:	f000 f869 	bl	800d580 <__malloc_lock>
 800d4ae:	4a21      	ldr	r2, [pc, #132]	; (800d534 <_malloc_r+0xac>)
 800d4b0:	6814      	ldr	r4, [r2, #0]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	b991      	cbnz	r1, 800d4dc <_malloc_r+0x54>
 800d4b6:	4c20      	ldr	r4, [pc, #128]	; (800d538 <_malloc_r+0xb0>)
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	b91b      	cbnz	r3, 800d4c4 <_malloc_r+0x3c>
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f000 f83d 	bl	800d53c <_sbrk_r>
 800d4c2:	6020      	str	r0, [r4, #0]
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f000 f838 	bl	800d53c <_sbrk_r>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d124      	bne.n	800d51a <_malloc_r+0x92>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	6033      	str	r3, [r6, #0]
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f000 f854 	bl	800d582 <__malloc_unlock>
 800d4da:	e7e4      	b.n	800d4a6 <_malloc_r+0x1e>
 800d4dc:	680b      	ldr	r3, [r1, #0]
 800d4de:	1b5b      	subs	r3, r3, r5
 800d4e0:	d418      	bmi.n	800d514 <_malloc_r+0x8c>
 800d4e2:	2b0b      	cmp	r3, #11
 800d4e4:	d90f      	bls.n	800d506 <_malloc_r+0x7e>
 800d4e6:	600b      	str	r3, [r1, #0]
 800d4e8:	50cd      	str	r5, [r1, r3]
 800d4ea:	18cc      	adds	r4, r1, r3
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f000 f848 	bl	800d582 <__malloc_unlock>
 800d4f2:	f104 000b 	add.w	r0, r4, #11
 800d4f6:	1d23      	adds	r3, r4, #4
 800d4f8:	f020 0007 	bic.w	r0, r0, #7
 800d4fc:	1ac3      	subs	r3, r0, r3
 800d4fe:	d0d3      	beq.n	800d4a8 <_malloc_r+0x20>
 800d500:	425a      	negs	r2, r3
 800d502:	50e2      	str	r2, [r4, r3]
 800d504:	e7d0      	b.n	800d4a8 <_malloc_r+0x20>
 800d506:	428c      	cmp	r4, r1
 800d508:	684b      	ldr	r3, [r1, #4]
 800d50a:	bf16      	itet	ne
 800d50c:	6063      	strne	r3, [r4, #4]
 800d50e:	6013      	streq	r3, [r2, #0]
 800d510:	460c      	movne	r4, r1
 800d512:	e7eb      	b.n	800d4ec <_malloc_r+0x64>
 800d514:	460c      	mov	r4, r1
 800d516:	6849      	ldr	r1, [r1, #4]
 800d518:	e7cc      	b.n	800d4b4 <_malloc_r+0x2c>
 800d51a:	1cc4      	adds	r4, r0, #3
 800d51c:	f024 0403 	bic.w	r4, r4, #3
 800d520:	42a0      	cmp	r0, r4
 800d522:	d005      	beq.n	800d530 <_malloc_r+0xa8>
 800d524:	1a21      	subs	r1, r4, r0
 800d526:	4630      	mov	r0, r6
 800d528:	f000 f808 	bl	800d53c <_sbrk_r>
 800d52c:	3001      	adds	r0, #1
 800d52e:	d0cf      	beq.n	800d4d0 <_malloc_r+0x48>
 800d530:	6025      	str	r5, [r4, #0]
 800d532:	e7db      	b.n	800d4ec <_malloc_r+0x64>
 800d534:	20004b08 	.word	0x20004b08
 800d538:	20004b0c 	.word	0x20004b0c

0800d53c <_sbrk_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4c06      	ldr	r4, [pc, #24]	; (800d558 <_sbrk_r+0x1c>)
 800d540:	2300      	movs	r3, #0
 800d542:	4605      	mov	r5, r0
 800d544:	4608      	mov	r0, r1
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	f7f6 fe88 	bl	800425c <_sbrk>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d102      	bne.n	800d556 <_sbrk_r+0x1a>
 800d550:	6823      	ldr	r3, [r4, #0]
 800d552:	b103      	cbz	r3, 800d556 <_sbrk_r+0x1a>
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	20004ce8 	.word	0x20004ce8

0800d55c <__ascii_mbtowc>:
 800d55c:	b082      	sub	sp, #8
 800d55e:	b901      	cbnz	r1, 800d562 <__ascii_mbtowc+0x6>
 800d560:	a901      	add	r1, sp, #4
 800d562:	b142      	cbz	r2, 800d576 <__ascii_mbtowc+0x1a>
 800d564:	b14b      	cbz	r3, 800d57a <__ascii_mbtowc+0x1e>
 800d566:	7813      	ldrb	r3, [r2, #0]
 800d568:	600b      	str	r3, [r1, #0]
 800d56a:	7812      	ldrb	r2, [r2, #0]
 800d56c:	1c10      	adds	r0, r2, #0
 800d56e:	bf18      	it	ne
 800d570:	2001      	movne	r0, #1
 800d572:	b002      	add	sp, #8
 800d574:	4770      	bx	lr
 800d576:	4610      	mov	r0, r2
 800d578:	e7fb      	b.n	800d572 <__ascii_mbtowc+0x16>
 800d57a:	f06f 0001 	mvn.w	r0, #1
 800d57e:	e7f8      	b.n	800d572 <__ascii_mbtowc+0x16>

0800d580 <__malloc_lock>:
 800d580:	4770      	bx	lr

0800d582 <__malloc_unlock>:
 800d582:	4770      	bx	lr

0800d584 <__ascii_wctomb>:
 800d584:	b149      	cbz	r1, 800d59a <__ascii_wctomb+0x16>
 800d586:	2aff      	cmp	r2, #255	; 0xff
 800d588:	bf85      	ittet	hi
 800d58a:	238a      	movhi	r3, #138	; 0x8a
 800d58c:	6003      	strhi	r3, [r0, #0]
 800d58e:	700a      	strbls	r2, [r1, #0]
 800d590:	f04f 30ff 	movhi.w	r0, #4294967295
 800d594:	bf98      	it	ls
 800d596:	2001      	movls	r0, #1
 800d598:	4770      	bx	lr
 800d59a:	4608      	mov	r0, r1
 800d59c:	4770      	bx	lr

0800d59e <atan2>:
 800d59e:	f000 b803 	b.w	800d5a8 <__ieee754_atan2>
 800d5a2:	0000      	movs	r0, r0
 800d5a4:	0000      	movs	r0, r0
	...

0800d5a8 <__ieee754_atan2>:
 800d5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ac:	ec57 6b11 	vmov	r6, r7, d1
 800d5b0:	4273      	negs	r3, r6
 800d5b2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d5b6:	4333      	orrs	r3, r6
 800d5b8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800d760 <__ieee754_atan2+0x1b8>
 800d5bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d5c0:	4573      	cmp	r3, lr
 800d5c2:	ec51 0b10 	vmov	r0, r1, d0
 800d5c6:	ee11 8a10 	vmov	r8, s2
 800d5ca:	d80a      	bhi.n	800d5e2 <__ieee754_atan2+0x3a>
 800d5cc:	4244      	negs	r4, r0
 800d5ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5d2:	4304      	orrs	r4, r0
 800d5d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d5d8:	4574      	cmp	r4, lr
 800d5da:	468c      	mov	ip, r1
 800d5dc:	ee10 9a10 	vmov	r9, s0
 800d5e0:	d907      	bls.n	800d5f2 <__ieee754_atan2+0x4a>
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	f7f2 fe09 	bl	80001fc <__adddf3>
 800d5ea:	ec41 0b10 	vmov	d0, r0, r1
 800d5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d5f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d5fa:	4334      	orrs	r4, r6
 800d5fc:	d103      	bne.n	800d606 <__ieee754_atan2+0x5e>
 800d5fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d602:	f000 b8b1 	b.w	800d768 <atan>
 800d606:	17bc      	asrs	r4, r7, #30
 800d608:	f004 0402 	and.w	r4, r4, #2
 800d60c:	ea53 0909 	orrs.w	r9, r3, r9
 800d610:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d614:	d107      	bne.n	800d626 <__ieee754_atan2+0x7e>
 800d616:	2c02      	cmp	r4, #2
 800d618:	d073      	beq.n	800d702 <__ieee754_atan2+0x15a>
 800d61a:	2c03      	cmp	r4, #3
 800d61c:	d1e5      	bne.n	800d5ea <__ieee754_atan2+0x42>
 800d61e:	a13e      	add	r1, pc, #248	; (adr r1, 800d718 <__ieee754_atan2+0x170>)
 800d620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d624:	e7e1      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d626:	ea52 0808 	orrs.w	r8, r2, r8
 800d62a:	d106      	bne.n	800d63a <__ieee754_atan2+0x92>
 800d62c:	f1bc 0f00 	cmp.w	ip, #0
 800d630:	da6b      	bge.n	800d70a <__ieee754_atan2+0x162>
 800d632:	a13b      	add	r1, pc, #236	; (adr r1, 800d720 <__ieee754_atan2+0x178>)
 800d634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d638:	e7d7      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d63a:	4572      	cmp	r2, lr
 800d63c:	d120      	bne.n	800d680 <__ieee754_atan2+0xd8>
 800d63e:	4293      	cmp	r3, r2
 800d640:	d111      	bne.n	800d666 <__ieee754_atan2+0xbe>
 800d642:	2c02      	cmp	r4, #2
 800d644:	d007      	beq.n	800d656 <__ieee754_atan2+0xae>
 800d646:	2c03      	cmp	r4, #3
 800d648:	d009      	beq.n	800d65e <__ieee754_atan2+0xb6>
 800d64a:	2c01      	cmp	r4, #1
 800d64c:	d155      	bne.n	800d6fa <__ieee754_atan2+0x152>
 800d64e:	a136      	add	r1, pc, #216	; (adr r1, 800d728 <__ieee754_atan2+0x180>)
 800d650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d654:	e7c9      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d656:	a136      	add	r1, pc, #216	; (adr r1, 800d730 <__ieee754_atan2+0x188>)
 800d658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d65c:	e7c5      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d65e:	a136      	add	r1, pc, #216	; (adr r1, 800d738 <__ieee754_atan2+0x190>)
 800d660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d664:	e7c1      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d666:	2c02      	cmp	r4, #2
 800d668:	d04b      	beq.n	800d702 <__ieee754_atan2+0x15a>
 800d66a:	2c03      	cmp	r4, #3
 800d66c:	d0d7      	beq.n	800d61e <__ieee754_atan2+0x76>
 800d66e:	2c01      	cmp	r4, #1
 800d670:	f04f 0000 	mov.w	r0, #0
 800d674:	d102      	bne.n	800d67c <__ieee754_atan2+0xd4>
 800d676:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d67a:	e7b6      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d67c:	2100      	movs	r1, #0
 800d67e:	e7b4      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d680:	4573      	cmp	r3, lr
 800d682:	d0d3      	beq.n	800d62c <__ieee754_atan2+0x84>
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	151b      	asrs	r3, r3, #20
 800d688:	2b3c      	cmp	r3, #60	; 0x3c
 800d68a:	dc1e      	bgt.n	800d6ca <__ieee754_atan2+0x122>
 800d68c:	2f00      	cmp	r7, #0
 800d68e:	da01      	bge.n	800d694 <__ieee754_atan2+0xec>
 800d690:	333c      	adds	r3, #60	; 0x3c
 800d692:	db1e      	blt.n	800d6d2 <__ieee754_atan2+0x12a>
 800d694:	4632      	mov	r2, r6
 800d696:	463b      	mov	r3, r7
 800d698:	f7f3 f890 	bl	80007bc <__aeabi_ddiv>
 800d69c:	ec41 0b10 	vmov	d0, r0, r1
 800d6a0:	f000 fa02 	bl	800daa8 <fabs>
 800d6a4:	f000 f860 	bl	800d768 <atan>
 800d6a8:	ec51 0b10 	vmov	r0, r1, d0
 800d6ac:	2c01      	cmp	r4, #1
 800d6ae:	d013      	beq.n	800d6d8 <__ieee754_atan2+0x130>
 800d6b0:	2c02      	cmp	r4, #2
 800d6b2:	d015      	beq.n	800d6e0 <__ieee754_atan2+0x138>
 800d6b4:	2c00      	cmp	r4, #0
 800d6b6:	d098      	beq.n	800d5ea <__ieee754_atan2+0x42>
 800d6b8:	a321      	add	r3, pc, #132	; (adr r3, 800d740 <__ieee754_atan2+0x198>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	f7f2 fd9b 	bl	80001f8 <__aeabi_dsub>
 800d6c2:	a321      	add	r3, pc, #132	; (adr r3, 800d748 <__ieee754_atan2+0x1a0>)
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	e014      	b.n	800d6f4 <__ieee754_atan2+0x14c>
 800d6ca:	a121      	add	r1, pc, #132	; (adr r1, 800d750 <__ieee754_atan2+0x1a8>)
 800d6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6d0:	e7ec      	b.n	800d6ac <__ieee754_atan2+0x104>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	e7e9      	b.n	800d6ac <__ieee754_atan2+0x104>
 800d6d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6dc:	4619      	mov	r1, r3
 800d6de:	e784      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d6e0:	a317      	add	r3, pc, #92	; (adr r3, 800d740 <__ieee754_atan2+0x198>)
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f7f2 fd87 	bl	80001f8 <__aeabi_dsub>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	a116      	add	r1, pc, #88	; (adr r1, 800d748 <__ieee754_atan2+0x1a0>)
 800d6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f4:	f7f2 fd80 	bl	80001f8 <__aeabi_dsub>
 800d6f8:	e777      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d6fa:	a117      	add	r1, pc, #92	; (adr r1, 800d758 <__ieee754_atan2+0x1b0>)
 800d6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d700:	e773      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d702:	a111      	add	r1, pc, #68	; (adr r1, 800d748 <__ieee754_atan2+0x1a0>)
 800d704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d708:	e76f      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d70a:	a111      	add	r1, pc, #68	; (adr r1, 800d750 <__ieee754_atan2+0x1a8>)
 800d70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d710:	e76b      	b.n	800d5ea <__ieee754_atan2+0x42>
 800d712:	bf00      	nop
 800d714:	f3af 8000 	nop.w
 800d718:	54442d18 	.word	0x54442d18
 800d71c:	c00921fb 	.word	0xc00921fb
 800d720:	54442d18 	.word	0x54442d18
 800d724:	bff921fb 	.word	0xbff921fb
 800d728:	54442d18 	.word	0x54442d18
 800d72c:	bfe921fb 	.word	0xbfe921fb
 800d730:	7f3321d2 	.word	0x7f3321d2
 800d734:	4002d97c 	.word	0x4002d97c
 800d738:	7f3321d2 	.word	0x7f3321d2
 800d73c:	c002d97c 	.word	0xc002d97c
 800d740:	33145c07 	.word	0x33145c07
 800d744:	3ca1a626 	.word	0x3ca1a626
 800d748:	54442d18 	.word	0x54442d18
 800d74c:	400921fb 	.word	0x400921fb
 800d750:	54442d18 	.word	0x54442d18
 800d754:	3ff921fb 	.word	0x3ff921fb
 800d758:	54442d18 	.word	0x54442d18
 800d75c:	3fe921fb 	.word	0x3fe921fb
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	00000000 	.word	0x00000000

0800d768 <atan>:
 800d768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	ec55 4b10 	vmov	r4, r5, d0
 800d770:	4bc3      	ldr	r3, [pc, #780]	; (800da80 <atan+0x318>)
 800d772:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d776:	429e      	cmp	r6, r3
 800d778:	46ab      	mov	fp, r5
 800d77a:	dd18      	ble.n	800d7ae <atan+0x46>
 800d77c:	4bc1      	ldr	r3, [pc, #772]	; (800da84 <atan+0x31c>)
 800d77e:	429e      	cmp	r6, r3
 800d780:	dc01      	bgt.n	800d786 <atan+0x1e>
 800d782:	d109      	bne.n	800d798 <atan+0x30>
 800d784:	b144      	cbz	r4, 800d798 <atan+0x30>
 800d786:	4622      	mov	r2, r4
 800d788:	462b      	mov	r3, r5
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f2 fd35 	bl	80001fc <__adddf3>
 800d792:	4604      	mov	r4, r0
 800d794:	460d      	mov	r5, r1
 800d796:	e006      	b.n	800d7a6 <atan+0x3e>
 800d798:	f1bb 0f00 	cmp.w	fp, #0
 800d79c:	f340 8131 	ble.w	800da02 <atan+0x29a>
 800d7a0:	a59b      	add	r5, pc, #620	; (adr r5, 800da10 <atan+0x2a8>)
 800d7a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7a6:	ec45 4b10 	vmov	d0, r4, r5
 800d7aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ae:	4bb6      	ldr	r3, [pc, #728]	; (800da88 <atan+0x320>)
 800d7b0:	429e      	cmp	r6, r3
 800d7b2:	dc14      	bgt.n	800d7de <atan+0x76>
 800d7b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d7b8:	429e      	cmp	r6, r3
 800d7ba:	dc0d      	bgt.n	800d7d8 <atan+0x70>
 800d7bc:	a396      	add	r3, pc, #600	; (adr r3, 800da18 <atan+0x2b0>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	ee10 0a10 	vmov	r0, s0
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	f7f2 fd18 	bl	80001fc <__adddf3>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4baf      	ldr	r3, [pc, #700]	; (800da8c <atan+0x324>)
 800d7d0:	f7f3 f95a 	bl	8000a88 <__aeabi_dcmpgt>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d1e6      	bne.n	800d7a6 <atan+0x3e>
 800d7d8:	f04f 3aff 	mov.w	sl, #4294967295
 800d7dc:	e02b      	b.n	800d836 <atan+0xce>
 800d7de:	f000 f963 	bl	800daa8 <fabs>
 800d7e2:	4bab      	ldr	r3, [pc, #684]	; (800da90 <atan+0x328>)
 800d7e4:	429e      	cmp	r6, r3
 800d7e6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ea:	f300 80bf 	bgt.w	800d96c <atan+0x204>
 800d7ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d7f2:	429e      	cmp	r6, r3
 800d7f4:	f300 80a0 	bgt.w	800d938 <atan+0x1d0>
 800d7f8:	ee10 2a10 	vmov	r2, s0
 800d7fc:	ee10 0a10 	vmov	r0, s0
 800d800:	462b      	mov	r3, r5
 800d802:	4629      	mov	r1, r5
 800d804:	f7f2 fcfa 	bl	80001fc <__adddf3>
 800d808:	2200      	movs	r2, #0
 800d80a:	4ba0      	ldr	r3, [pc, #640]	; (800da8c <atan+0x324>)
 800d80c:	f7f2 fcf4 	bl	80001f8 <__aeabi_dsub>
 800d810:	2200      	movs	r2, #0
 800d812:	4606      	mov	r6, r0
 800d814:	460f      	mov	r7, r1
 800d816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d81a:	4620      	mov	r0, r4
 800d81c:	4629      	mov	r1, r5
 800d81e:	f7f2 fced 	bl	80001fc <__adddf3>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	4630      	mov	r0, r6
 800d828:	4639      	mov	r1, r7
 800d82a:	f7f2 ffc7 	bl	80007bc <__aeabi_ddiv>
 800d82e:	f04f 0a00 	mov.w	sl, #0
 800d832:	4604      	mov	r4, r0
 800d834:	460d      	mov	r5, r1
 800d836:	4622      	mov	r2, r4
 800d838:	462b      	mov	r3, r5
 800d83a:	4620      	mov	r0, r4
 800d83c:	4629      	mov	r1, r5
 800d83e:	f7f2 fe93 	bl	8000568 <__aeabi_dmul>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4680      	mov	r8, r0
 800d848:	4689      	mov	r9, r1
 800d84a:	f7f2 fe8d 	bl	8000568 <__aeabi_dmul>
 800d84e:	a374      	add	r3, pc, #464	; (adr r3, 800da20 <atan+0x2b8>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	4606      	mov	r6, r0
 800d856:	460f      	mov	r7, r1
 800d858:	f7f2 fe86 	bl	8000568 <__aeabi_dmul>
 800d85c:	a372      	add	r3, pc, #456	; (adr r3, 800da28 <atan+0x2c0>)
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	f7f2 fccb 	bl	80001fc <__adddf3>
 800d866:	4632      	mov	r2, r6
 800d868:	463b      	mov	r3, r7
 800d86a:	f7f2 fe7d 	bl	8000568 <__aeabi_dmul>
 800d86e:	a370      	add	r3, pc, #448	; (adr r3, 800da30 <atan+0x2c8>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	f7f2 fcc2 	bl	80001fc <__adddf3>
 800d878:	4632      	mov	r2, r6
 800d87a:	463b      	mov	r3, r7
 800d87c:	f7f2 fe74 	bl	8000568 <__aeabi_dmul>
 800d880:	a36d      	add	r3, pc, #436	; (adr r3, 800da38 <atan+0x2d0>)
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	f7f2 fcb9 	bl	80001fc <__adddf3>
 800d88a:	4632      	mov	r2, r6
 800d88c:	463b      	mov	r3, r7
 800d88e:	f7f2 fe6b 	bl	8000568 <__aeabi_dmul>
 800d892:	a36b      	add	r3, pc, #428	; (adr r3, 800da40 <atan+0x2d8>)
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f7f2 fcb0 	bl	80001fc <__adddf3>
 800d89c:	4632      	mov	r2, r6
 800d89e:	463b      	mov	r3, r7
 800d8a0:	f7f2 fe62 	bl	8000568 <__aeabi_dmul>
 800d8a4:	a368      	add	r3, pc, #416	; (adr r3, 800da48 <atan+0x2e0>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	f7f2 fca7 	bl	80001fc <__adddf3>
 800d8ae:	4642      	mov	r2, r8
 800d8b0:	464b      	mov	r3, r9
 800d8b2:	f7f2 fe59 	bl	8000568 <__aeabi_dmul>
 800d8b6:	a366      	add	r3, pc, #408	; (adr r3, 800da50 <atan+0x2e8>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4680      	mov	r8, r0
 800d8be:	4689      	mov	r9, r1
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f2 fe50 	bl	8000568 <__aeabi_dmul>
 800d8c8:	a363      	add	r3, pc, #396	; (adr r3, 800da58 <atan+0x2f0>)
 800d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ce:	f7f2 fc93 	bl	80001f8 <__aeabi_dsub>
 800d8d2:	4632      	mov	r2, r6
 800d8d4:	463b      	mov	r3, r7
 800d8d6:	f7f2 fe47 	bl	8000568 <__aeabi_dmul>
 800d8da:	a361      	add	r3, pc, #388	; (adr r3, 800da60 <atan+0x2f8>)
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	f7f2 fc8a 	bl	80001f8 <__aeabi_dsub>
 800d8e4:	4632      	mov	r2, r6
 800d8e6:	463b      	mov	r3, r7
 800d8e8:	f7f2 fe3e 	bl	8000568 <__aeabi_dmul>
 800d8ec:	a35e      	add	r3, pc, #376	; (adr r3, 800da68 <atan+0x300>)
 800d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f2:	f7f2 fc81 	bl	80001f8 <__aeabi_dsub>
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	463b      	mov	r3, r7
 800d8fa:	f7f2 fe35 	bl	8000568 <__aeabi_dmul>
 800d8fe:	a35c      	add	r3, pc, #368	; (adr r3, 800da70 <atan+0x308>)
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	f7f2 fc78 	bl	80001f8 <__aeabi_dsub>
 800d908:	4632      	mov	r2, r6
 800d90a:	463b      	mov	r3, r7
 800d90c:	f7f2 fe2c 	bl	8000568 <__aeabi_dmul>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4640      	mov	r0, r8
 800d916:	4649      	mov	r1, r9
 800d918:	f7f2 fc70 	bl	80001fc <__adddf3>
 800d91c:	4622      	mov	r2, r4
 800d91e:	462b      	mov	r3, r5
 800d920:	f7f2 fe22 	bl	8000568 <__aeabi_dmul>
 800d924:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	d14b      	bne.n	800d9c6 <atan+0x25e>
 800d92e:	4620      	mov	r0, r4
 800d930:	4629      	mov	r1, r5
 800d932:	f7f2 fc61 	bl	80001f8 <__aeabi_dsub>
 800d936:	e72c      	b.n	800d792 <atan+0x2a>
 800d938:	ee10 0a10 	vmov	r0, s0
 800d93c:	2200      	movs	r2, #0
 800d93e:	4b53      	ldr	r3, [pc, #332]	; (800da8c <atan+0x324>)
 800d940:	4629      	mov	r1, r5
 800d942:	f7f2 fc59 	bl	80001f8 <__aeabi_dsub>
 800d946:	2200      	movs	r2, #0
 800d948:	4606      	mov	r6, r0
 800d94a:	460f      	mov	r7, r1
 800d94c:	4b4f      	ldr	r3, [pc, #316]	; (800da8c <atan+0x324>)
 800d94e:	4620      	mov	r0, r4
 800d950:	4629      	mov	r1, r5
 800d952:	f7f2 fc53 	bl	80001fc <__adddf3>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4630      	mov	r0, r6
 800d95c:	4639      	mov	r1, r7
 800d95e:	f7f2 ff2d 	bl	80007bc <__aeabi_ddiv>
 800d962:	f04f 0a01 	mov.w	sl, #1
 800d966:	4604      	mov	r4, r0
 800d968:	460d      	mov	r5, r1
 800d96a:	e764      	b.n	800d836 <atan+0xce>
 800d96c:	4b49      	ldr	r3, [pc, #292]	; (800da94 <atan+0x32c>)
 800d96e:	429e      	cmp	r6, r3
 800d970:	dc1d      	bgt.n	800d9ae <atan+0x246>
 800d972:	ee10 0a10 	vmov	r0, s0
 800d976:	2200      	movs	r2, #0
 800d978:	4b47      	ldr	r3, [pc, #284]	; (800da98 <atan+0x330>)
 800d97a:	4629      	mov	r1, r5
 800d97c:	f7f2 fc3c 	bl	80001f8 <__aeabi_dsub>
 800d980:	2200      	movs	r2, #0
 800d982:	4606      	mov	r6, r0
 800d984:	460f      	mov	r7, r1
 800d986:	4b44      	ldr	r3, [pc, #272]	; (800da98 <atan+0x330>)
 800d988:	4620      	mov	r0, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	f7f2 fdec 	bl	8000568 <__aeabi_dmul>
 800d990:	2200      	movs	r2, #0
 800d992:	4b3e      	ldr	r3, [pc, #248]	; (800da8c <atan+0x324>)
 800d994:	f7f2 fc32 	bl	80001fc <__adddf3>
 800d998:	4602      	mov	r2, r0
 800d99a:	460b      	mov	r3, r1
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f2 ff0c 	bl	80007bc <__aeabi_ddiv>
 800d9a4:	f04f 0a02 	mov.w	sl, #2
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	e743      	b.n	800d836 <atan+0xce>
 800d9ae:	462b      	mov	r3, r5
 800d9b0:	ee10 2a10 	vmov	r2, s0
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	4939      	ldr	r1, [pc, #228]	; (800da9c <atan+0x334>)
 800d9b8:	f7f2 ff00 	bl	80007bc <__aeabi_ddiv>
 800d9bc:	f04f 0a03 	mov.w	sl, #3
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	460d      	mov	r5, r1
 800d9c4:	e737      	b.n	800d836 <atan+0xce>
 800d9c6:	4b36      	ldr	r3, [pc, #216]	; (800daa0 <atan+0x338>)
 800d9c8:	4e36      	ldr	r6, [pc, #216]	; (800daa4 <atan+0x33c>)
 800d9ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d9ce:	4456      	add	r6, sl
 800d9d0:	449a      	add	sl, r3
 800d9d2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d9d6:	f7f2 fc0f 	bl	80001f8 <__aeabi_dsub>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	462b      	mov	r3, r5
 800d9de:	f7f2 fc0b 	bl	80001f8 <__aeabi_dsub>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d9ea:	f7f2 fc05 	bl	80001f8 <__aeabi_dsub>
 800d9ee:	f1bb 0f00 	cmp.w	fp, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	460d      	mov	r5, r1
 800d9f6:	f6bf aed6 	bge.w	800d7a6 <atan+0x3e>
 800d9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9fe:	461d      	mov	r5, r3
 800da00:	e6d1      	b.n	800d7a6 <atan+0x3e>
 800da02:	a51d      	add	r5, pc, #116	; (adr r5, 800da78 <atan+0x310>)
 800da04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da08:	e6cd      	b.n	800d7a6 <atan+0x3e>
 800da0a:	bf00      	nop
 800da0c:	f3af 8000 	nop.w
 800da10:	54442d18 	.word	0x54442d18
 800da14:	3ff921fb 	.word	0x3ff921fb
 800da18:	8800759c 	.word	0x8800759c
 800da1c:	7e37e43c 	.word	0x7e37e43c
 800da20:	e322da11 	.word	0xe322da11
 800da24:	3f90ad3a 	.word	0x3f90ad3a
 800da28:	24760deb 	.word	0x24760deb
 800da2c:	3fa97b4b 	.word	0x3fa97b4b
 800da30:	a0d03d51 	.word	0xa0d03d51
 800da34:	3fb10d66 	.word	0x3fb10d66
 800da38:	c54c206e 	.word	0xc54c206e
 800da3c:	3fb745cd 	.word	0x3fb745cd
 800da40:	920083ff 	.word	0x920083ff
 800da44:	3fc24924 	.word	0x3fc24924
 800da48:	5555550d 	.word	0x5555550d
 800da4c:	3fd55555 	.word	0x3fd55555
 800da50:	2c6a6c2f 	.word	0x2c6a6c2f
 800da54:	bfa2b444 	.word	0xbfa2b444
 800da58:	52defd9a 	.word	0x52defd9a
 800da5c:	3fadde2d 	.word	0x3fadde2d
 800da60:	af749a6d 	.word	0xaf749a6d
 800da64:	3fb3b0f2 	.word	0x3fb3b0f2
 800da68:	fe231671 	.word	0xfe231671
 800da6c:	3fbc71c6 	.word	0x3fbc71c6
 800da70:	9998ebc4 	.word	0x9998ebc4
 800da74:	3fc99999 	.word	0x3fc99999
 800da78:	54442d18 	.word	0x54442d18
 800da7c:	bff921fb 	.word	0xbff921fb
 800da80:	440fffff 	.word	0x440fffff
 800da84:	7ff00000 	.word	0x7ff00000
 800da88:	3fdbffff 	.word	0x3fdbffff
 800da8c:	3ff00000 	.word	0x3ff00000
 800da90:	3ff2ffff 	.word	0x3ff2ffff
 800da94:	40037fff 	.word	0x40037fff
 800da98:	3ff80000 	.word	0x3ff80000
 800da9c:	bff00000 	.word	0xbff00000
 800daa0:	0800e000 	.word	0x0800e000
 800daa4:	0800dfe0 	.word	0x0800dfe0

0800daa8 <fabs>:
 800daa8:	ec51 0b10 	vmov	r0, r1, d0
 800daac:	ee10 2a10 	vmov	r2, s0
 800dab0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dab4:	ec43 2b10 	vmov	d0, r2, r3
 800dab8:	4770      	bx	lr
	...

0800dabc <_init>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	bf00      	nop
 800dac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac2:	bc08      	pop	{r3}
 800dac4:	469e      	mov	lr, r3
 800dac6:	4770      	bx	lr

0800dac8 <_fini>:
 800dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daca:	bf00      	nop
 800dacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dace:	bc08      	pop	{r3}
 800dad0:	469e      	mov	lr, r3
 800dad2:	4770      	bx	lr
