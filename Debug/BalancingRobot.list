
BalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080098e8  080098e8  000198e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a90  08009a90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a98  08009a98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a50  20000010  08009ab0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a60  08009ab0  00024a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd4b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037b5  00000000  00000000  0003cd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  00040540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001580  00000000  00000000  00041c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019458  00000000  00000000  000431c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012eaf  00000000  00000000  0005c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099cb7  00000000  00000000  0006f4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010917e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  001091fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098cc 	.word	0x080098cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080098cc 	.word	0x080098cc

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b972 	b.w	8000e18 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	4688      	mov	r8, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14b      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	d967      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0720 	rsb	r7, r2, #32
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b72:	4095      	lsls	r5, r2
 8000b74:	ea47 0803 	orr.w	r8, r7, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b84:	fa1f fc85 	uxth.w	ip, r5
 8000b88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b90:	fb07 f10c 	mul.w	r1, r7, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9e:	f080 811b 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8118 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba8:	3f02      	subs	r7, #2
 8000baa:	442b      	add	r3, r5
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	192c      	adds	r4, r5, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bdc:	eba4 040c 	sub.w	r4, r4, ip
 8000be0:	2700      	movs	r7, #0
 8000be2:	b11e      	cbz	r6, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xbe>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80eb 	beq.w	8000dd2 <__udivmoddi4+0x286>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000c02:	4638      	mov	r0, r7
 8000c04:	4639      	mov	r1, r7
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f783 	clz	r7, r3
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d147      	bne.n	8000ca2 <__udivmoddi4+0x156>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd0>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80fa 	bhi.w	8000e10 <__udivmoddi4+0x2c4>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa0>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xe8>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 808f 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3e:	1b49      	subs	r1, r1, r5
 8000c40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c44:	fa1f f885 	uxth.w	r8, r5
 8000c48:	2701      	movs	r7, #1
 8000c4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb08 f10c 	mul.w	r1, r8, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x14c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x14a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80b6 	bhi.w	8000e02 <__udivmoddi4+0x2b6>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e79f      	b.n	8000be2 <__udivmoddi4+0x96>
 8000ca2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca6:	40bb      	lsls	r3, r7
 8000ca8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc0:	4325      	orrs	r5, r4
 8000cc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc6:	0c2c      	lsrs	r4, r5, #16
 8000cc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ccc:	fa1f fa8e 	uxth.w	sl, lr
 8000cd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	fa02 f207 	lsl.w	r2, r2, r7
 8000cde:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	f080 8087 	bcs.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	f240 8084 	bls.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4473      	add	r3, lr
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d10:	45a2      	cmp	sl, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1e 0404 	adds.w	r4, lr, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d26b      	bcs.n	8000df6 <__udivmoddi4+0x2aa>
 8000d1e:	45a2      	cmp	sl, r4
 8000d20:	d969      	bls.n	8000df6 <__udivmoddi4+0x2aa>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4474      	add	r4, lr
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	eba4 040a 	sub.w	r4, r4, sl
 8000d32:	454c      	cmp	r4, r9
 8000d34:	46c2      	mov	sl, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	d354      	bcc.n	8000de4 <__udivmoddi4+0x298>
 8000d3a:	d051      	beq.n	8000de0 <__udivmoddi4+0x294>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d069      	beq.n	8000e14 <__udivmoddi4+0x2c8>
 8000d40:	ebb1 050a 	subs.w	r5, r1, sl
 8000d44:	eb64 0403 	sbc.w	r4, r4, r3
 8000d48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d4c:	40fd      	lsrs	r5, r7
 8000d4e:	40fc      	lsrs	r4, r7
 8000d50:	ea4c 0505 	orr.w	r5, ip, r5
 8000d54:	e9c6 5400 	strd	r5, r4, [r6]
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e747      	b.n	8000bec <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f703 	lsr.w	r7, r0, r3
 8000d64:	4095      	lsls	r5, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0c01      	lsrs	r1, r0, #16
 8000d76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7a:	fa1f f885 	uxth.w	r8, r5
 8000d7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb07 f308 	mul.w	r3, r7, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x256>
 8000d92:	1869      	adds	r1, r5, r1
 8000d94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d98:	d22f      	bcs.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d92d      	bls.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9e:	3f02      	subs	r7, #2
 8000da0:	4429      	add	r1, r5
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	b281      	uxth	r1, r0
 8000da6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000daa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb00 f308 	mul.w	r3, r0, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x27e>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc0:	d217      	bcs.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d915      	bls.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd0:	e73b      	b.n	8000c4a <__udivmoddi4+0xfe>
 8000dd2:	4637      	mov	r7, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e709      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e6e7      	b.n	8000bac <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000de0:	4541      	cmp	r1, r8
 8000de2:	d2ab      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dec:	3801      	subs	r0, #1
 8000dee:	4613      	mov	r3, r2
 8000df0:	e7a4      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df2:	4660      	mov	r0, ip
 8000df4:	e7e9      	b.n	8000dca <__udivmoddi4+0x27e>
 8000df6:	4618      	mov	r0, r3
 8000df8:	e795      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfa:	4667      	mov	r7, ip
 8000dfc:	e7d1      	b.n	8000da2 <__udivmoddi4+0x256>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e77c      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	442c      	add	r4, r5
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0x14c>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	442b      	add	r3, r5
 8000e0e:	e72f      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e10:	4638      	mov	r0, r7
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xda>
 8000e14:	4637      	mov	r7, r6
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0xa0>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <LSM6_InitEx>:
#include "LSM6.h"
#include "main.h"
#include "math.h"

bool LSM6_InitEx(I2C_HandleTypeDef *i2c, LSM6_t *LSM6, deviceType device, sa0State sa0)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	71bb      	strb	r3, [r7, #6]
	LSM6->i2c = i2c;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	601a      	str	r2, [r3, #0]
	LSM6->_device = device;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	711a      	strb	r2, [r3, #4]
	LSM6->io_timeout = DEFAULT_TIMEOUT;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e44:	80da      	strh	r2, [r3, #6]
	LSM6->did_timeout = false;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	721a      	strb	r2, [r3, #8]
	LSM6->did_error = false;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	725a      	strb	r2, [r3, #9]

	// perform auto-detection unless device type and SA0 state were both specified
	if (device == device_autoDetect || sa0 == sa0_autoDetect)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d002      	beq.n	8000e5e <LSM6_InitEx+0x42>
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d12f      	bne.n	8000ebe <LSM6_InitEx+0xa2>
	{
		// check for LSM6DS33 if device is unidentified or was specified to be this type
		if (device == device_autoDetect || device == device_DS33)
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d002      	beq.n	8000e6a <LSM6_InitEx+0x4e>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d124      	bne.n	8000eb4 <LSM6_InitEx+0x98>
		{
			// check SA0 high address unless SA0 was specified to be low
			if (sa0 != sa0_low && testReg(LSM6, DS33_SA0_HIGH_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00f      	beq.n	8000e90 <LSM6_InitEx+0x74>
 8000e70:	220f      	movs	r2, #15
 8000e72:	216b      	movs	r1, #107	; 0x6b
 8000e74:	68b8      	ldr	r0, [r7, #8]
 8000e76:	f000 f83b 	bl	8000ef0 <testReg>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b69      	cmp	r3, #105	; 0x69
 8000e7e:	d107      	bne.n	8000e90 <LSM6_InitEx+0x74>
			{
				sa0 = sa0_high;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d114      	bne.n	8000eb4 <LSM6_InitEx+0x98>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e011      	b.n	8000eb4 <LSM6_InitEx+0x98>
			}
			// check SA0 low address unless SA0 was specified to be high
			else if (sa0 != sa0_high && testReg(LSM6, DS33_SA0_LOW_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d00e      	beq.n	8000eb4 <LSM6_InitEx+0x98>
 8000e96:	220f      	movs	r2, #15
 8000e98:	216a      	movs	r1, #106	; 0x6a
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f000 f828 	bl	8000ef0 <testReg>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b69      	cmp	r3, #105	; 0x69
 8000ea4:	d106      	bne.n	8000eb4 <LSM6_InitEx+0x98>
			{
				sa0 = sa0_low;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <LSM6_InitEx+0x98>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
			}
		}

		// make sure device and SA0 were successfully detected; otherwise, indicate failure
		if (sa0 == sa0_autoDetect)
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d101      	bne.n	8000ebe <LSM6_InitEx+0xa2>
		{
			return false;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e014      	b.n	8000ee8 <LSM6_InitEx+0xcc>
		}
	}

	LSM6->_device = device;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	711a      	strb	r2, [r3, #4]

	switch (device)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <LSM6_InitEx+0xb4>
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d009      	beq.n	8000ee2 <LSM6_InitEx+0xc6>
 8000ece:	e00a      	b.n	8000ee6 <LSM6_InitEx+0xca>
	{
		case device_DS33:
			LSM6->address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <LSM6_InitEx+0xbe>
 8000ed6:	226b      	movs	r2, #107	; 0x6b
 8000ed8:	e000      	b.n	8000edc <LSM6_InitEx+0xc0>
 8000eda:	226a      	movs	r2, #106	; 0x6a
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	715a      	strb	r2, [r3, #5]
			break;
 8000ee0:	e001      	b.n	8000ee6 <LSM6_InitEx+0xca>
		case device_autoDetect:
			return false;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <LSM6_InitEx+0xcc>
	}

	return true;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <testReg>:

// Returns chip id if communication is established, return 0 if not
uint8_t testReg(LSM6_t *LSM6, uint8_t address, uint8_t reg)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	70bb      	strb	r3, [r7, #2]
	uint8_t Value;

	if (HAL_OK == HAL_I2C_Mem_Read(LSM6->i2c, (address)<<1, reg, 1, &Value, 1, LSM6->io_timeout))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	88db      	ldrh	r3, [r3, #6]
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f107 030f 	add.w	r3, r7, #15
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	f002 fef9 	bl	8003d18 <HAL_I2C_Mem_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <testReg+0x40>
	{
		return Value;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	e000      	b.n	8000f32 <testReg+0x42>
	}
	else
	{
		return false;
 8000f30:	2300      	movs	r3, #0
	}
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <timeoutOccurred>:

// Did a timeout occur in readAcc(), readGyro(), or read() since the last call to timeoutOccurred()?
bool timeoutOccurred(LSM6_t *LSM6)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_timeout;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7a1b      	ldrb	r3, [r3, #8]
 8000f46:	73fb      	strb	r3, [r7, #15]
	LSM6->did_timeout = false;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	721a      	strb	r2, [r3, #8]
	return tmp;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <errorOccured>:
// Did an error occur in readAcc(), readGyro(), or read() since the last call to errorOccurred()?
bool errorOccured(LSM6_t *LSM6)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_error;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7a5b      	ldrb	r3, [r3, #9]
 8000f68:	73fb      	strb	r3, [r7, #15]
	LSM6->did_error = false;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	725a      	strb	r2, [r3, #9]
	return tmp;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <enableDefault>:
{
	return LSM6->io_timeout;
}

void enableDefault(LSM6_t *LSM6)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	if (LSM6->_device == device_DS33)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	791b      	ldrb	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d11d      	bne.n	8000fca <enableDefault+0x4c>
	{
	// Accelerometer
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (+/-2 g full scale)
	  writeReg(LSM6, CTRL9_XL, 0x38);	// Accelerometer X, Y, Z axes enabled
 8000f8e:	2238      	movs	r2, #56	; 0x38
 8000f90:	2118      	movs	r1, #24
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f81d 	bl	8000fd2 <writeReg>
	  writeReg(LSM6, CTRL1_XL, 0x10);	// Accelerometer = 416Hz
 8000f98:	2210      	movs	r2, #16
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f818 	bl	8000fd2 <writeReg>
	  writeReg(LSM6, INT1_CTRL, 0x01);	// Accelerometer data ready interrupt on INT1
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	210d      	movs	r1, #13
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f813 	bl	8000fd2 <writeReg>

	// Gyroscope
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (245 dps)
	  writeReg(LSM6, CTRL10_C, 0x38);	// Gyroscope X, Y, Z axes enabled
 8000fac:	2238      	movs	r2, #56	; 0x38
 8000fae:	2119      	movs	r1, #25
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f80e 	bl	8000fd2 <writeReg>
	  writeReg(LSM6, CTRL2_G, 0x10);	// Gyroscope = 416Hz
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	2111      	movs	r1, #17
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f809 	bl	8000fd2 <writeReg>
	  writeReg(LSM6, INT2_CTRL, 0x02);	// Gyroscope data ready interrupt on INT2
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	210e      	movs	r1, #14
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f804 	bl	8000fd2 <writeReg>
	// Common
	// 0x04 = 0b00000100
	// IF_INC = 1 (automatically increment register address)
	// writeReg(CTRL3_C, 0x04);
	}
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <writeReg>:

// Write 8-bits
void writeReg(LSM6_t *LSM6, uint8_t reg, uint8_t value)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b088      	sub	sp, #32
 8000fd6:	af04      	add	r7, sp, #16
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	// Write 8-bits
	status = HAL_I2C_Mem_Write(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	795b      	ldrb	r3, [r3, #5]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	b299      	uxth	r1, r3
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	88db      	ldrh	r3, [r3, #6]
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	1cbb      	adds	r3, r7, #2
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	f002 fd8e 	bl	8003b24 <HAL_I2C_Mem_Write>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d102      	bne.n	8001018 <writeReg+0x46>
	{
		LSM6->did_timeout = true;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	721a      	strb	r2, [r3, #8]
	}
	if(status == HAL_ERROR)
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <writeReg+0x52>
	{
		LSM6->did_error = true;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	725a      	strb	r2, [r3, #9]
	}
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <readReg>:

// Read 8-bits
uint8_t readReg(LSM6_t *LSM6, uint8_t reg)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	70fb      	strb	r3, [r7, #3]
	uint8_t value, status;

	// Read 8 bits
	status = HAL_I2C_Mem_Read(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	b29b      	uxth	r3, r3
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b299      	uxth	r1, r3
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	b29a      	uxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	88db      	ldrh	r3, [r3, #6]
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	f107 030e 	add.w	r3, r7, #14
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	f002 fe5c 	bl	8003d18 <HAL_I2C_Mem_Read>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d104      	bne.n	8001074 <readReg+0x48>
	{
		LSM6->did_timeout = true;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	721a      	strb	r2, [r3, #8]
		return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e008      	b.n	8001086 <readReg+0x5a>
	}
	if(status == HAL_ERROR)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d104      	bne.n	8001084 <readReg+0x58>
	{
		LSM6->did_error = true;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	725a      	strb	r2, [r3, #9]
		return 0;
 8001080:	2300      	movs	r3, #0
 8001082:	e000      	b.n	8001086 <readReg+0x5a>
	}

	return value;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <readAcc>:

uint8_t readAcc(LSM6_t *LSM6)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xla = readReg(LSM6, OUTX_L_XL);
 8001096:	2128      	movs	r1, #40	; 0x28
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffc7 	bl	800102c <readReg>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	uint8_t xha = readReg(LSM6, OUTX_H_XL);
 80010a2:	2129      	movs	r1, #41	; 0x29
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffc1 	bl	800102c <readReg>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
	uint8_t yla = readReg(LSM6, OUTY_L_XL);
 80010ae:	212a      	movs	r1, #42	; 0x2a
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffbb 	bl	800102c <readReg>
 80010b6:	4603      	mov	r3, r0
 80010b8:	737b      	strb	r3, [r7, #13]
	uint8_t yha = readReg(LSM6, OUTY_H_XL);
 80010ba:	212b      	movs	r1, #43	; 0x2b
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffb5 	bl	800102c <readReg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	733b      	strb	r3, [r7, #12]
	uint8_t zla = readReg(LSM6, OUTZ_L_XL);
 80010c6:	212c      	movs	r1, #44	; 0x2c
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffaf 	bl	800102c <readReg>
 80010ce:	4603      	mov	r3, r0
 80010d0:	72fb      	strb	r3, [r7, #11]
	uint8_t zha = readReg(LSM6, OUTZ_H_XL);
 80010d2:	212d      	movs	r1, #45	; 0x2d
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa9 	bl	800102c <readReg>
 80010da:	4603      	mov	r3, r0
 80010dc:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff2b 	bl	8000f3a <timeoutOccurred>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <readAcc+0x60>
	{
		return HAL_BUSY;
 80010ea:	2302      	movs	r3, #2
 80010ec:	e023      	b.n	8001136 <readAcc+0xa8>
	}
	if (errorOccured(LSM6) == true)
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff34 	bl	8000f5c <errorOccured>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <readAcc+0x70>
	{
		return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e01b      	b.n	8001136 <readAcc+0xa8>
	}

	// combine high and low bytes
	LSM6->accelerometer.x = (int16_t)(xha << 8 | xla);
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21a      	sxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	815a      	strh	r2, [r3, #10]
	LSM6->accelerometer.y = (int16_t)(yha << 8 | yla);
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21a      	sxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	819a      	strh	r2, [r3, #12]
	LSM6->accelerometer.z = (int16_t)(zha << 8 | zla);
 8001122:	7abb      	ldrb	r3, [r7, #10]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	81da      	strh	r2, [r3, #14]

	return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <readGyro>:

uint8_t readGyro(LSM6_t *LSM6)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xlg = readReg(LSM6, OUTX_L_G);
 8001146:	2122      	movs	r1, #34	; 0x22
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff6f 	bl	800102c <readReg>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
	uint8_t xhg = readReg(LSM6, OUTX_H_G);
 8001152:	2123      	movs	r1, #35	; 0x23
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff69 	bl	800102c <readReg>
 800115a:	4603      	mov	r3, r0
 800115c:	73bb      	strb	r3, [r7, #14]
	uint8_t ylg = readReg(LSM6, OUTY_L_G);
 800115e:	2124      	movs	r1, #36	; 0x24
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff63 	bl	800102c <readReg>
 8001166:	4603      	mov	r3, r0
 8001168:	737b      	strb	r3, [r7, #13]
	uint8_t yhg = readReg(LSM6, OUTY_H_G);
 800116a:	2125      	movs	r1, #37	; 0x25
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff5d 	bl	800102c <readReg>
 8001172:	4603      	mov	r3, r0
 8001174:	733b      	strb	r3, [r7, #12]
	uint8_t zlg = readReg(LSM6, OUTZ_L_G);
 8001176:	2126      	movs	r1, #38	; 0x26
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff57 	bl	800102c <readReg>
 800117e:	4603      	mov	r3, r0
 8001180:	72fb      	strb	r3, [r7, #11]
	uint8_t zhg = readReg(LSM6, OUTZ_H_G);
 8001182:	2127      	movs	r1, #39	; 0x27
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff51 	bl	800102c <readReg>
 800118a:	4603      	mov	r3, r0
 800118c:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fed3 	bl	8000f3a <timeoutOccurred>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <readGyro+0x60>
	{
		return HAL_BUSY;
 800119a:	2302      	movs	r3, #2
 800119c:	e023      	b.n	80011e6 <readGyro+0xa8>
	}
	if (errorOccured(LSM6) == true)
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fedc 	bl	8000f5c <errorOccured>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <readGyro+0x70>
	{
		return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e01b      	b.n	80011e6 <readGyro+0xa8>
	}

	// combine high and low bytes
	LSM6->gyroscope.x = (int16_t)(xhg << 8 | xlg);
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	821a      	strh	r2, [r3, #16]
	LSM6->gyroscope.y = (int16_t)(yhg << 8 | ylg);
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	825a      	strh	r2, [r3, #18]
	LSM6->gyroscope.z = (int16_t)(zhg << 8 | zlg);
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21a      	sxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	829a      	strh	r2, [r3, #20]

	return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LSM6_Read>:

// Main function to read LSM6 data
uint8_t LSM6_Read(LSM6_t *LSM6)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	uint8_t status;

	// Read accelerometer data
	if ((status = readAcc(LSM6)) != HAL_OK)
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff49 	bl	800108e <readAcc>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <LSM6_Read+0x1c>
	{
		return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	e00a      	b.n	8001220 <LSM6_Read+0x32>
	}

	// Read gyroscope data
	if ((status = readGyro(LSM6)) != HAL_OK)
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff97 	bl	800113e <readGyro>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <LSM6_Read+0x30>
	{
		return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	e000      	b.n	8001220 <LSM6_Read+0x32>
	}

	return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_FREERTOS_Init+0x54>)
 800122e:	f004 ff99 	bl	8006164 <osMutexNew>
 8001232:	4602      	mov	r2, r0
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_FREERTOS_Init+0x58>)
 8001236:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreLSM6_DataReady */
  SemaphoreLSM6_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreLSM6_DataReady_attributes);
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_FREERTOS_Init+0x5c>)
 800123a:	2101      	movs	r1, #1
 800123c:	2001      	movs	r0, #1
 800123e:	f005 f8d9 	bl	80063f4 <osSemaphoreNew>
 8001242:	4602      	mov	r2, r0
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_FREERTOS_Init+0x60>)
 8001246:	601a      	str	r2, [r3, #0]

  /* creation of SemaphorePrint */
  SemaphorePrintHandle = osSemaphoreNew(1, 1, &SemaphorePrint_attributes);
 8001248:	4a10      	ldr	r2, [pc, #64]	; (800128c <MX_FREERTOS_Init+0x64>)
 800124a:	2101      	movs	r1, #1
 800124c:	2001      	movs	r0, #1
 800124e:	f005 f8d1 	bl	80063f4 <osSemaphoreNew>
 8001252:	4602      	mov	r2, r0
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_FREERTOS_Init+0x68>)
 8001256:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(StartHeartbeatTask, NULL, &Heartbeat_attributes);
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <MX_FREERTOS_Init+0x6c>)
 800125a:	2100      	movs	r1, #0
 800125c:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_FREERTOS_Init+0x70>)
 800125e:	f004 fead 	bl	8005fbc <osThreadNew>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_FREERTOS_Init+0x74>)
 8001266:	601a      	str	r2, [r3, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(StartIMU_Task, NULL, &IMU_Task_attributes);
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <MX_FREERTOS_Init+0x78>)
 800126a:	2100      	movs	r1, #0
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_FREERTOS_Init+0x7c>)
 800126e:	f004 fea5 	bl	8005fbc <osThreadNew>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_FREERTOS_Init+0x80>)
 8001276:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	080099f4 	.word	0x080099f4
 8001280:	20004934 	.word	0x20004934
 8001284:	08009a04 	.word	0x08009a04
 8001288:	2000493c 	.word	0x2000493c
 800128c:	08009a14 	.word	0x08009a14
 8001290:	20004944 	.word	0x20004944
 8001294:	080099ac 	.word	0x080099ac
 8001298:	080012ad 	.word	0x080012ad
 800129c:	20004940 	.word	0x20004940
 80012a0:	080099d0 	.word	0x080099d0
 80012a4:	080012cd 	.word	0x080012cd
 80012a8:	20004938 	.word	0x20004938

080012ac <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012b4:	2120      	movs	r1, #32
 80012b6:	4804      	ldr	r0, [pc, #16]	; (80012c8 <StartHeartbeatTask+0x1c>)
 80012b8:	f002 fac9 	bl	800384e <HAL_GPIO_TogglePin>
      osDelay(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f004 ff22 	bl	8006108 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012c4:	e7f6      	b.n	80012b4 <StartHeartbeatTask+0x8>
 80012c6:	bf00      	nop
 80012c8:	40020000 	.word	0x40020000

080012cc <StartIMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU_Task */
void StartIMU_Task(void *argument)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU_Task */
	LSM6_t LSM6DS33;
	osMutexAcquire(MutexI2CHandle, osWaitForever);
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <StartIMU_Task+0xb0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 ffdb 	bl	8006298 <osMutexAcquire>
	if (LSM6_InitEx(&hi2c1, &LSM6DS33, device_autoDetect, sa0_autoDetect) == false)
 80012e2:	f107 0108 	add.w	r1, r7, #8
 80012e6:	2302      	movs	r3, #2
 80012e8:	2201      	movs	r2, #1
 80012ea:	4825      	ldr	r0, [pc, #148]	; (8001380 <StartIMU_Task+0xb4>)
 80012ec:	f7ff fd96 	bl	8000e1c <LSM6_InitEx>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <StartIMU_Task+0x32>
	{
		printf("LSM6 INIT ERROR\n\r");
 80012f6:	4823      	ldr	r0, [pc, #140]	; (8001384 <StartIMU_Task+0xb8>)
 80012f8:	f001 fe6c 	bl	8002fd4 <printf_>
 80012fc:	e004      	b.n	8001308 <StartIMU_Task+0x3c>
	}
	else
	{
		enableDefault(&LSM6DS33);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe3b 	bl	8000f7e <enableDefault>
	}
	osMutexRelease(MutexI2CHandle);
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <StartIMU_Task+0xb0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f005 f821 	bl	8006354 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <StartIMU_Task+0xbc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f04f 31ff 	mov.w	r1, #4294967295
 800131a:	4618      	mov	r0, r3
 800131c:	f005 f908 	bl	8006530 <osSemaphoreAcquire>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f5      	bne.n	8001312 <StartIMU_Task+0x46>
    {
    	LSM6_Read(&LSM6DS33);
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff5f 	bl	80011ee <LSM6_Read>
    	printf("ACC: x=%d, ", (int) LSM6DS33.accelerometer.x);
 8001330:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001334:	4619      	mov	r1, r3
 8001336:	4815      	ldr	r0, [pc, #84]	; (800138c <StartIMU_Task+0xc0>)
 8001338:	f001 fe4c 	bl	8002fd4 <printf_>
    	printf("y=%d, ", (int) LSM6DS33.accelerometer.y);
 800133c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001340:	4619      	mov	r1, r3
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <StartIMU_Task+0xc4>)
 8001344:	f001 fe46 	bl	8002fd4 <printf_>
    	printf("z=%d, ", (int) LSM6DS33.accelerometer.z);
 8001348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800134c:	4619      	mov	r1, r3
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <StartIMU_Task+0xc8>)
 8001350:	f001 fe40 	bl	8002fd4 <printf_>
    	printf("GYRO: x=%d, ", (int) LSM6DS33.gyroscope.x);
 8001354:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001358:	4619      	mov	r1, r3
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <StartIMU_Task+0xcc>)
 800135c:	f001 fe3a 	bl	8002fd4 <printf_>
    	printf("y=%d, ", (int) LSM6DS33.gyroscope.x);
 8001360:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001364:	4619      	mov	r1, r3
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <StartIMU_Task+0xc4>)
 8001368:	f001 fe34 	bl	8002fd4 <printf_>
    	printf("z=%d\n\r", (int) LSM6DS33.gyroscope.x);
 800136c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001370:	4619      	mov	r1, r3
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <StartIMU_Task+0xd0>)
 8001374:	f001 fe2e 	bl	8002fd4 <printf_>
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001378:	e7cb      	b.n	8001312 <StartIMU_Task+0x46>
 800137a:	bf00      	nop
 800137c:	20004934 	.word	0x20004934
 8001380:	20004948 	.word	0x20004948
 8001384:	08009934 	.word	0x08009934
 8001388:	2000493c 	.word	0x2000493c
 800138c:	08009948 	.word	0x08009948
 8001390:	08009954 	.word	0x08009954
 8001394:	0800995c 	.word	0x0800995c
 8001398:	08009964 	.word	0x08009964
 800139c:	08009974 	.word	0x08009974

080013a0 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osSemaphoreAcquire(SemaphorePrintHandle, osWaitForever);
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <_putchar+0x38>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f04f 31ff 	mov.w	r1, #4294967295
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f8bc 	bl	8006530 <osSemaphoreAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 80013b8:	1df9      	adds	r1, r7, #7
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	2201      	movs	r2, #1
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <_putchar+0x3c>)
 80013c2:	f004 f92a 	bl	800561a <HAL_UART_Transmit>
	osSemaphoreRelease(SemaphorePrintHandle);
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <_putchar+0x38>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 f916 	bl	80065fc <osSemaphoreRelease>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20004944 	.word	0x20004944
 80013dc:	200049dc 	.word	0x200049dc

080013e0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LSM6_Interrupt_Pin)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f0:	d104      	bne.n	80013fc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(SemaphoreLSM6_DataReadyHandle);
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_GPIO_EXTI_Callback+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 f900 	bl	80065fc <osSemaphoreRelease>
	}
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000493c 	.word	0x2000493c

08001408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_GPIO_Init+0x118>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <MX_GPIO_Init+0x118>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_GPIO_Init+0x118>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <MX_GPIO_Init+0x118>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a37      	ldr	r2, [pc, #220]	; (8001520 <MX_GPIO_Init+0x118>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <MX_GPIO_Init+0x118>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <MX_GPIO_Init+0x118>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a30      	ldr	r2, [pc, #192]	; (8001520 <MX_GPIO_Init+0x118>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_GPIO_Init+0x118>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <MX_GPIO_Init+0x118>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a29      	ldr	r2, [pc, #164]	; (8001520 <MX_GPIO_Init+0x118>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_GPIO_Init+0x118>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|leftMotor_STEP_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_GPIO_Init+0x11c>)
 8001496:	f002 f9c1 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, leftMotor_DIR_Pin|rightMotor_DIR_Pin|rightMotor_STEP_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80014a0:	4821      	ldr	r0, [pc, #132]	; (8001528 <MX_GPIO_Init+0x120>)
 80014a2:	f002 f9bb 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_GPIO_Init+0x124>)
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_GPIO_Init+0x128>)
 80014bc:	f002 f82c 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|leftMotor_STEP_Pin;
 80014c0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <MX_GPIO_Init+0x11c>)
 80014da:	f002 f81d 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = leftMotor_DIR_Pin|rightMotor_DIR_Pin|rightMotor_STEP_Pin;
 80014de:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <MX_GPIO_Init+0x120>)
 80014f8:	f002 f80e 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt_Pin;
 80014fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_GPIO_Init+0x12c>)
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_GPIO_Init+0x11c>)
 8001512:	f002 f801 	bl	8003518 <HAL_GPIO_Init>

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	10210000 	.word	0x10210000
 8001530:	40020800 	.word	0x40020800
 8001534:	10110000 	.word	0x10110000

08001538 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C1_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C1_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C1_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C1_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C1_Init+0x50>)
 8001576:	f002 f99d 	bl	80038b4 <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001580:	f000 f8ee 	bl	8001760 <Error_Handler>
  }

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20004948 	.word	0x20004948
 800158c:	40005400 	.word	0x40005400
 8001590:	00061a80 	.word	0x00061a80

08001594 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_I2C_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12c      	bne.n	8001610 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d8:	2312      	movs	r3, #18
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e4:	2304      	movs	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <HAL_I2C_MspInit+0x8c>)
 80015f0:	f001 ff92 	bl	8003518 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_I2C_MspInit+0x88>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40005400 	.word	0x40005400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f001 fe52 	bl	80032d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f810 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f7ff feea 	bl	8001408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001634:	f001 fdb0 	bl	8003198 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001638:	f7ff ff7e 	bl	8001538 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800163c:	f000 f872 	bl	8001724 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001640:	f004 fc52 	bl	8005ee8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001644:	f7ff fdf0 	bl	8001228 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001648:	f004 fc82 	bl	8005f50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800164c:	e7fe      	b.n	800164c <main+0x28>
	...

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	; 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f008 f92b 	bl	80098ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <SystemClock_Config+0xcc>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <SystemClock_Config+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <SystemClock_Config+0xd0>)
 800169a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ac:	2302      	movs	r3, #2
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b4:	2310      	movs	r3, #16
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2302      	movs	r3, #2
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016c0:	2310      	movs	r3, #16
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016ca:	2304      	movs	r3, #4
 80016cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ce:	2304      	movs	r3, #4
 80016d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 f8a0 	bl	800481c <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016e2:	f000 f83d 	bl	8001760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2302      	movs	r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fafa 	bl	8004cfc <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800170e:	f000 f827 	bl	8001760 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	; 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2105      	movs	r1, #5
 800172c:	2028      	movs	r0, #40	; 0x28
 800172e:	f001 fec9 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001732:	2028      	movs	r0, #40	; 0x28
 8001734:	f001 fee2 	bl	80034fc <HAL_NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800174e:	f001 fde1 	bl	8003314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40010000 	.word	0x40010000

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001766:	e7fe      	b.n	8001766 <Error_Handler+0x6>

08001768 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <_out_char+0x1e>
    _putchar(character);
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fdff 	bl	80013a0 <_putchar>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e002      	b.n	80017c0 <_strnlen_s+0x16>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3301      	adds	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <_strnlen_s+0x28>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	603a      	str	r2, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f3      	bne.n	80017ba <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1ad3      	subs	r3, r2, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b2f      	cmp	r3, #47	; 0x2f
 80017f2:	d904      	bls.n	80017fe <_is_digit+0x1a>
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b39      	cmp	r3, #57	; 0x39
 80017f8:	d801      	bhi.n	80017fe <_is_digit+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <_is_digit+0x1c>
 80017fe:	2300      	movs	r3, #0
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800181e:	e00e      	b.n	800183e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4618      	mov	r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1c59      	adds	r1, r3, #1
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6011      	str	r1, [r2, #0]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4403      	add	r3, r0
 800183a:	3b30      	subs	r3, #48	; 0x30
 800183c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ffcd 	bl	80017e4 <_is_digit>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e7      	bne.n	8001820 <_atoi+0xe>
  }
  return i;
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800185a:	b590      	push	{r4, r7, lr}
 800185c:	b087      	sub	sp, #28
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d125      	bne.n	80018c2 <_out_rev+0x68>
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d120      	bne.n	80018c2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	1c53      	adds	r3, r2, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	68fc      	ldr	r4, [r7, #12]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	2020      	movs	r0, #32
 8001894:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3f0      	bcc.n	8001886 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80018a4:	e00d      	b.n	80018c2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	3b01      	subs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	4413      	add	r3, r2
 80018b2:	7818      	ldrb	r0, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	1c53      	adds	r3, r2, #1
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	68fc      	ldr	r4, [r7, #12]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	47a0      	blx	r4
  while (len) {
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80018c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00e      	beq.n	80018f0 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80018d2:	e007      	b.n	80018e4 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	1c53      	adds	r3, r2, #1
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	68fc      	ldr	r4, [r7, #12]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	2020      	movs	r0, #32
 80018e2:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f1      	bhi.n	80018d4 <_out_rev+0x7a>
    }
  }

  return idx;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b088      	sub	sp, #32
 80018fe:	af04      	add	r7, sp, #16
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d136      	bne.n	8001980 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d018      	beq.n	800194a <_ntoa_format+0x50>
 8001918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d013      	beq.n	800194a <_ntoa_format+0x50>
 8001922:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d104      	bne.n	8001934 <_ntoa_format+0x3a>
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00a      	beq.n	800194a <_ntoa_format+0x50>
      width--;
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3b01      	subs	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800193a:	e006      	b.n	800194a <_ntoa_format+0x50>
      buf[len++] = '0';
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	61fa      	str	r2, [r7, #28]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4413      	add	r3, r2
 8001946:	2230      	movs	r2, #48	; 0x30
 8001948:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	429a      	cmp	r2, r3
 8001950:	d20a      	bcs.n	8001968 <_ntoa_format+0x6e>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b1f      	cmp	r3, #31
 8001956:	d9f1      	bls.n	800193c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001958:	e006      	b.n	8001968 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	61fa      	str	r2, [r7, #28]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4413      	add	r3, r2
 8001964:	2230      	movs	r2, #48	; 0x30
 8001966:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <_ntoa_format+0x86>
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	429a      	cmp	r2, r3
 8001978:	d202      	bcs.n	8001980 <_ntoa_format+0x86>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b1f      	cmp	r3, #31
 800197e:	d9ec      	bls.n	800195a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d058      	beq.n	8001a3c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d116      	bne.n	80019c2 <_ntoa_format+0xc8>
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d013      	beq.n	80019c2 <_ntoa_format+0xc8>
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	429a      	cmp	r2, r3
 80019a0:	d003      	beq.n	80019aa <_ntoa_format+0xb0>
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d10b      	bne.n	80019c2 <_ntoa_format+0xc8>
      len--;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <_ntoa_format+0xc8>
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d102      	bne.n	80019c2 <_ntoa_format+0xc8>
        len--;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3b01      	subs	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	2b10      	cmp	r3, #16
 80019c6:	d10f      	bne.n	80019e8 <_ntoa_format+0xee>
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <_ntoa_format+0xee>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	2b1f      	cmp	r3, #31
 80019d6:	d807      	bhi.n	80019e8 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	61fa      	str	r2, [r7, #28]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4413      	add	r3, r2
 80019e2:	2278      	movs	r2, #120	; 0x78
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e01f      	b.n	8001a28 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d10f      	bne.n	8001a0e <_ntoa_format+0x114>
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <_ntoa_format+0x114>
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b1f      	cmp	r3, #31
 80019fc:	d807      	bhi.n	8001a0e <_ntoa_format+0x114>
      buf[len++] = 'X';
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	61fa      	str	r2, [r7, #28]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4413      	add	r3, r2
 8001a08:	2258      	movs	r2, #88	; 0x58
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e00c      	b.n	8001a28 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d109      	bne.n	8001a28 <_ntoa_format+0x12e>
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b1f      	cmp	r3, #31
 8001a18:	d806      	bhi.n	8001a28 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	61fa      	str	r2, [r7, #28]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4413      	add	r3, r2
 8001a24:	2262      	movs	r2, #98	; 0x62
 8001a26:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b1f      	cmp	r3, #31
 8001a2c:	d806      	bhi.n	8001a3c <_ntoa_format+0x142>
      buf[len++] = '0';
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	61fa      	str	r2, [r7, #28]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4413      	add	r3, r2
 8001a38:	2230      	movs	r2, #48	; 0x30
 8001a3a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b1f      	cmp	r3, #31
 8001a40:	d824      	bhi.n	8001a8c <_ntoa_format+0x192>
    if (negative) {
 8001a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <_ntoa_format+0x160>
      buf[len++] = '-';
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	61fa      	str	r2, [r7, #28]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4413      	add	r3, r2
 8001a54:	222d      	movs	r2, #45	; 0x2d
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e018      	b.n	8001a8c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	61fa      	str	r2, [r7, #28]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	222b      	movs	r2, #43	; 0x2b
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e00b      	b.n	8001a8c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	61fa      	str	r2, [r7, #28]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4413      	add	r3, r2
 8001a88:	2220      	movs	r2, #32
 8001a8a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	9303      	str	r3, [sp, #12]
 8001a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fed9 	bl	800185a <_out_rev>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b096      	sub	sp, #88	; 0x58
 8001ab6:	af08      	add	r7, sp, #32
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	f023 0310 	bic.w	r3, r3, #16
 8001ad0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <_ntoa_long+0x30>
 8001adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d033      	beq.n	8001b4a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ae6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001aea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001aec:	fb01 f202 	mul.w	r2, r1, r2
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d804      	bhi.n	8001b08 <_ntoa_long+0x56>
 8001afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b02:	3330      	adds	r3, #48	; 0x30
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	e00d      	b.n	8001b24 <_ntoa_long+0x72>
 8001b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <_ntoa_long+0x64>
 8001b12:	2241      	movs	r2, #65	; 0x41
 8001b14:	e000      	b.n	8001b18 <_ntoa_long+0x66>
 8001b16:	2261      	movs	r2, #97	; 0x61
 8001b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3b0a      	subs	r3, #10
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	1c59      	adds	r1, r3, #1
 8001b28:	6379      	str	r1, [r7, #52]	; 0x34
 8001b2a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b2e:	440b      	add	r3, r1
 8001b30:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001b34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <_ntoa_long+0x98>
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	2b1f      	cmp	r3, #31
 8001b48:	d9cb      	bls.n	8001ae2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4c:	9306      	str	r3, [sp, #24]
 8001b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b50:	9305      	str	r3, [sp, #20]
 8001b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b54:	9304      	str	r3, [sp, #16]
 8001b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b58:	9303      	str	r3, [sp, #12]
 8001b5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fec2 	bl	80018fa <_ntoa_format>
 8001b76:	4603      	mov	r3, r0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3738      	adds	r7, #56	; 0x38
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b097      	sub	sp, #92	; 0x5c
 8001b84:	af08      	add	r7, sp, #32
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001b92:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001b96:	4323      	orrs	r3, r4
 8001b98:	d103      	bne.n	8001ba2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9c:	f023 0310 	bic.w	r3, r3, #16
 8001ba0:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <_ntoa_long_long+0x34>
 8001bac:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001bb0:	4323      	orrs	r3, r4
 8001bb2:	d039      	beq.n	8001c28 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8001bb4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bbc:	f7fe ffae 	bl	8000b1c <__aeabi_uldivmod>
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d804      	bhi.n	8001bda <_ntoa_long_long+0x5a>
 8001bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bd4:	3330      	adds	r3, #48	; 0x30
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	e00d      	b.n	8001bf6 <_ntoa_long_long+0x76>
 8001bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <_ntoa_long_long+0x68>
 8001be4:	2241      	movs	r2, #65	; 0x41
 8001be6:	e000      	b.n	8001bea <_ntoa_long_long+0x6a>
 8001be8:	2261      	movs	r2, #97	; 0x61
 8001bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3b0a      	subs	r3, #10
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	1c59      	adds	r1, r3, #1
 8001bfa:	6379      	str	r1, [r7, #52]	; 0x34
 8001bfc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c00:	440b      	add	r3, r1
 8001c02:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c0e:	f7fe ff85 	bl	8000b1c <__aeabi_uldivmod>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001c1a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	d002      	beq.n	8001c28 <_ntoa_long_long+0xa8>
 8001c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c24:	2b1f      	cmp	r3, #31
 8001c26:	d9c5      	bls.n	8001bb4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c2c:	9206      	str	r2, [sp, #24]
 8001c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c30:	9205      	str	r2, [sp, #20]
 8001c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c34:	9204      	str	r2, [sp, #16]
 8001c36:	9303      	str	r3, [sp, #12]
 8001c38:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff fe53 	bl	80018fa <_ntoa_format>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	373c      	adds	r7, #60	; 0x3c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
	...

08001c60 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b09d      	sub	sp, #116	; 0x74
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	6178      	str	r0, [r7, #20]
 8001c68:	6139      	str	r1, [r7, #16]
 8001c6a:	60fa      	str	r2, [r7, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f04f 0400 	mov.w	r4, #0
 8001c7e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c8a:	f7fe fecd 	bl	8000a28 <__aeabi_dcmpeq>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c96:	9303      	str	r3, [sp, #12]
 8001c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <_ftoa+0x300>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff fdd5 	bl	800185a <_out_rev>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	e237      	b.n	8002124 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc0:	f7fe febc 	bl	8000a3c <__aeabi_dcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00f      	beq.n	8001cea <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <_ftoa+0x304>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	6978      	ldr	r0, [r7, #20]
 8001ce2:	f7ff fdba 	bl	800185a <_out_rev>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	e21c      	b.n	8002124 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8001cea:	f04f 32ff 	mov.w	r2, #4294967295
 8001cee:	4b9e      	ldr	r3, [pc, #632]	; (8001f68 <_ftoa+0x308>)
 8001cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf4:	f7fe fec0 	bl	8000a78 <__aeabi_dcmpgt>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01d      	beq.n	8001d3a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <_ftoa+0xac>
 8001d08:	4b98      	ldr	r3, [pc, #608]	; (8001f6c <_ftoa+0x30c>)
 8001d0a:	e000      	b.n	8001d0e <_ftoa+0xae>
 8001d0c:	4b98      	ldr	r3, [pc, #608]	; (8001f70 <_ftoa+0x310>)
 8001d0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d10:	f002 0204 	and.w	r2, r2, #4
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	d001      	beq.n	8001d1c <_ftoa+0xbc>
 8001d18:	2204      	movs	r2, #4
 8001d1a:	e000      	b.n	8001d1e <_ftoa+0xbe>
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001d20:	9103      	str	r1, [sp, #12]
 8001d22:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d24:	9102      	str	r1, [sp, #8]
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	6939      	ldr	r1, [r7, #16]
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7ff fd92 	bl	800185a <_out_rev>
 8001d36:	4603      	mov	r3, r0
 8001d38:	e1f4      	b.n	8002124 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001d3a:	a385      	add	r3, pc, #532	; (adr r3, 8001f50 <_ftoa+0x2f0>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d44:	f7fe fe98 	bl	8000a78 <__aeabi_dcmpgt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <_ftoa+0x102>
 8001d4e:	a382      	add	r3, pc, #520	; (adr r3, 8001f58 <_ftoa+0x2f8>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d58:	f7fe fe70 	bl	8000a3c <__aeabi_dcmplt>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00f      	beq.n	8001d82 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	ed97 0b00 	vldr	d0, [r7]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6939      	ldr	r1, [r7, #16]
 8001d78:	6978      	ldr	r0, [r7, #20]
 8001d7a:	f000 f9dd 	bl	8002138 <_etoa>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	e1d0      	b.n	8002124 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d94:	f7fe fe52 	bl	8000a3c <__aeabi_dcmplt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00e      	beq.n	8001dbc <_ftoa+0x15c>
    negative = true;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	f7fe fa1a 	bl	80001e8 <__aeabi_dsub>
 8001db4:	4603      	mov	r3, r0
 8001db6:	460c      	mov	r4, r1
 8001db8:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001dca:	e00b      	b.n	8001de4 <_ftoa+0x184>
    buf[len++] = '0';
 8001dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dd6:	4413      	add	r3, r2
 8001dd8:	2230      	movs	r2, #48	; 0x30
 8001dda:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de0:	3b01      	subs	r3, #1
 8001de2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de6:	2b1f      	cmp	r3, #31
 8001de8:	d802      	bhi.n	8001df0 <_ftoa+0x190>
 8001dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	d8ed      	bhi.n	8001dcc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001df4:	f7fe fe4a 	bl	8000a8c <__aeabi_d2iz>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001dfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001dfe:	f7fe fb41 	bl	8000484 <__aeabi_i2d>
 8001e02:	4603      	mov	r3, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	461a      	mov	r2, r3
 8001e08:	4623      	mov	r3, r4
 8001e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e0e:	f7fe f9eb 	bl	80001e8 <__aeabi_dsub>
 8001e12:	4603      	mov	r3, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	4618      	mov	r0, r3
 8001e18:	4621      	mov	r1, r4
 8001e1a:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <_ftoa+0x314>)
 8001e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4623      	mov	r3, r4
 8001e2a:	f7fe fb95 	bl	8000558 <__aeabi_dmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001e36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e3a:	f7fe fe4f 	bl	8000adc <__aeabi_d2uiz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001e42:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e44:	f7fe fb0e 	bl	8000464 <__aeabi_ui2d>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e54:	f7fe f9c8 	bl	80001e8 <__aeabi_dsub>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	460c      	mov	r4, r1
 8001e5c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <_ftoa+0x318>)
 8001e66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e6a:	f7fe fe05 	bl	8000a78 <__aeabi_dcmpgt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d018      	beq.n	8001ea6 <_ftoa+0x246>
    ++frac;
 8001e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e76:	3301      	adds	r3, #1
 8001e78:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001e7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e7c:	f7fe faf2 	bl	8000464 <__aeabi_ui2d>
 8001e80:	4a3c      	ldr	r2, [pc, #240]	; (8001f74 <_ftoa+0x314>)
 8001e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4623      	mov	r3, r4
 8001e90:	f7fe fde8 	bl	8000a64 <__aeabi_dcmpge>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <_ftoa+0x270>
      frac = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea4:	e014      	b.n	8001ed0 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <_ftoa+0x318>)
 8001eac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001eb0:	f7fe fdc4 	bl	8000a3c <__aeabi_dcmplt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <_ftoa+0x26a>
 8001ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ecc:	3301      	adds	r3, #1
 8001ece:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d136      	bne.n	8001f44 <_ftoa+0x2e4>
    diff = value - (double)whole;
 8001ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ed8:	f7fe fad4 	bl	8000484 <__aeabi_i2d>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee8:	f7fe f97e 	bl	80001e8 <__aeabi_dsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	461c      	mov	r4, r3
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <_ftoa+0x318>)
 8001efe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f02:	f7fe fd9b 	bl	8000a3c <__aeabi_dcmplt>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <_ftoa+0x2b0>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	461c      	mov	r4, r3
 8001f10:	b2e3      	uxtb	r3, r4
 8001f12:	f083 0301 	eor.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <_ftoa+0x2d0>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <_ftoa+0x318>)
 8001f22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f26:	f7fe fda7 	bl	8000a78 <__aeabi_dcmpgt>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d069      	beq.n	8002004 <_ftoa+0x3a4>
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8087 	beq.w	800204a <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3e:	3301      	adds	r3, #1
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
 8001f42:	e082      	b.n	800204a <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 8001f44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001f48:	e039      	b.n	8001fbe <_ftoa+0x35e>
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	00000000 	.word	0x00000000
 8001f54:	41cdcd65 	.word	0x41cdcd65
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	c1cdcd65 	.word	0xc1cdcd65
 8001f60:	0800997c 	.word	0x0800997c
 8001f64:	08009980 	.word	0x08009980
 8001f68:	7fefffff 	.word	0x7fefffff
 8001f6c:	08009988 	.word	0x08009988
 8001f70:	08009990 	.word	0x08009990
 8001f74:	08009a28 	.word	0x08009a28
 8001f78:	3fe00000 	.word	0x3fe00000
      --count;
 8001f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f84:	4b69      	ldr	r3, [pc, #420]	; (800212c <_ftoa+0x4cc>)
 8001f86:	fba3 2301 	umull	r2, r3, r3, r1
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	1aca      	subs	r2, r1, r3
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9a:	1c59      	adds	r1, r3, #1
 8001f9c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001f9e:	3230      	adds	r2, #48	; 0x30
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fae:	4a5f      	ldr	r2, [pc, #380]	; (800212c <_ftoa+0x4cc>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8001fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc0:	2b1f      	cmp	r3, #31
 8001fc2:	d9db      	bls.n	8001f7c <_ftoa+0x31c>
 8001fc4:	e00a      	b.n	8001fdc <_ftoa+0x37c>
        break;
 8001fc6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001fc8:	e008      	b.n	8001fdc <_ftoa+0x37c>
      buf[len++] = '0';
 8001fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2230      	movs	r2, #48	; 0x30
 8001fd8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fde:	2b1f      	cmp	r3, #31
 8001fe0:	d804      	bhi.n	8001fec <_ftoa+0x38c>
 8001fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fee:	2b1f      	cmp	r3, #31
 8001ff0:	d82b      	bhi.n	800204a <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 8001ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ff8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ffc:	4413      	add	r3, r2
 8001ffe:	222e      	movs	r2, #46	; 0x2e
 8002000:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002004:	e021      	b.n	800204a <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 8002006:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002008:	4b49      	ldr	r3, [pc, #292]	; (8002130 <_ftoa+0x4d0>)
 800200a:	fb83 1302 	smull	r1, r3, r3, r2
 800200e:	1099      	asrs	r1, r3, #2
 8002010:	17d3      	asrs	r3, r2, #31
 8002012:	1ac9      	subs	r1, r1, r3
 8002014:	460b      	mov	r3, r1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	1ad1      	subs	r1, r2, r3
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002026:	3230      	adds	r2, #48	; 0x30
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800202e:	440b      	add	r3, r1
 8002030:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <_ftoa+0x4d0>)
 8002038:	fb82 1203 	smull	r1, r2, r2, r3
 800203c:	1092      	asrs	r2, r2, #2
 800203e:	17db      	asrs	r3, r3, #31
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	657b      	str	r3, [r7, #84]	; 0x54
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800204a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204c:	2b1f      	cmp	r3, #31
 800204e:	d9da      	bls.n	8002006 <_ftoa+0x3a6>
 8002050:	e000      	b.n	8002054 <_ftoa+0x3f4>
      break;
 8002052:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d124      	bne.n	80020a8 <_ftoa+0x448>
 800205e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <_ftoa+0x43a>
 800206e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <_ftoa+0x420>
 8002076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <_ftoa+0x43a>
      width--;
 8002080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002082:	3b01      	subs	r3, #1
 8002084:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002086:	e008      	b.n	800209a <_ftoa+0x43a>
      buf[len++] = '0';
 8002088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800208e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002092:	4413      	add	r3, r2
 8002094:	2230      	movs	r2, #48	; 0x30
 8002096:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800209a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800209c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209e:	429a      	cmp	r2, r3
 80020a0:	d202      	bcs.n	80020a8 <_ftoa+0x448>
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	2b1f      	cmp	r3, #31
 80020a6:	d9ef      	bls.n	8002088 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020aa:	2b1f      	cmp	r3, #31
 80020ac:	d82a      	bhi.n	8002104 <_ftoa+0x4a4>
    if (negative) {
 80020ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <_ftoa+0x46a>
      buf[len++] = '-';
 80020b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020c0:	4413      	add	r3, r2
 80020c2:	222d      	movs	r2, #45	; 0x2d
 80020c4:	f803 2c48 	strb.w	r2, [r3, #-72]
 80020c8:	e01c      	b.n	8002104 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80020ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80020d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020de:	4413      	add	r3, r2
 80020e0:	222b      	movs	r2, #43	; 0x2b
 80020e2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80020e6:	e00d      	b.n	8002104 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 80020e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <_ftoa+0x4a4>
      buf[len++] = ' ';
 80020f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020fc:	4413      	add	r3, r2
 80020fe:	2220      	movs	r2, #32
 8002100:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002106:	9303      	str	r3, [sp, #12]
 8002108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	f107 0318 	add.w	r3, r7, #24
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f7ff fb9c 	bl	800185a <_out_rev>
 8002122:	4603      	mov	r3, r0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3764      	adds	r7, #100	; 0x64
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	cccccccd 	.word	0xcccccccd
 8002130:	66666667 	.word	0x66666667
 8002134:	00000000 	.word	0x00000000

08002138 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800213c:	b09d      	sub	sp, #116	; 0x74
 800213e:	af06      	add	r7, sp, #24
 8002140:	61f8      	str	r0, [r7, #28]
 8002142:	61b9      	str	r1, [r7, #24]
 8002144:	617a      	str	r2, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800214c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002154:	f7fe fc68 	bl	8000a28 <__aeabi_dcmpeq>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <_etoa+0x50>
 800215e:	f04f 32ff 	mov.w	r2, #4294967295
 8002162:	4bc9      	ldr	r3, [pc, #804]	; (8002488 <_etoa+0x350>)
 8002164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002168:	f7fe fc86 	bl	8000a78 <__aeabi_dcmpgt>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <_etoa+0x50>
 8002172:	f04f 32ff 	mov.w	r2, #4294967295
 8002176:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800217a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800217e:	f7fe fc5d 	bl	8000a3c <__aeabi_dcmplt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	ed97 0b02 	vldr	d0, [r7, #8]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	69f8      	ldr	r0, [r7, #28]
 80021a6:	f7ff fd5b 	bl	8001c60 <_ftoa>
 80021aa:	4603      	mov	r3, r0
 80021ac:	e24f      	b.n	800264e <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 80021ae:	2301      	movs	r3, #1
 80021b0:	461c      	mov	r4, r3
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	f7fe fc3d 	bl	8000a3c <__aeabi_dcmplt>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <_etoa+0x94>
 80021c8:	2300      	movs	r3, #0
 80021ca:	461c      	mov	r4, r3
 80021cc:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80021d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <_etoa+0xac>
    value = -value;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80021e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80021f0:	2306      	movs	r3, #6
 80021f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80021f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021fa:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80021fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	f04f 0400 	mov.w	r4, #0
 800220a:	0d13      	lsrs	r3, r2, #20
 800220c:	2400      	movs	r4, #0
 800220e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002212:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002218:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	4a9a      	ldr	r2, [pc, #616]	; (800248c <_etoa+0x354>)
 8002222:	ea03 0801 	and.w	r8, r3, r1
 8002226:	ea04 0902 	and.w	r9, r4, r2
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	4a98      	ldr	r2, [pc, #608]	; (8002490 <_etoa+0x358>)
 8002230:	ea48 0301 	orr.w	r3, r8, r1
 8002234:	ea49 0402 	orr.w	r4, r9, r2
 8002238:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800223c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800223e:	f7fe f921 	bl	8000484 <__aeabi_i2d>
 8002242:	a385      	add	r3, pc, #532	; (adr r3, 8002458 <_etoa+0x320>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe f986 	bl	8000558 <__aeabi_dmul>
 800224c:	4603      	mov	r3, r0
 800224e:	460c      	mov	r4, r1
 8002250:	4618      	mov	r0, r3
 8002252:	4621      	mov	r1, r4
 8002254:	a382      	add	r3, pc, #520	; (adr r3, 8002460 <_etoa+0x328>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fd ffc7 	bl	80001ec <__adddf3>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	4698      	mov	r8, r3
 8002264:	46a1      	mov	r9, r4
 8002266:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <_etoa+0x35c>)
 8002270:	f7fd ffba 	bl	80001e8 <__aeabi_dsub>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	a37a      	add	r3, pc, #488	; (adr r3, 8002468 <_etoa+0x330>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f969 	bl	8000558 <__aeabi_dmul>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	461a      	mov	r2, r3
 800228c:	4623      	mov	r3, r4
 800228e:	4640      	mov	r0, r8
 8002290:	4649      	mov	r1, r9
 8002292:	f7fd ffab 	bl	80001ec <__adddf3>
 8002296:	4603      	mov	r3, r0
 8002298:	460c      	mov	r4, r1
 800229a:	4618      	mov	r0, r3
 800229c:	4621      	mov	r1, r4
 800229e:	f7fe fbf5 	bl	8000a8c <__aeabi_d2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80022a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80022a8:	f7fe f8ec 	bl	8000484 <__aeabi_i2d>
 80022ac:	a370      	add	r3, pc, #448	; (adr r3, 8002470 <_etoa+0x338>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe f951 	bl	8000558 <__aeabi_dmul>
 80022b6:	4603      	mov	r3, r0
 80022b8:	460c      	mov	r4, r1
 80022ba:	4618      	mov	r0, r3
 80022bc:	4621      	mov	r1, r4
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <_etoa+0x360>)
 80022c4:	f7fd ff92 	bl	80001ec <__adddf3>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	4618      	mov	r0, r3
 80022ce:	4621      	mov	r1, r4
 80022d0:	f7fe fbdc 	bl	8000a8c <__aeabi_d2iz>
 80022d4:	4603      	mov	r3, r0
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80022d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80022da:	f7fe f8d3 	bl	8000484 <__aeabi_i2d>
 80022de:	a366      	add	r3, pc, #408	; (adr r3, 8002478 <_etoa+0x340>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe f938 	bl	8000558 <__aeabi_dmul>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4698      	mov	r8, r3
 80022ee:	46a1      	mov	r9, r4
 80022f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022f2:	f7fe f8c7 	bl	8000484 <__aeabi_i2d>
 80022f6:	a362      	add	r3, pc, #392	; (adr r3, 8002480 <_etoa+0x348>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe f92c 	bl	8000558 <__aeabi_dmul>
 8002300:	4603      	mov	r3, r0
 8002302:	460c      	mov	r4, r1
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	4640      	mov	r0, r8
 800230a:	4649      	mov	r1, r9
 800230c:	f7fd ff6c 	bl	80001e8 <__aeabi_dsub>
 8002310:	4603      	mov	r3, r0
 8002312:	460c      	mov	r4, r1
 8002314:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800231c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002320:	f7fe f91a 	bl	8000558 <__aeabi_dmul>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800232c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002332:	4619      	mov	r1, r3
 8002334:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	050c      	lsls	r4, r1, #20
 8002342:	2300      	movs	r3, #0
 8002344:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800234c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	f7fd ff4a 	bl	80001ec <__adddf3>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	469a      	mov	sl, r3
 800235e:	46a3      	mov	fp, r4
 8002360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800236c:	f7fd ff3c 	bl	80001e8 <__aeabi_dsub>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	e9c7 3400 	strd	r3, r4, [r7]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <_etoa+0x364>)
 800237e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002382:	f7fe fa13 	bl	80007ac <__aeabi_ddiv>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	4618      	mov	r0, r3
 800238c:	4621      	mov	r1, r4
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <_etoa+0x368>)
 8002394:	f7fd ff2a 	bl	80001ec <__adddf3>
 8002398:	4603      	mov	r3, r0
 800239a:	460c      	mov	r4, r1
 800239c:	461a      	mov	r2, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023a4:	f7fe fa02 	bl	80007ac <__aeabi_ddiv>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	4618      	mov	r0, r3
 80023ae:	4621      	mov	r1, r4
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <_etoa+0x36c>)
 80023b6:	f7fd ff19 	bl	80001ec <__adddf3>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	461a      	mov	r2, r3
 80023c0:	4623      	mov	r3, r4
 80023c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023c6:	f7fe f9f1 	bl	80007ac <__aeabi_ddiv>
 80023ca:	4603      	mov	r3, r0
 80023cc:	460c      	mov	r4, r1
 80023ce:	461a      	mov	r2, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023d6:	f7fd ff09 	bl	80001ec <__adddf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	461a      	mov	r2, r3
 80023e0:	4623      	mov	r3, r4
 80023e2:	4650      	mov	r0, sl
 80023e4:	4659      	mov	r1, fp
 80023e6:	f7fe f9e1 	bl	80007ac <__aeabi_ddiv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	4618      	mov	r0, r3
 80023f0:	4621      	mov	r1, r4
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <_etoa+0x358>)
 80023f8:	f7fd fef8 	bl	80001ec <__adddf3>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	461a      	mov	r2, r3
 8002402:	4623      	mov	r3, r4
 8002404:	4640      	mov	r0, r8
 8002406:	4649      	mov	r1, r9
 8002408:	f7fe f8a6 	bl	8000558 <__aeabi_dmul>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002414:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002420:	f7fe fb0c 	bl	8000a3c <__aeabi_dcmplt>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00d      	beq.n	8002446 <_etoa+0x30e>
    expval--;
 800242a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242c:	3b01      	subs	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002430:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <_etoa+0x368>)
 800243a:	f7fe f9b7 	bl	80007ac <__aeabi_ddiv>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
 8002442:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002448:	2b63      	cmp	r3, #99	; 0x63
 800244a:	dc2d      	bgt.n	80024a8 <_etoa+0x370>
 800244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002452:	db29      	blt.n	80024a8 <_etoa+0x370>
 8002454:	2304      	movs	r3, #4
 8002456:	e028      	b.n	80024aa <_etoa+0x372>
 8002458:	509f79fb 	.word	0x509f79fb
 800245c:	3fd34413 	.word	0x3fd34413
 8002460:	8b60c8b3 	.word	0x8b60c8b3
 8002464:	3fc68a28 	.word	0x3fc68a28
 8002468:	636f4361 	.word	0x636f4361
 800246c:	3fd287a7 	.word	0x3fd287a7
 8002470:	0979a371 	.word	0x0979a371
 8002474:	400a934f 	.word	0x400a934f
 8002478:	bbb55516 	.word	0xbbb55516
 800247c:	40026bb1 	.word	0x40026bb1
 8002480:	fefa39ef 	.word	0xfefa39ef
 8002484:	3fe62e42 	.word	0x3fe62e42
 8002488:	7fefffff 	.word	0x7fefffff
 800248c:	000fffff 	.word	0x000fffff
 8002490:	3ff00000 	.word	0x3ff00000
 8002494:	3ff80000 	.word	0x3ff80000
 8002498:	3fe00000 	.word	0x3fe00000
 800249c:	402c0000 	.word	0x402c0000
 80024a0:	40240000 	.word	0x40240000
 80024a4:	40180000 	.word	0x40180000
 80024a8:	2305      	movs	r3, #5
 80024aa:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80024ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d03d      	beq.n	8002534 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80024b8:	a367      	add	r3, pc, #412	; (adr r3, 8002658 <_etoa+0x520>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024c2:	f7fe facf 	bl	8000a64 <__aeabi_dcmpge>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d024      	beq.n	8002516 <_etoa+0x3de>
 80024cc:	a364      	add	r3, pc, #400	; (adr r3, 8002660 <_etoa+0x528>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d6:	f7fe fab1 	bl	8000a3c <__aeabi_dcmplt>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01a      	beq.n	8002516 <_etoa+0x3de>
      if ((int)prec > expval) {
 80024e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024e6:	429a      	cmp	r2, r3
 80024e8:	da07      	bge.n	80024fa <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 80024ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024f8:	e002      	b.n	8002500 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	657b      	str	r3, [r7, #84]	; 0x54
 8002514:	e00e      	b.n	8002534 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <_etoa+0x3fc>
 800251e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <_etoa+0x3fc>
        --prec;
 800252a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252e:	3b01      	subs	r3, #1
 8002530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002538:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800253a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800253e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002540:	429a      	cmp	r2, r3
 8002542:	d904      	bls.n	800254e <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	e001      	b.n	8002552 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <_etoa+0x430>
 800255e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <_etoa+0x44e>
    value /= conv.F;
 800256e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002572:	461a      	mov	r2, r3
 8002574:	4623      	mov	r3, r4
 8002576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257a:	f7fe f917 	bl	80007ac <__aeabi_ddiv>
 800257e:	4603      	mov	r3, r0
 8002580:	460c      	mov	r4, r1
 8002582:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800258a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <_etoa+0x464>
 8002592:	68bd      	ldr	r5, [r7, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800259a:	e001      	b.n	80025a0 <_etoa+0x468>
 800259c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80025a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	ec46 5b10 	vmov	d0, r5, r6
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	69f8      	ldr	r0, [r7, #28]
 80025c0:	f7ff fb4e 	bl	8001c60 <_ftoa>
 80025c4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80025c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03f      	beq.n	800264c <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80025cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <_etoa+0x4a4>
 80025d8:	2045      	movs	r0, #69	; 0x45
 80025da:	e000      	b.n	80025de <_etoa+0x4a6>
 80025dc:	2065      	movs	r0, #101	; 0x65
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	1c53      	adds	r3, r2, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	69fc      	ldr	r4, [r7, #28]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80025ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bfb8      	it	lt
 80025f2:	425b      	neglt	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	0fdb      	lsrs	r3, r3, #31
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025fe:	3a01      	subs	r2, #1
 8002600:	2105      	movs	r1, #5
 8002602:	9105      	str	r1, [sp, #20]
 8002604:	9204      	str	r2, [sp, #16]
 8002606:	2200      	movs	r2, #0
 8002608:	9203      	str	r2, [sp, #12]
 800260a:	220a      	movs	r2, #10
 800260c:	9202      	str	r2, [sp, #8]
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	9000      	str	r0, [sp, #0]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	69f8      	ldr	r0, [r7, #28]
 800261a:	f7ff fa4a 	bl	8001ab2 <_ntoa_long>
 800261e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00f      	beq.n	800264c <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800262c:	e007      	b.n	800263e <_etoa+0x506>
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	1c53      	adds	r3, r2, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	69fc      	ldr	r4, [r7, #28]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	69b9      	ldr	r1, [r7, #24]
 800263a:	2020      	movs	r0, #32
 800263c:	47a0      	blx	r4
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002648:	429a      	cmp	r2, r3
 800264a:	d8f0      	bhi.n	800262e <_etoa+0x4f6>
    }
  }
  return idx;
 800264c:	697b      	ldr	r3, [r7, #20]
}
 800264e:	4618      	mov	r0, r3
 8002650:	375c      	adds	r7, #92	; 0x5c
 8002652:	46bd      	mov	sp, r7
 8002654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002658:	eb1c432d 	.word	0xeb1c432d
 800265c:	3f1a36e2 	.word	0x3f1a36e2
 8002660:	00000000 	.word	0x00000000
 8002664:	412e8480 	.word	0x412e8480

08002668 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b0a0      	sub	sp, #128	; 0x80
 800266c:	af0a      	add	r7, sp, #40	; 0x28
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 8492 	bne.w	8002fa6 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 8002682:	4ba0      	ldr	r3, [pc, #640]	; (8002904 <_vsnprintf+0x29c>)
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002686:	f000 bc8e 	b.w	8002fa6 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b25      	cmp	r3, #37	; 0x25
 8002690:	d00d      	beq.n	80026ae <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	7818      	ldrb	r0, [r3, #0]
 8002696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002698:	1c53      	adds	r3, r2, #1
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
 800269c:	68fc      	ldr	r4, [r7, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	47a0      	blx	r4
      format++;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	603b      	str	r3, [r7, #0]
      continue;
 80026aa:	f000 bc7c 	b.w	8002fa6 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3b20      	subs	r3, #32
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d856      	bhi.n	8002770 <_vsnprintf+0x108>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <_vsnprintf+0x60>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	08002749 	.word	0x08002749
 80026cc:	08002771 	.word	0x08002771
 80026d0:	08002771 	.word	0x08002771
 80026d4:	0800275d 	.word	0x0800275d
 80026d8:	08002771 	.word	0x08002771
 80026dc:	08002771 	.word	0x08002771
 80026e0:	08002771 	.word	0x08002771
 80026e4:	08002771 	.word	0x08002771
 80026e8:	08002771 	.word	0x08002771
 80026ec:	08002771 	.word	0x08002771
 80026f0:	08002771 	.word	0x08002771
 80026f4:	08002735 	.word	0x08002735
 80026f8:	08002771 	.word	0x08002771
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002771 	.word	0x08002771
 8002704:	08002771 	.word	0x08002771
 8002708:	0800270d 	.word	0x0800270d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	657b      	str	r3, [r7, #84]	; 0x54
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	2301      	movs	r3, #1
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
 800271e:	e02a      	b.n	8002776 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
 8002732:	e020      	b.n	8002776 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	657b      	str	r3, [r7, #84]	; 0x54
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
 8002746:	e016      	b.n	8002776 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	657b      	str	r3, [r7, #84]	; 0x54
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	2301      	movs	r3, #1
 8002758:	64bb      	str	r3, [r7, #72]	; 0x48
 800275a:	e00c      	b.n	8002776 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800275c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275e:	f043 0310 	orr.w	r3, r3, #16
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	64bb      	str	r3, [r7, #72]	; 0x48
 800276e:	e002      	b.n	8002776 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002770:	2300      	movs	r3, #0
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
 8002774:	bf00      	nop
      }
    } while (n);
 8002776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002778:	2b00      	cmp	r3, #0
 800277a:	d19d      	bne.n	80026b8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f82d 	bl	80017e4 <_is_digit>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <_vsnprintf+0x134>
      width = _atoi(&format);
 8002790:	463b      	mov	r3, r7
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f83d 	bl	8001812 <_atoi>
 8002798:	6538      	str	r0, [r7, #80]	; 0x50
 800279a:	e018      	b.n	80027ce <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b2a      	cmp	r3, #42	; 0x2a
 80027a2:	d114      	bne.n	80027ce <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80027a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	da07      	bge.n	80027c4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	425b      	negs	r3, r3
 80027c0:	653b      	str	r3, [r7, #80]	; 0x50
 80027c2:	e001      	b.n	80027c8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b2e      	cmp	r3, #46	; 0x2e
 80027d8:	d124      	bne.n	8002824 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fff9 	bl	80017e4 <_is_digit>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80027f8:	463b      	mov	r3, r7
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f809 	bl	8001812 <_atoi>
 8002800:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002802:	e00f      	b.n	8002824 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b2a      	cmp	r3, #42	; 0x2a
 800280a:	d10b      	bne.n	8002824 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800280c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800280e:	1d1a      	adds	r2, r3, #4
 8002810:	66ba      	str	r2, [r7, #104]	; 0x68
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3b68      	subs	r3, #104	; 0x68
 800282a:	2b12      	cmp	r3, #18
 800282c:	d866      	bhi.n	80028fc <_vsnprintf+0x294>
 800282e:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <_vsnprintf+0x1cc>)
 8002830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002834:	080028a7 	.word	0x080028a7
 8002838:	080028fd 	.word	0x080028fd
 800283c:	080028dd 	.word	0x080028dd
 8002840:	080028fd 	.word	0x080028fd
 8002844:	08002881 	.word	0x08002881
 8002848:	080028fd 	.word	0x080028fd
 800284c:	080028fd 	.word	0x080028fd
 8002850:	080028fd 	.word	0x080028fd
 8002854:	080028fd 	.word	0x080028fd
 8002858:	080028fd 	.word	0x080028fd
 800285c:	080028fd 	.word	0x080028fd
 8002860:	080028fd 	.word	0x080028fd
 8002864:	080028cd 	.word	0x080028cd
 8002868:	080028fd 	.word	0x080028fd
 800286c:	080028fd 	.word	0x080028fd
 8002870:	080028fd 	.word	0x080028fd
 8002874:	080028fd 	.word	0x080028fd
 8002878:	080028fd 	.word	0x080028fd
 800287c:	080028ed 	.word	0x080028ed
      case 'l' :
        flags |= FLAGS_LONG;
 8002880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b6c      	cmp	r3, #108	; 0x6c
 8002894:	d134      	bne.n	8002900 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800289c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	603b      	str	r3, [r7, #0]
        }
        break;
 80028a4:	e02c      	b.n	8002900 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 80028a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b68      	cmp	r3, #104	; 0x68
 80028ba:	d125      	bne.n	8002908 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	603b      	str	r3, [r7, #0]
        }
        break;
 80028ca:	e01d      	b.n	8002908 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80028cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	603b      	str	r3, [r7, #0]
        break;
 80028da:	e016      	b.n	800290a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	603b      	str	r3, [r7, #0]
        break;
 80028ea:	e00e      	b.n	800290a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
        break;
 80028fa:	e006      	b.n	800290a <_vsnprintf+0x2a2>
      default :
        break;
 80028fc:	bf00      	nop
 80028fe:	e004      	b.n	800290a <_vsnprintf+0x2a2>
        break;
 8002900:	bf00      	nop
 8002902:	e002      	b.n	800290a <_vsnprintf+0x2a2>
 8002904:	08001769 	.word	0x08001769
        break;
 8002908:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	3b25      	subs	r3, #37	; 0x25
 8002910:	2b53      	cmp	r3, #83	; 0x53
 8002912:	f200 833b 	bhi.w	8002f8c <_vsnprintf+0x924>
 8002916:	a201      	add	r2, pc, #4	; (adr r2, 800291c <_vsnprintf+0x2b4>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	08002f75 	.word	0x08002f75
 8002920:	08002f8d 	.word	0x08002f8d
 8002924:	08002f8d 	.word	0x08002f8d
 8002928:	08002f8d 	.word	0x08002f8d
 800292c:	08002f8d 	.word	0x08002f8d
 8002930:	08002f8d 	.word	0x08002f8d
 8002934:	08002f8d 	.word	0x08002f8d
 8002938:	08002f8d 	.word	0x08002f8d
 800293c:	08002f8d 	.word	0x08002f8d
 8002940:	08002f8d 	.word	0x08002f8d
 8002944:	08002f8d 	.word	0x08002f8d
 8002948:	08002f8d 	.word	0x08002f8d
 800294c:	08002f8d 	.word	0x08002f8d
 8002950:	08002f8d 	.word	0x08002f8d
 8002954:	08002f8d 	.word	0x08002f8d
 8002958:	08002f8d 	.word	0x08002f8d
 800295c:	08002f8d 	.word	0x08002f8d
 8002960:	08002f8d 	.word	0x08002f8d
 8002964:	08002f8d 	.word	0x08002f8d
 8002968:	08002f8d 	.word	0x08002f8d
 800296c:	08002f8d 	.word	0x08002f8d
 8002970:	08002f8d 	.word	0x08002f8d
 8002974:	08002f8d 	.word	0x08002f8d
 8002978:	08002f8d 	.word	0x08002f8d
 800297c:	08002f8d 	.word	0x08002f8d
 8002980:	08002f8d 	.word	0x08002f8d
 8002984:	08002f8d 	.word	0x08002f8d
 8002988:	08002f8d 	.word	0x08002f8d
 800298c:	08002f8d 	.word	0x08002f8d
 8002990:	08002f8d 	.word	0x08002f8d
 8002994:	08002f8d 	.word	0x08002f8d
 8002998:	08002f8d 	.word	0x08002f8d
 800299c:	08002d45 	.word	0x08002d45
 80029a0:	08002cf9 	.word	0x08002cf9
 80029a4:	08002d45 	.word	0x08002d45
 80029a8:	08002f8d 	.word	0x08002f8d
 80029ac:	08002f8d 	.word	0x08002f8d
 80029b0:	08002f8d 	.word	0x08002f8d
 80029b4:	08002f8d 	.word	0x08002f8d
 80029b8:	08002f8d 	.word	0x08002f8d
 80029bc:	08002f8d 	.word	0x08002f8d
 80029c0:	08002f8d 	.word	0x08002f8d
 80029c4:	08002f8d 	.word	0x08002f8d
 80029c8:	08002f8d 	.word	0x08002f8d
 80029cc:	08002f8d 	.word	0x08002f8d
 80029d0:	08002f8d 	.word	0x08002f8d
 80029d4:	08002f8d 	.word	0x08002f8d
 80029d8:	08002f8d 	.word	0x08002f8d
 80029dc:	08002f8d 	.word	0x08002f8d
 80029e0:	08002f8d 	.word	0x08002f8d
 80029e4:	08002f8d 	.word	0x08002f8d
 80029e8:	08002a6d 	.word	0x08002a6d
 80029ec:	08002f8d 	.word	0x08002f8d
 80029f0:	08002f8d 	.word	0x08002f8d
 80029f4:	08002f8d 	.word	0x08002f8d
 80029f8:	08002f8d 	.word	0x08002f8d
 80029fc:	08002f8d 	.word	0x08002f8d
 8002a00:	08002f8d 	.word	0x08002f8d
 8002a04:	08002f8d 	.word	0x08002f8d
 8002a08:	08002f8d 	.word	0x08002f8d
 8002a0c:	08002f8d 	.word	0x08002f8d
 8002a10:	08002a6d 	.word	0x08002a6d
 8002a14:	08002db1 	.word	0x08002db1
 8002a18:	08002a6d 	.word	0x08002a6d
 8002a1c:	08002d45 	.word	0x08002d45
 8002a20:	08002cf9 	.word	0x08002cf9
 8002a24:	08002d45 	.word	0x08002d45
 8002a28:	08002f8d 	.word	0x08002f8d
 8002a2c:	08002a6d 	.word	0x08002a6d
 8002a30:	08002f8d 	.word	0x08002f8d
 8002a34:	08002f8d 	.word	0x08002f8d
 8002a38:	08002f8d 	.word	0x08002f8d
 8002a3c:	08002f8d 	.word	0x08002f8d
 8002a40:	08002f8d 	.word	0x08002f8d
 8002a44:	08002a6d 	.word	0x08002a6d
 8002a48:	08002ee9 	.word	0x08002ee9
 8002a4c:	08002f8d 	.word	0x08002f8d
 8002a50:	08002f8d 	.word	0x08002f8d
 8002a54:	08002e25 	.word	0x08002e25
 8002a58:	08002f8d 	.word	0x08002f8d
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002f8d 	.word	0x08002f8d
 8002a64:	08002f8d 	.word	0x08002f8d
 8002a68:	08002a6d 	.word	0x08002a6d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b78      	cmp	r3, #120	; 0x78
 8002a72:	d003      	beq.n	8002a7c <_vsnprintf+0x414>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b58      	cmp	r3, #88	; 0x58
 8002a7a:	d102      	bne.n	8002a82 <_vsnprintf+0x41a>
          base = 16U;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a80:	e013      	b.n	8002aaa <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b6f      	cmp	r3, #111	; 0x6f
 8002a88:	d102      	bne.n	8002a90 <_vsnprintf+0x428>
          base =  8U;
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a8e:	e00c      	b.n	8002aaa <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b62      	cmp	r3, #98	; 0x62
 8002a96:	d102      	bne.n	8002a9e <_vsnprintf+0x436>
          base =  2U;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9c:	e005      	b.n	8002aaa <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b58      	cmp	r3, #88	; 0x58
 8002ab0:	d103      	bne.n	8002aba <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b69      	cmp	r3, #105	; 0x69
 8002ac0:	d007      	beq.n	8002ad2 <_vsnprintf+0x46a>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d003      	beq.n	8002ad2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	f023 030c 	bic.w	r3, r3, #12
 8002ad0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b69      	cmp	r3, #105	; 0x69
 8002aea:	d004      	beq.n	8002af6 <_vsnprintf+0x48e>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	f040 808d 	bne.w	8002c10 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02e      	beq.n	8002b5e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b02:	3307      	adds	r3, #7
 8002b04:	f023 0307 	bic.w	r3, r3, #7
 8002b08:	f103 0208 	add.w	r2, r3, #8
 8002b0c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b12:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002b16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f174 0200 	sbcs.w	r2, r4, #0
 8002b20:	da02      	bge.n	8002b28 <_vsnprintf+0x4c0>
 8002b22:	425b      	negs	r3, r3
 8002b24:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	0fdb      	lsrs	r3, r3, #31
 8002b30:	b2d8      	uxtb	r0, r3
 8002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002b3a:	9508      	str	r5, [sp, #32]
 8002b3c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002b3e:	9507      	str	r5, [sp, #28]
 8002b40:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002b42:	9506      	str	r5, [sp, #24]
 8002b44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002b48:	9002      	str	r0, [sp, #8]
 8002b4a:	e9cd 1200 	strd	r1, r2, [sp]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff f813 	bl	8001b80 <_ntoa_long_long>
 8002b5a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002b5c:	e0c8      	b.n	8002cf0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01e      	beq.n	8002ba6 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8002b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6a:	1d1a      	adds	r2, r3, #4
 8002b6c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bfb8      	it	lt
 8002b78:	425b      	neglt	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	0fdb      	lsrs	r3, r3, #31
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b84:	9205      	str	r2, [sp, #20]
 8002b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b88:	9204      	str	r2, [sp, #16]
 8002b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b8c:	9203      	str	r2, [sp, #12]
 8002b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b90:	9202      	str	r2, [sp, #8]
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	9100      	str	r1, [sp, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7fe ff88 	bl	8001ab2 <_ntoa_long>
 8002ba2:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002ba4:	e0a4      	b.n	8002cf0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <_vsnprintf+0x554>
 8002bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb2:	1d1a      	adds	r2, r3, #4
 8002bb4:	66ba      	str	r2, [r7, #104]	; 0x68
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e00e      	b.n	8002bda <_vsnprintf+0x572>
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <_vsnprintf+0x56a>
 8002bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc8:	1d1a      	adds	r2, r3, #4
 8002bca:	66ba      	str	r2, [r7, #104]	; 0x68
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	e003      	b.n	8002bda <_vsnprintf+0x572>
 8002bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bfb8      	it	lt
 8002be2:	425b      	neglt	r3, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	0fdb      	lsrs	r3, r3, #31
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bee:	9205      	str	r2, [sp, #20]
 8002bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bf2:	9204      	str	r2, [sp, #16]
 8002bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf6:	9203      	str	r2, [sp, #12]
 8002bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bfa:	9202      	str	r2, [sp, #8]
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	9100      	str	r1, [sp, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7fe ff53 	bl	8001ab2 <_ntoa_long>
 8002c0c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002c0e:	e06f      	b.n	8002cf0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d020      	beq.n	8002c5c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	f103 0208 	add.w	r2, r3, #8
 8002c26:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c2e:	4611      	mov	r1, r2
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c36:	9008      	str	r0, [sp, #32]
 8002c38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c3a:	9007      	str	r0, [sp, #28]
 8002c3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c3e:	9006      	str	r0, [sp, #24]
 8002c40:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002c44:	2200      	movs	r2, #0
 8002c46:	9202      	str	r2, [sp, #8]
 8002c48:	e9cd 3400 	strd	r3, r4, [sp]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7fe ff94 	bl	8001b80 <_ntoa_long_long>
 8002c58:	6478      	str	r0, [r7, #68]	; 0x44
 8002c5a:	e049      	b.n	8002cf0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c68:	1d1a      	adds	r2, r3, #4
 8002c6a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c70:	9205      	str	r2, [sp, #20]
 8002c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c74:	9204      	str	r2, [sp, #16]
 8002c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c78:	9203      	str	r2, [sp, #12]
 8002c7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c7c:	9202      	str	r2, [sp, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	9201      	str	r2, [sp, #4]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7fe ff11 	bl	8001ab2 <_ntoa_long>
 8002c90:	6478      	str	r0, [r7, #68]	; 0x44
 8002c92:	e02d      	b.n	8002cf0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <_vsnprintf+0x642>
 8002c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00e      	b.n	8002cc8 <_vsnprintf+0x660>
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <_vsnprintf+0x658>
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	e003      	b.n	8002cc8 <_vsnprintf+0x660>
 8002cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc2:	1d1a      	adds	r2, r3, #4
 8002cc4:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ccc:	9305      	str	r3, [sp, #20]
 8002cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd0:	9304      	str	r3, [sp, #16]
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd4:	9303      	str	r3, [sp, #12]
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7fe fee2 	bl	8001ab2 <_ntoa_long>
 8002cee:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	603b      	str	r3, [r7, #0]
        break;
 8002cf6:	e156      	b.n	8002fa6 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b46      	cmp	r3, #70	; 0x46
 8002cfe:	d103      	bne.n	8002d08 <_vsnprintf+0x6a0>
 8002d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d02:	f043 0320 	orr.w	r3, r3, #32
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d0a:	3307      	adds	r3, #7
 8002d0c:	f023 0307 	bic.w	r3, r3, #7
 8002d10:	f103 0208 	add.w	r2, r3, #8
 8002d14:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d16:	ed93 7b00 	vldr	d7, [r3]
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	eeb0 0a47 	vmov.f32	s0, s14
 8002d2a:	eef0 0a67 	vmov.f32	s1, s15
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7fe ff93 	bl	8001c60 <_ftoa>
 8002d3a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	603b      	str	r3, [r7, #0]
        break;
 8002d42:	e130      	b.n	8002fa6 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b67      	cmp	r3, #103	; 0x67
 8002d4a:	d003      	beq.n	8002d54 <_vsnprintf+0x6ec>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b47      	cmp	r3, #71	; 0x47
 8002d52:	d103      	bne.n	8002d5c <_vsnprintf+0x6f4>
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b45      	cmp	r3, #69	; 0x45
 8002d62:	d003      	beq.n	8002d6c <_vsnprintf+0x704>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b47      	cmp	r3, #71	; 0x47
 8002d6a:	d103      	bne.n	8002d74 <_vsnprintf+0x70c>
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	f043 0320 	orr.w	r3, r3, #32
 8002d72:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d76:	3307      	adds	r3, #7
 8002d78:	f023 0307 	bic.w	r3, r3, #7
 8002d7c:	f103 0208 	add.w	r2, r3, #8
 8002d80:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d82:	ed93 7b00 	vldr	d7, [r3]
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	eeb0 0a47 	vmov.f32	s0, s14
 8002d96:	eef0 0a67 	vmov.f32	s1, s15
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff f9c9 	bl	8002138 <_etoa>
 8002da6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	603b      	str	r3, [r7, #0]
        break;
 8002dae:	e0fa      	b.n	8002fa6 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <_vsnprintf+0x774>
          while (l++ < width) {
 8002dbe:	e007      	b.n	8002dd0 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 8002dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc2:	1c53      	adds	r3, r2, #1
 8002dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc6:	68fc      	ldr	r4, [r7, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	2020      	movs	r0, #32
 8002dce:	47a0      	blx	r4
          while (l++ < width) {
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f1      	bhi.n	8002dc0 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dde:	1d1a      	adds	r2, r3, #4
 8002de0:	66ba      	str	r2, [r7, #104]	; 0x68
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b2d8      	uxtb	r0, r3
 8002de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de8:	1c53      	adds	r3, r2, #1
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
 8002dec:	68fc      	ldr	r4, [r7, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00e      	beq.n	8002e1c <_vsnprintf+0x7b4>
          while (l++ < width) {
 8002dfe:	e007      	b.n	8002e10 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8002e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e02:	1c53      	adds	r3, r2, #1
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
 8002e06:	68fc      	ldr	r4, [r7, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	2020      	movs	r0, #32
 8002e0e:	47a0      	blx	r4
          while (l++ < width) {
 8002e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f1      	bhi.n	8002e00 <_vsnprintf+0x798>
          }
        }
        format++;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	603b      	str	r3, [r7, #0]
        break;
 8002e22:	e0c0      	b.n	8002fa6 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <_vsnprintf+0x7d0>
 8002e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e36:	e001      	b.n	8002e3c <_vsnprintf+0x7d4>
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e40:	f7fe fcb3 	bl	80017aa <_strnlen_s>
 8002e44:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8002e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf28      	it	cs
 8002e58:	4613      	movcs	r3, r2
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11a      	bne.n	8002e9c <_vsnprintf+0x834>
          while (l++ < width) {
 8002e66:	e007      	b.n	8002e78 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8002e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e6a:	1c53      	adds	r3, r2, #1
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6e:	68fc      	ldr	r4, [r7, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	2020      	movs	r0, #32
 8002e76:	47a0      	blx	r4
          while (l++ < width) {
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	637a      	str	r2, [r7, #52]	; 0x34
 8002e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f1      	bhi.n	8002e68 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002e84:	e00a      	b.n	8002e9c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e8c:	7818      	ldrb	r0, [r3, #0]
 8002e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e90:	1c53      	adds	r3, r2, #1
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
 8002e94:	68fc      	ldr	r4, [r7, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <_vsnprintf+0x850>
 8002ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0eb      	beq.n	8002e86 <_vsnprintf+0x81e>
 8002eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e6      	bne.n	8002e86 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <_vsnprintf+0x878>
          while (l++ < width) {
 8002ec2:	e007      	b.n	8002ed4 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 8002ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec6:	1c53      	adds	r3, r2, #1
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eca:	68fc      	ldr	r4, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	2020      	movs	r0, #32
 8002ed2:	47a0      	blx	r4
          while (l++ < width) {
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	637a      	str	r2, [r7, #52]	; 0x34
 8002eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f1      	bhi.n	8002ec4 <_vsnprintf+0x85c>
          }
        }
        format++;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	603b      	str	r3, [r7, #0]
        break;
 8002ee6:	e05e      	b.n	8002fa6 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eee:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002ef2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8002efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01d      	beq.n	8002f3e <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f04:	1d1a      	adds	r2, r3, #4
 8002f06:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 0400 	mov.w	r4, #0
 8002f0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f10:	9208      	str	r2, [sp, #32]
 8002f12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f14:	9207      	str	r2, [sp, #28]
 8002f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f18:	9206      	str	r2, [sp, #24]
 8002f1a:	f04f 0110 	mov.w	r1, #16
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002f26:	2200      	movs	r2, #0
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	e9cd 3400 	strd	r3, r4, [sp]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7fe fe23 	bl	8001b80 <_ntoa_long_long>
 8002f3a:	6478      	str	r0, [r7, #68]	; 0x44
 8002f3c:	e016      	b.n	8002f6c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f40:	1d1a      	adds	r2, r3, #4
 8002f42:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4a:	9305      	str	r3, [sp, #20]
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	9304      	str	r3, [sp, #16]
 8002f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f52:	9303      	str	r3, [sp, #12]
 8002f54:	2310      	movs	r3, #16
 8002f56:	9302      	str	r3, [sp, #8]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7fe fda4 	bl	8001ab2 <_ntoa_long>
 8002f6a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	603b      	str	r3, [r7, #0]
        break;
 8002f72:	e018      	b.n	8002fa6 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f76:	1c53      	adds	r3, r2, #1
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7a:	68fc      	ldr	r4, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	2025      	movs	r0, #37	; 0x25
 8002f82:	47a0      	blx	r4
        format++;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	603b      	str	r3, [r7, #0]
        break;
 8002f8a:	e00c      	b.n	8002fa6 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	7818      	ldrb	r0, [r3, #0]
 8002f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f92:	1c53      	adds	r3, r2, #1
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
 8002f96:	68fc      	ldr	r4, [r7, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	47a0      	blx	r4
        format++;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	603b      	str	r3, [r7, #0]
        break;
 8002fa4:	bf00      	nop
  while (*format)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f47f ab6d 	bne.w	800268a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002fb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d302      	bcc.n	8002fbe <_vsnprintf+0x956>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	1e5a      	subs	r2, r3, #1
 8002fbc:	e000      	b.n	8002fc0 <_vsnprintf+0x958>
 8002fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc0:	68fc      	ldr	r4, [r7, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3758      	adds	r7, #88	; 0x58
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bdb0      	pop	{r4, r5, r7, pc}

08002fd4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002fd4:	b40f      	push	{r0, r1, r2, r3}
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002fe2:	1d39      	adds	r1, r7, #4
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
 8002fee:	4806      	ldr	r0, [pc, #24]	; (8003008 <printf_+0x34>)
 8002ff0:	f7ff fb3a 	bl	8002668 <_vsnprintf>
 8002ff4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003002:	b004      	add	sp, #16
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	08001785 	.word	0x08001785

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_MspInit+0x54>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_MspInit+0x54>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_MspInit+0x54>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_MspInit+0x54>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_MspInit+0x54>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_MspInit+0x54>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	210f      	movs	r1, #15
 800304e:	f06f 0001 	mvn.w	r0, #1
 8003052:	f000 fa37 	bl	80034c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003074:	2200      	movs	r2, #0
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	2019      	movs	r0, #25
 800307a:	f000 fa23 	bl	80034c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800307e:	2019      	movs	r0, #25
 8003080:	f000 fa3c 	bl	80034fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_InitTick+0xa0>)
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_InitTick+0xa0>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6453      	str	r3, [r2, #68]	; 0x44
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_InitTick+0xa0>)
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030a0:	f107 0210 	add.w	r2, r7, #16
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 f818 	bl	80050e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80030b0:	f002 f802 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 80030b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <HAL_InitTick+0xa4>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0c9b      	lsrs	r3, r3, #18
 80030c0:	3b01      	subs	r3, #1
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_InitTick+0xa8>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <HAL_InitTick+0xac>)
 80030c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_InitTick+0xa8>)
 80030cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_InitTick+0xa8>)
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_InitTick+0xa8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_InitTick+0xa8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80030e4:	4809      	ldr	r0, [pc, #36]	; (800310c <HAL_InitTick+0xa8>)
 80030e6:	f002 f82d 	bl	8005144 <HAL_TIM_Base_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <HAL_InitTick+0xa8>)
 80030f2:	f002 f85c 	bl	80051ae <HAL_TIM_Base_Start_IT>
 80030f6:	4603      	mov	r3, r0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3730      	adds	r7, #48	; 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	431bde83 	.word	0x431bde83
 800310c:	2000499c 	.word	0x2000499c
 8003110:	40010000 	.word	0x40010000

08003114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <NMI_Handler+0x4>

0800311a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311e:	e7fe      	b.n	800311e <HardFault_Handler+0x4>

08003120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <MemManage_Handler+0x4>

08003126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800312a:	e7fe      	b.n	800312a <BusFault_Handler+0x4>

0800312c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <UsageFault_Handler+0x4>

08003132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003146:	f002 f856 	bl	80051f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000499c 	.word	0x2000499c

08003154 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003158:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800315c:	f000 fb92 	bl	8003884 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003160:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003164:	f000 fb8e 	bl	8003884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}

0800316c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <SystemInit+0x28>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	4a07      	ldr	r2, [pc, #28]	; (8003194 <SystemInit+0x28>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <SystemInit+0x28>)
 8003182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003186:	609a      	str	r2, [r3, #8]
#endif
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 800319e:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <MX_USART2_UART_Init+0x50>)
 80031a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031be:	220c      	movs	r2, #12
 80031c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <MX_USART2_UART_Init+0x4c>)
 80031d0:	f002 f9d6 	bl	8005580 <HAL_UART_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031da:	f7fe fac1 	bl	8001760 <Error_Handler>
  }

}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200049dc 	.word	0x200049dc
 80031e8:	40004400 	.word	0x40004400

080031ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_UART_MspInit+0x84>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12b      	bne.n	8003266 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_UART_MspInit+0x88>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <HAL_UART_MspInit+0x88>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_UART_MspInit+0x88>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_UART_MspInit+0x88>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_UART_MspInit+0x88>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_UART_MspInit+0x88>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003246:	230c      	movs	r3, #12
 8003248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003256:	2307      	movs	r3, #7
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <HAL_UART_MspInit+0x8c>)
 8003262:	f000 f959 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003266:	bf00      	nop
 8003268:	3728      	adds	r7, #40	; 0x28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40004400 	.word	0x40004400
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000

0800327c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800327c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003282:	e003      	b.n	800328c <LoopCopyDataInit>

08003284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800328a:	3104      	adds	r1, #4

0800328c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800328c:	480b      	ldr	r0, [pc, #44]	; (80032bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003294:	d3f6      	bcc.n	8003284 <CopyDataInit>
  ldr  r2, =_sbss
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003298:	e002      	b.n	80032a0 <LoopFillZerobss>

0800329a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800329a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800329c:	f842 3b04 	str.w	r3, [r2], #4

080032a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032a4:	d3f9      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a6:	f7ff ff61 	bl	800316c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032aa:	f006 fad7 	bl	800985c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ae:	f7fe f9b9 	bl	8001624 <main>
  bx  lr    
 80032b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032b8:	08009aa0 	.word	0x08009aa0
  ldr  r0, =_sdata
 80032bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032c0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80032c4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80032c8:	20004a60 	.word	0x20004a60

080032cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032cc:	e7fe      	b.n	80032cc <ADC_IRQHandler>
	...

080032d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_Init+0x40>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_Init+0x40>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_Init+0x40>)
 80032e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_Init+0x40>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 f8d8 	bl	80034ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7ff feb0 	bl	8003064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003304:	f7ff fe82 	bl	800300c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00

08003314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x20>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x24>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_IncTick+0x24>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000008 	.word	0x20000008
 8003338:	20004a1c 	.word	0x20004a1c

0800333c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTick;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_GetTick+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20004a1c 	.word	0x20004a1c

08003354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800337c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ff4c 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d6:	f7ff ff61 	bl	800339c <__NVIC_GetPriorityGrouping>
 80034da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	6978      	ldr	r0, [r7, #20]
 80034e2:	f7ff ffb1 	bl	8003448 <NVIC_EncodePriority>
 80034e6:	4602      	mov	r2, r0
 80034e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff80 	bl	80033f4 <__NVIC_SetPriority>
}
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff54 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e159      	b.n	80037e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003534:	2201      	movs	r2, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 8148 	bne.w	80037e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00b      	beq.n	8003572 <HAL_GPIO_Init+0x5a>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d007      	beq.n	8003572 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003566:	2b11      	cmp	r3, #17
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b12      	cmp	r3, #18
 8003570:	d130      	bne.n	80035d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0xfc>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b12      	cmp	r3, #18
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a2 	beq.w	80037e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b56      	ldr	r3, [pc, #344]	; (80037fc <HAL_GPIO_Init+0x2e4>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a55      	ldr	r2, [pc, #340]	; (80037fc <HAL_GPIO_Init+0x2e4>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44
 80036ae:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_GPIO_Init+0x2e4>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ba:	4a51      	ldr	r2, [pc, #324]	; (8003800 <HAL_GPIO_Init+0x2e8>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a48      	ldr	r2, [pc, #288]	; (8003804 <HAL_GPIO_Init+0x2ec>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d019      	beq.n	800371a <HAL_GPIO_Init+0x202>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a47      	ldr	r2, [pc, #284]	; (8003808 <HAL_GPIO_Init+0x2f0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_GPIO_Init+0x1fe>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a46      	ldr	r2, [pc, #280]	; (800380c <HAL_GPIO_Init+0x2f4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00d      	beq.n	8003712 <HAL_GPIO_Init+0x1fa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_GPIO_Init+0x2f8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <HAL_GPIO_Init+0x1f6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a44      	ldr	r2, [pc, #272]	; (8003814 <HAL_GPIO_Init+0x2fc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_GPIO_Init+0x1f2>
 8003706:	2304      	movs	r3, #4
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x204>
 800370a:	2307      	movs	r3, #7
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x204>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x204>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x204>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x204>
 800371a:	2300      	movs	r3, #0
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372c:	4934      	ldr	r1, [pc, #208]	; (8003800 <HAL_GPIO_Init+0x2e8>)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_GPIO_Init+0x300>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800375e:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <HAL_GPIO_Init+0x300>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_GPIO_Init+0x300>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003788:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_GPIO_Init+0x300>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_GPIO_Init+0x300>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_GPIO_Init+0x300>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_GPIO_Init+0x300>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <HAL_GPIO_Init+0x300>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	f67f aea2 	bls.w	8003534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	3724      	adds	r7, #36	; 0x24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40013c00 	.word	0x40013c00

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	041a      	lsls	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	887b      	ldrh	r3, [r7, #2]
 8003860:	401a      	ands	r2, r3
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	429a      	cmp	r2, r3
 8003866:	d104      	bne.n	8003872 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	041a      	lsls	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003870:	e002      	b.n	8003878 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fd9c 	bl	80013e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40013c00 	.word	0x40013c00

080038b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e11f      	b.n	8003b06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fe5a 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003918:	f001 fbba 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 800391c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a7b      	ldr	r2, [pc, #492]	; (8003b10 <HAL_I2C_Init+0x25c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d807      	bhi.n	8003938 <HAL_I2C_Init+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a7a      	ldr	r2, [pc, #488]	; (8003b14 <HAL_I2C_Init+0x260>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e006      	b.n	8003946 <HAL_I2C_Init+0x92>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a77      	ldr	r2, [pc, #476]	; (8003b18 <HAL_I2C_Init+0x264>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0db      	b.n	8003b06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a72      	ldr	r2, [pc, #456]	; (8003b1c <HAL_I2C_Init+0x268>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9b      	lsrs	r3, r3, #18
 8003958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a64      	ldr	r2, [pc, #400]	; (8003b10 <HAL_I2C_Init+0x25c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d802      	bhi.n	8003988 <HAL_I2C_Init+0xd4>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	e009      	b.n	800399c <HAL_I2C_Init+0xe8>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a63      	ldr	r2, [pc, #396]	; (8003b20 <HAL_I2C_Init+0x26c>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	3301      	adds	r3, #1
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4956      	ldr	r1, [pc, #344]	; (8003b10 <HAL_I2C_Init+0x25c>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d80d      	bhi.n	80039d8 <HAL_I2C_Init+0x124>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e59      	subs	r1, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	bf38      	it	cc
 80039d4:	2304      	movcc	r3, #4
 80039d6:	e04f      	b.n	8003a78 <HAL_I2C_Init+0x1c4>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d111      	bne.n	8003a04 <HAL_I2C_Init+0x150>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e58      	subs	r0, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	440b      	add	r3, r1
 80039ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f2:	3301      	adds	r3, #1
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e012      	b.n	8003a2a <HAL_I2C_Init+0x176>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	0099      	lsls	r1, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x17e>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e022      	b.n	8003a78 <HAL_I2C_Init+0x1c4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10e      	bne.n	8003a58 <HAL_I2C_Init+0x1a4>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1e58      	subs	r0, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6859      	ldr	r1, [r3, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	440b      	add	r3, r1
 8003a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	e00f      	b.n	8003a78 <HAL_I2C_Init+0x1c4>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	0099      	lsls	r1, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	6809      	ldr	r1, [r1, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6911      	ldr	r1, [r2, #16]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	000186a0 	.word	0x000186a0
 8003b14:	001e847f 	.word	0x001e847f
 8003b18:	003d08ff 	.word	0x003d08ff
 8003b1c:	431bde83 	.word	0x431bde83
 8003b20:	10624dd3 	.word	0x10624dd3

08003b24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b3e:	f7ff fbfd 	bl	800333c <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	f040 80d9 	bne.w	8003d04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2319      	movs	r3, #25
 8003b58:	2201      	movs	r2, #1
 8003b5a:	496d      	ldr	r1, [pc, #436]	; (8003d10 <HAL_I2C_Mem_Write+0x1ec>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fc7f 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e0cc      	b.n	8003d06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_I2C_Mem_Write+0x56>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0c5      	b.n	8003d06 <HAL_I2C_Mem_Write+0x1e2>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d007      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2221      	movs	r2, #33	; 0x21
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a4d      	ldr	r2, [pc, #308]	; (8003d14 <HAL_I2C_Mem_Write+0x1f0>)
 8003be0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003be2:	88f8      	ldrh	r0, [r7, #6]
 8003be4:	893a      	ldrh	r2, [r7, #8]
 8003be6:	8979      	ldrh	r1, [r7, #10]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fab6 	bl	8004164 <I2C_RequestMemoryWrite>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d052      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e081      	b.n	8003d06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fd00 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d107      	bne.n	8003c2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06b      	b.n	8003d06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_I2C_Mem_Write+0x180>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1aa      	bne.n	8003c02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fcec 	bl	800468e <I2C_WaitOnBTFFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d107      	bne.n	8003cd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e016      	b.n	8003d06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	00100002 	.word	0x00100002
 8003d14:	ffff0000 	.word	0xffff0000

08003d18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d32:	f7ff fb03 	bl	800333c <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 8208 	bne.w	8004156 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	497b      	ldr	r1, [pc, #492]	; (8003f3c <HAL_I2C_Mem_Read+0x224>)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fb85 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e1fb      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Mem_Read+0x56>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e1f4      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2222      	movs	r2, #34	; 0x22
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a5b      	ldr	r2, [pc, #364]	; (8003f40 <HAL_I2C_Mem_Read+0x228>)
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd6:	88f8      	ldrh	r0, [r7, #6]
 8003dd8:	893a      	ldrh	r2, [r7, #8]
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4603      	mov	r3, r0
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa52 	bl	8004290 <I2C_RequestMemoryRead>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1b0      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e184      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d11b      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e164      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	e144      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ebc:	e138      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	f200 80f1 	bhi.w	80040aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d123      	bne.n	8003f18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fc1b 	bl	8004710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e139      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f16:	e10b      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d14e      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2200      	movs	r2, #0
 8003f28:	4906      	ldr	r1, [pc, #24]	; (8003f44 <HAL_I2C_Mem_Read+0x22c>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa98 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e10e      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
 8003f3a:	bf00      	nop
 8003f3c:	00100002 	.word	0x00100002
 8003f40:	ffff0000 	.word	0xffff0000
 8003f44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fbc:	e0b8      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4966      	ldr	r1, [pc, #408]	; (8004160 <HAL_I2C_Mem_Read+0x448>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fa49 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0bf      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2200      	movs	r2, #0
 8004022:	494f      	ldr	r1, [pc, #316]	; (8004160 <HAL_I2C_Mem_Read+0x448>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fa1b 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e091      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a8:	e042      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fb2e 	bl	8004710 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e04c      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d118      	bne.n	8004130 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f aec2 	bne.w	8003ebe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00010004 	.word	0x00010004

08004164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	460b      	mov	r3, r1
 8004178:	813b      	strh	r3, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2200      	movs	r2, #0
 8004196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f960 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d103      	bne.n	80041be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e05f      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c2:	897b      	ldrh	r3, [r7, #10]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	492d      	ldr	r1, [pc, #180]	; (800428c <I2C_RequestMemoryWrite+0x128>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f998 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04c      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	6a39      	ldr	r1, [r7, #32]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fa02 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2b04      	cmp	r3, #4
 8004214:	d107      	bne.n	8004226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e02b      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004230:	893b      	ldrh	r3, [r7, #8]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	e021      	b.n	8004280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800423c:	893b      	ldrh	r3, [r7, #8]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b29b      	uxth	r3, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f9dc 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b04      	cmp	r3, #4
 8004260:	d107      	bne.n	8004272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e005      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004276:	893b      	ldrh	r3, [r7, #8]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	817b      	strh	r3, [r7, #10]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f8c2 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f0:	d103      	bne.n	80042fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e0aa      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042fe:	897b      	ldrh	r3, [r7, #10]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800430c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	4952      	ldr	r1, [pc, #328]	; (800445c <I2C_RequestMemoryRead+0x1cc>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f8fa 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e097      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f964 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b04      	cmp	r3, #4
 8004350:	d107      	bne.n	8004362 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e076      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800436c:	893b      	ldrh	r3, [r7, #8]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]
 8004376:	e021      	b.n	80043bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004378:	893b      	ldrh	r3, [r7, #8]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b29b      	uxth	r3, r3
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	6a39      	ldr	r1, [r7, #32]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f93e 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b04      	cmp	r3, #4
 800439c:	d107      	bne.n	80043ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e050      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043b2:	893b      	ldrh	r3, [r7, #8]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	6a39      	ldr	r1, [r7, #32]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f923 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d107      	bne.n	80043e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e035      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2200      	movs	r2, #0
 8004400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f82b 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d103      	bne.n	8004428 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e013      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	4906      	ldr	r1, [pc, #24]	; (800445c <I2C_RequestMemoryRead+0x1cc>)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f863 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	00010002 	.word	0x00010002

08004460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004470:	e025      	b.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d021      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe ff5f 	bl	800333c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d116      	bne.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e023      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10d      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	e00c      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d0b6      	beq.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451c:	e051      	b.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452c:	d123      	bne.n	8004576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e046      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d021      	beq.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fedd 	bl	800333c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d116      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e020      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10c      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4013      	ands	r3, r2
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e00b      	b.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	43da      	mvns	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4013      	ands	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d18d      	bne.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004618:	e02d      	b.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8ce 	bl	80047bc <I2C_IsAcknowledgeFailed>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02d      	b.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d021      	beq.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe fe83 	bl	800333c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e007      	b.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d1ca      	bne.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800469a:	e02d      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f88d 	bl	80047bc <I2C_IsAcknowledgeFailed>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e02d      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d021      	beq.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fe42 	bl	800333c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e007      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d1ca      	bne.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800471c:	e042      	b.n	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d119      	bne.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0210 	mvn.w	r2, #16
 8004734:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e029      	b.n	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004760:	f7fe fdec 	bl	800333c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d116      	bne.n	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d1b5      	bne.n	800471e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d2:	d11b      	bne.n	800480c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f043 0204 	orr.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e25b      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	4ba3      	ldr	r3, [pc, #652]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00c      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4ba0      	ldr	r3, [pc, #640]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	2b08      	cmp	r3, #8
 8004850:	d112      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004852:	4b9d      	ldr	r3, [pc, #628]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e236      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b91      	ldr	r3, [pc, #580]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a90      	ldr	r2, [pc, #576]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b8b      	ldr	r3, [pc, #556]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a8a      	ldr	r2, [pc, #552]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a87      	ldr	r2, [pc, #540]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a83      	ldr	r2, [pc, #524]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a80      	ldr	r2, [pc, #512]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fd32 	bl	800333c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe fd2e 	bl	800333c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1fb      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fd1e 	bl	800333c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004904:	f7fe fd1a 	bl	800333c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1e7      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b62      	ldr	r3, [pc, #392]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b5f      	ldr	r3, [pc, #380]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b5c      	ldr	r3, [pc, #368]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1bb      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b56      	ldr	r3, [pc, #344]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4952      	ldr	r1, [pc, #328]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b4f      	ldr	r3, [pc, #316]	; (8004acc <HAL_RCC_OscConfig+0x2b0>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe fcd3 	bl	800333c <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499a:	f7fe fccf 	bl	800333c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e19c      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4940      	ldr	r1, [pc, #256]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCC_OscConfig+0x2b0>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fcb2 	bl	800333c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fe fcae 	bl	800333c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e17b      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d030      	beq.n	8004a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <HAL_RCC_OscConfig+0x2b4>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe fc92 	bl	800333c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fc8e 	bl	800333c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e15b      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
 8004a3a:	e015      	b.n	8004a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_RCC_OscConfig+0x2b4>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fc7b 	bl	800333c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fc77 	bl	800333c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e144      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a0 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_OscConfig+0x2b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d121      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <HAL_RCC_OscConfig+0x2b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <HAL_RCC_OscConfig+0x2b8>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fc3d 	bl	800333c <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	e011      	b.n	8004aea <HAL_RCC_OscConfig+0x2ce>
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	42470000 	.word	0x42470000
 8004ad0:	42470e80 	.word	0x42470e80
 8004ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fe fc30 	bl	800333c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0fd      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <HAL_RCC_OscConfig+0x4d4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_OscConfig+0x2f0>
 8004afe:	4b7d      	ldr	r3, [pc, #500]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a7c      	ldr	r2, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	e01c      	b.n	8004b46 <HAL_RCC_OscConfig+0x32a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	d10c      	bne.n	8004b2e <HAL_RCC_OscConfig+0x312>
 8004b14:	4b77      	ldr	r3, [pc, #476]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a76      	ldr	r2, [pc, #472]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	4b74      	ldr	r3, [pc, #464]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a73      	ldr	r2, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2c:	e00b      	b.n	8004b46 <HAL_RCC_OscConfig+0x32a>
 8004b2e:	4b71      	ldr	r3, [pc, #452]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a70      	ldr	r2, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	4b6e      	ldr	r3, [pc, #440]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a6d      	ldr	r2, [pc, #436]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d015      	beq.n	8004b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fe fbf5 	bl	800333c <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fe fbf1 	bl	800333c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0bc      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ee      	beq.n	8004b56 <HAL_RCC_OscConfig+0x33a>
 8004b78:	e014      	b.n	8004ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7a:	f7fe fbdf 	bl	800333c <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fe fbdb 	bl	800333c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0a6      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b98:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ee      	bne.n	8004b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b52      	ldr	r3, [pc, #328]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a51      	ldr	r2, [pc, #324]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8092 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc0:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d05c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d141      	bne.n	8004c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd4:	4b48      	ldr	r3, [pc, #288]	; (8004cf8 <HAL_RCC_OscConfig+0x4dc>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fe fbaf 	bl	800333c <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be2:	f7fe fbab 	bl	800333c <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e078      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf4:	4b3f      	ldr	r3, [pc, #252]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	4933      	ldr	r1, [pc, #204]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCC_OscConfig+0x4dc>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe fb84 	bl	800333c <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe fb80 	bl	800333c <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04d      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x41c>
 8004c56:	e045      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <HAL_RCC_OscConfig+0x4dc>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fe fb6d 	bl	800333c <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fe fb69 	bl	800333c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e036      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCC_OscConfig+0x44a>
 8004c84:	e02e      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e029      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <HAL_RCC_OscConfig+0x4d8>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d11c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d115      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cba:	4013      	ands	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d106      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	42470060 	.word	0x42470060

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0cc      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b68      	ldr	r3, [pc, #416]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90c      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b63      	ldr	r3, [pc, #396]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0b8      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a58      	ldr	r2, [pc, #352]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d68:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	494d      	ldr	r1, [pc, #308]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e067      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4934      	ldr	r1, [pc, #208]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7fe faa6 	bl	800333c <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7fe faa2 	bl	800333c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e04f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20c      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e032      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	490e      	ldr	r1, [pc, #56]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e82:	f000 f821 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	fa21 f303 	lsr.w	r3, r1, r3
 8004e9a:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe f8de 	bl	8003064 <HAL_InitTick>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023c00 	.word	0x40023c00
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	08009a78 	.word	0x08009a78
 8004ec0:	20000000 	.word	0x20000000
 8004ec4:	20000004 	.word	0x20000004

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ede:	4b63      	ldr	r3, [pc, #396]	; (800506c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d007      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0x32>
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d008      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x38>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 80b4 	bne.w	800505c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef4:	4b5e      	ldr	r3, [pc, #376]	; (8005070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ef6:	60bb      	str	r3, [r7, #8]
       break;
 8004ef8:	e0b3      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efa:	4b5e      	ldr	r3, [pc, #376]	; (8005074 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004efc:	60bb      	str	r3, [r7, #8]
      break;
 8004efe:	e0b0      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f00:	4b5a      	ldr	r3, [pc, #360]	; (800506c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0a:	4b58      	ldr	r3, [pc, #352]	; (800506c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d04a      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f16:	4b55      	ldr	r3, [pc, #340]	; (800506c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	f04f 0400 	mov.w	r4, #0
 8004f20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	ea03 0501 	and.w	r5, r3, r1
 8004f2c:	ea04 0602 	and.w	r6, r4, r2
 8004f30:	4629      	mov	r1, r5
 8004f32:	4632      	mov	r2, r6
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	f04f 0400 	mov.w	r4, #0
 8004f3c:	0154      	lsls	r4, r2, #5
 8004f3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f42:	014b      	lsls	r3, r1, #5
 8004f44:	4619      	mov	r1, r3
 8004f46:	4622      	mov	r2, r4
 8004f48:	1b49      	subs	r1, r1, r5
 8004f4a:	eb62 0206 	sbc.w	r2, r2, r6
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	f04f 0400 	mov.w	r4, #0
 8004f56:	0194      	lsls	r4, r2, #6
 8004f58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f5c:	018b      	lsls	r3, r1, #6
 8004f5e:	1a5b      	subs	r3, r3, r1
 8004f60:	eb64 0402 	sbc.w	r4, r4, r2
 8004f64:	f04f 0100 	mov.w	r1, #0
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	00e2      	lsls	r2, r4, #3
 8004f6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f72:	00d9      	lsls	r1, r3, #3
 8004f74:	460b      	mov	r3, r1
 8004f76:	4614      	mov	r4, r2
 8004f78:	195b      	adds	r3, r3, r5
 8004f7a:	eb44 0406 	adc.w	r4, r4, r6
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	0262      	lsls	r2, r4, #9
 8004f88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f8c:	0259      	lsls	r1, r3, #9
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4614      	mov	r4, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	4621      	mov	r1, r4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	f7fb fdbc 	bl	8000b1c <__aeabi_uldivmod>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e049      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	099b      	lsrs	r3, r3, #6
 8004fb2:	f04f 0400 	mov.w	r4, #0
 8004fb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	ea03 0501 	and.w	r5, r3, r1
 8004fc2:	ea04 0602 	and.w	r6, r4, r2
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4632      	mov	r2, r6
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	0154      	lsls	r4, r2, #5
 8004fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fd8:	014b      	lsls	r3, r1, #5
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4622      	mov	r2, r4
 8004fde:	1b49      	subs	r1, r1, r5
 8004fe0:	eb62 0206 	sbc.w	r2, r2, r6
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	0194      	lsls	r4, r2, #6
 8004fee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ff2:	018b      	lsls	r3, r1, #6
 8004ff4:	1a5b      	subs	r3, r3, r1
 8004ff6:	eb64 0402 	sbc.w	r4, r4, r2
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	00e2      	lsls	r2, r4, #3
 8005004:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005008:	00d9      	lsls	r1, r3, #3
 800500a:	460b      	mov	r3, r1
 800500c:	4614      	mov	r4, r2
 800500e:	195b      	adds	r3, r3, r5
 8005010:	eb44 0406 	adc.w	r4, r4, r6
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	02a2      	lsls	r2, r4, #10
 800501e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005022:	0299      	lsls	r1, r3, #10
 8005024:	460b      	mov	r3, r1
 8005026:	4614      	mov	r4, r2
 8005028:	4618      	mov	r0, r3
 800502a:	4621      	mov	r1, r4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f04f 0400 	mov.w	r4, #0
 8005032:	461a      	mov	r2, r3
 8005034:	4623      	mov	r3, r4
 8005036:	f7fb fd71 	bl	8000b1c <__aeabi_uldivmod>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	3301      	adds	r3, #1
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	60bb      	str	r3, [r7, #8]
      break;
 800505a:	e002      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800505e:	60bb      	str	r3, [r7, #8]
      break;
 8005060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005062:	68bb      	ldr	r3, [r7, #8]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506c:	40023800 	.word	0x40023800
 8005070:	00f42400 	.word	0x00f42400
 8005074:	007a1200 	.word	0x007a1200

08005078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_RCC_GetHCLKFreq+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000000 	.word	0x20000000

08005090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005094:	f7ff fff0 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 8005098:	4601      	mov	r1, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	0a9b      	lsrs	r3, r3, #10
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4a03      	ldr	r2, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a6:	5cd3      	ldrb	r3, [r2, r3]
 80050a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40023800 	.word	0x40023800
 80050b4:	08009a88 	.word	0x08009a88

080050b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050bc:	f7ff ffdc 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 80050c0:	4601      	mov	r1, r0
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0b5b      	lsrs	r3, r3, #13
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4a03      	ldr	r2, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	08009a88 	.word	0x08009a88

080050e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	220f      	movs	r2, #15
 80050ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	08db      	lsrs	r3, r3, #3
 800511a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_RCC_GetClockConfig+0x60>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	601a      	str	r2, [r3, #0]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	40023c00 	.word	0x40023c00

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e01d      	b.n	8005192 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f815 	bl	800519a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 f968 	bl	8005458 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0201 	orr.w	r2, r2, #1
 80051c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	d007      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d122      	bne.n	8005252 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d11b      	bne.n	8005252 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0202 	mvn.w	r2, #2
 8005222:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8ee 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 800523e:	e005      	b.n	800524c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8e0 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8f1 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b04      	cmp	r3, #4
 800525e:	d122      	bne.n	80052a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d11b      	bne.n	80052a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f06f 0204 	mvn.w	r2, #4
 8005276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8c4 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005292:	e005      	b.n	80052a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8b6 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8c7 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d122      	bne.n	80052fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d11b      	bne.n	80052fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0208 	mvn.w	r2, #8
 80052ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2204      	movs	r2, #4
 80052d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f89a 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 80052e6:	e005      	b.n	80052f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f88c 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f89d 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b10      	cmp	r3, #16
 8005306:	d122      	bne.n	800534e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d11b      	bne.n	800534e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0210 	mvn.w	r2, #16
 800531e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2208      	movs	r2, #8
 8005324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f870 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 800533a:	e005      	b.n	8005348 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f862 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f873 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10e      	bne.n	800537a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d107      	bne.n	800537a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0201 	mvn.w	r2, #1
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fc f9e1 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d10e      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8e3 	bl	800556c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d10e      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f838 	bl	8005442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d10e      	bne.n	80053fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0220 	mvn.w	r2, #32
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8ad 	bl	8005558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a34      	ldr	r2, [pc, #208]	; (800553c <TIM_Base_SetConfig+0xe4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00f      	beq.n	8005490 <TIM_Base_SetConfig+0x38>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005476:	d00b      	beq.n	8005490 <TIM_Base_SetConfig+0x38>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a31      	ldr	r2, [pc, #196]	; (8005540 <TIM_Base_SetConfig+0xe8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d007      	beq.n	8005490 <TIM_Base_SetConfig+0x38>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a30      	ldr	r2, [pc, #192]	; (8005544 <TIM_Base_SetConfig+0xec>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_Base_SetConfig+0x38>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a2f      	ldr	r2, [pc, #188]	; (8005548 <TIM_Base_SetConfig+0xf0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d108      	bne.n	80054a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <TIM_Base_SetConfig+0xe4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01b      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d017      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <TIM_Base_SetConfig+0xe8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a21      	ldr	r2, [pc, #132]	; (8005544 <TIM_Base_SetConfig+0xec>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00f      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a20      	ldr	r2, [pc, #128]	; (8005548 <TIM_Base_SetConfig+0xf0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <TIM_Base_SetConfig+0xf4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <TIM_Base_SetConfig+0xf8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <TIM_Base_SetConfig+0xfc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a08      	ldr	r2, [pc, #32]	; (800553c <TIM_Base_SetConfig+0xe4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d103      	bne.n	8005528 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	615a      	str	r2, [r3, #20]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40010000 	.word	0x40010000
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800

08005558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e03f      	b.n	8005612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fd fe20 	bl	80031ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2224      	movs	r2, #36	; 0x24
 80055b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f90b 	bl	80057e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b088      	sub	sp, #32
 800561e:	af02      	add	r7, sp, #8
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	f040 8083 	bne.w	8005742 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Transmit+0x2e>
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e07b      	b.n	8005744 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_UART_Transmit+0x40>
 8005656:	2302      	movs	r3, #2
 8005658:	e074      	b.n	8005744 <HAL_UART_Transmit+0x12a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2221      	movs	r2, #33	; 0x21
 800566c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005670:	f7fd fe64 	bl	800333c <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800568a:	e042      	b.n	8005712 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	d122      	bne.n	80056ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f84c 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e042      	b.n	8005744 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	3302      	adds	r3, #2
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	e017      	b.n	8005712 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	e013      	b.n	8005712 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f829 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e01f      	b.n	8005744 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	60ba      	str	r2, [r7, #8]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1b7      	bne.n	800568c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	2140      	movs	r1, #64	; 0x40
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f810 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e006      	b.n	8005744 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575c:	e02c      	b.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d028      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <UART_WaitOnFlagUntilTimeout+0x30>
 800576c:	f7fd fde6 	bl	800333c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	429a      	cmp	r2, r3
 800577a:	d21d      	bcs.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800578a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e00f      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d0c3      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005822:	f023 030c 	bic.w	r3, r3, #12
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	430b      	orrs	r3, r1
 800582e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584e:	f040 818b 	bne.w	8005b68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4ac1      	ldr	r2, [pc, #772]	; (8005b5c <UART_SetConfig+0x37c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d005      	beq.n	8005868 <UART_SetConfig+0x88>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4abf      	ldr	r2, [pc, #764]	; (8005b60 <UART_SetConfig+0x380>)
 8005862:	4293      	cmp	r3, r2
 8005864:	f040 80bd 	bne.w	80059e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005868:	f7ff fc26 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 800586c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	461d      	mov	r5, r3
 8005872:	f04f 0600 	mov.w	r6, #0
 8005876:	46a8      	mov	r8, r5
 8005878:	46b1      	mov	r9, r6
 800587a:	eb18 0308 	adds.w	r3, r8, r8
 800587e:	eb49 0409 	adc.w	r4, r9, r9
 8005882:	4698      	mov	r8, r3
 8005884:	46a1      	mov	r9, r4
 8005886:	eb18 0805 	adds.w	r8, r8, r5
 800588a:	eb49 0906 	adc.w	r9, r9, r6
 800588e:	f04f 0100 	mov.w	r1, #0
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800589a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800589e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058a2:	4688      	mov	r8, r1
 80058a4:	4691      	mov	r9, r2
 80058a6:	eb18 0005 	adds.w	r0, r8, r5
 80058aa:	eb49 0106 	adc.w	r1, r9, r6
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	461d      	mov	r5, r3
 80058b4:	f04f 0600 	mov.w	r6, #0
 80058b8:	196b      	adds	r3, r5, r5
 80058ba:	eb46 0406 	adc.w	r4, r6, r6
 80058be:	461a      	mov	r2, r3
 80058c0:	4623      	mov	r3, r4
 80058c2:	f7fb f92b 	bl	8000b1c <__aeabi_uldivmod>
 80058c6:	4603      	mov	r3, r0
 80058c8:	460c      	mov	r4, r1
 80058ca:	461a      	mov	r2, r3
 80058cc:	4ba5      	ldr	r3, [pc, #660]	; (8005b64 <UART_SetConfig+0x384>)
 80058ce:	fba3 2302 	umull	r2, r3, r3, r2
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	461d      	mov	r5, r3
 80058dc:	f04f 0600 	mov.w	r6, #0
 80058e0:	46a9      	mov	r9, r5
 80058e2:	46b2      	mov	sl, r6
 80058e4:	eb19 0309 	adds.w	r3, r9, r9
 80058e8:	eb4a 040a 	adc.w	r4, sl, sl
 80058ec:	4699      	mov	r9, r3
 80058ee:	46a2      	mov	sl, r4
 80058f0:	eb19 0905 	adds.w	r9, r9, r5
 80058f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80058f8:	f04f 0100 	mov.w	r1, #0
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800590c:	4689      	mov	r9, r1
 800590e:	4692      	mov	sl, r2
 8005910:	eb19 0005 	adds.w	r0, r9, r5
 8005914:	eb4a 0106 	adc.w	r1, sl, r6
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	461d      	mov	r5, r3
 800591e:	f04f 0600 	mov.w	r6, #0
 8005922:	196b      	adds	r3, r5, r5
 8005924:	eb46 0406 	adc.w	r4, r6, r6
 8005928:	461a      	mov	r2, r3
 800592a:	4623      	mov	r3, r4
 800592c:	f7fb f8f6 	bl	8000b1c <__aeabi_uldivmod>
 8005930:	4603      	mov	r3, r0
 8005932:	460c      	mov	r4, r1
 8005934:	461a      	mov	r2, r3
 8005936:	4b8b      	ldr	r3, [pc, #556]	; (8005b64 <UART_SetConfig+0x384>)
 8005938:	fba3 1302 	umull	r1, r3, r3, r2
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	2164      	movs	r1, #100	; 0x64
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	3332      	adds	r3, #50	; 0x32
 800594a:	4a86      	ldr	r2, [pc, #536]	; (8005b64 <UART_SetConfig+0x384>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005958:	4498      	add	r8, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	461d      	mov	r5, r3
 800595e:	f04f 0600 	mov.w	r6, #0
 8005962:	46a9      	mov	r9, r5
 8005964:	46b2      	mov	sl, r6
 8005966:	eb19 0309 	adds.w	r3, r9, r9
 800596a:	eb4a 040a 	adc.w	r4, sl, sl
 800596e:	4699      	mov	r9, r3
 8005970:	46a2      	mov	sl, r4
 8005972:	eb19 0905 	adds.w	r9, r9, r5
 8005976:	eb4a 0a06 	adc.w	sl, sl, r6
 800597a:	f04f 0100 	mov.w	r1, #0
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800598a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800598e:	4689      	mov	r9, r1
 8005990:	4692      	mov	sl, r2
 8005992:	eb19 0005 	adds.w	r0, r9, r5
 8005996:	eb4a 0106 	adc.w	r1, sl, r6
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	461d      	mov	r5, r3
 80059a0:	f04f 0600 	mov.w	r6, #0
 80059a4:	196b      	adds	r3, r5, r5
 80059a6:	eb46 0406 	adc.w	r4, r6, r6
 80059aa:	461a      	mov	r2, r3
 80059ac:	4623      	mov	r3, r4
 80059ae:	f7fb f8b5 	bl	8000b1c <__aeabi_uldivmod>
 80059b2:	4603      	mov	r3, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b6a      	ldr	r3, [pc, #424]	; (8005b64 <UART_SetConfig+0x384>)
 80059ba:	fba3 1302 	umull	r1, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2164      	movs	r1, #100	; 0x64
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	3332      	adds	r3, #50	; 0x32
 80059cc:	4a65      	ldr	r2, [pc, #404]	; (8005b64 <UART_SetConfig+0x384>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f003 0207 	and.w	r2, r3, #7
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4442      	add	r2, r8
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e26f      	b.n	8005ec2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059e2:	f7ff fb55 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 80059e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	461d      	mov	r5, r3
 80059ec:	f04f 0600 	mov.w	r6, #0
 80059f0:	46a8      	mov	r8, r5
 80059f2:	46b1      	mov	r9, r6
 80059f4:	eb18 0308 	adds.w	r3, r8, r8
 80059f8:	eb49 0409 	adc.w	r4, r9, r9
 80059fc:	4698      	mov	r8, r3
 80059fe:	46a1      	mov	r9, r4
 8005a00:	eb18 0805 	adds.w	r8, r8, r5
 8005a04:	eb49 0906 	adc.w	r9, r9, r6
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a1c:	4688      	mov	r8, r1
 8005a1e:	4691      	mov	r9, r2
 8005a20:	eb18 0005 	adds.w	r0, r8, r5
 8005a24:	eb49 0106 	adc.w	r1, r9, r6
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	461d      	mov	r5, r3
 8005a2e:	f04f 0600 	mov.w	r6, #0
 8005a32:	196b      	adds	r3, r5, r5
 8005a34:	eb46 0406 	adc.w	r4, r6, r6
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	f7fb f86e 	bl	8000b1c <__aeabi_uldivmod>
 8005a40:	4603      	mov	r3, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b47      	ldr	r3, [pc, #284]	; (8005b64 <UART_SetConfig+0x384>)
 8005a48:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	461d      	mov	r5, r3
 8005a56:	f04f 0600 	mov.w	r6, #0
 8005a5a:	46a9      	mov	r9, r5
 8005a5c:	46b2      	mov	sl, r6
 8005a5e:	eb19 0309 	adds.w	r3, r9, r9
 8005a62:	eb4a 040a 	adc.w	r4, sl, sl
 8005a66:	4699      	mov	r9, r3
 8005a68:	46a2      	mov	sl, r4
 8005a6a:	eb19 0905 	adds.w	r9, r9, r5
 8005a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a72:	f04f 0100 	mov.w	r1, #0
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a86:	4689      	mov	r9, r1
 8005a88:	4692      	mov	sl, r2
 8005a8a:	eb19 0005 	adds.w	r0, r9, r5
 8005a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	461d      	mov	r5, r3
 8005a98:	f04f 0600 	mov.w	r6, #0
 8005a9c:	196b      	adds	r3, r5, r5
 8005a9e:	eb46 0406 	adc.w	r4, r6, r6
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	f7fb f839 	bl	8000b1c <__aeabi_uldivmod>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <UART_SetConfig+0x384>)
 8005ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2164      	movs	r1, #100	; 0x64
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	3332      	adds	r3, #50	; 0x32
 8005ac4:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <UART_SetConfig+0x384>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad2:	4498      	add	r8, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	461d      	mov	r5, r3
 8005ad8:	f04f 0600 	mov.w	r6, #0
 8005adc:	46a9      	mov	r9, r5
 8005ade:	46b2      	mov	sl, r6
 8005ae0:	eb19 0309 	adds.w	r3, r9, r9
 8005ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae8:	4699      	mov	r9, r3
 8005aea:	46a2      	mov	sl, r4
 8005aec:	eb19 0905 	adds.w	r9, r9, r5
 8005af0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b08:	4689      	mov	r9, r1
 8005b0a:	4692      	mov	sl, r2
 8005b0c:	eb19 0005 	adds.w	r0, r9, r5
 8005b10:	eb4a 0106 	adc.w	r1, sl, r6
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	461d      	mov	r5, r3
 8005b1a:	f04f 0600 	mov.w	r6, #0
 8005b1e:	196b      	adds	r3, r5, r5
 8005b20:	eb46 0406 	adc.w	r4, r6, r6
 8005b24:	461a      	mov	r2, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	f7fa fff8 	bl	8000b1c <__aeabi_uldivmod>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <UART_SetConfig+0x384>)
 8005b34:	fba3 1302 	umull	r1, r3, r3, r2
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	2164      	movs	r1, #100	; 0x64
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	3332      	adds	r3, #50	; 0x32
 8005b46:	4a07      	ldr	r2, [pc, #28]	; (8005b64 <UART_SetConfig+0x384>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f003 0207 	and.w	r2, r3, #7
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4442      	add	r2, r8
 8005b58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b5a:	e1b2      	b.n	8005ec2 <UART_SetConfig+0x6e2>
 8005b5c:	40011000 	.word	0x40011000
 8005b60:	40011400 	.word	0x40011400
 8005b64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4ad7      	ldr	r2, [pc, #860]	; (8005ecc <UART_SetConfig+0x6ec>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d005      	beq.n	8005b7e <UART_SetConfig+0x39e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4ad6      	ldr	r2, [pc, #856]	; (8005ed0 <UART_SetConfig+0x6f0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	f040 80d1 	bne.w	8005d20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b7e:	f7ff fa9b 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 8005b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	469a      	mov	sl, r3
 8005b88:	f04f 0b00 	mov.w	fp, #0
 8005b8c:	46d0      	mov	r8, sl
 8005b8e:	46d9      	mov	r9, fp
 8005b90:	eb18 0308 	adds.w	r3, r8, r8
 8005b94:	eb49 0409 	adc.w	r4, r9, r9
 8005b98:	4698      	mov	r8, r3
 8005b9a:	46a1      	mov	r9, r4
 8005b9c:	eb18 080a 	adds.w	r8, r8, sl
 8005ba0:	eb49 090b 	adc.w	r9, r9, fp
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bb8:	4688      	mov	r8, r1
 8005bba:	4691      	mov	r9, r2
 8005bbc:	eb1a 0508 	adds.w	r5, sl, r8
 8005bc0:	eb4b 0609 	adc.w	r6, fp, r9
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	f04f 0400 	mov.w	r4, #0
 8005bd6:	0094      	lsls	r4, r2, #2
 8005bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bdc:	008b      	lsls	r3, r1, #2
 8005bde:	461a      	mov	r2, r3
 8005be0:	4623      	mov	r3, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	4631      	mov	r1, r6
 8005be6:	f7fa ff99 	bl	8000b1c <__aeabi_uldivmod>
 8005bea:	4603      	mov	r3, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4bb8      	ldr	r3, [pc, #736]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	469b      	mov	fp, r3
 8005c00:	f04f 0c00 	mov.w	ip, #0
 8005c04:	46d9      	mov	r9, fp
 8005c06:	46e2      	mov	sl, ip
 8005c08:	eb19 0309 	adds.w	r3, r9, r9
 8005c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c10:	4699      	mov	r9, r3
 8005c12:	46a2      	mov	sl, r4
 8005c14:	eb19 090b 	adds.w	r9, r9, fp
 8005c18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c30:	4689      	mov	r9, r1
 8005c32:	4692      	mov	sl, r2
 8005c34:	eb1b 0509 	adds.w	r5, fp, r9
 8005c38:	eb4c 060a 	adc.w	r6, ip, sl
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4619      	mov	r1, r3
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	f04f 0400 	mov.w	r4, #0
 8005c4e:	0094      	lsls	r4, r2, #2
 8005c50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c54:	008b      	lsls	r3, r1, #2
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	f7fa ff5d 	bl	8000b1c <__aeabi_uldivmod>
 8005c62:	4603      	mov	r3, r0
 8005c64:	460c      	mov	r4, r1
 8005c66:	461a      	mov	r2, r3
 8005c68:	4b9a      	ldr	r3, [pc, #616]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2164      	movs	r1, #100	; 0x64
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4a95      	ldr	r2, [pc, #596]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c88:	4498      	add	r8, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	469b      	mov	fp, r3
 8005c8e:	f04f 0c00 	mov.w	ip, #0
 8005c92:	46d9      	mov	r9, fp
 8005c94:	46e2      	mov	sl, ip
 8005c96:	eb19 0309 	adds.w	r3, r9, r9
 8005c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	46a2      	mov	sl, r4
 8005ca2:	eb19 090b 	adds.w	r9, r9, fp
 8005ca6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005caa:	f04f 0100 	mov.w	r1, #0
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	4692      	mov	sl, r2
 8005cc2:	eb1b 0509 	adds.w	r5, fp, r9
 8005cc6:	eb4c 060a 	adc.w	r6, ip, sl
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	f04f 0400 	mov.w	r4, #0
 8005cdc:	0094      	lsls	r4, r2, #2
 8005cde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ce2:	008b      	lsls	r3, r1, #2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	4631      	mov	r1, r6
 8005cec:	f7fa ff16 	bl	8000b1c <__aeabi_uldivmod>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b77      	ldr	r3, [pc, #476]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	2164      	movs	r1, #100	; 0x64
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	3332      	adds	r3, #50	; 0x32
 8005d0a:	4a72      	ldr	r2, [pc, #456]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f003 020f 	and.w	r2, r3, #15
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4442      	add	r2, r8
 8005d1c:	609a      	str	r2, [r3, #8]
 8005d1e:	e0d0      	b.n	8005ec2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7ff f9b6 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 8005d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	469a      	mov	sl, r3
 8005d2a:	f04f 0b00 	mov.w	fp, #0
 8005d2e:	46d0      	mov	r8, sl
 8005d30:	46d9      	mov	r9, fp
 8005d32:	eb18 0308 	adds.w	r3, r8, r8
 8005d36:	eb49 0409 	adc.w	r4, r9, r9
 8005d3a:	4698      	mov	r8, r3
 8005d3c:	46a1      	mov	r9, r4
 8005d3e:	eb18 080a 	adds.w	r8, r8, sl
 8005d42:	eb49 090b 	adc.w	r9, r9, fp
 8005d46:	f04f 0100 	mov.w	r1, #0
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d5a:	4688      	mov	r8, r1
 8005d5c:	4691      	mov	r9, r2
 8005d5e:	eb1a 0508 	adds.w	r5, sl, r8
 8005d62:	eb4b 0609 	adc.w	r6, fp, r9
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	f04f 0400 	mov.w	r4, #0
 8005d78:	0094      	lsls	r4, r2, #2
 8005d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d7e:	008b      	lsls	r3, r1, #2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4623      	mov	r3, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	4631      	mov	r1, r6
 8005d88:	f7fa fec8 	bl	8000b1c <__aeabi_uldivmod>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	461a      	mov	r2, r3
 8005d92:	4b50      	ldr	r3, [pc, #320]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005d94:	fba3 2302 	umull	r2, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	469b      	mov	fp, r3
 8005da2:	f04f 0c00 	mov.w	ip, #0
 8005da6:	46d9      	mov	r9, fp
 8005da8:	46e2      	mov	sl, ip
 8005daa:	eb19 0309 	adds.w	r3, r9, r9
 8005dae:	eb4a 040a 	adc.w	r4, sl, sl
 8005db2:	4699      	mov	r9, r3
 8005db4:	46a2      	mov	sl, r4
 8005db6:	eb19 090b 	adds.w	r9, r9, fp
 8005dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dd2:	4689      	mov	r9, r1
 8005dd4:	4692      	mov	sl, r2
 8005dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8005dda:	eb4c 060a 	adc.w	r6, ip, sl
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	f04f 0400 	mov.w	r4, #0
 8005df0:	0094      	lsls	r4, r2, #2
 8005df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005df6:	008b      	lsls	r3, r1, #2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	4631      	mov	r1, r6
 8005e00:	f7fa fe8c 	bl	8000b1c <__aeabi_uldivmod>
 8005e04:	4603      	mov	r3, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4b32      	ldr	r3, [pc, #200]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	2164      	movs	r1, #100	; 0x64
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	3332      	adds	r3, #50	; 0x32
 8005e1e:	4a2d      	ldr	r2, [pc, #180]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2a:	4498      	add	r8, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	469b      	mov	fp, r3
 8005e30:	f04f 0c00 	mov.w	ip, #0
 8005e34:	46d9      	mov	r9, fp
 8005e36:	46e2      	mov	sl, ip
 8005e38:	eb19 0309 	adds.w	r3, r9, r9
 8005e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e40:	4699      	mov	r9, r3
 8005e42:	46a2      	mov	sl, r4
 8005e44:	eb19 090b 	adds.w	r9, r9, fp
 8005e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e60:	4689      	mov	r9, r1
 8005e62:	4692      	mov	sl, r2
 8005e64:	eb1b 0509 	adds.w	r5, fp, r9
 8005e68:	eb4c 060a 	adc.w	r6, ip, sl
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	f04f 0400 	mov.w	r4, #0
 8005e7e:	0094      	lsls	r4, r2, #2
 8005e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e84:	008b      	lsls	r3, r1, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	4623      	mov	r3, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	f7fa fe45 	bl	8000b1c <__aeabi_uldivmod>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2164      	movs	r1, #100	; 0x64
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <UART_SetConfig+0x6f4>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4442      	add	r2, r8
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	e7ff      	b.n	8005ec2 <UART_SetConfig+0x6e2>
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ecc:	40011000 	.word	0x40011000
 8005ed0:	40011400 	.word	0x40011400
 8005ed4:	51eb851f 	.word	0x51eb851f

08005ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eee:	f3ef 8305 	mrs	r3, IPSR
 8005ef2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005efa:	f3ef 8310 	mrs	r3, PRIMASK
 8005efe:	607b      	str	r3, [r7, #4]
  return(result);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f06:	f3ef 8311 	mrs	r3, BASEPRI
 8005f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <osKernelInitialize+0x3a>
 8005f12:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <osKernelInitialize+0x64>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d103      	bne.n	8005f22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f1a:	f06f 0305 	mvn.w	r3, #5
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e00c      	b.n	8005f3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <osKernelInitialize+0x64>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f2a:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <osKernelInitialize+0x64>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e002      	b.n	8005f3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	2000002c 	.word	0x2000002c

08005f50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f56:	f3ef 8305 	mrs	r3, IPSR
 8005f5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10f      	bne.n	8005f82 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f62:	f3ef 8310 	mrs	r3, PRIMASK
 8005f66:	607b      	str	r3, [r7, #4]
  return(result);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d105      	bne.n	8005f7a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f72:	603b      	str	r3, [r7, #0]
  return(result);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <osKernelStart+0x3a>
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <osKernelStart+0x68>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d103      	bne.n	8005f8a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005f82:	f06f 0305 	mvn.w	r3, #5
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e010      	b.n	8005fac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <osKernelStart+0x68>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d109      	bne.n	8005fa6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f92:	f7ff ffa1 	bl	8005ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f96:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <osKernelStart+0x68>)
 8005f98:	2202      	movs	r2, #2
 8005f9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f9c:	f001 fee2 	bl	8007d64 <vTaskStartScheduler>
      stat = osOK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e002      	b.n	8005fac <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fac:	68fb      	ldr	r3, [r7, #12]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	2000002c 	.word	0x2000002c

08005fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b090      	sub	sp, #64	; 0x40
 8005fc0:	af04      	add	r7, sp, #16
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fcc:	f3ef 8305 	mrs	r3, IPSR
 8005fd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fd2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 808f 	bne.w	80060f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fda:	f3ef 8310 	mrs	r3, PRIMASK
 8005fde:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d105      	bne.n	8005ff2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fea:	617b      	str	r3, [r7, #20]
  return(result);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <osThreadNew+0x3e>
 8005ff2:	4b44      	ldr	r3, [pc, #272]	; (8006104 <osThreadNew+0x148>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d07e      	beq.n	80060f8 <osThreadNew+0x13c>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d07b      	beq.n	80060f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006004:	2318      	movs	r3, #24
 8006006:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800600c:	f04f 33ff 	mov.w	r3, #4294967295
 8006010:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d045      	beq.n	80060a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <osThreadNew+0x6a>
        name = attr->name;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <osThreadNew+0x90>
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b38      	cmp	r3, #56	; 0x38
 800603e:	d805      	bhi.n	800604c <osThreadNew+0x90>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <osThreadNew+0x94>
        return (NULL);
 800604c:	2300      	movs	r3, #0
 800604e:	e054      	b.n	80060fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	089b      	lsrs	r3, r3, #2
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <osThreadNew+0xca>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b5b      	cmp	r3, #91	; 0x5b
 800606e:	d90a      	bls.n	8006086 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <osThreadNew+0xca>
        mem = 1;
 8006080:	2301      	movs	r3, #1
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	e010      	b.n	80060a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <osThreadNew+0xec>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d108      	bne.n	80060a8 <osThreadNew+0xec>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <osThreadNew+0xec>
          mem = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	e001      	b.n	80060a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d110      	bne.n	80060d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060b6:	9202      	str	r2, [sp, #8]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 fc7b 	bl	80079c0 <xTaskCreateStatic>
 80060ca:	4603      	mov	r3, r0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	e013      	b.n	80060f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d110      	bne.n	80060f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f001 fcc3 	bl	8007a74 <xTaskCreate>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d001      	beq.n	80060f8 <osThreadNew+0x13c>
          hTask = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060f8:	693b      	ldr	r3, [r7, #16]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	; 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000002c 	.word	0x2000002c

08006108 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006110:	f3ef 8305 	mrs	r3, IPSR
 8006114:	613b      	str	r3, [r7, #16]
  return(result);
 8006116:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10f      	bne.n	800613c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611c:	f3ef 8310 	mrs	r3, PRIMASK
 8006120:	60fb      	str	r3, [r7, #12]
  return(result);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006128:	f3ef 8311 	mrs	r3, BASEPRI
 800612c:	60bb      	str	r3, [r7, #8]
  return(result);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <osDelay+0x3c>
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <osDelay+0x58>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d103      	bne.n	8006144 <osDelay+0x3c>
    stat = osErrorISR;
 800613c:	f06f 0305 	mvn.w	r3, #5
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	e007      	b.n	8006154 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <osDelay+0x4c>
      vTaskDelay(ticks);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fdd4 	bl	8007cfc <vTaskDelay>
    }
  }

  return (stat);
 8006154:	697b      	ldr	r3, [r7, #20]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	2000002c 	.word	0x2000002c

08006164 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006170:	f3ef 8305 	mrs	r3, IPSR
 8006174:	613b      	str	r3, [r7, #16]
  return(result);
 8006176:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 8085 	bne.w	8006288 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	60fb      	str	r3, [r7, #12]
  return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800618a:	f3ef 8311 	mrs	r3, BASEPRI
 800618e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <osMutexNew+0x3a>
 8006196:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <osMutexNew+0x130>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d074      	beq.n	8006288 <osMutexNew+0x124>
    if (attr != NULL) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <osMutexNew+0x48>
      type = attr->attr_bits;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	e001      	b.n	80061b0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <osMutexNew+0x5c>
      rmtx = 1U;
 80061ba:	2301      	movs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e001      	b.n	80061c4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d15c      	bne.n	8006288 <osMutexNew+0x124>
      mem = -1;
 80061ce:	f04f 33ff 	mov.w	r3, #4294967295
 80061d2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d015      	beq.n	8006206 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <osMutexNew+0x8c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b4f      	cmp	r3, #79	; 0x4f
 80061e8:	d902      	bls.n	80061f0 <osMutexNew+0x8c>
          mem = 1;
 80061ea:	2301      	movs	r3, #1
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e00c      	b.n	800620a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <osMutexNew+0xa6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <osMutexNew+0xa6>
            mem = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e001      	b.n	800620a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d112      	bne.n	8006236 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	4619      	mov	r1, r3
 800621c:	2004      	movs	r0, #4
 800621e:	f000 fc9c 	bl	8006b5a <xQueueCreateMutexStatic>
 8006222:	6278      	str	r0, [r7, #36]	; 0x24
 8006224:	e016      	b.n	8006254 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	4619      	mov	r1, r3
 800622c:	2001      	movs	r0, #1
 800622e:	f000 fc94 	bl	8006b5a <xQueueCreateMutexStatic>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24
 8006234:	e00e      	b.n	8006254 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006242:	2004      	movs	r0, #4
 8006244:	f000 fc71 	bl	8006b2a <xQueueCreateMutex>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24
 800624a:	e003      	b.n	8006254 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800624c:	2001      	movs	r0, #1
 800624e:	f000 fc6c 	bl	8006b2a <xQueueCreateMutex>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <osMutexNew+0x110>
        if (attr != NULL) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <osMutexNew+0x104>
          name = attr->name;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e001      	b.n	800626c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800626c:	6979      	ldr	r1, [r7, #20]
 800626e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006270:	f001 fb20 	bl	80078b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <osMutexNew+0x124>
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	2000002c 	.word	0x2000002c

08006298 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b6:	f3ef 8305 	mrs	r3, IPSR
 80062ba:	613b      	str	r3, [r7, #16]
  return(result);
 80062bc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10f      	bne.n	80062e2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c2:	f3ef 8310 	mrs	r3, PRIMASK
 80062c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062ce:	f3ef 8311 	mrs	r3, BASEPRI
 80062d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <osMutexAcquire+0x52>
 80062da:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <osMutexAcquire+0xb8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d103      	bne.n	80062ea <osMutexAcquire+0x52>
    stat = osErrorISR;
 80062e2:	f06f 0305 	mvn.w	r3, #5
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	e02c      	b.n	8006344 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80062f0:	f06f 0303 	mvn.w	r3, #3
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	e025      	b.n	8006344 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f000 fc78 	bl	8006bf6 <xQueueTakeMutexRecursive>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d01b      	beq.n	8006344 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006312:	f06f 0301 	mvn.w	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e014      	b.n	8006344 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800631a:	f06f 0302 	mvn.w	r3, #2
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e010      	b.n	8006344 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	69b8      	ldr	r0, [r7, #24]
 8006326:	f000 fff5 	bl	8007314 <xQueueSemaphoreTake>
 800632a:	4603      	mov	r3, r0
 800632c:	2b01      	cmp	r3, #1
 800632e:	d009      	beq.n	8006344 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006336:	f06f 0301 	mvn.w	r3, #1
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e002      	b.n	8006344 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800633e:	f06f 0302 	mvn.w	r3, #2
 8006342:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006344:	69fb      	ldr	r3, [r7, #28]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	2000002c 	.word	0x2000002c

08006354 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006370:	f3ef 8305 	mrs	r3, IPSR
 8006374:	613b      	str	r3, [r7, #16]
  return(result);
 8006376:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637c:	f3ef 8310 	mrs	r3, PRIMASK
 8006380:	60fb      	str	r3, [r7, #12]
  return(result);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006388:	f3ef 8311 	mrs	r3, BASEPRI
 800638c:	60bb      	str	r3, [r7, #8]
  return(result);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <osMutexRelease+0x50>
 8006394:	4b16      	ldr	r3, [pc, #88]	; (80063f0 <osMutexRelease+0x9c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d103      	bne.n	80063a4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800639c:	f06f 0305 	mvn.w	r3, #5
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e01f      	b.n	80063e4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80063aa:	f06f 0303 	mvn.w	r3, #3
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e018      	b.n	80063e4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80063b8:	69b8      	ldr	r0, [r7, #24]
 80063ba:	f000 fbe9 	bl	8006b90 <xQueueGiveMutexRecursive>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d00f      	beq.n	80063e4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80063c4:	f06f 0302 	mvn.w	r3, #2
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	e00b      	b.n	80063e4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	f000 fcaa 	bl	8006d2c <xQueueGenericSend>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d002      	beq.n	80063e4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80063de:	f06f 0302 	mvn.w	r3, #2
 80063e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2000002c 	.word	0x2000002c

080063f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006404:	f3ef 8305 	mrs	r3, IPSR
 8006408:	61bb      	str	r3, [r7, #24]
  return(result);
 800640a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 8087 	bne.w	8006520 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006412:	f3ef 8310 	mrs	r3, PRIMASK
 8006416:	617b      	str	r3, [r7, #20]
  return(result);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d105      	bne.n	800642a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800641e:	f3ef 8311 	mrs	r3, BASEPRI
 8006422:	613b      	str	r3, [r7, #16]
  return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <osSemaphoreNew+0x3e>
 800642a:	4b40      	ldr	r3, [pc, #256]	; (800652c <osSemaphoreNew+0x138>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d076      	beq.n	8006520 <osSemaphoreNew+0x12c>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d073      	beq.n	8006520 <osSemaphoreNew+0x12c>
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	429a      	cmp	r2, r3
 800643e:	d86f      	bhi.n	8006520 <osSemaphoreNew+0x12c>
    mem = -1;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d015      	beq.n	8006478 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <osSemaphoreNew+0x6e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b4f      	cmp	r3, #79	; 0x4f
 800645a:	d902      	bls.n	8006462 <osSemaphoreNew+0x6e>
        mem = 1;
 800645c:	2301      	movs	r3, #1
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	e00c      	b.n	800647c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d108      	bne.n	800647c <osSemaphoreNew+0x88>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <osSemaphoreNew+0x88>
          mem = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e001      	b.n	800647c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d04d      	beq.n	8006520 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d129      	bne.n	80064de <osSemaphoreNew+0xea>
        if (mem == 1) {
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10b      	bne.n	80064a8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	2303      	movs	r3, #3
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	2200      	movs	r2, #0
 800649c:	2100      	movs	r1, #0
 800649e:	2001      	movs	r0, #1
 80064a0:	f000 fa54 	bl	800694c <xQueueGenericCreateStatic>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24
 80064a6:	e005      	b.n	80064b4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80064a8:	2203      	movs	r2, #3
 80064aa:	2100      	movs	r1, #0
 80064ac:	2001      	movs	r0, #1
 80064ae:	f000 fac0 	bl	8006a32 <xQueueGenericCreate>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d022      	beq.n	8006500 <osSemaphoreNew+0x10c>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01f      	beq.n	8006500 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80064c0:	2300      	movs	r3, #0
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c8:	f000 fc30 	bl	8006d2c <xQueueGenericSend>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d016      	beq.n	8006500 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80064d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d4:	f001 f8a3 	bl	800761e <vQueueDelete>
            hSemaphore = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	e010      	b.n	8006500 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d108      	bne.n	80064f6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	461a      	mov	r2, r3
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fbb7 	bl	8006c60 <xQueueCreateCountingSemaphoreStatic>
 80064f2:	6278      	str	r0, [r7, #36]	; 0x24
 80064f4:	e004      	b.n	8006500 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fbe6 	bl	8006cca <xQueueCreateCountingSemaphore>
 80064fe:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <osSemaphoreNew+0x120>
          name = attr->name;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e001      	b.n	8006518 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006518:	69f9      	ldr	r1, [r7, #28]
 800651a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800651c:	f001 f9ca 	bl	80078b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006522:	4618      	mov	r0, r3
 8006524:	3728      	adds	r7, #40	; 0x28
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	2000002c 	.word	0x2000002c

08006530 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006548:	f06f 0303 	mvn.w	r3, #3
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e04b      	b.n	80065e8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006550:	f3ef 8305 	mrs	r3, IPSR
 8006554:	617b      	str	r3, [r7, #20]
  return(result);
 8006556:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10f      	bne.n	800657c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655c:	f3ef 8310 	mrs	r3, PRIMASK
 8006560:	613b      	str	r3, [r7, #16]
  return(result);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006568:	f3ef 8311 	mrs	r3, BASEPRI
 800656c:	60fb      	str	r3, [r7, #12]
  return(result);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d026      	beq.n	80065c2 <osSemaphoreAcquire+0x92>
 8006574:	4b1f      	ldr	r3, [pc, #124]	; (80065f4 <osSemaphoreAcquire+0xc4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d122      	bne.n	80065c2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006582:	f06f 0303 	mvn.w	r3, #3
 8006586:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006588:	e02d      	b.n	80065e6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800658a:	2300      	movs	r3, #0
 800658c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800658e:	f107 0308 	add.w	r3, r7, #8
 8006592:	461a      	mov	r2, r3
 8006594:	2100      	movs	r1, #0
 8006596:	69b8      	ldr	r0, [r7, #24]
 8006598:	f000 ffc4 	bl	8007524 <xQueueReceiveFromISR>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d003      	beq.n	80065aa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80065a2:	f06f 0302 	mvn.w	r3, #2
 80065a6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80065a8:	e01d      	b.n	80065e6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01a      	beq.n	80065e6 <osSemaphoreAcquire+0xb6>
 80065b0:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <osSemaphoreAcquire+0xc8>)
 80065b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80065c0:	e011      	b.n	80065e6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	69b8      	ldr	r0, [r7, #24]
 80065c6:	f000 fea5 	bl	8007314 <xQueueSemaphoreTake>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d00b      	beq.n	80065e8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80065d6:	f06f 0301 	mvn.w	r3, #1
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e004      	b.n	80065e8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80065de:	f06f 0302 	mvn.w	r3, #2
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	e000      	b.n	80065e8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80065e6:	bf00      	nop
      }
    }
  }

  return (stat);
 80065e8:	69fb      	ldr	r3, [r7, #28]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	2000002c 	.word	0x2000002c
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006612:	f06f 0303 	mvn.w	r3, #3
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	e03e      	b.n	8006698 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800661a:	f3ef 8305 	mrs	r3, IPSR
 800661e:	617b      	str	r3, [r7, #20]
  return(result);
 8006620:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10f      	bne.n	8006646 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006626:	f3ef 8310 	mrs	r3, PRIMASK
 800662a:	613b      	str	r3, [r7, #16]
  return(result);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d105      	bne.n	800663e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006632:	f3ef 8311 	mrs	r3, BASEPRI
 8006636:	60fb      	str	r3, [r7, #12]
  return(result);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01e      	beq.n	800667c <osSemaphoreRelease+0x80>
 800663e:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <osSemaphoreRelease+0xa8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d11a      	bne.n	800667c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800664a:	f107 0308 	add.w	r3, r7, #8
 800664e:	4619      	mov	r1, r3
 8006650:	69b8      	ldr	r0, [r7, #24]
 8006652:	f000 fcf9 	bl	8007048 <xQueueGiveFromISR>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d003      	beq.n	8006664 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800665c:	f06f 0302 	mvn.w	r3, #2
 8006660:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006662:	e018      	b.n	8006696 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <osSemaphoreRelease+0x9a>
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <osSemaphoreRelease+0xac>)
 800666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800667a:	e00c      	b.n	8006696 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800667c:	2300      	movs	r3, #0
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	69b8      	ldr	r0, [r7, #24]
 8006684:	f000 fb52 	bl	8006d2c <xQueueGenericSend>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d004      	beq.n	8006698 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800668e:	f06f 0302 	mvn.w	r3, #2
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e000      	b.n	8006698 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006696:	bf00      	nop
    }
  }

  return (stat);
 8006698:	69fb      	ldr	r3, [r7, #28]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000002c 	.word	0x2000002c
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80066bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a06      	ldr	r2, [pc, #24]	; (80066dc <vApplicationGetIdleTaskMemory+0x30>)
 80066c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2280      	movs	r2, #128	; 0x80
 80066c8:	601a      	str	r2, [r3, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000030 	.word	0x20000030
 80066dc:	2000008c 	.word	0x2000008c

080066e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a07      	ldr	r2, [pc, #28]	; (800670c <vApplicationGetTimerTaskMemory+0x2c>)
 80066f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4a06      	ldr	r2, [pc, #24]	; (8006710 <vApplicationGetTimerTaskMemory+0x30>)
 80066f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fe:	601a      	str	r2, [r3, #0]
}
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	2000028c 	.word	0x2000028c
 8006710:	200002e8 	.word	0x200002e8

08006714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f103 0208 	add.w	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f103 0208 	add.w	r2, r3, #8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f103 0208 	add.w	r2, r3, #8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d103      	bne.n	80067d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e00c      	b.n	80067f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3308      	adds	r3, #8
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e002      	b.n	80067e4 <vListInsert+0x2e>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d2f6      	bcs.n	80067de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6892      	ldr	r2, [r2, #8]
 800683e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6852      	ldr	r2, [r2, #4]
 8006848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d103      	bne.n	800685c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	e7fe      	b.n	80068a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068a4:	f002 fcea 	bl	800927c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	441a      	add	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	3b01      	subs	r3, #1
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	441a      	add	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	22ff      	movs	r2, #255	; 0xff
 80068f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d114      	bne.n	8006924 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01a      	beq.n	8006938 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f001 fcac 	bl	8008264 <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d012      	beq.n	8006938 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <xQueueGenericReset+0xcc>)
 8006914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	e009      	b.n	8006938 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3310      	adds	r3, #16
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fef3 	bl	8006714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3324      	adds	r3, #36	; 0x24
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff feee 	bl	8006714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006938:	f002 fcce 	bl	80092d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800693c:	2301      	movs	r3, #1
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08e      	sub	sp, #56	; 0x38
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <xQueueGenericCreateStatic+0x28>
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
 8006972:	e7fe      	b.n	8006972 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <xQueueGenericCreateStatic+0x42>
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
 800698c:	e7fe      	b.n	800698c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <xQueueGenericCreateStatic+0x4e>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <xQueueGenericCreateStatic+0x52>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <xQueueGenericCreateStatic+0x54>
 800699e:	2300      	movs	r3, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <xQueueGenericCreateStatic+0x6c>
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	e7fe      	b.n	80069b6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <xQueueGenericCreateStatic+0x78>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <xQueueGenericCreateStatic+0x7c>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <xQueueGenericCreateStatic+0x7e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <xQueueGenericCreateStatic+0x96>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069e2:	2350      	movs	r3, #80	; 0x50
 80069e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b50      	cmp	r3, #80	; 0x50
 80069ea:	d009      	beq.n	8006a00 <xQueueGenericCreateStatic+0xb4>
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e7fe      	b.n	80069fe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f844 	bl	8006ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3730      	adds	r7, #48	; 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <xQueueGenericCreate+0x28>
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e004      	b.n	8006a70 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
 8006a6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	3350      	adds	r3, #80	; 0x50
 8006a74:	4618      	mov	r0, r3
 8006a76:	f002 fd1b 	bl	80094b0 <pvPortMalloc>
 8006a7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d011      	beq.n	8006aa6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	3350      	adds	r3, #80	; 0x50
 8006a8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a94:	79fa      	ldrb	r2, [r7, #7]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f805 	bl	8006ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ade:	2101      	movs	r1, #1
 8006ae0:	69b8      	ldr	r0, [r7, #24]
 8006ae2:	f7ff fecb 	bl	800687c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00e      	beq.n	8006b22 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b16:	2300      	movs	r3, #0
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f905 	bl	8006d2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	4603      	mov	r3, r0
 8006b32:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6939      	ldr	r1, [r7, #16]
 8006b42:	6978      	ldr	r0, [r7, #20]
 8006b44:	f7ff ff75 	bl	8006a32 <xQueueGenericCreate>
 8006b48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff ffd3 	bl	8006af6 <prvInitialiseMutex>

		return xNewQueue;
 8006b50:	68fb      	ldr	r3, [r7, #12]
	}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af02      	add	r7, sp, #8
 8006b60:	4603      	mov	r3, r0
 8006b62:	6039      	str	r1, [r7, #0]
 8006b64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b66:	2301      	movs	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2200      	movs	r2, #0
 8006b76:	6939      	ldr	r1, [r7, #16]
 8006b78:	6978      	ldr	r0, [r7, #20]
 8006b7a:	f7ff fee7 	bl	800694c <xQueueGenericCreateStatic>
 8006b7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff ffb8 	bl	8006af6 <prvInitialiseMutex>

		return xNewQueue;
 8006b86:	68fb      	ldr	r3, [r7, #12]
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006b90:	b590      	push	{r4, r7, lr}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <xQueueGiveMutexRecursive+0x26>
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	689c      	ldr	r4, [r3, #8]
 8006bba:	f001 fd09 	bl	80085d0 <xTaskGetCurrentTaskHandle>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d111      	bne.n	8006be8 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6938      	ldr	r0, [r7, #16]
 8006bde:	f000 f8a5 	bl	8006d2c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006be2:	2301      	movs	r3, #1
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e001      	b.n	8006bec <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006bec:	697b      	ldr	r3, [r7, #20]
	}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd90      	pop	{r4, r7, pc}

08006bf6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006bf6:	b590      	push	{r4, r7, lr}
 8006bf8:	b087      	sub	sp, #28
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <xQueueTakeMutexRecursive+0x28>
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e7fe      	b.n	8006c1c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	689c      	ldr	r4, [r3, #8]
 8006c22:	f001 fcd5 	bl	80085d0 <xTaskGetCurrentTaskHandle>
 8006c26:	4603      	mov	r3, r0
 8006c28:	429c      	cmp	r4, r3
 8006c2a:	d107      	bne.n	8006c3c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006c36:	2301      	movs	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e00c      	b.n	8006c56 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6938      	ldr	r0, [r7, #16]
 8006c40:	f000 fb68 	bl	8007314 <xQueueSemaphoreTake>
 8006c44:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006c56:	697b      	ldr	r3, [r7, #20]
	}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd90      	pop	{r4, r7, pc}

08006c60 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08a      	sub	sp, #40	; 0x28
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <xQueueCreateCountingSemaphoreStatic+0x26>
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e7fe      	b.n	8006c84 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d909      	bls.n	8006ca2 <xQueueCreateCountingSemaphoreStatic+0x42>
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fe4d 	bl	800694c <xQueueGenericCreateStatic>
 8006cb2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <xQueueCreateCountingSemaphore+0x24>
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	e7fe      	b.n	8006cec <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d909      	bls.n	8006d0a <xQueueCreateCountingSemaphore+0x40>
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e7fe      	b.n	8006d08 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fe8f 	bl	8006a32 <xQueueGenericCreate>
 8006d14:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006d22:	697b      	ldr	r3, [r7, #20]
	}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08e      	sub	sp, #56	; 0x38
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <xQueueGenericSend+0x30>
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5a:	e7fe      	b.n	8006d5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <xQueueGenericSend+0x3e>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <xQueueGenericSend+0x42>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <xQueueGenericSend+0x44>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d109      	bne.n	8006d88 <xQueueGenericSend+0x5c>
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
 8006d86:	e7fe      	b.n	8006d86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d103      	bne.n	8006d96 <xQueueGenericSend+0x6a>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <xQueueGenericSend+0x6e>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <xQueueGenericSend+0x70>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d109      	bne.n	8006db4 <xQueueGenericSend+0x88>
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	623b      	str	r3, [r7, #32]
 8006db2:	e7fe      	b.n	8006db2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006db4:	f001 fc1c 	bl	80085f0 <xTaskGetSchedulerState>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <xQueueGenericSend+0x98>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <xQueueGenericSend+0x9c>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <xQueueGenericSend+0x9e>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <xQueueGenericSend+0xb6>
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	e7fe      	b.n	8006de0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006de2:	f002 fa4b 	bl	800927c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <xQueueGenericSend+0xcc>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d129      	bne.n	8006e4c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dfe:	f000 fc48 	bl	8007692 <prvCopyDataToQueue>
 8006e02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 fa27 	bl	8008264 <xTaskRemoveFromEventList>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d013      	beq.n	8006e44 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <xQueueGenericSend+0x1f0>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	e00a      	b.n	8006e44 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e34:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <xQueueGenericSend+0x1f0>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e44:	f002 fa48 	bl	80092d8 <vPortExitCritical>
				return pdPASS;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e063      	b.n	8006f14 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e52:	f002 fa41 	bl	80092d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e05c      	b.n	8006f14 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e60:	f107 0314 	add.w	r3, r7, #20
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 fa5f 	bl	8008328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6e:	f002 fa33 	bl	80092d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e72:	f000 ffdb 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e76:	f002 fa01 	bl	800927c <vPortEnterCritical>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e80:	b25b      	sxtb	r3, r3
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d103      	bne.n	8006e90 <xQueueGenericSend+0x164>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d103      	bne.n	8006ea6 <xQueueGenericSend+0x17a>
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea6:	f002 fa17 	bl	80092d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eaa:	1d3a      	adds	r2, r7, #4
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fa4e 	bl	8008354 <xTaskCheckForTimeOut>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d124      	bne.n	8006f08 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ec0:	f000 fcdf 	bl	8007882 <prvIsQueueFull>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d018      	beq.n	8006efc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	3310      	adds	r3, #16
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 f978 	bl	80081c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eda:	f000 fc6a 	bl	80077b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ede:	f000 ffb3 	bl	8007e48 <xTaskResumeAll>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f47f af7c 	bne.w	8006de2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <xQueueGenericSend+0x1f0>)
 8006eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	e772      	b.n	8006de2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efe:	f000 fc58 	bl	80077b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f02:	f000 ffa1 	bl	8007e48 <xTaskResumeAll>
 8006f06:	e76c      	b.n	8006de2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f0a:	f000 fc52 	bl	80077b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f0e:	f000 ff9b 	bl	8007e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3738      	adds	r7, #56	; 0x38
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08e      	sub	sp, #56	; 0x38
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <xQueueGenericSendFromISR+0x2c>
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4a:	e7fe      	b.n	8006f4a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <xQueueGenericSendFromISR+0x3a>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <xQueueGenericSendFromISR+0x3e>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <xQueueGenericSendFromISR+0x40>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d109      	bne.n	8006f78 <xQueueGenericSendFromISR+0x58>
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	e7fe      	b.n	8006f76 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d103      	bne.n	8006f86 <xQueueGenericSendFromISR+0x66>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <xQueueGenericSendFromISR+0x6a>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <xQueueGenericSendFromISR+0x6c>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x84>
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	e7fe      	b.n	8006fa2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fa4:	f002 fa46 	bl	8009434 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fa8:	f3ef 8211 	mrs	r2, BASEPRI
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61ba      	str	r2, [r7, #24]
 8006fbe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <xQueueGenericSendFromISR+0xb6>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d12c      	bne.n	8007030 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe6:	f000 fb54 	bl	8007692 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d112      	bne.n	800701a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f92f 	bl	8008264 <xTaskRemoveFromEventList>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e007      	b.n	800702a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800701a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800701e:	3301      	adds	r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	b25a      	sxtb	r2, r3
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800702a:	2301      	movs	r3, #1
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800702e:	e001      	b.n	8007034 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007030:	2300      	movs	r3, #0
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007040:	4618      	mov	r0, r3
 8007042:	3738      	adds	r7, #56	; 0x38
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <xQueueGiveFromISR+0x28>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	e7fe      	b.n	800706e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <xQueueGiveFromISR+0x44>
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	e7fe      	b.n	800708a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <xQueueGiveFromISR+0x54>
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <xQueueGiveFromISR+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	e000      	b.n	80070a2 <xQueueGiveFromISR+0x5a>
 80070a0:	2300      	movs	r3, #0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <xQueueGiveFromISR+0x72>
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	e7fe      	b.n	80070b8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ba:	f002 f9bb 	bl	8009434 <vPortValidateInterruptPriority>
	__asm volatile
 80070be:	f3ef 8211 	mrs	r2, BASEPRI
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	617a      	str	r2, [r7, #20]
 80070d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80070d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d22b      	bcs.n	8007142 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d112      	bne.n	800712c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	3324      	adds	r3, #36	; 0x24
 8007112:	4618      	mov	r0, r3
 8007114:	f001 f8a6 	bl	8008264 <xTaskRemoveFromEventList>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00e      	beq.n	800713c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e007      	b.n	800713c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800712c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007130:	3301      	adds	r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	b25a      	sxtb	r2, r3
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800713c:	2301      	movs	r3, #1
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
 8007140:	e001      	b.n	8007146 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007142:	2300      	movs	r3, #0
 8007144:	637b      	str	r3, [r7, #52]	; 0x34
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007152:	4618      	mov	r0, r3
 8007154:	3738      	adds	r7, #56	; 0x38
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08c      	sub	sp, #48	; 0x30
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <xQueueReceive+0x2e>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	623b      	str	r3, [r7, #32]
 8007188:	e7fe      	b.n	8007188 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <xQueueReceive+0x3c>
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <xQueueReceive+0x40>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <xQueueReceive+0x42>
 800719c:	2300      	movs	r3, #0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <xQueueReceive+0x5a>
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	e7fe      	b.n	80071b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071b6:	f001 fa1b 	bl	80085f0 <xTaskGetSchedulerState>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <xQueueReceive+0x6a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <xQueueReceive+0x6e>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <xQueueReceive+0x70>
 80071ca:	2300      	movs	r3, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <xQueueReceive+0x88>
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e7fe      	b.n	80071e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071e4:	f002 f84a 	bl	800927c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01f      	beq.n	8007234 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f8:	f000 fab5 	bl	8007766 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00f      	beq.n	800722c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	3310      	adds	r3, #16
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f827 	bl	8008264 <xTaskRemoveFromEventList>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800721c:	4b3c      	ldr	r3, [pc, #240]	; (8007310 <xQueueReceive+0x1b4>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800722c:	f002 f854 	bl	80092d8 <vPortExitCritical>
				return pdPASS;
 8007230:	2301      	movs	r3, #1
 8007232:	e069      	b.n	8007308 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d103      	bne.n	8007242 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800723a:	f002 f84d 	bl	80092d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800723e:	2300      	movs	r3, #0
 8007240:	e062      	b.n	8007308 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007248:	f107 0310 	add.w	r3, r7, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f001 f86b 	bl	8008328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007256:	f002 f83f 	bl	80092d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800725a:	f000 fde7 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800725e:	f002 f80d 	bl	800927c <vPortEnterCritical>
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007268:	b25b      	sxtb	r3, r3
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d103      	bne.n	8007278 <xQueueReceive+0x11c>
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800727e:	b25b      	sxtb	r3, r3
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d103      	bne.n	800728e <xQueueReceive+0x132>
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800728e:	f002 f823 	bl	80092d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007292:	1d3a      	adds	r2, r7, #4
 8007294:	f107 0310 	add.w	r3, r7, #16
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f85a 	bl	8008354 <xTaskCheckForTimeOut>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d123      	bne.n	80072ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a8:	f000 fad5 	bl	8007856 <prvIsQueueEmpty>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 ff84 	bl	80081c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072c2:	f000 fa76 	bl	80077b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072c6:	f000 fdbf 	bl	8007e48 <xTaskResumeAll>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d189      	bne.n	80071e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80072d0:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <xQueueReceive+0x1b4>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	e780      	b.n	80071e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e4:	f000 fa65 	bl	80077b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072e8:	f000 fdae 	bl	8007e48 <xTaskResumeAll>
 80072ec:	e77a      	b.n	80071e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	f000 fa5f 	bl	80077b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072f4:	f000 fda8 	bl	8007e48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fa:	f000 faac 	bl	8007856 <prvIsQueueEmpty>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	f43f af6f 	beq.w	80071e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007306:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007308:	4618      	mov	r0, r3
 800730a:	3730      	adds	r7, #48	; 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08e      	sub	sp, #56	; 0x38
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <xQueueSemaphoreTake+0x30>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	623b      	str	r3, [r7, #32]
 8007342:	e7fe      	b.n	8007342 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d009      	beq.n	8007360 <xQueueSemaphoreTake+0x4c>
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	e7fe      	b.n	800735e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007360:	f001 f946 	bl	80085f0 <xTaskGetSchedulerState>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d102      	bne.n	8007370 <xQueueSemaphoreTake+0x5c>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <xQueueSemaphoreTake+0x60>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <xQueueSemaphoreTake+0x62>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <xQueueSemaphoreTake+0x7a>
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	e7fe      	b.n	800738c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800738e:	f001 ff75 	bl	800927c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d024      	beq.n	80073e8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	1e5a      	subs	r2, r3, #1
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073ae:	f001 fa91 	bl	80088d4 <pvTaskIncrementMutexHeldCount>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	3310      	adds	r3, #16
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 ff4d 	bl	8008264 <xTaskRemoveFromEventList>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073d0:	4b53      	ldr	r3, [pc, #332]	; (8007520 <xQueueSemaphoreTake+0x20c>)
 80073d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073e0:	f001 ff7a 	bl	80092d8 <vPortExitCritical>
				return pdPASS;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e096      	b.n	8007516 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d110      	bne.n	8007410 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <xQueueSemaphoreTake+0xf4>
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	e7fe      	b.n	8007406 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007408:	f001 ff66 	bl	80092d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800740c:	2300      	movs	r3, #0
 800740e:	e082      	b.n	8007516 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007416:	f107 030c 	add.w	r3, r7, #12
 800741a:	4618      	mov	r0, r3
 800741c:	f000 ff84 	bl	8008328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007424:	f001 ff58 	bl	80092d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007428:	f000 fd00 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800742c:	f001 ff26 	bl	800927c <vPortEnterCritical>
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007436:	b25b      	sxtb	r3, r3
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d103      	bne.n	8007446 <xQueueSemaphoreTake+0x132>
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800744c:	b25b      	sxtb	r3, r3
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d103      	bne.n	800745c <xQueueSemaphoreTake+0x148>
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800745c:	f001 ff3c 	bl	80092d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007460:	463a      	mov	r2, r7
 8007462:	f107 030c 	add.w	r3, r7, #12
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f000 ff73 	bl	8008354 <xTaskCheckForTimeOut>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d132      	bne.n	80074da <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007476:	f000 f9ee 	bl	8007856 <prvIsQueueEmpty>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d026      	beq.n	80074ce <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007488:	f001 fef8 	bl	800927c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f001 f8cb 	bl	800862c <xTaskPriorityInherit>
 8007496:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007498:	f001 ff1e 	bl	80092d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	3324      	adds	r3, #36	; 0x24
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fe8f 	bl	80081c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074ac:	f000 f981 	bl	80077b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074b0:	f000 fcca 	bl	8007e48 <xTaskResumeAll>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f47f af69 	bne.w	800738e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80074bc:	4b18      	ldr	r3, [pc, #96]	; (8007520 <xQueueSemaphoreTake+0x20c>)
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	e75f      	b.n	800738e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074d0:	f000 f96f 	bl	80077b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074d4:	f000 fcb8 	bl	8007e48 <xTaskResumeAll>
 80074d8:	e759      	b.n	800738e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074dc:	f000 f969 	bl	80077b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e0:	f000 fcb2 	bl	8007e48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074e6:	f000 f9b6 	bl	8007856 <prvIsQueueEmpty>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f43f af4e 	beq.w	800738e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80074f8:	f001 fec0 	bl	800927c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80074fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074fe:	f000 f8b0 	bl	8007662 <prvGetDisinheritPriorityAfterTimeout>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f962 	bl	80087d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007510:	f001 fee2 	bl	80092d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007516:	4618      	mov	r0, r3
 8007518:	3738      	adds	r7, #56	; 0x38
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <xQueueReceiveFromISR+0x2a>
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	623b      	str	r3, [r7, #32]
 800754c:	e7fe      	b.n	800754c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d103      	bne.n	800755c <xQueueReceiveFromISR+0x38>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <xQueueReceiveFromISR+0x3c>
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <xQueueReceiveFromISR+0x3e>
 8007560:	2300      	movs	r3, #0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <xQueueReceiveFromISR+0x56>
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e7fe      	b.n	8007578 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757a:	f001 ff5b 	bl	8009434 <vPortValidateInterruptPriority>
	__asm volatile
 800757e:	f3ef 8211 	mrs	r2, BASEPRI
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	61ba      	str	r2, [r7, #24]
 8007594:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007596:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02f      	beq.n	8007606 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075b4:	f000 f8d7 	bl	8007766 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80075c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d112      	bne.n	80075f0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d016      	beq.n	8007600 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	3310      	adds	r3, #16
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fe44 	bl	8008264 <xTaskRemoveFromEventList>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e007      	b.n	8007600 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80075f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f4:	3301      	adds	r3, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	b25a      	sxtb	r2, r3
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007600:	2301      	movs	r3, #1
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
 8007604:	e001      	b.n	800760a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007606:	2300      	movs	r3, #0
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007616:	4618      	mov	r0, r3
 8007618:	3738      	adds	r7, #56	; 0x38
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <vQueueDelete+0x26>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	e7fe      	b.n	8007642 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f95d 	bl	8007904 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f001 ffed 	bl	8009634 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d006      	beq.n	8007680 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	e001      	b.n	8007684 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007684:	68fb      	ldr	r3, [r7, #12]
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10d      	bne.n	80076cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d14d      	bne.n	8007754 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 f81d 	bl	80086fc <xTaskPriorityDisinherit>
 80076c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	e043      	b.n	8007754 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d119      	bne.n	8007706 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6858      	ldr	r0, [r3, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	461a      	mov	r2, r3
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	f002 f8e1 	bl	80098a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d32b      	bcc.n	8007754 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	605a      	str	r2, [r3, #4]
 8007704:	e026      	b.n	8007754 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68d8      	ldr	r0, [r3, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	461a      	mov	r2, r3
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	f002 f8c7 	bl	80098a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	425b      	negs	r3, r3
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d207      	bcs.n	8007742 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	425b      	negs	r3, r3
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d105      	bne.n	8007754 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3b01      	subs	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800775c:	697b      	ldr	r3, [r7, #20]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d018      	beq.n	80077aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d303      	bcc.n	800779a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68d9      	ldr	r1, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	461a      	mov	r2, r3
 80077a4:	6838      	ldr	r0, [r7, #0]
 80077a6:	f002 f87d 	bl	80098a4 <memcpy>
	}
}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077ba:	f001 fd5f 	bl	800927c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077c6:	e011      	b.n	80077ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3324      	adds	r3, #36	; 0x24
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fd45 	bl	8008264 <xTaskRemoveFromEventList>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077e0:	f000 fe18 	bl	8008414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dce9      	bgt.n	80077c8 <prvUnlockQueue+0x16>
 80077f4:	e000      	b.n	80077f8 <prvUnlockQueue+0x46>
					break;
 80077f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	22ff      	movs	r2, #255	; 0xff
 80077fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007800:	f001 fd6a 	bl	80092d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007804:	f001 fd3a 	bl	800927c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800780e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007810:	e011      	b.n	8007836 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d012      	beq.n	8007840 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3310      	adds	r3, #16
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fd20 	bl	8008264 <xTaskRemoveFromEventList>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800782a:	f000 fdf3 	bl	8008414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	3b01      	subs	r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dce9      	bgt.n	8007812 <prvUnlockQueue+0x60>
 800783e:	e000      	b.n	8007842 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007840:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800784a:	f001 fd45 	bl	80092d8 <vPortExitCritical>
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800785e:	f001 fd0d 	bl	800927c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d102      	bne.n	8007870 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800786a:	2301      	movs	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	e001      	b.n	8007874 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007874:	f001 fd30 	bl	80092d8 <vPortExitCritical>

	return xReturn;
 8007878:	68fb      	ldr	r3, [r7, #12]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800788a:	f001 fcf7 	bl	800927c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	429a      	cmp	r2, r3
 8007898:	d102      	bne.n	80078a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800789a:	2301      	movs	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e001      	b.n	80078a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078a4:	f001 fd18 	bl	80092d8 <vPortExitCritical>

	return xReturn;
 80078a8:	68fb      	ldr	r3, [r7, #12]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	e014      	b.n	80078ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078c4:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <vQueueAddToRegistry+0x4c>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078d0:	490b      	ldr	r1, [pc, #44]	; (8007900 <vQueueAddToRegistry+0x4c>)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078da:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vQueueAddToRegistry+0x4c>)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	4413      	add	r3, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078e6:	e005      	b.n	80078f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b07      	cmp	r3, #7
 80078f2:	d9e7      	bls.n	80078c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20004a20 	.word	0x20004a20

08007904 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	e016      	b.n	8007940 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007912:	4a10      	ldr	r2, [pc, #64]	; (8007954 <vQueueUnregisterQueue+0x50>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4413      	add	r3, r2
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d10b      	bne.n	800793a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007922:	4a0c      	ldr	r2, [pc, #48]	; (8007954 <vQueueUnregisterQueue+0x50>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2100      	movs	r1, #0
 8007928:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800792c:	4a09      	ldr	r2, [pc, #36]	; (8007954 <vQueueUnregisterQueue+0x50>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	4413      	add	r3, r2
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
				break;
 8007938:	e005      	b.n	8007946 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b07      	cmp	r3, #7
 8007944:	d9e5      	bls.n	8007912 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20004a20 	.word	0x20004a20

08007958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007968:	f001 fc88 	bl	800927c <vPortEnterCritical>
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007972:	b25b      	sxtb	r3, r3
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007978:	d103      	bne.n	8007982 <vQueueWaitForMessageRestricted+0x2a>
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007988:	b25b      	sxtb	r3, r3
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d103      	bne.n	8007998 <vQueueWaitForMessageRestricted+0x40>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007998:	f001 fc9e 	bl	80092d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fc2f 	bl	8008210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	f7ff fefd 	bl	80077b2 <prvUnlockQueue>
	}
 80079b8:	bf00      	nop
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af04      	add	r7, sp, #16
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <xTaskCreateStatic+0x28>
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	623b      	str	r3, [r7, #32]
 80079e6:	e7fe      	b.n	80079e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <xTaskCreateStatic+0x42>
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e7fe      	b.n	8007a00 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a02:	235c      	movs	r3, #92	; 0x5c
 8007a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b5c      	cmp	r3, #92	; 0x5c
 8007a0a:	d009      	beq.n	8007a20 <xTaskCreateStatic+0x60>
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	61bb      	str	r3, [r7, #24]
 8007a1e:	e7fe      	b.n	8007a1e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01e      	beq.n	8007a66 <xTaskCreateStatic+0xa6>
 8007a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d01b      	beq.n	8007a66 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a40:	2300      	movs	r3, #0
 8007a42:	9303      	str	r3, [sp, #12]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	9302      	str	r3, [sp, #8]
 8007a48:	f107 0314 	add.w	r3, r7, #20
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f850 	bl	8007afe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a60:	f000 f8dc 	bl	8007c1c <prvAddNewTaskToReadyList>
 8007a64:	e001      	b.n	8007a6a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a6a:	697b      	ldr	r3, [r7, #20]
	}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3728      	adds	r7, #40	; 0x28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	; 0x30
 8007a78:	af04      	add	r7, sp, #16
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fd11 	bl	80094b0 <pvPortMalloc>
 8007a8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a96:	205c      	movs	r0, #92	; 0x5c
 8007a98:	f001 fd0a 	bl	80094b0 <pvPortMalloc>
 8007a9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8007aaa:	e005      	b.n	8007ab8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007aac:	6978      	ldr	r0, [r7, #20]
 8007aae:	f001 fdc1 	bl	8009634 <vPortFree>
 8007ab2:	e001      	b.n	8007ab8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d017      	beq.n	8007aee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9303      	str	r3, [sp, #12]
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	9302      	str	r3, [sp, #8]
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	9301      	str	r3, [sp, #4]
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f80e 	bl	8007afe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ae2:	69f8      	ldr	r0, [r7, #28]
 8007ae4:	f000 f89a 	bl	8007c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	e002      	b.n	8007af4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007af4:	69bb      	ldr	r3, [r7, #24]
	}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3720      	adds	r7, #32
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b088      	sub	sp, #32
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	461a      	mov	r2, r3
 8007b16:	21a5      	movs	r1, #165	; 0xa5
 8007b18:	f001 fecf 	bl	80098ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b26:	3b01      	subs	r3, #1
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	f023 0307 	bic.w	r3, r3, #7
 8007b34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <prvInitialiseNewTask+0x56>
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	e7fe      	b.n	8007b52 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01f      	beq.n	8007b9a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e012      	b.n	8007b86 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	7819      	ldrb	r1, [r3, #0]
 8007b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3334      	adds	r3, #52	; 0x34
 8007b70:	460a      	mov	r2, r1
 8007b72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d9e9      	bls.n	8007b60 <prvInitialiseNewTask+0x62>
 8007b8c:	e000      	b.n	8007b90 <prvInitialiseNewTask+0x92>
			{
				break;
 8007b8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b98:	e003      	b.n	8007ba2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	2b37      	cmp	r3, #55	; 0x37
 8007ba6:	d901      	bls.n	8007bac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ba8:	2337      	movs	r3, #55	; 0x37
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	2200      	movs	r2, #0
 8007bbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fdc6 	bl	8006754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	3318      	adds	r3, #24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fdc1 	bl	8006754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	2200      	movs	r2, #0
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	68f9      	ldr	r1, [r7, #12]
 8007bfa:	69b8      	ldr	r0, [r7, #24]
 8007bfc:	f001 fa18 	bl	8009030 <pxPortInitialiseStack>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c12:	bf00      	nop
 8007c14:	3720      	adds	r7, #32
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c24:	f001 fb2a 	bl	800927c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c28:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <prvAddNewTaskToReadyList+0xc4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ce0 <prvAddNewTaskToReadyList+0xc4>)
 8007c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c32:	4b2c      	ldr	r3, [pc, #176]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c40:	4b27      	ldr	r3, [pc, #156]	; (8007ce0 <prvAddNewTaskToReadyList+0xc4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d110      	bne.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c48:	f000 fc08 	bl	800845c <prvInitialiseTaskLists>
 8007c4c:	e00d      	b.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c4e:	4b26      	ldr	r3, [pc, #152]	; (8007ce8 <prvAddNewTaskToReadyList+0xcc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c56:	4b23      	ldr	r3, [pc, #140]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d802      	bhi.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c64:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c6a:	4b20      	ldr	r3, [pc, #128]	; (8007cec <prvAddNewTaskToReadyList+0xd0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	4a1e      	ldr	r2, [pc, #120]	; (8007cec <prvAddNewTaskToReadyList+0xd0>)
 8007c72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c74:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <prvAddNewTaskToReadyList+0xd0>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c80:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <prvAddNewTaskToReadyList+0xd4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d903      	bls.n	8007c90 <prvAddNewTaskToReadyList+0x74>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	4a18      	ldr	r2, [pc, #96]	; (8007cf0 <prvAddNewTaskToReadyList+0xd4>)
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <prvAddNewTaskToReadyList+0xd8>)
 8007c9e:	441a      	add	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fe fd61 	bl	800676e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cac:	f001 fb14 	bl	80092d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <prvAddNewTaskToReadyList+0xcc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d207      	bcs.n	8007cd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <prvAddNewTaskToReadyList+0xdc>)
 8007cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000bbc 	.word	0x20000bbc
 8007ce4:	200006e8 	.word	0x200006e8
 8007ce8:	20000bc8 	.word	0x20000bc8
 8007cec:	20000bd8 	.word	0x20000bd8
 8007cf0:	20000bc4 	.word	0x20000bc4
 8007cf4:	200006ec 	.word	0x200006ec
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d016      	beq.n	8007d3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <vTaskDelay+0x60>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <vTaskDelay+0x2e>
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60bb      	str	r3, [r7, #8]
 8007d28:	e7fe      	b.n	8007d28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007d2a:	f000 f87f 	bl	8007e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fde3 	bl	80088fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d36:	f000 f887 	bl	8007e48 <xTaskResumeAll>
 8007d3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d107      	bne.n	8007d52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <vTaskDelay+0x64>)
 8007d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000be4 	.word	0x20000be4
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	; 0x28
 8007d68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d72:	463a      	mov	r2, r7
 8007d74:	1d39      	adds	r1, r7, #4
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fc96 	bl	80066ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	9202      	str	r2, [sp, #8]
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	460a      	mov	r2, r1
 8007d92:	4920      	ldr	r1, [pc, #128]	; (8007e14 <vTaskStartScheduler+0xb0>)
 8007d94:	4820      	ldr	r0, [pc, #128]	; (8007e18 <vTaskStartScheduler+0xb4>)
 8007d96:	f7ff fe13 	bl	80079c0 <xTaskCreateStatic>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <vTaskStartScheduler+0xb8>)
 8007d9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007da0:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <vTaskStartScheduler+0xb8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e001      	b.n	8007db2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d102      	bne.n	8007dbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007db8:	f000 fdf4 	bl	80089a4 <xTimerCreateTimerTask>
 8007dbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d115      	bne.n	8007df0 <vTaskStartScheduler+0x8c>
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <vTaskStartScheduler+0xbc>)
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <vTaskStartScheduler+0xc0>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007de4:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <vTaskStartScheduler+0xc4>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dea:	f001 f9a9 	bl	8009140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dee:	e00d      	b.n	8007e0c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d109      	bne.n	8007e0c <vTaskStartScheduler+0xa8>
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e7fe      	b.n	8007e0a <vTaskStartScheduler+0xa6>
}
 8007e0c:	bf00      	nop
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	08009994 	.word	0x08009994
 8007e18:	0800842d 	.word	0x0800842d
 8007e1c:	20000be0 	.word	0x20000be0
 8007e20:	20000bdc 	.word	0x20000bdc
 8007e24:	20000bc8 	.word	0x20000bc8
 8007e28:	20000bc0 	.word	0x20000bc0

08007e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <vTaskSuspendAll+0x18>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a03      	ldr	r2, [pc, #12]	; (8007e44 <vTaskSuspendAll+0x18>)
 8007e38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007e3a:	bf00      	nop
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	20000be4 	.word	0x20000be4

08007e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e56:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <xTaskResumeAll+0x2a>
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	e7fe      	b.n	8007e70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e72:	f001 fa03 	bl	800927c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	4a37      	ldr	r2, [pc, #220]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e80:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d162      	bne.n	8007f4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e88:	4b35      	ldr	r3, [pc, #212]	; (8007f60 <xTaskResumeAll+0x118>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d05e      	beq.n	8007f4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e90:	e02f      	b.n	8007ef2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e92:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <xTaskResumeAll+0x11c>)
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fcc2 	bl	8006828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fcbd 	bl	8006828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb2:	4b2d      	ldr	r3, [pc, #180]	; (8007f68 <xTaskResumeAll+0x120>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d903      	bls.n	8007ec2 <xTaskResumeAll+0x7a>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	4a2a      	ldr	r2, [pc, #168]	; (8007f68 <xTaskResumeAll+0x120>)
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <xTaskResumeAll+0x124>)
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7fe fc48 	bl	800676e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee2:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <xTaskResumeAll+0x128>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007eec:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <xTaskResumeAll+0x12c>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <xTaskResumeAll+0x11c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1cb      	bne.n	8007e92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f00:	f000 fb46 	bl	8008590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f04:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <xTaskResumeAll+0x130>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f10:	f000 f846 	bl	8007fa0 <xTaskIncrementTick>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <xTaskResumeAll+0x12c>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f1      	bne.n	8007f10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007f2c:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <xTaskResumeAll+0x130>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <xTaskResumeAll+0x12c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <xTaskResumeAll+0x134>)
 8007f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f4e:	f001 f9c3 	bl	80092d8 <vPortExitCritical>

	return xAlreadyYielded;
 8007f52:	68bb      	ldr	r3, [r7, #8]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000be4 	.word	0x20000be4
 8007f60:	20000bbc 	.word	0x20000bbc
 8007f64:	20000b7c 	.word	0x20000b7c
 8007f68:	20000bc4 	.word	0x20000bc4
 8007f6c:	200006ec 	.word	0x200006ec
 8007f70:	200006e8 	.word	0x200006e8
 8007f74:	20000bd0 	.word	0x20000bd0
 8007f78:	20000bcc 	.word	0x20000bcc
 8007f7c:	e000ed04 	.word	0xe000ed04

08007f80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <xTaskGetTickCount+0x1c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f8c:	687b      	ldr	r3, [r7, #4]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000bc0 	.word	0x20000bc0

08007fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007faa:	4b4e      	ldr	r3, [pc, #312]	; (80080e4 <xTaskIncrementTick+0x144>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 8088 	bne.w	80080c4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fb4:	4b4c      	ldr	r3, [pc, #304]	; (80080e8 <xTaskIncrementTick+0x148>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fbc:	4a4a      	ldr	r2, [pc, #296]	; (80080e8 <xTaskIncrementTick+0x148>)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d11f      	bne.n	8008008 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fc8:	4b48      	ldr	r3, [pc, #288]	; (80080ec <xTaskIncrementTick+0x14c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <xTaskIncrementTick+0x46>
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	e7fe      	b.n	8007fe4 <xTaskIncrementTick+0x44>
 8007fe6:	4b41      	ldr	r3, [pc, #260]	; (80080ec <xTaskIncrementTick+0x14c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	4b40      	ldr	r3, [pc, #256]	; (80080f0 <xTaskIncrementTick+0x150>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a3e      	ldr	r2, [pc, #248]	; (80080ec <xTaskIncrementTick+0x14c>)
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	4a3e      	ldr	r2, [pc, #248]	; (80080f0 <xTaskIncrementTick+0x150>)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <xTaskIncrementTick+0x154>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3301      	adds	r3, #1
 8008000:	4a3c      	ldr	r2, [pc, #240]	; (80080f4 <xTaskIncrementTick+0x154>)
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	f000 fac4 	bl	8008590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008008:	4b3b      	ldr	r3, [pc, #236]	; (80080f8 <xTaskIncrementTick+0x158>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	429a      	cmp	r2, r3
 8008010:	d349      	bcc.n	80080a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008012:	4b36      	ldr	r3, [pc, #216]	; (80080ec <xTaskIncrementTick+0x14c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801c:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <xTaskIncrementTick+0x158>)
 800801e:	f04f 32ff 	mov.w	r2, #4294967295
 8008022:	601a      	str	r2, [r3, #0]
					break;
 8008024:	e03f      	b.n	80080a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008026:	4b31      	ldr	r3, [pc, #196]	; (80080ec <xTaskIncrementTick+0x14c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	429a      	cmp	r2, r3
 800803c:	d203      	bcs.n	8008046 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800803e:	4a2e      	ldr	r2, [pc, #184]	; (80080f8 <xTaskIncrementTick+0x158>)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008044:	e02f      	b.n	80080a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	3304      	adds	r3, #4
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fbec 	bl	8006828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	3318      	adds	r3, #24
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fbe3 	bl	8006828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	4b25      	ldr	r3, [pc, #148]	; (80080fc <xTaskIncrementTick+0x15c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d903      	bls.n	8008076 <xTaskIncrementTick+0xd6>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <xTaskIncrementTick+0x15c>)
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <xTaskIncrementTick+0x160>)
 8008084:	441a      	add	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fe fb6e 	bl	800676e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <xTaskIncrementTick+0x164>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	429a      	cmp	r2, r3
 800809e:	d3b8      	bcc.n	8008012 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a4:	e7b5      	b.n	8008012 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080a6:	4b17      	ldr	r3, [pc, #92]	; (8008104 <xTaskIncrementTick+0x164>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4914      	ldr	r1, [pc, #80]	; (8008100 <xTaskIncrementTick+0x160>)
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d907      	bls.n	80080ce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80080be:	2301      	movs	r3, #1
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	e004      	b.n	80080ce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080c4:	4b10      	ldr	r3, [pc, #64]	; (8008108 <xTaskIncrementTick+0x168>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4a0f      	ldr	r2, [pc, #60]	; (8008108 <xTaskIncrementTick+0x168>)
 80080cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <xTaskIncrementTick+0x16c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080da:	697b      	ldr	r3, [r7, #20]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000be4 	.word	0x20000be4
 80080e8:	20000bc0 	.word	0x20000bc0
 80080ec:	20000b74 	.word	0x20000b74
 80080f0:	20000b78 	.word	0x20000b78
 80080f4:	20000bd4 	.word	0x20000bd4
 80080f8:	20000bdc 	.word	0x20000bdc
 80080fc:	20000bc4 	.word	0x20000bc4
 8008100:	200006ec 	.word	0x200006ec
 8008104:	200006e8 	.word	0x200006e8
 8008108:	20000bcc 	.word	0x20000bcc
 800810c:	20000bd0 	.word	0x20000bd0

08008110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008116:	4b27      	ldr	r3, [pc, #156]	; (80081b4 <vTaskSwitchContext+0xa4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800811e:	4b26      	ldr	r3, [pc, #152]	; (80081b8 <vTaskSwitchContext+0xa8>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008124:	e040      	b.n	80081a8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008126:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <vTaskSwitchContext+0xa8>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812c:	4b23      	ldr	r3, [pc, #140]	; (80081bc <vTaskSwitchContext+0xac>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	e00f      	b.n	8008154 <vTaskSwitchContext+0x44>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <vTaskSwitchContext+0x3e>
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	e7fe      	b.n	800814c <vTaskSwitchContext+0x3c>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3b01      	subs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	491a      	ldr	r1, [pc, #104]	; (80081c0 <vTaskSwitchContext+0xb0>)
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	440b      	add	r3, r1
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0e5      	beq.n	8008134 <vTaskSwitchContext+0x24>
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <vTaskSwitchContext+0xb0>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3308      	adds	r3, #8
 800818a:	429a      	cmp	r2, r3
 800818c:	d104      	bne.n	8008198 <vTaskSwitchContext+0x88>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	605a      	str	r2, [r3, #4]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <vTaskSwitchContext+0xb4>)
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	4a06      	ldr	r2, [pc, #24]	; (80081bc <vTaskSwitchContext+0xac>)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6013      	str	r3, [r2, #0]
}
 80081a8:	bf00      	nop
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	20000be4 	.word	0x20000be4
 80081b8:	20000bd0 	.word	0x20000bd0
 80081bc:	20000bc4 	.word	0x20000bc4
 80081c0:	200006ec 	.word	0x200006ec
 80081c4:	200006e8 	.word	0x200006e8

080081c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <vTaskPlaceOnEventList+0x24>
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	e7fe      	b.n	80081ea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <vTaskPlaceOnEventList+0x44>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3318      	adds	r3, #24
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe fade 	bl	80067b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081fa:	2101      	movs	r1, #1
 80081fc:	6838      	ldr	r0, [r7, #0]
 80081fe:	f000 fb7d 	bl	80088fc <prvAddCurrentTaskToDelayedList>
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	200006e8 	.word	0x200006e8

08008210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <vTaskPlaceOnEventListRestricted+0x26>
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	e7fe      	b.n	8008234 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <vTaskPlaceOnEventListRestricted+0x50>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3318      	adds	r3, #24
 800823c:	4619      	mov	r1, r3
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7fe fa95 	bl	800676e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	68b8      	ldr	r0, [r7, #8]
 8008254:	f000 fb52 	bl	80088fc <prvAddCurrentTaskToDelayedList>
	}
 8008258:	bf00      	nop
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	200006e8 	.word	0x200006e8

08008264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <xTaskRemoveFromEventList+0x2a>
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	e7fe      	b.n	800828c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	3318      	adds	r3, #24
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fac8 	bl	8006828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008298:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <xTaskRemoveFromEventList+0xac>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d11d      	bne.n	80082dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fabf 	bl	8006828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ae:	4b19      	ldr	r3, [pc, #100]	; (8008314 <xTaskRemoveFromEventList+0xb0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d903      	bls.n	80082be <xTaskRemoveFromEventList+0x5a>
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	4a16      	ldr	r2, [pc, #88]	; (8008314 <xTaskRemoveFromEventList+0xb0>)
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4a13      	ldr	r2, [pc, #76]	; (8008318 <xTaskRemoveFromEventList+0xb4>)
 80082cc:	441a      	add	r2, r3
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fe fa4a 	bl	800676e <vListInsertEnd>
 80082da:	e005      	b.n	80082e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3318      	adds	r3, #24
 80082e0:	4619      	mov	r1, r3
 80082e2:	480e      	ldr	r0, [pc, #56]	; (800831c <xTaskRemoveFromEventList+0xb8>)
 80082e4:	f7fe fa43 	bl	800676e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <xTaskRemoveFromEventList+0xbc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d905      	bls.n	8008302 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <xTaskRemoveFromEventList+0xc0>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e001      	b.n	8008306 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008302:	2300      	movs	r3, #0
 8008304:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008306:	697b      	ldr	r3, [r7, #20]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000be4 	.word	0x20000be4
 8008314:	20000bc4 	.word	0x20000bc4
 8008318:	200006ec 	.word	0x200006ec
 800831c:	20000b7c 	.word	0x20000b7c
 8008320:	200006e8 	.word	0x200006e8
 8008324:	20000bd0 	.word	0x20000bd0

08008328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <vTaskInternalSetTimeOutState+0x24>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <vTaskInternalSetTimeOutState+0x28>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	605a      	str	r2, [r3, #4]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20000bd4 	.word	0x20000bd4
 8008350:	20000bc0 	.word	0x20000bc0

08008354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d109      	bne.n	8008378 <xTaskCheckForTimeOut+0x24>
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	e7fe      	b.n	8008376 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <xTaskCheckForTimeOut+0x3e>
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	e7fe      	b.n	8008390 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008392:	f000 ff73 	bl	800927c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008396:	4b1d      	ldr	r3, [pc, #116]	; (800840c <xTaskCheckForTimeOut+0xb8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d102      	bne.n	80083b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]
 80083b4:	e023      	b.n	80083fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <xTaskCheckForTimeOut+0xbc>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d007      	beq.n	80083d2 <xTaskCheckForTimeOut+0x7e>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d302      	bcc.n	80083d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083cc:	2301      	movs	r3, #1
 80083ce:	61fb      	str	r3, [r7, #28]
 80083d0:	e015      	b.n	80083fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d20b      	bcs.n	80083f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	1ad2      	subs	r2, r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff9d 	bl	8008328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	e004      	b.n	80083fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083fe:	f000 ff6b 	bl	80092d8 <vPortExitCritical>

	return xReturn;
 8008402:	69fb      	ldr	r3, [r7, #28]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000bc0 	.word	0x20000bc0
 8008410:	20000bd4 	.word	0x20000bd4

08008414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008418:	4b03      	ldr	r3, [pc, #12]	; (8008428 <vTaskMissedYield+0x14>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
}
 800841e:	bf00      	nop
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	20000bd0 	.word	0x20000bd0

0800842c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008434:	f000 f852 	bl	80084dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008438:	4b06      	ldr	r3, [pc, #24]	; (8008454 <prvIdleTask+0x28>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d9f9      	bls.n	8008434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <prvIdleTask+0x2c>)
 8008442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008450:	e7f0      	b.n	8008434 <prvIdleTask+0x8>
 8008452:	bf00      	nop
 8008454:	200006ec 	.word	0x200006ec
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008462:	2300      	movs	r3, #0
 8008464:	607b      	str	r3, [r7, #4]
 8008466:	e00c      	b.n	8008482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4a12      	ldr	r2, [pc, #72]	; (80084bc <prvInitialiseTaskLists+0x60>)
 8008474:	4413      	add	r3, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe f94c 	bl	8006714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3301      	adds	r3, #1
 8008480:	607b      	str	r3, [r7, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b37      	cmp	r3, #55	; 0x37
 8008486:	d9ef      	bls.n	8008468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008488:	480d      	ldr	r0, [pc, #52]	; (80084c0 <prvInitialiseTaskLists+0x64>)
 800848a:	f7fe f943 	bl	8006714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800848e:	480d      	ldr	r0, [pc, #52]	; (80084c4 <prvInitialiseTaskLists+0x68>)
 8008490:	f7fe f940 	bl	8006714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008494:	480c      	ldr	r0, [pc, #48]	; (80084c8 <prvInitialiseTaskLists+0x6c>)
 8008496:	f7fe f93d 	bl	8006714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800849a:	480c      	ldr	r0, [pc, #48]	; (80084cc <prvInitialiseTaskLists+0x70>)
 800849c:	f7fe f93a 	bl	8006714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084a0:	480b      	ldr	r0, [pc, #44]	; (80084d0 <prvInitialiseTaskLists+0x74>)
 80084a2:	f7fe f937 	bl	8006714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <prvInitialiseTaskLists+0x78>)
 80084a8:	4a05      	ldr	r2, [pc, #20]	; (80084c0 <prvInitialiseTaskLists+0x64>)
 80084aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <prvInitialiseTaskLists+0x7c>)
 80084ae:	4a05      	ldr	r2, [pc, #20]	; (80084c4 <prvInitialiseTaskLists+0x68>)
 80084b0:	601a      	str	r2, [r3, #0]
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	200006ec 	.word	0x200006ec
 80084c0:	20000b4c 	.word	0x20000b4c
 80084c4:	20000b60 	.word	0x20000b60
 80084c8:	20000b7c 	.word	0x20000b7c
 80084cc:	20000b90 	.word	0x20000b90
 80084d0:	20000ba8 	.word	0x20000ba8
 80084d4:	20000b74 	.word	0x20000b74
 80084d8:	20000b78 	.word	0x20000b78

080084dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084e2:	e019      	b.n	8008518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084e4:	f000 feca 	bl	800927c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <prvCheckTasksWaitingTermination+0x4c>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe f997 	bl	8006828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <prvCheckTasksWaitingTermination+0x50>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3b01      	subs	r3, #1
 8008500:	4a0a      	ldr	r2, [pc, #40]	; (800852c <prvCheckTasksWaitingTermination+0x50>)
 8008502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <prvCheckTasksWaitingTermination+0x54>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3b01      	subs	r3, #1
 800850a:	4a09      	ldr	r2, [pc, #36]	; (8008530 <prvCheckTasksWaitingTermination+0x54>)
 800850c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800850e:	f000 fee3 	bl	80092d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f80e 	bl	8008534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <prvCheckTasksWaitingTermination+0x54>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e1      	bne.n	80084e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20000b90 	.word	0x20000b90
 800852c:	20000bbc 	.word	0x20000bbc
 8008530:	20000ba4 	.word	0x20000ba4

08008534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008542:	2b00      	cmp	r3, #0
 8008544:	d108      	bne.n	8008558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854a:	4618      	mov	r0, r3
 800854c:	f001 f872 	bl	8009634 <vPortFree>
				vPortFree( pxTCB );
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f86f 	bl	8009634 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008556:	e017      	b.n	8008588 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800855e:	2b01      	cmp	r3, #1
 8008560:	d103      	bne.n	800856a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 f866 	bl	8009634 <vPortFree>
	}
 8008568:	e00e      	b.n	8008588 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008570:	2b02      	cmp	r3, #2
 8008572:	d009      	beq.n	8008588 <prvDeleteTCB+0x54>
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e7fe      	b.n	8008586 <prvDeleteTCB+0x52>
	}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <prvResetNextTaskUnblockTime+0x38>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <prvResetNextTaskUnblockTime+0x3c>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085a8:	e008      	b.n	80085bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <prvResetNextTaskUnblockTime+0x38>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a04      	ldr	r2, [pc, #16]	; (80085cc <prvResetNextTaskUnblockTime+0x3c>)
 80085ba:	6013      	str	r3, [r2, #0]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20000b74 	.word	0x20000b74
 80085cc:	20000bdc 	.word	0x20000bdc

080085d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <xTaskGetCurrentTaskHandle+0x1c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80085dc:	687b      	ldr	r3, [r7, #4]
	}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	200006e8 	.word	0x200006e8

080085f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <xTaskGetSchedulerState+0x34>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d102      	bne.n	8008604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085fe:	2301      	movs	r3, #1
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	e008      	b.n	8008616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008604:	4b08      	ldr	r3, [pc, #32]	; (8008628 <xTaskGetSchedulerState+0x38>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800860c:	2302      	movs	r3, #2
 800860e:	607b      	str	r3, [r7, #4]
 8008610:	e001      	b.n	8008616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008612:	2300      	movs	r3, #0
 8008614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008616:	687b      	ldr	r3, [r7, #4]
	}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000bc8 	.word	0x20000bc8
 8008628:	20000be4 	.word	0x20000be4

0800862c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d051      	beq.n	80086e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008646:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <xTaskPriorityInherit+0xc4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	429a      	cmp	r2, r3
 800864e:	d241      	bcs.n	80086d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	db06      	blt.n	8008666 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008658:	4b25      	ldr	r3, [pc, #148]	; (80086f0 <xTaskPriorityInherit+0xc4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	6959      	ldr	r1, [r3, #20]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4a1f      	ldr	r2, [pc, #124]	; (80086f4 <xTaskPriorityInherit+0xc8>)
 8008678:	4413      	add	r3, r2
 800867a:	4299      	cmp	r1, r3
 800867c:	d122      	bne.n	80086c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	3304      	adds	r3, #4
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe f8d0 	bl	8006828 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008688:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <xTaskPriorityInherit+0xc4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <xTaskPriorityInherit+0xcc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d903      	bls.n	80086a6 <xTaskPriorityInherit+0x7a>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	4a15      	ldr	r2, [pc, #84]	; (80086f8 <xTaskPriorityInherit+0xcc>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <xTaskPriorityInherit+0xc8>)
 80086b4:	441a      	add	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	3304      	adds	r3, #4
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f7fe f856 	bl	800676e <vListInsertEnd>
 80086c2:	e004      	b.n	80086ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <xTaskPriorityInherit+0xc4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e008      	b.n	80086e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <xTaskPriorityInherit+0xc4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	429a      	cmp	r2, r3
 80086e0:	d201      	bcs.n	80086e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086e2:	2301      	movs	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086e6:	68fb      	ldr	r3, [r7, #12]
	}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200006e8 	.word	0x200006e8
 80086f4:	200006ec 	.word	0x200006ec
 80086f8:	20000bc4 	.word	0x20000bc4

080086fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d054      	beq.n	80087bc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008712:	4b2d      	ldr	r3, [pc, #180]	; (80087c8 <xTaskPriorityDisinherit+0xcc>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	429a      	cmp	r2, r3
 800871a:	d009      	beq.n	8008730 <xTaskPriorityDisinherit+0x34>
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e7fe      	b.n	800872e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <xTaskPriorityDisinherit+0x50>
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	60bb      	str	r3, [r7, #8]
 800874a:	e7fe      	b.n	800874a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008750:	1e5a      	subs	r2, r3, #1
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875e:	429a      	cmp	r2, r3
 8008760:	d02c      	beq.n	80087bc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008766:	2b00      	cmp	r3, #0
 8008768:	d128      	bne.n	80087bc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3304      	adds	r3, #4
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe f85a 	bl	8006828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <xTaskPriorityDisinherit+0xd0>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <xTaskPriorityDisinherit+0xa0>
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <xTaskPriorityDisinherit+0xd0>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <xTaskPriorityDisinherit+0xd4>)
 80087aa:	441a      	add	r2, r3
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7fd ffdb 	bl	800676e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087bc:	697b      	ldr	r3, [r7, #20]
	}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	200006e8 	.word	0x200006e8
 80087cc:	20000bc4 	.word	0x20000bc4
 80087d0:	200006ec 	.word	0x200006ec

080087d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087e2:	2301      	movs	r3, #1
 80087e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d068      	beq.n	80088be <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d109      	bne.n	8008808 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e7fe      	b.n	8008806 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d902      	bls.n	8008818 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e002      	b.n	800881e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	429a      	cmp	r2, r3
 8008826:	d04a      	beq.n	80088be <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	429a      	cmp	r2, r3
 8008830:	d145      	bne.n	80088be <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008832:	4b25      	ldr	r3, [pc, #148]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	429a      	cmp	r2, r3
 800883a:	d109      	bne.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	e7fe      	b.n	800884e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	db04      	blt.n	800886e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	6959      	ldr	r1, [r3, #20]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4a13      	ldr	r2, [pc, #76]	; (80088cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800887e:	4413      	add	r3, r2
 8008880:	4299      	cmp	r1, r3
 8008882:	d11c      	bne.n	80088be <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	3304      	adds	r3, #4
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd ffcd 	bl	8006828 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d903      	bls.n	80088a2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4a07      	ldr	r2, [pc, #28]	; (80088cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80088b0:	441a      	add	r2, r3
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4619      	mov	r1, r3
 80088b8:	4610      	mov	r0, r2
 80088ba:	f7fd ff58 	bl	800676e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088be:	bf00      	nop
 80088c0:	3720      	adds	r7, #32
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	200006e8 	.word	0x200006e8
 80088cc:	200006ec 	.word	0x200006ec
 80088d0:	20000bc4 	.word	0x20000bc4

080088d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088e6:	3201      	adds	r2, #1
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80088ea:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80088ec:	681b      	ldr	r3, [r3, #0]
	}
 80088ee:	4618      	mov	r0, r3
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	200006e8 	.word	0x200006e8

080088fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <prvAddCurrentTaskToDelayedList+0x90>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800890c:	4b20      	ldr	r3, [pc, #128]	; (8008990 <prvAddCurrentTaskToDelayedList+0x94>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7fd ff88 	bl	8006828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891e:	d10a      	bne.n	8008936 <prvAddCurrentTaskToDelayedList+0x3a>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008926:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <prvAddCurrentTaskToDelayedList+0x94>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4819      	ldr	r0, [pc, #100]	; (8008994 <prvAddCurrentTaskToDelayedList+0x98>)
 8008930:	f7fd ff1d 	bl	800676e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008934:	e026      	b.n	8008984 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4413      	add	r3, r2
 800893c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <prvAddCurrentTaskToDelayedList+0x94>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	429a      	cmp	r2, r3
 800894c:	d209      	bcs.n	8008962 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <prvAddCurrentTaskToDelayedList+0x94>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3304      	adds	r3, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f7fd ff2b 	bl	80067b6 <vListInsert>
}
 8008960:	e010      	b.n	8008984 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <prvAddCurrentTaskToDelayedList+0x94>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3304      	adds	r3, #4
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f7fd ff21 	bl	80067b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008974:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	d202      	bcs.n	8008984 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800897e:	4a08      	ldr	r2, [pc, #32]	; (80089a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	6013      	str	r3, [r2, #0]
}
 8008984:	bf00      	nop
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000bc0 	.word	0x20000bc0
 8008990:	200006e8 	.word	0x200006e8
 8008994:	20000ba8 	.word	0x20000ba8
 8008998:	20000b78 	.word	0x20000b78
 800899c:	20000b74 	.word	0x20000b74
 80089a0:	20000bdc 	.word	0x20000bdc

080089a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08a      	sub	sp, #40	; 0x28
 80089a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089ae:	f000 faff 	bl	8008fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <xTimerCreateTimerTask+0x80>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d021      	beq.n	80089fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089c2:	1d3a      	adds	r2, r7, #4
 80089c4:	f107 0108 	add.w	r1, r7, #8
 80089c8:	f107 030c 	add.w	r3, r7, #12
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fd fe87 	bl	80066e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	9202      	str	r2, [sp, #8]
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	2302      	movs	r3, #2
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	2300      	movs	r3, #0
 80089e2:	460a      	mov	r2, r1
 80089e4:	4910      	ldr	r1, [pc, #64]	; (8008a28 <xTimerCreateTimerTask+0x84>)
 80089e6:	4811      	ldr	r0, [pc, #68]	; (8008a2c <xTimerCreateTimerTask+0x88>)
 80089e8:	f7fe ffea 	bl	80079c0 <xTaskCreateStatic>
 80089ec:	4602      	mov	r2, r0
 80089ee:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <xTimerCreateTimerTask+0x8c>)
 80089f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <xTimerCreateTimerTask+0x8c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089fa:	2301      	movs	r3, #1
 80089fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <xTimerCreateTimerTask+0x74>
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	e7fe      	b.n	8008a16 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008a18:	697b      	ldr	r3, [r7, #20]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000c18 	.word	0x20000c18
 8008a28:	0800999c 	.word	0x0800999c
 8008a2c:	08008b65 	.word	0x08008b65
 8008a30:	20000c1c 	.word	0x20000c1c

08008a34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d109      	bne.n	8008a60 <xTimerGenericCommand+0x2c>
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	623b      	str	r3, [r7, #32]
 8008a5e:	e7fe      	b.n	8008a5e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <xTimerGenericCommand+0x94>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d02a      	beq.n	8008abe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	dc18      	bgt.n	8008aac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a7a:	f7ff fdb9 	bl	80085f0 <xTaskGetSchedulerState>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d109      	bne.n	8008a98 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a84:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <xTimerGenericCommand+0x94>)
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	f107 0110 	add.w	r1, r7, #16
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a90:	f7fe f94c 	bl	8006d2c <xQueueGenericSend>
 8008a94:	6278      	str	r0, [r7, #36]	; 0x24
 8008a96:	e012      	b.n	8008abe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a98:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <xTimerGenericCommand+0x94>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	f107 0110 	add.w	r1, r7, #16
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7fe f942 	bl	8006d2c <xQueueGenericSend>
 8008aa8:	6278      	str	r0, [r7, #36]	; 0x24
 8008aaa:	e008      	b.n	8008abe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008aac:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <xTimerGenericCommand+0x94>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	f107 0110 	add.w	r1, r7, #16
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	f7fe fa32 	bl	8006f20 <xQueueGenericSendFromISR>
 8008abc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3728      	adds	r7, #40	; 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20000c18 	.word	0x20000c18

08008acc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af02      	add	r7, sp, #8
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad6:	4b22      	ldr	r3, [pc, #136]	; (8008b60 <prvProcessExpiredTimer+0x94>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fd fe9f 	bl	8006828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d021      	beq.n	8008b3c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	18d1      	adds	r1, r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	6978      	ldr	r0, [r7, #20]
 8008b06:	f000 f8d1 	bl	8008cac <prvInsertTimerInActiveList>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01e      	beq.n	8008b4e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b10:	2300      	movs	r3, #0
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	2300      	movs	r3, #0
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6978      	ldr	r0, [r7, #20]
 8008b1c:	f7ff ff8a 	bl	8008a34 <xTimerGenericCommand>
 8008b20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d112      	bne.n	8008b4e <prvProcessExpiredTimer+0x82>
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e7fe      	b.n	8008b3a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	6978      	ldr	r0, [r7, #20]
 8008b54:	4798      	blx	r3
}
 8008b56:	bf00      	nop
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000c10 	.word	0x20000c10

08008b64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f857 	bl	8008c24 <prvGetNextExpireTime>
 8008b76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f803 	bl	8008b88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b82:	f000 f8d5 	bl	8008d30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b86:	e7f1      	b.n	8008b6c <prvTimerTask+0x8>

08008b88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b92:	f7ff f94b 	bl	8007e2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b96:	f107 0308 	add.w	r3, r7, #8
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f866 	bl	8008c6c <prvSampleTimeNow>
 8008ba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d130      	bne.n	8008c0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <prvProcessTimerOrBlockTask+0x3c>
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d806      	bhi.n	8008bc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bb6:	f7ff f947 	bl	8007e48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff ff85 	bl	8008acc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bc2:	e024      	b.n	8008c0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d008      	beq.n	8008bdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <prvProcessTimerOrBlockTask+0x90>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <prvProcessTimerOrBlockTask+0x50>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <prvProcessTimerOrBlockTask+0x52>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <prvProcessTimerOrBlockTask+0x94>)
 8008bde:	6818      	ldr	r0, [r3, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4619      	mov	r1, r3
 8008bea:	f7fe feb5 	bl	8007958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bee:	f7ff f92b 	bl	8007e48 <xTaskResumeAll>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <prvProcessTimerOrBlockTask+0x98>)
 8008bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	f3bf 8f6f 	isb	sy
}
 8008c08:	e001      	b.n	8008c0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c0a:	f7ff f91d 	bl	8007e48 <xTaskResumeAll>
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000c14 	.word	0x20000c14
 8008c1c:	20000c18 	.word	0x20000c18
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c2c:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <prvGetNextExpireTime+0x44>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <prvGetNextExpireTime+0x16>
 8008c36:	2201      	movs	r2, #1
 8008c38:	e000      	b.n	8008c3c <prvGetNextExpireTime+0x18>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c48:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <prvGetNextExpireTime+0x44>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e001      	b.n	8008c58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c58:	68fb      	ldr	r3, [r7, #12]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000c10 	.word	0x20000c10

08008c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c74:	f7ff f984 	bl	8007f80 <xTaskGetTickCount>
 8008c78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <prvSampleTimeNow+0x3c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d205      	bcs.n	8008c90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c84:	f000 f930 	bl	8008ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	e002      	b.n	8008c96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c96:	4a04      	ldr	r2, [pc, #16]	; (8008ca8 <prvSampleTimeNow+0x3c>)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000c20 	.word	0x20000c20

08008cac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d812      	bhi.n	8008cf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	1ad2      	subs	r2, r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d302      	bcc.n	8008ce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	e01b      	b.n	8008d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <prvInsertTimerInActiveList+0x7c>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f7fd fd60 	bl	80067b6 <vListInsert>
 8008cf6:	e012      	b.n	8008d1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d206      	bcs.n	8008d0e <prvInsertTimerInActiveList+0x62>
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d302      	bcc.n	8008d0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e007      	b.n	8008d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <prvInsertTimerInActiveList+0x80>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f7fd fd4c 	bl	80067b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d1e:	697b      	ldr	r3, [r7, #20]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000c14 	.word	0x20000c14
 8008d2c:	20000c10 	.word	0x20000c10

08008d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08e      	sub	sp, #56	; 0x38
 8008d34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d36:	e0c6      	b.n	8008ec6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da17      	bge.n	8008d6e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d3e:	1d3b      	adds	r3, r7, #4
 8008d40:	3304      	adds	r3, #4
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <prvProcessReceivedCommands+0x2e>
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	61fb      	str	r3, [r7, #28]
 8008d5c:	e7fe      	b.n	8008d5c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d64:	6850      	ldr	r0, [r2, #4]
 8008d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d68:	6892      	ldr	r2, [r2, #8]
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f2c0 80a7 	blt.w	8008ec4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d004      	beq.n	8008d8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	3304      	adds	r3, #4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fd fd4e 	bl	8006828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff ff6c 	bl	8008c6c <prvSampleTimeNow>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	f200 8094 	bhi.w	8008ec6 <prvProcessReceivedCommands+0x196>
 8008d9e:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <prvProcessReceivedCommands+0x74>)
 8008da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da4:	08008dcd 	.word	0x08008dcd
 8008da8:	08008dcd 	.word	0x08008dcd
 8008dac:	08008dcd 	.word	0x08008dcd
 8008db0:	08008e3f 	.word	0x08008e3f
 8008db4:	08008e53 	.word	0x08008e53
 8008db8:	08008e9b 	.word	0x08008e9b
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008dcd 	.word	0x08008dcd
 8008dc4:	08008e3f 	.word	0x08008e3f
 8008dc8:	08008e53 	.word	0x08008e53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	18d1      	adds	r1, r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dec:	f7ff ff5e 	bl	8008cac <prvInsertTimerInActiveList>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d067      	beq.n	8008ec6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d05c      	beq.n	8008ec6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	441a      	add	r2, r3
 8008e14:	2300      	movs	r3, #0
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e1e:	f7ff fe09 	bl	8008a34 <xTimerGenericCommand>
 8008e22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d14d      	bne.n	8008ec6 <prvProcessReceivedCommands+0x196>
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	e7fe      	b.n	8008e3c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e50:	e039      	b.n	8008ec6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e58:	f043 0301 	orr.w	r3, r3, #1
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <prvProcessReceivedCommands+0x156>
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	e7fe      	b.n	8008e84 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	18d1      	adds	r1, r2, r3
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e94:	f7ff ff0a 	bl	8008cac <prvInsertTimerInActiveList>
					break;
 8008e98:	e015      	b.n	8008ec6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eaa:	f000 fbc3 	bl	8009634 <vPortFree>
 8008eae:	e00a      	b.n	8008ec6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ec2:	e000      	b.n	8008ec6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ec4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <prvProcessReceivedCommands+0x1b4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	1d39      	adds	r1, r7, #4
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f944 	bl	800715c <xQueueReceive>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f47f af2e 	bne.w	8008d38 <prvProcessReceivedCommands+0x8>
	}
}
 8008edc:	bf00      	nop
 8008ede:	3730      	adds	r7, #48	; 0x30
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000c18 	.word	0x20000c18

08008ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eee:	e047      	b.n	8008f80 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ef0:	4b2d      	ldr	r3, [pc, #180]	; (8008fa8 <prvSwitchTimerLists+0xc0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efa:	4b2b      	ldr	r3, [pc, #172]	; (8008fa8 <prvSwitchTimerLists+0xc0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fd fc8d 	bl	8006828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d02d      	beq.n	8008f80 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d90e      	bls.n	8008f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f42:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <prvSwitchTimerLists+0xc0>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fd fc32 	bl	80067b6 <vListInsert>
 8008f52:	e015      	b.n	8008f80 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff fd68 	bl	8008a34 <xTimerGenericCommand>
 8008f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <prvSwitchTimerLists+0x98>
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	603b      	str	r3, [r7, #0]
 8008f7e:	e7fe      	b.n	8008f7e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <prvSwitchTimerLists+0xc0>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1b2      	bne.n	8008ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f8a:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <prvSwitchTimerLists+0xc0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f90:	4b06      	ldr	r3, [pc, #24]	; (8008fac <prvSwitchTimerLists+0xc4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a04      	ldr	r2, [pc, #16]	; (8008fa8 <prvSwitchTimerLists+0xc0>)
 8008f96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f98:	4a04      	ldr	r2, [pc, #16]	; (8008fac <prvSwitchTimerLists+0xc4>)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6013      	str	r3, [r2, #0]
}
 8008f9e:	bf00      	nop
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000c10 	.word	0x20000c10
 8008fac:	20000c14 	.word	0x20000c14

08008fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fb6:	f000 f961 	bl	800927c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <prvCheckForValidListAndQueue+0x60>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d120      	bne.n	8009004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fc2:	4814      	ldr	r0, [pc, #80]	; (8009014 <prvCheckForValidListAndQueue+0x64>)
 8008fc4:	f7fd fba6 	bl	8006714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fc8:	4813      	ldr	r0, [pc, #76]	; (8009018 <prvCheckForValidListAndQueue+0x68>)
 8008fca:	f7fd fba3 	bl	8006714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <prvCheckForValidListAndQueue+0x6c>)
 8008fd0:	4a10      	ldr	r2, [pc, #64]	; (8009014 <prvCheckForValidListAndQueue+0x64>)
 8008fd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fd4:	4b12      	ldr	r3, [pc, #72]	; (8009020 <prvCheckForValidListAndQueue+0x70>)
 8008fd6:	4a10      	ldr	r2, [pc, #64]	; (8009018 <prvCheckForValidListAndQueue+0x68>)
 8008fd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	4b11      	ldr	r3, [pc, #68]	; (8009024 <prvCheckForValidListAndQueue+0x74>)
 8008fe0:	4a11      	ldr	r2, [pc, #68]	; (8009028 <prvCheckForValidListAndQueue+0x78>)
 8008fe2:	2110      	movs	r1, #16
 8008fe4:	200a      	movs	r0, #10
 8008fe6:	f7fd fcb1 	bl	800694c <xQueueGenericCreateStatic>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <prvCheckForValidListAndQueue+0x60>)
 8008fee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <prvCheckForValidListAndQueue+0x60>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <prvCheckForValidListAndQueue+0x60>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	490b      	ldr	r1, [pc, #44]	; (800902c <prvCheckForValidListAndQueue+0x7c>)
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fc58 	bl	80078b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009004:	f000 f968 	bl	80092d8 <vPortExitCritical>
}
 8009008:	bf00      	nop
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20000c18 	.word	0x20000c18
 8009014:	20000be8 	.word	0x20000be8
 8009018:	20000bfc 	.word	0x20000bfc
 800901c:	20000c10 	.word	0x20000c10
 8009020:	20000c14 	.word	0x20000c14
 8009024:	20000cc4 	.word	0x20000cc4
 8009028:	20000c24 	.word	0x20000c24
 800902c:	080099a4 	.word	0x080099a4

08009030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3b04      	subs	r3, #4
 8009040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3b04      	subs	r3, #4
 800904e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f023 0201 	bic.w	r2, r3, #1
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3b04      	subs	r3, #4
 800905e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009060:	4a0c      	ldr	r2, [pc, #48]	; (8009094 <pxPortInitialiseStack+0x64>)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b14      	subs	r3, #20
 800906a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3b04      	subs	r3, #4
 8009076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f06f 0202 	mvn.w	r2, #2
 800907e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3b20      	subs	r3, #32
 8009084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009086:	68fb      	ldr	r3, [r7, #12]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	08009099 	.word	0x08009099

08009098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090a2:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <prvTaskExitError+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090aa:	d009      	beq.n	80090c0 <prvTaskExitError+0x28>
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e7fe      	b.n	80090be <prvTaskExitError+0x26>
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090d2:	bf00      	nop
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0fc      	beq.n	80090d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	2000000c 	.word	0x2000000c
 80090ec:	00000000 	.word	0x00000000

080090f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <pxCurrentTCBConst2>)
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	6808      	ldr	r0, [r1, #0]
 80090f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	f380 8809 	msr	PSP, r0
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f04f 0000 	mov.w	r0, #0
 8009106:	f380 8811 	msr	BASEPRI, r0
 800910a:	4770      	bx	lr
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst2>:
 8009110:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009118:	4808      	ldr	r0, [pc, #32]	; (800913c <prvPortStartFirstTask+0x24>)
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	6800      	ldr	r0, [r0, #0]
 800911e:	f380 8808 	msr	MSP, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8814 	msr	CONTROL, r0
 800912a:	b662      	cpsie	i
 800912c:	b661      	cpsie	f
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	df00      	svc	0
 8009138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800913a:	bf00      	nop
 800913c:	e000ed08 	.word	0xe000ed08

08009140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009146:	4b44      	ldr	r3, [pc, #272]	; (8009258 <xPortStartScheduler+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a44      	ldr	r2, [pc, #272]	; (800925c <xPortStartScheduler+0x11c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d109      	bne.n	8009164 <xPortStartScheduler+0x24>
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	e7fe      	b.n	8009162 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009164:	4b3c      	ldr	r3, [pc, #240]	; (8009258 <xPortStartScheduler+0x118>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a3d      	ldr	r2, [pc, #244]	; (8009260 <xPortStartScheduler+0x120>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d109      	bne.n	8009182 <xPortStartScheduler+0x42>
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	e7fe      	b.n	8009180 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009182:	4b38      	ldr	r3, [pc, #224]	; (8009264 <xPortStartScheduler+0x124>)
 8009184:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	b2db      	uxtb	r3, r3
 800918c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	22ff      	movs	r2, #255	; 0xff
 8009192:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	4b30      	ldr	r3, [pc, #192]	; (8009268 <xPortStartScheduler+0x128>)
 80091a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091aa:	4b30      	ldr	r3, [pc, #192]	; (800926c <xPortStartScheduler+0x12c>)
 80091ac:	2207      	movs	r2, #7
 80091ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091b0:	e009      	b.n	80091c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80091b2:	4b2e      	ldr	r3, [pc, #184]	; (800926c <xPortStartScheduler+0x12c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	4a2c      	ldr	r2, [pc, #176]	; (800926c <xPortStartScheduler+0x12c>)
 80091ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ce:	2b80      	cmp	r3, #128	; 0x80
 80091d0:	d0ef      	beq.n	80091b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091d2:	4b26      	ldr	r3, [pc, #152]	; (800926c <xPortStartScheduler+0x12c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1c3 0307 	rsb	r3, r3, #7
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d009      	beq.n	80091f2 <xPortStartScheduler+0xb2>
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	e7fe      	b.n	80091f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091f2:	4b1e      	ldr	r3, [pc, #120]	; (800926c <xPortStartScheduler+0x12c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	4a1c      	ldr	r2, [pc, #112]	; (800926c <xPortStartScheduler+0x12c>)
 80091fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091fc:	4b1b      	ldr	r3, [pc, #108]	; (800926c <xPortStartScheduler+0x12c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009204:	4a19      	ldr	r2, [pc, #100]	; (800926c <xPortStartScheduler+0x12c>)
 8009206:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	b2da      	uxtb	r2, r3
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009210:	4b17      	ldr	r3, [pc, #92]	; (8009270 <xPortStartScheduler+0x130>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a16      	ldr	r2, [pc, #88]	; (8009270 <xPortStartScheduler+0x130>)
 8009216:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800921a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800921c:	4b14      	ldr	r3, [pc, #80]	; (8009270 <xPortStartScheduler+0x130>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a13      	ldr	r2, [pc, #76]	; (8009270 <xPortStartScheduler+0x130>)
 8009222:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009226:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009228:	f000 f8d6 	bl	80093d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800922c:	4b11      	ldr	r3, [pc, #68]	; (8009274 <xPortStartScheduler+0x134>)
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009232:	f000 f8f5 	bl	8009420 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <xPortStartScheduler+0x138>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a0f      	ldr	r2, [pc, #60]	; (8009278 <xPortStartScheduler+0x138>)
 800923c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009240:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009242:	f7ff ff69 	bl	8009118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009246:	f7fe ff63 	bl	8008110 <vTaskSwitchContext>
	prvTaskExitError();
 800924a:	f7ff ff25 	bl	8009098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	e000ed00 	.word	0xe000ed00
 800925c:	410fc271 	.word	0x410fc271
 8009260:	410fc270 	.word	0x410fc270
 8009264:	e000e400 	.word	0xe000e400
 8009268:	20000d14 	.word	0x20000d14
 800926c:	20000d18 	.word	0x20000d18
 8009270:	e000ed20 	.word	0xe000ed20
 8009274:	2000000c 	.word	0x2000000c
 8009278:	e000ef34 	.word	0xe000ef34

0800927c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <vPortEnterCritical+0x54>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	4a0d      	ldr	r2, [pc, #52]	; (80092d0 <vPortEnterCritical+0x54>)
 800929c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800929e:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <vPortEnterCritical+0x54>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d10e      	bne.n	80092c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <vPortEnterCritical+0x58>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <vPortEnterCritical+0x48>
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	603b      	str	r3, [r7, #0]
 80092c2:	e7fe      	b.n	80092c2 <vPortEnterCritical+0x46>
	}
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	2000000c 	.word	0x2000000c
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <vPortExitCritical+0x4c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <vPortExitCritical+0x22>
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	e7fe      	b.n	80092f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <vPortExitCritical+0x4c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3b01      	subs	r3, #1
 8009300:	4a08      	ldr	r2, [pc, #32]	; (8009324 <vPortExitCritical+0x4c>)
 8009302:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <vPortExitCritical+0x4c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <vPortExitCritical+0x3e>
 800930c:	2300      	movs	r3, #0
 800930e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	2000000c 	.word	0x2000000c
	...

08009330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009330:	f3ef 8009 	mrs	r0, PSP
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	4b15      	ldr	r3, [pc, #84]	; (8009390 <pxCurrentTCBConst>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	f01e 0f10 	tst.w	lr, #16
 8009340:	bf08      	it	eq
 8009342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	6010      	str	r0, [r2, #0]
 800934c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009354:	f380 8811 	msr	BASEPRI, r0
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f7fe fed6 	bl	8008110 <vTaskSwitchContext>
 8009364:	f04f 0000 	mov.w	r0, #0
 8009368:	f380 8811 	msr	BASEPRI, r0
 800936c:	bc09      	pop	{r0, r3}
 800936e:	6819      	ldr	r1, [r3, #0]
 8009370:	6808      	ldr	r0, [r1, #0]
 8009372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009376:	f01e 0f10 	tst.w	lr, #16
 800937a:	bf08      	it	eq
 800937c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009380:	f380 8809 	msr	PSP, r0
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	f3af 8000 	nop.w

08009390 <pxCurrentTCBConst>:
 8009390:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093b0:	f7fe fdf6 	bl	8007fa0 <xTaskIncrementTick>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093ba:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <SysTick_Handler+0x3c>)
 80093bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093dc:	4b0b      	ldr	r3, [pc, #44]	; (800940c <vPortSetupTimerInterrupt+0x34>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093e2:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <vPortSetupTimerInterrupt+0x38>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093e8:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <vPortSetupTimerInterrupt+0x3c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a0a      	ldr	r2, [pc, #40]	; (8009418 <vPortSetupTimerInterrupt+0x40>)
 80093ee:	fba2 2303 	umull	r2, r3, r2, r3
 80093f2:	099b      	lsrs	r3, r3, #6
 80093f4:	4a09      	ldr	r2, [pc, #36]	; (800941c <vPortSetupTimerInterrupt+0x44>)
 80093f6:	3b01      	subs	r3, #1
 80093f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093fa:	4b04      	ldr	r3, [pc, #16]	; (800940c <vPortSetupTimerInterrupt+0x34>)
 80093fc:	2207      	movs	r2, #7
 80093fe:	601a      	str	r2, [r3, #0]
}
 8009400:	bf00      	nop
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	e000e010 	.word	0xe000e010
 8009410:	e000e018 	.word	0xe000e018
 8009414:	20000000 	.word	0x20000000
 8009418:	10624dd3 	.word	0x10624dd3
 800941c:	e000e014 	.word	0xe000e014

08009420 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009420:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009430 <vPortEnableVFP+0x10>
 8009424:	6801      	ldr	r1, [r0, #0]
 8009426:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800942a:	6001      	str	r1, [r0, #0]
 800942c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800942e:	bf00      	nop
 8009430:	e000ed88 	.word	0xe000ed88

08009434 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800943a:	f3ef 8305 	mrs	r3, IPSR
 800943e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b0f      	cmp	r3, #15
 8009444:	d913      	bls.n	800946e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009446:	4a16      	ldr	r2, [pc, #88]	; (80094a0 <vPortValidateInterruptPriority+0x6c>)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009450:	4b14      	ldr	r3, [pc, #80]	; (80094a4 <vPortValidateInterruptPriority+0x70>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	7afa      	ldrb	r2, [r7, #11]
 8009456:	429a      	cmp	r2, r3
 8009458:	d209      	bcs.n	800946e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	607b      	str	r3, [r7, #4]
 800946c:	e7fe      	b.n	800946c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800946e:	4b0e      	ldr	r3, [pc, #56]	; (80094a8 <vPortValidateInterruptPriority+0x74>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009476:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <vPortValidateInterruptPriority+0x78>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d909      	bls.n	8009492 <vPortValidateInterruptPriority+0x5e>
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	603b      	str	r3, [r7, #0]
 8009490:	e7fe      	b.n	8009490 <vPortValidateInterruptPriority+0x5c>
	}
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	e000e3f0 	.word	0xe000e3f0
 80094a4:	20000d14 	.word	0x20000d14
 80094a8:	e000ed0c 	.word	0xe000ed0c
 80094ac:	20000d18 	.word	0x20000d18

080094b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08a      	sub	sp, #40	; 0x28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094bc:	f7fe fcb6 	bl	8007e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094c0:	4b57      	ldr	r3, [pc, #348]	; (8009620 <pvPortMalloc+0x170>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094c8:	f000 f90c 	bl	80096e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094cc:	4b55      	ldr	r3, [pc, #340]	; (8009624 <pvPortMalloc+0x174>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4013      	ands	r3, r2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 808c 	bne.w	80095f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01c      	beq.n	800951a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80094e0:	2208      	movs	r2, #8
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d013      	beq.n	800951a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f023 0307 	bic.w	r3, r3, #7
 80094f8:	3308      	adds	r3, #8
 80094fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <pvPortMalloc+0x6a>
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e7fe      	b.n	8009518 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d068      	beq.n	80095f2 <pvPortMalloc+0x142>
 8009520:	4b41      	ldr	r3, [pc, #260]	; (8009628 <pvPortMalloc+0x178>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	429a      	cmp	r2, r3
 8009528:	d863      	bhi.n	80095f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800952a:	4b40      	ldr	r3, [pc, #256]	; (800962c <pvPortMalloc+0x17c>)
 800952c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800952e:	4b3f      	ldr	r3, [pc, #252]	; (800962c <pvPortMalloc+0x17c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009534:	e004      	b.n	8009540 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d903      	bls.n	8009552 <pvPortMalloc+0xa2>
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f1      	bne.n	8009536 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009552:	4b33      	ldr	r3, [pc, #204]	; (8009620 <pvPortMalloc+0x170>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009558:	429a      	cmp	r2, r3
 800955a:	d04a      	beq.n	80095f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2208      	movs	r2, #8
 8009562:	4413      	add	r3, r2
 8009564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	685a      	ldr	r2, [r3, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	1ad2      	subs	r2, r2, r3
 8009576:	2308      	movs	r3, #8
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	429a      	cmp	r2, r3
 800957c:	d91e      	bls.n	80095bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800957e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4413      	add	r3, r2
 8009584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	2b00      	cmp	r3, #0
 800958e:	d009      	beq.n	80095a4 <pvPortMalloc+0xf4>
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	e7fe      	b.n	80095a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	1ad2      	subs	r2, r2, r3
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095b6:	69b8      	ldr	r0, [r7, #24]
 80095b8:	f000 f8f6 	bl	80097a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <pvPortMalloc+0x178>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	4a18      	ldr	r2, [pc, #96]	; (8009628 <pvPortMalloc+0x178>)
 80095c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095ca:	4b17      	ldr	r3, [pc, #92]	; (8009628 <pvPortMalloc+0x178>)
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4b18      	ldr	r3, [pc, #96]	; (8009630 <pvPortMalloc+0x180>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d203      	bcs.n	80095de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095d6:	4b14      	ldr	r3, [pc, #80]	; (8009628 <pvPortMalloc+0x178>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a15      	ldr	r2, [pc, #84]	; (8009630 <pvPortMalloc+0x180>)
 80095dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	4b10      	ldr	r3, [pc, #64]	; (8009624 <pvPortMalloc+0x174>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095f2:	f7fe fc29 	bl	8007e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d009      	beq.n	8009614 <pvPortMalloc+0x164>
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e7fe      	b.n	8009612 <pvPortMalloc+0x162>
	return pvReturn;
 8009614:	69fb      	ldr	r3, [r7, #28]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3728      	adds	r7, #40	; 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20004924 	.word	0x20004924
 8009624:	20004930 	.word	0x20004930
 8009628:	20004928 	.word	0x20004928
 800962c:	2000491c 	.word	0x2000491c
 8009630:	2000492c 	.word	0x2000492c

08009634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d046      	beq.n	80096d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009646:	2308      	movs	r3, #8
 8009648:	425b      	negs	r3, r3
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4413      	add	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	4b20      	ldr	r3, [pc, #128]	; (80096dc <vPortFree+0xa8>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4013      	ands	r3, r2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <vPortFree+0x42>
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	e7fe      	b.n	8009674 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d009      	beq.n	8009692 <vPortFree+0x5e>
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	60bb      	str	r3, [r7, #8]
 8009690:	e7fe      	b.n	8009690 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	4b11      	ldr	r3, [pc, #68]	; (80096dc <vPortFree+0xa8>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4013      	ands	r3, r2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d019      	beq.n	80096d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d115      	bne.n	80096d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <vPortFree+0xa8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	43db      	mvns	r3, r3
 80096b2:	401a      	ands	r2, r3
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096b8:	f7fe fbb8 	bl	8007e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <vPortFree+0xac>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4413      	add	r3, r2
 80096c6:	4a06      	ldr	r2, [pc, #24]	; (80096e0 <vPortFree+0xac>)
 80096c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096ca:	6938      	ldr	r0, [r7, #16]
 80096cc:	f000 f86c 	bl	80097a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80096d0:	f7fe fbba 	bl	8007e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096d4:	bf00      	nop
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20004930 	.word	0x20004930
 80096e0:	20004928 	.word	0x20004928

080096e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096f0:	4b27      	ldr	r3, [pc, #156]	; (8009790 <prvHeapInit+0xac>)
 80096f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00c      	beq.n	8009718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0307 	bic.w	r3, r3, #7
 800970a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	4a1f      	ldr	r2, [pc, #124]	; (8009790 <prvHeapInit+0xac>)
 8009714:	4413      	add	r3, r2
 8009716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800971c:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <prvHeapInit+0xb0>)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009722:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <prvHeapInit+0xb0>)
 8009724:	2200      	movs	r2, #0
 8009726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	4413      	add	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009730:	2208      	movs	r2, #8
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	1a9b      	subs	r3, r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0307 	bic.w	r3, r3, #7
 800973e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4a15      	ldr	r2, [pc, #84]	; (8009798 <prvHeapInit+0xb4>)
 8009744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <prvHeapInit+0xb4>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2200      	movs	r2, #0
 800974c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800974e:	4b12      	ldr	r3, [pc, #72]	; (8009798 <prvHeapInit+0xb4>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <prvHeapInit+0xb4>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <prvHeapInit+0xb8>)
 8009772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <prvHeapInit+0xbc>)
 800977a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <prvHeapInit+0xc0>)
 800977e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	20000d1c 	.word	0x20000d1c
 8009794:	2000491c 	.word	0x2000491c
 8009798:	20004924 	.word	0x20004924
 800979c:	2000492c 	.word	0x2000492c
 80097a0:	20004928 	.word	0x20004928
 80097a4:	20004930 	.word	0x20004930

080097a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097b0:	4b28      	ldr	r3, [pc, #160]	; (8009854 <prvInsertBlockIntoFreeList+0xac>)
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e002      	b.n	80097bc <prvInsertBlockIntoFreeList+0x14>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d8f7      	bhi.n	80097b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	4413      	add	r3, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d108      	bne.n	80097ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	441a      	add	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	441a      	add	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d118      	bne.n	8009830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b15      	ldr	r3, [pc, #84]	; (8009858 <prvInsertBlockIntoFreeList+0xb0>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d00d      	beq.n	8009826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	441a      	add	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	e008      	b.n	8009838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvInsertBlockIntoFreeList+0xb0>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e003      	b.n	8009838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	429a      	cmp	r2, r3
 800983e:	d002      	beq.n	8009846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	2000491c 	.word	0x2000491c
 8009858:	20004924 	.word	0x20004924

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4e0d      	ldr	r6, [pc, #52]	; (8009894 <__libc_init_array+0x38>)
 8009860:	4c0d      	ldr	r4, [pc, #52]	; (8009898 <__libc_init_array+0x3c>)
 8009862:	1ba4      	subs	r4, r4, r6
 8009864:	10a4      	asrs	r4, r4, #2
 8009866:	2500      	movs	r5, #0
 8009868:	42a5      	cmp	r5, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	4e0b      	ldr	r6, [pc, #44]	; (800989c <__libc_init_array+0x40>)
 800986e:	4c0c      	ldr	r4, [pc, #48]	; (80098a0 <__libc_init_array+0x44>)
 8009870:	f000 f82c 	bl	80098cc <_init>
 8009874:	1ba4      	subs	r4, r4, r6
 8009876:	10a4      	asrs	r4, r4, #2
 8009878:	2500      	movs	r5, #0
 800987a:	42a5      	cmp	r5, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009884:	4798      	blx	r3
 8009886:	3501      	adds	r5, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800988e:	4798      	blx	r3
 8009890:	3501      	adds	r5, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	08009a98 	.word	0x08009a98
 8009898:	08009a98 	.word	0x08009a98
 800989c:	08009a98 	.word	0x08009a98
 80098a0:	08009a9c 	.word	0x08009a9c

080098a4 <memcpy>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	1e43      	subs	r3, r0, #1
 80098a8:	440a      	add	r2, r1
 80098aa:	4291      	cmp	r1, r2
 80098ac:	d100      	bne.n	80098b0 <memcpy+0xc>
 80098ae:	bd10      	pop	{r4, pc}
 80098b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b8:	e7f7      	b.n	80098aa <memcpy+0x6>

080098ba <memset>:
 80098ba:	4402      	add	r2, r0
 80098bc:	4603      	mov	r3, r0
 80098be:	4293      	cmp	r3, r2
 80098c0:	d100      	bne.n	80098c4 <memset+0xa>
 80098c2:	4770      	bx	lr
 80098c4:	f803 1b01 	strb.w	r1, [r3], #1
 80098c8:	e7f9      	b.n	80098be <memset+0x4>
	...

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
