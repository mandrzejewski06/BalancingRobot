
BalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e314  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800e4b8  0800e4b8  0001e4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea40  0800ea40  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea48  0800ea48  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea48  0800ea48  0001ea48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea4c  0800ea4c  0001ea4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ea50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  200001e0  0800ec30  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004cf0  0800ec30  00024cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020335  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f59  00000000  00000000  00040545  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001838  00000000  00000000  000444a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  00045cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f14  00000000  00000000  00047350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014d67  00000000  00000000  00061264  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a88e  00000000  00000000  00075fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e60  00000000  00000000  001108d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e49c 	.word	0x0800e49c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800e49c 	.word	0x0800e49c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <DRV8834_Init>:
#include "DRV8834.h"

#define ABS(value) (value < 0 ? -value : value)

void DRV8834_Init(StepMotor_t *stepMotor, TIM_HandleTypeDef *htim, uint32_t channel)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	stepMotor->PWM_timer = htim;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	61da      	str	r2, [r3, #28]
	stepMotor->PWM_timerChannel = channel;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	621a      	str	r2, [r3, #32]
	stepMotor->state = STOPPED;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
	stepMotor->direction = FORWARD;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	705a      	strb	r2, [r3, #1]
	stepMotor->last_counter = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DRV8834_InitPins>:

void DRV8834_InitPins(StepMotor_t *stepMotor, uint16_t dirPin, GPIO_TypeDef* dirPort, uint16_t m0Pin, GPIO_TypeDef* m0Port, uint16_t m1Pin, GPIO_TypeDef* m1Port)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	817b      	strh	r3, [r7, #10]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	813b      	strh	r3, [r7, #8]
	stepMotor->step_motor_pins.DIR_PIN = dirPin;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	897a      	ldrh	r2, [r7, #10]
 8000ea6:	809a      	strh	r2, [r3, #4]
	stepMotor->step_motor_pins.DIR_PORT = dirPort;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	609a      	str	r2, [r3, #8]

	stepMotor->step_motor_pins.M0_PIN = m0Pin;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	893a      	ldrh	r2, [r7, #8]
 8000eb2:	819a      	strh	r2, [r3, #12]
	stepMotor->step_motor_pins.M0_PORT = m0Port;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	611a      	str	r2, [r3, #16]

	stepMotor->step_motor_pins.M1_PIN = m1Pin;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8bba      	ldrh	r2, [r7, #28]
 8000ebe:	829a      	strh	r2, [r3, #20]
	stepMotor->step_motor_pins.M1_PORT = m1Port;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a3a      	ldr	r2, [r7, #32]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <DeinitializePin>:

void DeinitializePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint16_t Mode)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b088      	sub	sp, #32
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	803b      	strh	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

	if(Mode == GPIO_MODE_OUTPUT_PP)
 8000ef2:	883b      	ldrh	r3, [r7, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d113      	bne.n	8000f20 <DeinitializePin+0x4e>
	{
		HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4619      	mov	r1, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f003 ff39 	bl	8004d74 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8000f06:	883b      	ldrh	r3, [r7, #0]
 8000f08:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f003 fda9 	bl	8004a70 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_Pin;
		GPIO_InitStruct.Mode = Mode;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 8000f1e:	e00e      	b.n	8000f3e <DeinitializePin+0x6c>
	else if (Mode == GPIO_MODE_INPUT)
 8000f20:	883b      	ldrh	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10b      	bne.n	8000f3e <DeinitializePin+0x6c>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = Mode;
 8000f2a:	883b      	ldrh	r3, [r7, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f003 fd99 	bl	8004a70 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <DRV8834_SetMicrostep>:

uint8_t DRV8834_SetMicrostep(StepMotor_t *stepMotor, uint8_t microstep)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
     *  1  Z    32
     *
     *  Z = high impedance mode (M0 is three-state)
     */

	if(stepMotor->state == CONTINOUS_RUN)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <DRV8834_SetMicrostep+0x18>
	{
		return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e08d      	b.n	800107c <DRV8834_SetMicrostep+0x134>
	}

	switch(microstep)
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	2b1f      	cmp	r3, #31
 8000f66:	d86e      	bhi.n	8001046 <DRV8834_SetMicrostep+0xfe>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <DRV8834_SetMicrostep+0x28>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000ff1 	.word	0x08000ff1
 8000f74:	08001013 	.word	0x08001013
 8000f78:	08001047 	.word	0x08001047
 8000f7c:	08001035 	.word	0x08001035
 8000f80:	08001047 	.word	0x08001047
 8000f84:	08001047 	.word	0x08001047
 8000f88:	08001047 	.word	0x08001047
 8000f8c:	08000ff1 	.word	0x08000ff1
 8000f90:	08001047 	.word	0x08001047
 8000f94:	08001047 	.word	0x08001047
 8000f98:	08001047 	.word	0x08001047
 8000f9c:	08001047 	.word	0x08001047
 8000fa0:	08001047 	.word	0x08001047
 8000fa4:	08001047 	.word	0x08001047
 8000fa8:	08001047 	.word	0x08001047
 8000fac:	08001013 	.word	0x08001013
 8000fb0:	08001047 	.word	0x08001047
 8000fb4:	08001047 	.word	0x08001047
 8000fb8:	08001047 	.word	0x08001047
 8000fbc:	08001047 	.word	0x08001047
 8000fc0:	08001047 	.word	0x08001047
 8000fc4:	08001047 	.word	0x08001047
 8000fc8:	08001047 	.word	0x08001047
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001047 	.word	0x08001047
 8000fd4:	08001047 	.word	0x08001047
 8000fd8:	08001047 	.word	0x08001047
 8000fdc:	08001047 	.word	0x08001047
 8000fe0:	08001047 	.word	0x08001047
 8000fe4:	08001047 	.word	0x08001047
 8000fe8:	08001047 	.word	0x08001047
 8000fec:	08001035 	.word	0x08001035
	{
	case 1:
	case 8:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6918      	ldr	r0, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff ff69 	bl	8000ed2 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_RESET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6918      	ldr	r0, [r3, #16]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	899b      	ldrh	r3, [r3, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f003 ff94 	bl	8004f38 <HAL_GPIO_WritePin>
		break;
 8001010:	e01b      	b.n	800104a <DRV8834_SetMicrostep+0x102>
	case 2:
	case 16:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_OUTPUT_PP);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6918      	ldr	r0, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	899b      	ldrh	r3, [r3, #12]
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff ff58 	bl	8000ed2 <DeinitializePin>
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_PIN_SET);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6918      	ldr	r0, [r3, #16]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	f003 ff83 	bl	8004f38 <HAL_GPIO_WritePin>
		break;
 8001032:	e00a      	b.n	800104a <DRV8834_SetMicrostep+0x102>
	case 4:
	case 32:
		DeinitializePin(stepMotor->step_motor_pins.M0_PORT, stepMotor->step_motor_pins.M0_PIN, GPIO_MODE_INPUT);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6918      	ldr	r0, [r3, #16]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	899b      	ldrh	r3, [r3, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff ff47 	bl	8000ed2 <DeinitializePin>
		break;
 8001044:	e001      	b.n	800104a <DRV8834_SetMicrostep+0x102>
	default:
		return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e018      	b.n	800107c <DRV8834_SetMicrostep+0x134>
	}

	if(microstep < 8)
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d808      	bhi.n	8001062 <DRV8834_SetMicrostep+0x11a>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_RESET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6998      	ldr	r0, [r3, #24]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	8a9b      	ldrh	r3, [r3, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f003 ff6c 	bl	8004f38 <HAL_GPIO_WritePin>
 8001060:	e007      	b.n	8001072 <DRV8834_SetMicrostep+0x12a>
	}
	else
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.M1_PORT, stepMotor->step_motor_pins.M1_PIN, GPIO_PIN_SET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6998      	ldr	r0, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a9b      	ldrh	r3, [r3, #20]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	f003 ff63 	bl	8004f38 <HAL_GPIO_WritePin>
	}

	stepMotor->microstep = microstep;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <DRV8834_StopMotor>:

void DRV8834_StopMotor(StepMotor_t *stepMotor)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	stepMotor->state = STOPPED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, 0);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <DRV8834_StopMotor+0x22>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
 80010a4:	e018      	b.n	80010d8 <DRV8834_StopMotor+0x54>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d105      	bne.n	80010ba <DRV8834_StopMotor+0x36>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	e00e      	b.n	80010d8 <DRV8834_StopMotor+0x54>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d105      	bne.n	80010ce <DRV8834_StopMotor+0x4a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80010cc:	e004      	b.n	80010d8 <DRV8834_StopMotor+0x54>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Stop(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f005 fc58 	bl	8006998 <HAL_TIM_PWM_Stop>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DRV8834_SetDirection>:

void DRV8834_SetDirection(StepMotor_t *stepMotor, StepMotorDirection_t dir)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	if((dir == FORWARD) || (dir == BACKWARD))
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <DRV8834_SetDirection+0x18>
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10a      	bne.n	800111e <DRV8834_SetDirection+0x2e>
	{
		HAL_GPIO_WritePin(stepMotor->step_motor_pins.DIR_PORT, stepMotor->step_motor_pins.DIR_PIN, dir);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6898      	ldr	r0, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	4619      	mov	r1, r3
 8001114:	f003 ff10 	bl	8004f38 <HAL_GPIO_WritePin>
		stepMotor->direction = dir;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	78fa      	ldrb	r2, [r7, #3]
 800111c:	705a      	strb	r2, [r3, #1]
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <DRV8834_SetSpeed>:

void DRV8834_SetSpeed(StepMotor_t *stepMotor, int32_t speed)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(speed == 0)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d108      	bne.n	800114a <DRV8834_SetSpeed+0x22>
	{
		if(stepMotor->state == STOPPED) return;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 808c 	beq.w	800125a <DRV8834_SetSpeed+0x132>

		DRV8834_StopMotor(stepMotor);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff9e 	bl	8001084 <DRV8834_StopMotor>
		return;
 8001148:	e088      	b.n	800125c <DRV8834_SetSpeed+0x134>
	}
	else if((speed < 0) && (stepMotor->direction == FORWARD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da08      	bge.n	8001162 <DRV8834_SetSpeed+0x3a>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <DRV8834_SetSpeed+0x3a>
	{
		DRV8834_SetDirection(stepMotor, BACKWARD);
 8001158:	2101      	movs	r1, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffc8 	bl	80010f0 <DRV8834_SetDirection>
 8001160:	e00a      	b.n	8001178 <DRV8834_SetSpeed+0x50>
	}
	else if((speed > 0) && (stepMotor->direction == BACKWARD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd07      	ble.n	8001178 <DRV8834_SetSpeed+0x50>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d103      	bne.n	8001178 <DRV8834_SetSpeed+0x50>
	{
		DRV8834_SetDirection(stepMotor, FORWARD);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffbc 	bl	80010f0 <DRV8834_SetDirection>
	}

	if(speed < 0)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da04      	bge.n	8001188 <DRV8834_SetSpeed+0x60>
	{
		speed = ABS(speed);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	bfb8      	it	lt
 8001184:	425b      	neglt	r3, r3
 8001186:	603b      	str	r3, [r7, #0]
	}
	if(speed > DRV8834_MAX_SPEED)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b0a      	cmp	r3, #10
 800118c:	dd01      	ble.n	8001192 <DRV8834_SetSpeed+0x6a>
	{
		speed = DRV8834_MAX_SPEED;
 800118e:	230a      	movs	r3, #10
 8001190:	603b      	str	r3, [r7, #0]
	}


	freq = (speed * (stepMotor->microstep*DRV8834_MOTOR_MAX_FREQ_HZ - DRV8834_MOTOR_MIN_FREQ_HZ)) / DRV8834_MAX_SPEED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001198:	461a      	mov	r2, r3
 800119a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800119e:	fb03 f302 	mul.w	r3, r3, r2
 80011a2:	3b01      	subs	r3, #1
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <DRV8834_SetSpeed+0x13c>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	1092      	asrs	r2, r2, #2
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	60fb      	str	r3, [r7, #12]

#if USING_WHICH_TIMERS == APB1
	counter = PCLK_PRESCALER*HAL_RCC_GetPCLK1Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
 80011b8:	f005 fade 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 80011bc:	4603      	mov	r3, r0
 80011be:	005a      	lsls	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	60bb      	str	r3, [r7, #8]
#elif USING_WHICH_TIMERS == APB2
		counter = PCLK_PRESCALER*HAL_RCC_GetPCLK2Freq() / (stepMotor->PWM_timer->Init.Prescaler * freq);
#else
#error "Choose between APB1 timers or APB2 timers or reimplement code if using both"
#endif
	if(stepMotor->last_counter != counter)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d03f      	beq.n	800125c <DRV8834_SetSpeed+0x134>
	{
		__HAL_TIM_SET_COUNTER(stepMotor->PWM_timer, 0);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(stepMotor->PWM_timer, counter - 1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	3a01      	subs	r2, #1
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	3a01      	subs	r2, #1
 80011fa:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepMotor->PWM_timer, stepMotor->PWM_timerChannel, (counter/2) - 1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <DRV8834_SetSpeed+0xec>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	085a      	lsrs	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3a01      	subs	r2, #1
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
 8001212:	e01e      	b.n	8001252 <DRV8834_SetSpeed+0x12a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d107      	bne.n	800122c <DRV8834_SetSpeed+0x104>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	085a      	lsrs	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3a01      	subs	r2, #1
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
 800122a:	e012      	b.n	8001252 <DRV8834_SetSpeed+0x12a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d107      	bne.n	8001244 <DRV8834_SetSpeed+0x11c>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	085a      	lsrs	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3a01      	subs	r2, #1
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
 8001242:	e006      	b.n	8001252 <DRV8834_SetSpeed+0x12a>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	085a      	lsrs	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3a01      	subs	r2, #1
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
		stepMotor->last_counter = counter;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
 8001258:	e000      	b.n	800125c <DRV8834_SetSpeed+0x134>
		if(stepMotor->state == STOPPED) return;
 800125a:	bf00      	nop
	}
}
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	66666667 	.word	0x66666667

08001268 <DRV8834_StartMotor>:

void DRV8834_StartMotor(StepMotor_t *stepMotor, int32_t speed)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	stepMotor->state = CONTINOUS_RUN;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]

	DRV8834_SetSpeed(stepMotor, speed);
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff54 	bl	8001128 <DRV8834_SetSpeed>

	HAL_TIM_PWM_Start(stepMotor->PWM_timer, stepMotor->PWM_timerChannel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f005 fb52 	bl	8006934 <HAL_TIM_PWM_Start>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <LSM6_InitEx>:
#include "LSM6.h"
#include "main.h"
#include "math.h"

bool LSM6_InitEx(I2C_HandleTypeDef *i2c, LSM6_t *LSM6, deviceType device, sa0State sa0)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	460b      	mov	r3, r1
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	4613      	mov	r3, r2
 80012ac:	71bb      	strb	r3, [r7, #6]
	LSM6->i2c = i2c;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	601a      	str	r2, [r3, #0]
	LSM6->_device = device;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	711a      	strb	r2, [r3, #4]
	LSM6->io_timeout = DEFAULT_TIMEOUT;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c0:	80da      	strh	r2, [r3, #6]
	LSM6->did_timeout = false;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2200      	movs	r2, #0
 80012c6:	721a      	strb	r2, [r3, #8]
	LSM6->did_error = false;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2200      	movs	r2, #0
 80012cc:	725a      	strb	r2, [r3, #9]

	// perform auto-detection unless device type and SA0 state were both specified
	if (device == device_autoDetect || sa0 == sa0_autoDetect)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d002      	beq.n	80012da <LSM6_InitEx+0x42>
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d12f      	bne.n	800133a <LSM6_InitEx+0xa2>
	{
		// check for LSM6DS33 if device is unidentified or was specified to be this type
		if (device == device_autoDetect || device == device_DS33)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d002      	beq.n	80012e6 <LSM6_InitEx+0x4e>
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d124      	bne.n	8001330 <LSM6_InitEx+0x98>
		{
			// check SA0 high address unless SA0 was specified to be low
			if (sa0 != sa0_low && testReg(LSM6, DS33_SA0_HIGH_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00f      	beq.n	800130c <LSM6_InitEx+0x74>
 80012ec:	220f      	movs	r2, #15
 80012ee:	216b      	movs	r1, #107	; 0x6b
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f000 f83b 	bl	800136c <testReg>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b69      	cmp	r3, #105	; 0x69
 80012fa:	d107      	bne.n	800130c <LSM6_InitEx+0x74>
			{
				sa0 = sa0_high;
 80012fc:	2301      	movs	r3, #1
 80012fe:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d114      	bne.n	8001330 <LSM6_InitEx+0x98>
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	e011      	b.n	8001330 <LSM6_InitEx+0x98>
			}
			// check SA0 low address unless SA0 was specified to be high
			else if (sa0 != sa0_high && testReg(LSM6, DS33_SA0_LOW_ADDRESS, (uint8_t) WHO_AM_I) == DS33_WHO_ID)
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d00e      	beq.n	8001330 <LSM6_InitEx+0x98>
 8001312:	220f      	movs	r2, #15
 8001314:	216a      	movs	r1, #106	; 0x6a
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f000 f828 	bl	800136c <testReg>
 800131c:	4603      	mov	r3, r0
 800131e:	2b69      	cmp	r3, #105	; 0x69
 8001320:	d106      	bne.n	8001330 <LSM6_InitEx+0x98>
			{
				sa0 = sa0_low;
 8001322:	2300      	movs	r3, #0
 8001324:	71bb      	strb	r3, [r7, #6]
				if (device == device_autoDetect) { device = device_DS33; }
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <LSM6_InitEx+0x98>
 800132c:	2300      	movs	r3, #0
 800132e:	71fb      	strb	r3, [r7, #7]
			}
		}

		// make sure device and SA0 were successfully detected; otherwise, indicate failure
		if (sa0 == sa0_autoDetect)
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d101      	bne.n	800133a <LSM6_InitEx+0xa2>
		{
			return false;
 8001336:	2300      	movs	r3, #0
 8001338:	e014      	b.n	8001364 <LSM6_InitEx+0xcc>
		}
	}

	LSM6->_device = device;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	711a      	strb	r2, [r3, #4]

	switch (device)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <LSM6_InitEx+0xb4>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d009      	beq.n	800135e <LSM6_InitEx+0xc6>
 800134a:	e00a      	b.n	8001362 <LSM6_InitEx+0xca>
	{
		case device_DS33:
			LSM6->address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <LSM6_InitEx+0xbe>
 8001352:	226b      	movs	r2, #107	; 0x6b
 8001354:	e000      	b.n	8001358 <LSM6_InitEx+0xc0>
 8001356:	226a      	movs	r2, #106	; 0x6a
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	715a      	strb	r2, [r3, #5]
			break;
 800135c:	e001      	b.n	8001362 <LSM6_InitEx+0xca>
		case device_autoDetect:
			return false;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <LSM6_InitEx+0xcc>
	}

	return true;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <testReg>:

// Returns chip id if communication is established, return 0 if not
uint8_t testReg(LSM6_t *LSM6, uint8_t address, uint8_t reg)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af04      	add	r7, sp, #16
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
 8001378:	4613      	mov	r3, r2
 800137a:	70bb      	strb	r3, [r7, #2]
	uint8_t Value;

	if (HAL_OK == HAL_I2C_Mem_Read(LSM6->i2c, (address)<<1, reg, 1, &Value, 1, LSM6->io_timeout))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b299      	uxth	r1, r3
 8001388:	78bb      	ldrb	r3, [r7, #2]
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	88db      	ldrh	r3, [r3, #6]
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 030f 	add.w	r3, r7, #15
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	f004 f82f 	bl	8005400 <HAL_I2C_Mem_Read>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <testReg+0x40>
	{
		return Value;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	e000      	b.n	80013ae <testReg+0x42>
	}
	else
	{
		return false;
 80013ac:	2300      	movs	r3, #0
	}
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <timeoutOccurred>:

// Did a timeout occur in readAcc(), readGyro(), or read() since the last call to timeoutOccurred()?
bool timeoutOccurred(LSM6_t *LSM6)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_timeout;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7a1b      	ldrb	r3, [r3, #8]
 80013c2:	73fb      	strb	r3, [r7, #15]
	LSM6->did_timeout = false;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	721a      	strb	r2, [r3, #8]
	return tmp;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <errorOccured>:
// Did an error occur in readAcc(), readGyro(), or read() since the last call to errorOccurred()?
bool errorOccured(LSM6_t *LSM6)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	bool tmp = LSM6->did_error;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7a5b      	ldrb	r3, [r3, #9]
 80013e4:	73fb      	strb	r3, [r7, #15]
	LSM6->did_error = false;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	725a      	strb	r2, [r3, #9]
	return tmp;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <enableDefault>:
{
	return LSM6->io_timeout;
}

void enableDefault(LSM6_t *LSM6)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	if (LSM6->_device == device_DS33)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	791b      	ldrb	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d11d      	bne.n	8001446 <enableDefault+0x4c>
	{
	// Accelerometer
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (+/-2 g full scale)
	  writeReg(LSM6, CTRL9_XL, 0x38);	// Accelerometer X, Y, Z axes enabled
 800140a:	2238      	movs	r2, #56	; 0x38
 800140c:	2118      	movs	r1, #24
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f81d 	bl	800144e <writeReg>
	  writeReg(LSM6, CTRL1_XL, 0x30);	// Accelerometer = 52hz
 8001414:	2230      	movs	r2, #48	; 0x30
 8001416:	2110      	movs	r1, #16
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f818 	bl	800144e <writeReg>
	  writeReg(LSM6, INT1_CTRL, 0x01);	// Accelerometer data ready interrupt on INT1
 800141e:	2201      	movs	r2, #1
 8001420:	210d      	movs	r1, #13
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f813 	bl	800144e <writeReg>

	// Gyroscope
	// ODR = 0110 (416 Hz (high performance)); FS_XL = 00 (245 dps)
	  writeReg(LSM6, CTRL10_C, 0x38);	// Gyroscope X, Y, Z axes enabled
 8001428:	2238      	movs	r2, #56	; 0x38
 800142a:	2119      	movs	r1, #25
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f80e 	bl	800144e <writeReg>
	  writeReg(LSM6, CTRL2_G, 0x30);	// Gyroscope = 52hz
 8001432:	2230      	movs	r2, #48	; 0x30
 8001434:	2111      	movs	r1, #17
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f809 	bl	800144e <writeReg>
	  writeReg(LSM6, INT2_CTRL, 0x02);	// Gyroscope data ready interrupt on INT2
 800143c:	2202      	movs	r2, #2
 800143e:	210e      	movs	r1, #14
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f804 	bl	800144e <writeReg>
	// Common
	// 0x04 = 0b00000100
	// IF_INC = 1 (automatically increment register address)
	// writeReg(CTRL3_C, 0x04);
	}
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <writeReg>:

// Write 8-bits
void writeReg(LSM6_t *LSM6, uint8_t reg, uint8_t value)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b088      	sub	sp, #32
 8001452:	af04      	add	r7, sp, #16
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	70fb      	strb	r3, [r7, #3]
 800145a:	4613      	mov	r3, r2
 800145c:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	// Write 8-bits
	status = HAL_I2C_Mem_Write(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	795b      	ldrb	r3, [r3, #5]
 8001466:	b29b      	uxth	r3, r3
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	b299      	uxth	r1, r3
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	b29a      	uxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	1cbb      	adds	r3, r7, #2
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	f003 fec4 	bl	800520c <HAL_I2C_Mem_Write>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d102      	bne.n	8001494 <writeReg+0x46>
	{
		LSM6->did_timeout = true;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	721a      	strb	r2, [r3, #8]
	}
	if(status == HAL_ERROR)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <writeReg+0x52>
	{
		LSM6->did_error = true;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	725a      	strb	r2, [r3, #9]
	}
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <readReg>:

// Read 8-bits
uint8_t readReg(LSM6_t *LSM6, uint8_t reg)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	uint8_t value, status;

	// Read 8 bits
	status = HAL_I2C_Mem_Read(LSM6->i2c, (LSM6->address<<1), reg, I2C_MEMADD_SIZE_8BIT, &value, I2C_MEMADD_SIZE_8BIT, LSM6->io_timeout);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	795b      	ldrb	r3, [r3, #5]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	b299      	uxth	r1, r3
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	88db      	ldrh	r3, [r3, #6]
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2301      	movs	r3, #1
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f107 030e 	add.w	r3, r7, #14
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	f003 ff92 	bl	8005400 <HAL_I2C_Mem_Read>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]

	// check for errors
	if(status == HAL_BUSY)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d104      	bne.n	80014f0 <readReg+0x48>
	{
		LSM6->did_timeout = true;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	721a      	strb	r2, [r3, #8]
		return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e008      	b.n	8001502 <readReg+0x5a>
	}
	if(status == HAL_ERROR)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d104      	bne.n	8001500 <readReg+0x58>
	{
		LSM6->did_error = true;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	725a      	strb	r2, [r3, #9]
		return 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <readReg+0x5a>
	}

	return value;
 8001500:	7bbb      	ldrb	r3, [r7, #14]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <readAcc>:

uint8_t readAcc(LSM6_t *LSM6)
{
 800150a:	b590      	push	{r4, r7, lr}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xla = readReg(LSM6, OUTX_L_XL);
 8001512:	2128      	movs	r1, #40	; 0x28
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffc7 	bl	80014a8 <readReg>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
	uint8_t xha = readReg(LSM6, OUTX_H_XL);
 800151e:	2129      	movs	r1, #41	; 0x29
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffc1 	bl	80014a8 <readReg>
 8001526:	4603      	mov	r3, r0
 8001528:	73bb      	strb	r3, [r7, #14]
	uint8_t yla = readReg(LSM6, OUTY_L_XL);
 800152a:	212a      	movs	r1, #42	; 0x2a
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffbb 	bl	80014a8 <readReg>
 8001532:	4603      	mov	r3, r0
 8001534:	737b      	strb	r3, [r7, #13]
	uint8_t yha = readReg(LSM6, OUTY_H_XL);
 8001536:	212b      	movs	r1, #43	; 0x2b
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffb5 	bl	80014a8 <readReg>
 800153e:	4603      	mov	r3, r0
 8001540:	733b      	strb	r3, [r7, #12]
	uint8_t zla = readReg(LSM6, OUTZ_L_XL);
 8001542:	212c      	movs	r1, #44	; 0x2c
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffaf 	bl	80014a8 <readReg>
 800154a:	4603      	mov	r3, r0
 800154c:	72fb      	strb	r3, [r7, #11]
	uint8_t zha = readReg(LSM6, OUTZ_H_XL);
 800154e:	212d      	movs	r1, #45	; 0x2d
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffa9 	bl	80014a8 <readReg>
 8001556:	4603      	mov	r3, r0
 8001558:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff2b 	bl	80013b6 <timeoutOccurred>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <readAcc+0x60>
	{
		return HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	e035      	b.n	80015d6 <readAcc+0xcc>
	}
	if (errorOccured(LSM6) == true)
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff34 	bl	80013d8 <errorOccured>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <readAcc+0x70>
	{
		return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e02d      	b.n	80015d6 <readAcc+0xcc>
	}

	// combine high and low bytes
	LSM6->accelerometer.x = (int16_t)(xha << 8 | xla);
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21b      	sxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff83 	bl	8000494 <__aeabi_i2d>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	e9c2 3404 	strd	r3, r4, [r2, #16]
	LSM6->accelerometer.y = (int16_t)(yha << 8 | yla);
 8001598:	7b3b      	ldrb	r3, [r7, #12]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7b7b      	ldrb	r3, [r7, #13]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff74 	bl	8000494 <__aeabi_i2d>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	LSM6->accelerometer.z = (int16_t)(zha << 8 | zla);
 80015b6:	7abb      	ldrb	r3, [r7, #10]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7afb      	ldrb	r3, [r7, #11]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff65 	bl	8000494 <__aeabi_i2d>
 80015ca:	4603      	mov	r3, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}

080015de <readGyro>:

uint8_t readGyro(LSM6_t *LSM6)
{
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	// read output registers
	uint8_t xlg = readReg(LSM6, OUTX_L_G);
 80015e6:	2122      	movs	r1, #34	; 0x22
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff5d 	bl	80014a8 <readReg>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
	uint8_t xhg = readReg(LSM6, OUTX_H_G);
 80015f2:	2123      	movs	r1, #35	; 0x23
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff57 	bl	80014a8 <readReg>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73bb      	strb	r3, [r7, #14]
	uint8_t ylg = readReg(LSM6, OUTY_L_G);
 80015fe:	2124      	movs	r1, #36	; 0x24
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff51 	bl	80014a8 <readReg>
 8001606:	4603      	mov	r3, r0
 8001608:	737b      	strb	r3, [r7, #13]
	uint8_t yhg = readReg(LSM6, OUTY_H_G);
 800160a:	2125      	movs	r1, #37	; 0x25
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff4b 	bl	80014a8 <readReg>
 8001612:	4603      	mov	r3, r0
 8001614:	733b      	strb	r3, [r7, #12]
	uint8_t zlg = readReg(LSM6, OUTZ_L_G);
 8001616:	2126      	movs	r1, #38	; 0x26
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff45 	bl	80014a8 <readReg>
 800161e:	4603      	mov	r3, r0
 8001620:	72fb      	strb	r3, [r7, #11]
	uint8_t zhg = readReg(LSM6, OUTZ_H_G);
 8001622:	2127      	movs	r1, #39	; 0x27
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff3f 	bl	80014a8 <readReg>
 800162a:	4603      	mov	r3, r0
 800162c:	72bb      	strb	r3, [r7, #10]

	// check for errors
	if (timeoutOccurred(LSM6) == true)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fec1 	bl	80013b6 <timeoutOccurred>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <readGyro+0x60>
	{
		return HAL_BUSY;
 800163a:	2302      	movs	r3, #2
 800163c:	e035      	b.n	80016aa <readGyro+0xcc>
	}
	if (errorOccured(LSM6) == true)
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff feca 	bl	80013d8 <errorOccured>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <readGyro+0x70>
	{
		return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e02d      	b.n	80016aa <readGyro+0xcc>
	}

	// combine high and low bytes
	LSM6->gyroscope.x = (int16_t)(xhg << 8 | xlg);
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21b      	sxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff19 	bl	8000494 <__aeabi_i2d>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	LSM6->gyroscope.y = (int16_t)(yhg << 8 | ylg);
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff0a 	bl	8000494 <__aeabi_i2d>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	LSM6->gyroscope.z = (int16_t)(zhg << 8 | zlg);
 800168a:	7abb      	ldrb	r3, [r7, #10]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fefb 	bl	8000494 <__aeabi_i2d>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}

080016b2 <LSM6_Read>:

// Main function to read LSM6 data
uint8_t LSM6_Read(LSM6_t *LSM6)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	uint8_t status;

	// Read accelerometer data
	if ((status = readAcc(LSM6)) != HAL_OK)
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff25 	bl	800150a <readAcc>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <LSM6_Read+0x1c>
	{
		return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	e00a      	b.n	80016e4 <LSM6_Read+0x32>
	}

	// Read gyroscope data
	if ((status = readGyro(LSM6)) != HAL_OK)
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff85 	bl	80015de <readGyro>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <LSM6_Read+0x30>
	{
		return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	e000      	b.n	80016e4 <LSM6_Read+0x32>
	}

	return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <PID_Init>:
 *      Author: mand2
 */
#include "PID.h"

void PID_Init(PID_t *pid, double* Input, double* Output, double* Setpoint, double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6278      	str	r0, [r7, #36]	; 0x24
 80016f8:	6239      	str	r1, [r7, #32]
 80016fa:	61fa      	str	r2, [r7, #28]
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001702:	ed87 1b02 	vstr	d1, [r7, #8]
 8001706:	ed87 2b00 	vstr	d2, [r7]
    pid->myOutput = Output;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
    pid->myInput = Input;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	6a3a      	ldr	r2, [r7, #32]
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
    pid->mySetpoint = Setpoint;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->inAuto = false;
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    pid->SampleTime = 50;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	2232      	movs	r2, #50	; 0x32
 8001728:	651a      	str	r2, [r3, #80]	; 0x50

    PID_SetOutputLimits(pid, 0, 255);				//default output limit
 800172a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001760 <PID_Init+0x70>
 800172e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001768 <PID_Init+0x78>
 8001732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001734:	f000 f909 	bl	800194a <PID_SetOutputLimits>
    PID_SetControllerDirection(pid, ControllerDirection);
 8001738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800173a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800173c:	f000 f9cd 	bl	8001ada <PID_SetControllerDirection>
    PID_SetTunings(pid, Kp, Ki, Kd, POn);
 8001740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001742:	ed97 2b00 	vldr	d2, [r7]
 8001746:	ed97 1b02 	vldr	d1, [r7, #8]
 800174a:	ed97 0b04 	vldr	d0, [r7, #16]
 800174e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001750:	f000 f80e 	bl	8001770 <PID_SetTunings>
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	f3af 8000 	nop.w
 8001760:	00000000 	.word	0x00000000
 8001764:	406fe000 	.word	0x406fe000
	...

08001770 <PID_SetTunings>:

void PID_SetTunings(PID_t *pid, double Kp, double Ki, double Kd, int POn)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	61f8      	str	r0, [r7, #28]
 8001778:	ed87 0b04 	vstr	d0, [r7, #16]
 800177c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001780:	ed87 2b00 	vstr	d2, [r7]
 8001784:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001792:	f7ff f95b 	bl	8000a4c <__aeabi_dcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8094 	bne.w	80018c6 <PID_SetTunings+0x156>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017aa:	f7ff f94f 	bl	8000a4c <__aeabi_dcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 8088 	bne.w	80018c6 <PID_SetTunings+0x156>
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c2:	f7ff f943 	bl	8000a4c <__aeabi_dcmplt>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d17c      	bne.n	80018c6 <PID_SetTunings+0x156>

   pid->pOn = POn;
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   pid->pOnE = (POn == P_ON_ERROR);
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

   pid->dispKp = Kp;
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017f0:	e9c2 3400 	strd	r3, r4, [r2]
   pid->dispKi = Ki;
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
   pid->dispKd = Kd;
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001804:	e9c2 3404 	strd	r3, r4, [r2, #16]

   double SampleTimeInSec = ((double)pid->SampleTime)/1000;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe31 	bl	8000474 <__aeabi_ui2d>
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <PID_SetTunings+0x160>)
 8001818:	f7fe ffd0 	bl	80007bc <__aeabi_ddiv>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	e9c7 3408 	strd	r3, r4, [r7, #32]
   pid->kp = Kp;
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800182a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   pid->ki = Ki * SampleTimeInSec;
 800182e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001836:	f7fe fe97 	bl	8000568 <__aeabi_dmul>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	e9c2 3408 	strd	r3, r4, [r2, #32]
   pid->kd = Kd / SampleTimeInSec;
 8001844:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184c:	f7fe ffb6 	bl	80007bc <__aeabi_ddiv>
 8001850:	4603      	mov	r3, r0
 8001852:	460c      	mov	r4, r1
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  if(pid->controllerDirection == REVERSE)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001860:	2b01      	cmp	r3, #1
 8001862:	d131      	bne.n	80018c8 <PID_SetTunings+0x158>
   {
	  pid->kp = (0 - pid->kp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	f7fe fcbf 	bl	80001f8 <__aeabi_dsub>
 800187a:	4603      	mov	r3, r0
 800187c:	460c      	mov	r4, r1
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  pid->ki = (0 - pid->ki);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800188a:	461a      	mov	r2, r3
 800188c:	4623      	mov	r3, r4
 800188e:	f04f 0000 	mov.w	r0, #0
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	f7fe fcaf 	bl	80001f8 <__aeabi_dsub>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	  pid->kd = (0 - pid->kd);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80018aa:	461a      	mov	r2, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	f7fe fc9f 	bl	80001f8 <__aeabi_dsub>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80018c4:	e000      	b.n	80018c8 <PID_SetTunings+0x158>
   if (Kp<0 || Ki<0 || Kd<0) return;
 80018c6:	bf00      	nop
   }
}
 80018c8:	372c      	adds	r7, #44	; 0x2c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	408f4000 	.word	0x408f4000

080018d4 <PID_SetSampleTime>:

void PID_SetSampleTime(PID_t *pid, int NewSampleTime)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dd2e      	ble.n	8001942 <PID_SetSampleTime+0x6e>
   {
      double ratio  = (double)NewSampleTime
 80018e4:	6838      	ldr	r0, [r7, #0]
 80018e6:	f7fe fdd5 	bl	8000494 <__aeabi_i2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
                      / (double)pid->SampleTime;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdbe 	bl	8000474 <__aeabi_ui2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe ff5c 	bl	80007bc <__aeabi_ddiv>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	e9c7 3402 	strd	r3, r4, [r7, #8]
      pid->ki *= ratio;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001916:	f7fe fe27 	bl	8000568 <__aeabi_dmul>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	e9c2 3408 	strd	r3, r4, [r2, #32]
      pid->kd /= ratio;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800192a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800192e:	f7fe ff45 	bl	80007bc <__aeabi_ddiv>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      pid->SampleTime = (unsigned long)NewSampleTime;
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	651a      	str	r2, [r3, #80]	; 0x50
   }
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bdb0      	pop	{r4, r5, r7, pc}

0800194a <PID_SetOutputLimits>:

void PID_SetOutputLimits(PID_t *pid, double Min, double Max)
{
 800194a:	b590      	push	{r4, r7, lr}
 800194c:	b087      	sub	sp, #28
 800194e:	af00      	add	r7, sp, #0
 8001950:	6178      	str	r0, [r7, #20]
 8001952:	ed87 0b02 	vstr	d0, [r7, #8]
 8001956:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 800195a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800195e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001962:	f7ff f887 	bl	8000a74 <__aeabi_dcmpge>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d161      	bne.n	8001a30 <PID_SetOutputLimits+0xe6>
   pid->outMin = Min;
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001972:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
   pid->outMax = Max;
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	e9d7 3400 	ldrd	r3, r4, [r7]
 800197c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

   if(pid->inAuto)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001986:	2b00      	cmp	r3, #0
 8001988:	d053      	beq.n	8001a32 <PID_SetOutputLimits+0xe8>
   {
	   if(*(pid->myOutput) > pid->outMax) *(pid->myOutput) = pid->outMax;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	f7ff f874 	bl	8000a88 <__aeabi_dcmpgt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <PID_SetOutputLimits+0x6c>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80019b0:	e9c2 3400 	strd	r3, r4, [r2]
 80019b4:	e014      	b.n	80019e0 <PID_SetOutputLimits+0x96>
	   else if(*(pid->myOutput) < pid->outMin) *(pid->myOutput) = pid->outMin;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	f7ff f840 	bl	8000a4c <__aeabi_dcmplt>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <PID_SetOutputLimits+0x96>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80019dc:	e9c2 3400 	strd	r3, r4, [r2]

	   if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80019ec:	461a      	mov	r2, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	f7ff f84a 	bl	8000a88 <__aeabi_dcmpgt>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <PID_SetOutputLimits+0xbe>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001a06:	e014      	b.n	8001a32 <PID_SetOutputLimits+0xe8>
	   else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001a14:	461a      	mov	r2, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	f7ff f818 	bl	8000a4c <__aeabi_dcmplt>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <PID_SetOutputLimits+0xe8>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001a2e:	e000      	b.n	8001a32 <PID_SetOutputLimits+0xe8>
   if(Min >= Max) return;
 8001a30:	bf00      	nop
   }
}
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <PID_SetMode>:

void PID_SetMode(PID_t *pid, int Mode)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !pid->inAuto)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d039      	beq.n	8001aca <PID_SetMode+0x92>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d134      	bne.n	8001aca <PID_SetMode+0x92>
    {  /*we just went from manual to auto*/
    	pid->outputSum = *pid->myOutput;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    	pid->lastInput = *pid->myInput;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	   if(pid->outputSum > pid->outMax) pid->outputSum = pid->outMax;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	f7fe fffc 	bl	8000a88 <__aeabi_dcmpgt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <PID_SetMode+0x6c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001aa2:	e012      	b.n	8001aca <PID_SetMode+0x92>
	   else if(pid->outputSum < pid->outMin) pid->outputSum = pid->outMin;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	f7fe ffca 	bl	8000a4c <__aeabi_dcmplt>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <PID_SetMode+0x92>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    }
    pid->inAuto = newAuto;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd90      	pop	{r4, r7, pc}

08001ada <PID_SetControllerDirection>:

void PID_SetControllerDirection(PID_t *pid, int Direction)
{
 8001ada:	b590      	push	{r4, r7, lr}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
   if(pid->inAuto && (Direction != pid->controllerDirection))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d036      	beq.n	8001b5c <PID_SetControllerDirection+0x82>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001af4:	461a      	mov	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d02f      	beq.n	8001b5c <PID_SetControllerDirection+0x82>
   {
	   pid->kp = (0 - pid->kp);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	f04f 0000 	mov.w	r0, #0
 8001b0a:	f04f 0100 	mov.w	r1, #0
 8001b0e:	f7fe fb73 	bl	80001f8 <__aeabi_dsub>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	e9c2 3406 	strd	r3, r4, [r2, #24]
	   pid->ki = (0 - pid->ki);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4623      	mov	r3, r4
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	f7fe fb63 	bl	80001f8 <__aeabi_dsub>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	e9c2 3408 	strd	r3, r4, [r2, #32]
	   pid->kd = (0 - pid->kd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001b42:	461a      	mov	r2, r3
 8001b44:	4623      	mov	r3, r4
 8001b46:	f04f 0000 	mov.w	r0, #0
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	f7fe fb53 	bl	80001f8 <__aeabi_dsub>
 8001b52:	4603      	mov	r3, r0
 8001b54:	460c      	mov	r4, r1
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   }
   pid->controllerDirection = Direction;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}

08001b6e <PID_Compute>:

bool PID_Compute(PID_t *pid)
{
 8001b6e:	b5b0      	push	{r4, r5, r7, lr}
 8001b70:	b08a      	sub	sp, #40	; 0x28
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   if(!pid->inAuto)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <PID_Compute+0x16>
   {
	   return false;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e0d8      	b.n	8001d36 <PID_Compute+0x1c8>
   }

      /*Compute all the working error variables*/
      double input = *pid->myInput;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b8c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      double error = *pid->mySetpoint - input;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9c:	f7fe fb2c 	bl	80001f8 <__aeabi_dsub>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      double dInput = (input - pid->lastInput);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bb6:	f7fe fb1f 	bl	80001f8 <__aeabi_dsub>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	e9c7 3402 	strd	r3, r4, [r7, #8]
      pid->outputSum+= (pid->ki * error);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bd2:	f7fe fcc9 	bl	8000568 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb0d 	bl	80001fc <__adddf3>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pid->pOnE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d114      	bne.n	8001c20 <PID_Compute+0xb2>
	  {
    	  pid->outputSum-= pid->kp * dInput;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c06:	f7fe fcaf 	bl	8000568 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe faf1 	bl	80001f8 <__aeabi_dsub>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	  }

      if(pid->outputSum > pid->outMax) pid->outputSum= pid->outMax;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	f7fe ff2a 	bl	8000a88 <__aeabi_dcmpgt>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <PID_Compute+0xda>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 8001c46:	e012      	b.n	8001c6e <PID_Compute+0x100>
      else if(pid->outputSum < pid->outMin) pid->outputSum= pid->outMin;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001c54:	461a      	mov	r2, r3
 8001c56:	4623      	mov	r3, r4
 8001c58:	f7fe fef8 	bl	8000a4c <__aeabi_dcmplt>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <PID_Compute+0x100>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

      /*Add Proportional on Error, if P_ON_E is specified*/
	  double output;
      if(pid->pOnE) output = pid->kp * error;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00d      	beq.n	8001c94 <PID_Compute+0x126>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c86:	f7fe fc6f 	bl	8000568 <__aeabi_dmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001c92:	e005      	b.n	8001ca0 <PID_Compute+0x132>
      else output = 0;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f04f 0400 	mov.w	r4, #0
 8001c9c:	e9c7 3408 	strd	r3, r4, [r7, #32]

      /*Compute Rest of PID Output*/
      output += pid->outputSum - pid->kd * dInput;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb0:	f7fe fc5a 	bl	8000568 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fa9c 	bl	80001f8 <__aeabi_dsub>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ccc:	f7fe fa96 	bl	80001fc <__adddf3>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	e9c7 3408 	strd	r3, r4, [r7, #32]

      if(output > pid->outMax) output = pid->outMax;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce6:	f7fe fecf 	bl	8000a88 <__aeabi_dcmpgt>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <PID_Compute+0x18e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001cf6:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001cfa:	e010      	b.n	8001d1e <PID_Compute+0x1b0>
      else if(output < pid->outMin) output = pid->outMin;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001d02:	461a      	mov	r2, r3
 8001d04:	4623      	mov	r3, r4
 8001d06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d0a:	f7fe fe9f 	bl	8000a4c <__aeabi_dcmplt>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <PID_Compute+0x1b0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001d1a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *pid->myOutput = output;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d22:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d26:	e9c2 3400 	strd	r3, r4, [r2]

      /*Remember some variables for next time*/
      pid->lastInput = input;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d30:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
      return true;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d40 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 8001d44:	482e      	ldr	r0, [pc, #184]	; (8001e00 <MX_FREERTOS_Init+0xc0>)
 8001d46:	f006 fc3b 	bl	80085c0 <osMutexNew>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <MX_FREERTOS_Init+0xc4>)
 8001d4e:	601a      	str	r2, [r3, #0]

  /* creation of MutexUARTputchar */
  MutexUARTputcharHandle = osMutexNew(&MutexUARTputchar_attributes);
 8001d50:	482d      	ldr	r0, [pc, #180]	; (8001e08 <MX_FREERTOS_Init+0xc8>)
 8001d52:	f006 fc35 	bl	80085c0 <osMutexNew>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <MX_FREERTOS_Init+0xcc>)
 8001d5a:	601a      	str	r2, [r3, #0]

  /* creation of MutexMotors */
  MutexMotorsHandle = osMutexNew(&MutexMotors_attributes);
 8001d5c:	482c      	ldr	r0, [pc, #176]	; (8001e10 <MX_FREERTOS_Init+0xd0>)
 8001d5e:	f006 fc2f 	bl	80085c0 <osMutexNew>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <MX_FREERTOS_Init+0xd4>)
 8001d66:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreLSM6_DataReady */
  SemaphoreLSM6_DataReadyHandle = osSemaphoreNew(1, 1, &SemaphoreLSM6_DataReady_attributes);
 8001d68:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <MX_FREERTOS_Init+0xd8>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f006 fd6f 	bl	8008850 <osSemaphoreNew>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <MX_FREERTOS_Init+0xdc>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* creation of SemaphorePIDCompute */
  SemaphorePIDComputeHandle = osSemaphoreNew(1, 1, &SemaphorePIDCompute_attributes);
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <MX_FREERTOS_Init+0xe0>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f006 fd67 	bl	8008850 <osSemaphoreNew>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <MX_FREERTOS_Init+0xe4>)
 8001d86:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerPID */
  TimerPIDHandle = osTimerNew(TimerPIDCallback, osTimerPeriodic, NULL, &TimerPID_attributes);
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <MX_FREERTOS_Init+0xe8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4827      	ldr	r0, [pc, #156]	; (8001e2c <MX_FREERTOS_Init+0xec>)
 8001d90:	f006 fb52 	bl	8008438 <osTimerNew>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <MX_FREERTOS_Init+0xf0>)
 8001d98:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueInputPID */
  QueueInputPIDHandle = osMessageQueueNew (8, sizeof(double), &QueueInputPID_attributes);
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <MX_FREERTOS_Init+0xf4>)
 8001d9c:	2108      	movs	r1, #8
 8001d9e:	2008      	movs	r0, #8
 8001da0:	f006 feb2 	bl	8008b08 <osMessageQueueNew>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_FREERTOS_Init+0xf8>)
 8001da8:	601a      	str	r2, [r3, #0]

  /* creation of QueueOutputPID */
  QueueOutputPIDHandle = osMessageQueueNew (16, sizeof(double), &QueueOutputPID_attributes);
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <MX_FREERTOS_Init+0xfc>)
 8001dac:	2108      	movs	r1, #8
 8001dae:	2010      	movs	r0, #16
 8001db0:	f006 feaa 	bl	8008b08 <osMessageQueueNew>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_FREERTOS_Init+0x100>)
 8001db8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(StartHeartbeatTask, NULL, &Heartbeat_attributes);
 8001dba:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <MX_FREERTOS_Init+0x104>)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4822      	ldr	r0, [pc, #136]	; (8001e48 <MX_FREERTOS_Init+0x108>)
 8001dc0:	f006 f95a 	bl	8008078 <osThreadNew>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <MX_FREERTOS_Init+0x10c>)
 8001dc8:	601a      	str	r2, [r3, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(StartIMU_Task, NULL, &IMU_Task_attributes);
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <MX_FREERTOS_Init+0x110>)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4821      	ldr	r0, [pc, #132]	; (8001e54 <MX_FREERTOS_Init+0x114>)
 8001dd0:	f006 f952 	bl	8008078 <osThreadNew>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <MX_FREERTOS_Init+0x118>)
 8001dd8:	601a      	str	r2, [r3, #0]

  /* creation of PIDTask */
  PIDTaskHandle = osThreadNew(StartPIDTask, NULL, &PIDTask_attributes);
 8001dda:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <MX_FREERTOS_Init+0x11c>)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4820      	ldr	r0, [pc, #128]	; (8001e60 <MX_FREERTOS_Init+0x120>)
 8001de0:	f006 f94a 	bl	8008078 <osThreadNew>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_FREERTOS_Init+0x124>)
 8001de8:	601a      	str	r2, [r3, #0]

  /* creation of StepperMotorsTa */
  StepperMotorsTaHandle = osThreadNew(StartStepperMotorsTask, NULL, &StepperMotorsTa_attributes);
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <MX_FREERTOS_Init+0x128>)
 8001dec:	2100      	movs	r1, #0
 8001dee:	481f      	ldr	r0, [pc, #124]	; (8001e6c <MX_FREERTOS_Init+0x12c>)
 8001df0:	f006 f942 	bl	8008078 <osThreadNew>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_FREERTOS_Init+0x130>)
 8001df8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800e720 	.word	0x0800e720
 8001e04:	20004b10 	.word	0x20004b10
 8001e08:	0800e730 	.word	0x0800e730
 8001e0c:	20004b48 	.word	0x20004b48
 8001e10:	0800e740 	.word	0x0800e740
 8001e14:	20004b14 	.word	0x20004b14
 8001e18:	0800e750 	.word	0x0800e750
 8001e1c:	20004b28 	.word	0x20004b28
 8001e20:	0800e760 	.word	0x0800e760
 8001e24:	20004b1c 	.word	0x20004b1c
 8001e28:	0800e710 	.word	0x0800e710
 8001e2c:	08002369 	.word	0x08002369
 8001e30:	20004b38 	.word	0x20004b38
 8001e34:	0800e6e0 	.word	0x0800e6e0
 8001e38:	20004b4c 	.word	0x20004b4c
 8001e3c:	0800e6f8 	.word	0x0800e6f8
 8001e40:	20004b50 	.word	0x20004b50
 8001e44:	0800e650 	.word	0x0800e650
 8001e48:	08001e75 	.word	0x08001e75
 8001e4c:	20004b3c 	.word	0x20004b3c
 8001e50:	0800e674 	.word	0x0800e674
 8001e54:	08001e89 	.word	0x08001e89
 8001e58:	20004b18 	.word	0x20004b18
 8001e5c:	0800e698 	.word	0x0800e698
 8001e60:	08002039 	.word	0x08002039
 8001e64:	20004b44 	.word	0x20004b44
 8001e68:	0800e6bc 	.word	0x0800e6bc
 8001e6c:	08002209 	.word	0x08002209
 8001e70:	20004b40 	.word	0x20004b40

08001e74 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
      osDelay(500);
 8001e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e80:	f006 fa96 	bl	80083b0 <osDelay>
 8001e84:	e7fa      	b.n	8001e7c <StartHeartbeatTask+0x8>
	...

08001e88 <StartIMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU_Task */
void StartIMU_Task(void *argument)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b099      	sub	sp, #100	; 0x64
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU_Task */
	LSM6_t LSM6DS33;
	double accAngle, outputAngle;
	double prevAngle = 0;
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	f04f 0400 	mov.w	r4, #0
 8001e98:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	osDelay(150);
 8001e9c:	2096      	movs	r0, #150	; 0x96
 8001e9e:	f006 fa87 	bl	80083b0 <osDelay>
	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8001ea2:	4b59      	ldr	r3, [pc, #356]	; (8002008 <StartIMU_Task+0x180>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 fc22 	bl	80086f4 <osMutexAcquire>
	if (LSM6_InitEx(&hi2c1, &LSM6DS33, device_autoDetect, sa0_autoDetect) == false)
 8001eb0:	f107 0110 	add.w	r1, r7, #16
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4854      	ldr	r0, [pc, #336]	; (800200c <StartIMU_Task+0x184>)
 8001eba:	f7ff f9ed 	bl	8001298 <LSM6_InitEx>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <StartIMU_Task+0x44>
	{
		printf("LSM6 INIT ERROR\n\r");
 8001ec4:	4852      	ldr	r0, [pc, #328]	; (8002010 <StartIMU_Task+0x188>)
 8001ec6:	f002 f979 	bl	80041bc <printf_>
 8001eca:	e004      	b.n	8001ed6 <StartIMU_Task+0x4e>
	}
	else
	{
		enableDefault(&LSM6DS33);
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fa92 	bl	80013fa <enableDefault>
	}
	osMutexRelease(MutexI2CHandle);
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <StartIMU_Task+0x180>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 fc68 	bl	80087b0 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <StartIMU_Task+0x18c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 fd4f 	bl	800898c <osSemaphoreAcquire>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f5      	bne.n	8001ee0 <StartIMU_Task+0x58>
    {
    	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <StartIMU_Task+0x180>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 fbf9 	bl	80086f4 <osMutexAcquire>
    	if(HAL_OK == LSM6_Read(&LSM6DS33))
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fbd3 	bl	80016b2 <LSM6_Read>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d169      	bne.n	8001fe6 <StartIMU_Task+0x15e>
    	{
    		osMutexRelease(MutexI2CHandle);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <StartIMU_Task+0x180>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f006 fc4a 	bl	80087b0 <osMutexRelease>
        	accAngle = calculateAccAngle(LSM6DS33.accelerometer.y, LSM6DS33.accelerometer.z);
 8001f1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f20:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001f24:	eeb0 1a46 	vmov.f32	s2, s12
 8001f28:	eef0 1a66 	vmov.f32	s3, s13
 8001f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f30:	eef0 0a67 	vmov.f32	s1, s15
 8001f34:	f000 fae4 	bl	8002500 <calculateAccAngle>
 8001f38:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
        	outputAngle = complementaryFilter(LSM6DS33.gyroscope.x, accAngle, prevAngle);
 8001f3c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f40:	ed97 2b16 	vldr	d2, [r7, #88]	; 0x58
 8001f44:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001f48:	eeb0 0a47 	vmov.f32	s0, s14
 8001f4c:	eef0 0a67 	vmov.f32	s1, s15
 8001f50:	f000 fa6a 	bl	8002428 <complementaryFilter>
 8001f54:	eeb0 7a40 	vmov.f32	s14, s0
 8001f58:	eef0 7a60 	vmov.f32	s15, s1
 8001f5c:	ed87 7b02 	vstr	d7, [r7, #8]
        	osMessageQueuePut(QueueInputPIDHandle, &outputAngle, 0, 0);
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <StartIMU_Task+0x190>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f107 0108 	add.w	r1, r7, #8
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f006 fe52 	bl	8008c14 <osMessageQueuePut>
        	prevAngle = outputAngle;
 8001f70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f74:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        	printf("aY = %.2f, ", LSM6DS33.accelerometer.y*ACC_SENSITIVITY);
 8001f78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f7c:	a31e      	add	r3, pc, #120	; (adr r3, 8001ff8 <StartIMU_Task+0x170>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe faf1 	bl	8000568 <__aeabi_dmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4623      	mov	r3, r4
 8001f8e:	4823      	ldr	r0, [pc, #140]	; (800201c <StartIMU_Task+0x194>)
 8001f90:	f002 f914 	bl	80041bc <printf_>
        	printf("aZ = %.2f, ", LSM6DS33.accelerometer.z*ACC_SENSITIVITY);
 8001f94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f98:	a317      	add	r3, pc, #92	; (adr r3, 8001ff8 <StartIMU_Task+0x170>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fae3 	bl	8000568 <__aeabi_dmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460c      	mov	r4, r1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4623      	mov	r3, r4
 8001faa:	481d      	ldr	r0, [pc, #116]	; (8002020 <StartIMU_Task+0x198>)
 8001fac:	f002 f906 	bl	80041bc <printf_>
        	printf("gX = %.2f, ", LSM6DS33.gyroscope.x*GYRO_SENSITIVITY);
 8001fb0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fb4:	a312      	add	r3, pc, #72	; (adr r3, 8002000 <StartIMU_Task+0x178>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fad5 	bl	8000568 <__aeabi_dmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	4817      	ldr	r0, [pc, #92]	; (8002024 <StartIMU_Task+0x19c>)
 8001fc8:	f002 f8f8 	bl	80041bc <printf_>
        	printf("accAngle = %.2f, ", accAngle);
 8001fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fd0:	4815      	ldr	r0, [pc, #84]	; (8002028 <StartIMU_Task+0x1a0>)
 8001fd2:	f002 f8f3 	bl	80041bc <printf_>
        	printf("comp filter = %.2f\n\r", outputAngle);
 8001fd6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4623      	mov	r3, r4
 8001fde:	4813      	ldr	r0, [pc, #76]	; (800202c <StartIMU_Task+0x1a4>)
 8001fe0:	f002 f8ec 	bl	80041bc <printf_>
 8001fe4:	e77c      	b.n	8001ee0 <StartIMU_Task+0x58>
    	}
    	else
    	{
    		osMutexRelease(MutexI2CHandle);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <StartIMU_Task+0x180>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f006 fbe0 	bl	80087b0 <osMutexRelease>
    		printf("LSM6 READ ERROR\n\r");
 8001ff0:	480f      	ldr	r0, [pc, #60]	; (8002030 <StartIMU_Task+0x1a8>)
 8001ff2:	f002 f8e3 	bl	80041bc <printf_>
    if(osOK == osSemaphoreAcquire(SemaphoreLSM6_DataReadyHandle, osWaitForever))
 8001ff6:	e773      	b.n	8001ee0 <StartIMU_Task+0x58>
 8001ff8:	0a5accd5 	.word	0x0a5accd5
 8001ffc:	3f0ffb48 	.word	0x3f0ffb48
 8002000:	1eb851ec 	.word	0x1eb851ec
 8002004:	3f81eb85 	.word	0x3f81eb85
 8002008:	20004b10 	.word	0x20004b10
 800200c:	20004b54 	.word	0x20004b54
 8002010:	0800e56c 	.word	0x0800e56c
 8002014:	20004b28 	.word	0x20004b28
 8002018:	20004b4c 	.word	0x20004b4c
 800201c:	0800e580 	.word	0x0800e580
 8002020:	0800e58c 	.word	0x0800e58c
 8002024:	0800e598 	.word	0x0800e598
 8002028:	0800e5a4 	.word	0x0800e5a4
 800202c:	0800e5b8 	.word	0x0800e5b8
 8002030:	0800e5d0 	.word	0x0800e5d0
 8002034:	00000000 	.word	0x00000000

08002038 <StartPIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void *argument)
{
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b0ac      	sub	sp, #176	; 0xb0
 800203c:	af02      	add	r7, sp, #8
 800203e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIDTask */
	PID_t PID;
	double input, output;
	double setpoint = PID_SETPOINT;
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double Kp = 6.5;
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	4c5f      	ldr	r4, [pc, #380]	; (80021d0 <StartPIDTask+0x198>)
 8002052:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	double Ki = 0.0;
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	f04f 0400 	mov.w	r4, #0
 800205e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	double Kd = 0.0;
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	f04f 0400 	mov.w	r4, #0
 800206a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	PID_Init(&PID, &input, &output, &setpoint, Kp, Ki, Kd, P_ON_ERROR, DIRECT);
 800206e:	f107 0408 	add.w	r4, r7, #8
 8002072:	f107 0210 	add.w	r2, r7, #16
 8002076:	f107 0118 	add.w	r1, r7, #24
 800207a:	f107 0020 	add.w	r0, r7, #32
 800207e:	2300      	movs	r3, #0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	2301      	movs	r3, #1
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	ed97 2b24 	vldr	d2, [r7, #144]	; 0x90
 800208a:	ed97 1b26 	vldr	d1, [r7, #152]	; 0x98
 800208e:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8002092:	4623      	mov	r3, r4
 8002094:	f7ff fb2c 	bl	80016f0 <PID_Init>
	PID_SetMode(&PID, AUTOMATIC);
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fcca 	bl	8001a38 <PID_SetMode>
	PID_SetSampleTime(&PID, (uint32_t) ((1.0/(float)PID_SAMPLE_TIME) * 1000.0));
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	210a      	movs	r1, #10
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fc12 	bl	80018d4 <PID_SetSampleTime>
	PID_SetOutputLimits(&PID, -10*DRV8834_MAX_SPEED, 10*DRV8834_MAX_SPEED);
 80020b0:	f107 0320 	add.w	r3, r7, #32
 80020b4:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80021c0 <StartPIDTask+0x188>
 80020b8:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80021c8 <StartPIDTask+0x190>
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fc44 	bl	800194a <PID_SetOutputLimits>
	osTimerStart(TimerPIDHandle, (PID.SampleTime * osKernelGetTickFreq()) / 1000);
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <StartPIDTask+0x19c>)
 80020c4:	681d      	ldr	r5, [r3, #0]
 80020c6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80020c8:	f005 ffcc 	bl	8008064 <osKernelGetTickFreq>
 80020cc:	4603      	mov	r3, r0
 80020ce:	fb03 f304 	mul.w	r3, r3, r4
 80020d2:	4a41      	ldr	r2, [pc, #260]	; (80021d8 <StartPIDTask+0x1a0>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	4619      	mov	r1, r3
 80020dc:	4628      	mov	r0, r5
 80020de:	f006 fa2f 	bl	8008540 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphorePIDComputeHandle, osWaitForever);
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <StartPIDTask+0x1a4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fc4e 	bl	800898c <osSemaphoreAcquire>
	  osMessageQueueGet(QueueInputPIDHandle, &input, NULL, 0);
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <StartPIDTask+0x1a8>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	f107 0118 	add.w	r1, r7, #24
 80020f8:	2300      	movs	r3, #0
 80020fa:	2200      	movs	r2, #0
 80020fc:	f006 fdfe 	bl	8008cfc <osMessageQueueGet>
	  pidMonitorInput = input;
 8002100:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002104:	4a37      	ldr	r2, [pc, #220]	; (80021e4 <StartPIDTask+0x1ac>)
 8002106:	e9c2 3400 	strd	r3, r4, [r2]
	  if(input < 30 && input >-30)
 800210a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <StartPIDTask+0x1b0>)
 8002114:	f7fe fc9a 	bl	8000a4c <__aeabi_dcmplt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00f      	beq.n	800213e <StartPIDTask+0x106>
 800211e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <StartPIDTask+0x1b4>)
 8002128:	f7fe fcae 	bl	8000a88 <__aeabi_dcmpgt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <StartPIDTask+0x106>
	  {
		  PID_Compute(&PID);
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd19 	bl	8001b6e <PID_Compute>
 800213c:	e005      	b.n	800214a <StartPIDTask+0x112>
	  }
	  else
	  {
		  output = 0.0;
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f04f 0400 	mov.w	r4, #0
 8002146:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  }

	  if(output < 5 && output > -5)
 800214a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <StartPIDTask+0x1b8>)
 8002154:	f7fe fc7a 	bl	8000a4c <__aeabi_dcmplt>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00f      	beq.n	800217e <StartPIDTask+0x146>
 800215e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <StartPIDTask+0x1bc>)
 8002168:	f7fe fc8e 	bl	8000a88 <__aeabi_dcmpgt>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <StartPIDTask+0x146>
	  {
		  output = 0.0;
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f04f 0400 	mov.w	r4, #0
 800217a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  }
	  osMessageQueuePut(QueueOutputPIDHandle, &output, 0, 0);
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <StartPIDTask+0x1c0>)
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	f107 0110 	add.w	r1, r7, #16
 8002186:	2300      	movs	r3, #0
 8002188:	2200      	movs	r2, #0
 800218a:	f006 fd43 	bl	8008c14 <osMessageQueuePut>
	  pidMonitorOutput = output;
 800218e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002192:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <StartPIDTask+0x1c4>)
 8002194:	e9c2 3400 	strd	r3, r4, [r2]
	  printf("PID input: %.2f, output:%.2f\n\r", input, output);
 8002198:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800219c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021a0:	e9cd 3400 	strd	r3, r4, [sp]
 80021a4:	4613      	mov	r3, r2
 80021a6:	460a      	mov	r2, r1
 80021a8:	4815      	ldr	r0, [pc, #84]	; (8002200 <StartPIDTask+0x1c8>)
 80021aa:	f002 f807 	bl	80041bc <printf_>
	  osThreadFlagsSet(StepperMotorsTaHandle, PID_DATA_READY);
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <StartPIDTask+0x1cc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2101      	movs	r1, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f006 f805 	bl	80081c4 <osThreadFlagsSet>
	  osSemaphoreAcquire(SemaphorePIDComputeHandle, osWaitForever);
 80021ba:	e792      	b.n	80020e2 <StartPIDTask+0xaa>
 80021bc:	f3af 8000 	nop.w
 80021c0:	00000000 	.word	0x00000000
 80021c4:	40590000 	.word	0x40590000
 80021c8:	00000000 	.word	0x00000000
 80021cc:	c0590000 	.word	0xc0590000
 80021d0:	401a0000 	.word	0x401a0000
 80021d4:	20004b38 	.word	0x20004b38
 80021d8:	10624dd3 	.word	0x10624dd3
 80021dc:	20004b1c 	.word	0x20004b1c
 80021e0:	20004b4c 	.word	0x20004b4c
 80021e4:	20004b30 	.word	0x20004b30
 80021e8:	403e0000 	.word	0x403e0000
 80021ec:	c03e0000 	.word	0xc03e0000
 80021f0:	40140000 	.word	0x40140000
 80021f4:	c0140000 	.word	0xc0140000
 80021f8:	20004b50 	.word	0x20004b50
 80021fc:	20004b20 	.word	0x20004b20
 8002200:	0800e5e4 	.word	0x0800e5e4
 8002204:	20004b40 	.word	0x20004b40

08002208 <StartStepperMotorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStepperMotorsTask */
void StartStepperMotorsTask(void *argument)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b0a1      	sub	sp, #132	; 0x84
 800220c:	af04      	add	r7, sp, #16
 800220e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStepperMotorsTask */
	StepMotor_t rightMotor;
	StepMotor_t leftMotor;
	double pid_output;
	int32_t speed = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	66fb      	str	r3, [r7, #108]	; 0x6c

	DRV8834_Init(&leftMotor, &htim2, TIM_CHANNEL_3);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2208      	movs	r2, #8
 800221a:	494c      	ldr	r1, [pc, #304]	; (800234c <StartStepperMotorsTask+0x144>)
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fe1b 	bl	8000e58 <DRV8834_Init>
	DRV8834_InitPins(&leftMotor, leftMotor_DIR_Pin, leftMotor_DIR_GPIO_Port,
 8002222:	f107 0014 	add.w	r0, r7, #20
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <StartStepperMotorsTask+0x148>)
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2320      	movs	r3, #32
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <StartStepperMotorsTask+0x148>)
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2340      	movs	r3, #64	; 0x40
 8002234:	4a46      	ldr	r2, [pc, #280]	; (8002350 <StartStepperMotorsTask+0x148>)
 8002236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800223a:	f7fe fe28 	bl	8000e8e <DRV8834_InitPins>
			leftMotor_M0_Pin, leftMotor_M0_GPIO_Port, leftMotor_M1_Pin, leftMotor_M1_GPIO_Port);
	DRV8834_SetMicrostep(&leftMotor, 4);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	2104      	movs	r1, #4
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe7f 	bl	8000f48 <DRV8834_SetMicrostep>

	DRV8834_Init(&rightMotor, &htim4, TIM_CHANNEL_1);
 800224a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800224e:	2200      	movs	r2, #0
 8002250:	4940      	ldr	r1, [pc, #256]	; (8002354 <StartStepperMotorsTask+0x14c>)
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fe00 	bl	8000e58 <DRV8834_Init>
	DRV8834_InitPins(&rightMotor, rightMotor_DIR_Pin, rightMotor_DIR_GPIO_Port,
 8002258:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800225c:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <StartStepperMotorsTask+0x150>)
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	2320      	movs	r3, #32
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <StartStepperMotorsTask+0x150>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2310      	movs	r3, #16
 800226a:	4a39      	ldr	r2, [pc, #228]	; (8002350 <StartStepperMotorsTask+0x148>)
 800226c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002270:	f7fe fe0d 	bl	8000e8e <DRV8834_InitPins>
			rightMotor_M0_Pin, rightMotor_M0_GPIO_Port, rightMotor_M1_Pin, rightMotor_M1_GPIO_Port);
	DRV8834_SetMicrostep(&rightMotor, 4);
 8002274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002278:	2104      	movs	r1, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fe64 	bl	8000f48 <DRV8834_SetMicrostep>
//	DRV8834_StartMotor(&leftMotor, 1);
//	DRV8834_StartMotor(&rightMotor, 1);
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(PID_DATA_READY, osFlagsWaitAll, osWaitForever);
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	2101      	movs	r1, #1
 8002286:	2001      	movs	r0, #1
 8002288:	f005 fffe 	bl	8008288 <osThreadFlagsWait>
    if(osOK == osMessageQueueGet(QueueOutputPIDHandle, &pid_output, NULL, 0))
 800228c:	4b33      	ldr	r3, [pc, #204]	; (800235c <StartStepperMotorsTask+0x154>)
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	f107 0108 	add.w	r1, r7, #8
 8002294:	2300      	movs	r3, #0
 8002296:	2200      	movs	r2, #0
 8002298:	f006 fd30 	bl	8008cfc <osMessageQueueGet>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ee      	bne.n	8002280 <StartStepperMotorsTask+0x78>
    {
    	speed = map((int32_t) pid_output, -10*DRV8834_MAX_SPEED, 10*DRV8834_MAX_SPEED, -DRV8834_MAX_SPEED, DRV8834_MAX_SPEED);
 80022a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022a6:	4618      	mov	r0, r3
 80022a8:	4621      	mov	r1, r4
 80022aa:	f7fe fc0d 	bl	8000ac8 <__aeabi_d2iz>
 80022ae:	230a      	movs	r3, #10
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	f06f 0309 	mvn.w	r3, #9
 80022b6:	2264      	movs	r2, #100	; 0x64
 80022b8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80022bc:	f000 f898 	bl	80023f0 <map>
 80022c0:	4603      	mov	r3, r0
 80022c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    	printf("Step motor input speed:%d\n\r", speed);
 80022c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80022c6:	4826      	ldr	r0, [pc, #152]	; (8002360 <StartStepperMotorsTask+0x158>)
 80022c8:	f001 ff78 	bl	80041bc <printf_>
    	if((leftMotor.state == STOPPED) && (rightMotor.state == STOPPED) && (speed != 0))
 80022cc:	7d3b      	ldrb	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d121      	bne.n	8002316 <StartStepperMotorsTask+0x10e>
 80022d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11d      	bne.n	8002316 <StartStepperMotorsTask+0x10e>
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01a      	beq.n	8002316 <StartStepperMotorsTask+0x10e>
    	{
    		osMutexAcquire(MutexMotorsHandle, osWaitForever);
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <StartStepperMotorsTask+0x15c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 fa03 	bl	80086f4 <osMutexAcquire>
    		DRV8834_StartMotor(&leftMotor, -speed);
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	425a      	negs	r2, r3
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe ffb5 	bl	8001268 <DRV8834_StartMotor>
    		DRV8834_StartMotor(&rightMotor, speed);
 80022fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002302:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe ffaf 	bl	8001268 <DRV8834_StartMotor>
    		osMutexRelease(MutexMotorsHandle);
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <StartStepperMotorsTask+0x15c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f006 fa4e 	bl	80087b0 <osMutexRelease>
 8002314:	e019      	b.n	800234a <StartStepperMotorsTask+0x142>
    	}
    	else
    	{
    		osMutexAcquire(MutexMotorsHandle, osWaitForever);
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <StartStepperMotorsTask+0x15c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f04f 31ff 	mov.w	r1, #4294967295
 800231e:	4618      	mov	r0, r3
 8002320:	f006 f9e8 	bl	80086f4 <osMutexAcquire>
        	DRV8834_SetSpeed(&leftMotor, -speed);
 8002324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002326:	425a      	negs	r2, r3
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fefa 	bl	8001128 <DRV8834_SetSpeed>
        	DRV8834_SetSpeed(&rightMotor, speed);
 8002334:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002338:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fef4 	bl	8001128 <DRV8834_SetSpeed>
    		osMutexRelease(MutexMotorsHandle);
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <StartStepperMotorsTask+0x15c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f006 fa33 	bl	80087b0 <osMutexRelease>
	osThreadFlagsWait(PID_DATA_READY, osFlagsWaitAll, osWaitForever);
 800234a:	e799      	b.n	8002280 <StartStepperMotorsTask+0x78>
 800234c:	20004c28 	.word	0x20004c28
 8002350:	40020000 	.word	0x40020000
 8002354:	20004be8 	.word	0x20004be8
 8002358:	40020400 	.word	0x40020400
 800235c:	20004b50 	.word	0x20004b50
 8002360:	0800e604 	.word	0x0800e604
 8002364:	20004b14 	.word	0x20004b14

08002368 <TimerPIDCallback>:
  /* USER CODE END StartStepperMotorsTask */
}

/* TimerPIDCallback function */
void TimerPIDCallback(void *argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerPIDCallback */
	osSemaphoreRelease(SemaphorePIDComputeHandle);
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <TimerPIDCallback+0x1c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f006 fb6f 	bl	8008a58 <osSemaphoreRelease>
  /* USER CODE END TimerPIDCallback */
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20004b1c 	.word	0x20004b1c

08002388 <_putchar>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexUARTputcharHandle, osWaitForever);
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <_putchar+0x38>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f04f 31ff 	mov.w	r1, #4294967295
 800239a:	4618      	mov	r0, r3
 800239c:	f006 f9aa 	bl	80086f4 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 80023a0:	1df9      	adds	r1, r7, #7
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	2201      	movs	r2, #1
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <_putchar+0x3c>)
 80023aa:	f005 f98a 	bl	80076c2 <HAL_UART_Transmit>
	osMutexRelease(MutexUARTputcharHandle);
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <_putchar+0x38>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f006 f9fc 	bl	80087b0 <osMutexRelease>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20004b48 	.word	0x20004b48
 80023c4:	20004c68 	.word	0x20004c68

080023c8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LSM6_Interrupt_Pin)
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d104      	bne.n	80023e4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(SemaphoreLSM6_DataReadyHandle);
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_GPIO_EXTI_Callback+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f006 fb3a 	bl	8008a58 <osSemaphoreRelease>
	}
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20004b28 	.word	0x20004b28

080023f0 <map>:

uint32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	69b9      	ldr	r1, [r7, #24]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	1a8a      	subs	r2, r1, r2
 800240a:	fb02 f203 	mul.w	r2, r2, r3
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1acb      	subs	r3, r1, r3
 8002414:	fb92 f2f3 	sdiv	r2, r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4413      	add	r3, r2
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <complementaryFilter>:

double complementaryFilter(double gyroX, double accAngle, double prevAngle)
{
 8002428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002432:	ed87 1b02 	vstr	d1, [r7, #8]
 8002436:	ed87 2b00 	vstr	d2, [r7]
	return (COMP_FILTER_GAIN * (prevAngle + ((gyroX*GYRO_SENSITIVITY + GYRO_OFFSET_X)/LSM6_SAMPLE_TIME)))
 800243a:	a32f      	add	r3, pc, #188	; (adr r3, 80024f8 <complementaryFilter+0xd0>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002444:	f7fe f890 	bl	8000568 <__aeabi_dmul>
 8002448:	4603      	mov	r3, r0
 800244a:	460c      	mov	r4, r1
 800244c:	4618      	mov	r0, r3
 800244e:	4621      	mov	r1, r4
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002458:	f7fd fece 	bl	80001f8 <__aeabi_dsub>
 800245c:	4603      	mov	r3, r0
 800245e:	460c      	mov	r4, r1
 8002460:	4618      	mov	r0, r3
 8002462:	4621      	mov	r1, r4
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <complementaryFilter+0xc8>)
 800246a:	f7fe f9a7 	bl	80007bc <__aeabi_ddiv>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	4618      	mov	r0, r3
 8002474:	4621      	mov	r1, r4
 8002476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800247a:	f7fd febf 	bl	80001fc <__adddf3>
 800247e:	4603      	mov	r3, r0
 8002480:	460c      	mov	r4, r1
 8002482:	4618      	mov	r0, r3
 8002484:	4621      	mov	r1, r4
 8002486:	a418      	add	r4, pc, #96	; (adr r4, 80024e8 <complementaryFilter+0xc0>)
 8002488:	e9d4 3400 	ldrd	r3, r4, [r4]
 800248c:	461a      	mov	r2, r3
 800248e:	4623      	mov	r3, r4
 8002490:	f7fe f86a 	bl	8000568 <__aeabi_dmul>
 8002494:	4603      	mov	r3, r0
 8002496:	460c      	mov	r4, r1
 8002498:	461d      	mov	r5, r3
 800249a:	4626      	mov	r6, r4
			+ ((1 - COMP_FILTER_GAIN) * accAngle);
 800249c:	a412      	add	r4, pc, #72	; (adr r4, 80024e8 <complementaryFilter+0xc0>)
 800249e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	4623      	mov	r3, r4
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	4912      	ldr	r1, [pc, #72]	; (80024f4 <complementaryFilter+0xcc>)
 80024ac:	f7fd fea4 	bl	80001f8 <__aeabi_dsub>
 80024b0:	4603      	mov	r3, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	4618      	mov	r0, r3
 80024b6:	4621      	mov	r1, r4
 80024b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024bc:	f7fe f854 	bl	8000568 <__aeabi_dmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	461a      	mov	r2, r3
 80024c6:	4623      	mov	r3, r4
 80024c8:	4628      	mov	r0, r5
 80024ca:	4631      	mov	r1, r6
 80024cc:	f7fd fe96 	bl	80001fc <__adddf3>
 80024d0:	4603      	mov	r3, r0
 80024d2:	460c      	mov	r4, r1
 80024d4:	ec44 3b17 	vmov	d7, r3, r4
}
 80024d8:	eeb0 0a47 	vmov.f32	s0, s14
 80024dc:	eef0 0a67 	vmov.f32	s1, s15
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	eb851eb8 	.word	0xeb851eb8
 80024ec:	3feeb851 	.word	0x3feeb851
 80024f0:	404a0000 	.word	0x404a0000
 80024f4:	3ff00000 	.word	0x3ff00000
 80024f8:	1eb851ec 	.word	0x1eb851ec
 80024fc:	3f81eb85 	.word	0x3f81eb85

08002500 <calculateAccAngle>:

double calculateAccAngle(double accY, double accZ)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	ed2d 8b02 	vpush	{d8}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	ed87 0b02 	vstr	d0, [r7, #8]
 800250e:	ed87 1b00 	vstr	d1, [r7]
	return (atan2((accY*ACC_SENSITIVITY + ACC_OFFSET_Y), (accZ*ACC_SENSITIVITY + ACC_OFFSET_Z)) * 180.0/M_PI);
 8002512:	a32a      	add	r3, pc, #168	; (adr r3, 80025bc <calculateAccAngle+0xbc>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800251c:	f7fe f824 	bl	8000568 <__aeabi_dmul>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	4618      	mov	r0, r3
 8002526:	4621      	mov	r1, r4
 8002528:	a326      	add	r3, pc, #152	; (adr r3, 80025c4 <calculateAccAngle+0xc4>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fd fe65 	bl	80001fc <__adddf3>
 8002532:	4603      	mov	r3, r0
 8002534:	460c      	mov	r4, r1
 8002536:	ec44 3b18 	vmov	d8, r3, r4
 800253a:	a320      	add	r3, pc, #128	; (adr r3, 80025bc <calculateAccAngle+0xbc>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002544:	f7fe f810 	bl	8000568 <__aeabi_dmul>
 8002548:	4603      	mov	r3, r0
 800254a:	460c      	mov	r4, r1
 800254c:	4618      	mov	r0, r3
 800254e:	4621      	mov	r1, r4
 8002550:	a31e      	add	r3, pc, #120	; (adr r3, 80025cc <calculateAccAngle+0xcc>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fd fe4f 	bl	80001f8 <__aeabi_dsub>
 800255a:	4603      	mov	r3, r0
 800255c:	460c      	mov	r4, r1
 800255e:	ec44 3b17 	vmov	d7, r3, r4
 8002562:	eeb0 1a47 	vmov.f32	s2, s14
 8002566:	eef0 1a67 	vmov.f32	s3, s15
 800256a:	eeb0 0a48 	vmov.f32	s0, s16
 800256e:	eef0 0a68 	vmov.f32	s1, s17
 8002572:	f00b fd04 	bl	800df7e <atan2>
 8002576:	ec51 0b10 	vmov	r0, r1, d0
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <calculateAccAngle+0xb8>)
 8002580:	f7fd fff2 	bl	8000568 <__aeabi_dmul>
 8002584:	4603      	mov	r3, r0
 8002586:	460c      	mov	r4, r1
 8002588:	4618      	mov	r0, r3
 800258a:	4621      	mov	r1, r4
 800258c:	a308      	add	r3, pc, #32	; (adr r3, 80025b0 <calculateAccAngle+0xb0>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fe f913 	bl	80007bc <__aeabi_ddiv>
 8002596:	4603      	mov	r3, r0
 8002598:	460c      	mov	r4, r1
 800259a:	ec44 3b17 	vmov	d7, r3, r4
}
 800259e:	eeb0 0a47 	vmov.f32	s0, s14
 80025a2:	eef0 0a67 	vmov.f32	s1, s15
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	ecbd 8b02 	vpop	{d8}
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	54442d18 	.word	0x54442d18
 80025b4:	400921fb 	.word	0x400921fb
 80025b8:	40668000 	.word	0x40668000
 80025bc:	0a5accd5 	.word	0x0a5accd5
 80025c0:	3f0ffb48 	.word	0x3f0ffb48
 80025c4:	9999999a 	.word	0x9999999a
 80025c8:	3fa99999 	.word	0x3fa99999
 80025cc:	47ae147b 	.word	0x47ae147b
 80025d0:	3f947ae1 	.word	0x3f947ae1

080025d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b44      	ldr	r3, [pc, #272]	; (8002700 <MX_GPIO_Init+0x12c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a43      	ldr	r2, [pc, #268]	; (8002700 <MX_GPIO_Init+0x12c>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <MX_GPIO_Init+0x12c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <MX_GPIO_Init+0x12c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a3c      	ldr	r2, [pc, #240]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a35      	ldr	r2, [pc, #212]	; (8002700 <MX_GPIO_Init+0x12c>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b33      	ldr	r3, [pc, #204]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a2e      	ldr	r2, [pc, #184]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8002660:	4828      	ldr	r0, [pc, #160]	; (8002704 <MX_GPIO_Init+0x130>)
 8002662:	f002 fc69 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, rightMotor_M0_Pin|rightMotor_M1_Pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	2130      	movs	r1, #48	; 0x30
 800266a:	4827      	ldr	r0, [pc, #156]	; (8002708 <MX_GPIO_Init+0x134>)
 800266c:	f002 fc64 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <MX_GPIO_Init+0x138>)
 8002678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4822      	ldr	r0, [pc, #136]	; (8002710 <MX_GPIO_Init+0x13c>)
 8002686:	f002 f9f3 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = leftMotor_M1_Pin|leftMotor_M0_Pin|leftMotor_DIR_Pin|rightMotor_DIR_Pin;
 800268a:	f44f 7358 	mov.w	r3, #864	; 0x360
 800268e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4818      	ldr	r0, [pc, #96]	; (8002704 <MX_GPIO_Init+0x130>)
 80026a4:	f002 f9e4 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6_Interrupt_Pin;
 80026a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_GPIO_Init+0x140>)
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4811      	ldr	r0, [pc, #68]	; (8002704 <MX_GPIO_Init+0x130>)
 80026be:	f002 f9d7 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = rightMotor_M0_Pin|rightMotor_M1_Pin;
 80026c2:	2330      	movs	r3, #48	; 0x30
 80026c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <MX_GPIO_Init+0x134>)
 80026da:	f002 f9c9 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_GPIO_Init+0x134>)
 80026f2:	f002 f9bd 	bl	8004a70 <HAL_GPIO_Init>

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	10210000 	.word	0x10210000
 8002710:	40020800 	.word	0x40020800
 8002714:	10110000 	.word	0x10110000

08002718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_I2C1_Init+0x50>)
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <MX_I2C1_Init+0x54>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_I2C1_Init+0x50>)
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <MX_I2C1_Init+0x58>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_I2C1_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_I2C1_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_I2C1_Init+0x50>)
 8002736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800273a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_I2C1_Init+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_I2C1_Init+0x50>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <MX_I2C1_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_I2C1_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <MX_I2C1_Init+0x50>)
 8002756:	f002 fc21 	bl	8004f9c <HAL_I2C_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002760:	f000 f8f2 	bl	8002948 <Error_Handler>
  }

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20004b54 	.word	0x20004b54
 800276c:	40005400 	.word	0x40005400
 8002770:	00061a80 	.word	0x00061a80

08002774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <HAL_I2C_MspInit+0x84>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d12c      	bne.n	80027f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_I2C_MspInit+0x88>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_I2C_MspInit+0x88>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_I2C_MspInit+0x88>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b8:	2312      	movs	r3, #18
 80027ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027bc:	2301      	movs	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027c4:	2304      	movs	r3, #4
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	480c      	ldr	r0, [pc, #48]	; (8002800 <HAL_I2C_MspInit+0x8c>)
 80027d0:	f002 f94e 	bl	8004a70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_I2C_MspInit+0x88>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	4a07      	ldr	r2, [pc, #28]	; (80027fc <HAL_I2C_MspInit+0x88>)
 80027de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e2:	6413      	str	r3, [r2, #64]	; 0x40
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_I2C_MspInit+0x88>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40005400 	.word	0x40005400
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020400 	.word	0x40020400

08002804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002808:	f002 f80e 	bl	8004828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800280c:	f000 f814 	bl	8002838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002810:	f7ff fee0 	bl	80025d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002814:	f001 ff6c 	bl	80046f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002818:	f7ff ff7e 	bl	8002718 <MX_I2C1_Init>
  MX_TIM4_Init();
 800281c:	f001 fe5c 	bl	80044d8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002820:	f001 fde4 	bl	80043ec <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002824:	f000 f872 	bl	800290c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002828:	f005 fbb2 	bl	8007f90 <osKernelInitialize>
  MX_FREERTOS_Init();
 800282c:	f7ff fa88 	bl	8001d40 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002830:	f005 fbe2 	bl	8007ff8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002834:	e7fe      	b.n	8002834 <main+0x30>
	...

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b094      	sub	sp, #80	; 0x50
 800283c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283e:	f107 0320 	add.w	r3, r7, #32
 8002842:	2230      	movs	r2, #48	; 0x30
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f009 fe75 	bl	800c536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	4b28      	ldr	r3, [pc, #160]	; (8002904 <SystemClock_Config+0xcc>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <SystemClock_Config+0xcc>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <SystemClock_Config+0xcc>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <SystemClock_Config+0xd0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a21      	ldr	r2, [pc, #132]	; (8002908 <SystemClock_Config+0xd0>)
 8002882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <SystemClock_Config+0xd0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002894:	2302      	movs	r3, #2
 8002896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002898:	2301      	movs	r3, #1
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800289c:	2310      	movs	r3, #16
 800289e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a0:	2302      	movs	r3, #2
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028a4:	2300      	movs	r3, #0
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80028a8:	2310      	movs	r3, #16
 80028aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028b2:	2304      	movs	r3, #4
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028b6:	2304      	movs	r3, #4
 80028b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ba:	f107 0320 	add.w	r3, r7, #32
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fb20 	bl	8005f04 <HAL_RCC_OscConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028ca:	f000 f83d 	bl	8002948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ce:	230f      	movs	r3, #15
 80028d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d2:	2302      	movs	r3, #2
 80028d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fd7a 	bl	80063e4 <HAL_RCC_ClockConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80028f6:	f000 f827 	bl	8002948 <Error_Handler>
  }
}
 80028fa:	bf00      	nop
 80028fc:	3750      	adds	r7, #80	; 0x50
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000

0800290c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2105      	movs	r1, #5
 8002914:	2028      	movs	r0, #40	; 0x28
 8002916:	f002 f881 	bl	8004a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800291a:	2028      	movs	r0, #40	; 0x28
 800291c:	f002 f89a 	bl	8004a54 <HAL_NVIC_EnableIRQ>
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002936:	f001 ff99 	bl	800486c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40014400 	.word	0x40014400

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294e:	e7fe      	b.n	800294e <Error_Handler+0x6>

08002950 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4603      	mov	r3, r0
 800297a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <_out_char+0x1e>
    _putchar(character);
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fcff 	bl	8002388 <_putchar>
  }
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e002      	b.n	80029a8 <_strnlen_s+0x16>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <_strnlen_s+0x28>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	603a      	str	r2, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f3      	bne.n	80029a2 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b2f      	cmp	r3, #47	; 0x2f
 80029da:	d904      	bls.n	80029e6 <_is_digit+0x1a>
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b39      	cmp	r3, #57	; 0x39
 80029e0:	d801      	bhi.n	80029e6 <_is_digit+0x1a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <_is_digit+0x1c>
 80029e6:	2300      	movs	r3, #0
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002a06:	e00e      	b.n	8002a26 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1c59      	adds	r1, r3, #1
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4403      	add	r3, r0
 8002a22:	3b30      	subs	r3, #48	; 0x30
 8002a24:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ffcd 	bl	80029cc <_is_digit>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e7      	bne.n	8002a08 <_atoi+0xe>
  }
  return i;
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002a42:	b590      	push	{r4, r7, lr}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d125      	bne.n	8002aaa <_out_rev+0x68>
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d120      	bne.n	8002aaa <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e00a      	b.n	8002a84 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	1c53      	adds	r3, r2, #1
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	68fc      	ldr	r4, [r7, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	2020      	movs	r0, #32
 8002a7c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3f0      	bcc.n	8002a6e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002a8c:	e00d      	b.n	8002aaa <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	3b01      	subs	r3, #1
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	4413      	add	r3, r2
 8002a9a:	7818      	ldrb	r0, [r3, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	1c53      	adds	r3, r2, #1
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	68fc      	ldr	r4, [r7, #12]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	47a0      	blx	r4
  while (len) {
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00e      	beq.n	8002ad8 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002aba:	e007      	b.n	8002acc <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	1c53      	adds	r3, r2, #1
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	68fc      	ldr	r4, [r7, #12]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	2020      	movs	r0, #32
 8002aca:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f1      	bhi.n	8002abc <_out_rev+0x7a>
    }
  }

  return idx;
 8002ad8:	687b      	ldr	r3, [r7, #4]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}

08002ae2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	af04      	add	r7, sp, #16
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d136      	bne.n	8002b68 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d018      	beq.n	8002b32 <_ntoa_format+0x50>
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d013      	beq.n	8002b32 <_ntoa_format+0x50>
 8002b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <_ntoa_format+0x3a>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <_ntoa_format+0x50>
      width--;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b22:	e006      	b.n	8002b32 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	61fa      	str	r2, [r7, #28]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2230      	movs	r2, #48	; 0x30
 8002b30:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d20a      	bcs.n	8002b50 <_ntoa_format+0x6e>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b1f      	cmp	r3, #31
 8002b3e:	d9f1      	bls.n	8002b24 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b40:	e006      	b.n	8002b50 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	61fa      	str	r2, [r7, #28]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2230      	movs	r2, #48	; 0x30
 8002b4e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <_ntoa_format+0x86>
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d202      	bcs.n	8002b68 <_ntoa_format+0x86>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b1f      	cmp	r3, #31
 8002b66:	d9ec      	bls.n	8002b42 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d058      	beq.n	8002c24 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d116      	bne.n	8002baa <_ntoa_format+0xc8>
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d013      	beq.n	8002baa <_ntoa_format+0xc8>
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d003      	beq.n	8002b92 <_ntoa_format+0xb0>
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10b      	bne.n	8002baa <_ntoa_format+0xc8>
      len--;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <_ntoa_format+0xc8>
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d102      	bne.n	8002baa <_ntoa_format+0xc8>
        len--;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d10f      	bne.n	8002bd0 <_ntoa_format+0xee>
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <_ntoa_format+0xee>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b1f      	cmp	r3, #31
 8002bbe:	d807      	bhi.n	8002bd0 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	61fa      	str	r2, [r7, #28]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4413      	add	r3, r2
 8002bca:	2278      	movs	r2, #120	; 0x78
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e01f      	b.n	8002c10 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d10f      	bne.n	8002bf6 <_ntoa_format+0x114>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <_ntoa_format+0x114>
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b1f      	cmp	r3, #31
 8002be4:	d807      	bhi.n	8002bf6 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	61fa      	str	r2, [r7, #28]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	2258      	movs	r2, #88	; 0x58
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e00c      	b.n	8002c10 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d109      	bne.n	8002c10 <_ntoa_format+0x12e>
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b1f      	cmp	r3, #31
 8002c00:	d806      	bhi.n	8002c10 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	61fa      	str	r2, [r7, #28]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	2262      	movs	r2, #98	; 0x62
 8002c0e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b1f      	cmp	r3, #31
 8002c14:	d806      	bhi.n	8002c24 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	61fa      	str	r2, [r7, #28]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	2230      	movs	r2, #48	; 0x30
 8002c22:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b1f      	cmp	r3, #31
 8002c28:	d824      	bhi.n	8002c74 <_ntoa_format+0x192>
    if (negative) {
 8002c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	61fa      	str	r2, [r7, #28]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	222d      	movs	r2, #45	; 0x2d
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e018      	b.n	8002c74 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	61fa      	str	r2, [r7, #28]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4413      	add	r3, r2
 8002c56:	222b      	movs	r2, #43	; 0x2b
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e00b      	b.n	8002c74 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	61fa      	str	r2, [r7, #28]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	2220      	movs	r2, #32
 8002c72:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fed9 	bl	8002a42 <_out_rev>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b096      	sub	sp, #88	; 0x58
 8002c9e:	af08      	add	r7, sp, #32
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb4:	f023 0310 	bic.w	r3, r3, #16
 8002cb8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <_ntoa_long+0x30>
 8002cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d033      	beq.n	8002d32 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cce:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002cd4:	fb01 f202 	mul.w	r2, r1, r2
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ce2:	2b09      	cmp	r3, #9
 8002ce4:	d804      	bhi.n	8002cf0 <_ntoa_long+0x56>
 8002ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cea:	3330      	adds	r3, #48	; 0x30
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	e00d      	b.n	8002d0c <_ntoa_long+0x72>
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <_ntoa_long+0x64>
 8002cfa:	2241      	movs	r2, #65	; 0x41
 8002cfc:	e000      	b.n	8002d00 <_ntoa_long+0x66>
 8002cfe:	2261      	movs	r2, #97	; 0x61
 8002d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d04:	4413      	add	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3b0a      	subs	r3, #10
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	6379      	str	r1, [r7, #52]	; 0x34
 8002d12:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d16:	440b      	add	r3, r1
 8002d18:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <_ntoa_long+0x98>
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	2b1f      	cmp	r3, #31
 8002d30:	d9cb      	bls.n	8002cca <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d34:	9306      	str	r3, [sp, #24]
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d38:	9305      	str	r3, [sp, #20]
 8002d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3c:	9304      	str	r3, [sp, #16]
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fec2 	bl	8002ae2 <_ntoa_format>
 8002d5e:	4603      	mov	r3, r0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3738      	adds	r7, #56	; 0x38
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b097      	sub	sp, #92	; 0x5c
 8002d6c:	af08      	add	r7, sp, #32
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002d7a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002d7e:	4323      	orrs	r3, r4
 8002d80:	d103      	bne.n	8002d8a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d84:	f023 0310 	bic.w	r3, r3, #16
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <_ntoa_long_long+0x34>
 8002d94:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002d98:	4323      	orrs	r3, r4
 8002d9a:	d039      	beq.n	8002e10 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8002d9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002da0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002da4:	f7fd fed8 	bl	8000b58 <__aeabi_uldivmod>
 8002da8:	461c      	mov	r4, r3
 8002daa:	4613      	mov	r3, r2
 8002dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d804      	bhi.n	8002dc2 <_ntoa_long_long+0x5a>
 8002db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dbc:	3330      	adds	r3, #48	; 0x30
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	e00d      	b.n	8002dde <_ntoa_long_long+0x76>
 8002dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <_ntoa_long_long+0x68>
 8002dcc:	2241      	movs	r2, #65	; 0x41
 8002dce:	e000      	b.n	8002dd2 <_ntoa_long_long+0x6a>
 8002dd0:	2261      	movs	r2, #97	; 0x61
 8002dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3b0a      	subs	r3, #10
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	1c59      	adds	r1, r3, #1
 8002de2:	6379      	str	r1, [r7, #52]	; 0x34
 8002de4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002de8:	440b      	add	r3, r1
 8002dea:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002df2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002df6:	f7fd feaf 	bl	8000b58 <__aeabi_uldivmod>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002e02:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002e06:	4323      	orrs	r3, r4
 8002e08:	d002      	beq.n	8002e10 <_ntoa_long_long+0xa8>
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	2b1f      	cmp	r3, #31
 8002e0e:	d9c5      	bls.n	8002d9c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e14:	9206      	str	r2, [sp, #24]
 8002e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e18:	9205      	str	r2, [sp, #20]
 8002e1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e1c:	9204      	str	r2, [sp, #16]
 8002e1e:	9303      	str	r3, [sp, #12]
 8002e20:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fe53 	bl	8002ae2 <_ntoa_format>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	373c      	adds	r7, #60	; 0x3c
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd90      	pop	{r4, r7, pc}
	...

08002e48 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b09d      	sub	sp, #116	; 0x74
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	6178      	str	r0, [r7, #20]
 8002e50:	6139      	str	r1, [r7, #16]
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e72:	f7fd fde1 	bl	8000a38 <__aeabi_dcmpeq>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e7e:	9303      	str	r3, [sp, #12]
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	9302      	str	r3, [sp, #8]
 8002e84:	2303      	movs	r3, #3
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	4baf      	ldr	r3, [pc, #700]	; (8003148 <_ftoa+0x300>)
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff fdd5 	bl	8002a42 <_out_rev>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	e237      	b.n	800330c <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea8:	f7fd fdd0 	bl	8000a4c <__aeabi_dcmplt>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00f      	beq.n	8002ed2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eb4:	9303      	str	r3, [sp, #12]
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	2304      	movs	r3, #4
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	4ba3      	ldr	r3, [pc, #652]	; (800314c <_ftoa+0x304>)
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	6939      	ldr	r1, [r7, #16]
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7ff fdba 	bl	8002a42 <_out_rev>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	e21c      	b.n	800330c <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8002ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed6:	4b9e      	ldr	r3, [pc, #632]	; (8003150 <_ftoa+0x308>)
 8002ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002edc:	f7fd fdd4 	bl	8000a88 <__aeabi_dcmpgt>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01d      	beq.n	8002f22 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <_ftoa+0xac>
 8002ef0:	4b98      	ldr	r3, [pc, #608]	; (8003154 <_ftoa+0x30c>)
 8002ef2:	e000      	b.n	8002ef6 <_ftoa+0xae>
 8002ef4:	4b98      	ldr	r3, [pc, #608]	; (8003158 <_ftoa+0x310>)
 8002ef6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ef8:	f002 0204 	and.w	r2, r2, #4
 8002efc:	2a00      	cmp	r2, #0
 8002efe:	d001      	beq.n	8002f04 <_ftoa+0xbc>
 8002f00:	2204      	movs	r2, #4
 8002f02:	e000      	b.n	8002f06 <_ftoa+0xbe>
 8002f04:	2203      	movs	r2, #3
 8002f06:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002f08:	9103      	str	r1, [sp, #12]
 8002f0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f0c:	9102      	str	r1, [sp, #8]
 8002f0e:	9201      	str	r2, [sp, #4]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	6939      	ldr	r1, [r7, #16]
 8002f18:	6978      	ldr	r0, [r7, #20]
 8002f1a:	f7ff fd92 	bl	8002a42 <_out_rev>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	e1f4      	b.n	800330c <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002f22:	a385      	add	r3, pc, #532	; (adr r3, 8003138 <_ftoa+0x2f0>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f2c:	f7fd fdac 	bl	8000a88 <__aeabi_dcmpgt>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <_ftoa+0x102>
 8002f36:	a382      	add	r3, pc, #520	; (adr r3, 8003140 <_ftoa+0x2f8>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f40:	f7fd fd84 	bl	8000a4c <__aeabi_dcmplt>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00f      	beq.n	8002f6a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4c:	9302      	str	r3, [sp, #8]
 8002f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	ed97 0b00 	vldr	d0, [r7]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6939      	ldr	r1, [r7, #16]
 8002f60:	6978      	ldr	r0, [r7, #20]
 8002f62:	f000 f9dd 	bl	8003320 <_etoa>
 8002f66:	4603      	mov	r3, r0
 8002f68:	e1d0      	b.n	800330c <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7c:	f7fd fd66 	bl	8000a4c <__aeabi_dcmplt>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00e      	beq.n	8002fa4 <_ftoa+0x15c>
    negative = true;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	f7fd f92e 	bl	80001f8 <__aeabi_dsub>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002fae:	2306      	movs	r3, #6
 8002fb0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002fb2:	e00b      	b.n	8002fcc <_ftoa+0x184>
    buf[len++] = '0';
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fbe:	4413      	add	r3, r2
 8002fc0:	2230      	movs	r2, #48	; 0x30
 8002fc2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	2b1f      	cmp	r3, #31
 8002fd0:	d802      	bhi.n	8002fd8 <_ftoa+0x190>
 8002fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd4:	2b09      	cmp	r3, #9
 8002fd6:	d8ed      	bhi.n	8002fb4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fdc:	f7fd fd74 	bl	8000ac8 <__aeabi_d2iz>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002fe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002fe6:	f7fd fa55 	bl	8000494 <__aeabi_i2d>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4623      	mov	r3, r4
 8002ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ff6:	f7fd f8ff 	bl	80001f8 <__aeabi_dsub>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	4618      	mov	r0, r3
 8003000:	4621      	mov	r1, r4
 8003002:	4a56      	ldr	r2, [pc, #344]	; (800315c <_ftoa+0x314>)
 8003004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800300e:	461a      	mov	r2, r3
 8003010:	4623      	mov	r3, r4
 8003012:	f7fd faa9 	bl	8000568 <__aeabi_dmul>
 8003016:	4603      	mov	r3, r0
 8003018:	460c      	mov	r4, r1
 800301a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800301e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003022:	f7fd fd79 	bl	8000b18 <__aeabi_d2uiz>
 8003026:	4603      	mov	r3, r0
 8003028:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800302a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800302c:	f7fd fa22 	bl	8000474 <__aeabi_ui2d>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800303c:	f7fd f8dc 	bl	80001f8 <__aeabi_dsub>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	4b44      	ldr	r3, [pc, #272]	; (8003160 <_ftoa+0x318>)
 800304e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003052:	f7fd fd19 	bl	8000a88 <__aeabi_dcmpgt>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d018      	beq.n	800308e <_ftoa+0x246>
    ++frac;
 800305c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305e:	3301      	adds	r3, #1
 8003060:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003062:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003064:	f7fd fa06 	bl	8000474 <__aeabi_ui2d>
 8003068:	4a3c      	ldr	r2, [pc, #240]	; (800315c <_ftoa+0x314>)
 800306a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003074:	461a      	mov	r2, r3
 8003076:	4623      	mov	r3, r4
 8003078:	f7fd fcfc 	bl	8000a74 <__aeabi_dcmpge>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01a      	beq.n	80030b8 <_ftoa+0x270>
      frac = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	3301      	adds	r3, #1
 800308a:	657b      	str	r3, [r7, #84]	; 0x54
 800308c:	e014      	b.n	80030b8 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <_ftoa+0x318>)
 8003094:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003098:	f7fd fcd8 	bl	8000a4c <__aeabi_dcmplt>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <_ftoa+0x26a>
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80030b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b4:	3301      	adds	r3, #1
 80030b6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80030b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d136      	bne.n	800312c <_ftoa+0x2e4>
    diff = value - (double)whole;
 80030be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80030c0:	f7fd f9e8 	bl	8000494 <__aeabi_i2d>
 80030c4:	4603      	mov	r3, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	461a      	mov	r2, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030d0:	f7fd f892 	bl	80001f8 <__aeabi_dsub>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80030dc:	2301      	movs	r3, #1
 80030de:	461c      	mov	r4, r3
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <_ftoa+0x318>)
 80030e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80030ea:	f7fd fcaf 	bl	8000a4c <__aeabi_dcmplt>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <_ftoa+0x2b0>
 80030f4:	2300      	movs	r3, #0
 80030f6:	461c      	mov	r4, r3
 80030f8:	b2e3      	uxtb	r3, r4
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <_ftoa+0x2d0>
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <_ftoa+0x318>)
 800310a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800310e:	f7fd fcbb 	bl	8000a88 <__aeabi_dcmpgt>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d069      	beq.n	80031ec <_ftoa+0x3a4>
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8087 	beq.w	8003232 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003126:	3301      	adds	r3, #1
 8003128:	657b      	str	r3, [r7, #84]	; 0x54
 800312a:	e082      	b.n	8003232 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800312c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003130:	e039      	b.n	80031a6 <_ftoa+0x35e>
 8003132:	bf00      	nop
 8003134:	f3af 8000 	nop.w
 8003138:	00000000 	.word	0x00000000
 800313c:	41cdcd65 	.word	0x41cdcd65
 8003140:	00000000 	.word	0x00000000
 8003144:	c1cdcd65 	.word	0xc1cdcd65
 8003148:	0800e620 	.word	0x0800e620
 800314c:	0800e624 	.word	0x0800e624
 8003150:	7fefffff 	.word	0x7fefffff
 8003154:	0800e62c 	.word	0x0800e62c
 8003158:	0800e634 	.word	0x0800e634
 800315c:	0800e770 	.word	0x0800e770
 8003160:	3fe00000 	.word	0x3fe00000
      --count;
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	3b01      	subs	r3, #1
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800316a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800316c:	4b69      	ldr	r3, [pc, #420]	; (8003314 <_ftoa+0x4cc>)
 800316e:	fba3 2301 	umull	r2, r3, r3, r1
 8003172:	08da      	lsrs	r2, r3, #3
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	1aca      	subs	r2, r1, r3
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003186:	3230      	adds	r2, #48	; 0x30
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800318e:	440b      	add	r3, r1
 8003190:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003196:	4a5f      	ldr	r2, [pc, #380]	; (8003314 <_ftoa+0x4cc>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	653b      	str	r3, [r7, #80]	; 0x50
 80031a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a8:	2b1f      	cmp	r3, #31
 80031aa:	d9db      	bls.n	8003164 <_ftoa+0x31c>
 80031ac:	e00a      	b.n	80031c4 <_ftoa+0x37c>
        break;
 80031ae:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80031b0:	e008      	b.n	80031c4 <_ftoa+0x37c>
      buf[len++] = '0';
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031bc:	4413      	add	r3, r2
 80031be:	2230      	movs	r2, #48	; 0x30
 80031c0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80031c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c6:	2b1f      	cmp	r3, #31
 80031c8:	d804      	bhi.n	80031d4 <_ftoa+0x38c>
 80031ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d6:	2b1f      	cmp	r3, #31
 80031d8:	d82b      	bhi.n	8003232 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031e4:	4413      	add	r3, r2
 80031e6:	222e      	movs	r2, #46	; 0x2e
 80031e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031ec:	e021      	b.n	8003232 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 80031ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <_ftoa+0x4d0>)
 80031f2:	fb83 1302 	smull	r1, r3, r3, r2
 80031f6:	1099      	asrs	r1, r3, #2
 80031f8:	17d3      	asrs	r3, r2, #31
 80031fa:	1ac9      	subs	r1, r1, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	1ad1      	subs	r1, r2, r3
 8003206:	b2ca      	uxtb	r2, r1
 8003208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800320e:	3230      	adds	r2, #48	; 0x30
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003216:	440b      	add	r3, r1
 8003218:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	4a3e      	ldr	r2, [pc, #248]	; (8003318 <_ftoa+0x4d0>)
 8003220:	fb82 1203 	smull	r1, r2, r2, r3
 8003224:	1092      	asrs	r2, r2, #2
 8003226:	17db      	asrs	r3, r3, #31
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
 800322c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003234:	2b1f      	cmp	r3, #31
 8003236:	d9da      	bls.n	80031ee <_ftoa+0x3a6>
 8003238:	e000      	b.n	800323c <_ftoa+0x3f4>
      break;
 800323a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d124      	bne.n	8003290 <_ftoa+0x448>
 8003246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01f      	beq.n	8003290 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <_ftoa+0x43a>
 8003256:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <_ftoa+0x420>
 800325e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <_ftoa+0x43a>
      width--;
 8003268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326a:	3b01      	subs	r3, #1
 800326c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800326e:	e008      	b.n	8003282 <_ftoa+0x43a>
      buf[len++] = '0';
 8003270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003276:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800327a:	4413      	add	r3, r2
 800327c:	2230      	movs	r2, #48	; 0x30
 800327e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003282:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003286:	429a      	cmp	r2, r3
 8003288:	d202      	bcs.n	8003290 <_ftoa+0x448>
 800328a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328c:	2b1f      	cmp	r3, #31
 800328e:	d9ef      	bls.n	8003270 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003292:	2b1f      	cmp	r3, #31
 8003294:	d82a      	bhi.n	80032ec <_ftoa+0x4a4>
    if (negative) {
 8003296:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <_ftoa+0x46a>
      buf[len++] = '-';
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032a8:	4413      	add	r3, r2
 80032aa:	222d      	movs	r2, #45	; 0x2d
 80032ac:	f803 2c48 	strb.w	r2, [r3, #-72]
 80032b0:	e01c      	b.n	80032ec <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80032b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032c6:	4413      	add	r3, r2
 80032c8:	222b      	movs	r2, #43	; 0x2b
 80032ca:	f803 2c48 	strb.w	r2, [r3, #-72]
 80032ce:	e00d      	b.n	80032ec <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 80032d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <_ftoa+0x4a4>
      buf[len++] = ' ';
 80032da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032e4:	4413      	add	r3, r2
 80032e6:	2220      	movs	r2, #32
 80032e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80032ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f2:	9302      	str	r3, [sp, #8]
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	f107 0318 	add.w	r3, r7, #24
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	6939      	ldr	r1, [r7, #16]
 8003304:	6978      	ldr	r0, [r7, #20]
 8003306:	f7ff fb9c 	bl	8002a42 <_out_rev>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3764      	adds	r7, #100	; 0x64
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	cccccccd 	.word	0xcccccccd
 8003318:	66666667 	.word	0x66666667
 800331c:	00000000 	.word	0x00000000

08003320 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	b09d      	sub	sp, #116	; 0x74
 8003326:	af06      	add	r7, sp, #24
 8003328:	61f8      	str	r0, [r7, #28]
 800332a:	61b9      	str	r1, [r7, #24]
 800332c:	617a      	str	r2, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800333c:	f7fd fb7c 	bl	8000a38 <__aeabi_dcmpeq>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <_etoa+0x50>
 8003346:	f04f 32ff 	mov.w	r2, #4294967295
 800334a:	4bc9      	ldr	r3, [pc, #804]	; (8003670 <_etoa+0x350>)
 800334c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003350:	f7fd fb9a 	bl	8000a88 <__aeabi_dcmpgt>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <_etoa+0x50>
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003366:	f7fd fb71 	bl	8000a4c <__aeabi_dcmplt>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d012      	beq.n	8003396 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	ed97 0b02 	vldr	d0, [r7, #8]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	69f8      	ldr	r0, [r7, #28]
 800338e:	f7ff fd5b 	bl	8002e48 <_ftoa>
 8003392:	4603      	mov	r3, r0
 8003394:	e24f      	b.n	8003836 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 8003396:	2301      	movs	r3, #1
 8003398:	461c      	mov	r4, r3
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a6:	f7fd fb51 	bl	8000a4c <__aeabi_dcmplt>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <_etoa+0x94>
 80033b0:	2300      	movs	r3, #0
 80033b2:	461c      	mov	r4, r3
 80033b4:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80033b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <_etoa+0xac>
    value = -value;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80033cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80033d8:	2306      	movs	r3, #6
 80033da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80033de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80033e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	0d13      	lsrs	r3, r2, #20
 80033f4:	2400      	movs	r4, #0
 80033f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003400:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003404:	f04f 31ff 	mov.w	r1, #4294967295
 8003408:	4a9a      	ldr	r2, [pc, #616]	; (8003674 <_etoa+0x354>)
 800340a:	ea03 0801 	and.w	r8, r3, r1
 800340e:	ea04 0902 	and.w	r9, r4, r2
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	4a98      	ldr	r2, [pc, #608]	; (8003678 <_etoa+0x358>)
 8003418:	ea48 0301 	orr.w	r3, r8, r1
 800341c:	ea49 0402 	orr.w	r4, r9, r2
 8003420:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003424:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003426:	f7fd f835 	bl	8000494 <__aeabi_i2d>
 800342a:	a385      	add	r3, pc, #532	; (adr r3, 8003640 <_etoa+0x320>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fd f89a 	bl	8000568 <__aeabi_dmul>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	4618      	mov	r0, r3
 800343a:	4621      	mov	r1, r4
 800343c:	a382      	add	r3, pc, #520	; (adr r3, 8003648 <_etoa+0x328>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fc fedb 	bl	80001fc <__adddf3>
 8003446:	4603      	mov	r3, r0
 8003448:	460c      	mov	r4, r1
 800344a:	4698      	mov	r8, r3
 800344c:	46a1      	mov	r9, r4
 800344e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <_etoa+0x35c>)
 8003458:	f7fc fece 	bl	80001f8 <__aeabi_dsub>
 800345c:	4603      	mov	r3, r0
 800345e:	460c      	mov	r4, r1
 8003460:	4618      	mov	r0, r3
 8003462:	4621      	mov	r1, r4
 8003464:	a37a      	add	r3, pc, #488	; (adr r3, 8003650 <_etoa+0x330>)
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	f7fd f87d 	bl	8000568 <__aeabi_dmul>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	4640      	mov	r0, r8
 8003478:	4649      	mov	r1, r9
 800347a:	f7fc febf 	bl	80001fc <__adddf3>
 800347e:	4603      	mov	r3, r0
 8003480:	460c      	mov	r4, r1
 8003482:	4618      	mov	r0, r3
 8003484:	4621      	mov	r1, r4
 8003486:	f7fd fb1f 	bl	8000ac8 <__aeabi_d2iz>
 800348a:	4603      	mov	r3, r0
 800348c:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800348e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003490:	f7fd f800 	bl	8000494 <__aeabi_i2d>
 8003494:	a370      	add	r3, pc, #448	; (adr r3, 8003658 <_etoa+0x338>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f7fd f865 	bl	8000568 <__aeabi_dmul>
 800349e:	4603      	mov	r3, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	4618      	mov	r0, r3
 80034a4:	4621      	mov	r1, r4
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	4b75      	ldr	r3, [pc, #468]	; (8003680 <_etoa+0x360>)
 80034ac:	f7fc fea6 	bl	80001fc <__adddf3>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	4618      	mov	r0, r3
 80034b6:	4621      	mov	r1, r4
 80034b8:	f7fd fb06 	bl	8000ac8 <__aeabi_d2iz>
 80034bc:	4603      	mov	r3, r0
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80034c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80034c2:	f7fc ffe7 	bl	8000494 <__aeabi_i2d>
 80034c6:	a366      	add	r3, pc, #408	; (adr r3, 8003660 <_etoa+0x340>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd f84c 	bl	8000568 <__aeabi_dmul>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	4698      	mov	r8, r3
 80034d6:	46a1      	mov	r9, r4
 80034d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80034da:	f7fc ffdb 	bl	8000494 <__aeabi_i2d>
 80034de:	a362      	add	r3, pc, #392	; (adr r3, 8003668 <_etoa+0x348>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f840 	bl	8000568 <__aeabi_dmul>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	461a      	mov	r2, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	4640      	mov	r0, r8
 80034f2:	4649      	mov	r1, r9
 80034f4:	f7fc fe80 	bl	80001f8 <__aeabi_dsub>
 80034f8:	4603      	mov	r3, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003504:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003508:	f7fd f82e 	bl	8000568 <__aeabi_dmul>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
 8003510:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800351a:	4619      	mov	r1, r3
 800351c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f04f 0400 	mov.w	r4, #0
 8003528:	050c      	lsls	r4, r1, #20
 800352a:	2300      	movs	r3, #0
 800352c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003534:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	f7fc fe5e 	bl	80001fc <__adddf3>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	469a      	mov	sl, r3
 8003546:	46a3      	mov	fp, r4
 8003548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800354c:	f04f 0000 	mov.w	r0, #0
 8003550:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003554:	f7fc fe50 	bl	80001f8 <__aeabi_dsub>
 8003558:	4603      	mov	r3, r0
 800355a:	460c      	mov	r4, r1
 800355c:	e9c7 3400 	strd	r3, r4, [r7]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	4b47      	ldr	r3, [pc, #284]	; (8003684 <_etoa+0x364>)
 8003566:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800356a:	f7fd f927 	bl	80007bc <__aeabi_ddiv>
 800356e:	4603      	mov	r3, r0
 8003570:	460c      	mov	r4, r1
 8003572:	4618      	mov	r0, r3
 8003574:	4621      	mov	r1, r4
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <_etoa+0x368>)
 800357c:	f7fc fe3e 	bl	80001fc <__adddf3>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	461a      	mov	r2, r3
 8003586:	4623      	mov	r3, r4
 8003588:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800358c:	f7fd f916 	bl	80007bc <__aeabi_ddiv>
 8003590:	4603      	mov	r3, r0
 8003592:	460c      	mov	r4, r1
 8003594:	4618      	mov	r0, r3
 8003596:	4621      	mov	r1, r4
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <_etoa+0x36c>)
 800359e:	f7fc fe2d 	bl	80001fc <__adddf3>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035ae:	f7fd f905 	bl	80007bc <__aeabi_ddiv>
 80035b2:	4603      	mov	r3, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	461a      	mov	r2, r3
 80035b8:	4623      	mov	r3, r4
 80035ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035be:	f7fc fe1d 	bl	80001fc <__adddf3>
 80035c2:	4603      	mov	r3, r0
 80035c4:	460c      	mov	r4, r1
 80035c6:	461a      	mov	r2, r3
 80035c8:	4623      	mov	r3, r4
 80035ca:	4650      	mov	r0, sl
 80035cc:	4659      	mov	r1, fp
 80035ce:	f7fd f8f5 	bl	80007bc <__aeabi_ddiv>
 80035d2:	4603      	mov	r3, r0
 80035d4:	460c      	mov	r4, r1
 80035d6:	4618      	mov	r0, r3
 80035d8:	4621      	mov	r1, r4
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <_etoa+0x358>)
 80035e0:	f7fc fe0c 	bl	80001fc <__adddf3>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	461a      	mov	r2, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	f7fc ffba 	bl	8000568 <__aeabi_dmul>
 80035f4:	4603      	mov	r3, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80035fc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003608:	f7fd fa20 	bl	8000a4c <__aeabi_dcmplt>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <_etoa+0x30e>
    expval--;
 8003612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003614:	3b01      	subs	r3, #1
 8003616:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003618:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <_etoa+0x368>)
 8003622:	f7fd f8cb 	bl	80007bc <__aeabi_ddiv>
 8003626:	4603      	mov	r3, r0
 8003628:	460c      	mov	r4, r1
 800362a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800362e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003630:	2b63      	cmp	r3, #99	; 0x63
 8003632:	dc2d      	bgt.n	8003690 <_etoa+0x370>
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800363a:	db29      	blt.n	8003690 <_etoa+0x370>
 800363c:	2304      	movs	r3, #4
 800363e:	e028      	b.n	8003692 <_etoa+0x372>
 8003640:	509f79fb 	.word	0x509f79fb
 8003644:	3fd34413 	.word	0x3fd34413
 8003648:	8b60c8b3 	.word	0x8b60c8b3
 800364c:	3fc68a28 	.word	0x3fc68a28
 8003650:	636f4361 	.word	0x636f4361
 8003654:	3fd287a7 	.word	0x3fd287a7
 8003658:	0979a371 	.word	0x0979a371
 800365c:	400a934f 	.word	0x400a934f
 8003660:	bbb55516 	.word	0xbbb55516
 8003664:	40026bb1 	.word	0x40026bb1
 8003668:	fefa39ef 	.word	0xfefa39ef
 800366c:	3fe62e42 	.word	0x3fe62e42
 8003670:	7fefffff 	.word	0x7fefffff
 8003674:	000fffff 	.word	0x000fffff
 8003678:	3ff00000 	.word	0x3ff00000
 800367c:	3ff80000 	.word	0x3ff80000
 8003680:	3fe00000 	.word	0x3fe00000
 8003684:	402c0000 	.word	0x402c0000
 8003688:	40240000 	.word	0x40240000
 800368c:	40180000 	.word	0x40180000
 8003690:	2305      	movs	r3, #5
 8003692:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03d      	beq.n	800371c <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80036a0:	a367      	add	r3, pc, #412	; (adr r3, 8003840 <_etoa+0x520>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036aa:	f7fd f9e3 	bl	8000a74 <__aeabi_dcmpge>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d024      	beq.n	80036fe <_etoa+0x3de>
 80036b4:	a364      	add	r3, pc, #400	; (adr r3, 8003848 <_etoa+0x528>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036be:	f7fd f9c5 	bl	8000a4c <__aeabi_dcmplt>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01a      	beq.n	80036fe <_etoa+0x3de>
      if ((int)prec > expval) {
 80036c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ce:	429a      	cmp	r2, r3
 80036d0:	da07      	bge.n	80036e2 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 80036d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e0:	e002      	b.n	80036e8 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80036e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	657b      	str	r3, [r7, #84]	; 0x54
 80036fc:	e00e      	b.n	800371c <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80036fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <_etoa+0x3fc>
 8003706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800370a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <_etoa+0x3fc>
        --prec;
 8003712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003716:	3b01      	subs	r3, #1
 8003718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800371c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003720:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8003722:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	429a      	cmp	r2, r3
 800372a:	d904      	bls.n	8003736 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800372c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	e001      	b.n	800373a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800373a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <_etoa+0x430>
 8003746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <_etoa+0x44e>
    value /= conv.F;
 8003756:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800375a:	461a      	mov	r2, r3
 800375c:	4623      	mov	r3, r4
 800375e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003762:	f7fd f82b 	bl	80007bc <__aeabi_ddiv>
 8003766:	4603      	mov	r3, r0
 8003768:	460c      	mov	r4, r1
 800376a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003772:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <_etoa+0x464>
 800377a:	68bd      	ldr	r5, [r7, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8003782:	e001      	b.n	8003788 <_etoa+0x468>
 8003784:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800378c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	ec46 5b10 	vmov	d0, r5, r6
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	69b9      	ldr	r1, [r7, #24]
 80037a6:	69f8      	ldr	r0, [r7, #28]
 80037a8:	f7ff fb4e 	bl	8002e48 <_ftoa>
 80037ac:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03f      	beq.n	8003834 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80037b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <_etoa+0x4a4>
 80037c0:	2045      	movs	r0, #69	; 0x45
 80037c2:	e000      	b.n	80037c6 <_etoa+0x4a6>
 80037c4:	2065      	movs	r0, #101	; 0x65
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	1c53      	adds	r3, r2, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	69fc      	ldr	r4, [r7, #28]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	69b9      	ldr	r1, [r7, #24]
 80037d2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80037d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfb8      	it	lt
 80037da:	425b      	neglt	r3, r3
 80037dc:	4618      	mov	r0, r3
 80037de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e0:	0fdb      	lsrs	r3, r3, #31
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037e6:	3a01      	subs	r2, #1
 80037e8:	2105      	movs	r1, #5
 80037ea:	9105      	str	r1, [sp, #20]
 80037ec:	9204      	str	r2, [sp, #16]
 80037ee:	2200      	movs	r2, #0
 80037f0:	9203      	str	r2, [sp, #12]
 80037f2:	220a      	movs	r2, #10
 80037f4:	9202      	str	r2, [sp, #8]
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	9000      	str	r0, [sp, #0]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	69f8      	ldr	r0, [r7, #28]
 8003802:	f7ff fa4a 	bl	8002c9a <_ntoa_long>
 8003806:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00f      	beq.n	8003834 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003814:	e007      	b.n	8003826 <_etoa+0x506>
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	1c53      	adds	r3, r2, #1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	69fc      	ldr	r4, [r7, #28]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	2020      	movs	r0, #32
 8003824:	47a0      	blx	r4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003830:	429a      	cmp	r2, r3
 8003832:	d8f0      	bhi.n	8003816 <_etoa+0x4f6>
    }
  }
  return idx;
 8003834:	697b      	ldr	r3, [r7, #20]
}
 8003836:	4618      	mov	r0, r3
 8003838:	375c      	adds	r7, #92	; 0x5c
 800383a:	46bd      	mov	sp, r7
 800383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003840:	eb1c432d 	.word	0xeb1c432d
 8003844:	3f1a36e2 	.word	0x3f1a36e2
 8003848:	00000000 	.word	0x00000000
 800384c:	412e8480 	.word	0x412e8480

08003850 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b0a0      	sub	sp, #128	; 0x80
 8003854:	af0a      	add	r7, sp, #40	; 0x28
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8492 	bne.w	800418e <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800386a:	4ba0      	ldr	r3, [pc, #640]	; (8003aec <_vsnprintf+0x29c>)
 800386c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800386e:	f000 bc8e 	b.w	800418e <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b25      	cmp	r3, #37	; 0x25
 8003878:	d00d      	beq.n	8003896 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	7818      	ldrb	r0, [r3, #0]
 800387e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003880:	1c53      	adds	r3, r2, #1
 8003882:	647b      	str	r3, [r7, #68]	; 0x44
 8003884:	68fc      	ldr	r4, [r7, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	47a0      	blx	r4
      format++;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	603b      	str	r3, [r7, #0]
      continue;
 8003892:	f000 bc7c 	b.w	800418e <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	3b20      	subs	r3, #32
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d856      	bhi.n	8003958 <_vsnprintf+0x108>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <_vsnprintf+0x60>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	08003931 	.word	0x08003931
 80038b4:	08003959 	.word	0x08003959
 80038b8:	08003959 	.word	0x08003959
 80038bc:	08003945 	.word	0x08003945
 80038c0:	08003959 	.word	0x08003959
 80038c4:	08003959 	.word	0x08003959
 80038c8:	08003959 	.word	0x08003959
 80038cc:	08003959 	.word	0x08003959
 80038d0:	08003959 	.word	0x08003959
 80038d4:	08003959 	.word	0x08003959
 80038d8:	08003959 	.word	0x08003959
 80038dc:	0800391d 	.word	0x0800391d
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003909 	.word	0x08003909
 80038e8:	08003959 	.word	0x08003959
 80038ec:	08003959 	.word	0x08003959
 80038f0:	080038f5 	.word	0x080038f5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	657b      	str	r3, [r7, #84]	; 0x54
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	2301      	movs	r3, #1
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
 8003906:	e02a      	b.n	800395e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	657b      	str	r3, [r7, #84]	; 0x54
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	3301      	adds	r3, #1
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	2301      	movs	r3, #1
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
 800391a:	e020      	b.n	800395e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800391c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	657b      	str	r3, [r7, #84]	; 0x54
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	2301      	movs	r3, #1
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
 800392e:	e016      	b.n	800395e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003932:	f043 0308 	orr.w	r3, r3, #8
 8003936:	657b      	str	r3, [r7, #84]	; 0x54
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	2301      	movs	r3, #1
 8003940:	64bb      	str	r3, [r7, #72]	; 0x48
 8003942:	e00c      	b.n	800395e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	f043 0310 	orr.w	r3, r3, #16
 800394a:	657b      	str	r3, [r7, #84]	; 0x54
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	2301      	movs	r3, #1
 8003954:	64bb      	str	r3, [r7, #72]	; 0x48
 8003956:	e002      	b.n	800395e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8003958:	2300      	movs	r3, #0
 800395a:	64bb      	str	r3, [r7, #72]	; 0x48
 800395c:	bf00      	nop
      }
    } while (n);
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	2b00      	cmp	r3, #0
 8003962:	d19d      	bne.n	80038a0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f82d 	bl	80029cc <_is_digit>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <_vsnprintf+0x134>
      width = _atoi(&format);
 8003978:	463b      	mov	r3, r7
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f83d 	bl	80029fa <_atoi>
 8003980:	6538      	str	r0, [r7, #80]	; 0x50
 8003982:	e018      	b.n	80039b6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b2a      	cmp	r3, #42	; 0x2a
 800398a:	d114      	bne.n	80039b6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800398c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398e:	1d1a      	adds	r2, r3, #4
 8003990:	66ba      	str	r2, [r7, #104]	; 0x68
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	2b00      	cmp	r3, #0
 800399a:	da07      	bge.n	80039ac <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800399c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	425b      	negs	r3, r3
 80039a8:	653b      	str	r3, [r7, #80]	; 0x50
 80039aa:	e001      	b.n	80039b0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b2e      	cmp	r3, #46	; 0x2e
 80039c0:	d124      	bne.n	8003a0c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fff9 	bl	80029cc <_is_digit>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80039e0:	463b      	mov	r3, r7
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff f809 	bl	80029fa <_atoi>
 80039e8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80039ea:	e00f      	b.n	8003a0c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b2a      	cmp	r3, #42	; 0x2a
 80039f2:	d10b      	bne.n	8003a0c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80039f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f6:	1d1a      	adds	r2, r3, #4
 80039f8:	66ba      	str	r2, [r7, #104]	; 0x68
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a04:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	3b68      	subs	r3, #104	; 0x68
 8003a12:	2b12      	cmp	r3, #18
 8003a14:	d866      	bhi.n	8003ae4 <_vsnprintf+0x294>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <_vsnprintf+0x1cc>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a8f 	.word	0x08003a8f
 8003a20:	08003ae5 	.word	0x08003ae5
 8003a24:	08003ac5 	.word	0x08003ac5
 8003a28:	08003ae5 	.word	0x08003ae5
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003ae5 	.word	0x08003ae5
 8003a34:	08003ae5 	.word	0x08003ae5
 8003a38:	08003ae5 	.word	0x08003ae5
 8003a3c:	08003ae5 	.word	0x08003ae5
 8003a40:	08003ae5 	.word	0x08003ae5
 8003a44:	08003ae5 	.word	0x08003ae5
 8003a48:	08003ae5 	.word	0x08003ae5
 8003a4c:	08003ab5 	.word	0x08003ab5
 8003a50:	08003ae5 	.word	0x08003ae5
 8003a54:	08003ae5 	.word	0x08003ae5
 8003a58:	08003ae5 	.word	0x08003ae5
 8003a5c:	08003ae5 	.word	0x08003ae5
 8003a60:	08003ae5 	.word	0x08003ae5
 8003a64:	08003ad5 	.word	0x08003ad5
      case 'l' :
        flags |= FLAGS_LONG;
 8003a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b6c      	cmp	r3, #108	; 0x6c
 8003a7c:	d134      	bne.n	8003ae8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a84:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	603b      	str	r3, [r7, #0]
        }
        break;
 8003a8c:	e02c      	b.n	8003ae8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a94:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b68      	cmp	r3, #104	; 0x68
 8003aa2:	d125      	bne.n	8003af0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8003aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aaa:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	603b      	str	r3, [r7, #0]
        }
        break;
 8003ab2:	e01d      	b.n	8003af0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	603b      	str	r3, [r7, #0]
        break;
 8003ac2:	e016      	b.n	8003af2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
        break;
 8003ad2:	e00e      	b.n	8003af2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	603b      	str	r3, [r7, #0]
        break;
 8003ae2:	e006      	b.n	8003af2 <_vsnprintf+0x2a2>
      default :
        break;
 8003ae4:	bf00      	nop
 8003ae6:	e004      	b.n	8003af2 <_vsnprintf+0x2a2>
        break;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <_vsnprintf+0x2a2>
 8003aec:	08002951 	.word	0x08002951
        break;
 8003af0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	3b25      	subs	r3, #37	; 0x25
 8003af8:	2b53      	cmp	r3, #83	; 0x53
 8003afa:	f200 833b 	bhi.w	8004174 <_vsnprintf+0x924>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <_vsnprintf+0x2b4>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	0800415d 	.word	0x0800415d
 8003b08:	08004175 	.word	0x08004175
 8003b0c:	08004175 	.word	0x08004175
 8003b10:	08004175 	.word	0x08004175
 8003b14:	08004175 	.word	0x08004175
 8003b18:	08004175 	.word	0x08004175
 8003b1c:	08004175 	.word	0x08004175
 8003b20:	08004175 	.word	0x08004175
 8003b24:	08004175 	.word	0x08004175
 8003b28:	08004175 	.word	0x08004175
 8003b2c:	08004175 	.word	0x08004175
 8003b30:	08004175 	.word	0x08004175
 8003b34:	08004175 	.word	0x08004175
 8003b38:	08004175 	.word	0x08004175
 8003b3c:	08004175 	.word	0x08004175
 8003b40:	08004175 	.word	0x08004175
 8003b44:	08004175 	.word	0x08004175
 8003b48:	08004175 	.word	0x08004175
 8003b4c:	08004175 	.word	0x08004175
 8003b50:	08004175 	.word	0x08004175
 8003b54:	08004175 	.word	0x08004175
 8003b58:	08004175 	.word	0x08004175
 8003b5c:	08004175 	.word	0x08004175
 8003b60:	08004175 	.word	0x08004175
 8003b64:	08004175 	.word	0x08004175
 8003b68:	08004175 	.word	0x08004175
 8003b6c:	08004175 	.word	0x08004175
 8003b70:	08004175 	.word	0x08004175
 8003b74:	08004175 	.word	0x08004175
 8003b78:	08004175 	.word	0x08004175
 8003b7c:	08004175 	.word	0x08004175
 8003b80:	08004175 	.word	0x08004175
 8003b84:	08003f2d 	.word	0x08003f2d
 8003b88:	08003ee1 	.word	0x08003ee1
 8003b8c:	08003f2d 	.word	0x08003f2d
 8003b90:	08004175 	.word	0x08004175
 8003b94:	08004175 	.word	0x08004175
 8003b98:	08004175 	.word	0x08004175
 8003b9c:	08004175 	.word	0x08004175
 8003ba0:	08004175 	.word	0x08004175
 8003ba4:	08004175 	.word	0x08004175
 8003ba8:	08004175 	.word	0x08004175
 8003bac:	08004175 	.word	0x08004175
 8003bb0:	08004175 	.word	0x08004175
 8003bb4:	08004175 	.word	0x08004175
 8003bb8:	08004175 	.word	0x08004175
 8003bbc:	08004175 	.word	0x08004175
 8003bc0:	08004175 	.word	0x08004175
 8003bc4:	08004175 	.word	0x08004175
 8003bc8:	08004175 	.word	0x08004175
 8003bcc:	08004175 	.word	0x08004175
 8003bd0:	08003c55 	.word	0x08003c55
 8003bd4:	08004175 	.word	0x08004175
 8003bd8:	08004175 	.word	0x08004175
 8003bdc:	08004175 	.word	0x08004175
 8003be0:	08004175 	.word	0x08004175
 8003be4:	08004175 	.word	0x08004175
 8003be8:	08004175 	.word	0x08004175
 8003bec:	08004175 	.word	0x08004175
 8003bf0:	08004175 	.word	0x08004175
 8003bf4:	08004175 	.word	0x08004175
 8003bf8:	08003c55 	.word	0x08003c55
 8003bfc:	08003f99 	.word	0x08003f99
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003f2d 	.word	0x08003f2d
 8003c08:	08003ee1 	.word	0x08003ee1
 8003c0c:	08003f2d 	.word	0x08003f2d
 8003c10:	08004175 	.word	0x08004175
 8003c14:	08003c55 	.word	0x08003c55
 8003c18:	08004175 	.word	0x08004175
 8003c1c:	08004175 	.word	0x08004175
 8003c20:	08004175 	.word	0x08004175
 8003c24:	08004175 	.word	0x08004175
 8003c28:	08004175 	.word	0x08004175
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	080040d1 	.word	0x080040d1
 8003c34:	08004175 	.word	0x08004175
 8003c38:	08004175 	.word	0x08004175
 8003c3c:	0800400d 	.word	0x0800400d
 8003c40:	08004175 	.word	0x08004175
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08004175 	.word	0x08004175
 8003c4c:	08004175 	.word	0x08004175
 8003c50:	08003c55 	.word	0x08003c55
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b78      	cmp	r3, #120	; 0x78
 8003c5a:	d003      	beq.n	8003c64 <_vsnprintf+0x414>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b58      	cmp	r3, #88	; 0x58
 8003c62:	d102      	bne.n	8003c6a <_vsnprintf+0x41a>
          base = 16U;
 8003c64:	2310      	movs	r3, #16
 8003c66:	643b      	str	r3, [r7, #64]	; 0x40
 8003c68:	e013      	b.n	8003c92 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b6f      	cmp	r3, #111	; 0x6f
 8003c70:	d102      	bne.n	8003c78 <_vsnprintf+0x428>
          base =  8U;
 8003c72:	2308      	movs	r3, #8
 8003c74:	643b      	str	r3, [r7, #64]	; 0x40
 8003c76:	e00c      	b.n	8003c92 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b62      	cmp	r3, #98	; 0x62
 8003c7e:	d102      	bne.n	8003c86 <_vsnprintf+0x436>
          base =  2U;
 8003c80:	2302      	movs	r3, #2
 8003c82:	643b      	str	r3, [r7, #64]	; 0x40
 8003c84:	e005      	b.n	8003c92 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8003c86:	230a      	movs	r3, #10
 8003c88:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b58      	cmp	r3, #88	; 0x58
 8003c98:	d103      	bne.n	8003ca2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	f043 0320 	orr.w	r3, r3, #32
 8003ca0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b69      	cmp	r3, #105	; 0x69
 8003ca8:	d007      	beq.n	8003cba <_vsnprintf+0x46a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d003      	beq.n	8003cba <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb4:	f023 030c 	bic.w	r3, r3, #12
 8003cb8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8003cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b69      	cmp	r3, #105	; 0x69
 8003cd2:	d004      	beq.n	8003cde <_vsnprintf+0x48e>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b64      	cmp	r3, #100	; 0x64
 8003cda:	f040 808d 	bne.w	8003df8 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02e      	beq.n	8003d46 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cea:	3307      	adds	r3, #7
 8003cec:	f023 0307 	bic.w	r3, r3, #7
 8003cf0:	f103 0208 	add.w	r2, r3, #8
 8003cf4:	66ba      	str	r2, [r7, #104]	; 0x68
 8003cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cfa:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003cfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f174 0200 	sbcs.w	r2, r4, #0
 8003d08:	da02      	bge.n	8003d10 <_vsnprintf+0x4c0>
 8003d0a:	425b      	negs	r3, r3
 8003d0c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8003d10:	4619      	mov	r1, r3
 8003d12:	4622      	mov	r2, r4
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	0fdb      	lsrs	r3, r3, #31
 8003d18:	b2d8      	uxtb	r0, r3
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	f04f 0400 	mov.w	r4, #0
 8003d20:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003d22:	9508      	str	r5, [sp, #32]
 8003d24:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8003d26:	9507      	str	r5, [sp, #28]
 8003d28:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8003d2a:	9506      	str	r5, [sp, #24]
 8003d2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d30:	9002      	str	r0, [sp, #8]
 8003d32:	e9cd 1200 	strd	r1, r2, [sp]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff f813 	bl	8002d68 <_ntoa_long_long>
 8003d42:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003d44:	e0c8      	b.n	8003ed8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01e      	beq.n	8003d8e <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8003d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d52:	1d1a      	adds	r2, r3, #4
 8003d54:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bfb8      	it	lt
 8003d60:	425b      	neglt	r3, r3
 8003d62:	4619      	mov	r1, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	0fdb      	lsrs	r3, r3, #31
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d6c:	9205      	str	r2, [sp, #20]
 8003d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d70:	9204      	str	r2, [sp, #16]
 8003d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d74:	9203      	str	r2, [sp, #12]
 8003d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d78:	9202      	str	r2, [sp, #8]
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	9100      	str	r1, [sp, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7fe ff88 	bl	8002c9a <_ntoa_long>
 8003d8a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003d8c:	e0a4      	b.n	8003ed8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <_vsnprintf+0x554>
 8003d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e00e      	b.n	8003dc2 <_vsnprintf+0x572>
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <_vsnprintf+0x56a>
 8003dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	66ba      	str	r2, [r7, #104]	; 0x68
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b21b      	sxth	r3, r3
 8003db8:	e003      	b.n	8003dc2 <_vsnprintf+0x572>
 8003dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	66ba      	str	r2, [r7, #104]	; 0x68
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfb8      	it	lt
 8003dca:	425b      	neglt	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	0fdb      	lsrs	r3, r3, #31
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dd6:	9205      	str	r2, [sp, #20]
 8003dd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dda:	9204      	str	r2, [sp, #16]
 8003ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dde:	9203      	str	r2, [sp, #12]
 8003de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003de2:	9202      	str	r2, [sp, #8]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	9100      	str	r1, [sp, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7fe ff53 	bl	8002c9a <_ntoa_long>
 8003df4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003df6:	e06f      	b.n	8003ed8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d020      	beq.n	8003e44 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e04:	3307      	adds	r3, #7
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	f103 0208 	add.w	r2, r3, #8
 8003e0e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e16:	4611      	mov	r1, r2
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e1e:	9008      	str	r0, [sp, #32]
 8003e20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003e22:	9007      	str	r0, [sp, #28]
 8003e24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e26:	9006      	str	r0, [sp, #24]
 8003e28:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	9202      	str	r2, [sp, #8]
 8003e30:	e9cd 3400 	strd	r3, r4, [sp]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7fe ff94 	bl	8002d68 <_ntoa_long_long>
 8003e40:	6478      	str	r0, [r7, #68]	; 0x44
 8003e42:	e049      	b.n	8003ed8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e58:	9205      	str	r2, [sp, #20]
 8003e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e5c:	9204      	str	r2, [sp, #16]
 8003e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e60:	9203      	str	r2, [sp, #12]
 8003e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e64:	9202      	str	r2, [sp, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7fe ff11 	bl	8002c9a <_ntoa_long>
 8003e78:	6478      	str	r0, [r7, #68]	; 0x44
 8003e7a:	e02d      	b.n	8003ed8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <_vsnprintf+0x642>
 8003e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e00e      	b.n	8003eb0 <_vsnprintf+0x660>
 8003e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <_vsnprintf+0x658>
 8003e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e9e:	1d1a      	adds	r2, r3, #4
 8003ea0:	66ba      	str	r2, [r7, #104]	; 0x68
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	e003      	b.n	8003eb0 <_vsnprintf+0x660>
 8003ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	66ba      	str	r2, [r7, #104]	; 0x68
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	9305      	str	r3, [sp, #20]
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb8:	9304      	str	r3, [sp, #16]
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	9303      	str	r3, [sp, #12]
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7fe fee2 	bl	8002c9a <_ntoa_long>
 8003ed6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3301      	adds	r3, #1
 8003edc:	603b      	str	r3, [r7, #0]
        break;
 8003ede:	e156      	b.n	800418e <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b46      	cmp	r3, #70	; 0x46
 8003ee6:	d103      	bne.n	8003ef0 <_vsnprintf+0x6a0>
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eea:	f043 0320 	orr.w	r3, r3, #32
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef2:	3307      	adds	r3, #7
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
 8003ef8:	f103 0208 	add.w	r2, r3, #8
 8003efc:	66ba      	str	r2, [r7, #104]	; 0x68
 8003efe:	ed93 7b00 	vldr	d7, [r3]
 8003f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f12:	eef0 0a67 	vmov.f32	s1, s15
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7fe ff93 	bl	8002e48 <_ftoa>
 8003f22:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	603b      	str	r3, [r7, #0]
        break;
 8003f2a:	e130      	b.n	800418e <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b67      	cmp	r3, #103	; 0x67
 8003f32:	d003      	beq.n	8003f3c <_vsnprintf+0x6ec>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b47      	cmp	r3, #71	; 0x47
 8003f3a:	d103      	bne.n	8003f44 <_vsnprintf+0x6f4>
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f42:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b45      	cmp	r3, #69	; 0x45
 8003f4a:	d003      	beq.n	8003f54 <_vsnprintf+0x704>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b47      	cmp	r3, #71	; 0x47
 8003f52:	d103      	bne.n	8003f5c <_vsnprintf+0x70c>
 8003f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f56:	f043 0320 	orr.w	r3, r3, #32
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5e:	3307      	adds	r3, #7
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	f103 0208 	add.w	r2, r3, #8
 8003f68:	66ba      	str	r2, [r7, #104]	; 0x68
 8003f6a:	ed93 7b00 	vldr	d7, [r3]
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f7e:	eef0 0a67 	vmov.f32	s1, s15
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff f9c9 	bl	8003320 <_etoa>
 8003f8e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	603b      	str	r3, [r7, #0]
        break;
 8003f96:	e0fa      	b.n	800418e <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <_vsnprintf+0x774>
          while (l++ < width) {
 8003fa6:	e007      	b.n	8003fb8 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 8003fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003faa:	1c53      	adds	r3, r2, #1
 8003fac:	647b      	str	r3, [r7, #68]	; 0x44
 8003fae:	68fc      	ldr	r4, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	2020      	movs	r0, #32
 8003fb6:	47a0      	blx	r4
          while (l++ < width) {
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d8f1      	bhi.n	8003fa8 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc6:	1d1a      	adds	r2, r3, #4
 8003fc8:	66ba      	str	r2, [r7, #104]	; 0x68
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b2d8      	uxtb	r0, r3
 8003fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd0:	1c53      	adds	r3, r2, #1
 8003fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd4:	68fc      	ldr	r4, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00e      	beq.n	8004004 <_vsnprintf+0x7b4>
          while (l++ < width) {
 8003fe6:	e007      	b.n	8003ff8 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8003fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fea:	1c53      	adds	r3, r2, #1
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
 8003fee:	68fc      	ldr	r4, [r7, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	2020      	movs	r0, #32
 8003ff6:	47a0      	blx	r4
          while (l++ < width) {
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004000:	429a      	cmp	r2, r3
 8004002:	d8f1      	bhi.n	8003fe8 <_vsnprintf+0x798>
          }
        }
        format++;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	603b      	str	r3, [r7, #0]
        break;
 800400a:	e0c0      	b.n	800418e <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800400c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	66ba      	str	r2, [r7, #104]	; 0x68
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <_vsnprintf+0x7d0>
 800401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401e:	e001      	b.n	8004024 <_vsnprintf+0x7d4>
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	4619      	mov	r1, r3
 8004026:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004028:	f7fe fcb3 	bl	8002992 <_strnlen_s>
 800402c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800402e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8004038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800403a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403c:	4293      	cmp	r3, r2
 800403e:	bf28      	it	cs
 8004040:	4613      	movcs	r3, r2
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8004044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d11a      	bne.n	8004084 <_vsnprintf+0x834>
          while (l++ < width) {
 800404e:	e007      	b.n	8004060 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8004050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004052:	1c53      	adds	r3, r2, #1
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
 8004056:	68fc      	ldr	r4, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	2020      	movs	r0, #32
 800405e:	47a0      	blx	r4
          while (l++ < width) {
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	637a      	str	r2, [r7, #52]	; 0x34
 8004066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004068:	429a      	cmp	r2, r3
 800406a:	d8f1      	bhi.n	8004050 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800406c:	e00a      	b.n	8004084 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	63ba      	str	r2, [r7, #56]	; 0x38
 8004074:	7818      	ldrb	r0, [r3, #0]
 8004076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004078:	1c53      	adds	r3, r2, #1
 800407a:	647b      	str	r3, [r7, #68]	; 0x44
 800407c:	68fc      	ldr	r4, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <_vsnprintf+0x850>
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0eb      	beq.n	800406e <_vsnprintf+0x81e>
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	1e5a      	subs	r2, r3, #1
 800409a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80040a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <_vsnprintf+0x878>
          while (l++ < width) {
 80040aa:	e007      	b.n	80040bc <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 80040ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ae:	1c53      	adds	r3, r2, #1
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
 80040b2:	68fc      	ldr	r4, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	2020      	movs	r0, #32
 80040ba:	47a0      	blx	r4
          while (l++ < width) {
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	637a      	str	r2, [r7, #52]	; 0x34
 80040c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d8f1      	bhi.n	80040ac <_vsnprintf+0x85c>
          }
        }
        format++;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	603b      	str	r3, [r7, #0]
        break;
 80040ce:	e05e      	b.n	800418e <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80040d0:	2308      	movs	r3, #8
 80040d2:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80040da:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80040e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01d      	beq.n	8004126 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80040ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f04f 0400 	mov.w	r4, #0
 80040f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040f8:	9208      	str	r2, [sp, #32]
 80040fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040fc:	9207      	str	r2, [sp, #28]
 80040fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004100:	9206      	str	r2, [sp, #24]
 8004102:	f04f 0110 	mov.w	r1, #16
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800410e:	2200      	movs	r2, #0
 8004110:	9202      	str	r2, [sp, #8]
 8004112:	e9cd 3400 	strd	r3, r4, [sp]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7fe fe23 	bl	8002d68 <_ntoa_long_long>
 8004122:	6478      	str	r0, [r7, #68]	; 0x44
 8004124:	e016      	b.n	8004154 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	66ba      	str	r2, [r7, #104]	; 0x68
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	2310      	movs	r3, #16
 800413e:	9302      	str	r3, [sp, #8]
 8004140:	2300      	movs	r3, #0
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	9200      	str	r2, [sp, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7fe fda4 	bl	8002c9a <_ntoa_long>
 8004152:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	603b      	str	r3, [r7, #0]
        break;
 800415a:	e018      	b.n	800418e <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800415c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415e:	1c53      	adds	r3, r2, #1
 8004160:	647b      	str	r3, [r7, #68]	; 0x44
 8004162:	68fc      	ldr	r4, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	2025      	movs	r0, #37	; 0x25
 800416a:	47a0      	blx	r4
        format++;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	603b      	str	r3, [r7, #0]
        break;
 8004172:	e00c      	b.n	800418e <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	7818      	ldrb	r0, [r3, #0]
 8004178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800417a:	1c53      	adds	r3, r2, #1
 800417c:	647b      	str	r3, [r7, #68]	; 0x44
 800417e:	68fc      	ldr	r4, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	47a0      	blx	r4
        format++;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	603b      	str	r3, [r7, #0]
        break;
 800418c:	bf00      	nop
  while (*format)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f47f ab6d 	bne.w	8003872 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <_vsnprintf+0x956>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1e5a      	subs	r2, r3, #1
 80041a4:	e000      	b.n	80041a8 <_vsnprintf+0x958>
 80041a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a8:	68fc      	ldr	r4, [r7, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	2000      	movs	r0, #0
 80041b0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80041b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3758      	adds	r7, #88	; 0x58
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}

080041bc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80041bc:	b40f      	push	{r0, r1, r2, r3}
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80041c4:	f107 031c 	add.w	r3, r7, #28
 80041c8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80041ca:	1d39      	adds	r1, r7, #4
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f04f 32ff 	mov.w	r2, #4294967295
 80041d6:	4806      	ldr	r0, [pc, #24]	; (80041f0 <printf_+0x34>)
 80041d8:	f7ff fb3a 	bl	8003850 <_vsnprintf>
 80041dc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041ea:	b004      	add	sp, #16
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	0800296d 	.word	0x0800296d

080041f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_MspInit+0x54>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4a11      	ldr	r2, [pc, #68]	; (8004248 <HAL_MspInit+0x54>)
 8004204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004208:	6453      	str	r3, [r2, #68]	; 0x44
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_MspInit+0x54>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_MspInit+0x54>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <HAL_MspInit+0x54>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_MspInit+0x54>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	210f      	movs	r1, #15
 8004236:	f06f 0001 	mvn.w	r0, #1
 800423a:	f000 fbef 	bl	8004a1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800

0800424c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800425c:	2200      	movs	r2, #0
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	2019      	movs	r0, #25
 8004262:	f000 fbdb 	bl	8004a1c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004266:	2019      	movs	r0, #25
 8004268:	f000 fbf4 	bl	8004a54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_InitTick+0xa0>)
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <HAL_InitTick+0xa0>)
 8004276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427a:	6453      	str	r3, [r2, #68]	; 0x44
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_InitTick+0xa0>)
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004288:	f107 0210 	add.w	r2, r7, #16
 800428c:	f107 0314 	add.w	r3, r7, #20
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f002 fa98 	bl	80067c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004298:	f002 fa82 	bl	80067a0 <HAL_RCC_GetPCLK2Freq>
 800429c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <HAL_InitTick+0xa4>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	0c9b      	lsrs	r3, r3, #18
 80042a8:	3b01      	subs	r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_InitTick+0xa8>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <HAL_InitTick+0xac>)
 80042b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_InitTick+0xa8>)
 80042b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042b8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80042ba:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <HAL_InitTick+0xa8>)
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <HAL_InitTick+0xa8>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_InitTick+0xa8>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80042cc:	4809      	ldr	r0, [pc, #36]	; (80042f4 <HAL_InitTick+0xa8>)
 80042ce:	f002 faad 	bl	800682c <HAL_TIM_Base_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80042d8:	4806      	ldr	r0, [pc, #24]	; (80042f4 <HAL_InitTick+0xa8>)
 80042da:	f002 fad2 	bl	8006882 <HAL_TIM_Base_Start_IT>
 80042de:	4603      	mov	r3, r0
 80042e0:	e000      	b.n	80042e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	; 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	431bde83 	.word	0x431bde83
 80042f4:	20004ba8 	.word	0x20004ba8
 80042f8:	40014400 	.word	0x40014400

080042fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <NMI_Handler+0x4>

08004302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004306:	e7fe      	b.n	8004306 <HardFault_Handler+0x4>

08004308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800430c:	e7fe      	b.n	800430c <MemManage_Handler+0x4>

0800430e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004312:	e7fe      	b.n	8004312 <BusFault_Handler+0x4>

08004314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004318:	e7fe      	b.n	8004318 <UsageFault_Handler+0x4>

0800431a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800432c:	4802      	ldr	r0, [pc, #8]	; (8004338 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800432e:	f002 fb7f 	bl	8006a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20004ba8 	.word	0x20004ba8

0800433c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004340:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004344:	f000 fe12 	bl	8004f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800434c:	f000 fe0e 	bl	8004f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}

08004354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <_sbrk+0x5c>)
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <_sbrk+0x60>)
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <_sbrk+0x64>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004370:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <_sbrk+0x64>)
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <_sbrk+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d207      	bcs.n	8004394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004384:	f008 f8a2 	bl	800c4cc <__errno>
 8004388:	4602      	mov	r2, r0
 800438a:	230c      	movs	r3, #12
 800438c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	e009      	b.n	80043a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <_sbrk+0x64>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <_sbrk+0x64>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <_sbrk+0x64>)
 80043a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20020000 	.word	0x20020000
 80043b4:	00000400 	.word	0x00000400
 80043b8:	200001fc 	.word	0x200001fc
 80043bc:	20004cf0 	.word	0x20004cf0

080043c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <SystemInit+0x28>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <SystemInit+0x28>)
 80043cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <SystemInit+0x28>)
 80043d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043da:	609a      	str	r2, [r3, #8]
#endif
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004400:	f107 0320 	add.w	r3, r7, #32
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
 8004418:	615a      	str	r2, [r3, #20]
 800441a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800441c:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <MX_TIM2_Init+0xe8>)
 800441e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004426:	2253      	movs	r2, #83	; 0x53
 8004428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <MX_TIM2_Init+0xe8>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004430:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004432:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <MX_TIM2_Init+0xe8>)
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004444:	4823      	ldr	r0, [pc, #140]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004446:	f002 f9f1 	bl	800682c <HAL_TIM_Base_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004450:	f7fe fa7a 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800445a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445e:	4619      	mov	r1, r3
 8004460:	481c      	ldr	r0, [pc, #112]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004462:	f002 fcb3 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800446c:	f7fe fa6c 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004470:	4818      	ldr	r0, [pc, #96]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004472:	f002 fa2a 	bl	80068ca <HAL_TIM_PWM_Init>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800447c:	f7fe fa64 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004480:	2300      	movs	r3, #0
 8004482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004488:	f107 0320 	add.w	r3, r7, #32
 800448c:	4619      	mov	r1, r3
 800448e:	4811      	ldr	r0, [pc, #68]	; (80044d4 <MX_TIM2_Init+0xe8>)
 8004490:	f003 f848 	bl	8007524 <HAL_TIMEx_MasterConfigSynchronization>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800449a:	f7fe fa55 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800449e:	2360      	movs	r3, #96	; 0x60
 80044a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80044a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80044a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	2208      	movs	r2, #8
 80044b4:	4619      	mov	r1, r3
 80044b6:	4807      	ldr	r0, [pc, #28]	; (80044d4 <MX_TIM2_Init+0xe8>)
 80044b8:	f002 fbc2 	bl	8006c40 <HAL_TIM_PWM_ConfigChannel>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80044c2:	f7fe fa41 	bl	8002948 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80044c6:	4803      	ldr	r0, [pc, #12]	; (80044d4 <MX_TIM2_Init+0xe8>)
 80044c8:	f000 f8b4 	bl	8004634 <HAL_TIM_MspPostInit>

}
 80044cc:	bf00      	nop
 80044ce:	3738      	adds	r7, #56	; 0x38
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20004c28 	.word	0x20004c28

080044d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08e      	sub	sp, #56	; 0x38
 80044dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ec:	f107 0320 	add.w	r3, r7, #32
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044f6:	1d3b      	adds	r3, r7, #4
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
 8004504:	615a      	str	r2, [r3, #20]
 8004506:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <MX_TIM4_Init+0xe8>)
 800450a:	4a2e      	ldr	r2, [pc, #184]	; (80045c4 <MX_TIM4_Init+0xec>)
 800450c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800450e:	4b2c      	ldr	r3, [pc, #176]	; (80045c0 <MX_TIM4_Init+0xe8>)
 8004510:	2253      	movs	r2, #83	; 0x53
 8004512:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004514:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <MX_TIM4_Init+0xe8>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800451a:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <MX_TIM4_Init+0xe8>)
 800451c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004520:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <MX_TIM4_Init+0xe8>)
 8004524:	2200      	movs	r2, #0
 8004526:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <MX_TIM4_Init+0xe8>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800452e:	4824      	ldr	r0, [pc, #144]	; (80045c0 <MX_TIM4_Init+0xe8>)
 8004530:	f002 f97c 	bl	800682c <HAL_TIM_Base_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800453a:	f7fe fa05 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800453e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004548:	4619      	mov	r1, r3
 800454a:	481d      	ldr	r0, [pc, #116]	; (80045c0 <MX_TIM4_Init+0xe8>)
 800454c:	f002 fc3e 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004556:	f7fe f9f7 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800455a:	4819      	ldr	r0, [pc, #100]	; (80045c0 <MX_TIM4_Init+0xe8>)
 800455c:	f002 f9b5 	bl	80068ca <HAL_TIM_PWM_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004566:	f7fe f9ef 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004572:	f107 0320 	add.w	r3, r7, #32
 8004576:	4619      	mov	r1, r3
 8004578:	4811      	ldr	r0, [pc, #68]	; (80045c0 <MX_TIM4_Init+0xe8>)
 800457a:	f002 ffd3 	bl	8007524 <HAL_TIMEx_MasterConfigSynchronization>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004584:	f7fe f9e0 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004588:	2360      	movs	r3, #96	; 0x60
 800458a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800458c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	2200      	movs	r2, #0
 800459e:	4619      	mov	r1, r3
 80045a0:	4807      	ldr	r0, [pc, #28]	; (80045c0 <MX_TIM4_Init+0xe8>)
 80045a2:	f002 fb4d 	bl	8006c40 <HAL_TIM_PWM_ConfigChannel>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80045ac:	f7fe f9cc 	bl	8002948 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80045b0:	4803      	ldr	r0, [pc, #12]	; (80045c0 <MX_TIM4_Init+0xe8>)
 80045b2:	f000 f83f 	bl	8004634 <HAL_TIM_MspPostInit>

}
 80045b6:	bf00      	nop
 80045b8:	3738      	adds	r7, #56	; 0x38
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20004be8 	.word	0x20004be8
 80045c4:	40000800 	.word	0x40000800

080045c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <HAL_TIM_Base_MspInit+0x64>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <HAL_TIM_Base_MspInit+0x64>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_TIM_Base_MspInit+0x64>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80045f6:	e012      	b.n	800461e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <HAL_TIM_Base_MspInit+0x68>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10d      	bne.n	800461e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_TIM_Base_MspInit+0x64>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <HAL_TIM_Base_MspInit+0x64>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_TIM_Base_MspInit+0x64>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	40000800 	.word	0x40000800

08004634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d11f      	bne.n	8004696 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = leftMotor_STEP_Pin;
 8004672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	2300      	movs	r3, #0
 8004682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004684:	2301      	movs	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	4619      	mov	r1, r3
 800468e:	4816      	ldr	r0, [pc, #88]	; (80046e8 <HAL_TIM_MspPostInit+0xb4>)
 8004690:	f000 f9ee 	bl	8004a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004694:	e022      	b.n	80046dc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <HAL_TIM_MspPostInit+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d11d      	bne.n	80046dc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 80046aa:	f043 0302 	orr.w	r3, r3, #2
 80046ae:	6313      	str	r3, [r2, #48]	; 0x30
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightMotor_STEP_Pin;
 80046bc:	2340      	movs	r3, #64	; 0x40
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046cc:	2302      	movs	r3, #2
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightMotor_STEP_GPIO_Port, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	4804      	ldr	r0, [pc, #16]	; (80046e8 <HAL_TIM_MspPostInit+0xb4>)
 80046d8:	f000 f9ca 	bl	8004a70 <HAL_GPIO_Init>
}
 80046dc:	bf00      	nop
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40020400 	.word	0x40020400
 80046ec:	40000800 	.word	0x40000800

080046f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <MX_USART2_UART_Init+0x4c>)
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <MX_USART2_UART_Init+0x50>)
 80046f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <MX_USART2_UART_Init+0x4c>)
 80046fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <MX_USART2_UART_Init+0x4c>)
 8004704:	2200      	movs	r2, #0
 8004706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <MX_USART2_UART_Init+0x4c>)
 800470a:	2200      	movs	r2, #0
 800470c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <MX_USART2_UART_Init+0x4c>)
 8004710:	2200      	movs	r2, #0
 8004712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <MX_USART2_UART_Init+0x4c>)
 8004716:	220c      	movs	r2, #12
 8004718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <MX_USART2_UART_Init+0x4c>)
 800471c:	2200      	movs	r2, #0
 800471e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <MX_USART2_UART_Init+0x4c>)
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004726:	4805      	ldr	r0, [pc, #20]	; (800473c <MX_USART2_UART_Init+0x4c>)
 8004728:	f002 ff7e 	bl	8007628 <HAL_UART_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004732:	f7fe f909 	bl	8002948 <Error_Handler>
  }

}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20004c68 	.word	0x20004c68
 8004740:	40004400 	.word	0x40004400

08004744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <HAL_UART_MspInit+0x84>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d12b      	bne.n	80047be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_UART_MspInit+0x88>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_UART_MspInit+0x88>)
 8004770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004774:	6413      	str	r3, [r2, #64]	; 0x40
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <HAL_UART_MspInit+0x88>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_UART_MspInit+0x88>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <HAL_UART_MspInit+0x88>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <HAL_UART_MspInit+0x88>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800479e:	230c      	movs	r3, #12
 80047a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a2:	2302      	movs	r3, #2
 80047a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047aa:	2303      	movs	r3, #3
 80047ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047ae:	2307      	movs	r3, #7
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b2:	f107 0314 	add.w	r3, r7, #20
 80047b6:	4619      	mov	r1, r3
 80047b8:	4805      	ldr	r0, [pc, #20]	; (80047d0 <HAL_UART_MspInit+0x8c>)
 80047ba:	f000 f959 	bl	8004a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80047be:	bf00      	nop
 80047c0:	3728      	adds	r7, #40	; 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40004400 	.word	0x40004400
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40020000 	.word	0x40020000

080047d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80047d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800480c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047da:	e003      	b.n	80047e4 <LoopCopyDataInit>

080047dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80047de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047e2:	3104      	adds	r1, #4

080047e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047e4:	480b      	ldr	r0, [pc, #44]	; (8004814 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047ec:	d3f6      	bcc.n	80047dc <CopyDataInit>
  ldr  r2, =_sbss
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047f0:	e002      	b.n	80047f8 <LoopFillZerobss>

080047f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047f4:	f842 3b04 	str.w	r3, [r2], #4

080047f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047fc:	d3f9      	bcc.n	80047f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047fe:	f7ff fddf 	bl	80043c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004802:	f007 fe69 	bl	800c4d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004806:	f7fd fffd 	bl	8002804 <main>
  bx  lr    
 800480a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800480c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004810:	0800ea50 	.word	0x0800ea50
  ldr  r0, =_sdata
 8004814:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004818:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800481c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004820:	20004cf0 	.word	0x20004cf0

08004824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004824:	e7fe      	b.n	8004824 <ADC_IRQHandler>
	...

08004828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_Init+0x40>)
 8004832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_Init+0x40>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_Init+0x40>)
 800483e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_Init+0x40>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_Init+0x40>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004850:	2003      	movs	r0, #3
 8004852:	f000 f8d8 	bl	8004a06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004856:	2000      	movs	r0, #0
 8004858:	f7ff fcf8 	bl	800424c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800485c:	f7ff fcca 	bl	80041f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00

0800486c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_IncTick+0x20>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_IncTick+0x24>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4413      	add	r3, r2
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <HAL_IncTick+0x24>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000008 	.word	0x20000008
 8004890:	20004ca8 	.word	0x20004ca8

08004894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return uwTick;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <HAL_GetTick+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20004ca8 	.word	0x20004ca8

080048ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c8:	4013      	ands	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048de:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	60d3      	str	r3, [r2, #12]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <__NVIC_GetPriorityGrouping+0x18>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 0307 	and.w	r3, r3, #7
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db0b      	blt.n	800493a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	f003 021f 	and.w	r2, r3, #31
 8004928:	4907      	ldr	r1, [pc, #28]	; (8004948 <__NVIC_EnableIRQ+0x38>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2001      	movs	r0, #1
 8004932:	fa00 f202 	lsl.w	r2, r0, r2
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	e000e100 	.word	0xe000e100

0800494c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	6039      	str	r1, [r7, #0]
 8004956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db0a      	blt.n	8004976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	490c      	ldr	r1, [pc, #48]	; (8004998 <__NVIC_SetPriority+0x4c>)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	440b      	add	r3, r1
 8004970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004974:	e00a      	b.n	800498c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4908      	ldr	r1, [pc, #32]	; (800499c <__NVIC_SetPriority+0x50>)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	3b04      	subs	r3, #4
 8004984:	0112      	lsls	r2, r2, #4
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	440b      	add	r3, r1
 800498a:	761a      	strb	r2, [r3, #24]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000e100 	.word	0xe000e100
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	; 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f1c3 0307 	rsb	r3, r3, #7
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf28      	it	cs
 80049be:	2304      	movcs	r3, #4
 80049c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d902      	bls.n	80049d0 <NVIC_EncodePriority+0x30>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3b03      	subs	r3, #3
 80049ce:	e000      	b.n	80049d2 <NVIC_EncodePriority+0x32>
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43da      	mvns	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	401a      	ands	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	43d9      	mvns	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	4313      	orrs	r3, r2
         );
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff4c 	bl	80048ac <__NVIC_SetPriorityGrouping>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a2e:	f7ff ff61 	bl	80048f4 <__NVIC_GetPriorityGrouping>
 8004a32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	6978      	ldr	r0, [r7, #20]
 8004a3a:	f7ff ffb1 	bl	80049a0 <NVIC_EncodePriority>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ff80 	bl	800494c <__NVIC_SetPriority>
}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ff54 	bl	8004910 <__NVIC_EnableIRQ>
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e159      	b.n	8004d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f040 8148 	bne.w	8004d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d00b      	beq.n	8004aca <HAL_GPIO_Init+0x5a>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004abe:	2b11      	cmp	r3, #17
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b12      	cmp	r3, #18
 8004ac8:	d130      	bne.n	8004b2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b00:	2201      	movs	r2, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 0201 	and.w	r2, r3, #1
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0xfc>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b12      	cmp	r3, #18
 8004b6a:	d123      	bne.n	8004bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	08da      	lsrs	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3208      	adds	r2, #8
 8004b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	220f      	movs	r2, #15
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	08da      	lsrs	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3208      	adds	r2, #8
 8004bae:	69b9      	ldr	r1, [r7, #24]
 8004bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0203 	and.w	r2, r3, #3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a2 	beq.w	8004d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <HAL_GPIO_Init+0x2e4>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4a55      	ldr	r2, [pc, #340]	; (8004d54 <HAL_GPIO_Init+0x2e4>)
 8004c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c04:	6453      	str	r3, [r2, #68]	; 0x44
 8004c06:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <HAL_GPIO_Init+0x2e4>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c12:	4a51      	ldr	r2, [pc, #324]	; (8004d58 <HAL_GPIO_Init+0x2e8>)
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	3302      	adds	r3, #2
 8004c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	220f      	movs	r2, #15
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a48      	ldr	r2, [pc, #288]	; (8004d5c <HAL_GPIO_Init+0x2ec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d019      	beq.n	8004c72 <HAL_GPIO_Init+0x202>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a47      	ldr	r2, [pc, #284]	; (8004d60 <HAL_GPIO_Init+0x2f0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_GPIO_Init+0x1fe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a46      	ldr	r2, [pc, #280]	; (8004d64 <HAL_GPIO_Init+0x2f4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00d      	beq.n	8004c6a <HAL_GPIO_Init+0x1fa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a45      	ldr	r2, [pc, #276]	; (8004d68 <HAL_GPIO_Init+0x2f8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <HAL_GPIO_Init+0x1f6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a44      	ldr	r2, [pc, #272]	; (8004d6c <HAL_GPIO_Init+0x2fc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d101      	bne.n	8004c62 <HAL_GPIO_Init+0x1f2>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	e008      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c62:	2307      	movs	r3, #7
 8004c64:	e006      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c66:	2303      	movs	r3, #3
 8004c68:	e004      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e002      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c72:	2300      	movs	r3, #0
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	f002 0203 	and.w	r2, r2, #3
 8004c7a:	0092      	lsls	r2, r2, #2
 8004c7c:	4093      	lsls	r3, r2
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c84:	4934      	ldr	r1, [pc, #208]	; (8004d58 <HAL_GPIO_Init+0x2e8>)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	089b      	lsrs	r3, r3, #2
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cb6:	4a2e      	ldr	r2, [pc, #184]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ce0:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ce6:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d0a:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d10:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d34:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b0f      	cmp	r3, #15
 8004d44:	f67f aea2 	bls.w	8004a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3724      	adds	r7, #36	; 0x24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40013800 	.word	0x40013800
 8004d5c:	40020000 	.word	0x40020000
 8004d60:	40020400 	.word	0x40020400
 8004d64:	40020800 	.word	0x40020800
 8004d68:	40020c00 	.word	0x40020c00
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40013c00 	.word	0x40013c00

08004d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e0bb      	b.n	8004f08 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d90:	2201      	movs	r2, #1
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	f040 80ab 	bne.w	8004f02 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004dac:	4a5b      	ldr	r2, [pc, #364]	; (8004f1c <HAL_GPIO_DeInit+0x1a8>)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a53      	ldr	r2, [pc, #332]	; (8004f20 <HAL_GPIO_DeInit+0x1ac>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d019      	beq.n	8004e0a <HAL_GPIO_DeInit+0x96>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a52      	ldr	r2, [pc, #328]	; (8004f24 <HAL_GPIO_DeInit+0x1b0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_GPIO_DeInit+0x92>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_GPIO_DeInit+0x1b4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00d      	beq.n	8004e02 <HAL_GPIO_DeInit+0x8e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_GPIO_DeInit+0x1b8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d007      	beq.n	8004dfe <HAL_GPIO_DeInit+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4f      	ldr	r2, [pc, #316]	; (8004f30 <HAL_GPIO_DeInit+0x1bc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_GPIO_DeInit+0x86>
 8004df6:	2304      	movs	r3, #4
 8004df8:	e008      	b.n	8004e0c <HAL_GPIO_DeInit+0x98>
 8004dfa:	2307      	movs	r3, #7
 8004dfc:	e006      	b.n	8004e0c <HAL_GPIO_DeInit+0x98>
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e004      	b.n	8004e0c <HAL_GPIO_DeInit+0x98>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e002      	b.n	8004e0c <HAL_GPIO_DeInit+0x98>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_GPIO_DeInit+0x98>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	f002 0203 	and.w	r2, r2, #3
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	4093      	lsls	r3, r2
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d132      	bne.n	8004e82 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e1c:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	4943      	ldr	r1, [pc, #268]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e2a:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	4940      	ldr	r1, [pc, #256]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004e38:	4b3e      	ldr	r3, [pc, #248]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	493c      	ldr	r1, [pc, #240]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004e46:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	4939      	ldr	r1, [pc, #228]	; (8004f34 <HAL_GPIO_DeInit+0x1c0>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e64:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <HAL_GPIO_DeInit+0x1a8>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	43da      	mvns	r2, r3
 8004e74:	4829      	ldr	r0, [pc, #164]	; (8004f1c <HAL_GPIO_DeInit+0x1a8>)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	08da      	lsrs	r2, r3, #3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3208      	adds	r2, #8
 8004ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	08d2      	lsrs	r2, r2, #3
 8004eb8:	4019      	ands	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3208      	adds	r2, #8
 8004ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2103      	movs	r1, #3
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	2101      	movs	r1, #1
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	2103      	movs	r1, #3
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	401a      	ands	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3301      	adds	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	f67f af40 	bls.w	8004d90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40013800 	.word	0x40013800
 8004f20:	40020000 	.word	0x40020000
 8004f24:	40020400 	.word	0x40020400
 8004f28:	40020800 	.word	0x40020800
 8004f2c:	40020c00 	.word	0x40020c00
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40013c00 	.word	0x40013c00

08004f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
 8004f44:	4613      	mov	r3, r2
 8004f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f48:	787b      	ldrb	r3, [r7, #1]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f4e:	887a      	ldrh	r2, [r7, #2]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f54:	e003      	b.n	8004f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	041a      	lsls	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	619a      	str	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f82:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fa1c 	bl	80023c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40013c00 	.word	0x40013c00

08004f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e11f      	b.n	80051ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fd fbd6 	bl	8002774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	; 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005000:	f001 fbba 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4a7b      	ldr	r2, [pc, #492]	; (80051f8 <HAL_I2C_Init+0x25c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d807      	bhi.n	8005020 <HAL_I2C_Init+0x84>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a7a      	ldr	r2, [pc, #488]	; (80051fc <HAL_I2C_Init+0x260>)
 8005014:	4293      	cmp	r3, r2
 8005016:	bf94      	ite	ls
 8005018:	2301      	movls	r3, #1
 800501a:	2300      	movhi	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e006      	b.n	800502e <HAL_I2C_Init+0x92>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a77      	ldr	r2, [pc, #476]	; (8005200 <HAL_I2C_Init+0x264>)
 8005024:	4293      	cmp	r3, r2
 8005026:	bf94      	ite	ls
 8005028:	2301      	movls	r3, #1
 800502a:	2300      	movhi	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0db      	b.n	80051ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a72      	ldr	r2, [pc, #456]	; (8005204 <HAL_I2C_Init+0x268>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0c9b      	lsrs	r3, r3, #18
 8005040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <HAL_I2C_Init+0x25c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <HAL_I2C_Init+0xd4>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	3301      	adds	r3, #1
 800506e:	e009      	b.n	8005084 <HAL_I2C_Init+0xe8>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_I2C_Init+0x26c>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	3301      	adds	r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	430b      	orrs	r3, r1
 800508a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4956      	ldr	r1, [pc, #344]	; (80051f8 <HAL_I2C_Init+0x25c>)
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d80d      	bhi.n	80050c0 <HAL_I2C_Init+0x124>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1e59      	subs	r1, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b2:	3301      	adds	r3, #1
 80050b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	bf38      	it	cc
 80050bc:	2304      	movcc	r3, #4
 80050be:	e04f      	b.n	8005160 <HAL_I2C_Init+0x1c4>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d111      	bne.n	80050ec <HAL_I2C_Init+0x150>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1e58      	subs	r0, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	440b      	add	r3, r1
 80050d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e012      	b.n	8005112 <HAL_I2C_Init+0x176>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1e58      	subs	r0, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	0099      	lsls	r1, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005102:	3301      	adds	r3, #1
 8005104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_Init+0x17e>
 8005116:	2301      	movs	r3, #1
 8005118:	e022      	b.n	8005160 <HAL_I2C_Init+0x1c4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10e      	bne.n	8005140 <HAL_I2C_Init+0x1a4>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1e58      	subs	r0, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	440b      	add	r3, r1
 8005130:	fbb0 f3f3 	udiv	r3, r0, r3
 8005134:	3301      	adds	r3, #1
 8005136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	e00f      	b.n	8005160 <HAL_I2C_Init+0x1c4>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1e58      	subs	r0, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6859      	ldr	r1, [r3, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	0099      	lsls	r1, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	fbb0 f3f3 	udiv	r3, r0, r3
 8005156:	3301      	adds	r3, #1
 8005158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6809      	ldr	r1, [r1, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800518e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6911      	ldr	r1, [r2, #16]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	4311      	orrs	r1, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	000186a0 	.word	0x000186a0
 80051fc:	001e847f 	.word	0x001e847f
 8005200:	003d08ff 	.word	0x003d08ff
 8005204:	431bde83 	.word	0x431bde83
 8005208:	10624dd3 	.word	0x10624dd3

0800520c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	461a      	mov	r2, r3
 800521a:	4603      	mov	r3, r0
 800521c:	817b      	strh	r3, [r7, #10]
 800521e:	460b      	mov	r3, r1
 8005220:	813b      	strh	r3, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005226:	f7ff fb35 	bl	8004894 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	f040 80d9 	bne.w	80053ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2319      	movs	r3, #25
 8005240:	2201      	movs	r2, #1
 8005242:	496d      	ldr	r1, [pc, #436]	; (80053f8 <HAL_I2C_Mem_Write+0x1ec>)
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fc7f 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
 8005252:	e0cc      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_I2C_Mem_Write+0x56>
 800525e:	2302      	movs	r3, #2
 8005260:	e0c5      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d007      	beq.n	8005288 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2221      	movs	r2, #33	; 0x21
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2240      	movs	r2, #64	; 0x40
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a4d      	ldr	r2, [pc, #308]	; (80053fc <HAL_I2C_Mem_Write+0x1f0>)
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ca:	88f8      	ldrh	r0, [r7, #6]
 80052cc:	893a      	ldrh	r2, [r7, #8]
 80052ce:	8979      	ldrh	r1, [r7, #10]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4603      	mov	r3, r0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fab6 	bl	800584c <I2C_RequestMemoryWrite>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d052      	beq.n	800538c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e081      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fd00 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00d      	beq.n	8005316 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d107      	bne.n	8005312 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e06b      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b04      	cmp	r3, #4
 8005352:	d11b      	bne.n	800538c <HAL_I2C_Mem_Write+0x180>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d017      	beq.n	800538c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1aa      	bne.n	80052ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fcec 	bl	8005d76 <I2C_WaitOnBTFFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d107      	bne.n	80053bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e016      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	00100002 	.word	0x00100002
 80053fc:	ffff0000 	.word	0xffff0000

08005400 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	; 0x30
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800541a:	f7ff fa3b 	bl	8004894 <HAL_GetTick>
 800541e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b20      	cmp	r3, #32
 800542a:	f040 8208 	bne.w	800583e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2319      	movs	r3, #25
 8005434:	2201      	movs	r2, #1
 8005436:	497b      	ldr	r1, [pc, #492]	; (8005624 <HAL_I2C_Mem_Read+0x224>)
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fb85 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
 8005446:	e1fb      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_I2C_Mem_Read+0x56>
 8005452:	2302      	movs	r3, #2
 8005454:	e1f4      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d007      	beq.n	800547c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2222      	movs	r2, #34	; 0x22
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a5b      	ldr	r2, [pc, #364]	; (8005628 <HAL_I2C_Mem_Read+0x228>)
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054be:	88f8      	ldrh	r0, [r7, #6]
 80054c0:	893a      	ldrh	r2, [r7, #8]
 80054c2:	8979      	ldrh	r1, [r7, #10]
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4603      	mov	r3, r0
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fa52 	bl	8005978 <I2C_RequestMemoryRead>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e1b0      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d113      	bne.n	800550e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e6:	2300      	movs	r3, #0
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	623b      	str	r3, [r7, #32]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e184      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	2b01      	cmp	r3, #1
 8005514:	d11b      	bne.n	800554e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e164      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005552:	2b02      	cmp	r3, #2
 8005554:	d11b      	bne.n	800558e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005564:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	e144      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055a4:	e138      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	f200 80f1 	bhi.w	8005792 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d123      	bne.n	8005600 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fc1b 	bl	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e139      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055fe:	e10b      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005604:	2b02      	cmp	r3, #2
 8005606:	d14e      	bne.n	80056a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	2200      	movs	r2, #0
 8005610:	4906      	ldr	r1, [pc, #24]	; (800562c <HAL_I2C_Mem_Read+0x22c>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fa98 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e10e      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
 8005622:	bf00      	nop
 8005624:	00100002 	.word	0x00100002
 8005628:	ffff0000 	.word	0xffff0000
 800562c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056a4:	e0b8      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2200      	movs	r2, #0
 80056ae:	4966      	ldr	r1, [pc, #408]	; (8005848 <HAL_I2C_Mem_Read+0x448>)
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa49 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0bf      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2200      	movs	r2, #0
 800570a:	494f      	ldr	r1, [pc, #316]	; (8005848 <HAL_I2C_Mem_Read+0x448>)
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fa1b 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e091      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005790:	e042      	b.n	8005818 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fb2e 	bl	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e04c      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d118      	bne.n	8005818 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	2b00      	cmp	r3, #0
 800581e:	f47f aec2 	bne.w	80055a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800583e:	2302      	movs	r3, #2
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3728      	adds	r7, #40	; 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	00010004 	.word	0x00010004

0800584c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	4608      	mov	r0, r1
 8005856:	4611      	mov	r1, r2
 8005858:	461a      	mov	r2, r3
 800585a:	4603      	mov	r3, r0
 800585c:	817b      	strh	r3, [r7, #10]
 800585e:	460b      	mov	r3, r1
 8005860:	813b      	strh	r3, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2200      	movs	r2, #0
 800587e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f960 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589c:	d103      	bne.n	80058a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e05f      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	492d      	ldr	r1, [pc, #180]	; (8005974 <I2C_RequestMemoryWrite+0x128>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f998 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04c      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	6a39      	ldr	r1, [r7, #32]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa02 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d107      	bne.n	800590e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e02b      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d105      	bne.n	8005924 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005918:	893b      	ldrh	r3, [r7, #8]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	e021      	b.n	8005968 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005924:	893b      	ldrh	r3, [r7, #8]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	b29b      	uxth	r3, r3
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	6a39      	ldr	r1, [r7, #32]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f9dc 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b04      	cmp	r3, #4
 8005948:	d107      	bne.n	800595a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e005      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800595e:	893b      	ldrh	r3, [r7, #8]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	00010002 	.word	0x00010002

08005978 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	460b      	mov	r3, r1
 800598c:	813b      	strh	r3, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f8c2 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d8:	d103      	bne.n	80059e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0aa      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	4952      	ldr	r1, [pc, #328]	; (8005b44 <I2C_RequestMemoryRead+0x1cc>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f8fa 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e097      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	6a39      	ldr	r1, [r7, #32]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f964 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d107      	bne.n	8005a4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e076      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d105      	bne.n	8005a60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	e021      	b.n	8005aa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	6a39      	ldr	r1, [r7, #32]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f93e 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d107      	bne.n	8005a96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e050      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa6:	6a39      	ldr	r1, [r7, #32]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f923 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e035      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ade:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f82b 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d103      	bne.n	8005b10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e013      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	4906      	ldr	r1, [pc, #24]	; (8005b44 <I2C_RequestMemoryRead+0x1cc>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f863 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	00010002 	.word	0x00010002

08005b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b58:	e025      	b.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d021      	beq.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fe fe97 	bl	8004894 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d116      	bne.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e023      	b.n	8005bee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	0c1b      	lsrs	r3, r3, #16
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10d      	bne.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	e00c      	b.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bf0c      	ite	eq
 8005bde:	2301      	moveq	r3, #1
 8005be0:	2300      	movne	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d0b6      	beq.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c04:	e051      	b.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d123      	bne.n	8005c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f043 0204 	orr.w	r2, r3, #4
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e046      	b.n	8005cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d021      	beq.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fe fe15 	bl	8004894 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d116      	bne.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e020      	b.n	8005cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d10c      	bne.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e00b      	b.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d18d      	bne.n	8005c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d00:	e02d      	b.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f8ce 	bl	8005ea4 <I2C_IsAcknowledgeFailed>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e02d      	b.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d021      	beq.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe fdbb 	bl	8004894 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e007      	b.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d1ca      	bne.n	8005d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d82:	e02d      	b.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f88d 	bl	8005ea4 <I2C_IsAcknowledgeFailed>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e02d      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d021      	beq.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9c:	f7fe fd7a 	bl	8004894 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e007      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d1ca      	bne.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e04:	e042      	b.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d119      	bne.n	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0210 	mvn.w	r2, #16
 8005e1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e029      	b.n	8005e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e48:	f7fe fd24 	bl	8004894 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d116      	bne.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0220 	orr.w	r2, r3, #32
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e007      	b.n	8005e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d1b5      	bne.n	8005e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eba:	d11b      	bne.n	8005ef4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f043 0204 	orr.w	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e25b      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d075      	beq.n	800600e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f22:	4ba3      	ldr	r3, [pc, #652]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d00c      	beq.n	8005f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2e:	4ba0      	ldr	r3, [pc, #640]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d112      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f3a:	4b9d      	ldr	r3, [pc, #628]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f48:	4b99      	ldr	r3, [pc, #612]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05b      	beq.n	800600c <HAL_RCC_OscConfig+0x108>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d157      	bne.n	800600c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e236      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f68:	d106      	bne.n	8005f78 <HAL_RCC_OscConfig+0x74>
 8005f6a:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a90      	ldr	r2, [pc, #576]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e01d      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x98>
 8005f82:	4b8b      	ldr	r3, [pc, #556]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a8a      	ldr	r2, [pc, #552]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a87      	ldr	r2, [pc, #540]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f9c:	4b84      	ldr	r3, [pc, #528]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a83      	ldr	r2, [pc, #524]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4b81      	ldr	r3, [pc, #516]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a80      	ldr	r2, [pc, #512]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fe fc6a 	bl	8004894 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fe fc66 	bl	8004894 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	; 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e1fb      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xc0>
 8005fe2:	e014      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe4:	f7fe fc56 	bl	8004894 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fec:	f7fe fc52 	bl	8004894 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	; 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e1e7      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffe:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0xe8>
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d063      	beq.n	80060e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800601a:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800602e:	2b08      	cmp	r3, #8
 8006030:	d11c      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603e:	4b5c      	ldr	r3, [pc, #368]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1bb      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	4b56      	ldr	r3, [pc, #344]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4952      	ldr	r1, [pc, #328]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606a:	e03a      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006074:	4b4f      	ldr	r3, [pc, #316]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fe fc0b 	bl	8004894 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006082:	f7fe fc07 	bl	8004894 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e19c      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a0:	4b43      	ldr	r3, [pc, #268]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4940      	ldr	r1, [pc, #256]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b6:	4b3f      	ldr	r3, [pc, #252]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fe fbea 	bl	8004894 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fe fbe6 	bl	8004894 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e17b      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	4b36      	ldr	r3, [pc, #216]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d030      	beq.n	8006150 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f6:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <HAL_RCC_OscConfig+0x2b4>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fe fbca 	bl	8004894 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fe fbc6 	bl	8004894 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e15b      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x200>
 8006122:	e015      	b.n	8006150 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <HAL_RCC_OscConfig+0x2b4>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7fe fbb3 	bl	8004894 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006132:	f7fe fbaf 	bl	8004894 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e144      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1f0      	bne.n	8006132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a0 	beq.w	800629e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4b13      	ldr	r3, [pc, #76]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6413      	str	r3, [r2, #64]	; 0x40
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <HAL_RCC_OscConfig+0x2b8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	2b00      	cmp	r3, #0
 8006198:	d121      	bne.n	80061de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <HAL_RCC_OscConfig+0x2b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a07      	ldr	r2, [pc, #28]	; (80061bc <HAL_RCC_OscConfig+0x2b8>)
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a6:	f7fe fb75 	bl	8004894 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	e011      	b.n	80061d2 <HAL_RCC_OscConfig+0x2ce>
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
 80061bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fe fb68 	bl	8004894 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0fd      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d2:	4b81      	ldr	r3, [pc, #516]	; (80063d8 <HAL_RCC_OscConfig+0x4d4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2f0>
 80061e6:	4b7d      	ldr	r3, [pc, #500]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	4a7c      	ldr	r2, [pc, #496]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	6713      	str	r3, [r2, #112]	; 0x70
 80061f2:	e01c      	b.n	800622e <HAL_RCC_OscConfig+0x32a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d10c      	bne.n	8006216 <HAL_RCC_OscConfig+0x312>
 80061fc:	4b77      	ldr	r3, [pc, #476]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	4a76      	ldr	r2, [pc, #472]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006202:	f043 0304 	orr.w	r3, r3, #4
 8006206:	6713      	str	r3, [r2, #112]	; 0x70
 8006208:	4b74      	ldr	r3, [pc, #464]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	4a73      	ldr	r2, [pc, #460]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6713      	str	r3, [r2, #112]	; 0x70
 8006214:	e00b      	b.n	800622e <HAL_RCC_OscConfig+0x32a>
 8006216:	4b71      	ldr	r3, [pc, #452]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	4a70      	ldr	r2, [pc, #448]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	6713      	str	r3, [r2, #112]	; 0x70
 8006222:	4b6e      	ldr	r3, [pc, #440]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	4a6d      	ldr	r2, [pc, #436]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006228:	f023 0304 	bic.w	r3, r3, #4
 800622c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d015      	beq.n	8006262 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006236:	f7fe fb2d 	bl	8004894 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623c:	e00a      	b.n	8006254 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fe fb29 	bl	8004894 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	; 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e0bc      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ee      	beq.n	800623e <HAL_RCC_OscConfig+0x33a>
 8006260:	e014      	b.n	800628c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006262:	f7fe fb17 	bl	8004894 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006268:	e00a      	b.n	8006280 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7fe fb13 	bl	8004894 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f241 3288 	movw	r2, #5000	; 0x1388
 8006278:	4293      	cmp	r3, r2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e0a6      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006280:	4b56      	ldr	r3, [pc, #344]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ee      	bne.n	800626a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d105      	bne.n	800629e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006292:	4b52      	ldr	r3, [pc, #328]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a51      	ldr	r2, [pc, #324]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8092 	beq.w	80063cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a8:	4b4c      	ldr	r3, [pc, #304]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d05c      	beq.n	800636e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d141      	bne.n	8006340 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062bc:	4b48      	ldr	r3, [pc, #288]	; (80063e0 <HAL_RCC_OscConfig+0x4dc>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c2:	f7fe fae7 	bl	8004894 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ca:	f7fe fae3 	bl	8004894 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e078      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062dc:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f0      	bne.n	80062ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	019b      	lsls	r3, r3, #6
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	3b01      	subs	r3, #1
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	4933      	ldr	r1, [pc, #204]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800630e:	4313      	orrs	r3, r2
 8006310:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006312:	4b33      	ldr	r3, [pc, #204]	; (80063e0 <HAL_RCC_OscConfig+0x4dc>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fe fabc 	bl	8004894 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006320:	f7fe fab8 	bl	8004894 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e04d      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006332:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x41c>
 800633e:	e045      	b.n	80063cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x4dc>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fe faa5 	bl	8004894 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634e:	f7fe faa1 	bl	8004894 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e036      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006360:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x44a>
 800636c:	e02e      	b.n	80063cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e029      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	429a      	cmp	r2, r3
 800638c:	d11c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006398:	429a      	cmp	r2, r3
 800639a:	d115      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d10d      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d106      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40007000 	.word	0x40007000
 80063dc:	40023800 	.word	0x40023800
 80063e0:	42470060 	.word	0x42470060

080063e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0cc      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b68      	ldr	r3, [pc, #416]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d90c      	bls.n	8006420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b65      	ldr	r3, [pc, #404]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b63      	ldr	r3, [pc, #396]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0b8      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d020      	beq.n	800646e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006438:	4b59      	ldr	r3, [pc, #356]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a58      	ldr	r2, [pc, #352]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006450:	4b53      	ldr	r3, [pc, #332]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	4a52      	ldr	r2, [pc, #328]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800645a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800645c:	4b50      	ldr	r3, [pc, #320]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	494d      	ldr	r1, [pc, #308]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d044      	beq.n	8006504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d107      	bne.n	8006492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006482:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d119      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e07f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d003      	beq.n	80064a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e06f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b2:	4b3b      	ldr	r3, [pc, #236]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e067      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4934      	ldr	r1, [pc, #208]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d4:	f7fe f9de 	bl	8004894 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fe f9da 	bl	8004894 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e04f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d20c      	bcs.n	800652c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b22      	ldr	r3, [pc, #136]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651a:	4b20      	ldr	r3, [pc, #128]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e032      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4916      	ldr	r1, [pc, #88]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	490e      	ldr	r1, [pc, #56]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800656a:	f000 f821 	bl	80065b0 <HAL_RCC_GetSysClockFreq>
 800656e:	4601      	mov	r1, r0
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 800657c:	5cd3      	ldrb	r3, [r2, r3]
 800657e:	fa21 f303 	lsr.w	r3, r1, r3
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x1c8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fd fe5e 	bl	800424c <HAL_InitTick>

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40023c00 	.word	0x40023c00
 80065a0:	40023800 	.word	0x40023800
 80065a4:	0800e7c0 	.word	0x0800e7c0
 80065a8:	20000000 	.word	0x20000000
 80065ac:	20000004 	.word	0x20000004

080065b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	2300      	movs	r3, #0
 80065c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065c6:	4b63      	ldr	r3, [pc, #396]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d007      	beq.n	80065e2 <HAL_RCC_GetSysClockFreq+0x32>
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d008      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x38>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 80b4 	bne.w	8006744 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b5e      	ldr	r3, [pc, #376]	; (8006758 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80065de:	60bb      	str	r3, [r7, #8]
       break;
 80065e0:	e0b3      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065e2:	4b5e      	ldr	r3, [pc, #376]	; (800675c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80065e4:	60bb      	str	r3, [r7, #8]
      break;
 80065e6:	e0b0      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e8:	4b5a      	ldr	r3, [pc, #360]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065f2:	4b58      	ldr	r3, [pc, #352]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04a      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fe:	4b55      	ldr	r3, [pc, #340]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	099b      	lsrs	r3, r3, #6
 8006604:	f04f 0400 	mov.w	r4, #0
 8006608:	f240 11ff 	movw	r1, #511	; 0x1ff
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	ea03 0501 	and.w	r5, r3, r1
 8006614:	ea04 0602 	and.w	r6, r4, r2
 8006618:	4629      	mov	r1, r5
 800661a:	4632      	mov	r2, r6
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	0154      	lsls	r4, r2, #5
 8006626:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800662a:	014b      	lsls	r3, r1, #5
 800662c:	4619      	mov	r1, r3
 800662e:	4622      	mov	r2, r4
 8006630:	1b49      	subs	r1, r1, r5
 8006632:	eb62 0206 	sbc.w	r2, r2, r6
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	f04f 0400 	mov.w	r4, #0
 800663e:	0194      	lsls	r4, r2, #6
 8006640:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006644:	018b      	lsls	r3, r1, #6
 8006646:	1a5b      	subs	r3, r3, r1
 8006648:	eb64 0402 	sbc.w	r4, r4, r2
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	00e2      	lsls	r2, r4, #3
 8006656:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800665a:	00d9      	lsls	r1, r3, #3
 800665c:	460b      	mov	r3, r1
 800665e:	4614      	mov	r4, r2
 8006660:	195b      	adds	r3, r3, r5
 8006662:	eb44 0406 	adc.w	r4, r4, r6
 8006666:	f04f 0100 	mov.w	r1, #0
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	0262      	lsls	r2, r4, #9
 8006670:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006674:	0259      	lsls	r1, r3, #9
 8006676:	460b      	mov	r3, r1
 8006678:	4614      	mov	r4, r2
 800667a:	4618      	mov	r0, r3
 800667c:	4621      	mov	r1, r4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f04f 0400 	mov.w	r4, #0
 8006684:	461a      	mov	r2, r3
 8006686:	4623      	mov	r3, r4
 8006688:	f7fa fa66 	bl	8000b58 <__aeabi_uldivmod>
 800668c:	4603      	mov	r3, r0
 800668e:	460c      	mov	r4, r1
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e049      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006694:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	099b      	lsrs	r3, r3, #6
 800669a:	f04f 0400 	mov.w	r4, #0
 800669e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	ea03 0501 	and.w	r5, r3, r1
 80066aa:	ea04 0602 	and.w	r6, r4, r2
 80066ae:	4629      	mov	r1, r5
 80066b0:	4632      	mov	r2, r6
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	f04f 0400 	mov.w	r4, #0
 80066ba:	0154      	lsls	r4, r2, #5
 80066bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066c0:	014b      	lsls	r3, r1, #5
 80066c2:	4619      	mov	r1, r3
 80066c4:	4622      	mov	r2, r4
 80066c6:	1b49      	subs	r1, r1, r5
 80066c8:	eb62 0206 	sbc.w	r2, r2, r6
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	f04f 0400 	mov.w	r4, #0
 80066d4:	0194      	lsls	r4, r2, #6
 80066d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066da:	018b      	lsls	r3, r1, #6
 80066dc:	1a5b      	subs	r3, r3, r1
 80066de:	eb64 0402 	sbc.w	r4, r4, r2
 80066e2:	f04f 0100 	mov.w	r1, #0
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	00e2      	lsls	r2, r4, #3
 80066ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80066f0:	00d9      	lsls	r1, r3, #3
 80066f2:	460b      	mov	r3, r1
 80066f4:	4614      	mov	r4, r2
 80066f6:	195b      	adds	r3, r3, r5
 80066f8:	eb44 0406 	adc.w	r4, r4, r6
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	02a2      	lsls	r2, r4, #10
 8006706:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800670a:	0299      	lsls	r1, r3, #10
 800670c:	460b      	mov	r3, r1
 800670e:	4614      	mov	r4, r2
 8006710:	4618      	mov	r0, r3
 8006712:	4621      	mov	r1, r4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f04f 0400 	mov.w	r4, #0
 800671a:	461a      	mov	r2, r3
 800671c:	4623      	mov	r3, r4
 800671e:	f7fa fa1b 	bl	8000b58 <__aeabi_uldivmod>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	3301      	adds	r3, #1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	60bb      	str	r3, [r7, #8]
      break;
 8006742:	e002      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006746:	60bb      	str	r3, [r7, #8]
      break;
 8006748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800674a:	68bb      	ldr	r3, [r7, #8]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006754:	40023800 	.word	0x40023800
 8006758:	00f42400 	.word	0x00f42400
 800675c:	007a1200 	.word	0x007a1200

08006760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <HAL_RCC_GetHCLKFreq+0x14>)
 8006766:	681b      	ldr	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000000 	.word	0x20000000

08006778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800677c:	f7ff fff0 	bl	8006760 <HAL_RCC_GetHCLKFreq>
 8006780:	4601      	mov	r1, r0
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	0a9b      	lsrs	r3, r3, #10
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	4a03      	ldr	r2, [pc, #12]	; (800679c <HAL_RCC_GetPCLK1Freq+0x24>)
 800678e:	5cd3      	ldrb	r3, [r2, r3]
 8006790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006794:	4618      	mov	r0, r3
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40023800 	.word	0x40023800
 800679c:	0800e7d0 	.word	0x0800e7d0

080067a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067a4:	f7ff ffdc 	bl	8006760 <HAL_RCC_GetHCLKFreq>
 80067a8:	4601      	mov	r1, r0
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	0b5b      	lsrs	r3, r3, #13
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	4a03      	ldr	r2, [pc, #12]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b6:	5cd3      	ldrb	r3, [r2, r3]
 80067b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40023800 	.word	0x40023800
 80067c4:	0800e7d0 	.word	0x0800e7d0

080067c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	220f      	movs	r2, #15
 80067d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <HAL_RCC_GetClockConfig+0x5c>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 0203 	and.w	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80067e4:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <HAL_RCC_GetClockConfig+0x5c>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80067f0:	4b0c      	ldr	r3, [pc, #48]	; (8006824 <HAL_RCC_GetClockConfig+0x5c>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <HAL_RCC_GetClockConfig+0x5c>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800680a:	4b07      	ldr	r3, [pc, #28]	; (8006828 <HAL_RCC_GetClockConfig+0x60>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 020f 	and.w	r2, r3, #15
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800
 8006828:	40023c00 	.word	0x40023c00

0800682c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e01d      	b.n	800687a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fd feb8 	bl	80045c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f000 fb8e 	bl	8006f8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b06      	cmp	r3, #6
 80068aa:	d007      	beq.n	80068bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e01d      	b.n	8006918 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f815 	bl	8006920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 fb3f 	bl	8006f8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2201      	movs	r2, #1
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fdc6 	bl	80074d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a10      	ldr	r2, [pc, #64]	; (8006994 <HAL_TIM_PWM_Start+0x60>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d107      	bne.n	8006966 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b06      	cmp	r3, #6
 8006976:	d007      	beq.n	8006988 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40010000 	.word	0x40010000

08006998 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fd94 	bl	80074d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_TIM_PWM_Stop+0x94>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d117      	bne.n	80069ea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <HAL_TIM_PWM_Stop+0x52>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	f240 4344 	movw	r3, #1092	; 0x444
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <HAL_TIM_PWM_Stop+0x52>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a1a      	ldr	r2, [r3, #32]
 80069f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <HAL_TIM_PWM_Stop+0x82>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	f240 4344 	movw	r3, #1092	; 0x444
 8006a04:	4013      	ands	r3, r2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <HAL_TIM_PWM_Stop+0x82>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40010000 	.word	0x40010000

08006a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d122      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d11b      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0202 	mvn.w	r2, #2
 8006a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa6b 	bl	8006f4e <HAL_TIM_IC_CaptureCallback>
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa5d 	bl	8006f3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fa6e 	bl	8006f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d122      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0204 	mvn.w	r2, #4
 8006ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa41 	bl	8006f4e <HAL_TIM_IC_CaptureCallback>
 8006acc:	e005      	b.n	8006ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa33 	bl	8006f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fa44 	bl	8006f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d122      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d11b      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0208 	mvn.w	r2, #8
 8006b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa17 	bl	8006f4e <HAL_TIM_IC_CaptureCallback>
 8006b20:	e005      	b.n	8006b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa09 	bl	8006f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa1a 	bl	8006f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d122      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d11b      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0210 	mvn.w	r2, #16
 8006b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9ed 	bl	8006f4e <HAL_TIM_IC_CaptureCallback>
 8006b74:	e005      	b.n	8006b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9df 	bl	8006f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f9f0 	bl	8006f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10e      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d107      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0201 	mvn.w	r2, #1
 8006bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fb feb8 	bl	8002924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	d10e      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bcc:	2b80      	cmp	r3, #128	; 0x80
 8006bce:	d107      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fd1a 	bl	8007614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d10e      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d107      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9b5 	bl	8006f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d10e      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d107      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0220 	mvn.w	r2, #32
 8006c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fce4 	bl	8007600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0b4      	b.n	8006dc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2202      	movs	r2, #2
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b0c      	cmp	r3, #12
 8006c6e:	f200 809f 	bhi.w	8006db0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006cad 	.word	0x08006cad
 8006c7c:	08006db1 	.word	0x08006db1
 8006c80:	08006db1 	.word	0x08006db1
 8006c84:	08006db1 	.word	0x08006db1
 8006c88:	08006ced 	.word	0x08006ced
 8006c8c:	08006db1 	.word	0x08006db1
 8006c90:	08006db1 	.word	0x08006db1
 8006c94:	08006db1 	.word	0x08006db1
 8006c98:	08006d2f 	.word	0x08006d2f
 8006c9c:	08006db1 	.word	0x08006db1
 8006ca0:	08006db1 	.word	0x08006db1
 8006ca4:	08006db1 	.word	0x08006db1
 8006ca8:	08006d6f 	.word	0x08006d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f9ea 	bl	800708c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0208 	orr.w	r2, r2, #8
 8006cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0204 	bic.w	r2, r2, #4
 8006cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6999      	ldr	r1, [r3, #24]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	619a      	str	r2, [r3, #24]
      break;
 8006cea:	e062      	b.n	8006db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fa30 	bl	8007158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6999      	ldr	r1, [r3, #24]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	021a      	lsls	r2, r3, #8
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	619a      	str	r2, [r3, #24]
      break;
 8006d2c:	e041      	b.n	8006db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fa7b 	bl	8007230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0208 	orr.w	r2, r2, #8
 8006d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69da      	ldr	r2, [r3, #28]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0204 	bic.w	r2, r2, #4
 8006d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69d9      	ldr	r1, [r3, #28]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	61da      	str	r2, [r3, #28]
      break;
 8006d6c:	e021      	b.n	8006db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fac5 	bl	8007304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69d9      	ldr	r1, [r3, #28]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	021a      	lsls	r2, r3, #8
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	61da      	str	r2, [r3, #28]
      break;
 8006dae:	e000      	b.n	8006db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006db0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_TIM_ConfigClockSource+0x18>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e0a6      	b.n	8006f32 <HAL_TIM_ConfigClockSource+0x166>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d067      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x120>
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d80b      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x6c>
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d073      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x140>
 8006e24:	2b10      	cmp	r3, #16
 8006e26:	d802      	bhi.n	8006e2e <HAL_TIM_ConfigClockSource+0x62>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d06f      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e2c:	e078      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d06c      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x140>
 8006e32:	2b30      	cmp	r3, #48	; 0x30
 8006e34:	d06a      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006e36:	e073      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e38:	2b70      	cmp	r3, #112	; 0x70
 8006e3a:	d00d      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0x8c>
 8006e3c:	2b70      	cmp	r3, #112	; 0x70
 8006e3e:	d804      	bhi.n	8006e4a <HAL_TIM_ConfigClockSource+0x7e>
 8006e40:	2b50      	cmp	r3, #80	; 0x50
 8006e42:	d033      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0xe0>
 8006e44:	2b60      	cmp	r3, #96	; 0x60
 8006e46:	d041      	beq.n	8006ecc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e48:	e06a      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	d066      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x152>
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e54:	d017      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e56:	e063      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f000 fb16 	bl	8007498 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
      break;
 8006e84:	e04c      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6899      	ldr	r1, [r3, #8]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f000 faff 	bl	8007498 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ea8:	609a      	str	r2, [r3, #8]
      break;
 8006eaa:	e039      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f000 fa73 	bl	80073a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2150      	movs	r1, #80	; 0x50
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 facc 	bl	8007462 <TIM_ITRx_SetConfig>
      break;
 8006eca:	e029      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f000 fa92 	bl	8007402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2160      	movs	r1, #96	; 0x60
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fabc 	bl	8007462 <TIM_ITRx_SetConfig>
      break;
 8006eea:	e019      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f000 fa53 	bl	80073a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2140      	movs	r1, #64	; 0x40
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 faac 	bl	8007462 <TIM_ITRx_SetConfig>
      break;
 8006f0a:	e009      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f000 faa3 	bl	8007462 <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e000      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a34      	ldr	r2, [pc, #208]	; (8007070 <TIM_Base_SetConfig+0xe4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006faa:	d00b      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a31      	ldr	r2, [pc, #196]	; (8007074 <TIM_Base_SetConfig+0xe8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a30      	ldr	r2, [pc, #192]	; (8007078 <TIM_Base_SetConfig+0xec>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0xf0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <TIM_Base_SetConfig+0xe4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01b      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe4:	d017      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	; (8007074 <TIM_Base_SetConfig+0xe8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <TIM_Base_SetConfig+0xec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00f      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a20      	ldr	r2, [pc, #128]	; (800707c <TIM_Base_SetConfig+0xf0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <TIM_Base_SetConfig+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <TIM_Base_SetConfig+0xf8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <TIM_Base_SetConfig+0xfc>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d108      	bne.n	8007028 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <TIM_Base_SetConfig+0xe4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40014000 	.word	0x40014000
 8007084:	40014400 	.word	0x40014400
 8007088:	40014800 	.word	0x40014800

0800708c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 0302 	bic.w	r3, r3, #2
 80070d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <TIM_OC1_SetConfig+0xc8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d10c      	bne.n	8007102 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0308 	bic.w	r3, r3, #8
 80070ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0304 	bic.w	r3, r3, #4
 8007100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a13      	ldr	r2, [pc, #76]	; (8007154 <TIM_OC1_SetConfig+0xc8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d111      	bne.n	800712e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40010000 	.word	0x40010000

08007158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f023 0210 	bic.w	r2, r3, #16
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0320 	bic.w	r3, r3, #32
 80071a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a1e      	ldr	r2, [pc, #120]	; (800722c <TIM_OC2_SetConfig+0xd4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d10d      	bne.n	80071d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a15      	ldr	r2, [pc, #84]	; (800722c <TIM_OC2_SetConfig+0xd4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d113      	bne.n	8007204 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	621a      	str	r2, [r3, #32]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40010000 	.word	0x40010000

08007230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a1d      	ldr	r2, [pc, #116]	; (8007300 <TIM_OC3_SetConfig+0xd0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d10d      	bne.n	80072aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a14      	ldr	r2, [pc, #80]	; (8007300 <TIM_OC3_SetConfig+0xd0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d113      	bne.n	80072da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	621a      	str	r2, [r3, #32]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40010000 	.word	0x40010000

08007304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800734e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	031b      	lsls	r3, r3, #12
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a10      	ldr	r2, [pc, #64]	; (80073a0 <TIM_OC4_SetConfig+0x9c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d109      	bne.n	8007378 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800736a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	019b      	lsls	r3, r3, #6
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40010000 	.word	0x40010000

080073a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 030a 	bic.w	r3, r3, #10
 80073e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007402:	b480      	push	{r7}
 8007404:	b087      	sub	sp, #28
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0210 	bic.w	r2, r3, #16
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800742c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	031b      	lsls	r3, r3, #12
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800743e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4313      	orrs	r3, r2
 8007480:	f043 0307 	orr.w	r3, r3, #7
 8007484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	609a      	str	r2, [r3, #8]
}
 800748c:	bf00      	nop
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	021a      	lsls	r2, r3, #8
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4313      	orrs	r3, r2
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	609a      	str	r2, [r3, #8]
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	2201      	movs	r2, #1
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	43db      	mvns	r3, r3
 80074fa:	401a      	ands	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	fa01 f303 	lsl.w	r3, r1, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007538:	2302      	movs	r3, #2
 800753a:	e050      	b.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d018      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d013      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a18      	ldr	r2, [pc, #96]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d009      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a15      	ldr	r2, [pc, #84]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a13      	ldr	r2, [pc, #76]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d10c      	bne.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40014000 	.word	0x40014000

08007600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e03f      	b.n	80076ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fd f878 	bl	8004744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2224      	movs	r2, #36	; 0x24
 8007658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800766a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f90b 	bl	8007888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b088      	sub	sp, #32
 80076c6:	af02      	add	r7, sp, #8
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b20      	cmp	r3, #32
 80076e0:	f040 8083 	bne.w	80077ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_UART_Transmit+0x2e>
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e07b      	b.n	80077ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_UART_Transmit+0x40>
 80076fe:	2302      	movs	r3, #2
 8007700:	e074      	b.n	80077ec <HAL_UART_Transmit+0x12a>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2221      	movs	r2, #33	; 0x21
 8007714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007718:	f7fd f8bc 	bl	8004894 <HAL_GetTick>
 800771c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	88fa      	ldrh	r2, [r7, #6]
 8007728:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007732:	e042      	b.n	80077ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774a:	d122      	bne.n	8007792 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2200      	movs	r2, #0
 8007754:	2180      	movs	r1, #128	; 0x80
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f84c 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e042      	b.n	80077ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007778:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	3302      	adds	r3, #2
 8007786:	60bb      	str	r3, [r7, #8]
 8007788:	e017      	b.n	80077ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3301      	adds	r3, #1
 800778e:	60bb      	str	r3, [r7, #8]
 8007790:	e013      	b.n	80077ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2200      	movs	r2, #0
 800779a:	2180      	movs	r1, #128	; 0x80
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f829 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e01f      	b.n	80077ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	60ba      	str	r2, [r7, #8]
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1b7      	bne.n	8007734 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2200      	movs	r2, #0
 80077cc:	2140      	movs	r1, #64	; 0x40
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f810 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e006      	b.n	80077ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e000      	b.n	80077ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80077ea:	2302      	movs	r3, #2
  }
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007804:	e02c      	b.n	8007860 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d028      	beq.n	8007860 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <UART_WaitOnFlagUntilTimeout+0x30>
 8007814:	f7fd f83e 	bl	8004894 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	429a      	cmp	r2, r3
 8007822:	d21d      	bcs.n	8007860 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007832:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695a      	ldr	r2, [r3, #20]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0201 	bic.w	r2, r2, #1
 8007842:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e00f      	b.n	8007880 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	4013      	ands	r3, r2
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	429a      	cmp	r2, r3
 800787c:	d0c3      	beq.n	8007806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80078ca:	f023 030c 	bic.w	r3, r3, #12
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	430b      	orrs	r3, r1
 80078d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f6:	f040 818b 	bne.w	8007c10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4ac1      	ldr	r2, [pc, #772]	; (8007c04 <UART_SetConfig+0x37c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d005      	beq.n	8007910 <UART_SetConfig+0x88>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4abf      	ldr	r2, [pc, #764]	; (8007c08 <UART_SetConfig+0x380>)
 800790a:	4293      	cmp	r3, r2
 800790c:	f040 80bd 	bne.w	8007a8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fe ff46 	bl	80067a0 <HAL_RCC_GetPCLK2Freq>
 8007914:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	461d      	mov	r5, r3
 800791a:	f04f 0600 	mov.w	r6, #0
 800791e:	46a8      	mov	r8, r5
 8007920:	46b1      	mov	r9, r6
 8007922:	eb18 0308 	adds.w	r3, r8, r8
 8007926:	eb49 0409 	adc.w	r4, r9, r9
 800792a:	4698      	mov	r8, r3
 800792c:	46a1      	mov	r9, r4
 800792e:	eb18 0805 	adds.w	r8, r8, r5
 8007932:	eb49 0906 	adc.w	r9, r9, r6
 8007936:	f04f 0100 	mov.w	r1, #0
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007942:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007946:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800794a:	4688      	mov	r8, r1
 800794c:	4691      	mov	r9, r2
 800794e:	eb18 0005 	adds.w	r0, r8, r5
 8007952:	eb49 0106 	adc.w	r1, r9, r6
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	461d      	mov	r5, r3
 800795c:	f04f 0600 	mov.w	r6, #0
 8007960:	196b      	adds	r3, r5, r5
 8007962:	eb46 0406 	adc.w	r4, r6, r6
 8007966:	461a      	mov	r2, r3
 8007968:	4623      	mov	r3, r4
 800796a:	f7f9 f8f5 	bl	8000b58 <__aeabi_uldivmod>
 800796e:	4603      	mov	r3, r0
 8007970:	460c      	mov	r4, r1
 8007972:	461a      	mov	r2, r3
 8007974:	4ba5      	ldr	r3, [pc, #660]	; (8007c0c <UART_SetConfig+0x384>)
 8007976:	fba3 2302 	umull	r2, r3, r3, r2
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	461d      	mov	r5, r3
 8007984:	f04f 0600 	mov.w	r6, #0
 8007988:	46a9      	mov	r9, r5
 800798a:	46b2      	mov	sl, r6
 800798c:	eb19 0309 	adds.w	r3, r9, r9
 8007990:	eb4a 040a 	adc.w	r4, sl, sl
 8007994:	4699      	mov	r9, r3
 8007996:	46a2      	mov	sl, r4
 8007998:	eb19 0905 	adds.w	r9, r9, r5
 800799c:	eb4a 0a06 	adc.w	sl, sl, r6
 80079a0:	f04f 0100 	mov.w	r1, #0
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079b4:	4689      	mov	r9, r1
 80079b6:	4692      	mov	sl, r2
 80079b8:	eb19 0005 	adds.w	r0, r9, r5
 80079bc:	eb4a 0106 	adc.w	r1, sl, r6
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	461d      	mov	r5, r3
 80079c6:	f04f 0600 	mov.w	r6, #0
 80079ca:	196b      	adds	r3, r5, r5
 80079cc:	eb46 0406 	adc.w	r4, r6, r6
 80079d0:	461a      	mov	r2, r3
 80079d2:	4623      	mov	r3, r4
 80079d4:	f7f9 f8c0 	bl	8000b58 <__aeabi_uldivmod>
 80079d8:	4603      	mov	r3, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	461a      	mov	r2, r3
 80079de:	4b8b      	ldr	r3, [pc, #556]	; (8007c0c <UART_SetConfig+0x384>)
 80079e0:	fba3 1302 	umull	r1, r3, r3, r2
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	2164      	movs	r1, #100	; 0x64
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	3332      	adds	r3, #50	; 0x32
 80079f2:	4a86      	ldr	r2, [pc, #536]	; (8007c0c <UART_SetConfig+0x384>)
 80079f4:	fba2 2303 	umull	r2, r3, r2, r3
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a00:	4498      	add	r8, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	461d      	mov	r5, r3
 8007a06:	f04f 0600 	mov.w	r6, #0
 8007a0a:	46a9      	mov	r9, r5
 8007a0c:	46b2      	mov	sl, r6
 8007a0e:	eb19 0309 	adds.w	r3, r9, r9
 8007a12:	eb4a 040a 	adc.w	r4, sl, sl
 8007a16:	4699      	mov	r9, r3
 8007a18:	46a2      	mov	sl, r4
 8007a1a:	eb19 0905 	adds.w	r9, r9, r5
 8007a1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a36:	4689      	mov	r9, r1
 8007a38:	4692      	mov	sl, r2
 8007a3a:	eb19 0005 	adds.w	r0, r9, r5
 8007a3e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	461d      	mov	r5, r3
 8007a48:	f04f 0600 	mov.w	r6, #0
 8007a4c:	196b      	adds	r3, r5, r5
 8007a4e:	eb46 0406 	adc.w	r4, r6, r6
 8007a52:	461a      	mov	r2, r3
 8007a54:	4623      	mov	r3, r4
 8007a56:	f7f9 f87f 	bl	8000b58 <__aeabi_uldivmod>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b6a      	ldr	r3, [pc, #424]	; (8007c0c <UART_SetConfig+0x384>)
 8007a62:	fba3 1302 	umull	r1, r3, r3, r2
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	2164      	movs	r1, #100	; 0x64
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	3332      	adds	r3, #50	; 0x32
 8007a74:	4a65      	ldr	r2, [pc, #404]	; (8007c0c <UART_SetConfig+0x384>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	f003 0207 	and.w	r2, r3, #7
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4442      	add	r2, r8
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	e26f      	b.n	8007f6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a8a:	f7fe fe75 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8007a8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	461d      	mov	r5, r3
 8007a94:	f04f 0600 	mov.w	r6, #0
 8007a98:	46a8      	mov	r8, r5
 8007a9a:	46b1      	mov	r9, r6
 8007a9c:	eb18 0308 	adds.w	r3, r8, r8
 8007aa0:	eb49 0409 	adc.w	r4, r9, r9
 8007aa4:	4698      	mov	r8, r3
 8007aa6:	46a1      	mov	r9, r4
 8007aa8:	eb18 0805 	adds.w	r8, r8, r5
 8007aac:	eb49 0906 	adc.w	r9, r9, r6
 8007ab0:	f04f 0100 	mov.w	r1, #0
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007abc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ac0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ac4:	4688      	mov	r8, r1
 8007ac6:	4691      	mov	r9, r2
 8007ac8:	eb18 0005 	adds.w	r0, r8, r5
 8007acc:	eb49 0106 	adc.w	r1, r9, r6
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	f04f 0600 	mov.w	r6, #0
 8007ada:	196b      	adds	r3, r5, r5
 8007adc:	eb46 0406 	adc.w	r4, r6, r6
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	f7f9 f838 	bl	8000b58 <__aeabi_uldivmod>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	461a      	mov	r2, r3
 8007aee:	4b47      	ldr	r3, [pc, #284]	; (8007c0c <UART_SetConfig+0x384>)
 8007af0:	fba3 2302 	umull	r2, r3, r3, r2
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	461d      	mov	r5, r3
 8007afe:	f04f 0600 	mov.w	r6, #0
 8007b02:	46a9      	mov	r9, r5
 8007b04:	46b2      	mov	sl, r6
 8007b06:	eb19 0309 	adds.w	r3, r9, r9
 8007b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8007b0e:	4699      	mov	r9, r3
 8007b10:	46a2      	mov	sl, r4
 8007b12:	eb19 0905 	adds.w	r9, r9, r5
 8007b16:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b1a:	f04f 0100 	mov.w	r1, #0
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b2e:	4689      	mov	r9, r1
 8007b30:	4692      	mov	sl, r2
 8007b32:	eb19 0005 	adds.w	r0, r9, r5
 8007b36:	eb4a 0106 	adc.w	r1, sl, r6
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	461d      	mov	r5, r3
 8007b40:	f04f 0600 	mov.w	r6, #0
 8007b44:	196b      	adds	r3, r5, r5
 8007b46:	eb46 0406 	adc.w	r4, r6, r6
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4623      	mov	r3, r4
 8007b4e:	f7f9 f803 	bl	8000b58 <__aeabi_uldivmod>
 8007b52:	4603      	mov	r3, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b2c      	ldr	r3, [pc, #176]	; (8007c0c <UART_SetConfig+0x384>)
 8007b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	2164      	movs	r1, #100	; 0x64
 8007b62:	fb01 f303 	mul.w	r3, r1, r3
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	3332      	adds	r3, #50	; 0x32
 8007b6c:	4a27      	ldr	r2, [pc, #156]	; (8007c0c <UART_SetConfig+0x384>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b7a:	4498      	add	r8, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	461d      	mov	r5, r3
 8007b80:	f04f 0600 	mov.w	r6, #0
 8007b84:	46a9      	mov	r9, r5
 8007b86:	46b2      	mov	sl, r6
 8007b88:	eb19 0309 	adds.w	r3, r9, r9
 8007b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8007b90:	4699      	mov	r9, r3
 8007b92:	46a2      	mov	sl, r4
 8007b94:	eb19 0905 	adds.w	r9, r9, r5
 8007b98:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b9c:	f04f 0100 	mov.w	r1, #0
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	4692      	mov	sl, r2
 8007bb4:	eb19 0005 	adds.w	r0, r9, r5
 8007bb8:	eb4a 0106 	adc.w	r1, sl, r6
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	461d      	mov	r5, r3
 8007bc2:	f04f 0600 	mov.w	r6, #0
 8007bc6:	196b      	adds	r3, r5, r5
 8007bc8:	eb46 0406 	adc.w	r4, r6, r6
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4623      	mov	r3, r4
 8007bd0:	f7f8 ffc2 	bl	8000b58 <__aeabi_uldivmod>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <UART_SetConfig+0x384>)
 8007bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	2164      	movs	r1, #100	; 0x64
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	3332      	adds	r3, #50	; 0x32
 8007bee:	4a07      	ldr	r2, [pc, #28]	; (8007c0c <UART_SetConfig+0x384>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	f003 0207 	and.w	r2, r3, #7
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4442      	add	r2, r8
 8007c00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c02:	e1b2      	b.n	8007f6a <UART_SetConfig+0x6e2>
 8007c04:	40011000 	.word	0x40011000
 8007c08:	40011400 	.word	0x40011400
 8007c0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4ad7      	ldr	r2, [pc, #860]	; (8007f74 <UART_SetConfig+0x6ec>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d005      	beq.n	8007c26 <UART_SetConfig+0x39e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4ad6      	ldr	r2, [pc, #856]	; (8007f78 <UART_SetConfig+0x6f0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	f040 80d1 	bne.w	8007dc8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c26:	f7fe fdbb 	bl	80067a0 <HAL_RCC_GetPCLK2Freq>
 8007c2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	469a      	mov	sl, r3
 8007c30:	f04f 0b00 	mov.w	fp, #0
 8007c34:	46d0      	mov	r8, sl
 8007c36:	46d9      	mov	r9, fp
 8007c38:	eb18 0308 	adds.w	r3, r8, r8
 8007c3c:	eb49 0409 	adc.w	r4, r9, r9
 8007c40:	4698      	mov	r8, r3
 8007c42:	46a1      	mov	r9, r4
 8007c44:	eb18 080a 	adds.w	r8, r8, sl
 8007c48:	eb49 090b 	adc.w	r9, r9, fp
 8007c4c:	f04f 0100 	mov.w	r1, #0
 8007c50:	f04f 0200 	mov.w	r2, #0
 8007c54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c60:	4688      	mov	r8, r1
 8007c62:	4691      	mov	r9, r2
 8007c64:	eb1a 0508 	adds.w	r5, sl, r8
 8007c68:	eb4b 0609 	adc.w	r6, fp, r9
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	f04f 0400 	mov.w	r4, #0
 8007c7e:	0094      	lsls	r4, r2, #2
 8007c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c84:	008b      	lsls	r3, r1, #2
 8007c86:	461a      	mov	r2, r3
 8007c88:	4623      	mov	r3, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	f7f8 ff63 	bl	8000b58 <__aeabi_uldivmod>
 8007c92:	4603      	mov	r3, r0
 8007c94:	460c      	mov	r4, r1
 8007c96:	461a      	mov	r2, r3
 8007c98:	4bb8      	ldr	r3, [pc, #736]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	469b      	mov	fp, r3
 8007ca8:	f04f 0c00 	mov.w	ip, #0
 8007cac:	46d9      	mov	r9, fp
 8007cae:	46e2      	mov	sl, ip
 8007cb0:	eb19 0309 	adds.w	r3, r9, r9
 8007cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8007cb8:	4699      	mov	r9, r3
 8007cba:	46a2      	mov	sl, r4
 8007cbc:	eb19 090b 	adds.w	r9, r9, fp
 8007cc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cc4:	f04f 0100 	mov.w	r1, #0
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cd8:	4689      	mov	r9, r1
 8007cda:	4692      	mov	sl, r2
 8007cdc:	eb1b 0509 	adds.w	r5, fp, r9
 8007ce0:	eb4c 060a 	adc.w	r6, ip, sl
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	f04f 0400 	mov.w	r4, #0
 8007cf6:	0094      	lsls	r4, r2, #2
 8007cf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cfc:	008b      	lsls	r3, r1, #2
 8007cfe:	461a      	mov	r2, r3
 8007d00:	4623      	mov	r3, r4
 8007d02:	4628      	mov	r0, r5
 8007d04:	4631      	mov	r1, r6
 8007d06:	f7f8 ff27 	bl	8000b58 <__aeabi_uldivmod>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4b9a      	ldr	r3, [pc, #616]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007d12:	fba3 1302 	umull	r1, r3, r3, r2
 8007d16:	095b      	lsrs	r3, r3, #5
 8007d18:	2164      	movs	r1, #100	; 0x64
 8007d1a:	fb01 f303 	mul.w	r3, r1, r3
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	011b      	lsls	r3, r3, #4
 8007d22:	3332      	adds	r3, #50	; 0x32
 8007d24:	4a95      	ldr	r2, [pc, #596]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d30:	4498      	add	r8, r3
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	469b      	mov	fp, r3
 8007d36:	f04f 0c00 	mov.w	ip, #0
 8007d3a:	46d9      	mov	r9, fp
 8007d3c:	46e2      	mov	sl, ip
 8007d3e:	eb19 0309 	adds.w	r3, r9, r9
 8007d42:	eb4a 040a 	adc.w	r4, sl, sl
 8007d46:	4699      	mov	r9, r3
 8007d48:	46a2      	mov	sl, r4
 8007d4a:	eb19 090b 	adds.w	r9, r9, fp
 8007d4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d52:	f04f 0100 	mov.w	r1, #0
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d66:	4689      	mov	r9, r1
 8007d68:	4692      	mov	sl, r2
 8007d6a:	eb1b 0509 	adds.w	r5, fp, r9
 8007d6e:	eb4c 060a 	adc.w	r6, ip, sl
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	4619      	mov	r1, r3
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	0094      	lsls	r4, r2, #2
 8007d86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d8a:	008b      	lsls	r3, r1, #2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4623      	mov	r3, r4
 8007d90:	4628      	mov	r0, r5
 8007d92:	4631      	mov	r1, r6
 8007d94:	f7f8 fee0 	bl	8000b58 <__aeabi_uldivmod>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4b77      	ldr	r3, [pc, #476]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007da0:	fba3 1302 	umull	r1, r3, r3, r2
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	2164      	movs	r1, #100	; 0x64
 8007da8:	fb01 f303 	mul.w	r3, r1, r3
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	3332      	adds	r3, #50	; 0x32
 8007db2:	4a72      	ldr	r2, [pc, #456]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007db4:	fba2 2303 	umull	r2, r3, r2, r3
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f003 020f 	and.w	r2, r3, #15
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4442      	add	r2, r8
 8007dc4:	609a      	str	r2, [r3, #8]
 8007dc6:	e0d0      	b.n	8007f6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dc8:	f7fe fcd6 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8007dcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	469a      	mov	sl, r3
 8007dd2:	f04f 0b00 	mov.w	fp, #0
 8007dd6:	46d0      	mov	r8, sl
 8007dd8:	46d9      	mov	r9, fp
 8007dda:	eb18 0308 	adds.w	r3, r8, r8
 8007dde:	eb49 0409 	adc.w	r4, r9, r9
 8007de2:	4698      	mov	r8, r3
 8007de4:	46a1      	mov	r9, r4
 8007de6:	eb18 080a 	adds.w	r8, r8, sl
 8007dea:	eb49 090b 	adc.w	r9, r9, fp
 8007dee:	f04f 0100 	mov.w	r1, #0
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007dfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007dfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e02:	4688      	mov	r8, r1
 8007e04:	4691      	mov	r9, r2
 8007e06:	eb1a 0508 	adds.w	r5, sl, r8
 8007e0a:	eb4b 0609 	adc.w	r6, fp, r9
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4619      	mov	r1, r3
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	f04f 0400 	mov.w	r4, #0
 8007e20:	0094      	lsls	r4, r2, #2
 8007e22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e26:	008b      	lsls	r3, r1, #2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	4631      	mov	r1, r6
 8007e30:	f7f8 fe92 	bl	8000b58 <__aeabi_uldivmod>
 8007e34:	4603      	mov	r3, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4b50      	ldr	r3, [pc, #320]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	469b      	mov	fp, r3
 8007e4a:	f04f 0c00 	mov.w	ip, #0
 8007e4e:	46d9      	mov	r9, fp
 8007e50:	46e2      	mov	sl, ip
 8007e52:	eb19 0309 	adds.w	r3, r9, r9
 8007e56:	eb4a 040a 	adc.w	r4, sl, sl
 8007e5a:	4699      	mov	r9, r3
 8007e5c:	46a2      	mov	sl, r4
 8007e5e:	eb19 090b 	adds.w	r9, r9, fp
 8007e62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e66:	f04f 0100 	mov.w	r1, #0
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	4692      	mov	sl, r2
 8007e7e:	eb1b 0509 	adds.w	r5, fp, r9
 8007e82:	eb4c 060a 	adc.w	r6, ip, sl
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	f04f 0400 	mov.w	r4, #0
 8007e98:	0094      	lsls	r4, r2, #2
 8007e9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e9e:	008b      	lsls	r3, r1, #2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	f7f8 fe56 	bl	8000b58 <__aeabi_uldivmod>
 8007eac:	4603      	mov	r3, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b32      	ldr	r3, [pc, #200]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	2164      	movs	r1, #100	; 0x64
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	3332      	adds	r3, #50	; 0x32
 8007ec6:	4a2d      	ldr	r2, [pc, #180]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ed2:	4498      	add	r8, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	469b      	mov	fp, r3
 8007ed8:	f04f 0c00 	mov.w	ip, #0
 8007edc:	46d9      	mov	r9, fp
 8007ede:	46e2      	mov	sl, ip
 8007ee0:	eb19 0309 	adds.w	r3, r9, r9
 8007ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ee8:	4699      	mov	r9, r3
 8007eea:	46a2      	mov	sl, r4
 8007eec:	eb19 090b 	adds.w	r9, r9, fp
 8007ef0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ef4:	f04f 0100 	mov.w	r1, #0
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f08:	4689      	mov	r9, r1
 8007f0a:	4692      	mov	sl, r2
 8007f0c:	eb1b 0509 	adds.w	r5, fp, r9
 8007f10:	eb4c 060a 	adc.w	r6, ip, sl
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	f04f 0400 	mov.w	r4, #0
 8007f26:	0094      	lsls	r4, r2, #2
 8007f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f2c:	008b      	lsls	r3, r1, #2
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4623      	mov	r3, r4
 8007f32:	4628      	mov	r0, r5
 8007f34:	4631      	mov	r1, r6
 8007f36:	f7f8 fe0f 	bl	8000b58 <__aeabi_uldivmod>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007f42:	fba3 1302 	umull	r1, r3, r3, r2
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	2164      	movs	r1, #100	; 0x64
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	3332      	adds	r3, #50	; 0x32
 8007f54:	4a09      	ldr	r2, [pc, #36]	; (8007f7c <UART_SetConfig+0x6f4>)
 8007f56:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	f003 020f 	and.w	r2, r3, #15
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4442      	add	r2, r8
 8007f66:	609a      	str	r2, [r3, #8]
}
 8007f68:	e7ff      	b.n	8007f6a <UART_SetConfig+0x6e2>
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	40011000 	.word	0x40011000
 8007f78:	40011400 	.word	0x40011400
 8007f7c:	51eb851f 	.word	0x51eb851f

08007f80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f96:	f3ef 8305 	mrs	r3, IPSR
 8007f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10f      	bne.n	8007fc2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fae:	f3ef 8311 	mrs	r3, BASEPRI
 8007fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <osKernelInitialize+0x3a>
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <osKernelInitialize+0x64>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d103      	bne.n	8007fca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007fc2:	f06f 0305 	mvn.w	r3, #5
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	e00c      	b.n	8007fe4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fca:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <osKernelInitialize+0x64>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fd2:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <osKernelInitialize+0x64>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	e002      	b.n	8007fe4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20000200 	.word	0x20000200

08007ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffe:	f3ef 8305 	mrs	r3, IPSR
 8008002:	60bb      	str	r3, [r7, #8]
  return(result);
 8008004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10f      	bne.n	800802a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800a:	f3ef 8310 	mrs	r3, PRIMASK
 800800e:	607b      	str	r3, [r7, #4]
  return(result);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d105      	bne.n	8008022 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008016:	f3ef 8311 	mrs	r3, BASEPRI
 800801a:	603b      	str	r3, [r7, #0]
  return(result);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <osKernelStart+0x3a>
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <osKernelStart+0x68>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d103      	bne.n	8008032 <osKernelStart+0x3a>
    stat = osErrorISR;
 800802a:	f06f 0305 	mvn.w	r3, #5
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e010      	b.n	8008054 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <osKernelStart+0x68>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d109      	bne.n	800804e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800803a:	f7ff ffa1 	bl	8007f80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800803e:	4b08      	ldr	r3, [pc, #32]	; (8008060 <osKernelStart+0x68>)
 8008040:	2202      	movs	r2, #2
 8008042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008044:	f002 fa28 	bl	800a498 <vTaskStartScheduler>
      stat = osOK;
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e002      	b.n	8008054 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800804e:	f04f 33ff 	mov.w	r3, #4294967295
 8008052:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008054:	68fb      	ldr	r3, [r7, #12]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000200 	.word	0x20000200

08008064 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 8008064:	b480      	push	{r7}
 8008066:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8008068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800806c:	4618      	mov	r0, r3
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b090      	sub	sp, #64	; 0x40
 800807c:	af04      	add	r7, sp, #16
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008088:	f3ef 8305 	mrs	r3, IPSR
 800808c:	61fb      	str	r3, [r7, #28]
  return(result);
 800808e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008090:	2b00      	cmp	r3, #0
 8008092:	f040 808f 	bne.w	80081b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008096:	f3ef 8310 	mrs	r3, PRIMASK
 800809a:	61bb      	str	r3, [r7, #24]
  return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d105      	bne.n	80080ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080a2:	f3ef 8311 	mrs	r3, BASEPRI
 80080a6:	617b      	str	r3, [r7, #20]
  return(result);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <osThreadNew+0x3e>
 80080ae:	4b44      	ldr	r3, [pc, #272]	; (80081c0 <osThreadNew+0x148>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d07e      	beq.n	80081b4 <osThreadNew+0x13c>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d07b      	beq.n	80081b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80080bc:	2380      	movs	r3, #128	; 0x80
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80080c0:	2318      	movs	r3, #24
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295
 80080cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d045      	beq.n	8008160 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <osThreadNew+0x6a>
        name = attr->name;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <osThreadNew+0x90>
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	2b38      	cmp	r3, #56	; 0x38
 80080fa:	d805      	bhi.n	8008108 <osThreadNew+0x90>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <osThreadNew+0x94>
        return (NULL);
 8008108:	2300      	movs	r3, #0
 800810a:	e054      	b.n	80081b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	089b      	lsrs	r3, r3, #2
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00e      	beq.n	8008142 <osThreadNew+0xca>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	2b5b      	cmp	r3, #91	; 0x5b
 800812a:	d90a      	bls.n	8008142 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <osThreadNew+0xca>
        mem = 1;
 800813c:	2301      	movs	r3, #1
 800813e:	623b      	str	r3, [r7, #32]
 8008140:	e010      	b.n	8008164 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10c      	bne.n	8008164 <osThreadNew+0xec>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d108      	bne.n	8008164 <osThreadNew+0xec>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <osThreadNew+0xec>
          mem = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	623b      	str	r3, [r7, #32]
 800815e:	e001      	b.n	8008164 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d110      	bne.n	800818c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008172:	9202      	str	r2, [sp, #8]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f001 ffb7 	bl	800a0f4 <xTaskCreateStatic>
 8008186:	4603      	mov	r3, r0
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	e013      	b.n	80081b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d110      	bne.n	80081b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	b29a      	uxth	r2, r3
 8008196:	f107 0310 	add.w	r3, r7, #16
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f001 ffff 	bl	800a1a8 <xTaskCreate>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d001      	beq.n	80081b4 <osThreadNew+0x13c>
          hTask = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081b4:	693b      	ldr	r3, [r7, #16]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3730      	adds	r7, #48	; 0x30
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000200 	.word	0x20000200

080081c4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <osThreadFlagsSet+0x1a>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	da03      	bge.n	80081e6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80081de:	f06f 0303 	mvn.w	r3, #3
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e046      	b.n	8008274 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ec:	f3ef 8305 	mrs	r3, IPSR
 80081f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80081f2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10f      	bne.n	8008218 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f8:	f3ef 8310 	mrs	r3, PRIMASK
 80081fc:	617b      	str	r3, [r7, #20]
  return(result);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008204:	f3ef 8311 	mrs	r3, BASEPRI
 8008208:	613b      	str	r3, [r7, #16]
  return(result);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d024      	beq.n	800825a <osThreadFlagsSet+0x96>
 8008210:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <osThreadFlagsSet+0xbc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d120      	bne.n	800825a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8008218:	2300      	movs	r3, #0
 800821a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800821c:	f107 0308 	add.w	r3, r7, #8
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	2201      	movs	r2, #1
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	69f8      	ldr	r0, [r7, #28]
 800822a:	f003 f80f 	bl	800b24c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800822e:	f107 020c 	add.w	r2, r7, #12
 8008232:	2300      	movs	r3, #0
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4613      	mov	r3, r2
 8008238:	2200      	movs	r2, #0
 800823a:	2100      	movs	r1, #0
 800823c:	69f8      	ldr	r0, [r7, #28]
 800823e:	f003 f805 	bl	800b24c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d015      	beq.n	8008274 <osThreadFlagsSet+0xb0>
 8008248:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <osThreadFlagsSet+0xc0>)
 800824a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	e00c      	b.n	8008274 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800825a:	2300      	movs	r3, #0
 800825c:	2201      	movs	r2, #1
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	69f8      	ldr	r0, [r7, #28]
 8008262:	f002 ff3f 	bl	800b0e4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008266:	f107 030c 	add.w	r3, r7, #12
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	69f8      	ldr	r0, [r7, #28]
 8008270:	f002 ff38 	bl	800b0e4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008274:	68fb      	ldr	r3, [r7, #12]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3720      	adds	r7, #32
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000200 	.word	0x20000200
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	; 0x38
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008294:	f3ef 8305 	mrs	r3, IPSR
 8008298:	61fb      	str	r3, [r7, #28]
  return(result);
 800829a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10f      	bne.n	80082c0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a0:	f3ef 8310 	mrs	r3, PRIMASK
 80082a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d105      	bne.n	80082b8 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082ac:	f3ef 8311 	mrs	r3, BASEPRI
 80082b0:	617b      	str	r3, [r7, #20]
  return(result);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d007      	beq.n	80082c8 <osThreadFlagsWait+0x40>
 80082b8:	4b3c      	ldr	r3, [pc, #240]	; (80083ac <osThreadFlagsWait+0x124>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d103      	bne.n	80082c8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80082c0:	f06f 0305 	mvn.w	r3, #5
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34
 80082c6:	e06b      	b.n	80083a0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	da03      	bge.n	80082d6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80082ce:	f06f 0303 	mvn.w	r3, #3
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
 80082d4:	e064      	b.n	80083a0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <osThreadFlagsWait+0x5e>
      clear = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	633b      	str	r3, [r7, #48]	; 0x30
 80082e4:	e001      	b.n	80082ea <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80082f2:	f002 f9df 	bl	800a6b4 <xTaskGetTickCount>
 80082f6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80082f8:	f107 0210 	add.w	r2, r7, #16
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008300:	2000      	movs	r0, #0
 8008302:	f002 fe95 	bl	800b030 <xTaskNotifyWait>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	2b01      	cmp	r3, #1
 800830c:	d137      	bne.n	800837e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800830e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4013      	ands	r3, r2
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800831a:	4313      	orrs	r3, r2
 800831c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	4013      	ands	r3, r2
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	429a      	cmp	r2, r3
 8008332:	d032      	beq.n	800839a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10f      	bne.n	800835a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800833a:	f06f 0302 	mvn.w	r3, #2
 800833e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8008340:	e02e      	b.n	80083a0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008346:	4013      	ands	r3, r2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d128      	bne.n	800839e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8008352:	f06f 0302 	mvn.w	r3, #2
 8008356:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8008358:	e022      	b.n	80083a0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800835a:	f002 f9ab 	bl	800a6b4 <xTaskGetTickCount>
 800835e:	4602      	mov	r2, r0
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8008366:	6a3a      	ldr	r2, [r7, #32]
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	429a      	cmp	r2, r3
 800836c:	d902      	bls.n	8008374 <osThreadFlagsWait+0xec>
          tout  = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008372:	e00e      	b.n	8008392 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8008374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800837c:	e009      	b.n	8008392 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d103      	bne.n	800838c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8008384:	f06f 0302 	mvn.w	r3, #2
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
 800838a:	e002      	b.n	8008392 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800838c:	f06f 0301 	mvn.w	r3, #1
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1af      	bne.n	80082f8 <osThreadFlagsWait+0x70>
 8008398:	e002      	b.n	80083a0 <osThreadFlagsWait+0x118>
            break;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <osThreadFlagsWait+0x118>
            break;
 800839e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3738      	adds	r7, #56	; 0x38
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000200 	.word	0x20000200

080083b0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b8:	f3ef 8305 	mrs	r3, IPSR
 80083bc:	613b      	str	r3, [r7, #16]
  return(result);
 80083be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10f      	bne.n	80083e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c4:	f3ef 8310 	mrs	r3, PRIMASK
 80083c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d105      	bne.n	80083dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083d0:	f3ef 8311 	mrs	r3, BASEPRI
 80083d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <osDelay+0x3c>
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <osDelay+0x58>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d103      	bne.n	80083ec <osDelay+0x3c>
    stat = osErrorISR;
 80083e4:	f06f 0305 	mvn.w	r3, #5
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e007      	b.n	80083fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f002 f81a 	bl	800a430 <vTaskDelay>
    }
  }

  return (stat);
 80083fc:	697b      	ldr	r3, [r7, #20]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000200 	.word	0x20000200

0800840c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f003 fc23 	bl	800bc60 <pvTimerGetTimerID>
 800841a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <TimerCallback+0x22>
    callb->func (callb->arg);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	6852      	ldr	r2, [r2, #4]
 800842a:	4610      	mov	r0, r2
 800842c:	4798      	blx	r3
  }
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b08e      	sub	sp, #56	; 0x38
 800843c:	af02      	add	r7, sp, #8
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	607a      	str	r2, [r7, #4]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	460b      	mov	r3, r1
 8008446:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800844c:	f3ef 8305 	mrs	r3, IPSR
 8008450:	61bb      	str	r3, [r7, #24]
  return(result);
 8008452:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008454:	2b00      	cmp	r3, #0
 8008456:	d16a      	bne.n	800852e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008458:	f3ef 8310 	mrs	r3, PRIMASK
 800845c:	617b      	str	r3, [r7, #20]
  return(result);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d105      	bne.n	8008470 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008464:	f3ef 8311 	mrs	r3, BASEPRI
 8008468:	613b      	str	r3, [r7, #16]
  return(result);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <osTimerNew+0x40>
 8008470:	4b31      	ldr	r3, [pc, #196]	; (8008538 <osTimerNew+0x100>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d05a      	beq.n	800852e <osTimerNew+0xf6>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d057      	beq.n	800852e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800847e:	2008      	movs	r0, #8
 8008480:	f003 fe4e 	bl	800c120 <pvPortMalloc>
 8008484:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d050      	beq.n	800852e <osTimerNew+0xf6>
      callb->func = func;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d102      	bne.n	80084a4 <osTimerNew+0x6c>
        reload = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
 80084a2:	e001      	b.n	80084a8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	623b      	str	r3, [r7, #32]
      name = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01c      	beq.n	80084f2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <osTimerNew+0x8e>
          name = attr->name;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d006      	beq.n	80084dc <osTimerNew+0xa4>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2b2b      	cmp	r3, #43	; 0x2b
 80084d4:	d902      	bls.n	80084dc <osTimerNew+0xa4>
          mem = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	623b      	str	r3, [r7, #32]
 80084da:	e00c      	b.n	80084f6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d108      	bne.n	80084f6 <osTimerNew+0xbe>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <osTimerNew+0xbe>
            mem = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	623b      	str	r3, [r7, #32]
 80084f0:	e001      	b.n	80084f6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d10c      	bne.n	8008516 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <osTimerNew+0x104>)
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	2101      	movs	r1, #1
 800850c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800850e:	f003 f832 	bl	800b576 <xTimerCreateStatic>
 8008512:	62b8      	str	r0, [r7, #40]	; 0x28
 8008514:	e00b      	b.n	800852e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d108      	bne.n	800852e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <osTimerNew+0x104>)
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	2101      	movs	r1, #1
 8008526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008528:	f003 f804 	bl	800b534 <xTimerCreate>
 800852c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008530:	4618      	mov	r0, r3
 8008532:	3730      	adds	r7, #48	; 0x30
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20000200 	.word	0x20000200
 800853c:	0800840d 	.word	0x0800840d

08008540 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	; 0x28
 8008544:	af02      	add	r7, sp, #8
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800854e:	f3ef 8305 	mrs	r3, IPSR
 8008552:	617b      	str	r3, [r7, #20]
  return(result);
 8008554:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10f      	bne.n	800857a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800855a:	f3ef 8310 	mrs	r3, PRIMASK
 800855e:	613b      	str	r3, [r7, #16]
  return(result);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d105      	bne.n	8008572 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008566:	f3ef 8311 	mrs	r3, BASEPRI
 800856a:	60fb      	str	r3, [r7, #12]
  return(result);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d007      	beq.n	8008582 <osTimerStart+0x42>
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <osTimerStart+0x7c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d103      	bne.n	8008582 <osTimerStart+0x42>
    stat = osErrorISR;
 800857a:	f06f 0305 	mvn.w	r3, #5
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	e017      	b.n	80085b2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d103      	bne.n	8008590 <osTimerStart+0x50>
    stat = osErrorParameter;
 8008588:	f06f 0303 	mvn.w	r3, #3
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	e010      	b.n	80085b2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008590:	2300      	movs	r3, #0
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	2104      	movs	r1, #4
 800859a:	69b8      	ldr	r0, [r7, #24]
 800859c:	f003 f862 	bl	800b664 <xTimerGenericCommand>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d102      	bne.n	80085ac <osTimerStart+0x6c>
      stat = osOK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	e002      	b.n	80085b2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80085ac:	f06f 0302 	mvn.w	r3, #2
 80085b0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80085b2:	69fb      	ldr	r3, [r7, #28]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20000200 	.word	0x20000200

080085c0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	; 0x28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085cc:	f3ef 8305 	mrs	r3, IPSR
 80085d0:	613b      	str	r3, [r7, #16]
  return(result);
 80085d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 8085 	bne.w	80086e4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085da:	f3ef 8310 	mrs	r3, PRIMASK
 80085de:	60fb      	str	r3, [r7, #12]
  return(result);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d105      	bne.n	80085f2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085e6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <osMutexNew+0x3a>
 80085f2:	4b3f      	ldr	r3, [pc, #252]	; (80086f0 <osMutexNew+0x130>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d074      	beq.n	80086e4 <osMutexNew+0x124>
    if (attr != NULL) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	623b      	str	r3, [r7, #32]
 8008606:	e001      	b.n	800860c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <osMutexNew+0x5c>
      rmtx = 1U;
 8008616:	2301      	movs	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	e001      	b.n	8008620 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d15c      	bne.n	80086e4 <osMutexNew+0x124>
      mem = -1;
 800862a:	f04f 33ff 	mov.w	r3, #4294967295
 800862e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d015      	beq.n	8008662 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d006      	beq.n	800864c <osMutexNew+0x8c>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b4f      	cmp	r3, #79	; 0x4f
 8008644:	d902      	bls.n	800864c <osMutexNew+0x8c>
          mem = 1;
 8008646:	2301      	movs	r3, #1
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	e00c      	b.n	8008666 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d108      	bne.n	8008666 <osMutexNew+0xa6>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <osMutexNew+0xa6>
            mem = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	e001      	b.n	8008666 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d112      	bne.n	8008692 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	4619      	mov	r1, r3
 8008678:	2004      	movs	r0, #4
 800867a:	f000 fe08 	bl	800928e <xQueueCreateMutexStatic>
 800867e:	6278      	str	r0, [r7, #36]	; 0x24
 8008680:	e016      	b.n	80086b0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	4619      	mov	r1, r3
 8008688:	2001      	movs	r0, #1
 800868a:	f000 fe00 	bl	800928e <xQueueCreateMutexStatic>
 800868e:	6278      	str	r0, [r7, #36]	; 0x24
 8008690:	e00e      	b.n	80086b0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10b      	bne.n	80086b0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d004      	beq.n	80086a8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800869e:	2004      	movs	r0, #4
 80086a0:	f000 fddd 	bl	800925e <xQueueCreateMutex>
 80086a4:	6278      	str	r0, [r7, #36]	; 0x24
 80086a6:	e003      	b.n	80086b0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80086a8:	2001      	movs	r0, #1
 80086aa:	f000 fdd8 	bl	800925e <xQueueCreateMutex>
 80086ae:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <osMutexNew+0x110>
        if (attr != NULL) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <osMutexNew+0x104>
          name = attr->name;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	e001      	b.n	80086c8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80086c8:	6979      	ldr	r1, [r7, #20]
 80086ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086cc:	f001 fc8c 	bl	8009fe8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d006      	beq.n	80086e4 <osMutexNew+0x124>
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3728      	adds	r7, #40	; 0x28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000200 	.word	0x20000200

080086f4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f023 0301 	bic.w	r3, r3, #1
 8008704:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008712:	f3ef 8305 	mrs	r3, IPSR
 8008716:	613b      	str	r3, [r7, #16]
  return(result);
 8008718:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800871e:	f3ef 8310 	mrs	r3, PRIMASK
 8008722:	60fb      	str	r3, [r7, #12]
  return(result);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800872a:	f3ef 8311 	mrs	r3, BASEPRI
 800872e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <osMutexAcquire+0x52>
 8008736:	4b1d      	ldr	r3, [pc, #116]	; (80087ac <osMutexAcquire+0xb8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d103      	bne.n	8008746 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800873e:	f06f 0305 	mvn.w	r3, #5
 8008742:	61fb      	str	r3, [r7, #28]
 8008744:	e02c      	b.n	80087a0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d103      	bne.n	8008754 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800874c:	f06f 0303 	mvn.w	r3, #3
 8008750:	61fb      	str	r3, [r7, #28]
 8008752:	e025      	b.n	80087a0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	69b8      	ldr	r0, [r7, #24]
 800875e:	f000 fde4 	bl	800932a <xQueueTakeMutexRecursive>
 8008762:	4603      	mov	r3, r0
 8008764:	2b01      	cmp	r3, #1
 8008766:	d01b      	beq.n	80087a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800876e:	f06f 0301 	mvn.w	r3, #1
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	e014      	b.n	80087a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008776:	f06f 0302 	mvn.w	r3, #2
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e010      	b.n	80087a0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	69b8      	ldr	r0, [r7, #24]
 8008782:	f001 f961 	bl	8009a48 <xQueueSemaphoreTake>
 8008786:	4603      	mov	r3, r0
 8008788:	2b01      	cmp	r3, #1
 800878a:	d009      	beq.n	80087a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008792:	f06f 0301 	mvn.w	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e002      	b.n	80087a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800879a:	f06f 0302 	mvn.w	r3, #2
 800879e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087a0:	69fb      	ldr	r3, [r7, #28]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000200 	.word	0x20000200

080087b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087cc:	f3ef 8305 	mrs	r3, IPSR
 80087d0:	613b      	str	r3, [r7, #16]
  return(result);
 80087d2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10f      	bne.n	80087f8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d8:	f3ef 8310 	mrs	r3, PRIMASK
 80087dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087e4:	f3ef 8311 	mrs	r3, BASEPRI
 80087e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <osMutexRelease+0x50>
 80087f0:	4b16      	ldr	r3, [pc, #88]	; (800884c <osMutexRelease+0x9c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d103      	bne.n	8008800 <osMutexRelease+0x50>
    stat = osErrorISR;
 80087f8:	f06f 0305 	mvn.w	r3, #5
 80087fc:	61fb      	str	r3, [r7, #28]
 80087fe:	e01f      	b.n	8008840 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008806:	f06f 0303 	mvn.w	r3, #3
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e018      	b.n	8008840 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008814:	69b8      	ldr	r0, [r7, #24]
 8008816:	f000 fd55 	bl	80092c4 <xQueueGiveMutexRecursive>
 800881a:	4603      	mov	r3, r0
 800881c:	2b01      	cmp	r3, #1
 800881e:	d00f      	beq.n	8008840 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008820:	f06f 0302 	mvn.w	r3, #2
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	e00b      	b.n	8008840 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008828:	2300      	movs	r3, #0
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f000 fe16 	bl	8009460 <xQueueGenericSend>
 8008834:	4603      	mov	r3, r0
 8008836:	2b01      	cmp	r3, #1
 8008838:	d002      	beq.n	8008840 <osMutexRelease+0x90>
        stat = osErrorResource;
 800883a:	f06f 0302 	mvn.w	r3, #2
 800883e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008840:	69fb      	ldr	r3, [r7, #28]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000200 	.word	0x20000200

08008850 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	; 0x30
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008860:	f3ef 8305 	mrs	r3, IPSR
 8008864:	61bb      	str	r3, [r7, #24]
  return(result);
 8008866:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 8087 	bne.w	800897c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886e:	f3ef 8310 	mrs	r3, PRIMASK
 8008872:	617b      	str	r3, [r7, #20]
  return(result);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800887a:	f3ef 8311 	mrs	r3, BASEPRI
 800887e:	613b      	str	r3, [r7, #16]
  return(result);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <osSemaphoreNew+0x3e>
 8008886:	4b40      	ldr	r3, [pc, #256]	; (8008988 <osSemaphoreNew+0x138>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d076      	beq.n	800897c <osSemaphoreNew+0x12c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d073      	beq.n	800897c <osSemaphoreNew+0x12c>
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	429a      	cmp	r2, r3
 800889a:	d86f      	bhi.n	800897c <osSemaphoreNew+0x12c>
    mem = -1;
 800889c:	f04f 33ff 	mov.w	r3, #4294967295
 80088a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d015      	beq.n	80088d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d006      	beq.n	80088be <osSemaphoreNew+0x6e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b4f      	cmp	r3, #79	; 0x4f
 80088b6:	d902      	bls.n	80088be <osSemaphoreNew+0x6e>
        mem = 1;
 80088b8:	2301      	movs	r3, #1
 80088ba:	623b      	str	r3, [r7, #32]
 80088bc:	e00c      	b.n	80088d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d108      	bne.n	80088d8 <osSemaphoreNew+0x88>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <osSemaphoreNew+0x88>
          mem = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	623b      	str	r3, [r7, #32]
 80088d2:	e001      	b.n	80088d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088de:	d04d      	beq.n	800897c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d129      	bne.n	800893a <osSemaphoreNew+0xea>
        if (mem == 1) {
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d10b      	bne.n	8008904 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	2303      	movs	r3, #3
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	2100      	movs	r1, #0
 80088fa:	2001      	movs	r0, #1
 80088fc:	f000 fbc0 	bl	8009080 <xQueueGenericCreateStatic>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24
 8008902:	e005      	b.n	8008910 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008904:	2203      	movs	r2, #3
 8008906:	2100      	movs	r1, #0
 8008908:	2001      	movs	r0, #1
 800890a:	f000 fc2c 	bl	8009166 <xQueueGenericCreate>
 800890e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d022      	beq.n	800895c <osSemaphoreNew+0x10c>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d01f      	beq.n	800895c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800891c:	2300      	movs	r3, #0
 800891e:	2200      	movs	r2, #0
 8008920:	2100      	movs	r1, #0
 8008922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008924:	f000 fd9c 	bl	8009460 <xQueueGenericSend>
 8008928:	4603      	mov	r3, r0
 800892a:	2b01      	cmp	r3, #1
 800892c:	d016      	beq.n	800895c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800892e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008930:	f001 fa0f 	bl	8009d52 <vQueueDelete>
            hSemaphore = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
 8008938:	e010      	b.n	800895c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d108      	bne.n	8008952 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	461a      	mov	r2, r3
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fd23 	bl	8009394 <xQueueCreateCountingSemaphoreStatic>
 800894e:	6278      	str	r0, [r7, #36]	; 0x24
 8008950:	e004      	b.n	800895c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fd52 	bl	80093fe <xQueueCreateCountingSemaphore>
 800895a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00c      	beq.n	800897c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <osSemaphoreNew+0x120>
          name = attr->name;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e001      	b.n	8008974 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8008970:	2300      	movs	r3, #0
 8008972:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008974:	69f9      	ldr	r1, [r7, #28]
 8008976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008978:	f001 fb36 	bl	8009fe8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800897e:	4618      	mov	r0, r3
 8008980:	3728      	adds	r7, #40	; 0x28
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000200 	.word	0x20000200

0800898c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80089a4:	f06f 0303 	mvn.w	r3, #3
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e04b      	b.n	8008a44 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ac:	f3ef 8305 	mrs	r3, IPSR
 80089b0:	617b      	str	r3, [r7, #20]
  return(result);
 80089b2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10f      	bne.n	80089d8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b8:	f3ef 8310 	mrs	r3, PRIMASK
 80089bc:	613b      	str	r3, [r7, #16]
  return(result);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d105      	bne.n	80089d0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089c4:	f3ef 8311 	mrs	r3, BASEPRI
 80089c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d026      	beq.n	8008a1e <osSemaphoreAcquire+0x92>
 80089d0:	4b1f      	ldr	r3, [pc, #124]	; (8008a50 <osSemaphoreAcquire+0xc4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d122      	bne.n	8008a1e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80089de:	f06f 0303 	mvn.w	r3, #3
 80089e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80089e4:	e02d      	b.n	8008a42 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	461a      	mov	r2, r3
 80089f0:	2100      	movs	r1, #0
 80089f2:	69b8      	ldr	r0, [r7, #24]
 80089f4:	f001 f930 	bl	8009c58 <xQueueReceiveFromISR>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d003      	beq.n	8008a06 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80089fe:	f06f 0302 	mvn.w	r3, #2
 8008a02:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a04:	e01d      	b.n	8008a42 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01a      	beq.n	8008a42 <osSemaphoreAcquire+0xb6>
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <osSemaphoreAcquire+0xc8>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008a1c:	e011      	b.n	8008a42 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	69b8      	ldr	r0, [r7, #24]
 8008a22:	f001 f811 	bl	8009a48 <xQueueSemaphoreTake>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d00b      	beq.n	8008a44 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008a32:	f06f 0301 	mvn.w	r3, #1
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	e004      	b.n	8008a44 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008a3a:	f06f 0302 	mvn.w	r3, #2
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	e000      	b.n	8008a44 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008a42:	bf00      	nop
      }
    }
  }

  return (stat);
 8008a44:	69fb      	ldr	r3, [r7, #28]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000200 	.word	0x20000200
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008a6e:	f06f 0303 	mvn.w	r3, #3
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	e03e      	b.n	8008af4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a76:	f3ef 8305 	mrs	r3, IPSR
 8008a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10f      	bne.n	8008aa2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a82:	f3ef 8310 	mrs	r3, PRIMASK
 8008a86:	613b      	str	r3, [r7, #16]
  return(result);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a92:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01e      	beq.n	8008ad8 <osSemaphoreRelease+0x80>
 8008a9a:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <osSemaphoreRelease+0xa8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d11a      	bne.n	8008ad8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4619      	mov	r1, r3
 8008aac:	69b8      	ldr	r0, [r7, #24]
 8008aae:	f000 fe65 	bl	800977c <xQueueGiveFromISR>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d003      	beq.n	8008ac0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008ab8:	f06f 0302 	mvn.w	r3, #2
 8008abc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008abe:	e018      	b.n	8008af2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d015      	beq.n	8008af2 <osSemaphoreRelease+0x9a>
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <osSemaphoreRelease+0xac>)
 8008ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ad6:	e00c      	b.n	8008af2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2200      	movs	r2, #0
 8008adc:	2100      	movs	r1, #0
 8008ade:	69b8      	ldr	r0, [r7, #24]
 8008ae0:	f000 fcbe 	bl	8009460 <xQueueGenericSend>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d004      	beq.n	8008af4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008aea:	f06f 0302 	mvn.w	r3, #2
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e000      	b.n	8008af4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008af2:	bf00      	nop
    }
  }

  return (stat);
 8008af4:	69fb      	ldr	r3, [r7, #28]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000200 	.word	0x20000200
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08c      	sub	sp, #48	; 0x30
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b18:	f3ef 8305 	mrs	r3, IPSR
 8008b1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d170      	bne.n	8008c06 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b24:	f3ef 8310 	mrs	r3, PRIMASK
 8008b28:	617b      	str	r3, [r7, #20]
  return(result);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d105      	bne.n	8008b3c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b30:	f3ef 8311 	mrs	r3, BASEPRI
 8008b34:	613b      	str	r3, [r7, #16]
  return(result);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <osMessageQueueNew+0x3c>
 8008b3c:	4b34      	ldr	r3, [pc, #208]	; (8008c10 <osMessageQueueNew+0x108>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d060      	beq.n	8008c06 <osMessageQueueNew+0xfe>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d05d      	beq.n	8008c06 <osMessageQueueNew+0xfe>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d05a      	beq.n	8008c06 <osMessageQueueNew+0xfe>
    mem = -1;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d029      	beq.n	8008bb0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d012      	beq.n	8008b8a <osMessageQueueNew+0x82>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2b4f      	cmp	r3, #79	; 0x4f
 8008b6a:	d90e      	bls.n	8008b8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695a      	ldr	r2, [r3, #20]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d302      	bcc.n	8008b8a <osMessageQueueNew+0x82>
        mem = 1;
 8008b84:	2301      	movs	r3, #1
 8008b86:	623b      	str	r3, [r7, #32]
 8008b88:	e014      	b.n	8008bb4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d110      	bne.n	8008bb4 <osMessageQueueNew+0xac>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10c      	bne.n	8008bb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d108      	bne.n	8008bb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <osMessageQueueNew+0xac>
          mem = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	623b      	str	r3, [r7, #32]
 8008bae:	e001      	b.n	8008bb4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d10c      	bne.n	8008bd4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6899      	ldr	r1, [r3, #8]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fa58 	bl	8009080 <xQueueGenericCreateStatic>
 8008bd0:	6278      	str	r0, [r7, #36]	; 0x24
 8008bd2:	e008      	b.n	8008be6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fac1 	bl	8009166 <xQueueGenericCreate>
 8008be4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00c      	beq.n	8008c06 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <osMessageQueueNew+0xf2>
        name = attr->name;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	61fb      	str	r3, [r7, #28]
 8008bf8:	e001      	b.n	8008bfe <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008bfe:	69f9      	ldr	r1, [r7, #28]
 8008c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c02:	f001 f9f1 	bl	8009fe8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3728      	adds	r7, #40	; 0x28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000200 	.word	0x20000200

08008c14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	; 0x28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2c:	f3ef 8305 	mrs	r3, IPSR
 8008c30:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c32:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10f      	bne.n	8008c58 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c38:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c44:	f3ef 8311 	mrs	r3, BASEPRI
 8008c48:	617b      	str	r3, [r7, #20]
  return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d02c      	beq.n	8008caa <osMessageQueuePut+0x96>
 8008c50:	4b28      	ldr	r3, [pc, #160]	; (8008cf4 <osMessageQueuePut+0xe0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d128      	bne.n	8008caa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <osMessageQueuePut+0x56>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <osMessageQueuePut+0x56>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008c6a:	f06f 0303 	mvn.w	r3, #3
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c70:	e039      	b.n	8008ce6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008c76:	f107 0210 	add.w	r2, r7, #16
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	6a38      	ldr	r0, [r7, #32]
 8008c80:	f000 fce8 	bl	8009654 <xQueueGenericSendFromISR>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d003      	beq.n	8008c92 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008c8a:	f06f 0302 	mvn.w	r3, #2
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c90:	e029      	b.n	8008ce6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d026      	beq.n	8008ce6 <osMessageQueuePut+0xd2>
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <osMessageQueuePut+0xe4>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ca8:	e01d      	b.n	8008ce6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <osMessageQueuePut+0xa2>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008cb6:	f06f 0303 	mvn.w	r3, #3
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
 8008cbc:	e014      	b.n	8008ce8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	6a38      	ldr	r0, [r7, #32]
 8008cc6:	f000 fbcb 	bl	8009460 <xQueueGenericSend>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d00b      	beq.n	8008ce8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008cd6:	f06f 0301 	mvn.w	r3, #1
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
 8008cdc:	e004      	b.n	8008ce8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008cde:	f06f 0302 	mvn.w	r3, #2
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce4:	e000      	b.n	8008ce8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ce6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3728      	adds	r7, #40	; 0x28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000200 	.word	0x20000200
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d12:	f3ef 8305 	mrs	r3, IPSR
 8008d16:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10f      	bne.n	8008d3e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d22:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8008d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d02c      	beq.n	8008d90 <osMessageQueueGet+0x94>
 8008d36:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <osMessageQueueGet+0xdc>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d128      	bne.n	8008d90 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <osMessageQueueGet+0x54>
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d002      	beq.n	8008d50 <osMessageQueueGet+0x54>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008d50:	f06f 0303 	mvn.w	r3, #3
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d56:	e038      	b.n	8008dca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d5c:	f107 0310 	add.w	r3, r7, #16
 8008d60:	461a      	mov	r2, r3
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	6a38      	ldr	r0, [r7, #32]
 8008d66:	f000 ff77 	bl	8009c58 <xQueueReceiveFromISR>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d003      	beq.n	8008d78 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008d70:	f06f 0302 	mvn.w	r3, #2
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d76:	e028      	b.n	8008dca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d025      	beq.n	8008dca <osMessageQueueGet+0xce>
 8008d7e:	4b17      	ldr	r3, [pc, #92]	; (8008ddc <osMessageQueueGet+0xe0>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d8e:	e01c      	b.n	8008dca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <osMessageQueueGet+0xa0>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d103      	bne.n	8008da4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008d9c:	f06f 0303 	mvn.w	r3, #3
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
 8008da2:	e013      	b.n	8008dcc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	6a38      	ldr	r0, [r7, #32]
 8008daa:	f000 fd71 	bl	8009890 <xQueueReceive>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d00b      	beq.n	8008dcc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008dba:	f06f 0301 	mvn.w	r3, #1
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc0:	e004      	b.n	8008dcc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008dc2:	f06f 0302 	mvn.w	r3, #2
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc8:	e000      	b.n	8008dcc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3728      	adds	r7, #40	; 0x28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000200 	.word	0x20000200
 8008ddc:	e000ed04 	.word	0xe000ed04

08008de0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8008df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	4a06      	ldr	r2, [pc, #24]	; (8008e10 <vApplicationGetIdleTaskMemory+0x30>)
 8008df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2280      	movs	r2, #128	; 0x80
 8008dfc:	601a      	str	r2, [r3, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20000204 	.word	0x20000204
 8008e10:	20000260 	.word	0x20000260

08008e14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a07      	ldr	r2, [pc, #28]	; (8008e40 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	4a06      	ldr	r2, [pc, #24]	; (8008e44 <vApplicationGetTimerTaskMemory+0x30>)
 8008e2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e32:	601a      	str	r2, [r3, #0]
}
 8008e34:	bf00      	nop
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	20000460 	.word	0x20000460
 8008e44:	200004bc 	.word	0x200004bc

08008e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f103 0208 	add.w	r2, r3, #8
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f103 0208 	add.w	r2, r3, #8
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f103 0208 	add.w	r2, r3, #8
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	601a      	str	r2, [r3, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f00:	d103      	bne.n	8008f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	e00c      	b.n	8008f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e002      	b.n	8008f18 <vListInsert+0x2e>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d2f6      	bcs.n	8008f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
}
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6892      	ldr	r2, [r2, #8]
 8008f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6852      	ldr	r2, [r2, #4]
 8008f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d103      	bne.n	8008f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	1e5a      	subs	r2, r3, #1
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	e7fe      	b.n	8008fd6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008fd8:	f002 ff88 	bl	800beec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe4:	68f9      	ldr	r1, [r7, #12]
 8008fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	441a      	add	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009008:	3b01      	subs	r3, #1
 800900a:	68f9      	ldr	r1, [r7, #12]
 800900c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800900e:	fb01 f303 	mul.w	r3, r1, r3
 8009012:	441a      	add	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	22ff      	movs	r2, #255	; 0xff
 800901c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	22ff      	movs	r2, #255	; 0xff
 8009024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d114      	bne.n	8009058 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01a      	beq.n	800906c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3310      	adds	r3, #16
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fcac 	bl	800a998 <xTaskRemoveFromEventList>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d012      	beq.n	800906c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009046:	4b0d      	ldr	r3, [pc, #52]	; (800907c <xQueueGenericReset+0xcc>)
 8009048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	e009      	b.n	800906c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3310      	adds	r3, #16
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fef3 	bl	8008e48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3324      	adds	r3, #36	; 0x24
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff feee 	bl	8008e48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800906c:	f002 ff6c 	bl	800bf48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009070:	2301      	movs	r3, #1
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08e      	sub	sp, #56	; 0x38
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d109      	bne.n	80090a8 <xQueueGenericCreateStatic+0x28>
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090a6:	e7fe      	b.n	80090a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <xQueueGenericCreateStatic+0x42>
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <xQueueGenericCreateStatic+0x4e>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <xQueueGenericCreateStatic+0x52>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <xQueueGenericCreateStatic+0x54>
 80090d2:	2300      	movs	r3, #0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d109      	bne.n	80090ec <xQueueGenericCreateStatic+0x6c>
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	623b      	str	r3, [r7, #32]
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <xQueueGenericCreateStatic+0x78>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <xQueueGenericCreateStatic+0x7c>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <xQueueGenericCreateStatic+0x7e>
 80090fc:	2300      	movs	r3, #0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d109      	bne.n	8009116 <xQueueGenericCreateStatic+0x96>
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e7fe      	b.n	8009114 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009116:	2350      	movs	r3, #80	; 0x50
 8009118:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b50      	cmp	r3, #80	; 0x50
 800911e:	d009      	beq.n	8009134 <xQueueGenericCreateStatic+0xb4>
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	e7fe      	b.n	8009132 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009134:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00d      	beq.n	800915c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009148:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	4613      	mov	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f844 	bl	80091e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800915e:	4618      	mov	r0, r3
 8009160:	3730      	adds	r7, #48	; 0x30
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009166:	b580      	push	{r7, lr}
 8009168:	b08a      	sub	sp, #40	; 0x28
 800916a:	af02      	add	r7, sp, #8
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	4613      	mov	r3, r2
 8009172:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <xQueueGenericCreate+0x28>
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	e7fe      	b.n	800918c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]
 8009198:	e004      	b.n	80091a4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	3350      	adds	r3, #80	; 0x50
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 ffb9 	bl	800c120 <pvPortMalloc>
 80091ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d011      	beq.n	80091da <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	3350      	adds	r3, #80	; 0x50
 80091be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091c8:	79fa      	ldrb	r2, [r7, #7]
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4613      	mov	r3, r2
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f805 	bl	80091e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091da:	69bb      	ldr	r3, [r7, #24]
	}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e002      	b.n	8009206 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009212:	2101      	movs	r1, #1
 8009214:	69b8      	ldr	r0, [r7, #24]
 8009216:	f7ff fecb 	bl	8008fb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00e      	beq.n	8009256 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800924a:	2300      	movs	r3, #0
 800924c:	2200      	movs	r2, #0
 800924e:	2100      	movs	r1, #0
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f905 	bl	8009460 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800925e:	b580      	push	{r7, lr}
 8009260:	b086      	sub	sp, #24
 8009262:	af00      	add	r7, sp, #0
 8009264:	4603      	mov	r3, r0
 8009266:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009268:	2301      	movs	r3, #1
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	461a      	mov	r2, r3
 8009274:	6939      	ldr	r1, [r7, #16]
 8009276:	6978      	ldr	r0, [r7, #20]
 8009278:	f7ff ff75 	bl	8009166 <xQueueGenericCreate>
 800927c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f7ff ffd3 	bl	800922a <prvInitialiseMutex>

		return xNewQueue;
 8009284:	68fb      	ldr	r3, [r7, #12]
	}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800928e:	b580      	push	{r7, lr}
 8009290:	b088      	sub	sp, #32
 8009292:	af02      	add	r7, sp, #8
 8009294:	4603      	mov	r3, r0
 8009296:	6039      	str	r1, [r7, #0]
 8009298:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800929a:	2301      	movs	r3, #1
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2200      	movs	r2, #0
 80092aa:	6939      	ldr	r1, [r7, #16]
 80092ac:	6978      	ldr	r0, [r7, #20]
 80092ae:	f7ff fee7 	bl	8009080 <xQueueGenericCreateStatic>
 80092b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff ffb8 	bl	800922a <prvInitialiseMutex>

		return xNewQueue;
 80092ba:	68fb      	ldr	r3, [r7, #12]
	}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <xQueueGiveMutexRecursive+0x26>
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e7fe      	b.n	80092e8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	689c      	ldr	r4, [r3, #8]
 80092ee:	f001 fd09 	bl	800ad04 <xTaskGetCurrentTaskHandle>
 80092f2:	4603      	mov	r3, r0
 80092f4:	429c      	cmp	r4, r3
 80092f6:	d111      	bne.n	800931c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	1e5a      	subs	r2, r3, #1
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d105      	bne.n	8009316 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800930a:	2300      	movs	r3, #0
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f000 f8a5 	bl	8009460 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009316:	2301      	movs	r3, #1
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	e001      	b.n	8009320 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800931c:	2300      	movs	r3, #0
 800931e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009320:	697b      	ldr	r3, [r7, #20]
	}
 8009322:	4618      	mov	r0, r3
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd90      	pop	{r4, r7, pc}

0800932a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800932a:	b590      	push	{r4, r7, lr}
 800932c:	b087      	sub	sp, #28
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <xQueueTakeMutexRecursive+0x28>
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e7fe      	b.n	8009350 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	689c      	ldr	r4, [r3, #8]
 8009356:	f001 fcd5 	bl	800ad04 <xTaskGetCurrentTaskHandle>
 800935a:	4603      	mov	r3, r0
 800935c:	429c      	cmp	r4, r3
 800935e:	d107      	bne.n	8009370 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800936a:	2301      	movs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e00c      	b.n	800938a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6938      	ldr	r0, [r7, #16]
 8009374:	f000 fb68 	bl	8009a48 <xQueueSemaphoreTake>
 8009378:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800938a:	697b      	ldr	r3, [r7, #20]
	}
 800938c:	4618      	mov	r0, r3
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd90      	pop	{r4, r7, pc}

08009394 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <xQueueCreateCountingSemaphoreStatic+0x26>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	61bb      	str	r3, [r7, #24]
 80093b8:	e7fe      	b.n	80093b8 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d909      	bls.n	80093d6 <xQueueCreateCountingSemaphoreStatic+0x42>
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e7fe      	b.n	80093d4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093d6:	2302      	movs	r3, #2
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff fe4d 	bl	8009080 <xQueueGenericCreateStatic>
 80093e6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093f4:	69fb      	ldr	r3, [r7, #28]
	}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <xQueueCreateCountingSemaphore+0x24>
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	e7fe      	b.n	8009420 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	429a      	cmp	r2, r3
 8009428:	d909      	bls.n	800943e <xQueueCreateCountingSemaphore+0x40>
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	e7fe      	b.n	800943c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800943e:	2202      	movs	r2, #2
 8009440:	2100      	movs	r1, #0
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fe8f 	bl	8009166 <xQueueGenericCreate>
 8009448:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009456:	697b      	ldr	r3, [r7, #20]
	}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08e      	sub	sp, #56	; 0x38
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800946e:	2300      	movs	r3, #0
 8009470:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <xQueueGenericSend+0x30>
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28
 800948e:	e7fe      	b.n	800948e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d103      	bne.n	800949e <xQueueGenericSend+0x3e>
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <xQueueGenericSend+0x42>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <xQueueGenericSend+0x44>
 80094a2:	2300      	movs	r3, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d109      	bne.n	80094bc <xQueueGenericSend+0x5c>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ba:	e7fe      	b.n	80094ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d103      	bne.n	80094ca <xQueueGenericSend+0x6a>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <xQueueGenericSend+0x6e>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <xQueueGenericSend+0x70>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d109      	bne.n	80094e8 <xQueueGenericSend+0x88>
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	e7fe      	b.n	80094e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e8:	f001 fc1c 	bl	800ad24 <xTaskGetSchedulerState>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <xQueueGenericSend+0x98>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <xQueueGenericSend+0x9c>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <xQueueGenericSend+0x9e>
 80094fc:	2300      	movs	r3, #0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <xQueueGenericSend+0xb6>
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	61fb      	str	r3, [r7, #28]
 8009514:	e7fe      	b.n	8009514 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009516:	f002 fce9 	bl	800beec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	429a      	cmp	r2, r3
 8009524:	d302      	bcc.n	800952c <xQueueGenericSend+0xcc>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d129      	bne.n	8009580 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009532:	f000 fc48 	bl	8009dc6 <prvCopyDataToQueue>
 8009536:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d010      	beq.n	8009562 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	4618      	mov	r0, r3
 8009546:	f001 fa27 	bl	800a998 <xTaskRemoveFromEventList>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d013      	beq.n	8009578 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009550:	4b3f      	ldr	r3, [pc, #252]	; (8009650 <xQueueGenericSend+0x1f0>)
 8009552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	e00a      	b.n	8009578 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009568:	4b39      	ldr	r3, [pc, #228]	; (8009650 <xQueueGenericSend+0x1f0>)
 800956a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009578:	f002 fce6 	bl	800bf48 <vPortExitCritical>
				return pdPASS;
 800957c:	2301      	movs	r3, #1
 800957e:	e063      	b.n	8009648 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d103      	bne.n	800958e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009586:	f002 fcdf 	bl	800bf48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800958a:	2300      	movs	r3, #0
 800958c:	e05c      	b.n	8009648 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	4618      	mov	r0, r3
 800959a:	f001 fa5f 	bl	800aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800959e:	2301      	movs	r3, #1
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095a2:	f002 fcd1 	bl	800bf48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a6:	f000 ffdb 	bl	800a560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095aa:	f002 fc9f 	bl	800beec <vPortEnterCritical>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b4:	b25b      	sxtb	r3, r3
 80095b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ba:	d103      	bne.n	80095c4 <xQueueGenericSend+0x164>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ca:	b25b      	sxtb	r3, r3
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d103      	bne.n	80095da <xQueueGenericSend+0x17a>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095da:	f002 fcb5 	bl	800bf48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095de:	1d3a      	adds	r2, r7, #4
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	4611      	mov	r1, r2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 fa4e 	bl	800aa88 <xTaskCheckForTimeOut>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d124      	bne.n	800963c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f4:	f000 fcdf 	bl	8009fb6 <prvIsQueueFull>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d018      	beq.n	8009630 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	3310      	adds	r3, #16
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f001 f978 	bl	800a8fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800960c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800960e:	f000 fc6a 	bl	8009ee6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009612:	f000 ffb3 	bl	800a57c <xTaskResumeAll>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f47f af7c 	bne.w	8009516 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <xQueueGenericSend+0x1f0>)
 8009620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	e772      	b.n	8009516 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009632:	f000 fc58 	bl	8009ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009636:	f000 ffa1 	bl	800a57c <xTaskResumeAll>
 800963a:	e76c      	b.n	8009516 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800963c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800963e:	f000 fc52 	bl	8009ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009642:	f000 ff9b 	bl	800a57c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009648:	4618      	mov	r0, r3
 800964a:	3738      	adds	r7, #56	; 0x38
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	; 0x38
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <xQueueGenericSendFromISR+0x2c>
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
 800967e:	e7fe      	b.n	800967e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d103      	bne.n	800968e <xQueueGenericSendFromISR+0x3a>
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <xQueueGenericSendFromISR+0x3e>
 800968e:	2301      	movs	r3, #1
 8009690:	e000      	b.n	8009694 <xQueueGenericSendFromISR+0x40>
 8009692:	2300      	movs	r3, #0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d109      	bne.n	80096ac <xQueueGenericSendFromISR+0x58>
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	623b      	str	r3, [r7, #32]
 80096aa:	e7fe      	b.n	80096aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d103      	bne.n	80096ba <xQueueGenericSendFromISR+0x66>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <xQueueGenericSendFromISR+0x6a>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <xQueueGenericSendFromISR+0x6c>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <xQueueGenericSendFromISR+0x84>
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	61fb      	str	r3, [r7, #28]
 80096d6:	e7fe      	b.n	80096d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096d8:	f002 fce4 	bl	800c0a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096dc:	f3ef 8211 	mrs	r2, BASEPRI
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	61ba      	str	r2, [r7, #24]
 80096f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009700:	429a      	cmp	r2, r3
 8009702:	d302      	bcc.n	800970a <xQueueGenericSendFromISR+0xb6>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d12c      	bne.n	8009764 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800971a:	f000 fb54 	bl	8009dc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800971e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d112      	bne.n	800974e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d016      	beq.n	800975e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	3324      	adds	r3, #36	; 0x24
 8009734:	4618      	mov	r0, r3
 8009736:	f001 f92f 	bl	800a998 <xTaskRemoveFromEventList>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00e      	beq.n	800975e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00b      	beq.n	800975e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	e007      	b.n	800975e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800974e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009752:	3301      	adds	r3, #1
 8009754:	b2db      	uxtb	r3, r3
 8009756:	b25a      	sxtb	r2, r3
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800975e:	2301      	movs	r3, #1
 8009760:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009762:	e001      	b.n	8009768 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009764:	2300      	movs	r3, #0
 8009766:	637b      	str	r3, [r7, #52]	; 0x34
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009774:	4618      	mov	r0, r3
 8009776:	3738      	adds	r7, #56	; 0x38
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08e      	sub	sp, #56	; 0x38
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	623b      	str	r3, [r7, #32]
 80097a2:	e7fe      	b.n	80097a2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d009      	beq.n	80097c0 <xQueueGiveFromISR+0x44>
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	61fb      	str	r3, [r7, #28]
 80097be:	e7fe      	b.n	80097be <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <xQueueGiveFromISR+0x54>
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <xQueueGiveFromISR+0x58>
 80097d0:	2301      	movs	r3, #1
 80097d2:	e000      	b.n	80097d6 <xQueueGiveFromISR+0x5a>
 80097d4:	2300      	movs	r3, #0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <xQueueGiveFromISR+0x72>
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	61bb      	str	r3, [r7, #24]
 80097ec:	e7fe      	b.n	80097ec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097ee:	f002 fc59 	bl	800c0a4 <vPortValidateInterruptPriority>
	__asm volatile
 80097f2:	f3ef 8211 	mrs	r2, BASEPRI
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	617a      	str	r2, [r7, #20]
 8009808:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800980a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800981a:	429a      	cmp	r2, r3
 800981c:	d22b      	bcs.n	8009876 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d112      	bne.n	8009860 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	d016      	beq.n	8009870 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	3324      	adds	r3, #36	; 0x24
 8009846:	4618      	mov	r0, r3
 8009848:	f001 f8a6 	bl	800a998 <xTaskRemoveFromEventList>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00e      	beq.n	8009870 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e007      	b.n	8009870 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009864:	3301      	adds	r3, #1
 8009866:	b2db      	uxtb	r3, r3
 8009868:	b25a      	sxtb	r2, r3
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009870:	2301      	movs	r3, #1
 8009872:	637b      	str	r3, [r7, #52]	; 0x34
 8009874:	e001      	b.n	800987a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009876:	2300      	movs	r3, #0
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009886:	4618      	mov	r0, r3
 8009888:	3738      	adds	r7, #56	; 0x38
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08c      	sub	sp, #48	; 0x30
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800989c:	2300      	movs	r3, #0
 800989e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <xQueueReceive+0x2e>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	623b      	str	r3, [r7, #32]
 80098bc:	e7fe      	b.n	80098bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <xQueueReceive+0x3c>
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <xQueueReceive+0x40>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <xQueueReceive+0x42>
 80098d0:	2300      	movs	r3, #0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <xQueueReceive+0x5a>
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	e7fe      	b.n	80098e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098ea:	f001 fa1b 	bl	800ad24 <xTaskGetSchedulerState>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <xQueueReceive+0x6a>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <xQueueReceive+0x6e>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <xQueueReceive+0x70>
 80098fe:	2300      	movs	r3, #0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <xQueueReceive+0x88>
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	61bb      	str	r3, [r7, #24]
 8009916:	e7fe      	b.n	8009916 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009918:	f002 fae8 	bl	800beec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009920:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01f      	beq.n	8009968 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	f000 fab5 	bl	8009e9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	1e5a      	subs	r2, r3, #1
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00f      	beq.n	8009960 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	3310      	adds	r3, #16
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f827 	bl	800a998 <xTaskRemoveFromEventList>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d007      	beq.n	8009960 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009950:	4b3c      	ldr	r3, [pc, #240]	; (8009a44 <xQueueReceive+0x1b4>)
 8009952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009960:	f002 faf2 	bl	800bf48 <vPortExitCritical>
				return pdPASS;
 8009964:	2301      	movs	r3, #1
 8009966:	e069      	b.n	8009a3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d103      	bne.n	8009976 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800996e:	f002 faeb 	bl	800bf48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009972:	2300      	movs	r3, #0
 8009974:	e062      	b.n	8009a3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800997c:	f107 0310 	add.w	r3, r7, #16
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f86b 	bl	800aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009986:	2301      	movs	r3, #1
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800998a:	f002 fadd 	bl	800bf48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800998e:	f000 fde7 	bl	800a560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009992:	f002 faab 	bl	800beec <vPortEnterCritical>
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800999c:	b25b      	sxtb	r3, r3
 800999e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a2:	d103      	bne.n	80099ac <xQueueReceive+0x11c>
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099b2:	b25b      	sxtb	r3, r3
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d103      	bne.n	80099c2 <xQueueReceive+0x132>
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099c2:	f002 fac1 	bl	800bf48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099c6:	1d3a      	adds	r2, r7, #4
 80099c8:	f107 0310 	add.w	r3, r7, #16
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 f85a 	bl	800aa88 <xTaskCheckForTimeOut>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d123      	bne.n	8009a22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099dc:	f000 fad5 	bl	8009f8a <prvIsQueueEmpty>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d017      	beq.n	8009a16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	3324      	adds	r3, #36	; 0x24
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 ff84 	bl	800a8fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f6:	f000 fa76 	bl	8009ee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099fa:	f000 fdbf 	bl	800a57c <xTaskResumeAll>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d189      	bne.n	8009918 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <xQueueReceive+0x1b4>)
 8009a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	e780      	b.n	8009918 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a18:	f000 fa65 	bl	8009ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a1c:	f000 fdae 	bl	800a57c <xTaskResumeAll>
 8009a20:	e77a      	b.n	8009918 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a24:	f000 fa5f 	bl	8009ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a28:	f000 fda8 	bl	800a57c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2e:	f000 faac 	bl	8009f8a <prvIsQueueEmpty>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f43f af6f 	beq.w	8009918 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3730      	adds	r7, #48	; 0x30
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <xQueueSemaphoreTake+0x30>
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	623b      	str	r3, [r7, #32]
 8009a76:	e7fe      	b.n	8009a76 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d009      	beq.n	8009a94 <xQueueSemaphoreTake+0x4c>
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	e7fe      	b.n	8009a92 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a94:	f001 f946 	bl	800ad24 <xTaskGetSchedulerState>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <xQueueSemaphoreTake+0x5c>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <xQueueSemaphoreTake+0x60>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <xQueueSemaphoreTake+0x62>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d109      	bne.n	8009ac2 <xQueueSemaphoreTake+0x7a>
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac2:	f002 fa13 	bl	800beec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d024      	beq.n	8009b1c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	1e5a      	subs	r2, r3, #1
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d104      	bne.n	8009aec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009ae2:	f001 fa91 	bl	800b008 <pvTaskIncrementMutexHeldCount>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00f      	beq.n	8009b14 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	3310      	adds	r3, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 ff4d 	bl	800a998 <xTaskRemoveFromEventList>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d007      	beq.n	8009b14 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b04:	4b53      	ldr	r3, [pc, #332]	; (8009c54 <xQueueSemaphoreTake+0x20c>)
 8009b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b14:	f002 fa18 	bl	800bf48 <vPortExitCritical>
				return pdPASS;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e096      	b.n	8009c4a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d110      	bne.n	8009b44 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <xQueueSemaphoreTake+0xf4>
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e7fe      	b.n	8009b3a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b3c:	f002 fa04 	bl	800bf48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e082      	b.n	8009c4a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b4a:	f107 030c 	add.w	r3, r7, #12
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 ff84 	bl	800aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b58:	f002 f9f6 	bl	800bf48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b5c:	f000 fd00 	bl	800a560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b60:	f002 f9c4 	bl	800beec <vPortEnterCritical>
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b6a:	b25b      	sxtb	r3, r3
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b70:	d103      	bne.n	8009b7a <xQueueSemaphoreTake+0x132>
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b80:	b25b      	sxtb	r3, r3
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d103      	bne.n	8009b90 <xQueueSemaphoreTake+0x148>
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b90:	f002 f9da 	bl	800bf48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b94:	463a      	mov	r2, r7
 8009b96:	f107 030c 	add.w	r3, r7, #12
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 ff73 	bl	800aa88 <xTaskCheckForTimeOut>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d132      	bne.n	8009c0e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009baa:	f000 f9ee 	bl	8009f8a <prvIsQueueEmpty>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d026      	beq.n	8009c02 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d109      	bne.n	8009bd0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009bbc:	f002 f996 	bl	800beec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 f8cb 	bl	800ad60 <xTaskPriorityInherit>
 8009bca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009bcc:	f002 f9bc 	bl	800bf48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	3324      	adds	r3, #36	; 0x24
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fe8f 	bl	800a8fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009be0:	f000 f981 	bl	8009ee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009be4:	f000 fcca 	bl	800a57c <xTaskResumeAll>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f af69 	bne.w	8009ac2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009bf0:	4b18      	ldr	r3, [pc, #96]	; (8009c54 <xQueueSemaphoreTake+0x20c>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	e75f      	b.n	8009ac2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c04:	f000 f96f 	bl	8009ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c08:	f000 fcb8 	bl	800a57c <xTaskResumeAll>
 8009c0c:	e759      	b.n	8009ac2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c10:	f000 f969 	bl	8009ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c14:	f000 fcb2 	bl	800a57c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c1a:	f000 f9b6 	bl	8009f8a <prvIsQueueEmpty>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f43f af4e 	beq.w	8009ac2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00d      	beq.n	8009c48 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009c2c:	f002 f95e 	bl	800beec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c32:	f000 f8b0 	bl	8009d96 <prvGetDisinheritPriorityAfterTimeout>
 8009c36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 f962 	bl	800af08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c44:	f002 f980 	bl	800bf48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3738      	adds	r7, #56	; 0x38
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08e      	sub	sp, #56	; 0x38
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d109      	bne.n	8009c82 <xQueueReceiveFromISR+0x2a>
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	623b      	str	r3, [r7, #32]
 8009c80:	e7fe      	b.n	8009c80 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <xQueueReceiveFromISR+0x38>
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <xQueueReceiveFromISR+0x3c>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <xQueueReceiveFromISR+0x3e>
 8009c94:	2300      	movs	r3, #0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <xQueueReceiveFromISR+0x56>
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	61fb      	str	r3, [r7, #28]
 8009cac:	e7fe      	b.n	8009cac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cae:	f002 f9f9 	bl	800c0a4 <vPortValidateInterruptPriority>
	__asm volatile
 8009cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	61ba      	str	r2, [r7, #24]
 8009cc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009cca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d02f      	beq.n	8009d3a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ce8:	f000 f8d7 	bl	8009e9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009cf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfc:	d112      	bne.n	8009d24 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d016      	beq.n	8009d34 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	3310      	adds	r3, #16
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 fe44 	bl	800a998 <xTaskRemoveFromEventList>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00e      	beq.n	8009d34 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e007      	b.n	8009d34 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d28:	3301      	adds	r3, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	b25a      	sxtb	r2, r3
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009d34:	2301      	movs	r3, #1
 8009d36:	637b      	str	r3, [r7, #52]	; 0x34
 8009d38:	e001      	b.n	8009d3e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3738      	adds	r7, #56	; 0x38
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d109      	bne.n	8009d78 <vQueueDelete+0x26>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	60bb      	str	r3, [r7, #8]
 8009d76:	e7fe      	b.n	8009d76 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f95d 	bl	800a038 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f002 fa8b 	bl	800c2a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d006      	beq.n	8009db4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e001      	b.n	8009db8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009db8:	68fb      	ldr	r3, [r7, #12]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b086      	sub	sp, #24
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10d      	bne.n	8009e00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d14d      	bne.n	8009e88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 f81d 	bl	800ae30 <xTaskPriorityDisinherit>
 8009df6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	609a      	str	r2, [r3, #8]
 8009dfe:	e043      	b.n	8009e88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d119      	bne.n	8009e3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6858      	ldr	r0, [r3, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	f002 fb85 	bl	800c520 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	441a      	add	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d32b      	bcc.n	8009e88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	605a      	str	r2, [r3, #4]
 8009e38:	e026      	b.n	8009e88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68d8      	ldr	r0, [r3, #12]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e42:	461a      	mov	r2, r3
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	f002 fb6b 	bl	800c520 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	425b      	negs	r3, r3
 8009e54:	441a      	add	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d207      	bcs.n	8009e76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	425b      	negs	r3, r3
 8009e70:	441a      	add	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d105      	bne.n	8009e88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e90:	697b      	ldr	r3, [r7, #20]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d018      	beq.n	8009ede <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	441a      	add	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d303      	bcc.n	8009ece <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68d9      	ldr	r1, [r3, #12]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	6838      	ldr	r0, [r7, #0]
 8009eda:	f002 fb21 	bl	800c520 <memcpy>
	}
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009eee:	f001 fffd 	bl	800beec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ef8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009efa:	e011      	b.n	8009f20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d012      	beq.n	8009f2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fd45 	bl	800a998 <xTaskRemoveFromEventList>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f14:	f000 fe18 	bl	800ab48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dce9      	bgt.n	8009efc <prvUnlockQueue+0x16>
 8009f28:	e000      	b.n	8009f2c <prvUnlockQueue+0x46>
					break;
 8009f2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	22ff      	movs	r2, #255	; 0xff
 8009f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f34:	f002 f808 	bl	800bf48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f38:	f001 ffd8 	bl	800beec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f44:	e011      	b.n	8009f6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d012      	beq.n	8009f74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3310      	adds	r3, #16
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fd20 	bl	800a998 <xTaskRemoveFromEventList>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f5e:	f000 fdf3 	bl	800ab48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dce9      	bgt.n	8009f46 <prvUnlockQueue+0x60>
 8009f72:	e000      	b.n	8009f76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	22ff      	movs	r2, #255	; 0xff
 8009f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f7e:	f001 ffe3 	bl	800bf48 <vPortExitCritical>
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f92:	f001 ffab 	bl	800beec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	e001      	b.n	8009fa8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fa8:	f001 ffce 	bl	800bf48 <vPortExitCritical>

	return xReturn;
 8009fac:	68fb      	ldr	r3, [r7, #12]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fbe:	f001 ff95 	bl	800beec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d102      	bne.n	8009fd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e001      	b.n	8009fd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fd8:	f001 ffb6 	bl	800bf48 <vPortExitCritical>

	return xReturn;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	e014      	b.n	800a022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ff8:	4a0e      	ldr	r2, [pc, #56]	; (800a034 <vQueueAddToRegistry+0x4c>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10b      	bne.n	800a01c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a004:	490b      	ldr	r1, [pc, #44]	; (800a034 <vQueueAddToRegistry+0x4c>)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a00e:	4a09      	ldr	r2, [pc, #36]	; (800a034 <vQueueAddToRegistry+0x4c>)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4413      	add	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a01a:	e005      	b.n	800a028 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b07      	cmp	r3, #7
 800a026:	d9e7      	bls.n	8009ff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a028:	bf00      	nop
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20004cac 	.word	0x20004cac

0800a038 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a040:	2300      	movs	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e016      	b.n	800a074 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a046:	4a10      	ldr	r2, [pc, #64]	; (800a088 <vQueueUnregisterQueue+0x50>)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	4413      	add	r3, r2
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d10b      	bne.n	800a06e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a056:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <vQueueUnregisterQueue+0x50>)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2100      	movs	r1, #0
 800a05c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a060:	4a09      	ldr	r2, [pc, #36]	; (800a088 <vQueueUnregisterQueue+0x50>)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4413      	add	r3, r2
 800a068:	2200      	movs	r2, #0
 800a06a:	605a      	str	r2, [r3, #4]
				break;
 800a06c:	e005      	b.n	800a07a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3301      	adds	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b07      	cmp	r3, #7
 800a078:	d9e5      	bls.n	800a046 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a07a:	bf00      	nop
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	20004cac 	.word	0x20004cac

0800a08c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a09c:	f001 ff26 	bl	800beec <vPortEnterCritical>
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0a6:	b25b      	sxtb	r3, r3
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ac:	d103      	bne.n	800a0b6 <vQueueWaitForMessageRestricted+0x2a>
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0bc:	b25b      	sxtb	r3, r3
 800a0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c2:	d103      	bne.n	800a0cc <vQueueWaitForMessageRestricted+0x40>
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0cc:	f001 ff3c 	bl	800bf48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d106      	bne.n	800a0e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fc2f 	bl	800a944 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0e6:	6978      	ldr	r0, [r7, #20]
 800a0e8:	f7ff fefd 	bl	8009ee6 <prvUnlockQueue>
	}
 800a0ec:	bf00      	nop
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08e      	sub	sp, #56	; 0x38
 800a0f8:	af04      	add	r7, sp, #16
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <xTaskCreateStatic+0x28>
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	623b      	str	r3, [r7, #32]
 800a11a:	e7fe      	b.n	800a11a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d109      	bne.n	800a136 <xTaskCreateStatic+0x42>
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	e7fe      	b.n	800a134 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a136:	235c      	movs	r3, #92	; 0x5c
 800a138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	2b5c      	cmp	r3, #92	; 0x5c
 800a13e:	d009      	beq.n	800a154 <xTaskCreateStatic+0x60>
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	e7fe      	b.n	800a152 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a154:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01e      	beq.n	800a19a <xTaskCreateStatic+0xa6>
 800a15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01b      	beq.n	800a19a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a174:	2300      	movs	r3, #0
 800a176:	9303      	str	r3, [sp, #12]
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	9302      	str	r3, [sp, #8]
 800a17c:	f107 0314 	add.w	r3, r7, #20
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f850 	bl	800a232 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a194:	f000 f8dc 	bl	800a350 <prvAddNewTaskToReadyList>
 800a198:	e001      	b.n	800a19e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a19e:	697b      	ldr	r3, [r7, #20]
	}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08c      	sub	sp, #48	; 0x30
 800a1ac:	af04      	add	r7, sp, #16
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 ffaf 	bl	800c120 <pvPortMalloc>
 800a1c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00e      	beq.n	800a1e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1ca:	205c      	movs	r0, #92	; 0x5c
 800a1cc:	f001 ffa8 	bl	800c120 <pvPortMalloc>
 800a1d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	631a      	str	r2, [r3, #48]	; 0x30
 800a1de:	e005      	b.n	800a1ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1e0:	6978      	ldr	r0, [r7, #20]
 800a1e2:	f002 f85f 	bl	800c2a4 <vPortFree>
 800a1e6:	e001      	b.n	800a1ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d017      	beq.n	800a222 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1fa:	88fa      	ldrh	r2, [r7, #6]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68b9      	ldr	r1, [r7, #8]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f80e 	bl	800a232 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a216:	69f8      	ldr	r0, [r7, #28]
 800a218:	f000 f89a 	bl	800a350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a21c:	2301      	movs	r3, #1
 800a21e:	61bb      	str	r3, [r7, #24]
 800a220:	e002      	b.n	800a228 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a222:	f04f 33ff 	mov.w	r3, #4294967295
 800a226:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a228:	69bb      	ldr	r3, [r7, #24]
	}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b088      	sub	sp, #32
 800a236:	af00      	add	r7, sp, #0
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	461a      	mov	r2, r3
 800a24a:	21a5      	movs	r1, #165	; 0xa5
 800a24c:	f002 f973 	bl	800c536 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a25a:	3b01      	subs	r3, #1
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	f023 0307 	bic.w	r3, r3, #7
 800a268:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <prvInitialiseNewTask+0x56>
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	617b      	str	r3, [r7, #20]
 800a286:	e7fe      	b.n	800a286 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d01f      	beq.n	800a2ce <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	e012      	b.n	800a2ba <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	4413      	add	r3, r2
 800a29a:	7819      	ldrb	r1, [r3, #0]
 800a29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3334      	adds	r3, #52	; 0x34
 800a2a4:	460a      	mov	r2, r1
 800a2a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2b0f      	cmp	r3, #15
 800a2be:	d9e9      	bls.n	800a294 <prvInitialiseNewTask+0x62>
 800a2c0:	e000      	b.n	800a2c4 <prvInitialiseNewTask+0x92>
			{
				break;
 800a2c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2cc:	e003      	b.n	800a2d6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	2b37      	cmp	r3, #55	; 0x37
 800a2da:	d901      	bls.n	800a2e0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2dc:	2337      	movs	r3, #55	; 0x37
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fdc6 	bl	8008e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	3318      	adds	r3, #24
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fdc1 	bl	8008e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a30a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	2200      	movs	r2, #0
 800a320:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	68f9      	ldr	r1, [r7, #12]
 800a32e:	69b8      	ldr	r0, [r7, #24]
 800a330:	f001 fcb6 	bl	800bca0 <pxPortInitialiseStack>
 800a334:	4602      	mov	r2, r0
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a346:	bf00      	nop
 800a348:	3720      	adds	r7, #32
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a358:	f001 fdc8 	bl	800beec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a35c:	4b2d      	ldr	r3, [pc, #180]	; (800a414 <prvAddNewTaskToReadyList+0xc4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	4a2c      	ldr	r2, [pc, #176]	; (800a414 <prvAddNewTaskToReadyList+0xc4>)
 800a364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a366:	4b2c      	ldr	r3, [pc, #176]	; (800a418 <prvAddNewTaskToReadyList+0xc8>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a36e:	4a2a      	ldr	r2, [pc, #168]	; (800a418 <prvAddNewTaskToReadyList+0xc8>)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a374:	4b27      	ldr	r3, [pc, #156]	; (800a414 <prvAddNewTaskToReadyList+0xc4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d110      	bne.n	800a39e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a37c:	f000 fc08 	bl	800ab90 <prvInitialiseTaskLists>
 800a380:	e00d      	b.n	800a39e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a382:	4b26      	ldr	r3, [pc, #152]	; (800a41c <prvAddNewTaskToReadyList+0xcc>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d109      	bne.n	800a39e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a38a:	4b23      	ldr	r3, [pc, #140]	; (800a418 <prvAddNewTaskToReadyList+0xc8>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	429a      	cmp	r2, r3
 800a396:	d802      	bhi.n	800a39e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a398:	4a1f      	ldr	r2, [pc, #124]	; (800a418 <prvAddNewTaskToReadyList+0xc8>)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a39e:	4b20      	ldr	r3, [pc, #128]	; (800a420 <prvAddNewTaskToReadyList+0xd0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	4a1e      	ldr	r2, [pc, #120]	; (800a420 <prvAddNewTaskToReadyList+0xd0>)
 800a3a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3a8:	4b1d      	ldr	r3, [pc, #116]	; (800a420 <prvAddNewTaskToReadyList+0xd0>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	4b1b      	ldr	r3, [pc, #108]	; (800a424 <prvAddNewTaskToReadyList+0xd4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d903      	bls.n	800a3c4 <prvAddNewTaskToReadyList+0x74>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a18      	ldr	r2, [pc, #96]	; (800a424 <prvAddNewTaskToReadyList+0xd4>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4a15      	ldr	r2, [pc, #84]	; (800a428 <prvAddNewTaskToReadyList+0xd8>)
 800a3d2:	441a      	add	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe fd61 	bl	8008ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3e0:	f001 fdb2 	bl	800bf48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <prvAddNewTaskToReadyList+0xcc>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00e      	beq.n	800a40a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <prvAddNewTaskToReadyList+0xc8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d207      	bcs.n	800a40a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <prvAddNewTaskToReadyList+0xdc>)
 800a3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000d90 	.word	0x20000d90
 800a418:	200008bc 	.word	0x200008bc
 800a41c:	20000d9c 	.word	0x20000d9c
 800a420:	20000dac 	.word	0x20000dac
 800a424:	20000d98 	.word	0x20000d98
 800a428:	200008c0 	.word	0x200008c0
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a438:	2300      	movs	r3, #0
 800a43a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d016      	beq.n	800a470 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <vTaskDelay+0x60>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d009      	beq.n	800a45e <vTaskDelay+0x2e>
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	60bb      	str	r3, [r7, #8]
 800a45c:	e7fe      	b.n	800a45c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a45e:	f000 f87f 	bl	800a560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a462:	2100      	movs	r1, #0
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 ffc9 	bl	800b3fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a46a:	f000 f887 	bl	800a57c <xTaskResumeAll>
 800a46e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d107      	bne.n	800a486 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <vTaskDelay+0x64>)
 800a478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a486:	bf00      	nop
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20000db8 	.word	0x20000db8
 800a494:	e000ed04 	.word	0xe000ed04

0800a498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08a      	sub	sp, #40	; 0x28
 800a49c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4a6:	463a      	mov	r2, r7
 800a4a8:	1d39      	adds	r1, r7, #4
 800a4aa:	f107 0308 	add.w	r3, r7, #8
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fc96 	bl	8008de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	9202      	str	r2, [sp, #8]
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	4920      	ldr	r1, [pc, #128]	; (800a548 <vTaskStartScheduler+0xb0>)
 800a4c8:	4820      	ldr	r0, [pc, #128]	; (800a54c <vTaskStartScheduler+0xb4>)
 800a4ca:	f7ff fe13 	bl	800a0f4 <xTaskCreateStatic>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	4b1f      	ldr	r3, [pc, #124]	; (800a550 <vTaskStartScheduler+0xb8>)
 800a4d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <vTaskStartScheduler+0xb8>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	617b      	str	r3, [r7, #20]
 800a4e0:	e001      	b.n	800a4e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d102      	bne.n	800a4f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4ec:	f000 ffda 	bl	800b4a4 <xTimerCreateTimerTask>
 800a4f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d115      	bne.n	800a524 <vTaskStartScheduler+0x8c>
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a50a:	4b12      	ldr	r3, [pc, #72]	; (800a554 <vTaskStartScheduler+0xbc>)
 800a50c:	f04f 32ff 	mov.w	r2, #4294967295
 800a510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <vTaskStartScheduler+0xc0>)
 800a514:	2201      	movs	r2, #1
 800a516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a518:	4b10      	ldr	r3, [pc, #64]	; (800a55c <vTaskStartScheduler+0xc4>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a51e:	f001 fc47 	bl	800bdb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a522:	e00d      	b.n	800a540 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d109      	bne.n	800a540 <vTaskStartScheduler+0xa8>
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	e7fe      	b.n	800a53e <vTaskStartScheduler+0xa6>
}
 800a540:	bf00      	nop
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	0800e638 	.word	0x0800e638
 800a54c:	0800ab61 	.word	0x0800ab61
 800a550:	20000db4 	.word	0x20000db4
 800a554:	20000db0 	.word	0x20000db0
 800a558:	20000d9c 	.word	0x20000d9c
 800a55c:	20000d94 	.word	0x20000d94

0800a560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a560:	b480      	push	{r7}
 800a562:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a564:	4b04      	ldr	r3, [pc, #16]	; (800a578 <vTaskSuspendAll+0x18>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3301      	adds	r3, #1
 800a56a:	4a03      	ldr	r2, [pc, #12]	; (800a578 <vTaskSuspendAll+0x18>)
 800a56c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a56e:	bf00      	nop
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20000db8 	.word	0x20000db8

0800a57c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a58a:	4b41      	ldr	r3, [pc, #260]	; (800a690 <xTaskResumeAll+0x114>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d109      	bne.n	800a5a6 <xTaskResumeAll+0x2a>
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	e7fe      	b.n	800a5a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5a6:	f001 fca1 	bl	800beec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5aa:	4b39      	ldr	r3, [pc, #228]	; (800a690 <xTaskResumeAll+0x114>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	4a37      	ldr	r2, [pc, #220]	; (800a690 <xTaskResumeAll+0x114>)
 800a5b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b4:	4b36      	ldr	r3, [pc, #216]	; (800a690 <xTaskResumeAll+0x114>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d162      	bne.n	800a682 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5bc:	4b35      	ldr	r3, [pc, #212]	; (800a694 <xTaskResumeAll+0x118>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d05e      	beq.n	800a682 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5c4:	e02f      	b.n	800a626 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c6:	4b34      	ldr	r3, [pc, #208]	; (800a698 <xTaskResumeAll+0x11c>)
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3318      	adds	r3, #24
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fcc2 	bl	8008f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fcbd 	bl	8008f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e6:	4b2d      	ldr	r3, [pc, #180]	; (800a69c <xTaskResumeAll+0x120>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d903      	bls.n	800a5f6 <xTaskResumeAll+0x7a>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	4a2a      	ldr	r2, [pc, #168]	; (800a69c <xTaskResumeAll+0x120>)
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4a27      	ldr	r2, [pc, #156]	; (800a6a0 <xTaskResumeAll+0x124>)
 800a604:	441a      	add	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3304      	adds	r3, #4
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7fe fc48 	bl	8008ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a616:	4b23      	ldr	r3, [pc, #140]	; (800a6a4 <xTaskResumeAll+0x128>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d302      	bcc.n	800a626 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a620:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <xTaskResumeAll+0x12c>)
 800a622:	2201      	movs	r2, #1
 800a624:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a626:	4b1c      	ldr	r3, [pc, #112]	; (800a698 <xTaskResumeAll+0x11c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1cb      	bne.n	800a5c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a634:	f000 fb46 	bl	800acc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a638:	4b1c      	ldr	r3, [pc, #112]	; (800a6ac <xTaskResumeAll+0x130>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a644:	f000 f846 	bl	800a6d4 <xTaskIncrementTick>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a64e:	4b16      	ldr	r3, [pc, #88]	; (800a6a8 <xTaskResumeAll+0x12c>)
 800a650:	2201      	movs	r2, #1
 800a652:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3b01      	subs	r3, #1
 800a658:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1f1      	bne.n	800a644 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a660:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <xTaskResumeAll+0x130>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a666:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <xTaskResumeAll+0x12c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a66e:	2301      	movs	r3, #1
 800a670:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a672:	4b0f      	ldr	r3, [pc, #60]	; (800a6b0 <xTaskResumeAll+0x134>)
 800a674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a682:	f001 fc61 	bl	800bf48 <vPortExitCritical>

	return xAlreadyYielded;
 800a686:	68bb      	ldr	r3, [r7, #8]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	20000db8 	.word	0x20000db8
 800a694:	20000d90 	.word	0x20000d90
 800a698:	20000d50 	.word	0x20000d50
 800a69c:	20000d98 	.word	0x20000d98
 800a6a0:	200008c0 	.word	0x200008c0
 800a6a4:	200008bc 	.word	0x200008bc
 800a6a8:	20000da4 	.word	0x20000da4
 800a6ac:	20000da0 	.word	0x20000da0
 800a6b0:	e000ed04 	.word	0xe000ed04

0800a6b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <xTaskGetTickCount+0x1c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6c0:	687b      	ldr	r3, [r7, #4]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	20000d94 	.word	0x20000d94

0800a6d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6de:	4b4e      	ldr	r3, [pc, #312]	; (800a818 <xTaskIncrementTick+0x144>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 8088 	bne.w	800a7f8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6e8:	4b4c      	ldr	r3, [pc, #304]	; (800a81c <xTaskIncrementTick+0x148>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6f0:	4a4a      	ldr	r2, [pc, #296]	; (800a81c <xTaskIncrementTick+0x148>)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d11f      	bne.n	800a73c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6fc:	4b48      	ldr	r3, [pc, #288]	; (800a820 <xTaskIncrementTick+0x14c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d009      	beq.n	800a71a <xTaskIncrementTick+0x46>
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	e7fe      	b.n	800a718 <xTaskIncrementTick+0x44>
 800a71a:	4b41      	ldr	r3, [pc, #260]	; (800a820 <xTaskIncrementTick+0x14c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	4b40      	ldr	r3, [pc, #256]	; (800a824 <xTaskIncrementTick+0x150>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a3e      	ldr	r2, [pc, #248]	; (800a820 <xTaskIncrementTick+0x14c>)
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	4a3e      	ldr	r2, [pc, #248]	; (800a824 <xTaskIncrementTick+0x150>)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	4b3e      	ldr	r3, [pc, #248]	; (800a828 <xTaskIncrementTick+0x154>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3301      	adds	r3, #1
 800a734:	4a3c      	ldr	r2, [pc, #240]	; (800a828 <xTaskIncrementTick+0x154>)
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	f000 fac4 	bl	800acc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a73c:	4b3b      	ldr	r3, [pc, #236]	; (800a82c <xTaskIncrementTick+0x158>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	429a      	cmp	r2, r3
 800a744:	d349      	bcc.n	800a7da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a746:	4b36      	ldr	r3, [pc, #216]	; (800a820 <xTaskIncrementTick+0x14c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a750:	4b36      	ldr	r3, [pc, #216]	; (800a82c <xTaskIncrementTick+0x158>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	601a      	str	r2, [r3, #0]
					break;
 800a758:	e03f      	b.n	800a7da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a75a:	4b31      	ldr	r3, [pc, #196]	; (800a820 <xTaskIncrementTick+0x14c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d203      	bcs.n	800a77a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a772:	4a2e      	ldr	r2, [pc, #184]	; (800a82c <xTaskIncrementTick+0x158>)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a778:	e02f      	b.n	800a7da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	3304      	adds	r3, #4
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fbec 	bl	8008f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d004      	beq.n	800a796 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	3318      	adds	r3, #24
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fbe3 	bl	8008f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79a:	4b25      	ldr	r3, [pc, #148]	; (800a830 <xTaskIncrementTick+0x15c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d903      	bls.n	800a7aa <xTaskIncrementTick+0xd6>
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a6:	4a22      	ldr	r2, [pc, #136]	; (800a830 <xTaskIncrementTick+0x15c>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a1f      	ldr	r2, [pc, #124]	; (800a834 <xTaskIncrementTick+0x160>)
 800a7b8:	441a      	add	r2, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7fe fb6e 	bl	8008ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ca:	4b1b      	ldr	r3, [pc, #108]	; (800a838 <xTaskIncrementTick+0x164>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d3b8      	bcc.n	800a746 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7d8:	e7b5      	b.n	800a746 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7da:	4b17      	ldr	r3, [pc, #92]	; (800a838 <xTaskIncrementTick+0x164>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4914      	ldr	r1, [pc, #80]	; (800a834 <xTaskIncrementTick+0x160>)
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d907      	bls.n	800a802 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e004      	b.n	800a802 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a7f8:	4b10      	ldr	r3, [pc, #64]	; (800a83c <xTaskIncrementTick+0x168>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	4a0f      	ldr	r2, [pc, #60]	; (800a83c <xTaskIncrementTick+0x168>)
 800a800:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a802:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <xTaskIncrementTick+0x16c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a80a:	2301      	movs	r3, #1
 800a80c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a80e:	697b      	ldr	r3, [r7, #20]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20000db8 	.word	0x20000db8
 800a81c:	20000d94 	.word	0x20000d94
 800a820:	20000d48 	.word	0x20000d48
 800a824:	20000d4c 	.word	0x20000d4c
 800a828:	20000da8 	.word	0x20000da8
 800a82c:	20000db0 	.word	0x20000db0
 800a830:	20000d98 	.word	0x20000d98
 800a834:	200008c0 	.word	0x200008c0
 800a838:	200008bc 	.word	0x200008bc
 800a83c:	20000da0 	.word	0x20000da0
 800a840:	20000da4 	.word	0x20000da4

0800a844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a84a:	4b27      	ldr	r3, [pc, #156]	; (800a8e8 <vTaskSwitchContext+0xa4>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a852:	4b26      	ldr	r3, [pc, #152]	; (800a8ec <vTaskSwitchContext+0xa8>)
 800a854:	2201      	movs	r2, #1
 800a856:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a858:	e040      	b.n	800a8dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a85a:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <vTaskSwitchContext+0xa8>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a860:	4b23      	ldr	r3, [pc, #140]	; (800a8f0 <vTaskSwitchContext+0xac>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	e00f      	b.n	800a888 <vTaskSwitchContext+0x44>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <vTaskSwitchContext+0x3e>
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	e7fe      	b.n	800a880 <vTaskSwitchContext+0x3c>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b01      	subs	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	491a      	ldr	r1, [pc, #104]	; (800a8f4 <vTaskSwitchContext+0xb0>)
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4613      	mov	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0e5      	beq.n	800a868 <vTaskSwitchContext+0x24>
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4a13      	ldr	r2, [pc, #76]	; (800a8f4 <vTaskSwitchContext+0xb0>)
 800a8a8:	4413      	add	r3, r2
 800a8aa:	60bb      	str	r3, [r7, #8]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	3308      	adds	r3, #8
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d104      	bne.n	800a8cc <vTaskSwitchContext+0x88>
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	605a      	str	r2, [r3, #4]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	4a09      	ldr	r2, [pc, #36]	; (800a8f8 <vTaskSwitchContext+0xb4>)
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4a06      	ldr	r2, [pc, #24]	; (800a8f0 <vTaskSwitchContext+0xac>)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6013      	str	r3, [r2, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	20000db8 	.word	0x20000db8
 800a8ec:	20000da4 	.word	0x20000da4
 800a8f0:	20000d98 	.word	0x20000d98
 800a8f4:	200008c0 	.word	0x200008c0
 800a8f8:	200008bc 	.word	0x200008bc

0800a8fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d109      	bne.n	800a920 <vTaskPlaceOnEventList+0x24>
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	e7fe      	b.n	800a91e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <vTaskPlaceOnEventList+0x44>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3318      	adds	r3, #24
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7fe fade 	bl	8008eea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a92e:	2101      	movs	r1, #1
 800a930:	6838      	ldr	r0, [r7, #0]
 800a932:	f000 fd63 	bl	800b3fc <prvAddCurrentTaskToDelayedList>
}
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	200008bc 	.word	0x200008bc

0800a944 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <vTaskPlaceOnEventListRestricted+0x26>
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e7fe      	b.n	800a968 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <vTaskPlaceOnEventListRestricted+0x50>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3318      	adds	r3, #24
 800a970:	4619      	mov	r1, r3
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7fe fa95 	bl	8008ea2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a97e:	f04f 33ff 	mov.w	r3, #4294967295
 800a982:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	68b8      	ldr	r0, [r7, #8]
 800a988:	f000 fd38 	bl	800b3fc <prvAddCurrentTaskToDelayedList>
	}
 800a98c:	bf00      	nop
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	200008bc 	.word	0x200008bc

0800a998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d109      	bne.n	800a9c2 <xTaskRemoveFromEventList+0x2a>
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e7fe      	b.n	800a9c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3318      	adds	r3, #24
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fac8 	bl	8008f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9cc:	4b1d      	ldr	r3, [pc, #116]	; (800aa44 <xTaskRemoveFromEventList+0xac>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d11d      	bne.n	800aa10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe fabf 	bl	8008f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <xTaskRemoveFromEventList+0xb0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d903      	bls.n	800a9f2 <xTaskRemoveFromEventList+0x5a>
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <xTaskRemoveFromEventList+0xb0>)
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4a13      	ldr	r2, [pc, #76]	; (800aa4c <xTaskRemoveFromEventList+0xb4>)
 800aa00:	441a      	add	r2, r3
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f7fe fa4a 	bl	8008ea2 <vListInsertEnd>
 800aa0e:	e005      	b.n	800aa1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	3318      	adds	r3, #24
 800aa14:	4619      	mov	r1, r3
 800aa16:	480e      	ldr	r0, [pc, #56]	; (800aa50 <xTaskRemoveFromEventList+0xb8>)
 800aa18:	f7fe fa43 	bl	8008ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa20:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <xTaskRemoveFromEventList+0xbc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d905      	bls.n	800aa36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <xTaskRemoveFromEventList+0xc0>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e001      	b.n	800aa3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aa36:	2300      	movs	r3, #0
 800aa38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa3a:	697b      	ldr	r3, [r7, #20]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20000db8 	.word	0x20000db8
 800aa48:	20000d98 	.word	0x20000d98
 800aa4c:	200008c0 	.word	0x200008c0
 800aa50:	20000d50 	.word	0x20000d50
 800aa54:	200008bc 	.word	0x200008bc
 800aa58:	20000da4 	.word	0x20000da4

0800aa5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa64:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <vTaskInternalSetTimeOutState+0x24>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <vTaskInternalSetTimeOutState+0x28>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	605a      	str	r2, [r3, #4]
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	20000da8 	.word	0x20000da8
 800aa84:	20000d94 	.word	0x20000d94

0800aa88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d109      	bne.n	800aaac <xTaskCheckForTimeOut+0x24>
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	613b      	str	r3, [r7, #16]
 800aaaa:	e7fe      	b.n	800aaaa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d109      	bne.n	800aac6 <xTaskCheckForTimeOut+0x3e>
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e7fe      	b.n	800aac4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800aac6:	f001 fa11 	bl	800beec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aaca:	4b1d      	ldr	r3, [pc, #116]	; (800ab40 <xTaskCheckForTimeOut+0xb8>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d102      	bne.n	800aaea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e023      	b.n	800ab32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b15      	ldr	r3, [pc, #84]	; (800ab44 <xTaskCheckForTimeOut+0xbc>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d007      	beq.n	800ab06 <xTaskCheckForTimeOut+0x7e>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d302      	bcc.n	800ab06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab00:	2301      	movs	r3, #1
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	e015      	b.n	800ab32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d20b      	bcs.n	800ab28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1ad2      	subs	r2, r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff ff9d 	bl	800aa5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	61fb      	str	r3, [r7, #28]
 800ab26:	e004      	b.n	800ab32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab32:	f001 fa09 	bl	800bf48 <vPortExitCritical>

	return xReturn;
 800ab36:	69fb      	ldr	r3, [r7, #28]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	20000d94 	.word	0x20000d94
 800ab44:	20000da8 	.word	0x20000da8

0800ab48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <vTaskMissedYield+0x14>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
}
 800ab52:	bf00      	nop
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000da4 	.word	0x20000da4

0800ab60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab68:	f000 f852 	bl	800ac10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab6c:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <prvIdleTask+0x28>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d9f9      	bls.n	800ab68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <prvIdleTask+0x2c>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab84:	e7f0      	b.n	800ab68 <prvIdleTask+0x8>
 800ab86:	bf00      	nop
 800ab88:	200008c0 	.word	0x200008c0
 800ab8c:	e000ed04 	.word	0xe000ed04

0800ab90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab96:	2300      	movs	r3, #0
 800ab98:	607b      	str	r3, [r7, #4]
 800ab9a:	e00c      	b.n	800abb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4a12      	ldr	r2, [pc, #72]	; (800abf0 <prvInitialiseTaskLists+0x60>)
 800aba8:	4413      	add	r3, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe f94c 	bl	8008e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3301      	adds	r3, #1
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b37      	cmp	r3, #55	; 0x37
 800abba:	d9ef      	bls.n	800ab9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abbc:	480d      	ldr	r0, [pc, #52]	; (800abf4 <prvInitialiseTaskLists+0x64>)
 800abbe:	f7fe f943 	bl	8008e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abc2:	480d      	ldr	r0, [pc, #52]	; (800abf8 <prvInitialiseTaskLists+0x68>)
 800abc4:	f7fe f940 	bl	8008e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abc8:	480c      	ldr	r0, [pc, #48]	; (800abfc <prvInitialiseTaskLists+0x6c>)
 800abca:	f7fe f93d 	bl	8008e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abce:	480c      	ldr	r0, [pc, #48]	; (800ac00 <prvInitialiseTaskLists+0x70>)
 800abd0:	f7fe f93a 	bl	8008e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abd4:	480b      	ldr	r0, [pc, #44]	; (800ac04 <prvInitialiseTaskLists+0x74>)
 800abd6:	f7fe f937 	bl	8008e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abda:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <prvInitialiseTaskLists+0x78>)
 800abdc:	4a05      	ldr	r2, [pc, #20]	; (800abf4 <prvInitialiseTaskLists+0x64>)
 800abde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abe0:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <prvInitialiseTaskLists+0x7c>)
 800abe2:	4a05      	ldr	r2, [pc, #20]	; (800abf8 <prvInitialiseTaskLists+0x68>)
 800abe4:	601a      	str	r2, [r3, #0]
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200008c0 	.word	0x200008c0
 800abf4:	20000d20 	.word	0x20000d20
 800abf8:	20000d34 	.word	0x20000d34
 800abfc:	20000d50 	.word	0x20000d50
 800ac00:	20000d64 	.word	0x20000d64
 800ac04:	20000d7c 	.word	0x20000d7c
 800ac08:	20000d48 	.word	0x20000d48
 800ac0c:	20000d4c 	.word	0x20000d4c

0800ac10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac16:	e019      	b.n	800ac4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac18:	f001 f968 	bl	800beec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <prvCheckTasksWaitingTermination+0x4c>)
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3304      	adds	r3, #4
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe f997 	bl	8008f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <prvCheckTasksWaitingTermination+0x50>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	4a0a      	ldr	r2, [pc, #40]	; (800ac60 <prvCheckTasksWaitingTermination+0x50>)
 800ac36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <prvCheckTasksWaitingTermination+0x54>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <prvCheckTasksWaitingTermination+0x54>)
 800ac40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac42:	f001 f981 	bl	800bf48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f80e 	bl	800ac68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <prvCheckTasksWaitingTermination+0x54>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e1      	bne.n	800ac18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20000d64 	.word	0x20000d64
 800ac60:	20000d90 	.word	0x20000d90
 800ac64:	20000d78 	.word	0x20000d78

0800ac68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d108      	bne.n	800ac8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 fb10 	bl	800c2a4 <vPortFree>
				vPortFree( pxTCB );
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f001 fb0d 	bl	800c2a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac8a:	e017      	b.n	800acbc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d103      	bne.n	800ac9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 fb04 	bl	800c2a4 <vPortFree>
	}
 800ac9c:	e00e      	b.n	800acbc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d009      	beq.n	800acbc <prvDeleteTCB+0x54>
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e7fe      	b.n	800acba <prvDeleteTCB+0x52>
	}
 800acbc:	bf00      	nop
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acca:	4b0c      	ldr	r3, [pc, #48]	; (800acfc <prvResetNextTaskUnblockTime+0x38>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <prvResetNextTaskUnblockTime+0x3c>)
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295
 800acda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800acdc:	e008      	b.n	800acf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acde:	4b07      	ldr	r3, [pc, #28]	; (800acfc <prvResetNextTaskUnblockTime+0x38>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	4a04      	ldr	r2, [pc, #16]	; (800ad00 <prvResetNextTaskUnblockTime+0x3c>)
 800acee:	6013      	str	r3, [r2, #0]
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	20000d48 	.word	0x20000d48
 800ad00:	20000db0 	.word	0x20000db0

0800ad04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ad0a:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <xTaskGetCurrentTaskHandle+0x1c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ad10:	687b      	ldr	r3, [r7, #4]
	}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	200008bc 	.word	0x200008bc

0800ad24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <xTaskGetSchedulerState+0x34>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad32:	2301      	movs	r3, #1
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	e008      	b.n	800ad4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad38:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <xTaskGetSchedulerState+0x38>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d102      	bne.n	800ad46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad40:	2302      	movs	r3, #2
 800ad42:	607b      	str	r3, [r7, #4]
 800ad44:	e001      	b.n	800ad4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad46:	2300      	movs	r3, #0
 800ad48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad4a:	687b      	ldr	r3, [r7, #4]
	}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	20000d9c 	.word	0x20000d9c
 800ad5c:	20000db8 	.word	0x20000db8

0800ad60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d051      	beq.n	800ae1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7a:	4b2a      	ldr	r3, [pc, #168]	; (800ae24 <xTaskPriorityInherit+0xc4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d241      	bcs.n	800ae08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	db06      	blt.n	800ad9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad8c:	4b25      	ldr	r3, [pc, #148]	; (800ae24 <xTaskPriorityInherit+0xc4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	6959      	ldr	r1, [r3, #20]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4a1f      	ldr	r2, [pc, #124]	; (800ae28 <xTaskPriorityInherit+0xc8>)
 800adac:	4413      	add	r3, r2
 800adae:	4299      	cmp	r1, r3
 800adb0:	d122      	bne.n	800adf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe f8d0 	bl	8008f5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800adbc:	4b19      	ldr	r3, [pc, #100]	; (800ae24 <xTaskPriorityInherit+0xc4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adca:	4b18      	ldr	r3, [pc, #96]	; (800ae2c <xTaskPriorityInherit+0xcc>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d903      	bls.n	800adda <xTaskPriorityInherit+0x7a>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <xTaskPriorityInherit+0xcc>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <xTaskPriorityInherit+0xc8>)
 800ade8:	441a      	add	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	3304      	adds	r3, #4
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fe f856 	bl	8008ea2 <vListInsertEnd>
 800adf6:	e004      	b.n	800ae02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800adf8:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <xTaskPriorityInherit+0xc4>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae02:	2301      	movs	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	e008      	b.n	800ae1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <xTaskPriorityInherit+0xc4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d201      	bcs.n	800ae1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae16:	2301      	movs	r3, #1
 800ae18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
	}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	200008bc 	.word	0x200008bc
 800ae28:	200008c0 	.word	0x200008c0
 800ae2c:	20000d98 	.word	0x20000d98

0800ae30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d054      	beq.n	800aef0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae46:	4b2d      	ldr	r3, [pc, #180]	; (800aefc <xTaskPriorityDisinherit+0xcc>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d009      	beq.n	800ae64 <xTaskPriorityDisinherit+0x34>
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e7fe      	b.n	800ae62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d109      	bne.n	800ae80 <xTaskPriorityDisinherit+0x50>
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	60bb      	str	r3, [r7, #8]
 800ae7e:	e7fe      	b.n	800ae7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae84:	1e5a      	subs	r2, r3, #1
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d02c      	beq.n	800aef0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d128      	bne.n	800aef0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	3304      	adds	r3, #4
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe f85a 	bl	8008f5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec0:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <xTaskPriorityDisinherit+0xd0>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d903      	bls.n	800aed0 <xTaskPriorityDisinherit+0xa0>
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aecc:	4a0c      	ldr	r2, [pc, #48]	; (800af00 <xTaskPriorityDisinherit+0xd0>)
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4a09      	ldr	r2, [pc, #36]	; (800af04 <xTaskPriorityDisinherit+0xd4>)
 800aede:	441a      	add	r2, r3
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fd ffdb 	bl	8008ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aef0:	697b      	ldr	r3, [r7, #20]
	}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	200008bc 	.word	0x200008bc
 800af00:	20000d98 	.word	0x20000d98
 800af04:	200008c0 	.word	0x200008c0

0800af08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af16:	2301      	movs	r3, #1
 800af18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d068      	beq.n	800aff2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <vTaskPriorityDisinheritAfterTimeout+0x34>
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e7fe      	b.n	800af3a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d902      	bls.n	800af4c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	e002      	b.n	800af52 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	69fa      	ldr	r2, [r7, #28]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d04a      	beq.n	800aff2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	429a      	cmp	r2, r3
 800af64:	d145      	bne.n	800aff2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800af66:	4b25      	ldr	r3, [pc, #148]	; (800affc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d109      	bne.n	800af84 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60bb      	str	r3, [r7, #8]
 800af82:	e7fe      	b.n	800af82 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	69fa      	ldr	r2, [r7, #28]
 800af8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	db04      	blt.n	800afa2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	6959      	ldr	r1, [r3, #20]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	4613      	mov	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4a13      	ldr	r2, [pc, #76]	; (800b000 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800afb2:	4413      	add	r3, r2
 800afb4:	4299      	cmp	r1, r3
 800afb6:	d11c      	bne.n	800aff2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	3304      	adds	r3, #4
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fd ffcd 	bl	8008f5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc6:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d903      	bls.n	800afd6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	4a0c      	ldr	r2, [pc, #48]	; (800b004 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4a07      	ldr	r2, [pc, #28]	; (800b000 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800afe4:	441a      	add	r2, r3
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	3304      	adds	r3, #4
 800afea:	4619      	mov	r1, r3
 800afec:	4610      	mov	r0, r2
 800afee:	f7fd ff58 	bl	8008ea2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aff2:	bf00      	nop
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	200008bc 	.word	0x200008bc
 800b000:	200008c0 	.word	0x200008c0
 800b004:	20000d98 	.word	0x20000d98

0800b008 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b00c:	4b07      	ldr	r3, [pc, #28]	; (800b02c <pvTaskIncrementMutexHeldCount+0x24>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <pvTaskIncrementMutexHeldCount+0x24>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b01a:	3201      	adds	r2, #1
 800b01c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b01e:	4b03      	ldr	r3, [pc, #12]	; (800b02c <pvTaskIncrementMutexHeldCount+0x24>)
 800b020:	681b      	ldr	r3, [r3, #0]
	}
 800b022:	4618      	mov	r0, r3
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	200008bc 	.word	0x200008bc

0800b030 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b03e:	f000 ff55 	bl	800beec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b042:	4b26      	ldr	r3, [pc, #152]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d01a      	beq.n	800b086 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b050:	4b22      	ldr	r3, [pc, #136]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	43d2      	mvns	r2, r2
 800b05a:	400a      	ands	r2, r1
 800b05c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b05e:	4b1f      	ldr	r3, [pc, #124]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b06e:	2101      	movs	r1, #1
 800b070:	6838      	ldr	r0, [r7, #0]
 800b072:	f000 f9c3 	bl	800b3fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b076:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <xTaskNotifyWait+0xb0>)
 800b078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b086:	f000 ff5f 	bl	800bf48 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b08a:	f000 ff2f 	bl	800beec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b094:	4b11      	ldr	r3, [pc, #68]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b09e:	4b0f      	ldr	r3, [pc, #60]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d002      	beq.n	800b0b2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e008      	b.n	800b0c4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b0b2:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	43d2      	mvns	r2, r2
 800b0bc:	400a      	ands	r2, r1
 800b0be:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <xTaskNotifyWait+0xac>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b0ce:	f000 ff3b 	bl	800bf48 <vPortExitCritical>

		return xReturn;
 800b0d2:	697b      	ldr	r3, [r7, #20]
	}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	200008bc 	.word	0x200008bc
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	; 0x28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d109      	bne.n	800b112 <xTaskGenericNotify+0x2e>
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	e7fe      	b.n	800b110 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b116:	f000 fee9 	bl	800beec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b12e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d827      	bhi.n	800b18e <xTaskGenericNotify+0xaa>
 800b13e:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <xTaskGenericNotify+0x60>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b1ad 	.word	0x0800b1ad
 800b148:	0800b159 	.word	0x0800b159
 800b14c:	0800b167 	.word	0x0800b167
 800b150:	0800b173 	.word	0x0800b173
 800b154:	0800b17b 	.word	0x0800b17b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	431a      	orrs	r2, r3
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b164:	e025      	b.n	800b1b2 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b170:	e01f      	b.n	800b1b2 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b178:	e01b      	b.n	800b1b2 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b17a:	7ffb      	ldrb	r3, [r7, #31]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d003      	beq.n	800b188 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b186:	e014      	b.n	800b1b2 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800b188:	2300      	movs	r3, #0
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b18c:	e011      	b.n	800b1b2 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d00b      	beq.n	800b1b0 <xTaskGenericNotify+0xcc>
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	e7fe      	b.n	800b1aa <xTaskGenericNotify+0xc6>
					break;
 800b1ac:	bf00      	nop
 800b1ae:	e000      	b.n	800b1b2 <xTaskGenericNotify+0xce>

					break;
 800b1b0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d139      	bne.n	800b22c <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fd fecd 	bl	8008f5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	; (800b23c <xTaskGenericNotify+0x158>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d903      	bls.n	800b1d6 <xTaskGenericNotify+0xf2>
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d2:	4a1a      	ldr	r2, [pc, #104]	; (800b23c <xTaskGenericNotify+0x158>)
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4a17      	ldr	r2, [pc, #92]	; (800b240 <xTaskGenericNotify+0x15c>)
 800b1e4:	441a      	add	r2, r3
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	f7fd fe58 	bl	8008ea2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <xTaskGenericNotify+0x12a>
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	613b      	str	r3, [r7, #16]
 800b20c:	e7fe      	b.n	800b20c <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <xTaskGenericNotify+0x160>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	429a      	cmp	r2, r3
 800b21a:	d907      	bls.n	800b22c <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b21c:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <xTaskGenericNotify+0x164>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b22c:	f000 fe8c 	bl	800bf48 <vPortExitCritical>

		return xReturn;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b232:	4618      	mov	r0, r3
 800b234:	3728      	adds	r7, #40	; 0x28
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000d98 	.word	0x20000d98
 800b240:	200008c0 	.word	0x200008c0
 800b244:	200008bc 	.word	0x200008bc
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08e      	sub	sp, #56	; 0x38
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	4613      	mov	r3, r2
 800b25a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b25c:	2301      	movs	r3, #1
 800b25e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <xTaskGenericNotifyFromISR+0x2e>
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
 800b278:	e7fe      	b.n	800b278 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b27a:	f000 ff13 	bl	800c0a4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b282:	f3ef 8211 	mrs	r2, BASEPRI
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	623a      	str	r2, [r7, #32]
 800b298:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b29a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b29c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d829      	bhi.n	800b318 <xTaskGenericNotifyFromISR+0xcc>
 800b2c4:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <xTaskGenericNotifyFromISR+0x80>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b337 	.word	0x0800b337
 800b2d0:	0800b2e1 	.word	0x0800b2e1
 800b2d4:	0800b2ef 	.word	0x0800b2ef
 800b2d8:	0800b2fb 	.word	0x0800b2fb
 800b2dc:	0800b303 	.word	0x0800b303
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b2ec:	e026      	b.n	800b33c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b2f8:	e020      	b.n	800b33c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b300:	e01c      	b.n	800b33c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b306:	2b02      	cmp	r3, #2
 800b308:	d003      	beq.n	800b312 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b310:	e014      	b.n	800b33c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800b312:	2300      	movs	r3, #0
 800b314:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b316:	e011      	b.n	800b33c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d00b      	beq.n	800b33a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	61bb      	str	r3, [r7, #24]
 800b334:	e7fe      	b.n	800b334 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800b336:	bf00      	nop
 800b338:	e000      	b.n	800b33c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800b33a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b33c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b340:	2b01      	cmp	r3, #1
 800b342:	d145      	bne.n	800b3d0 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d009      	beq.n	800b360 <xTaskGenericNotifyFromISR+0x114>
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	e7fe      	b.n	800b35e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b360:	4b20      	ldr	r3, [pc, #128]	; (800b3e4 <xTaskGenericNotifyFromISR+0x198>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d11d      	bne.n	800b3a4 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	3304      	adds	r3, #4
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fd fdf5 	bl	8008f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b376:	4b1c      	ldr	r3, [pc, #112]	; (800b3e8 <xTaskGenericNotifyFromISR+0x19c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d903      	bls.n	800b386 <xTaskGenericNotifyFromISR+0x13a>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b382:	4a19      	ldr	r2, [pc, #100]	; (800b3e8 <xTaskGenericNotifyFromISR+0x19c>)
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4a16      	ldr	r2, [pc, #88]	; (800b3ec <xTaskGenericNotifyFromISR+0x1a0>)
 800b394:	441a      	add	r2, r3
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	3304      	adds	r3, #4
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f7fd fd80 	bl	8008ea2 <vListInsertEnd>
 800b3a2:	e005      	b.n	800b3b0 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	3318      	adds	r3, #24
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4811      	ldr	r0, [pc, #68]	; (800b3f0 <xTaskGenericNotifyFromISR+0x1a4>)
 800b3ac:	f7fd fd79 	bl	8008ea2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b4:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <xTaskGenericNotifyFromISR+0x1a8>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d908      	bls.n	800b3d0 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b3ca:	4b0b      	ldr	r3, [pc, #44]	; (800b3f8 <xTaskGenericNotifyFromISR+0x1ac>)
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3738      	adds	r7, #56	; 0x38
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	20000db8 	.word	0x20000db8
 800b3e8:	20000d98 	.word	0x20000d98
 800b3ec:	200008c0 	.word	0x200008c0
 800b3f0:	20000d50 	.word	0x20000d50
 800b3f4:	200008bc 	.word	0x200008bc
 800b3f8:	20000da4 	.word	0x20000da4

0800b3fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b406:	4b21      	ldr	r3, [pc, #132]	; (800b48c <prvAddCurrentTaskToDelayedList+0x90>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b40c:	4b20      	ldr	r3, [pc, #128]	; (800b490 <prvAddCurrentTaskToDelayedList+0x94>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3304      	adds	r3, #4
 800b412:	4618      	mov	r0, r3
 800b414:	f7fd fda2 	bl	8008f5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41e:	d10a      	bne.n	800b436 <prvAddCurrentTaskToDelayedList+0x3a>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d007      	beq.n	800b436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b426:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <prvAddCurrentTaskToDelayedList+0x94>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4819      	ldr	r0, [pc, #100]	; (800b494 <prvAddCurrentTaskToDelayedList+0x98>)
 800b430:	f7fd fd37 	bl	8008ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b434:	e026      	b.n	800b484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b43e:	4b14      	ldr	r3, [pc, #80]	; (800b490 <prvAddCurrentTaskToDelayedList+0x94>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d209      	bcs.n	800b462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b44e:	4b12      	ldr	r3, [pc, #72]	; (800b498 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	4b0f      	ldr	r3, [pc, #60]	; (800b490 <prvAddCurrentTaskToDelayedList+0x94>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7fd fd45 	bl	8008eea <vListInsert>
}
 800b460:	e010      	b.n	800b484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b462:	4b0e      	ldr	r3, [pc, #56]	; (800b49c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <prvAddCurrentTaskToDelayedList+0x94>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f7fd fd3b 	bl	8008eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b474:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d202      	bcs.n	800b484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b47e:	4a08      	ldr	r2, [pc, #32]	; (800b4a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	6013      	str	r3, [r2, #0]
}
 800b484:	bf00      	nop
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20000d94 	.word	0x20000d94
 800b490:	200008bc 	.word	0x200008bc
 800b494:	20000d7c 	.word	0x20000d7c
 800b498:	20000d4c 	.word	0x20000d4c
 800b49c:	20000d48 	.word	0x20000d48
 800b4a0:	20000db0 	.word	0x20000db0

0800b4a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b4ae:	f000 fb97 	bl	800bbe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b4b2:	4b1c      	ldr	r3, [pc, #112]	; (800b524 <xTimerCreateTimerTask+0x80>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d021      	beq.n	800b4fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4c2:	1d3a      	adds	r2, r7, #4
 800b4c4:	f107 0108 	add.w	r1, r7, #8
 800b4c8:	f107 030c 	add.w	r3, r7, #12
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fd fca1 	bl	8008e14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	9202      	str	r2, [sp, #8]
 800b4da:	9301      	str	r3, [sp, #4]
 800b4dc:	2302      	movs	r3, #2
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	460a      	mov	r2, r1
 800b4e4:	4910      	ldr	r1, [pc, #64]	; (800b528 <xTimerCreateTimerTask+0x84>)
 800b4e6:	4811      	ldr	r0, [pc, #68]	; (800b52c <xTimerCreateTimerTask+0x88>)
 800b4e8:	f7fe fe04 	bl	800a0f4 <xTaskCreateStatic>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	4b10      	ldr	r3, [pc, #64]	; (800b530 <xTimerCreateTimerTask+0x8c>)
 800b4f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4f2:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <xTimerCreateTimerTask+0x8c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d109      	bne.n	800b518 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	613b      	str	r3, [r7, #16]
 800b516:	e7fe      	b.n	800b516 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b518:	697b      	ldr	r3, [r7, #20]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000dec 	.word	0x20000dec
 800b528:	0800e640 	.word	0x0800e640
 800b52c:	0800b795 	.word	0x0800b795
 800b530:	20000df0 	.word	0x20000df0

0800b534 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af02      	add	r7, sp, #8
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b542:	202c      	movs	r0, #44	; 0x2c
 800b544:	f000 fdec 	bl	800c120 <pvPortMalloc>
 800b548:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00d      	beq.n	800b56c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	68b9      	ldr	r1, [r7, #8]
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 f841 	bl	800b5ee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b56c:	697b      	ldr	r3, [r7, #20]
	}
 800b56e:	4618      	mov	r0, r3
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b576:	b580      	push	{r7, lr}
 800b578:	b08a      	sub	sp, #40	; 0x28
 800b57a:	af02      	add	r7, sp, #8
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	607a      	str	r2, [r7, #4]
 800b582:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b584:	232c      	movs	r3, #44	; 0x2c
 800b586:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2b2c      	cmp	r3, #44	; 0x2c
 800b58c:	d009      	beq.n	800b5a2 <xTimerCreateStatic+0x2c>
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	61bb      	str	r3, [r7, #24]
 800b5a0:	e7fe      	b.n	800b5a0 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <xTimerCreateStatic+0x48>
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	e7fe      	b.n	800b5bc <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00d      	beq.n	800b5e4 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 f805 	bl	800b5ee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
	}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3720      	adds	r7, #32
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <prvInitialiseNewTimer+0x28>
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e7fe      	b.n	800b614 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d01e      	beq.n	800b65a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b61c:	f000 fae0 	bl	800bbe0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	6a3a      	ldr	r2, [r7, #32]
 800b636:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	3304      	adds	r3, #4
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fd fc23 	bl	8008e88 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d008      	beq.n	800b65a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b64e:	f043 0304 	orr.w	r3, r3, #4
 800b652:	b2da      	uxtb	r2, r3
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b65a:	bf00      	nop
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08a      	sub	sp, #40	; 0x28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b672:	2300      	movs	r3, #0
 800b674:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <xTimerGenericCommand+0x2c>
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	623b      	str	r3, [r7, #32]
 800b68e:	e7fe      	b.n	800b68e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b690:	4b19      	ldr	r3, [pc, #100]	; (800b6f8 <xTimerGenericCommand+0x94>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d02a      	beq.n	800b6ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	dc18      	bgt.n	800b6dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6aa:	f7ff fb3b 	bl	800ad24 <xTaskGetSchedulerState>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d109      	bne.n	800b6c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6b4:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <xTimerGenericCommand+0x94>)
 800b6b6:	6818      	ldr	r0, [r3, #0]
 800b6b8:	f107 0110 	add.w	r1, r7, #16
 800b6bc:	2300      	movs	r3, #0
 800b6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c0:	f7fd fece 	bl	8009460 <xQueueGenericSend>
 800b6c4:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c6:	e012      	b.n	800b6ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6c8:	4b0b      	ldr	r3, [pc, #44]	; (800b6f8 <xTimerGenericCommand+0x94>)
 800b6ca:	6818      	ldr	r0, [r3, #0]
 800b6cc:	f107 0110 	add.w	r1, r7, #16
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7fd fec4 	bl	8009460 <xQueueGenericSend>
 800b6d8:	6278      	str	r0, [r7, #36]	; 0x24
 800b6da:	e008      	b.n	800b6ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <xTimerGenericCommand+0x94>)
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	f107 0110 	add.w	r1, r7, #16
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	f7fd ffb4 	bl	8009654 <xQueueGenericSendFromISR>
 800b6ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3728      	adds	r7, #40	; 0x28
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20000dec 	.word	0x20000dec

0800b6fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af02      	add	r7, sp, #8
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	4b22      	ldr	r3, [pc, #136]	; (800b790 <prvProcessExpiredTimer+0x94>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	3304      	adds	r3, #4
 800b714:	4618      	mov	r0, r3
 800b716:	f7fd fc21 	bl	8008f5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b720:	f003 0304 	and.w	r3, r3, #4
 800b724:	2b00      	cmp	r3, #0
 800b726:	d021      	beq.n	800b76c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	699a      	ldr	r2, [r3, #24]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	18d1      	adds	r1, r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	6978      	ldr	r0, [r7, #20]
 800b736:	f000 f8d1 	bl	800b8dc <prvInsertTimerInActiveList>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d01e      	beq.n	800b77e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b740:	2300      	movs	r3, #0
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	2300      	movs	r3, #0
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	2100      	movs	r1, #0
 800b74a:	6978      	ldr	r0, [r7, #20]
 800b74c:	f7ff ff8a 	bl	800b664 <xTimerGenericCommand>
 800b750:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d112      	bne.n	800b77e <prvProcessExpiredTimer+0x82>
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	60fb      	str	r3, [r7, #12]
 800b76a:	e7fe      	b.n	800b76a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b772:	f023 0301 	bic.w	r3, r3, #1
 800b776:	b2da      	uxtb	r2, r3
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	4798      	blx	r3
}
 800b786:	bf00      	nop
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	20000de4 	.word	0x20000de4

0800b794 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b79c:	f107 0308 	add.w	r3, r7, #8
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 f857 	bl	800b854 <prvGetNextExpireTime>
 800b7a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f803 	bl	800b7b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7b2:	f000 f8d5 	bl	800b960 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7b6:	e7f1      	b.n	800b79c <prvTimerTask+0x8>

0800b7b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7c2:	f7fe fecd 	bl	800a560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7c6:	f107 0308 	add.w	r3, r7, #8
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f866 	bl	800b89c <prvSampleTimeNow>
 800b7d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d130      	bne.n	800b83a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <prvProcessTimerOrBlockTask+0x3c>
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d806      	bhi.n	800b7f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7e6:	f7fe fec9 	bl	800a57c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7ea:	68f9      	ldr	r1, [r7, #12]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ff85 	bl	800b6fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7f2:	e024      	b.n	800b83e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d008      	beq.n	800b80c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7fa:	4b13      	ldr	r3, [pc, #76]	; (800b848 <prvProcessTimerOrBlockTask+0x90>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <prvProcessTimerOrBlockTask+0x50>
 800b804:	2301      	movs	r3, #1
 800b806:	e000      	b.n	800b80a <prvProcessTimerOrBlockTask+0x52>
 800b808:	2300      	movs	r3, #0
 800b80a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b80c:	4b0f      	ldr	r3, [pc, #60]	; (800b84c <prvProcessTimerOrBlockTask+0x94>)
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	4619      	mov	r1, r3
 800b81a:	f7fe fc37 	bl	800a08c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b81e:	f7fe fead 	bl	800a57c <xTaskResumeAll>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b828:	4b09      	ldr	r3, [pc, #36]	; (800b850 <prvProcessTimerOrBlockTask+0x98>)
 800b82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	f3bf 8f6f 	isb	sy
}
 800b838:	e001      	b.n	800b83e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b83a:	f7fe fe9f 	bl	800a57c <xTaskResumeAll>
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000de8 	.word	0x20000de8
 800b84c:	20000dec 	.word	0x20000dec
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b85c:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <prvGetNextExpireTime+0x44>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <prvGetNextExpireTime+0x16>
 800b866:	2201      	movs	r2, #1
 800b868:	e000      	b.n	800b86c <prvGetNextExpireTime+0x18>
 800b86a:	2200      	movs	r2, #0
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d105      	bne.n	800b884 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b878:	4b07      	ldr	r3, [pc, #28]	; (800b898 <prvGetNextExpireTime+0x44>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	60fb      	str	r3, [r7, #12]
 800b882:	e001      	b.n	800b888 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b884:	2300      	movs	r3, #0
 800b886:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b888:	68fb      	ldr	r3, [r7, #12]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	20000de4 	.word	0x20000de4

0800b89c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8a4:	f7fe ff06 	bl	800a6b4 <xTaskGetTickCount>
 800b8a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8aa:	4b0b      	ldr	r3, [pc, #44]	; (800b8d8 <prvSampleTimeNow+0x3c>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d205      	bcs.n	800b8c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8b4:	f000 f930 	bl	800bb18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	e002      	b.n	800b8c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8c6:	4a04      	ldr	r2, [pc, #16]	; (800b8d8 <prvSampleTimeNow+0x3c>)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000df4 	.word	0x20000df4

0800b8dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d812      	bhi.n	800b928 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	1ad2      	subs	r2, r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d302      	bcc.n	800b916 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b910:	2301      	movs	r3, #1
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e01b      	b.n	800b94e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b916:	4b10      	ldr	r3, [pc, #64]	; (800b958 <prvInsertTimerInActiveList+0x7c>)
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4619      	mov	r1, r3
 800b920:	4610      	mov	r0, r2
 800b922:	f7fd fae2 	bl	8008eea <vListInsert>
 800b926:	e012      	b.n	800b94e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d206      	bcs.n	800b93e <prvInsertTimerInActiveList+0x62>
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d302      	bcc.n	800b93e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b938:	2301      	movs	r3, #1
 800b93a:	617b      	str	r3, [r7, #20]
 800b93c:	e007      	b.n	800b94e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b93e:	4b07      	ldr	r3, [pc, #28]	; (800b95c <prvInsertTimerInActiveList+0x80>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3304      	adds	r3, #4
 800b946:	4619      	mov	r1, r3
 800b948:	4610      	mov	r0, r2
 800b94a:	f7fd face 	bl	8008eea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b94e:	697b      	ldr	r3, [r7, #20]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000de8 	.word	0x20000de8
 800b95c:	20000de4 	.word	0x20000de4

0800b960 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08e      	sub	sp, #56	; 0x38
 800b964:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b966:	e0c6      	b.n	800baf6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da17      	bge.n	800b99e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b96e:	1d3b      	adds	r3, r7, #4
 800b970:	3304      	adds	r3, #4
 800b972:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d109      	bne.n	800b98e <prvProcessReceivedCommands+0x2e>
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	61fb      	str	r3, [r7, #28]
 800b98c:	e7fe      	b.n	800b98c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b994:	6850      	ldr	r0, [r2, #4]
 800b996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b998:	6892      	ldr	r2, [r2, #8]
 800b99a:	4611      	mov	r1, r2
 800b99c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f2c0 80a7 	blt.w	800baf4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d004      	beq.n	800b9bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fd fad0 	bl	8008f5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9bc:	463b      	mov	r3, r7
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff ff6c 	bl	800b89c <prvSampleTimeNow>
 800b9c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b09      	cmp	r3, #9
 800b9ca:	f200 8094 	bhi.w	800baf6 <prvProcessReceivedCommands+0x196>
 800b9ce:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <prvProcessReceivedCommands+0x74>)
 800b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d4:	0800b9fd 	.word	0x0800b9fd
 800b9d8:	0800b9fd 	.word	0x0800b9fd
 800b9dc:	0800b9fd 	.word	0x0800b9fd
 800b9e0:	0800ba6f 	.word	0x0800ba6f
 800b9e4:	0800ba83 	.word	0x0800ba83
 800b9e8:	0800bacb 	.word	0x0800bacb
 800b9ec:	0800b9fd 	.word	0x0800b9fd
 800b9f0:	0800b9fd 	.word	0x0800b9fd
 800b9f4:	0800ba6f 	.word	0x0800ba6f
 800b9f8:	0800ba83 	.word	0x0800ba83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba02:	f043 0301 	orr.w	r3, r3, #1
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	18d1      	adds	r1, r2, r3
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba1c:	f7ff ff5e 	bl	800b8dc <prvInsertTimerInActiveList>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d067      	beq.n	800baf6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d05c      	beq.n	800baf6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	441a      	add	r2, r3
 800ba44:	2300      	movs	r3, #0
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4e:	f7ff fe09 	bl	800b664 <xTimerGenericCommand>
 800ba52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d14d      	bne.n	800baf6 <prvProcessReceivedCommands+0x196>
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	61bb      	str	r3, [r7, #24]
 800ba6c:	e7fe      	b.n	800ba6c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba74:	f023 0301 	bic.w	r3, r3, #1
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ba80:	e039      	b.n	800baf6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba88:	f043 0301 	orr.w	r3, r3, #1
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d109      	bne.n	800bab6 <prvProcessReceivedCommands+0x156>
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	e7fe      	b.n	800bab4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	18d1      	adds	r1, r2, r3
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac4:	f7ff ff0a 	bl	800b8dc <prvInsertTimerInActiveList>
					break;
 800bac8:	e015      	b.n	800baf6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d103      	bne.n	800bae0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800bad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bada:	f000 fbe3 	bl	800c2a4 <vPortFree>
 800bade:	e00a      	b.n	800baf6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae6:	f023 0301 	bic.w	r3, r3, #1
 800baea:	b2da      	uxtb	r2, r3
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800baf2:	e000      	b.n	800baf6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800baf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baf6:	4b07      	ldr	r3, [pc, #28]	; (800bb14 <prvProcessReceivedCommands+0x1b4>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	1d39      	adds	r1, r7, #4
 800bafc:	2200      	movs	r2, #0
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fd fec6 	bl	8009890 <xQueueReceive>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f47f af2e 	bne.w	800b968 <prvProcessReceivedCommands+0x8>
	}
}
 800bb0c:	bf00      	nop
 800bb0e:	3730      	adds	r7, #48	; 0x30
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20000dec 	.word	0x20000dec

0800bb18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb1e:	e047      	b.n	800bbb0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb20:	4b2d      	ldr	r3, [pc, #180]	; (800bbd8 <prvSwitchTimerLists+0xc0>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb2a:	4b2b      	ldr	r3, [pc, #172]	; (800bbd8 <prvSwitchTimerLists+0xc0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fd fa0f 	bl	8008f5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d02d      	beq.n	800bbb0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d90e      	bls.n	800bb84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb72:	4b19      	ldr	r3, [pc, #100]	; (800bbd8 <prvSwitchTimerLists+0xc0>)
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fd f9b4 	bl	8008eea <vListInsert>
 800bb82:	e015      	b.n	800bbb0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb84:	2300      	movs	r3, #0
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff fd68 	bl	800b664 <xTimerGenericCommand>
 800bb94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d109      	bne.n	800bbb0 <prvSwitchTimerLists+0x98>
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	603b      	str	r3, [r7, #0]
 800bbae:	e7fe      	b.n	800bbae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbb0:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <prvSwitchTimerLists+0xc0>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1b2      	bne.n	800bb20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbba:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <prvSwitchTimerLists+0xc0>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <prvSwitchTimerLists+0xc4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a04      	ldr	r2, [pc, #16]	; (800bbd8 <prvSwitchTimerLists+0xc0>)
 800bbc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbc8:	4a04      	ldr	r2, [pc, #16]	; (800bbdc <prvSwitchTimerLists+0xc4>)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	6013      	str	r3, [r2, #0]
}
 800bbce:	bf00      	nop
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20000de4 	.word	0x20000de4
 800bbdc:	20000de8 	.word	0x20000de8

0800bbe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbe6:	f000 f981 	bl	800beec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbea:	4b15      	ldr	r3, [pc, #84]	; (800bc40 <prvCheckForValidListAndQueue+0x60>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d120      	bne.n	800bc34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bbf2:	4814      	ldr	r0, [pc, #80]	; (800bc44 <prvCheckForValidListAndQueue+0x64>)
 800bbf4:	f7fd f928 	bl	8008e48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbf8:	4813      	ldr	r0, [pc, #76]	; (800bc48 <prvCheckForValidListAndQueue+0x68>)
 800bbfa:	f7fd f925 	bl	8008e48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbfe:	4b13      	ldr	r3, [pc, #76]	; (800bc4c <prvCheckForValidListAndQueue+0x6c>)
 800bc00:	4a10      	ldr	r2, [pc, #64]	; (800bc44 <prvCheckForValidListAndQueue+0x64>)
 800bc02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc04:	4b12      	ldr	r3, [pc, #72]	; (800bc50 <prvCheckForValidListAndQueue+0x70>)
 800bc06:	4a10      	ldr	r2, [pc, #64]	; (800bc48 <prvCheckForValidListAndQueue+0x68>)
 800bc08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	4b11      	ldr	r3, [pc, #68]	; (800bc54 <prvCheckForValidListAndQueue+0x74>)
 800bc10:	4a11      	ldr	r2, [pc, #68]	; (800bc58 <prvCheckForValidListAndQueue+0x78>)
 800bc12:	2110      	movs	r1, #16
 800bc14:	200a      	movs	r0, #10
 800bc16:	f7fd fa33 	bl	8009080 <xQueueGenericCreateStatic>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <prvCheckForValidListAndQueue+0x60>)
 800bc1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc20:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <prvCheckForValidListAndQueue+0x60>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <prvCheckForValidListAndQueue+0x60>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	490b      	ldr	r1, [pc, #44]	; (800bc5c <prvCheckForValidListAndQueue+0x7c>)
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe f9da 	bl	8009fe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc34:	f000 f988 	bl	800bf48 <vPortExitCritical>
}
 800bc38:	bf00      	nop
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20000dec 	.word	0x20000dec
 800bc44:	20000dbc 	.word	0x20000dbc
 800bc48:	20000dd0 	.word	0x20000dd0
 800bc4c:	20000de4 	.word	0x20000de4
 800bc50:	20000de8 	.word	0x20000de8
 800bc54:	20000e98 	.word	0x20000e98
 800bc58:	20000df8 	.word	0x20000df8
 800bc5c:	0800e648 	.word	0x0800e648

0800bc60 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d109      	bne.n	800bc86 <pvTimerGetTimerID+0x26>
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e7fe      	b.n	800bc84 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800bc86:	f000 f931 	bl	800beec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800bc90:	f000 f95a 	bl	800bf48 <vPortExitCritical>

	return pvReturn;
 800bc94:	693b      	ldr	r3, [r7, #16]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3b04      	subs	r3, #4
 800bcb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bcb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3b04      	subs	r3, #4
 800bcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f023 0201 	bic.w	r2, r3, #1
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3b04      	subs	r3, #4
 800bcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcd0:	4a0c      	ldr	r2, [pc, #48]	; (800bd04 <pxPortInitialiseStack+0x64>)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3b14      	subs	r3, #20
 800bcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3b04      	subs	r3, #4
 800bce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f06f 0202 	mvn.w	r2, #2
 800bcee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3b20      	subs	r3, #32
 800bcf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	0800bd09 	.word	0x0800bd09

0800bd08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd12:	4b11      	ldr	r3, [pc, #68]	; (800bd58 <prvTaskExitError+0x50>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1a:	d009      	beq.n	800bd30 <prvTaskExitError+0x28>
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	e7fe      	b.n	800bd2e <prvTaskExitError+0x26>
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd42:	bf00      	nop
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0fc      	beq.n	800bd44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd4a:	bf00      	nop
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	2000000c 	.word	0x2000000c
 800bd5c:	00000000 	.word	0x00000000

0800bd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd60:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <pxCurrentTCBConst2>)
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	6808      	ldr	r0, [r1, #0]
 800bd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6a:	f380 8809 	msr	PSP, r0
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f04f 0000 	mov.w	r0, #0
 800bd76:	f380 8811 	msr	BASEPRI, r0
 800bd7a:	4770      	bx	lr
 800bd7c:	f3af 8000 	nop.w

0800bd80 <pxCurrentTCBConst2>:
 800bd80:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop

0800bd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd88:	4808      	ldr	r0, [pc, #32]	; (800bdac <prvPortStartFirstTask+0x24>)
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	6800      	ldr	r0, [r0, #0]
 800bd8e:	f380 8808 	msr	MSP, r0
 800bd92:	f04f 0000 	mov.w	r0, #0
 800bd96:	f380 8814 	msr	CONTROL, r0
 800bd9a:	b662      	cpsie	i
 800bd9c:	b661      	cpsie	f
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	df00      	svc	0
 800bda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdaa:	bf00      	nop
 800bdac:	e000ed08 	.word	0xe000ed08

0800bdb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdb6:	4b44      	ldr	r3, [pc, #272]	; (800bec8 <xPortStartScheduler+0x118>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a44      	ldr	r2, [pc, #272]	; (800becc <xPortStartScheduler+0x11c>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d109      	bne.n	800bdd4 <xPortStartScheduler+0x24>
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
 800bdd2:	e7fe      	b.n	800bdd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdd4:	4b3c      	ldr	r3, [pc, #240]	; (800bec8 <xPortStartScheduler+0x118>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a3d      	ldr	r2, [pc, #244]	; (800bed0 <xPortStartScheduler+0x120>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d109      	bne.n	800bdf2 <xPortStartScheduler+0x42>
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	e7fe      	b.n	800bdf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bdf2:	4b38      	ldr	r3, [pc, #224]	; (800bed4 <xPortStartScheduler+0x124>)
 800bdf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	22ff      	movs	r2, #255	; 0xff
 800be02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be0c:	78fb      	ldrb	r3, [r7, #3]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be14:	b2da      	uxtb	r2, r3
 800be16:	4b30      	ldr	r3, [pc, #192]	; (800bed8 <xPortStartScheduler+0x128>)
 800be18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be1a:	4b30      	ldr	r3, [pc, #192]	; (800bedc <xPortStartScheduler+0x12c>)
 800be1c:	2207      	movs	r2, #7
 800be1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be20:	e009      	b.n	800be36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800be22:	4b2e      	ldr	r3, [pc, #184]	; (800bedc <xPortStartScheduler+0x12c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3b01      	subs	r3, #1
 800be28:	4a2c      	ldr	r2, [pc, #176]	; (800bedc <xPortStartScheduler+0x12c>)
 800be2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	b2db      	uxtb	r3, r3
 800be34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be36:	78fb      	ldrb	r3, [r7, #3]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be3e:	2b80      	cmp	r3, #128	; 0x80
 800be40:	d0ef      	beq.n	800be22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be42:	4b26      	ldr	r3, [pc, #152]	; (800bedc <xPortStartScheduler+0x12c>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1c3 0307 	rsb	r3, r3, #7
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d009      	beq.n	800be62 <xPortStartScheduler+0xb2>
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	60bb      	str	r3, [r7, #8]
 800be60:	e7fe      	b.n	800be60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be62:	4b1e      	ldr	r3, [pc, #120]	; (800bedc <xPortStartScheduler+0x12c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	021b      	lsls	r3, r3, #8
 800be68:	4a1c      	ldr	r2, [pc, #112]	; (800bedc <xPortStartScheduler+0x12c>)
 800be6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be6c:	4b1b      	ldr	r3, [pc, #108]	; (800bedc <xPortStartScheduler+0x12c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be74:	4a19      	ldr	r2, [pc, #100]	; (800bedc <xPortStartScheduler+0x12c>)
 800be76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be80:	4b17      	ldr	r3, [pc, #92]	; (800bee0 <xPortStartScheduler+0x130>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a16      	ldr	r2, [pc, #88]	; (800bee0 <xPortStartScheduler+0x130>)
 800be86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be8c:	4b14      	ldr	r3, [pc, #80]	; (800bee0 <xPortStartScheduler+0x130>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a13      	ldr	r2, [pc, #76]	; (800bee0 <xPortStartScheduler+0x130>)
 800be92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be98:	f000 f8d6 	bl	800c048 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be9c:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <xPortStartScheduler+0x134>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bea2:	f000 f8f5 	bl	800c090 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bea6:	4b10      	ldr	r3, [pc, #64]	; (800bee8 <xPortStartScheduler+0x138>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a0f      	ldr	r2, [pc, #60]	; (800bee8 <xPortStartScheduler+0x138>)
 800beac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800beb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800beb2:	f7ff ff69 	bl	800bd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800beb6:	f7fe fcc5 	bl	800a844 <vTaskSwitchContext>
	prvTaskExitError();
 800beba:	f7ff ff25 	bl	800bd08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3718      	adds	r7, #24
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	e000ed00 	.word	0xe000ed00
 800becc:	410fc271 	.word	0x410fc271
 800bed0:	410fc270 	.word	0x410fc270
 800bed4:	e000e400 	.word	0xe000e400
 800bed8:	20000ee8 	.word	0x20000ee8
 800bedc:	20000eec 	.word	0x20000eec
 800bee0:	e000ed20 	.word	0xe000ed20
 800bee4:	2000000c 	.word	0x2000000c
 800bee8:	e000ef34 	.word	0xe000ef34

0800beec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <vPortEnterCritical+0x54>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	4a0d      	ldr	r2, [pc, #52]	; (800bf40 <vPortEnterCritical+0x54>)
 800bf0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf0e:	4b0c      	ldr	r3, [pc, #48]	; (800bf40 <vPortEnterCritical+0x54>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d10e      	bne.n	800bf34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <vPortEnterCritical+0x58>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d009      	beq.n	800bf34 <vPortEnterCritical+0x48>
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	603b      	str	r3, [r7, #0]
 800bf32:	e7fe      	b.n	800bf32 <vPortEnterCritical+0x46>
	}
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	2000000c 	.word	0x2000000c
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf4e:	4b11      	ldr	r3, [pc, #68]	; (800bf94 <vPortExitCritical+0x4c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d109      	bne.n	800bf6a <vPortExitCritical+0x22>
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	607b      	str	r3, [r7, #4]
 800bf68:	e7fe      	b.n	800bf68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <vPortExitCritical+0x4c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	4a08      	ldr	r2, [pc, #32]	; (800bf94 <vPortExitCritical+0x4c>)
 800bf72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf74:	4b07      	ldr	r3, [pc, #28]	; (800bf94 <vPortExitCritical+0x4c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d104      	bne.n	800bf86 <vPortExitCritical+0x3e>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf86:	bf00      	nop
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	2000000c 	.word	0x2000000c
	...

0800bfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfa0:	f3ef 8009 	mrs	r0, PSP
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	4b15      	ldr	r3, [pc, #84]	; (800c000 <pxCurrentTCBConst>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	f01e 0f10 	tst.w	lr, #16
 800bfb0:	bf08      	it	eq
 800bfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	6010      	str	r0, [r2, #0]
 800bfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfc4:	f380 8811 	msr	BASEPRI, r0
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f7fe fc38 	bl	800a844 <vTaskSwitchContext>
 800bfd4:	f04f 0000 	mov.w	r0, #0
 800bfd8:	f380 8811 	msr	BASEPRI, r0
 800bfdc:	bc09      	pop	{r0, r3}
 800bfde:	6819      	ldr	r1, [r3, #0]
 800bfe0:	6808      	ldr	r0, [r1, #0]
 800bfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe6:	f01e 0f10 	tst.w	lr, #16
 800bfea:	bf08      	it	eq
 800bfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bff0:	f380 8809 	msr	PSP, r0
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	f3af 8000 	nop.w

0800c000 <pxCurrentTCBConst>:
 800c000:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop

0800c008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c020:	f7fe fb58 	bl	800a6d4 <xTaskIncrementTick>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c02a:	4b06      	ldr	r3, [pc, #24]	; (800c044 <SysTick_Handler+0x3c>)
 800c02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	2300      	movs	r3, #0
 800c034:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	e000ed04 	.word	0xe000ed04

0800c048 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c04c:	4b0b      	ldr	r3, [pc, #44]	; (800c07c <vPortSetupTimerInterrupt+0x34>)
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c052:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <vPortSetupTimerInterrupt+0x38>)
 800c054:	2200      	movs	r2, #0
 800c056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <vPortSetupTimerInterrupt+0x3c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a0a      	ldr	r2, [pc, #40]	; (800c088 <vPortSetupTimerInterrupt+0x40>)
 800c05e:	fba2 2303 	umull	r2, r3, r2, r3
 800c062:	099b      	lsrs	r3, r3, #6
 800c064:	4a09      	ldr	r2, [pc, #36]	; (800c08c <vPortSetupTimerInterrupt+0x44>)
 800c066:	3b01      	subs	r3, #1
 800c068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c06a:	4b04      	ldr	r3, [pc, #16]	; (800c07c <vPortSetupTimerInterrupt+0x34>)
 800c06c:	2207      	movs	r2, #7
 800c06e:	601a      	str	r2, [r3, #0]
}
 800c070:	bf00      	nop
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	e000e010 	.word	0xe000e010
 800c080:	e000e018 	.word	0xe000e018
 800c084:	20000000 	.word	0x20000000
 800c088:	10624dd3 	.word	0x10624dd3
 800c08c:	e000e014 	.word	0xe000e014

0800c090 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c090:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c0a0 <vPortEnableVFP+0x10>
 800c094:	6801      	ldr	r1, [r0, #0]
 800c096:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c09a:	6001      	str	r1, [r0, #0]
 800c09c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c09e:	bf00      	nop
 800c0a0:	e000ed88 	.word	0xe000ed88

0800c0a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0aa:	f3ef 8305 	mrs	r3, IPSR
 800c0ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b0f      	cmp	r3, #15
 800c0b4:	d913      	bls.n	800c0de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0b6:	4a16      	ldr	r2, [pc, #88]	; (800c110 <vPortValidateInterruptPriority+0x6c>)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0c0:	4b14      	ldr	r3, [pc, #80]	; (800c114 <vPortValidateInterruptPriority+0x70>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	7afa      	ldrb	r2, [r7, #11]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d209      	bcs.n	800c0de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	607b      	str	r3, [r7, #4]
 800c0dc:	e7fe      	b.n	800c0dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0de:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <vPortValidateInterruptPriority+0x74>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0e6:	4b0d      	ldr	r3, [pc, #52]	; (800c11c <vPortValidateInterruptPriority+0x78>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d909      	bls.n	800c102 <vPortValidateInterruptPriority+0x5e>
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	e7fe      	b.n	800c100 <vPortValidateInterruptPriority+0x5c>
	}
 800c102:	bf00      	nop
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	e000e3f0 	.word	0xe000e3f0
 800c114:	20000ee8 	.word	0x20000ee8
 800c118:	e000ed0c 	.word	0xe000ed0c
 800c11c:	20000eec 	.word	0x20000eec

0800c120 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08a      	sub	sp, #40	; 0x28
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c128:	2300      	movs	r3, #0
 800c12a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c12c:	f7fe fa18 	bl	800a560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c130:	4b57      	ldr	r3, [pc, #348]	; (800c290 <pvPortMalloc+0x170>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c138:	f000 f90c 	bl	800c354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c13c:	4b55      	ldr	r3, [pc, #340]	; (800c294 <pvPortMalloc+0x174>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4013      	ands	r3, r2
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 808c 	bne.w	800c262 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01c      	beq.n	800c18a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c150:	2208      	movs	r2, #8
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f003 0307 	and.w	r3, r3, #7
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d013      	beq.n	800c18a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f023 0307 	bic.w	r3, r3, #7
 800c168:	3308      	adds	r3, #8
 800c16a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f003 0307 	and.w	r3, r3, #7
 800c172:	2b00      	cmp	r3, #0
 800c174:	d009      	beq.n	800c18a <pvPortMalloc+0x6a>
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	617b      	str	r3, [r7, #20]
 800c188:	e7fe      	b.n	800c188 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d068      	beq.n	800c262 <pvPortMalloc+0x142>
 800c190:	4b41      	ldr	r3, [pc, #260]	; (800c298 <pvPortMalloc+0x178>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	429a      	cmp	r2, r3
 800c198:	d863      	bhi.n	800c262 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c19a:	4b40      	ldr	r3, [pc, #256]	; (800c29c <pvPortMalloc+0x17c>)
 800c19c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c19e:	4b3f      	ldr	r3, [pc, #252]	; (800c29c <pvPortMalloc+0x17c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1a4:	e004      	b.n	800c1b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d903      	bls.n	800c1c2 <pvPortMalloc+0xa2>
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1f1      	bne.n	800c1a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1c2:	4b33      	ldr	r3, [pc, #204]	; (800c290 <pvPortMalloc+0x170>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d04a      	beq.n	800c262 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2208      	movs	r2, #8
 800c1d2:	4413      	add	r3, r2
 800c1d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	6a3b      	ldr	r3, [r7, #32]
 800c1dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	1ad2      	subs	r2, r2, r3
 800c1e6:	2308      	movs	r3, #8
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d91e      	bls.n	800c22c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	f003 0307 	and.w	r3, r3, #7
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d009      	beq.n	800c214 <pvPortMalloc+0xf4>
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	613b      	str	r3, [r7, #16]
 800c212:	e7fe      	b.n	800c212 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	1ad2      	subs	r2, r2, r3
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c226:	69b8      	ldr	r0, [r7, #24]
 800c228:	f000 f8f6 	bl	800c418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c22c:	4b1a      	ldr	r3, [pc, #104]	; (800c298 <pvPortMalloc+0x178>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	4a18      	ldr	r2, [pc, #96]	; (800c298 <pvPortMalloc+0x178>)
 800c238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c23a:	4b17      	ldr	r3, [pc, #92]	; (800c298 <pvPortMalloc+0x178>)
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	4b18      	ldr	r3, [pc, #96]	; (800c2a0 <pvPortMalloc+0x180>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d203      	bcs.n	800c24e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c246:	4b14      	ldr	r3, [pc, #80]	; (800c298 <pvPortMalloc+0x178>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a15      	ldr	r2, [pc, #84]	; (800c2a0 <pvPortMalloc+0x180>)
 800c24c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <pvPortMalloc+0x174>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	431a      	orrs	r2, r3
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c262:	f7fe f98b 	bl	800a57c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	f003 0307 	and.w	r3, r3, #7
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d009      	beq.n	800c284 <pvPortMalloc+0x164>
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	e7fe      	b.n	800c282 <pvPortMalloc+0x162>
	return pvReturn;
 800c284:	69fb      	ldr	r3, [r7, #28]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3728      	adds	r7, #40	; 0x28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	20004af8 	.word	0x20004af8
 800c294:	20004b04 	.word	0x20004b04
 800c298:	20004afc 	.word	0x20004afc
 800c29c:	20004af0 	.word	0x20004af0
 800c2a0:	20004b00 	.word	0x20004b00

0800c2a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d046      	beq.n	800c344 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2b6:	2308      	movs	r3, #8
 800c2b8:	425b      	negs	r3, r3
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	4413      	add	r3, r2
 800c2be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	4b20      	ldr	r3, [pc, #128]	; (800c34c <vPortFree+0xa8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d109      	bne.n	800c2e6 <vPortFree+0x42>
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	e7fe      	b.n	800c2e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d009      	beq.n	800c302 <vPortFree+0x5e>
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	60bb      	str	r3, [r7, #8]
 800c300:	e7fe      	b.n	800c300 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	4b11      	ldr	r3, [pc, #68]	; (800c34c <vPortFree+0xa8>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4013      	ands	r3, r2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d019      	beq.n	800c344 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d115      	bne.n	800c344 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	4b0b      	ldr	r3, [pc, #44]	; (800c34c <vPortFree+0xa8>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	43db      	mvns	r3, r3
 800c322:	401a      	ands	r2, r3
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c328:	f7fe f91a 	bl	800a560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <vPortFree+0xac>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4413      	add	r3, r2
 800c336:	4a06      	ldr	r2, [pc, #24]	; (800c350 <vPortFree+0xac>)
 800c338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c33a:	6938      	ldr	r0, [r7, #16]
 800c33c:	f000 f86c 	bl	800c418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c340:	f7fe f91c 	bl	800a57c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c344:	bf00      	nop
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20004b04 	.word	0x20004b04
 800c350:	20004afc 	.word	0x20004afc

0800c354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c35a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c35e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c360:	4b27      	ldr	r3, [pc, #156]	; (800c400 <prvHeapInit+0xac>)
 800c362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00c      	beq.n	800c388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3307      	adds	r3, #7
 800c372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0307 	bic.w	r3, r3, #7
 800c37a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	4a1f      	ldr	r2, [pc, #124]	; (800c400 <prvHeapInit+0xac>)
 800c384:	4413      	add	r3, r2
 800c386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c38c:	4a1d      	ldr	r2, [pc, #116]	; (800c404 <prvHeapInit+0xb0>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c392:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <prvHeapInit+0xb0>)
 800c394:	2200      	movs	r2, #0
 800c396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	4413      	add	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3a0:	2208      	movs	r2, #8
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0307 	bic.w	r3, r3, #7
 800c3ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4a15      	ldr	r2, [pc, #84]	; (800c408 <prvHeapInit+0xb4>)
 800c3b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3b6:	4b14      	ldr	r3, [pc, #80]	; (800c408 <prvHeapInit+0xb4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3be:	4b12      	ldr	r3, [pc, #72]	; (800c408 <prvHeapInit+0xb4>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3d4:	4b0c      	ldr	r3, [pc, #48]	; (800c408 <prvHeapInit+0xb4>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <prvHeapInit+0xb8>)
 800c3e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4a09      	ldr	r2, [pc, #36]	; (800c410 <prvHeapInit+0xbc>)
 800c3ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3ec:	4b09      	ldr	r3, [pc, #36]	; (800c414 <prvHeapInit+0xc0>)
 800c3ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3f2:	601a      	str	r2, [r3, #0]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	20000ef0 	.word	0x20000ef0
 800c404:	20004af0 	.word	0x20004af0
 800c408:	20004af8 	.word	0x20004af8
 800c40c:	20004b00 	.word	0x20004b00
 800c410:	20004afc 	.word	0x20004afc
 800c414:	20004b04 	.word	0x20004b04

0800c418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c420:	4b28      	ldr	r3, [pc, #160]	; (800c4c4 <prvInsertBlockIntoFreeList+0xac>)
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e002      	b.n	800c42c <prvInsertBlockIntoFreeList+0x14>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d8f7      	bhi.n	800c426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	4413      	add	r3, r2
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	429a      	cmp	r2, r3
 800c446:	d108      	bne.n	800c45a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	441a      	add	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	441a      	add	r2, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d118      	bne.n	800c4a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	d00d      	beq.n	800c496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	441a      	add	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	e008      	b.n	800c4a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c496:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	e003      	b.n	800c4a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d002      	beq.n	800c4b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4b6:	bf00      	nop
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	20004af0 	.word	0x20004af0
 800c4c8:	20004af8 	.word	0x20004af8

0800c4cc <__errno>:
 800c4cc:	4b01      	ldr	r3, [pc, #4]	; (800c4d4 <__errno+0x8>)
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000010 	.word	0x20000010

0800c4d8 <__libc_init_array>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	4e0d      	ldr	r6, [pc, #52]	; (800c510 <__libc_init_array+0x38>)
 800c4dc:	4c0d      	ldr	r4, [pc, #52]	; (800c514 <__libc_init_array+0x3c>)
 800c4de:	1ba4      	subs	r4, r4, r6
 800c4e0:	10a4      	asrs	r4, r4, #2
 800c4e2:	2500      	movs	r5, #0
 800c4e4:	42a5      	cmp	r5, r4
 800c4e6:	d109      	bne.n	800c4fc <__libc_init_array+0x24>
 800c4e8:	4e0b      	ldr	r6, [pc, #44]	; (800c518 <__libc_init_array+0x40>)
 800c4ea:	4c0c      	ldr	r4, [pc, #48]	; (800c51c <__libc_init_array+0x44>)
 800c4ec:	f001 ffd6 	bl	800e49c <_init>
 800c4f0:	1ba4      	subs	r4, r4, r6
 800c4f2:	10a4      	asrs	r4, r4, #2
 800c4f4:	2500      	movs	r5, #0
 800c4f6:	42a5      	cmp	r5, r4
 800c4f8:	d105      	bne.n	800c506 <__libc_init_array+0x2e>
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c500:	4798      	blx	r3
 800c502:	3501      	adds	r5, #1
 800c504:	e7ee      	b.n	800c4e4 <__libc_init_array+0xc>
 800c506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c50a:	4798      	blx	r3
 800c50c:	3501      	adds	r5, #1
 800c50e:	e7f2      	b.n	800c4f6 <__libc_init_array+0x1e>
 800c510:	0800ea48 	.word	0x0800ea48
 800c514:	0800ea48 	.word	0x0800ea48
 800c518:	0800ea48 	.word	0x0800ea48
 800c51c:	0800ea4c 	.word	0x0800ea4c

0800c520 <memcpy>:
 800c520:	b510      	push	{r4, lr}
 800c522:	1e43      	subs	r3, r0, #1
 800c524:	440a      	add	r2, r1
 800c526:	4291      	cmp	r1, r2
 800c528:	d100      	bne.n	800c52c <memcpy+0xc>
 800c52a:	bd10      	pop	{r4, pc}
 800c52c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c530:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c534:	e7f7      	b.n	800c526 <memcpy+0x6>

0800c536 <memset>:
 800c536:	4402      	add	r2, r0
 800c538:	4603      	mov	r3, r0
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d100      	bne.n	800c540 <memset+0xa>
 800c53e:	4770      	bx	lr
 800c540:	f803 1b01 	strb.w	r1, [r3], #1
 800c544:	e7f9      	b.n	800c53a <memset+0x4>

0800c546 <__cvt>:
 800c546:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c54a:	ec55 4b10 	vmov	r4, r5, d0
 800c54e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c554:	2d00      	cmp	r5, #0
 800c556:	460e      	mov	r6, r1
 800c558:	4691      	mov	r9, r2
 800c55a:	4619      	mov	r1, r3
 800c55c:	bfb8      	it	lt
 800c55e:	4622      	movlt	r2, r4
 800c560:	462b      	mov	r3, r5
 800c562:	f027 0720 	bic.w	r7, r7, #32
 800c566:	bfbb      	ittet	lt
 800c568:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c56c:	461d      	movlt	r5, r3
 800c56e:	2300      	movge	r3, #0
 800c570:	232d      	movlt	r3, #45	; 0x2d
 800c572:	bfb8      	it	lt
 800c574:	4614      	movlt	r4, r2
 800c576:	2f46      	cmp	r7, #70	; 0x46
 800c578:	700b      	strb	r3, [r1, #0]
 800c57a:	d004      	beq.n	800c586 <__cvt+0x40>
 800c57c:	2f45      	cmp	r7, #69	; 0x45
 800c57e:	d100      	bne.n	800c582 <__cvt+0x3c>
 800c580:	3601      	adds	r6, #1
 800c582:	2102      	movs	r1, #2
 800c584:	e000      	b.n	800c588 <__cvt+0x42>
 800c586:	2103      	movs	r1, #3
 800c588:	ab03      	add	r3, sp, #12
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	ab02      	add	r3, sp, #8
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	4632      	mov	r2, r6
 800c592:	4653      	mov	r3, sl
 800c594:	ec45 4b10 	vmov	d0, r4, r5
 800c598:	f000 fbae 	bl	800ccf8 <_dtoa_r>
 800c59c:	2f47      	cmp	r7, #71	; 0x47
 800c59e:	4680      	mov	r8, r0
 800c5a0:	d102      	bne.n	800c5a8 <__cvt+0x62>
 800c5a2:	f019 0f01 	tst.w	r9, #1
 800c5a6:	d026      	beq.n	800c5f6 <__cvt+0xb0>
 800c5a8:	2f46      	cmp	r7, #70	; 0x46
 800c5aa:	eb08 0906 	add.w	r9, r8, r6
 800c5ae:	d111      	bne.n	800c5d4 <__cvt+0x8e>
 800c5b0:	f898 3000 	ldrb.w	r3, [r8]
 800c5b4:	2b30      	cmp	r3, #48	; 0x30
 800c5b6:	d10a      	bne.n	800c5ce <__cvt+0x88>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f4 fa3a 	bl	8000a38 <__aeabi_dcmpeq>
 800c5c4:	b918      	cbnz	r0, 800c5ce <__cvt+0x88>
 800c5c6:	f1c6 0601 	rsb	r6, r6, #1
 800c5ca:	f8ca 6000 	str.w	r6, [sl]
 800c5ce:	f8da 3000 	ldr.w	r3, [sl]
 800c5d2:	4499      	add	r9, r3
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f4 fa2c 	bl	8000a38 <__aeabi_dcmpeq>
 800c5e0:	b938      	cbnz	r0, 800c5f2 <__cvt+0xac>
 800c5e2:	2230      	movs	r2, #48	; 0x30
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	454b      	cmp	r3, r9
 800c5e8:	d205      	bcs.n	800c5f6 <__cvt+0xb0>
 800c5ea:	1c59      	adds	r1, r3, #1
 800c5ec:	9103      	str	r1, [sp, #12]
 800c5ee:	701a      	strb	r2, [r3, #0]
 800c5f0:	e7f8      	b.n	800c5e4 <__cvt+0x9e>
 800c5f2:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5fa:	eba3 0308 	sub.w	r3, r3, r8
 800c5fe:	4640      	mov	r0, r8
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	b004      	add	sp, #16
 800c604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c608 <__exponent>:
 800c608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c60a:	2900      	cmp	r1, #0
 800c60c:	4604      	mov	r4, r0
 800c60e:	bfba      	itte	lt
 800c610:	4249      	neglt	r1, r1
 800c612:	232d      	movlt	r3, #45	; 0x2d
 800c614:	232b      	movge	r3, #43	; 0x2b
 800c616:	2909      	cmp	r1, #9
 800c618:	f804 2b02 	strb.w	r2, [r4], #2
 800c61c:	7043      	strb	r3, [r0, #1]
 800c61e:	dd20      	ble.n	800c662 <__exponent+0x5a>
 800c620:	f10d 0307 	add.w	r3, sp, #7
 800c624:	461f      	mov	r7, r3
 800c626:	260a      	movs	r6, #10
 800c628:	fb91 f5f6 	sdiv	r5, r1, r6
 800c62c:	fb06 1115 	mls	r1, r6, r5, r1
 800c630:	3130      	adds	r1, #48	; 0x30
 800c632:	2d09      	cmp	r5, #9
 800c634:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c638:	f103 32ff 	add.w	r2, r3, #4294967295
 800c63c:	4629      	mov	r1, r5
 800c63e:	dc09      	bgt.n	800c654 <__exponent+0x4c>
 800c640:	3130      	adds	r1, #48	; 0x30
 800c642:	3b02      	subs	r3, #2
 800c644:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c648:	42bb      	cmp	r3, r7
 800c64a:	4622      	mov	r2, r4
 800c64c:	d304      	bcc.n	800c658 <__exponent+0x50>
 800c64e:	1a10      	subs	r0, r2, r0
 800c650:	b003      	add	sp, #12
 800c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c654:	4613      	mov	r3, r2
 800c656:	e7e7      	b.n	800c628 <__exponent+0x20>
 800c658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c65c:	f804 2b01 	strb.w	r2, [r4], #1
 800c660:	e7f2      	b.n	800c648 <__exponent+0x40>
 800c662:	2330      	movs	r3, #48	; 0x30
 800c664:	4419      	add	r1, r3
 800c666:	7083      	strb	r3, [r0, #2]
 800c668:	1d02      	adds	r2, r0, #4
 800c66a:	70c1      	strb	r1, [r0, #3]
 800c66c:	e7ef      	b.n	800c64e <__exponent+0x46>
	...

0800c670 <_printf_float>:
 800c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c674:	b08d      	sub	sp, #52	; 0x34
 800c676:	460c      	mov	r4, r1
 800c678:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c67c:	4616      	mov	r6, r2
 800c67e:	461f      	mov	r7, r3
 800c680:	4605      	mov	r5, r0
 800c682:	f001 f8f1 	bl	800d868 <_localeconv_r>
 800c686:	6803      	ldr	r3, [r0, #0]
 800c688:	9304      	str	r3, [sp, #16]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7f3 fda8 	bl	80001e0 <strlen>
 800c690:	2300      	movs	r3, #0
 800c692:	930a      	str	r3, [sp, #40]	; 0x28
 800c694:	f8d8 3000 	ldr.w	r3, [r8]
 800c698:	9005      	str	r0, [sp, #20]
 800c69a:	3307      	adds	r3, #7
 800c69c:	f023 0307 	bic.w	r3, r3, #7
 800c6a0:	f103 0208 	add.w	r2, r3, #8
 800c6a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6a8:	f8d4 b000 	ldr.w	fp, [r4]
 800c6ac:	f8c8 2000 	str.w	r2, [r8]
 800c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c6b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c6bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6c0:	9307      	str	r3, [sp, #28]
 800c6c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ca:	4ba7      	ldr	r3, [pc, #668]	; (800c968 <_printf_float+0x2f8>)
 800c6cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6d0:	f7f4 f9e4 	bl	8000a9c <__aeabi_dcmpun>
 800c6d4:	bb70      	cbnz	r0, 800c734 <_printf_float+0xc4>
 800c6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6da:	4ba3      	ldr	r3, [pc, #652]	; (800c968 <_printf_float+0x2f8>)
 800c6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6e0:	f7f4 f9be 	bl	8000a60 <__aeabi_dcmple>
 800c6e4:	bb30      	cbnz	r0, 800c734 <_printf_float+0xc4>
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	f7f4 f9ad 	bl	8000a4c <__aeabi_dcmplt>
 800c6f2:	b110      	cbz	r0, 800c6fa <_printf_float+0x8a>
 800c6f4:	232d      	movs	r3, #45	; 0x2d
 800c6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6fa:	4a9c      	ldr	r2, [pc, #624]	; (800c96c <_printf_float+0x2fc>)
 800c6fc:	4b9c      	ldr	r3, [pc, #624]	; (800c970 <_printf_float+0x300>)
 800c6fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c702:	bf8c      	ite	hi
 800c704:	4690      	movhi	r8, r2
 800c706:	4698      	movls	r8, r3
 800c708:	2303      	movs	r3, #3
 800c70a:	f02b 0204 	bic.w	r2, fp, #4
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	6022      	str	r2, [r4, #0]
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	9700      	str	r7, [sp, #0]
 800c718:	4633      	mov	r3, r6
 800c71a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c71c:	4621      	mov	r1, r4
 800c71e:	4628      	mov	r0, r5
 800c720:	f000 f9e6 	bl	800caf0 <_printf_common>
 800c724:	3001      	adds	r0, #1
 800c726:	f040 808d 	bne.w	800c844 <_printf_float+0x1d4>
 800c72a:	f04f 30ff 	mov.w	r0, #4294967295
 800c72e:	b00d      	add	sp, #52	; 0x34
 800c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c734:	4642      	mov	r2, r8
 800c736:	464b      	mov	r3, r9
 800c738:	4640      	mov	r0, r8
 800c73a:	4649      	mov	r1, r9
 800c73c:	f7f4 f9ae 	bl	8000a9c <__aeabi_dcmpun>
 800c740:	b110      	cbz	r0, 800c748 <_printf_float+0xd8>
 800c742:	4a8c      	ldr	r2, [pc, #560]	; (800c974 <_printf_float+0x304>)
 800c744:	4b8c      	ldr	r3, [pc, #560]	; (800c978 <_printf_float+0x308>)
 800c746:	e7da      	b.n	800c6fe <_printf_float+0x8e>
 800c748:	6861      	ldr	r1, [r4, #4]
 800c74a:	1c4b      	adds	r3, r1, #1
 800c74c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c750:	a80a      	add	r0, sp, #40	; 0x28
 800c752:	d13e      	bne.n	800c7d2 <_printf_float+0x162>
 800c754:	2306      	movs	r3, #6
 800c756:	6063      	str	r3, [r4, #4]
 800c758:	2300      	movs	r3, #0
 800c75a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c75e:	ab09      	add	r3, sp, #36	; 0x24
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	ec49 8b10 	vmov	d0, r8, r9
 800c766:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	f8cd a004 	str.w	sl, [sp, #4]
 800c770:	6861      	ldr	r1, [r4, #4]
 800c772:	4628      	mov	r0, r5
 800c774:	f7ff fee7 	bl	800c546 <__cvt>
 800c778:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c77c:	2b47      	cmp	r3, #71	; 0x47
 800c77e:	4680      	mov	r8, r0
 800c780:	d109      	bne.n	800c796 <_printf_float+0x126>
 800c782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c784:	1cd8      	adds	r0, r3, #3
 800c786:	db02      	blt.n	800c78e <_printf_float+0x11e>
 800c788:	6862      	ldr	r2, [r4, #4]
 800c78a:	4293      	cmp	r3, r2
 800c78c:	dd47      	ble.n	800c81e <_printf_float+0x1ae>
 800c78e:	f1aa 0a02 	sub.w	sl, sl, #2
 800c792:	fa5f fa8a 	uxtb.w	sl, sl
 800c796:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c79a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c79c:	d824      	bhi.n	800c7e8 <_printf_float+0x178>
 800c79e:	3901      	subs	r1, #1
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7a6:	9109      	str	r1, [sp, #36]	; 0x24
 800c7a8:	f7ff ff2e 	bl	800c608 <__exponent>
 800c7ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7ae:	1813      	adds	r3, r2, r0
 800c7b0:	2a01      	cmp	r2, #1
 800c7b2:	4681      	mov	r9, r0
 800c7b4:	6123      	str	r3, [r4, #16]
 800c7b6:	dc02      	bgt.n	800c7be <_printf_float+0x14e>
 800c7b8:	6822      	ldr	r2, [r4, #0]
 800c7ba:	07d1      	lsls	r1, r2, #31
 800c7bc:	d501      	bpl.n	800c7c2 <_printf_float+0x152>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	6123      	str	r3, [r4, #16]
 800c7c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0a5      	beq.n	800c716 <_printf_float+0xa6>
 800c7ca:	232d      	movs	r3, #45	; 0x2d
 800c7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d0:	e7a1      	b.n	800c716 <_printf_float+0xa6>
 800c7d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c7d6:	f000 8177 	beq.w	800cac8 <_printf_float+0x458>
 800c7da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c7de:	d1bb      	bne.n	800c758 <_printf_float+0xe8>
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	d1b9      	bne.n	800c758 <_printf_float+0xe8>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e7b6      	b.n	800c756 <_printf_float+0xe6>
 800c7e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c7ec:	d119      	bne.n	800c822 <_printf_float+0x1b2>
 800c7ee:	2900      	cmp	r1, #0
 800c7f0:	6863      	ldr	r3, [r4, #4]
 800c7f2:	dd0c      	ble.n	800c80e <_printf_float+0x19e>
 800c7f4:	6121      	str	r1, [r4, #16]
 800c7f6:	b913      	cbnz	r3, 800c7fe <_printf_float+0x18e>
 800c7f8:	6822      	ldr	r2, [r4, #0]
 800c7fa:	07d2      	lsls	r2, r2, #31
 800c7fc:	d502      	bpl.n	800c804 <_printf_float+0x194>
 800c7fe:	3301      	adds	r3, #1
 800c800:	440b      	add	r3, r1
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c806:	65a3      	str	r3, [r4, #88]	; 0x58
 800c808:	f04f 0900 	mov.w	r9, #0
 800c80c:	e7d9      	b.n	800c7c2 <_printf_float+0x152>
 800c80e:	b913      	cbnz	r3, 800c816 <_printf_float+0x1a6>
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	07d0      	lsls	r0, r2, #31
 800c814:	d501      	bpl.n	800c81a <_printf_float+0x1aa>
 800c816:	3302      	adds	r3, #2
 800c818:	e7f3      	b.n	800c802 <_printf_float+0x192>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e7f1      	b.n	800c802 <_printf_float+0x192>
 800c81e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c822:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c826:	4293      	cmp	r3, r2
 800c828:	db05      	blt.n	800c836 <_printf_float+0x1c6>
 800c82a:	6822      	ldr	r2, [r4, #0]
 800c82c:	6123      	str	r3, [r4, #16]
 800c82e:	07d1      	lsls	r1, r2, #31
 800c830:	d5e8      	bpl.n	800c804 <_printf_float+0x194>
 800c832:	3301      	adds	r3, #1
 800c834:	e7e5      	b.n	800c802 <_printf_float+0x192>
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfd4      	ite	le
 800c83a:	f1c3 0302 	rsble	r3, r3, #2
 800c83e:	2301      	movgt	r3, #1
 800c840:	4413      	add	r3, r2
 800c842:	e7de      	b.n	800c802 <_printf_float+0x192>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	055a      	lsls	r2, r3, #21
 800c848:	d407      	bmi.n	800c85a <_printf_float+0x1ea>
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	4642      	mov	r2, r8
 800c84e:	4631      	mov	r1, r6
 800c850:	4628      	mov	r0, r5
 800c852:	47b8      	blx	r7
 800c854:	3001      	adds	r0, #1
 800c856:	d12b      	bne.n	800c8b0 <_printf_float+0x240>
 800c858:	e767      	b.n	800c72a <_printf_float+0xba>
 800c85a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c85e:	f240 80dc 	bls.w	800ca1a <_printf_float+0x3aa>
 800c862:	2200      	movs	r2, #0
 800c864:	2300      	movs	r3, #0
 800c866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c86a:	f7f4 f8e5 	bl	8000a38 <__aeabi_dcmpeq>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d033      	beq.n	800c8da <_printf_float+0x26a>
 800c872:	2301      	movs	r3, #1
 800c874:	4a41      	ldr	r2, [pc, #260]	; (800c97c <_printf_float+0x30c>)
 800c876:	4631      	mov	r1, r6
 800c878:	4628      	mov	r0, r5
 800c87a:	47b8      	blx	r7
 800c87c:	3001      	adds	r0, #1
 800c87e:	f43f af54 	beq.w	800c72a <_printf_float+0xba>
 800c882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c886:	429a      	cmp	r2, r3
 800c888:	db02      	blt.n	800c890 <_printf_float+0x220>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	07d8      	lsls	r0, r3, #31
 800c88e:	d50f      	bpl.n	800c8b0 <_printf_float+0x240>
 800c890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c894:	4631      	mov	r1, r6
 800c896:	4628      	mov	r0, r5
 800c898:	47b8      	blx	r7
 800c89a:	3001      	adds	r0, #1
 800c89c:	f43f af45 	beq.w	800c72a <_printf_float+0xba>
 800c8a0:	f04f 0800 	mov.w	r8, #0
 800c8a4:	f104 091a 	add.w	r9, r4, #26
 800c8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	4543      	cmp	r3, r8
 800c8ae:	dc09      	bgt.n	800c8c4 <_printf_float+0x254>
 800c8b0:	6823      	ldr	r3, [r4, #0]
 800c8b2:	079b      	lsls	r3, r3, #30
 800c8b4:	f100 8103 	bmi.w	800cabe <_printf_float+0x44e>
 800c8b8:	68e0      	ldr	r0, [r4, #12]
 800c8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8bc:	4298      	cmp	r0, r3
 800c8be:	bfb8      	it	lt
 800c8c0:	4618      	movlt	r0, r3
 800c8c2:	e734      	b.n	800c72e <_printf_float+0xbe>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	464a      	mov	r2, r9
 800c8c8:	4631      	mov	r1, r6
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	47b8      	blx	r7
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	f43f af2b 	beq.w	800c72a <_printf_float+0xba>
 800c8d4:	f108 0801 	add.w	r8, r8, #1
 800c8d8:	e7e6      	b.n	800c8a8 <_printf_float+0x238>
 800c8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dc2b      	bgt.n	800c938 <_printf_float+0x2c8>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4a26      	ldr	r2, [pc, #152]	; (800c97c <_printf_float+0x30c>)
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b8      	blx	r7
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	f43f af1d 	beq.w	800c72a <_printf_float+0xba>
 800c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f2:	b923      	cbnz	r3, 800c8fe <_printf_float+0x28e>
 800c8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f6:	b913      	cbnz	r3, 800c8fe <_printf_float+0x28e>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	07d9      	lsls	r1, r3, #31
 800c8fc:	d5d8      	bpl.n	800c8b0 <_printf_float+0x240>
 800c8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c902:	4631      	mov	r1, r6
 800c904:	4628      	mov	r0, r5
 800c906:	47b8      	blx	r7
 800c908:	3001      	adds	r0, #1
 800c90a:	f43f af0e 	beq.w	800c72a <_printf_float+0xba>
 800c90e:	f04f 0900 	mov.w	r9, #0
 800c912:	f104 0a1a 	add.w	sl, r4, #26
 800c916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c918:	425b      	negs	r3, r3
 800c91a:	454b      	cmp	r3, r9
 800c91c:	dc01      	bgt.n	800c922 <_printf_float+0x2b2>
 800c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c920:	e794      	b.n	800c84c <_printf_float+0x1dc>
 800c922:	2301      	movs	r3, #1
 800c924:	4652      	mov	r2, sl
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	f43f aefc 	beq.w	800c72a <_printf_float+0xba>
 800c932:	f109 0901 	add.w	r9, r9, #1
 800c936:	e7ee      	b.n	800c916 <_printf_float+0x2a6>
 800c938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c93a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c93c:	429a      	cmp	r2, r3
 800c93e:	bfa8      	it	ge
 800c940:	461a      	movge	r2, r3
 800c942:	2a00      	cmp	r2, #0
 800c944:	4691      	mov	r9, r2
 800c946:	dd07      	ble.n	800c958 <_printf_float+0x2e8>
 800c948:	4613      	mov	r3, r2
 800c94a:	4631      	mov	r1, r6
 800c94c:	4642      	mov	r2, r8
 800c94e:	4628      	mov	r0, r5
 800c950:	47b8      	blx	r7
 800c952:	3001      	adds	r0, #1
 800c954:	f43f aee9 	beq.w	800c72a <_printf_float+0xba>
 800c958:	f104 031a 	add.w	r3, r4, #26
 800c95c:	f04f 0b00 	mov.w	fp, #0
 800c960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c964:	9306      	str	r3, [sp, #24]
 800c966:	e015      	b.n	800c994 <_printf_float+0x324>
 800c968:	7fefffff 	.word	0x7fefffff
 800c96c:	0800e7dc 	.word	0x0800e7dc
 800c970:	0800e7d8 	.word	0x0800e7d8
 800c974:	0800e7e4 	.word	0x0800e7e4
 800c978:	0800e7e0 	.word	0x0800e7e0
 800c97c:	0800e7e8 	.word	0x0800e7e8
 800c980:	2301      	movs	r3, #1
 800c982:	9a06      	ldr	r2, [sp, #24]
 800c984:	4631      	mov	r1, r6
 800c986:	4628      	mov	r0, r5
 800c988:	47b8      	blx	r7
 800c98a:	3001      	adds	r0, #1
 800c98c:	f43f aecd 	beq.w	800c72a <_printf_float+0xba>
 800c990:	f10b 0b01 	add.w	fp, fp, #1
 800c994:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c998:	ebaa 0309 	sub.w	r3, sl, r9
 800c99c:	455b      	cmp	r3, fp
 800c99e:	dcef      	bgt.n	800c980 <_printf_float+0x310>
 800c9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	44d0      	add	r8, sl
 800c9a8:	db15      	blt.n	800c9d6 <_printf_float+0x366>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	07da      	lsls	r2, r3, #31
 800c9ae:	d412      	bmi.n	800c9d6 <_printf_float+0x366>
 800c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9b4:	eba3 020a 	sub.w	r2, r3, sl
 800c9b8:	eba3 0a01 	sub.w	sl, r3, r1
 800c9bc:	4592      	cmp	sl, r2
 800c9be:	bfa8      	it	ge
 800c9c0:	4692      	movge	sl, r2
 800c9c2:	f1ba 0f00 	cmp.w	sl, #0
 800c9c6:	dc0e      	bgt.n	800c9e6 <_printf_float+0x376>
 800c9c8:	f04f 0800 	mov.w	r8, #0
 800c9cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9d0:	f104 091a 	add.w	r9, r4, #26
 800c9d4:	e019      	b.n	800ca0a <_printf_float+0x39a>
 800c9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9da:	4631      	mov	r1, r6
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b8      	blx	r7
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d1e5      	bne.n	800c9b0 <_printf_float+0x340>
 800c9e4:	e6a1      	b.n	800c72a <_printf_float+0xba>
 800c9e6:	4653      	mov	r3, sl
 800c9e8:	4642      	mov	r2, r8
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	47b8      	blx	r7
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d1e9      	bne.n	800c9c8 <_printf_float+0x358>
 800c9f4:	e699      	b.n	800c72a <_printf_float+0xba>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	464a      	mov	r2, r9
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	47b8      	blx	r7
 800ca00:	3001      	adds	r0, #1
 800ca02:	f43f ae92 	beq.w	800c72a <_printf_float+0xba>
 800ca06:	f108 0801 	add.w	r8, r8, #1
 800ca0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca0e:	1a9b      	subs	r3, r3, r2
 800ca10:	eba3 030a 	sub.w	r3, r3, sl
 800ca14:	4543      	cmp	r3, r8
 800ca16:	dcee      	bgt.n	800c9f6 <_printf_float+0x386>
 800ca18:	e74a      	b.n	800c8b0 <_printf_float+0x240>
 800ca1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca1c:	2a01      	cmp	r2, #1
 800ca1e:	dc01      	bgt.n	800ca24 <_printf_float+0x3b4>
 800ca20:	07db      	lsls	r3, r3, #31
 800ca22:	d53a      	bpl.n	800ca9a <_printf_float+0x42a>
 800ca24:	2301      	movs	r3, #1
 800ca26:	4642      	mov	r2, r8
 800ca28:	4631      	mov	r1, r6
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	47b8      	blx	r7
 800ca2e:	3001      	adds	r0, #1
 800ca30:	f43f ae7b 	beq.w	800c72a <_printf_float+0xba>
 800ca34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b8      	blx	r7
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f108 0801 	add.w	r8, r8, #1
 800ca44:	f43f ae71 	beq.w	800c72a <_printf_float+0xba>
 800ca48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f103 3aff 	add.w	sl, r3, #4294967295
 800ca50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca54:	2300      	movs	r3, #0
 800ca56:	f7f3 ffef 	bl	8000a38 <__aeabi_dcmpeq>
 800ca5a:	b9c8      	cbnz	r0, 800ca90 <_printf_float+0x420>
 800ca5c:	4653      	mov	r3, sl
 800ca5e:	4642      	mov	r2, r8
 800ca60:	4631      	mov	r1, r6
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b8      	blx	r7
 800ca66:	3001      	adds	r0, #1
 800ca68:	d10e      	bne.n	800ca88 <_printf_float+0x418>
 800ca6a:	e65e      	b.n	800c72a <_printf_float+0xba>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4652      	mov	r2, sl
 800ca70:	4631      	mov	r1, r6
 800ca72:	4628      	mov	r0, r5
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	f43f ae57 	beq.w	800c72a <_printf_float+0xba>
 800ca7c:	f108 0801 	add.w	r8, r8, #1
 800ca80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca82:	3b01      	subs	r3, #1
 800ca84:	4543      	cmp	r3, r8
 800ca86:	dcf1      	bgt.n	800ca6c <_printf_float+0x3fc>
 800ca88:	464b      	mov	r3, r9
 800ca8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca8e:	e6de      	b.n	800c84e <_printf_float+0x1de>
 800ca90:	f04f 0800 	mov.w	r8, #0
 800ca94:	f104 0a1a 	add.w	sl, r4, #26
 800ca98:	e7f2      	b.n	800ca80 <_printf_float+0x410>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e7df      	b.n	800ca5e <_printf_float+0x3ee>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	464a      	mov	r2, r9
 800caa2:	4631      	mov	r1, r6
 800caa4:	4628      	mov	r0, r5
 800caa6:	47b8      	blx	r7
 800caa8:	3001      	adds	r0, #1
 800caaa:	f43f ae3e 	beq.w	800c72a <_printf_float+0xba>
 800caae:	f108 0801 	add.w	r8, r8, #1
 800cab2:	68e3      	ldr	r3, [r4, #12]
 800cab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cab6:	1a9b      	subs	r3, r3, r2
 800cab8:	4543      	cmp	r3, r8
 800caba:	dcf0      	bgt.n	800ca9e <_printf_float+0x42e>
 800cabc:	e6fc      	b.n	800c8b8 <_printf_float+0x248>
 800cabe:	f04f 0800 	mov.w	r8, #0
 800cac2:	f104 0919 	add.w	r9, r4, #25
 800cac6:	e7f4      	b.n	800cab2 <_printf_float+0x442>
 800cac8:	2900      	cmp	r1, #0
 800caca:	f43f ae8b 	beq.w	800c7e4 <_printf_float+0x174>
 800cace:	2300      	movs	r3, #0
 800cad0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cad4:	ab09      	add	r3, sp, #36	; 0x24
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	ec49 8b10 	vmov	d0, r8, r9
 800cadc:	6022      	str	r2, [r4, #0]
 800cade:	f8cd a004 	str.w	sl, [sp, #4]
 800cae2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cae6:	4628      	mov	r0, r5
 800cae8:	f7ff fd2d 	bl	800c546 <__cvt>
 800caec:	4680      	mov	r8, r0
 800caee:	e648      	b.n	800c782 <_printf_float+0x112>

0800caf0 <_printf_common>:
 800caf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	4691      	mov	r9, r2
 800caf6:	461f      	mov	r7, r3
 800caf8:	688a      	ldr	r2, [r1, #8]
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb00:	4293      	cmp	r3, r2
 800cb02:	bfb8      	it	lt
 800cb04:	4613      	movlt	r3, r2
 800cb06:	f8c9 3000 	str.w	r3, [r9]
 800cb0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb0e:	4606      	mov	r6, r0
 800cb10:	460c      	mov	r4, r1
 800cb12:	b112      	cbz	r2, 800cb1a <_printf_common+0x2a>
 800cb14:	3301      	adds	r3, #1
 800cb16:	f8c9 3000 	str.w	r3, [r9]
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	0699      	lsls	r1, r3, #26
 800cb1e:	bf42      	ittt	mi
 800cb20:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb24:	3302      	addmi	r3, #2
 800cb26:	f8c9 3000 	strmi.w	r3, [r9]
 800cb2a:	6825      	ldr	r5, [r4, #0]
 800cb2c:	f015 0506 	ands.w	r5, r5, #6
 800cb30:	d107      	bne.n	800cb42 <_printf_common+0x52>
 800cb32:	f104 0a19 	add.w	sl, r4, #25
 800cb36:	68e3      	ldr	r3, [r4, #12]
 800cb38:	f8d9 2000 	ldr.w	r2, [r9]
 800cb3c:	1a9b      	subs	r3, r3, r2
 800cb3e:	42ab      	cmp	r3, r5
 800cb40:	dc28      	bgt.n	800cb94 <_printf_common+0xa4>
 800cb42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb46:	6822      	ldr	r2, [r4, #0]
 800cb48:	3300      	adds	r3, #0
 800cb4a:	bf18      	it	ne
 800cb4c:	2301      	movne	r3, #1
 800cb4e:	0692      	lsls	r2, r2, #26
 800cb50:	d42d      	bmi.n	800cbae <_printf_common+0xbe>
 800cb52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb56:	4639      	mov	r1, r7
 800cb58:	4630      	mov	r0, r6
 800cb5a:	47c0      	blx	r8
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d020      	beq.n	800cba2 <_printf_common+0xb2>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	68e5      	ldr	r5, [r4, #12]
 800cb64:	f8d9 2000 	ldr.w	r2, [r9]
 800cb68:	f003 0306 	and.w	r3, r3, #6
 800cb6c:	2b04      	cmp	r3, #4
 800cb6e:	bf08      	it	eq
 800cb70:	1aad      	subeq	r5, r5, r2
 800cb72:	68a3      	ldr	r3, [r4, #8]
 800cb74:	6922      	ldr	r2, [r4, #16]
 800cb76:	bf0c      	ite	eq
 800cb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb7c:	2500      	movne	r5, #0
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	bfc4      	itt	gt
 800cb82:	1a9b      	subgt	r3, r3, r2
 800cb84:	18ed      	addgt	r5, r5, r3
 800cb86:	f04f 0900 	mov.w	r9, #0
 800cb8a:	341a      	adds	r4, #26
 800cb8c:	454d      	cmp	r5, r9
 800cb8e:	d11a      	bne.n	800cbc6 <_printf_common+0xd6>
 800cb90:	2000      	movs	r0, #0
 800cb92:	e008      	b.n	800cba6 <_printf_common+0xb6>
 800cb94:	2301      	movs	r3, #1
 800cb96:	4652      	mov	r2, sl
 800cb98:	4639      	mov	r1, r7
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	47c0      	blx	r8
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d103      	bne.n	800cbaa <_printf_common+0xba>
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295
 800cba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbaa:	3501      	adds	r5, #1
 800cbac:	e7c3      	b.n	800cb36 <_printf_common+0x46>
 800cbae:	18e1      	adds	r1, r4, r3
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	2030      	movs	r0, #48	; 0x30
 800cbb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbb8:	4422      	add	r2, r4
 800cbba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbc2:	3302      	adds	r3, #2
 800cbc4:	e7c5      	b.n	800cb52 <_printf_common+0x62>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4622      	mov	r2, r4
 800cbca:	4639      	mov	r1, r7
 800cbcc:	4630      	mov	r0, r6
 800cbce:	47c0      	blx	r8
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d0e6      	beq.n	800cba2 <_printf_common+0xb2>
 800cbd4:	f109 0901 	add.w	r9, r9, #1
 800cbd8:	e7d8      	b.n	800cb8c <_printf_common+0x9c>

0800cbda <quorem>:
 800cbda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbde:	6903      	ldr	r3, [r0, #16]
 800cbe0:	690c      	ldr	r4, [r1, #16]
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	f2c0 8082 	blt.w	800ccee <quorem+0x114>
 800cbea:	3c01      	subs	r4, #1
 800cbec:	f101 0714 	add.w	r7, r1, #20
 800cbf0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cbf4:	f100 0614 	add.w	r6, r0, #20
 800cbf8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cbfc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cc00:	eb06 030c 	add.w	r3, r6, ip
 800cc04:	3501      	adds	r5, #1
 800cc06:	eb07 090c 	add.w	r9, r7, ip
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	fbb0 f5f5 	udiv	r5, r0, r5
 800cc10:	b395      	cbz	r5, 800cc78 <quorem+0x9e>
 800cc12:	f04f 0a00 	mov.w	sl, #0
 800cc16:	4638      	mov	r0, r7
 800cc18:	46b6      	mov	lr, r6
 800cc1a:	46d3      	mov	fp, sl
 800cc1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc20:	b293      	uxth	r3, r2
 800cc22:	fb05 a303 	mla	r3, r5, r3, sl
 800cc26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	ebab 0303 	sub.w	r3, fp, r3
 800cc30:	0c12      	lsrs	r2, r2, #16
 800cc32:	f8de b000 	ldr.w	fp, [lr]
 800cc36:	fb05 a202 	mla	r2, r5, r2, sl
 800cc3a:	fa13 f38b 	uxtah	r3, r3, fp
 800cc3e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cc42:	fa1f fb82 	uxth.w	fp, r2
 800cc46:	f8de 2000 	ldr.w	r2, [lr]
 800cc4a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cc4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc58:	4581      	cmp	r9, r0
 800cc5a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cc5e:	f84e 3b04 	str.w	r3, [lr], #4
 800cc62:	d2db      	bcs.n	800cc1c <quorem+0x42>
 800cc64:	f856 300c 	ldr.w	r3, [r6, ip]
 800cc68:	b933      	cbnz	r3, 800cc78 <quorem+0x9e>
 800cc6a:	9b01      	ldr	r3, [sp, #4]
 800cc6c:	3b04      	subs	r3, #4
 800cc6e:	429e      	cmp	r6, r3
 800cc70:	461a      	mov	r2, r3
 800cc72:	d330      	bcc.n	800ccd6 <quorem+0xfc>
 800cc74:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc78:	4640      	mov	r0, r8
 800cc7a:	f001 f821 	bl	800dcc0 <__mcmp>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	db25      	blt.n	800ccce <quorem+0xf4>
 800cc82:	3501      	adds	r5, #1
 800cc84:	4630      	mov	r0, r6
 800cc86:	f04f 0c00 	mov.w	ip, #0
 800cc8a:	f857 2b04 	ldr.w	r2, [r7], #4
 800cc8e:	f8d0 e000 	ldr.w	lr, [r0]
 800cc92:	b293      	uxth	r3, r2
 800cc94:	ebac 0303 	sub.w	r3, ip, r3
 800cc98:	0c12      	lsrs	r2, r2, #16
 800cc9a:	fa13 f38e 	uxtah	r3, r3, lr
 800cc9e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccac:	45b9      	cmp	r9, r7
 800ccae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ccb2:	f840 3b04 	str.w	r3, [r0], #4
 800ccb6:	d2e8      	bcs.n	800cc8a <quorem+0xb0>
 800ccb8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ccbc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ccc0:	b92a      	cbnz	r2, 800ccce <quorem+0xf4>
 800ccc2:	3b04      	subs	r3, #4
 800ccc4:	429e      	cmp	r6, r3
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	d30b      	bcc.n	800cce2 <quorem+0x108>
 800ccca:	f8c8 4010 	str.w	r4, [r8, #16]
 800ccce:	4628      	mov	r0, r5
 800ccd0:	b003      	add	sp, #12
 800ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd6:	6812      	ldr	r2, [r2, #0]
 800ccd8:	3b04      	subs	r3, #4
 800ccda:	2a00      	cmp	r2, #0
 800ccdc:	d1ca      	bne.n	800cc74 <quorem+0x9a>
 800ccde:	3c01      	subs	r4, #1
 800cce0:	e7c5      	b.n	800cc6e <quorem+0x94>
 800cce2:	6812      	ldr	r2, [r2, #0]
 800cce4:	3b04      	subs	r3, #4
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	d1ef      	bne.n	800ccca <quorem+0xf0>
 800ccea:	3c01      	subs	r4, #1
 800ccec:	e7ea      	b.n	800ccc4 <quorem+0xea>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	e7ee      	b.n	800ccd0 <quorem+0xf6>
 800ccf2:	0000      	movs	r0, r0
 800ccf4:	0000      	movs	r0, r0
	...

0800ccf8 <_dtoa_r>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	ec57 6b10 	vmov	r6, r7, d0
 800cd00:	b097      	sub	sp, #92	; 0x5c
 800cd02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd04:	9106      	str	r1, [sp, #24]
 800cd06:	4604      	mov	r4, r0
 800cd08:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd0a:	9312      	str	r3, [sp, #72]	; 0x48
 800cd0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd10:	e9cd 6700 	strd	r6, r7, [sp]
 800cd14:	b93d      	cbnz	r5, 800cd26 <_dtoa_r+0x2e>
 800cd16:	2010      	movs	r0, #16
 800cd18:	f000 fdb4 	bl	800d884 <malloc>
 800cd1c:	6260      	str	r0, [r4, #36]	; 0x24
 800cd1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd22:	6005      	str	r5, [r0, #0]
 800cd24:	60c5      	str	r5, [r0, #12]
 800cd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd28:	6819      	ldr	r1, [r3, #0]
 800cd2a:	b151      	cbz	r1, 800cd42 <_dtoa_r+0x4a>
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	604a      	str	r2, [r1, #4]
 800cd30:	2301      	movs	r3, #1
 800cd32:	4093      	lsls	r3, r2
 800cd34:	608b      	str	r3, [r1, #8]
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 fde0 	bl	800d8fc <_Bfree>
 800cd3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	1e3b      	subs	r3, r7, #0
 800cd44:	bfbb      	ittet	lt
 800cd46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd4a:	9301      	strlt	r3, [sp, #4]
 800cd4c:	2300      	movge	r3, #0
 800cd4e:	2201      	movlt	r2, #1
 800cd50:	bfac      	ite	ge
 800cd52:	f8c8 3000 	strge.w	r3, [r8]
 800cd56:	f8c8 2000 	strlt.w	r2, [r8]
 800cd5a:	4baf      	ldr	r3, [pc, #700]	; (800d018 <_dtoa_r+0x320>)
 800cd5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd60:	ea33 0308 	bics.w	r3, r3, r8
 800cd64:	d114      	bne.n	800cd90 <_dtoa_r+0x98>
 800cd66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd68:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd6c:	6013      	str	r3, [r2, #0]
 800cd6e:	9b00      	ldr	r3, [sp, #0]
 800cd70:	b923      	cbnz	r3, 800cd7c <_dtoa_r+0x84>
 800cd72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f000 8542 	beq.w	800d800 <_dtoa_r+0xb08>
 800cd7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d02c <_dtoa_r+0x334>
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 8544 	beq.w	800d810 <_dtoa_r+0xb18>
 800cd88:	f10b 0303 	add.w	r3, fp, #3
 800cd8c:	f000 bd3e 	b.w	800d80c <_dtoa_r+0xb14>
 800cd90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd94:	2200      	movs	r2, #0
 800cd96:	2300      	movs	r3, #0
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fe4c 	bl	8000a38 <__aeabi_dcmpeq>
 800cda0:	4681      	mov	r9, r0
 800cda2:	b168      	cbz	r0, 800cdc0 <_dtoa_r+0xc8>
 800cda4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cda6:	2301      	movs	r3, #1
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 8524 	beq.w	800d7fa <_dtoa_r+0xb02>
 800cdb2:	4b9a      	ldr	r3, [pc, #616]	; (800d01c <_dtoa_r+0x324>)
 800cdb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdb6:	f103 3bff 	add.w	fp, r3, #4294967295
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	f000 bd28 	b.w	800d810 <_dtoa_r+0xb18>
 800cdc0:	aa14      	add	r2, sp, #80	; 0x50
 800cdc2:	a915      	add	r1, sp, #84	; 0x54
 800cdc4:	ec47 6b10 	vmov	d0, r6, r7
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 fff0 	bl	800ddae <__d2b>
 800cdce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cdd2:	9004      	str	r0, [sp, #16]
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	d07c      	beq.n	800ced2 <_dtoa_r+0x1da>
 800cdd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cddc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cde0:	46b2      	mov	sl, r6
 800cde2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cde6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cdea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cdee:	2200      	movs	r2, #0
 800cdf0:	4b8b      	ldr	r3, [pc, #556]	; (800d020 <_dtoa_r+0x328>)
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	4659      	mov	r1, fp
 800cdf6:	f7f3 f9ff 	bl	80001f8 <__aeabi_dsub>
 800cdfa:	a381      	add	r3, pc, #516	; (adr r3, 800d000 <_dtoa_r+0x308>)
 800cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce00:	f7f3 fbb2 	bl	8000568 <__aeabi_dmul>
 800ce04:	a380      	add	r3, pc, #512	; (adr r3, 800d008 <_dtoa_r+0x310>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 f9f7 	bl	80001fc <__adddf3>
 800ce0e:	4606      	mov	r6, r0
 800ce10:	4628      	mov	r0, r5
 800ce12:	460f      	mov	r7, r1
 800ce14:	f7f3 fb3e 	bl	8000494 <__aeabi_i2d>
 800ce18:	a37d      	add	r3, pc, #500	; (adr r3, 800d010 <_dtoa_r+0x318>)
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	f7f3 fba3 	bl	8000568 <__aeabi_dmul>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4630      	mov	r0, r6
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f7f3 f9e7 	bl	80001fc <__adddf3>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	f7f3 fe49 	bl	8000ac8 <__aeabi_d2iz>
 800ce36:	2200      	movs	r2, #0
 800ce38:	4682      	mov	sl, r0
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	4639      	mov	r1, r7
 800ce40:	f7f3 fe04 	bl	8000a4c <__aeabi_dcmplt>
 800ce44:	b148      	cbz	r0, 800ce5a <_dtoa_r+0x162>
 800ce46:	4650      	mov	r0, sl
 800ce48:	f7f3 fb24 	bl	8000494 <__aeabi_i2d>
 800ce4c:	4632      	mov	r2, r6
 800ce4e:	463b      	mov	r3, r7
 800ce50:	f7f3 fdf2 	bl	8000a38 <__aeabi_dcmpeq>
 800ce54:	b908      	cbnz	r0, 800ce5a <_dtoa_r+0x162>
 800ce56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce5a:	f1ba 0f16 	cmp.w	sl, #22
 800ce5e:	d859      	bhi.n	800cf14 <_dtoa_r+0x21c>
 800ce60:	4970      	ldr	r1, [pc, #448]	; (800d024 <_dtoa_r+0x32c>)
 800ce62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ce66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce6e:	f7f3 fe0b 	bl	8000a88 <__aeabi_dcmpgt>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d050      	beq.n	800cf18 <_dtoa_r+0x220>
 800ce76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce80:	1b5d      	subs	r5, r3, r5
 800ce82:	f1b5 0801 	subs.w	r8, r5, #1
 800ce86:	bf49      	itett	mi
 800ce88:	f1c5 0301 	rsbmi	r3, r5, #1
 800ce8c:	2300      	movpl	r3, #0
 800ce8e:	9305      	strmi	r3, [sp, #20]
 800ce90:	f04f 0800 	movmi.w	r8, #0
 800ce94:	bf58      	it	pl
 800ce96:	9305      	strpl	r3, [sp, #20]
 800ce98:	f1ba 0f00 	cmp.w	sl, #0
 800ce9c:	db3e      	blt.n	800cf1c <_dtoa_r+0x224>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	44d0      	add	r8, sl
 800cea2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cea6:	9307      	str	r3, [sp, #28]
 800cea8:	9b06      	ldr	r3, [sp, #24]
 800ceaa:	2b09      	cmp	r3, #9
 800ceac:	f200 8090 	bhi.w	800cfd0 <_dtoa_r+0x2d8>
 800ceb0:	2b05      	cmp	r3, #5
 800ceb2:	bfc4      	itt	gt
 800ceb4:	3b04      	subgt	r3, #4
 800ceb6:	9306      	strgt	r3, [sp, #24]
 800ceb8:	9b06      	ldr	r3, [sp, #24]
 800ceba:	f1a3 0302 	sub.w	r3, r3, #2
 800cebe:	bfcc      	ite	gt
 800cec0:	2500      	movgt	r5, #0
 800cec2:	2501      	movle	r5, #1
 800cec4:	2b03      	cmp	r3, #3
 800cec6:	f200 808f 	bhi.w	800cfe8 <_dtoa_r+0x2f0>
 800ceca:	e8df f003 	tbb	[pc, r3]
 800cece:	7f7d      	.short	0x7f7d
 800ced0:	7131      	.short	0x7131
 800ced2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ced6:	441d      	add	r5, r3
 800ced8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cedc:	2820      	cmp	r0, #32
 800cede:	dd13      	ble.n	800cf08 <_dtoa_r+0x210>
 800cee0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cee4:	9b00      	ldr	r3, [sp, #0]
 800cee6:	fa08 f800 	lsl.w	r8, r8, r0
 800ceea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ceee:	fa23 f000 	lsr.w	r0, r3, r0
 800cef2:	ea48 0000 	orr.w	r0, r8, r0
 800cef6:	f7f3 fabd 	bl	8000474 <__aeabi_ui2d>
 800cefa:	2301      	movs	r3, #1
 800cefc:	4682      	mov	sl, r0
 800cefe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cf02:	3d01      	subs	r5, #1
 800cf04:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf06:	e772      	b.n	800cdee <_dtoa_r+0xf6>
 800cf08:	9b00      	ldr	r3, [sp, #0]
 800cf0a:	f1c0 0020 	rsb	r0, r0, #32
 800cf0e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf12:	e7f0      	b.n	800cef6 <_dtoa_r+0x1fe>
 800cf14:	2301      	movs	r3, #1
 800cf16:	e7b1      	b.n	800ce7c <_dtoa_r+0x184>
 800cf18:	900f      	str	r0, [sp, #60]	; 0x3c
 800cf1a:	e7b0      	b.n	800ce7e <_dtoa_r+0x186>
 800cf1c:	9b05      	ldr	r3, [sp, #20]
 800cf1e:	eba3 030a 	sub.w	r3, r3, sl
 800cf22:	9305      	str	r3, [sp, #20]
 800cf24:	f1ca 0300 	rsb	r3, sl, #0
 800cf28:	9307      	str	r3, [sp, #28]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	930e      	str	r3, [sp, #56]	; 0x38
 800cf2e:	e7bb      	b.n	800cea8 <_dtoa_r+0x1b0>
 800cf30:	2301      	movs	r3, #1
 800cf32:	930a      	str	r3, [sp, #40]	; 0x28
 800cf34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	dd59      	ble.n	800cfee <_dtoa_r+0x2f6>
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	4699      	mov	r9, r3
 800cf3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf40:	2200      	movs	r2, #0
 800cf42:	6072      	str	r2, [r6, #4]
 800cf44:	2204      	movs	r2, #4
 800cf46:	f102 0014 	add.w	r0, r2, #20
 800cf4a:	4298      	cmp	r0, r3
 800cf4c:	6871      	ldr	r1, [r6, #4]
 800cf4e:	d953      	bls.n	800cff8 <_dtoa_r+0x300>
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 fc9f 	bl	800d894 <_Balloc>
 800cf56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf58:	6030      	str	r0, [r6, #0]
 800cf5a:	f1b9 0f0e 	cmp.w	r9, #14
 800cf5e:	f8d3 b000 	ldr.w	fp, [r3]
 800cf62:	f200 80e6 	bhi.w	800d132 <_dtoa_r+0x43a>
 800cf66:	2d00      	cmp	r5, #0
 800cf68:	f000 80e3 	beq.w	800d132 <_dtoa_r+0x43a>
 800cf6c:	ed9d 7b00 	vldr	d7, [sp]
 800cf70:	f1ba 0f00 	cmp.w	sl, #0
 800cf74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cf78:	dd74      	ble.n	800d064 <_dtoa_r+0x36c>
 800cf7a:	4a2a      	ldr	r2, [pc, #168]	; (800d024 <_dtoa_r+0x32c>)
 800cf7c:	f00a 030f 	and.w	r3, sl, #15
 800cf80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf84:	ed93 7b00 	vldr	d7, [r3]
 800cf88:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cf8c:	06f0      	lsls	r0, r6, #27
 800cf8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cf92:	d565      	bpl.n	800d060 <_dtoa_r+0x368>
 800cf94:	4b24      	ldr	r3, [pc, #144]	; (800d028 <_dtoa_r+0x330>)
 800cf96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cf9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf9e:	f7f3 fc0d 	bl	80007bc <__aeabi_ddiv>
 800cfa2:	e9cd 0100 	strd	r0, r1, [sp]
 800cfa6:	f006 060f 	and.w	r6, r6, #15
 800cfaa:	2503      	movs	r5, #3
 800cfac:	4f1e      	ldr	r7, [pc, #120]	; (800d028 <_dtoa_r+0x330>)
 800cfae:	e04c      	b.n	800d04a <_dtoa_r+0x352>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfb6:	4453      	add	r3, sl
 800cfb8:	f103 0901 	add.w	r9, r3, #1
 800cfbc:	9302      	str	r3, [sp, #8]
 800cfbe:	464b      	mov	r3, r9
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	bfb8      	it	lt
 800cfc4:	2301      	movlt	r3, #1
 800cfc6:	e7ba      	b.n	800cf3e <_dtoa_r+0x246>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	e7b2      	b.n	800cf32 <_dtoa_r+0x23a>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e7f0      	b.n	800cfb2 <_dtoa_r+0x2ba>
 800cfd0:	2501      	movs	r5, #1
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9306      	str	r3, [sp, #24]
 800cfd6:	950a      	str	r5, [sp, #40]	; 0x28
 800cfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfdc:	9302      	str	r3, [sp, #8]
 800cfde:	4699      	mov	r9, r3
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2312      	movs	r3, #18
 800cfe4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cfe6:	e7aa      	b.n	800cf3e <_dtoa_r+0x246>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	930a      	str	r3, [sp, #40]	; 0x28
 800cfec:	e7f4      	b.n	800cfd8 <_dtoa_r+0x2e0>
 800cfee:	2301      	movs	r3, #1
 800cff0:	9302      	str	r3, [sp, #8]
 800cff2:	4699      	mov	r9, r3
 800cff4:	461a      	mov	r2, r3
 800cff6:	e7f5      	b.n	800cfe4 <_dtoa_r+0x2ec>
 800cff8:	3101      	adds	r1, #1
 800cffa:	6071      	str	r1, [r6, #4]
 800cffc:	0052      	lsls	r2, r2, #1
 800cffe:	e7a2      	b.n	800cf46 <_dtoa_r+0x24e>
 800d000:	636f4361 	.word	0x636f4361
 800d004:	3fd287a7 	.word	0x3fd287a7
 800d008:	8b60c8b3 	.word	0x8b60c8b3
 800d00c:	3fc68a28 	.word	0x3fc68a28
 800d010:	509f79fb 	.word	0x509f79fb
 800d014:	3fd34413 	.word	0x3fd34413
 800d018:	7ff00000 	.word	0x7ff00000
 800d01c:	0800e7e9 	.word	0x0800e7e9
 800d020:	3ff80000 	.word	0x3ff80000
 800d024:	0800e820 	.word	0x0800e820
 800d028:	0800e7f8 	.word	0x0800e7f8
 800d02c:	0800e7f3 	.word	0x0800e7f3
 800d030:	07f1      	lsls	r1, r6, #31
 800d032:	d508      	bpl.n	800d046 <_dtoa_r+0x34e>
 800d034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d03c:	f7f3 fa94 	bl	8000568 <__aeabi_dmul>
 800d040:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d044:	3501      	adds	r5, #1
 800d046:	1076      	asrs	r6, r6, #1
 800d048:	3708      	adds	r7, #8
 800d04a:	2e00      	cmp	r6, #0
 800d04c:	d1f0      	bne.n	800d030 <_dtoa_r+0x338>
 800d04e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d052:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d056:	f7f3 fbb1 	bl	80007bc <__aeabi_ddiv>
 800d05a:	e9cd 0100 	strd	r0, r1, [sp]
 800d05e:	e01a      	b.n	800d096 <_dtoa_r+0x39e>
 800d060:	2502      	movs	r5, #2
 800d062:	e7a3      	b.n	800cfac <_dtoa_r+0x2b4>
 800d064:	f000 80a0 	beq.w	800d1a8 <_dtoa_r+0x4b0>
 800d068:	f1ca 0600 	rsb	r6, sl, #0
 800d06c:	4b9f      	ldr	r3, [pc, #636]	; (800d2ec <_dtoa_r+0x5f4>)
 800d06e:	4fa0      	ldr	r7, [pc, #640]	; (800d2f0 <_dtoa_r+0x5f8>)
 800d070:	f006 020f 	and.w	r2, r6, #15
 800d074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d080:	f7f3 fa72 	bl	8000568 <__aeabi_dmul>
 800d084:	e9cd 0100 	strd	r0, r1, [sp]
 800d088:	1136      	asrs	r6, r6, #4
 800d08a:	2300      	movs	r3, #0
 800d08c:	2502      	movs	r5, #2
 800d08e:	2e00      	cmp	r6, #0
 800d090:	d17f      	bne.n	800d192 <_dtoa_r+0x49a>
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1e1      	bne.n	800d05a <_dtoa_r+0x362>
 800d096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 8087 	beq.w	800d1ac <_dtoa_r+0x4b4>
 800d09e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4b93      	ldr	r3, [pc, #588]	; (800d2f4 <_dtoa_r+0x5fc>)
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 fccf 	bl	8000a4c <__aeabi_dcmplt>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d07c      	beq.n	800d1ac <_dtoa_r+0x4b4>
 800d0b2:	f1b9 0f00 	cmp.w	r9, #0
 800d0b6:	d079      	beq.n	800d1ac <_dtoa_r+0x4b4>
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dd35      	ble.n	800d12a <_dtoa_r+0x432>
 800d0be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d0c2:	9308      	str	r3, [sp, #32]
 800d0c4:	4639      	mov	r1, r7
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	4b8b      	ldr	r3, [pc, #556]	; (800d2f8 <_dtoa_r+0x600>)
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f7f3 fa4c 	bl	8000568 <__aeabi_dmul>
 800d0d0:	e9cd 0100 	strd	r0, r1, [sp]
 800d0d4:	9f02      	ldr	r7, [sp, #8]
 800d0d6:	3501      	adds	r5, #1
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f7f3 f9db 	bl	8000494 <__aeabi_i2d>
 800d0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0e2:	f7f3 fa41 	bl	8000568 <__aeabi_dmul>
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4b84      	ldr	r3, [pc, #528]	; (800d2fc <_dtoa_r+0x604>)
 800d0ea:	f7f3 f887 	bl	80001fc <__adddf3>
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d0f4:	2f00      	cmp	r7, #0
 800d0f6:	d15d      	bne.n	800d1b4 <_dtoa_r+0x4bc>
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	4b81      	ldr	r3, [pc, #516]	; (800d300 <_dtoa_r+0x608>)
 800d0fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d100:	f7f3 f87a 	bl	80001f8 <__aeabi_dsub>
 800d104:	462a      	mov	r2, r5
 800d106:	4633      	mov	r3, r6
 800d108:	e9cd 0100 	strd	r0, r1, [sp]
 800d10c:	f7f3 fcbc 	bl	8000a88 <__aeabi_dcmpgt>
 800d110:	2800      	cmp	r0, #0
 800d112:	f040 8288 	bne.w	800d626 <_dtoa_r+0x92e>
 800d116:	462a      	mov	r2, r5
 800d118:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d11c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d120:	f7f3 fc94 	bl	8000a4c <__aeabi_dcmplt>
 800d124:	2800      	cmp	r0, #0
 800d126:	f040 827c 	bne.w	800d622 <_dtoa_r+0x92a>
 800d12a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d12e:	e9cd 2300 	strd	r2, r3, [sp]
 800d132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d134:	2b00      	cmp	r3, #0
 800d136:	f2c0 8150 	blt.w	800d3da <_dtoa_r+0x6e2>
 800d13a:	f1ba 0f0e 	cmp.w	sl, #14
 800d13e:	f300 814c 	bgt.w	800d3da <_dtoa_r+0x6e2>
 800d142:	4b6a      	ldr	r3, [pc, #424]	; (800d2ec <_dtoa_r+0x5f4>)
 800d144:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d148:	ed93 7b00 	vldr	d7, [r3]
 800d14c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d14e:	2b00      	cmp	r3, #0
 800d150:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d154:	f280 80d8 	bge.w	800d308 <_dtoa_r+0x610>
 800d158:	f1b9 0f00 	cmp.w	r9, #0
 800d15c:	f300 80d4 	bgt.w	800d308 <_dtoa_r+0x610>
 800d160:	f040 825e 	bne.w	800d620 <_dtoa_r+0x928>
 800d164:	2200      	movs	r2, #0
 800d166:	4b66      	ldr	r3, [pc, #408]	; (800d300 <_dtoa_r+0x608>)
 800d168:	ec51 0b17 	vmov	r0, r1, d7
 800d16c:	f7f3 f9fc 	bl	8000568 <__aeabi_dmul>
 800d170:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d174:	f7f3 fc7e 	bl	8000a74 <__aeabi_dcmpge>
 800d178:	464f      	mov	r7, r9
 800d17a:	464e      	mov	r6, r9
 800d17c:	2800      	cmp	r0, #0
 800d17e:	f040 8234 	bne.w	800d5ea <_dtoa_r+0x8f2>
 800d182:	2331      	movs	r3, #49	; 0x31
 800d184:	f10b 0501 	add.w	r5, fp, #1
 800d188:	f88b 3000 	strb.w	r3, [fp]
 800d18c:	f10a 0a01 	add.w	sl, sl, #1
 800d190:	e22f      	b.n	800d5f2 <_dtoa_r+0x8fa>
 800d192:	07f2      	lsls	r2, r6, #31
 800d194:	d505      	bpl.n	800d1a2 <_dtoa_r+0x4aa>
 800d196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19a:	f7f3 f9e5 	bl	8000568 <__aeabi_dmul>
 800d19e:	3501      	adds	r5, #1
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	1076      	asrs	r6, r6, #1
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	e772      	b.n	800d08e <_dtoa_r+0x396>
 800d1a8:	2502      	movs	r5, #2
 800d1aa:	e774      	b.n	800d096 <_dtoa_r+0x39e>
 800d1ac:	f8cd a020 	str.w	sl, [sp, #32]
 800d1b0:	464f      	mov	r7, r9
 800d1b2:	e791      	b.n	800d0d8 <_dtoa_r+0x3e0>
 800d1b4:	4b4d      	ldr	r3, [pc, #308]	; (800d2ec <_dtoa_r+0x5f4>)
 800d1b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d047      	beq.n	800d254 <_dtoa_r+0x55c>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	494e      	ldr	r1, [pc, #312]	; (800d304 <_dtoa_r+0x60c>)
 800d1cc:	f7f3 faf6 	bl	80007bc <__aeabi_ddiv>
 800d1d0:	462a      	mov	r2, r5
 800d1d2:	4633      	mov	r3, r6
 800d1d4:	f7f3 f810 	bl	80001f8 <__aeabi_dsub>
 800d1d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d1dc:	465d      	mov	r5, fp
 800d1de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1e2:	f7f3 fc71 	bl	8000ac8 <__aeabi_d2iz>
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	f7f3 f954 	bl	8000494 <__aeabi_i2d>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1f4:	f7f3 f800 	bl	80001f8 <__aeabi_dsub>
 800d1f8:	3630      	adds	r6, #48	; 0x30
 800d1fa:	f805 6b01 	strb.w	r6, [r5], #1
 800d1fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d202:	e9cd 0100 	strd	r0, r1, [sp]
 800d206:	f7f3 fc21 	bl	8000a4c <__aeabi_dcmplt>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d163      	bne.n	800d2d6 <_dtoa_r+0x5de>
 800d20e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d212:	2000      	movs	r0, #0
 800d214:	4937      	ldr	r1, [pc, #220]	; (800d2f4 <_dtoa_r+0x5fc>)
 800d216:	f7f2 ffef 	bl	80001f8 <__aeabi_dsub>
 800d21a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d21e:	f7f3 fc15 	bl	8000a4c <__aeabi_dcmplt>
 800d222:	2800      	cmp	r0, #0
 800d224:	f040 80b7 	bne.w	800d396 <_dtoa_r+0x69e>
 800d228:	eba5 030b 	sub.w	r3, r5, fp
 800d22c:	429f      	cmp	r7, r3
 800d22e:	f77f af7c 	ble.w	800d12a <_dtoa_r+0x432>
 800d232:	2200      	movs	r2, #0
 800d234:	4b30      	ldr	r3, [pc, #192]	; (800d2f8 <_dtoa_r+0x600>)
 800d236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d23a:	f7f3 f995 	bl	8000568 <__aeabi_dmul>
 800d23e:	2200      	movs	r2, #0
 800d240:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d244:	4b2c      	ldr	r3, [pc, #176]	; (800d2f8 <_dtoa_r+0x600>)
 800d246:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d24a:	f7f3 f98d 	bl	8000568 <__aeabi_dmul>
 800d24e:	e9cd 0100 	strd	r0, r1, [sp]
 800d252:	e7c4      	b.n	800d1de <_dtoa_r+0x4e6>
 800d254:	462a      	mov	r2, r5
 800d256:	4633      	mov	r3, r6
 800d258:	f7f3 f986 	bl	8000568 <__aeabi_dmul>
 800d25c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d260:	eb0b 0507 	add.w	r5, fp, r7
 800d264:	465e      	mov	r6, fp
 800d266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d26a:	f7f3 fc2d 	bl	8000ac8 <__aeabi_d2iz>
 800d26e:	4607      	mov	r7, r0
 800d270:	f7f3 f910 	bl	8000494 <__aeabi_i2d>
 800d274:	3730      	adds	r7, #48	; 0x30
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d27e:	f7f2 ffbb 	bl	80001f8 <__aeabi_dsub>
 800d282:	f806 7b01 	strb.w	r7, [r6], #1
 800d286:	42ae      	cmp	r6, r5
 800d288:	e9cd 0100 	strd	r0, r1, [sp]
 800d28c:	f04f 0200 	mov.w	r2, #0
 800d290:	d126      	bne.n	800d2e0 <_dtoa_r+0x5e8>
 800d292:	4b1c      	ldr	r3, [pc, #112]	; (800d304 <_dtoa_r+0x60c>)
 800d294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d298:	f7f2 ffb0 	bl	80001fc <__adddf3>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2a4:	f7f3 fbf0 	bl	8000a88 <__aeabi_dcmpgt>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d174      	bne.n	800d396 <_dtoa_r+0x69e>
 800d2ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	4914      	ldr	r1, [pc, #80]	; (800d304 <_dtoa_r+0x60c>)
 800d2b4:	f7f2 ffa0 	bl	80001f8 <__aeabi_dsub>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2c0:	f7f3 fbc4 	bl	8000a4c <__aeabi_dcmplt>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f43f af30 	beq.w	800d12a <_dtoa_r+0x432>
 800d2ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2ce:	2b30      	cmp	r3, #48	; 0x30
 800d2d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d2d4:	d002      	beq.n	800d2dc <_dtoa_r+0x5e4>
 800d2d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d2da:	e04a      	b.n	800d372 <_dtoa_r+0x67a>
 800d2dc:	4615      	mov	r5, r2
 800d2de:	e7f4      	b.n	800d2ca <_dtoa_r+0x5d2>
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <_dtoa_r+0x600>)
 800d2e2:	f7f3 f941 	bl	8000568 <__aeabi_dmul>
 800d2e6:	e9cd 0100 	strd	r0, r1, [sp]
 800d2ea:	e7bc      	b.n	800d266 <_dtoa_r+0x56e>
 800d2ec:	0800e820 	.word	0x0800e820
 800d2f0:	0800e7f8 	.word	0x0800e7f8
 800d2f4:	3ff00000 	.word	0x3ff00000
 800d2f8:	40240000 	.word	0x40240000
 800d2fc:	401c0000 	.word	0x401c0000
 800d300:	40140000 	.word	0x40140000
 800d304:	3fe00000 	.word	0x3fe00000
 800d308:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d30c:	465d      	mov	r5, fp
 800d30e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d312:	4630      	mov	r0, r6
 800d314:	4639      	mov	r1, r7
 800d316:	f7f3 fa51 	bl	80007bc <__aeabi_ddiv>
 800d31a:	f7f3 fbd5 	bl	8000ac8 <__aeabi_d2iz>
 800d31e:	4680      	mov	r8, r0
 800d320:	f7f3 f8b8 	bl	8000494 <__aeabi_i2d>
 800d324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d328:	f7f3 f91e 	bl	8000568 <__aeabi_dmul>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4630      	mov	r0, r6
 800d332:	4639      	mov	r1, r7
 800d334:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d338:	f7f2 ff5e 	bl	80001f8 <__aeabi_dsub>
 800d33c:	f805 6b01 	strb.w	r6, [r5], #1
 800d340:	eba5 060b 	sub.w	r6, r5, fp
 800d344:	45b1      	cmp	r9, r6
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	d139      	bne.n	800d3c0 <_dtoa_r+0x6c8>
 800d34c:	f7f2 ff56 	bl	80001fc <__adddf3>
 800d350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d354:	4606      	mov	r6, r0
 800d356:	460f      	mov	r7, r1
 800d358:	f7f3 fb96 	bl	8000a88 <__aeabi_dcmpgt>
 800d35c:	b9c8      	cbnz	r0, 800d392 <_dtoa_r+0x69a>
 800d35e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d362:	4630      	mov	r0, r6
 800d364:	4639      	mov	r1, r7
 800d366:	f7f3 fb67 	bl	8000a38 <__aeabi_dcmpeq>
 800d36a:	b110      	cbz	r0, 800d372 <_dtoa_r+0x67a>
 800d36c:	f018 0f01 	tst.w	r8, #1
 800d370:	d10f      	bne.n	800d392 <_dtoa_r+0x69a>
 800d372:	9904      	ldr	r1, [sp, #16]
 800d374:	4620      	mov	r0, r4
 800d376:	f000 fac1 	bl	800d8fc <_Bfree>
 800d37a:	2300      	movs	r3, #0
 800d37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d37e:	702b      	strb	r3, [r5, #0]
 800d380:	f10a 0301 	add.w	r3, sl, #1
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f000 8241 	beq.w	800d810 <_dtoa_r+0xb18>
 800d38e:	601d      	str	r5, [r3, #0]
 800d390:	e23e      	b.n	800d810 <_dtoa_r+0xb18>
 800d392:	f8cd a020 	str.w	sl, [sp, #32]
 800d396:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d39a:	2a39      	cmp	r2, #57	; 0x39
 800d39c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d3a0:	d108      	bne.n	800d3b4 <_dtoa_r+0x6bc>
 800d3a2:	459b      	cmp	fp, r3
 800d3a4:	d10a      	bne.n	800d3bc <_dtoa_r+0x6c4>
 800d3a6:	9b08      	ldr	r3, [sp, #32]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	9308      	str	r3, [sp, #32]
 800d3ac:	2330      	movs	r3, #48	; 0x30
 800d3ae:	f88b 3000 	strb.w	r3, [fp]
 800d3b2:	465b      	mov	r3, fp
 800d3b4:	781a      	ldrb	r2, [r3, #0]
 800d3b6:	3201      	adds	r2, #1
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	e78c      	b.n	800d2d6 <_dtoa_r+0x5de>
 800d3bc:	461d      	mov	r5, r3
 800d3be:	e7ea      	b.n	800d396 <_dtoa_r+0x69e>
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	4b9b      	ldr	r3, [pc, #620]	; (800d630 <_dtoa_r+0x938>)
 800d3c4:	f7f3 f8d0 	bl	8000568 <__aeabi_dmul>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	460f      	mov	r7, r1
 800d3d0:	f7f3 fb32 	bl	8000a38 <__aeabi_dcmpeq>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d09a      	beq.n	800d30e <_dtoa_r+0x616>
 800d3d8:	e7cb      	b.n	800d372 <_dtoa_r+0x67a>
 800d3da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3dc:	2a00      	cmp	r2, #0
 800d3de:	f000 808b 	beq.w	800d4f8 <_dtoa_r+0x800>
 800d3e2:	9a06      	ldr	r2, [sp, #24]
 800d3e4:	2a01      	cmp	r2, #1
 800d3e6:	dc6e      	bgt.n	800d4c6 <_dtoa_r+0x7ce>
 800d3e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d3ea:	2a00      	cmp	r2, #0
 800d3ec:	d067      	beq.n	800d4be <_dtoa_r+0x7c6>
 800d3ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3f2:	9f07      	ldr	r7, [sp, #28]
 800d3f4:	9d05      	ldr	r5, [sp, #20]
 800d3f6:	9a05      	ldr	r2, [sp, #20]
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	441a      	add	r2, r3
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	9205      	str	r2, [sp, #20]
 800d400:	4498      	add	r8, r3
 800d402:	f000 fb1b 	bl	800da3c <__i2b>
 800d406:	4606      	mov	r6, r0
 800d408:	2d00      	cmp	r5, #0
 800d40a:	dd0c      	ble.n	800d426 <_dtoa_r+0x72e>
 800d40c:	f1b8 0f00 	cmp.w	r8, #0
 800d410:	dd09      	ble.n	800d426 <_dtoa_r+0x72e>
 800d412:	4545      	cmp	r5, r8
 800d414:	9a05      	ldr	r2, [sp, #20]
 800d416:	462b      	mov	r3, r5
 800d418:	bfa8      	it	ge
 800d41a:	4643      	movge	r3, r8
 800d41c:	1ad2      	subs	r2, r2, r3
 800d41e:	9205      	str	r2, [sp, #20]
 800d420:	1aed      	subs	r5, r5, r3
 800d422:	eba8 0803 	sub.w	r8, r8, r3
 800d426:	9b07      	ldr	r3, [sp, #28]
 800d428:	b1eb      	cbz	r3, 800d466 <_dtoa_r+0x76e>
 800d42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d067      	beq.n	800d500 <_dtoa_r+0x808>
 800d430:	b18f      	cbz	r7, 800d456 <_dtoa_r+0x75e>
 800d432:	4631      	mov	r1, r6
 800d434:	463a      	mov	r2, r7
 800d436:	4620      	mov	r0, r4
 800d438:	f000 fba0 	bl	800db7c <__pow5mult>
 800d43c:	9a04      	ldr	r2, [sp, #16]
 800d43e:	4601      	mov	r1, r0
 800d440:	4606      	mov	r6, r0
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fb03 	bl	800da4e <__multiply>
 800d448:	9904      	ldr	r1, [sp, #16]
 800d44a:	9008      	str	r0, [sp, #32]
 800d44c:	4620      	mov	r0, r4
 800d44e:	f000 fa55 	bl	800d8fc <_Bfree>
 800d452:	9b08      	ldr	r3, [sp, #32]
 800d454:	9304      	str	r3, [sp, #16]
 800d456:	9b07      	ldr	r3, [sp, #28]
 800d458:	1bda      	subs	r2, r3, r7
 800d45a:	d004      	beq.n	800d466 <_dtoa_r+0x76e>
 800d45c:	9904      	ldr	r1, [sp, #16]
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fb8c 	bl	800db7c <__pow5mult>
 800d464:	9004      	str	r0, [sp, #16]
 800d466:	2101      	movs	r1, #1
 800d468:	4620      	mov	r0, r4
 800d46a:	f000 fae7 	bl	800da3c <__i2b>
 800d46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d470:	4607      	mov	r7, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	f000 81d0 	beq.w	800d818 <_dtoa_r+0xb20>
 800d478:	461a      	mov	r2, r3
 800d47a:	4601      	mov	r1, r0
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 fb7d 	bl	800db7c <__pow5mult>
 800d482:	9b06      	ldr	r3, [sp, #24]
 800d484:	2b01      	cmp	r3, #1
 800d486:	4607      	mov	r7, r0
 800d488:	dc40      	bgt.n	800d50c <_dtoa_r+0x814>
 800d48a:	9b00      	ldr	r3, [sp, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d139      	bne.n	800d504 <_dtoa_r+0x80c>
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d496:	2b00      	cmp	r3, #0
 800d498:	d136      	bne.n	800d508 <_dtoa_r+0x810>
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4a0:	0d1b      	lsrs	r3, r3, #20
 800d4a2:	051b      	lsls	r3, r3, #20
 800d4a4:	b12b      	cbz	r3, 800d4b2 <_dtoa_r+0x7ba>
 800d4a6:	9b05      	ldr	r3, [sp, #20]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	9305      	str	r3, [sp, #20]
 800d4ac:	f108 0801 	add.w	r8, r8, #1
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d12a      	bne.n	800d510 <_dtoa_r+0x818>
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	e030      	b.n	800d520 <_dtoa_r+0x828>
 800d4be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4c4:	e795      	b.n	800d3f2 <_dtoa_r+0x6fa>
 800d4c6:	9b07      	ldr	r3, [sp, #28]
 800d4c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800d4cc:	42bb      	cmp	r3, r7
 800d4ce:	bfbf      	itttt	lt
 800d4d0:	9b07      	ldrlt	r3, [sp, #28]
 800d4d2:	9707      	strlt	r7, [sp, #28]
 800d4d4:	1afa      	sublt	r2, r7, r3
 800d4d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d4d8:	bfbb      	ittet	lt
 800d4da:	189b      	addlt	r3, r3, r2
 800d4dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d4de:	1bdf      	subge	r7, r3, r7
 800d4e0:	2700      	movlt	r7, #0
 800d4e2:	f1b9 0f00 	cmp.w	r9, #0
 800d4e6:	bfb5      	itete	lt
 800d4e8:	9b05      	ldrlt	r3, [sp, #20]
 800d4ea:	9d05      	ldrge	r5, [sp, #20]
 800d4ec:	eba3 0509 	sublt.w	r5, r3, r9
 800d4f0:	464b      	movge	r3, r9
 800d4f2:	bfb8      	it	lt
 800d4f4:	2300      	movlt	r3, #0
 800d4f6:	e77e      	b.n	800d3f6 <_dtoa_r+0x6fe>
 800d4f8:	9f07      	ldr	r7, [sp, #28]
 800d4fa:	9d05      	ldr	r5, [sp, #20]
 800d4fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d4fe:	e783      	b.n	800d408 <_dtoa_r+0x710>
 800d500:	9a07      	ldr	r2, [sp, #28]
 800d502:	e7ab      	b.n	800d45c <_dtoa_r+0x764>
 800d504:	2300      	movs	r3, #0
 800d506:	e7d4      	b.n	800d4b2 <_dtoa_r+0x7ba>
 800d508:	9b00      	ldr	r3, [sp, #0]
 800d50a:	e7d2      	b.n	800d4b2 <_dtoa_r+0x7ba>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9307      	str	r3, [sp, #28]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d516:	6918      	ldr	r0, [r3, #16]
 800d518:	f000 fa42 	bl	800d9a0 <__hi0bits>
 800d51c:	f1c0 0020 	rsb	r0, r0, #32
 800d520:	4440      	add	r0, r8
 800d522:	f010 001f 	ands.w	r0, r0, #31
 800d526:	d047      	beq.n	800d5b8 <_dtoa_r+0x8c0>
 800d528:	f1c0 0320 	rsb	r3, r0, #32
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	dd3b      	ble.n	800d5a8 <_dtoa_r+0x8b0>
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	f1c0 001c 	rsb	r0, r0, #28
 800d536:	4403      	add	r3, r0
 800d538:	9305      	str	r3, [sp, #20]
 800d53a:	4405      	add	r5, r0
 800d53c:	4480      	add	r8, r0
 800d53e:	9b05      	ldr	r3, [sp, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	dd05      	ble.n	800d550 <_dtoa_r+0x858>
 800d544:	461a      	mov	r2, r3
 800d546:	9904      	ldr	r1, [sp, #16]
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fb65 	bl	800dc18 <__lshift>
 800d54e:	9004      	str	r0, [sp, #16]
 800d550:	f1b8 0f00 	cmp.w	r8, #0
 800d554:	dd05      	ble.n	800d562 <_dtoa_r+0x86a>
 800d556:	4639      	mov	r1, r7
 800d558:	4642      	mov	r2, r8
 800d55a:	4620      	mov	r0, r4
 800d55c:	f000 fb5c 	bl	800dc18 <__lshift>
 800d560:	4607      	mov	r7, r0
 800d562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d564:	b353      	cbz	r3, 800d5bc <_dtoa_r+0x8c4>
 800d566:	4639      	mov	r1, r7
 800d568:	9804      	ldr	r0, [sp, #16]
 800d56a:	f000 fba9 	bl	800dcc0 <__mcmp>
 800d56e:	2800      	cmp	r0, #0
 800d570:	da24      	bge.n	800d5bc <_dtoa_r+0x8c4>
 800d572:	2300      	movs	r3, #0
 800d574:	220a      	movs	r2, #10
 800d576:	9904      	ldr	r1, [sp, #16]
 800d578:	4620      	mov	r0, r4
 800d57a:	f000 f9d6 	bl	800d92a <__multadd>
 800d57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d580:	9004      	str	r0, [sp, #16]
 800d582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d586:	2b00      	cmp	r3, #0
 800d588:	f000 814d 	beq.w	800d826 <_dtoa_r+0xb2e>
 800d58c:	2300      	movs	r3, #0
 800d58e:	4631      	mov	r1, r6
 800d590:	220a      	movs	r2, #10
 800d592:	4620      	mov	r0, r4
 800d594:	f000 f9c9 	bl	800d92a <__multadd>
 800d598:	9b02      	ldr	r3, [sp, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	4606      	mov	r6, r0
 800d59e:	dc4f      	bgt.n	800d640 <_dtoa_r+0x948>
 800d5a0:	9b06      	ldr	r3, [sp, #24]
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	dd4c      	ble.n	800d640 <_dtoa_r+0x948>
 800d5a6:	e011      	b.n	800d5cc <_dtoa_r+0x8d4>
 800d5a8:	d0c9      	beq.n	800d53e <_dtoa_r+0x846>
 800d5aa:	9a05      	ldr	r2, [sp, #20]
 800d5ac:	331c      	adds	r3, #28
 800d5ae:	441a      	add	r2, r3
 800d5b0:	9205      	str	r2, [sp, #20]
 800d5b2:	441d      	add	r5, r3
 800d5b4:	4498      	add	r8, r3
 800d5b6:	e7c2      	b.n	800d53e <_dtoa_r+0x846>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	e7f6      	b.n	800d5aa <_dtoa_r+0x8b2>
 800d5bc:	f1b9 0f00 	cmp.w	r9, #0
 800d5c0:	dc38      	bgt.n	800d634 <_dtoa_r+0x93c>
 800d5c2:	9b06      	ldr	r3, [sp, #24]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	dd35      	ble.n	800d634 <_dtoa_r+0x93c>
 800d5c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5cc:	9b02      	ldr	r3, [sp, #8]
 800d5ce:	b963      	cbnz	r3, 800d5ea <_dtoa_r+0x8f2>
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	2205      	movs	r2, #5
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 f9a8 	bl	800d92a <__multadd>
 800d5da:	4601      	mov	r1, r0
 800d5dc:	4607      	mov	r7, r0
 800d5de:	9804      	ldr	r0, [sp, #16]
 800d5e0:	f000 fb6e 	bl	800dcc0 <__mcmp>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	f73f adcc 	bgt.w	800d182 <_dtoa_r+0x48a>
 800d5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ec:	465d      	mov	r5, fp
 800d5ee:	ea6f 0a03 	mvn.w	sl, r3
 800d5f2:	f04f 0900 	mov.w	r9, #0
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 f97f 	bl	800d8fc <_Bfree>
 800d5fe:	2e00      	cmp	r6, #0
 800d600:	f43f aeb7 	beq.w	800d372 <_dtoa_r+0x67a>
 800d604:	f1b9 0f00 	cmp.w	r9, #0
 800d608:	d005      	beq.n	800d616 <_dtoa_r+0x91e>
 800d60a:	45b1      	cmp	r9, r6
 800d60c:	d003      	beq.n	800d616 <_dtoa_r+0x91e>
 800d60e:	4649      	mov	r1, r9
 800d610:	4620      	mov	r0, r4
 800d612:	f000 f973 	bl	800d8fc <_Bfree>
 800d616:	4631      	mov	r1, r6
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 f96f 	bl	800d8fc <_Bfree>
 800d61e:	e6a8      	b.n	800d372 <_dtoa_r+0x67a>
 800d620:	2700      	movs	r7, #0
 800d622:	463e      	mov	r6, r7
 800d624:	e7e1      	b.n	800d5ea <_dtoa_r+0x8f2>
 800d626:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d62a:	463e      	mov	r6, r7
 800d62c:	e5a9      	b.n	800d182 <_dtoa_r+0x48a>
 800d62e:	bf00      	nop
 800d630:	40240000 	.word	0x40240000
 800d634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d636:	f8cd 9008 	str.w	r9, [sp, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 80fa 	beq.w	800d834 <_dtoa_r+0xb3c>
 800d640:	2d00      	cmp	r5, #0
 800d642:	dd05      	ble.n	800d650 <_dtoa_r+0x958>
 800d644:	4631      	mov	r1, r6
 800d646:	462a      	mov	r2, r5
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 fae5 	bl	800dc18 <__lshift>
 800d64e:	4606      	mov	r6, r0
 800d650:	9b07      	ldr	r3, [sp, #28]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d04c      	beq.n	800d6f0 <_dtoa_r+0x9f8>
 800d656:	6871      	ldr	r1, [r6, #4]
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 f91b 	bl	800d894 <_Balloc>
 800d65e:	6932      	ldr	r2, [r6, #16]
 800d660:	3202      	adds	r2, #2
 800d662:	4605      	mov	r5, r0
 800d664:	0092      	lsls	r2, r2, #2
 800d666:	f106 010c 	add.w	r1, r6, #12
 800d66a:	300c      	adds	r0, #12
 800d66c:	f7fe ff58 	bl	800c520 <memcpy>
 800d670:	2201      	movs	r2, #1
 800d672:	4629      	mov	r1, r5
 800d674:	4620      	mov	r0, r4
 800d676:	f000 facf 	bl	800dc18 <__lshift>
 800d67a:	9b00      	ldr	r3, [sp, #0]
 800d67c:	f8cd b014 	str.w	fp, [sp, #20]
 800d680:	f003 0301 	and.w	r3, r3, #1
 800d684:	46b1      	mov	r9, r6
 800d686:	9307      	str	r3, [sp, #28]
 800d688:	4606      	mov	r6, r0
 800d68a:	4639      	mov	r1, r7
 800d68c:	9804      	ldr	r0, [sp, #16]
 800d68e:	f7ff faa4 	bl	800cbda <quorem>
 800d692:	4649      	mov	r1, r9
 800d694:	4605      	mov	r5, r0
 800d696:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d69a:	9804      	ldr	r0, [sp, #16]
 800d69c:	f000 fb10 	bl	800dcc0 <__mcmp>
 800d6a0:	4632      	mov	r2, r6
 800d6a2:	9000      	str	r0, [sp, #0]
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f000 fb24 	bl	800dcf4 <__mdiff>
 800d6ac:	68c3      	ldr	r3, [r0, #12]
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	bb03      	cbnz	r3, 800d6f4 <_dtoa_r+0x9fc>
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	9008      	str	r0, [sp, #32]
 800d6b6:	9804      	ldr	r0, [sp, #16]
 800d6b8:	f000 fb02 	bl	800dcc0 <__mcmp>
 800d6bc:	9a08      	ldr	r2, [sp, #32]
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	9308      	str	r3, [sp, #32]
 800d6c6:	f000 f919 	bl	800d8fc <_Bfree>
 800d6ca:	9b08      	ldr	r3, [sp, #32]
 800d6cc:	b9a3      	cbnz	r3, 800d6f8 <_dtoa_r+0xa00>
 800d6ce:	9a06      	ldr	r2, [sp, #24]
 800d6d0:	b992      	cbnz	r2, 800d6f8 <_dtoa_r+0xa00>
 800d6d2:	9a07      	ldr	r2, [sp, #28]
 800d6d4:	b982      	cbnz	r2, 800d6f8 <_dtoa_r+0xa00>
 800d6d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d6da:	d029      	beq.n	800d730 <_dtoa_r+0xa38>
 800d6dc:	9b00      	ldr	r3, [sp, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	dd01      	ble.n	800d6e6 <_dtoa_r+0x9ee>
 800d6e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d6e6:	9b05      	ldr	r3, [sp, #20]
 800d6e8:	1c5d      	adds	r5, r3, #1
 800d6ea:	f883 8000 	strb.w	r8, [r3]
 800d6ee:	e782      	b.n	800d5f6 <_dtoa_r+0x8fe>
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	e7c2      	b.n	800d67a <_dtoa_r+0x982>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e7e3      	b.n	800d6c0 <_dtoa_r+0x9c8>
 800d6f8:	9a00      	ldr	r2, [sp, #0]
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	db04      	blt.n	800d708 <_dtoa_r+0xa10>
 800d6fe:	d125      	bne.n	800d74c <_dtoa_r+0xa54>
 800d700:	9a06      	ldr	r2, [sp, #24]
 800d702:	bb1a      	cbnz	r2, 800d74c <_dtoa_r+0xa54>
 800d704:	9a07      	ldr	r2, [sp, #28]
 800d706:	bb0a      	cbnz	r2, 800d74c <_dtoa_r+0xa54>
 800d708:	2b00      	cmp	r3, #0
 800d70a:	ddec      	ble.n	800d6e6 <_dtoa_r+0x9ee>
 800d70c:	2201      	movs	r2, #1
 800d70e:	9904      	ldr	r1, [sp, #16]
 800d710:	4620      	mov	r0, r4
 800d712:	f000 fa81 	bl	800dc18 <__lshift>
 800d716:	4639      	mov	r1, r7
 800d718:	9004      	str	r0, [sp, #16]
 800d71a:	f000 fad1 	bl	800dcc0 <__mcmp>
 800d71e:	2800      	cmp	r0, #0
 800d720:	dc03      	bgt.n	800d72a <_dtoa_r+0xa32>
 800d722:	d1e0      	bne.n	800d6e6 <_dtoa_r+0x9ee>
 800d724:	f018 0f01 	tst.w	r8, #1
 800d728:	d0dd      	beq.n	800d6e6 <_dtoa_r+0x9ee>
 800d72a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d72e:	d1d8      	bne.n	800d6e2 <_dtoa_r+0x9ea>
 800d730:	9b05      	ldr	r3, [sp, #20]
 800d732:	9a05      	ldr	r2, [sp, #20]
 800d734:	1c5d      	adds	r5, r3, #1
 800d736:	2339      	movs	r3, #57	; 0x39
 800d738:	7013      	strb	r3, [r2, #0]
 800d73a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d73e:	2b39      	cmp	r3, #57	; 0x39
 800d740:	f105 32ff 	add.w	r2, r5, #4294967295
 800d744:	d04f      	beq.n	800d7e6 <_dtoa_r+0xaee>
 800d746:	3301      	adds	r3, #1
 800d748:	7013      	strb	r3, [r2, #0]
 800d74a:	e754      	b.n	800d5f6 <_dtoa_r+0x8fe>
 800d74c:	9a05      	ldr	r2, [sp, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f102 0501 	add.w	r5, r2, #1
 800d754:	dd06      	ble.n	800d764 <_dtoa_r+0xa6c>
 800d756:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d75a:	d0e9      	beq.n	800d730 <_dtoa_r+0xa38>
 800d75c:	f108 0801 	add.w	r8, r8, #1
 800d760:	9b05      	ldr	r3, [sp, #20]
 800d762:	e7c2      	b.n	800d6ea <_dtoa_r+0x9f2>
 800d764:	9a02      	ldr	r2, [sp, #8]
 800d766:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d76a:	eba5 030b 	sub.w	r3, r5, fp
 800d76e:	4293      	cmp	r3, r2
 800d770:	d021      	beq.n	800d7b6 <_dtoa_r+0xabe>
 800d772:	2300      	movs	r3, #0
 800d774:	220a      	movs	r2, #10
 800d776:	9904      	ldr	r1, [sp, #16]
 800d778:	4620      	mov	r0, r4
 800d77a:	f000 f8d6 	bl	800d92a <__multadd>
 800d77e:	45b1      	cmp	r9, r6
 800d780:	9004      	str	r0, [sp, #16]
 800d782:	f04f 0300 	mov.w	r3, #0
 800d786:	f04f 020a 	mov.w	r2, #10
 800d78a:	4649      	mov	r1, r9
 800d78c:	4620      	mov	r0, r4
 800d78e:	d105      	bne.n	800d79c <_dtoa_r+0xaa4>
 800d790:	f000 f8cb 	bl	800d92a <__multadd>
 800d794:	4681      	mov	r9, r0
 800d796:	4606      	mov	r6, r0
 800d798:	9505      	str	r5, [sp, #20]
 800d79a:	e776      	b.n	800d68a <_dtoa_r+0x992>
 800d79c:	f000 f8c5 	bl	800d92a <__multadd>
 800d7a0:	4631      	mov	r1, r6
 800d7a2:	4681      	mov	r9, r0
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	220a      	movs	r2, #10
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 f8be 	bl	800d92a <__multadd>
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	e7f2      	b.n	800d798 <_dtoa_r+0xaa0>
 800d7b2:	f04f 0900 	mov.w	r9, #0
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	9904      	ldr	r1, [sp, #16]
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f000 fa2c 	bl	800dc18 <__lshift>
 800d7c0:	4639      	mov	r1, r7
 800d7c2:	9004      	str	r0, [sp, #16]
 800d7c4:	f000 fa7c 	bl	800dcc0 <__mcmp>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	dcb6      	bgt.n	800d73a <_dtoa_r+0xa42>
 800d7cc:	d102      	bne.n	800d7d4 <_dtoa_r+0xadc>
 800d7ce:	f018 0f01 	tst.w	r8, #1
 800d7d2:	d1b2      	bne.n	800d73a <_dtoa_r+0xa42>
 800d7d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7d8:	2b30      	cmp	r3, #48	; 0x30
 800d7da:	f105 32ff 	add.w	r2, r5, #4294967295
 800d7de:	f47f af0a 	bne.w	800d5f6 <_dtoa_r+0x8fe>
 800d7e2:	4615      	mov	r5, r2
 800d7e4:	e7f6      	b.n	800d7d4 <_dtoa_r+0xadc>
 800d7e6:	4593      	cmp	fp, r2
 800d7e8:	d105      	bne.n	800d7f6 <_dtoa_r+0xafe>
 800d7ea:	2331      	movs	r3, #49	; 0x31
 800d7ec:	f10a 0a01 	add.w	sl, sl, #1
 800d7f0:	f88b 3000 	strb.w	r3, [fp]
 800d7f4:	e6ff      	b.n	800d5f6 <_dtoa_r+0x8fe>
 800d7f6:	4615      	mov	r5, r2
 800d7f8:	e79f      	b.n	800d73a <_dtoa_r+0xa42>
 800d7fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d860 <_dtoa_r+0xb68>
 800d7fe:	e007      	b.n	800d810 <_dtoa_r+0xb18>
 800d800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d802:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d864 <_dtoa_r+0xb6c>
 800d806:	b11b      	cbz	r3, 800d810 <_dtoa_r+0xb18>
 800d808:	f10b 0308 	add.w	r3, fp, #8
 800d80c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	4658      	mov	r0, fp
 800d812:	b017      	add	sp, #92	; 0x5c
 800d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d818:	9b06      	ldr	r3, [sp, #24]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	f77f ae35 	ble.w	800d48a <_dtoa_r+0x792>
 800d820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d822:	9307      	str	r3, [sp, #28]
 800d824:	e649      	b.n	800d4ba <_dtoa_r+0x7c2>
 800d826:	9b02      	ldr	r3, [sp, #8]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dc03      	bgt.n	800d834 <_dtoa_r+0xb3c>
 800d82c:	9b06      	ldr	r3, [sp, #24]
 800d82e:	2b02      	cmp	r3, #2
 800d830:	f73f aecc 	bgt.w	800d5cc <_dtoa_r+0x8d4>
 800d834:	465d      	mov	r5, fp
 800d836:	4639      	mov	r1, r7
 800d838:	9804      	ldr	r0, [sp, #16]
 800d83a:	f7ff f9ce 	bl	800cbda <quorem>
 800d83e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d842:	f805 8b01 	strb.w	r8, [r5], #1
 800d846:	9a02      	ldr	r2, [sp, #8]
 800d848:	eba5 030b 	sub.w	r3, r5, fp
 800d84c:	429a      	cmp	r2, r3
 800d84e:	ddb0      	ble.n	800d7b2 <_dtoa_r+0xaba>
 800d850:	2300      	movs	r3, #0
 800d852:	220a      	movs	r2, #10
 800d854:	9904      	ldr	r1, [sp, #16]
 800d856:	4620      	mov	r0, r4
 800d858:	f000 f867 	bl	800d92a <__multadd>
 800d85c:	9004      	str	r0, [sp, #16]
 800d85e:	e7ea      	b.n	800d836 <_dtoa_r+0xb3e>
 800d860:	0800e7e8 	.word	0x0800e7e8
 800d864:	0800e7ea 	.word	0x0800e7ea

0800d868 <_localeconv_r>:
 800d868:	4b04      	ldr	r3, [pc, #16]	; (800d87c <_localeconv_r+0x14>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6a18      	ldr	r0, [r3, #32]
 800d86e:	4b04      	ldr	r3, [pc, #16]	; (800d880 <_localeconv_r+0x18>)
 800d870:	2800      	cmp	r0, #0
 800d872:	bf08      	it	eq
 800d874:	4618      	moveq	r0, r3
 800d876:	30f0      	adds	r0, #240	; 0xf0
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	20000010 	.word	0x20000010
 800d880:	20000074 	.word	0x20000074

0800d884 <malloc>:
 800d884:	4b02      	ldr	r3, [pc, #8]	; (800d890 <malloc+0xc>)
 800d886:	4601      	mov	r1, r0
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	f000 baed 	b.w	800de68 <_malloc_r>
 800d88e:	bf00      	nop
 800d890:	20000010 	.word	0x20000010

0800d894 <_Balloc>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d898:	4604      	mov	r4, r0
 800d89a:	460e      	mov	r6, r1
 800d89c:	b93d      	cbnz	r5, 800d8ae <_Balloc+0x1a>
 800d89e:	2010      	movs	r0, #16
 800d8a0:	f7ff fff0 	bl	800d884 <malloc>
 800d8a4:	6260      	str	r0, [r4, #36]	; 0x24
 800d8a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8aa:	6005      	str	r5, [r0, #0]
 800d8ac:	60c5      	str	r5, [r0, #12]
 800d8ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d8b0:	68eb      	ldr	r3, [r5, #12]
 800d8b2:	b183      	cbz	r3, 800d8d6 <_Balloc+0x42>
 800d8b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d8bc:	b9b8      	cbnz	r0, 800d8ee <_Balloc+0x5a>
 800d8be:	2101      	movs	r1, #1
 800d8c0:	fa01 f506 	lsl.w	r5, r1, r6
 800d8c4:	1d6a      	adds	r2, r5, #5
 800d8c6:	0092      	lsls	r2, r2, #2
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f000 fabf 	bl	800de4c <_calloc_r>
 800d8ce:	b160      	cbz	r0, 800d8ea <_Balloc+0x56>
 800d8d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d8d4:	e00e      	b.n	800d8f4 <_Balloc+0x60>
 800d8d6:	2221      	movs	r2, #33	; 0x21
 800d8d8:	2104      	movs	r1, #4
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 fab6 	bl	800de4c <_calloc_r>
 800d8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8e2:	60e8      	str	r0, [r5, #12]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1e4      	bne.n	800d8b4 <_Balloc+0x20>
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	bd70      	pop	{r4, r5, r6, pc}
 800d8ee:	6802      	ldr	r2, [r0, #0]
 800d8f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8fa:	e7f7      	b.n	800d8ec <_Balloc+0x58>

0800d8fc <_Bfree>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d900:	4606      	mov	r6, r0
 800d902:	460d      	mov	r5, r1
 800d904:	b93c      	cbnz	r4, 800d916 <_Bfree+0x1a>
 800d906:	2010      	movs	r0, #16
 800d908:	f7ff ffbc 	bl	800d884 <malloc>
 800d90c:	6270      	str	r0, [r6, #36]	; 0x24
 800d90e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d912:	6004      	str	r4, [r0, #0]
 800d914:	60c4      	str	r4, [r0, #12]
 800d916:	b13d      	cbz	r5, 800d928 <_Bfree+0x2c>
 800d918:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d91a:	686a      	ldr	r2, [r5, #4]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d922:	6029      	str	r1, [r5, #0]
 800d924:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d928:	bd70      	pop	{r4, r5, r6, pc}

0800d92a <__multadd>:
 800d92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d92e:	690d      	ldr	r5, [r1, #16]
 800d930:	461f      	mov	r7, r3
 800d932:	4606      	mov	r6, r0
 800d934:	460c      	mov	r4, r1
 800d936:	f101 0c14 	add.w	ip, r1, #20
 800d93a:	2300      	movs	r3, #0
 800d93c:	f8dc 0000 	ldr.w	r0, [ip]
 800d940:	b281      	uxth	r1, r0
 800d942:	fb02 7101 	mla	r1, r2, r1, r7
 800d946:	0c0f      	lsrs	r7, r1, #16
 800d948:	0c00      	lsrs	r0, r0, #16
 800d94a:	fb02 7000 	mla	r0, r2, r0, r7
 800d94e:	b289      	uxth	r1, r1
 800d950:	3301      	adds	r3, #1
 800d952:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d956:	429d      	cmp	r5, r3
 800d958:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d95c:	f84c 1b04 	str.w	r1, [ip], #4
 800d960:	dcec      	bgt.n	800d93c <__multadd+0x12>
 800d962:	b1d7      	cbz	r7, 800d99a <__multadd+0x70>
 800d964:	68a3      	ldr	r3, [r4, #8]
 800d966:	42ab      	cmp	r3, r5
 800d968:	dc12      	bgt.n	800d990 <__multadd+0x66>
 800d96a:	6861      	ldr	r1, [r4, #4]
 800d96c:	4630      	mov	r0, r6
 800d96e:	3101      	adds	r1, #1
 800d970:	f7ff ff90 	bl	800d894 <_Balloc>
 800d974:	6922      	ldr	r2, [r4, #16]
 800d976:	3202      	adds	r2, #2
 800d978:	f104 010c 	add.w	r1, r4, #12
 800d97c:	4680      	mov	r8, r0
 800d97e:	0092      	lsls	r2, r2, #2
 800d980:	300c      	adds	r0, #12
 800d982:	f7fe fdcd 	bl	800c520 <memcpy>
 800d986:	4621      	mov	r1, r4
 800d988:	4630      	mov	r0, r6
 800d98a:	f7ff ffb7 	bl	800d8fc <_Bfree>
 800d98e:	4644      	mov	r4, r8
 800d990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d994:	3501      	adds	r5, #1
 800d996:	615f      	str	r7, [r3, #20]
 800d998:	6125      	str	r5, [r4, #16]
 800d99a:	4620      	mov	r0, r4
 800d99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9a0 <__hi0bits>:
 800d9a0:	0c02      	lsrs	r2, r0, #16
 800d9a2:	0412      	lsls	r2, r2, #16
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	b9b2      	cbnz	r2, 800d9d6 <__hi0bits+0x36>
 800d9a8:	0403      	lsls	r3, r0, #16
 800d9aa:	2010      	movs	r0, #16
 800d9ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d9b0:	bf04      	itt	eq
 800d9b2:	021b      	lsleq	r3, r3, #8
 800d9b4:	3008      	addeq	r0, #8
 800d9b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d9ba:	bf04      	itt	eq
 800d9bc:	011b      	lsleq	r3, r3, #4
 800d9be:	3004      	addeq	r0, #4
 800d9c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d9c4:	bf04      	itt	eq
 800d9c6:	009b      	lsleq	r3, r3, #2
 800d9c8:	3002      	addeq	r0, #2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	db06      	blt.n	800d9dc <__hi0bits+0x3c>
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	d503      	bpl.n	800d9da <__hi0bits+0x3a>
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	4770      	bx	lr
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	e7e8      	b.n	800d9ac <__hi0bits+0xc>
 800d9da:	2020      	movs	r0, #32
 800d9dc:	4770      	bx	lr

0800d9de <__lo0bits>:
 800d9de:	6803      	ldr	r3, [r0, #0]
 800d9e0:	f013 0207 	ands.w	r2, r3, #7
 800d9e4:	4601      	mov	r1, r0
 800d9e6:	d00b      	beq.n	800da00 <__lo0bits+0x22>
 800d9e8:	07da      	lsls	r2, r3, #31
 800d9ea:	d423      	bmi.n	800da34 <__lo0bits+0x56>
 800d9ec:	0798      	lsls	r0, r3, #30
 800d9ee:	bf49      	itett	mi
 800d9f0:	085b      	lsrmi	r3, r3, #1
 800d9f2:	089b      	lsrpl	r3, r3, #2
 800d9f4:	2001      	movmi	r0, #1
 800d9f6:	600b      	strmi	r3, [r1, #0]
 800d9f8:	bf5c      	itt	pl
 800d9fa:	600b      	strpl	r3, [r1, #0]
 800d9fc:	2002      	movpl	r0, #2
 800d9fe:	4770      	bx	lr
 800da00:	b298      	uxth	r0, r3
 800da02:	b9a8      	cbnz	r0, 800da30 <__lo0bits+0x52>
 800da04:	0c1b      	lsrs	r3, r3, #16
 800da06:	2010      	movs	r0, #16
 800da08:	f013 0fff 	tst.w	r3, #255	; 0xff
 800da0c:	bf04      	itt	eq
 800da0e:	0a1b      	lsreq	r3, r3, #8
 800da10:	3008      	addeq	r0, #8
 800da12:	071a      	lsls	r2, r3, #28
 800da14:	bf04      	itt	eq
 800da16:	091b      	lsreq	r3, r3, #4
 800da18:	3004      	addeq	r0, #4
 800da1a:	079a      	lsls	r2, r3, #30
 800da1c:	bf04      	itt	eq
 800da1e:	089b      	lsreq	r3, r3, #2
 800da20:	3002      	addeq	r0, #2
 800da22:	07da      	lsls	r2, r3, #31
 800da24:	d402      	bmi.n	800da2c <__lo0bits+0x4e>
 800da26:	085b      	lsrs	r3, r3, #1
 800da28:	d006      	beq.n	800da38 <__lo0bits+0x5a>
 800da2a:	3001      	adds	r0, #1
 800da2c:	600b      	str	r3, [r1, #0]
 800da2e:	4770      	bx	lr
 800da30:	4610      	mov	r0, r2
 800da32:	e7e9      	b.n	800da08 <__lo0bits+0x2a>
 800da34:	2000      	movs	r0, #0
 800da36:	4770      	bx	lr
 800da38:	2020      	movs	r0, #32
 800da3a:	4770      	bx	lr

0800da3c <__i2b>:
 800da3c:	b510      	push	{r4, lr}
 800da3e:	460c      	mov	r4, r1
 800da40:	2101      	movs	r1, #1
 800da42:	f7ff ff27 	bl	800d894 <_Balloc>
 800da46:	2201      	movs	r2, #1
 800da48:	6144      	str	r4, [r0, #20]
 800da4a:	6102      	str	r2, [r0, #16]
 800da4c:	bd10      	pop	{r4, pc}

0800da4e <__multiply>:
 800da4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da52:	4614      	mov	r4, r2
 800da54:	690a      	ldr	r2, [r1, #16]
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	429a      	cmp	r2, r3
 800da5a:	bfb8      	it	lt
 800da5c:	460b      	movlt	r3, r1
 800da5e:	4688      	mov	r8, r1
 800da60:	bfbc      	itt	lt
 800da62:	46a0      	movlt	r8, r4
 800da64:	461c      	movlt	r4, r3
 800da66:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da6a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800da6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da72:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da76:	eb07 0609 	add.w	r6, r7, r9
 800da7a:	42b3      	cmp	r3, r6
 800da7c:	bfb8      	it	lt
 800da7e:	3101      	addlt	r1, #1
 800da80:	f7ff ff08 	bl	800d894 <_Balloc>
 800da84:	f100 0514 	add.w	r5, r0, #20
 800da88:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800da8c:	462b      	mov	r3, r5
 800da8e:	2200      	movs	r2, #0
 800da90:	4573      	cmp	r3, lr
 800da92:	d316      	bcc.n	800dac2 <__multiply+0x74>
 800da94:	f104 0214 	add.w	r2, r4, #20
 800da98:	f108 0114 	add.w	r1, r8, #20
 800da9c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800daa0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	9b00      	ldr	r3, [sp, #0]
 800daa8:	9201      	str	r2, [sp, #4]
 800daaa:	4293      	cmp	r3, r2
 800daac:	d80c      	bhi.n	800dac8 <__multiply+0x7a>
 800daae:	2e00      	cmp	r6, #0
 800dab0:	dd03      	ble.n	800daba <__multiply+0x6c>
 800dab2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d05d      	beq.n	800db76 <__multiply+0x128>
 800daba:	6106      	str	r6, [r0, #16]
 800dabc:	b003      	add	sp, #12
 800dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac2:	f843 2b04 	str.w	r2, [r3], #4
 800dac6:	e7e3      	b.n	800da90 <__multiply+0x42>
 800dac8:	f8b2 b000 	ldrh.w	fp, [r2]
 800dacc:	f1bb 0f00 	cmp.w	fp, #0
 800dad0:	d023      	beq.n	800db1a <__multiply+0xcc>
 800dad2:	4689      	mov	r9, r1
 800dad4:	46ac      	mov	ip, r5
 800dad6:	f04f 0800 	mov.w	r8, #0
 800dada:	f859 4b04 	ldr.w	r4, [r9], #4
 800dade:	f8dc a000 	ldr.w	sl, [ip]
 800dae2:	b2a3      	uxth	r3, r4
 800dae4:	fa1f fa8a 	uxth.w	sl, sl
 800dae8:	fb0b a303 	mla	r3, fp, r3, sl
 800daec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800daf0:	f8dc 4000 	ldr.w	r4, [ip]
 800daf4:	4443      	add	r3, r8
 800daf6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dafa:	fb0b 840a 	mla	r4, fp, sl, r8
 800dafe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800db02:	46e2      	mov	sl, ip
 800db04:	b29b      	uxth	r3, r3
 800db06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800db0a:	454f      	cmp	r7, r9
 800db0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800db10:	f84a 3b04 	str.w	r3, [sl], #4
 800db14:	d82b      	bhi.n	800db6e <__multiply+0x120>
 800db16:	f8cc 8004 	str.w	r8, [ip, #4]
 800db1a:	9b01      	ldr	r3, [sp, #4]
 800db1c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800db20:	3204      	adds	r2, #4
 800db22:	f1ba 0f00 	cmp.w	sl, #0
 800db26:	d020      	beq.n	800db6a <__multiply+0x11c>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	4689      	mov	r9, r1
 800db2c:	46a8      	mov	r8, r5
 800db2e:	f04f 0b00 	mov.w	fp, #0
 800db32:	f8b9 c000 	ldrh.w	ip, [r9]
 800db36:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800db3a:	fb0a 440c 	mla	r4, sl, ip, r4
 800db3e:	445c      	add	r4, fp
 800db40:	46c4      	mov	ip, r8
 800db42:	b29b      	uxth	r3, r3
 800db44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800db48:	f84c 3b04 	str.w	r3, [ip], #4
 800db4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800db50:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800db54:	0c1b      	lsrs	r3, r3, #16
 800db56:	fb0a b303 	mla	r3, sl, r3, fp
 800db5a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800db5e:	454f      	cmp	r7, r9
 800db60:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800db64:	d805      	bhi.n	800db72 <__multiply+0x124>
 800db66:	f8c8 3004 	str.w	r3, [r8, #4]
 800db6a:	3504      	adds	r5, #4
 800db6c:	e79b      	b.n	800daa6 <__multiply+0x58>
 800db6e:	46d4      	mov	ip, sl
 800db70:	e7b3      	b.n	800dada <__multiply+0x8c>
 800db72:	46e0      	mov	r8, ip
 800db74:	e7dd      	b.n	800db32 <__multiply+0xe4>
 800db76:	3e01      	subs	r6, #1
 800db78:	e799      	b.n	800daae <__multiply+0x60>
	...

0800db7c <__pow5mult>:
 800db7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db80:	4615      	mov	r5, r2
 800db82:	f012 0203 	ands.w	r2, r2, #3
 800db86:	4606      	mov	r6, r0
 800db88:	460f      	mov	r7, r1
 800db8a:	d007      	beq.n	800db9c <__pow5mult+0x20>
 800db8c:	3a01      	subs	r2, #1
 800db8e:	4c21      	ldr	r4, [pc, #132]	; (800dc14 <__pow5mult+0x98>)
 800db90:	2300      	movs	r3, #0
 800db92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db96:	f7ff fec8 	bl	800d92a <__multadd>
 800db9a:	4607      	mov	r7, r0
 800db9c:	10ad      	asrs	r5, r5, #2
 800db9e:	d035      	beq.n	800dc0c <__pow5mult+0x90>
 800dba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dba2:	b93c      	cbnz	r4, 800dbb4 <__pow5mult+0x38>
 800dba4:	2010      	movs	r0, #16
 800dba6:	f7ff fe6d 	bl	800d884 <malloc>
 800dbaa:	6270      	str	r0, [r6, #36]	; 0x24
 800dbac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbb0:	6004      	str	r4, [r0, #0]
 800dbb2:	60c4      	str	r4, [r0, #12]
 800dbb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dbb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbbc:	b94c      	cbnz	r4, 800dbd2 <__pow5mult+0x56>
 800dbbe:	f240 2171 	movw	r1, #625	; 0x271
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f7ff ff3a 	bl	800da3c <__i2b>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbce:	4604      	mov	r4, r0
 800dbd0:	6003      	str	r3, [r0, #0]
 800dbd2:	f04f 0800 	mov.w	r8, #0
 800dbd6:	07eb      	lsls	r3, r5, #31
 800dbd8:	d50a      	bpl.n	800dbf0 <__pow5mult+0x74>
 800dbda:	4639      	mov	r1, r7
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4630      	mov	r0, r6
 800dbe0:	f7ff ff35 	bl	800da4e <__multiply>
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4681      	mov	r9, r0
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff fe87 	bl	800d8fc <_Bfree>
 800dbee:	464f      	mov	r7, r9
 800dbf0:	106d      	asrs	r5, r5, #1
 800dbf2:	d00b      	beq.n	800dc0c <__pow5mult+0x90>
 800dbf4:	6820      	ldr	r0, [r4, #0]
 800dbf6:	b938      	cbnz	r0, 800dc08 <__pow5mult+0x8c>
 800dbf8:	4622      	mov	r2, r4
 800dbfa:	4621      	mov	r1, r4
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7ff ff26 	bl	800da4e <__multiply>
 800dc02:	6020      	str	r0, [r4, #0]
 800dc04:	f8c0 8000 	str.w	r8, [r0]
 800dc08:	4604      	mov	r4, r0
 800dc0a:	e7e4      	b.n	800dbd6 <__pow5mult+0x5a>
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc12:	bf00      	nop
 800dc14:	0800e8e8 	.word	0x0800e8e8

0800dc18 <__lshift>:
 800dc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc22:	6923      	ldr	r3, [r4, #16]
 800dc24:	6849      	ldr	r1, [r1, #4]
 800dc26:	eb0a 0903 	add.w	r9, sl, r3
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	4616      	mov	r6, r2
 800dc30:	f109 0501 	add.w	r5, r9, #1
 800dc34:	42ab      	cmp	r3, r5
 800dc36:	db32      	blt.n	800dc9e <__lshift+0x86>
 800dc38:	4638      	mov	r0, r7
 800dc3a:	f7ff fe2b 	bl	800d894 <_Balloc>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	4680      	mov	r8, r0
 800dc42:	f100 0114 	add.w	r1, r0, #20
 800dc46:	461a      	mov	r2, r3
 800dc48:	4553      	cmp	r3, sl
 800dc4a:	db2b      	blt.n	800dca4 <__lshift+0x8c>
 800dc4c:	6920      	ldr	r0, [r4, #16]
 800dc4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc52:	f104 0314 	add.w	r3, r4, #20
 800dc56:	f016 021f 	ands.w	r2, r6, #31
 800dc5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc62:	d025      	beq.n	800dcb0 <__lshift+0x98>
 800dc64:	f1c2 0e20 	rsb	lr, r2, #32
 800dc68:	2000      	movs	r0, #0
 800dc6a:	681e      	ldr	r6, [r3, #0]
 800dc6c:	468a      	mov	sl, r1
 800dc6e:	4096      	lsls	r6, r2
 800dc70:	4330      	orrs	r0, r6
 800dc72:	f84a 0b04 	str.w	r0, [sl], #4
 800dc76:	f853 0b04 	ldr.w	r0, [r3], #4
 800dc7a:	459c      	cmp	ip, r3
 800dc7c:	fa20 f00e 	lsr.w	r0, r0, lr
 800dc80:	d814      	bhi.n	800dcac <__lshift+0x94>
 800dc82:	6048      	str	r0, [r1, #4]
 800dc84:	b108      	cbz	r0, 800dc8a <__lshift+0x72>
 800dc86:	f109 0502 	add.w	r5, r9, #2
 800dc8a:	3d01      	subs	r5, #1
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f8c8 5010 	str.w	r5, [r8, #16]
 800dc92:	4621      	mov	r1, r4
 800dc94:	f7ff fe32 	bl	800d8fc <_Bfree>
 800dc98:	4640      	mov	r0, r8
 800dc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc9e:	3101      	adds	r1, #1
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	e7c7      	b.n	800dc34 <__lshift+0x1c>
 800dca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	e7cd      	b.n	800dc48 <__lshift+0x30>
 800dcac:	4651      	mov	r1, sl
 800dcae:	e7dc      	b.n	800dc6a <__lshift+0x52>
 800dcb0:	3904      	subs	r1, #4
 800dcb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800dcba:	459c      	cmp	ip, r3
 800dcbc:	d8f9      	bhi.n	800dcb2 <__lshift+0x9a>
 800dcbe:	e7e4      	b.n	800dc8a <__lshift+0x72>

0800dcc0 <__mcmp>:
 800dcc0:	6903      	ldr	r3, [r0, #16]
 800dcc2:	690a      	ldr	r2, [r1, #16]
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	b530      	push	{r4, r5, lr}
 800dcc8:	d10c      	bne.n	800dce4 <__mcmp+0x24>
 800dcca:	0092      	lsls	r2, r2, #2
 800dccc:	3014      	adds	r0, #20
 800dcce:	3114      	adds	r1, #20
 800dcd0:	1884      	adds	r4, r0, r2
 800dcd2:	4411      	add	r1, r2
 800dcd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dcd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dcdc:	4295      	cmp	r5, r2
 800dcde:	d003      	beq.n	800dce8 <__mcmp+0x28>
 800dce0:	d305      	bcc.n	800dcee <__mcmp+0x2e>
 800dce2:	2301      	movs	r3, #1
 800dce4:	4618      	mov	r0, r3
 800dce6:	bd30      	pop	{r4, r5, pc}
 800dce8:	42a0      	cmp	r0, r4
 800dcea:	d3f3      	bcc.n	800dcd4 <__mcmp+0x14>
 800dcec:	e7fa      	b.n	800dce4 <__mcmp+0x24>
 800dcee:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf2:	e7f7      	b.n	800dce4 <__mcmp+0x24>

0800dcf4 <__mdiff>:
 800dcf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	4607      	mov	r7, r0
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	4628      	mov	r0, r5
 800dd00:	4614      	mov	r4, r2
 800dd02:	f7ff ffdd 	bl	800dcc0 <__mcmp>
 800dd06:	1e06      	subs	r6, r0, #0
 800dd08:	d108      	bne.n	800dd1c <__mdiff+0x28>
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f7ff fdc1 	bl	800d894 <_Balloc>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd1c:	bfa4      	itt	ge
 800dd1e:	4623      	movge	r3, r4
 800dd20:	462c      	movge	r4, r5
 800dd22:	4638      	mov	r0, r7
 800dd24:	6861      	ldr	r1, [r4, #4]
 800dd26:	bfa6      	itte	ge
 800dd28:	461d      	movge	r5, r3
 800dd2a:	2600      	movge	r6, #0
 800dd2c:	2601      	movlt	r6, #1
 800dd2e:	f7ff fdb1 	bl	800d894 <_Balloc>
 800dd32:	692b      	ldr	r3, [r5, #16]
 800dd34:	60c6      	str	r6, [r0, #12]
 800dd36:	6926      	ldr	r6, [r4, #16]
 800dd38:	f105 0914 	add.w	r9, r5, #20
 800dd3c:	f104 0214 	add.w	r2, r4, #20
 800dd40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800dd44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800dd48:	f100 0514 	add.w	r5, r0, #20
 800dd4c:	f04f 0e00 	mov.w	lr, #0
 800dd50:	f852 ab04 	ldr.w	sl, [r2], #4
 800dd54:	f859 4b04 	ldr.w	r4, [r9], #4
 800dd58:	fa1e f18a 	uxtah	r1, lr, sl
 800dd5c:	b2a3      	uxth	r3, r4
 800dd5e:	1ac9      	subs	r1, r1, r3
 800dd60:	0c23      	lsrs	r3, r4, #16
 800dd62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dd66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dd6a:	b289      	uxth	r1, r1
 800dd6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dd70:	45c8      	cmp	r8, r9
 800dd72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dd76:	4694      	mov	ip, r2
 800dd78:	f845 3b04 	str.w	r3, [r5], #4
 800dd7c:	d8e8      	bhi.n	800dd50 <__mdiff+0x5c>
 800dd7e:	45bc      	cmp	ip, r7
 800dd80:	d304      	bcc.n	800dd8c <__mdiff+0x98>
 800dd82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800dd86:	b183      	cbz	r3, 800ddaa <__mdiff+0xb6>
 800dd88:	6106      	str	r6, [r0, #16]
 800dd8a:	e7c5      	b.n	800dd18 <__mdiff+0x24>
 800dd8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dd90:	fa1e f381 	uxtah	r3, lr, r1
 800dd94:	141a      	asrs	r2, r3, #16
 800dd96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dda0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dda4:	f845 3b04 	str.w	r3, [r5], #4
 800dda8:	e7e9      	b.n	800dd7e <__mdiff+0x8a>
 800ddaa:	3e01      	subs	r6, #1
 800ddac:	e7e9      	b.n	800dd82 <__mdiff+0x8e>

0800ddae <__d2b>:
 800ddae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ddb2:	460e      	mov	r6, r1
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	ec59 8b10 	vmov	r8, r9, d0
 800ddba:	4615      	mov	r5, r2
 800ddbc:	f7ff fd6a 	bl	800d894 <_Balloc>
 800ddc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ddc4:	4607      	mov	r7, r0
 800ddc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ddca:	bb34      	cbnz	r4, 800de1a <__d2b+0x6c>
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	f1b8 0300 	subs.w	r3, r8, #0
 800ddd2:	d027      	beq.n	800de24 <__d2b+0x76>
 800ddd4:	a802      	add	r0, sp, #8
 800ddd6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ddda:	f7ff fe00 	bl	800d9de <__lo0bits>
 800ddde:	9900      	ldr	r1, [sp, #0]
 800dde0:	b1f0      	cbz	r0, 800de20 <__d2b+0x72>
 800dde2:	9a01      	ldr	r2, [sp, #4]
 800dde4:	f1c0 0320 	rsb	r3, r0, #32
 800dde8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddec:	430b      	orrs	r3, r1
 800ddee:	40c2      	lsrs	r2, r0
 800ddf0:	617b      	str	r3, [r7, #20]
 800ddf2:	9201      	str	r2, [sp, #4]
 800ddf4:	9b01      	ldr	r3, [sp, #4]
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	bf14      	ite	ne
 800ddfc:	2102      	movne	r1, #2
 800ddfe:	2101      	moveq	r1, #1
 800de00:	6139      	str	r1, [r7, #16]
 800de02:	b1c4      	cbz	r4, 800de36 <__d2b+0x88>
 800de04:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800de08:	4404      	add	r4, r0
 800de0a:	6034      	str	r4, [r6, #0]
 800de0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de10:	6028      	str	r0, [r5, #0]
 800de12:	4638      	mov	r0, r7
 800de14:	b003      	add	sp, #12
 800de16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de1e:	e7d5      	b.n	800ddcc <__d2b+0x1e>
 800de20:	6179      	str	r1, [r7, #20]
 800de22:	e7e7      	b.n	800ddf4 <__d2b+0x46>
 800de24:	a801      	add	r0, sp, #4
 800de26:	f7ff fdda 	bl	800d9de <__lo0bits>
 800de2a:	9b01      	ldr	r3, [sp, #4]
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	2101      	movs	r1, #1
 800de30:	6139      	str	r1, [r7, #16]
 800de32:	3020      	adds	r0, #32
 800de34:	e7e5      	b.n	800de02 <__d2b+0x54>
 800de36:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800de3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de3e:	6030      	str	r0, [r6, #0]
 800de40:	6918      	ldr	r0, [r3, #16]
 800de42:	f7ff fdad 	bl	800d9a0 <__hi0bits>
 800de46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800de4a:	e7e1      	b.n	800de10 <__d2b+0x62>

0800de4c <_calloc_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	fb02 f401 	mul.w	r4, r2, r1
 800de52:	4621      	mov	r1, r4
 800de54:	f000 f808 	bl	800de68 <_malloc_r>
 800de58:	4605      	mov	r5, r0
 800de5a:	b118      	cbz	r0, 800de64 <_calloc_r+0x18>
 800de5c:	4622      	mov	r2, r4
 800de5e:	2100      	movs	r1, #0
 800de60:	f7fe fb69 	bl	800c536 <memset>
 800de64:	4628      	mov	r0, r5
 800de66:	bd38      	pop	{r3, r4, r5, pc}

0800de68 <_malloc_r>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	1ccd      	adds	r5, r1, #3
 800de6c:	f025 0503 	bic.w	r5, r5, #3
 800de70:	3508      	adds	r5, #8
 800de72:	2d0c      	cmp	r5, #12
 800de74:	bf38      	it	cc
 800de76:	250c      	movcc	r5, #12
 800de78:	2d00      	cmp	r5, #0
 800de7a:	4606      	mov	r6, r0
 800de7c:	db01      	blt.n	800de82 <_malloc_r+0x1a>
 800de7e:	42a9      	cmp	r1, r5
 800de80:	d903      	bls.n	800de8a <_malloc_r+0x22>
 800de82:	230c      	movs	r3, #12
 800de84:	6033      	str	r3, [r6, #0]
 800de86:	2000      	movs	r0, #0
 800de88:	bd70      	pop	{r4, r5, r6, pc}
 800de8a:	f000 f869 	bl	800df60 <__malloc_lock>
 800de8e:	4a21      	ldr	r2, [pc, #132]	; (800df14 <_malloc_r+0xac>)
 800de90:	6814      	ldr	r4, [r2, #0]
 800de92:	4621      	mov	r1, r4
 800de94:	b991      	cbnz	r1, 800debc <_malloc_r+0x54>
 800de96:	4c20      	ldr	r4, [pc, #128]	; (800df18 <_malloc_r+0xb0>)
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	b91b      	cbnz	r3, 800dea4 <_malloc_r+0x3c>
 800de9c:	4630      	mov	r0, r6
 800de9e:	f000 f83d 	bl	800df1c <_sbrk_r>
 800dea2:	6020      	str	r0, [r4, #0]
 800dea4:	4629      	mov	r1, r5
 800dea6:	4630      	mov	r0, r6
 800dea8:	f000 f838 	bl	800df1c <_sbrk_r>
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	d124      	bne.n	800defa <_malloc_r+0x92>
 800deb0:	230c      	movs	r3, #12
 800deb2:	6033      	str	r3, [r6, #0]
 800deb4:	4630      	mov	r0, r6
 800deb6:	f000 f854 	bl	800df62 <__malloc_unlock>
 800deba:	e7e4      	b.n	800de86 <_malloc_r+0x1e>
 800debc:	680b      	ldr	r3, [r1, #0]
 800debe:	1b5b      	subs	r3, r3, r5
 800dec0:	d418      	bmi.n	800def4 <_malloc_r+0x8c>
 800dec2:	2b0b      	cmp	r3, #11
 800dec4:	d90f      	bls.n	800dee6 <_malloc_r+0x7e>
 800dec6:	600b      	str	r3, [r1, #0]
 800dec8:	50cd      	str	r5, [r1, r3]
 800deca:	18cc      	adds	r4, r1, r3
 800decc:	4630      	mov	r0, r6
 800dece:	f000 f848 	bl	800df62 <__malloc_unlock>
 800ded2:	f104 000b 	add.w	r0, r4, #11
 800ded6:	1d23      	adds	r3, r4, #4
 800ded8:	f020 0007 	bic.w	r0, r0, #7
 800dedc:	1ac3      	subs	r3, r0, r3
 800dede:	d0d3      	beq.n	800de88 <_malloc_r+0x20>
 800dee0:	425a      	negs	r2, r3
 800dee2:	50e2      	str	r2, [r4, r3]
 800dee4:	e7d0      	b.n	800de88 <_malloc_r+0x20>
 800dee6:	428c      	cmp	r4, r1
 800dee8:	684b      	ldr	r3, [r1, #4]
 800deea:	bf16      	itet	ne
 800deec:	6063      	strne	r3, [r4, #4]
 800deee:	6013      	streq	r3, [r2, #0]
 800def0:	460c      	movne	r4, r1
 800def2:	e7eb      	b.n	800decc <_malloc_r+0x64>
 800def4:	460c      	mov	r4, r1
 800def6:	6849      	ldr	r1, [r1, #4]
 800def8:	e7cc      	b.n	800de94 <_malloc_r+0x2c>
 800defa:	1cc4      	adds	r4, r0, #3
 800defc:	f024 0403 	bic.w	r4, r4, #3
 800df00:	42a0      	cmp	r0, r4
 800df02:	d005      	beq.n	800df10 <_malloc_r+0xa8>
 800df04:	1a21      	subs	r1, r4, r0
 800df06:	4630      	mov	r0, r6
 800df08:	f000 f808 	bl	800df1c <_sbrk_r>
 800df0c:	3001      	adds	r0, #1
 800df0e:	d0cf      	beq.n	800deb0 <_malloc_r+0x48>
 800df10:	6025      	str	r5, [r4, #0]
 800df12:	e7db      	b.n	800decc <_malloc_r+0x64>
 800df14:	20004b08 	.word	0x20004b08
 800df18:	20004b0c 	.word	0x20004b0c

0800df1c <_sbrk_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	4c06      	ldr	r4, [pc, #24]	; (800df38 <_sbrk_r+0x1c>)
 800df20:	2300      	movs	r3, #0
 800df22:	4605      	mov	r5, r0
 800df24:	4608      	mov	r0, r1
 800df26:	6023      	str	r3, [r4, #0]
 800df28:	f7f6 fa14 	bl	8004354 <_sbrk>
 800df2c:	1c43      	adds	r3, r0, #1
 800df2e:	d102      	bne.n	800df36 <_sbrk_r+0x1a>
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	b103      	cbz	r3, 800df36 <_sbrk_r+0x1a>
 800df34:	602b      	str	r3, [r5, #0]
 800df36:	bd38      	pop	{r3, r4, r5, pc}
 800df38:	20004cec 	.word	0x20004cec

0800df3c <__ascii_mbtowc>:
 800df3c:	b082      	sub	sp, #8
 800df3e:	b901      	cbnz	r1, 800df42 <__ascii_mbtowc+0x6>
 800df40:	a901      	add	r1, sp, #4
 800df42:	b142      	cbz	r2, 800df56 <__ascii_mbtowc+0x1a>
 800df44:	b14b      	cbz	r3, 800df5a <__ascii_mbtowc+0x1e>
 800df46:	7813      	ldrb	r3, [r2, #0]
 800df48:	600b      	str	r3, [r1, #0]
 800df4a:	7812      	ldrb	r2, [r2, #0]
 800df4c:	1c10      	adds	r0, r2, #0
 800df4e:	bf18      	it	ne
 800df50:	2001      	movne	r0, #1
 800df52:	b002      	add	sp, #8
 800df54:	4770      	bx	lr
 800df56:	4610      	mov	r0, r2
 800df58:	e7fb      	b.n	800df52 <__ascii_mbtowc+0x16>
 800df5a:	f06f 0001 	mvn.w	r0, #1
 800df5e:	e7f8      	b.n	800df52 <__ascii_mbtowc+0x16>

0800df60 <__malloc_lock>:
 800df60:	4770      	bx	lr

0800df62 <__malloc_unlock>:
 800df62:	4770      	bx	lr

0800df64 <__ascii_wctomb>:
 800df64:	b149      	cbz	r1, 800df7a <__ascii_wctomb+0x16>
 800df66:	2aff      	cmp	r2, #255	; 0xff
 800df68:	bf85      	ittet	hi
 800df6a:	238a      	movhi	r3, #138	; 0x8a
 800df6c:	6003      	strhi	r3, [r0, #0]
 800df6e:	700a      	strbls	r2, [r1, #0]
 800df70:	f04f 30ff 	movhi.w	r0, #4294967295
 800df74:	bf98      	it	ls
 800df76:	2001      	movls	r0, #1
 800df78:	4770      	bx	lr
 800df7a:	4608      	mov	r0, r1
 800df7c:	4770      	bx	lr

0800df7e <atan2>:
 800df7e:	f000 b803 	b.w	800df88 <__ieee754_atan2>
 800df82:	0000      	movs	r0, r0
 800df84:	0000      	movs	r0, r0
	...

0800df88 <__ieee754_atan2>:
 800df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df8c:	ec57 6b11 	vmov	r6, r7, d1
 800df90:	4273      	negs	r3, r6
 800df92:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800df96:	4333      	orrs	r3, r6
 800df98:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800e140 <__ieee754_atan2+0x1b8>
 800df9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dfa0:	4573      	cmp	r3, lr
 800dfa2:	ec51 0b10 	vmov	r0, r1, d0
 800dfa6:	ee11 8a10 	vmov	r8, s2
 800dfaa:	d80a      	bhi.n	800dfc2 <__ieee754_atan2+0x3a>
 800dfac:	4244      	negs	r4, r0
 800dfae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfb2:	4304      	orrs	r4, r0
 800dfb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dfb8:	4574      	cmp	r4, lr
 800dfba:	468c      	mov	ip, r1
 800dfbc:	ee10 9a10 	vmov	r9, s0
 800dfc0:	d907      	bls.n	800dfd2 <__ieee754_atan2+0x4a>
 800dfc2:	4632      	mov	r2, r6
 800dfc4:	463b      	mov	r3, r7
 800dfc6:	f7f2 f919 	bl	80001fc <__adddf3>
 800dfca:	ec41 0b10 	vmov	d0, r0, r1
 800dfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800dfd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dfda:	4334      	orrs	r4, r6
 800dfdc:	d103      	bne.n	800dfe6 <__ieee754_atan2+0x5e>
 800dfde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe2:	f000 b8b1 	b.w	800e148 <atan>
 800dfe6:	17bc      	asrs	r4, r7, #30
 800dfe8:	f004 0402 	and.w	r4, r4, #2
 800dfec:	ea53 0909 	orrs.w	r9, r3, r9
 800dff0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dff4:	d107      	bne.n	800e006 <__ieee754_atan2+0x7e>
 800dff6:	2c02      	cmp	r4, #2
 800dff8:	d073      	beq.n	800e0e2 <__ieee754_atan2+0x15a>
 800dffa:	2c03      	cmp	r4, #3
 800dffc:	d1e5      	bne.n	800dfca <__ieee754_atan2+0x42>
 800dffe:	a13e      	add	r1, pc, #248	; (adr r1, 800e0f8 <__ieee754_atan2+0x170>)
 800e000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e004:	e7e1      	b.n	800dfca <__ieee754_atan2+0x42>
 800e006:	ea52 0808 	orrs.w	r8, r2, r8
 800e00a:	d106      	bne.n	800e01a <__ieee754_atan2+0x92>
 800e00c:	f1bc 0f00 	cmp.w	ip, #0
 800e010:	da6b      	bge.n	800e0ea <__ieee754_atan2+0x162>
 800e012:	a13b      	add	r1, pc, #236	; (adr r1, 800e100 <__ieee754_atan2+0x178>)
 800e014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e018:	e7d7      	b.n	800dfca <__ieee754_atan2+0x42>
 800e01a:	4572      	cmp	r2, lr
 800e01c:	d120      	bne.n	800e060 <__ieee754_atan2+0xd8>
 800e01e:	4293      	cmp	r3, r2
 800e020:	d111      	bne.n	800e046 <__ieee754_atan2+0xbe>
 800e022:	2c02      	cmp	r4, #2
 800e024:	d007      	beq.n	800e036 <__ieee754_atan2+0xae>
 800e026:	2c03      	cmp	r4, #3
 800e028:	d009      	beq.n	800e03e <__ieee754_atan2+0xb6>
 800e02a:	2c01      	cmp	r4, #1
 800e02c:	d155      	bne.n	800e0da <__ieee754_atan2+0x152>
 800e02e:	a136      	add	r1, pc, #216	; (adr r1, 800e108 <__ieee754_atan2+0x180>)
 800e030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e034:	e7c9      	b.n	800dfca <__ieee754_atan2+0x42>
 800e036:	a136      	add	r1, pc, #216	; (adr r1, 800e110 <__ieee754_atan2+0x188>)
 800e038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e03c:	e7c5      	b.n	800dfca <__ieee754_atan2+0x42>
 800e03e:	a136      	add	r1, pc, #216	; (adr r1, 800e118 <__ieee754_atan2+0x190>)
 800e040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e044:	e7c1      	b.n	800dfca <__ieee754_atan2+0x42>
 800e046:	2c02      	cmp	r4, #2
 800e048:	d04b      	beq.n	800e0e2 <__ieee754_atan2+0x15a>
 800e04a:	2c03      	cmp	r4, #3
 800e04c:	d0d7      	beq.n	800dffe <__ieee754_atan2+0x76>
 800e04e:	2c01      	cmp	r4, #1
 800e050:	f04f 0000 	mov.w	r0, #0
 800e054:	d102      	bne.n	800e05c <__ieee754_atan2+0xd4>
 800e056:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e05a:	e7b6      	b.n	800dfca <__ieee754_atan2+0x42>
 800e05c:	2100      	movs	r1, #0
 800e05e:	e7b4      	b.n	800dfca <__ieee754_atan2+0x42>
 800e060:	4573      	cmp	r3, lr
 800e062:	d0d3      	beq.n	800e00c <__ieee754_atan2+0x84>
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	151b      	asrs	r3, r3, #20
 800e068:	2b3c      	cmp	r3, #60	; 0x3c
 800e06a:	dc1e      	bgt.n	800e0aa <__ieee754_atan2+0x122>
 800e06c:	2f00      	cmp	r7, #0
 800e06e:	da01      	bge.n	800e074 <__ieee754_atan2+0xec>
 800e070:	333c      	adds	r3, #60	; 0x3c
 800e072:	db1e      	blt.n	800e0b2 <__ieee754_atan2+0x12a>
 800e074:	4632      	mov	r2, r6
 800e076:	463b      	mov	r3, r7
 800e078:	f7f2 fba0 	bl	80007bc <__aeabi_ddiv>
 800e07c:	ec41 0b10 	vmov	d0, r0, r1
 800e080:	f000 fa02 	bl	800e488 <fabs>
 800e084:	f000 f860 	bl	800e148 <atan>
 800e088:	ec51 0b10 	vmov	r0, r1, d0
 800e08c:	2c01      	cmp	r4, #1
 800e08e:	d013      	beq.n	800e0b8 <__ieee754_atan2+0x130>
 800e090:	2c02      	cmp	r4, #2
 800e092:	d015      	beq.n	800e0c0 <__ieee754_atan2+0x138>
 800e094:	2c00      	cmp	r4, #0
 800e096:	d098      	beq.n	800dfca <__ieee754_atan2+0x42>
 800e098:	a321      	add	r3, pc, #132	; (adr r3, 800e120 <__ieee754_atan2+0x198>)
 800e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09e:	f7f2 f8ab 	bl	80001f8 <__aeabi_dsub>
 800e0a2:	a321      	add	r3, pc, #132	; (adr r3, 800e128 <__ieee754_atan2+0x1a0>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	e014      	b.n	800e0d4 <__ieee754_atan2+0x14c>
 800e0aa:	a121      	add	r1, pc, #132	; (adr r1, 800e130 <__ieee754_atan2+0x1a8>)
 800e0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0b0:	e7ec      	b.n	800e08c <__ieee754_atan2+0x104>
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	e7e9      	b.n	800e08c <__ieee754_atan2+0x104>
 800e0b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0bc:	4619      	mov	r1, r3
 800e0be:	e784      	b.n	800dfca <__ieee754_atan2+0x42>
 800e0c0:	a317      	add	r3, pc, #92	; (adr r3, 800e120 <__ieee754_atan2+0x198>)
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	f7f2 f897 	bl	80001f8 <__aeabi_dsub>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	a116      	add	r1, pc, #88	; (adr r1, 800e128 <__ieee754_atan2+0x1a0>)
 800e0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0d4:	f7f2 f890 	bl	80001f8 <__aeabi_dsub>
 800e0d8:	e777      	b.n	800dfca <__ieee754_atan2+0x42>
 800e0da:	a117      	add	r1, pc, #92	; (adr r1, 800e138 <__ieee754_atan2+0x1b0>)
 800e0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0e0:	e773      	b.n	800dfca <__ieee754_atan2+0x42>
 800e0e2:	a111      	add	r1, pc, #68	; (adr r1, 800e128 <__ieee754_atan2+0x1a0>)
 800e0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0e8:	e76f      	b.n	800dfca <__ieee754_atan2+0x42>
 800e0ea:	a111      	add	r1, pc, #68	; (adr r1, 800e130 <__ieee754_atan2+0x1a8>)
 800e0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0f0:	e76b      	b.n	800dfca <__ieee754_atan2+0x42>
 800e0f2:	bf00      	nop
 800e0f4:	f3af 8000 	nop.w
 800e0f8:	54442d18 	.word	0x54442d18
 800e0fc:	c00921fb 	.word	0xc00921fb
 800e100:	54442d18 	.word	0x54442d18
 800e104:	bff921fb 	.word	0xbff921fb
 800e108:	54442d18 	.word	0x54442d18
 800e10c:	bfe921fb 	.word	0xbfe921fb
 800e110:	7f3321d2 	.word	0x7f3321d2
 800e114:	4002d97c 	.word	0x4002d97c
 800e118:	7f3321d2 	.word	0x7f3321d2
 800e11c:	c002d97c 	.word	0xc002d97c
 800e120:	33145c07 	.word	0x33145c07
 800e124:	3ca1a626 	.word	0x3ca1a626
 800e128:	54442d18 	.word	0x54442d18
 800e12c:	400921fb 	.word	0x400921fb
 800e130:	54442d18 	.word	0x54442d18
 800e134:	3ff921fb 	.word	0x3ff921fb
 800e138:	54442d18 	.word	0x54442d18
 800e13c:	3fe921fb 	.word	0x3fe921fb
 800e140:	7ff00000 	.word	0x7ff00000
 800e144:	00000000 	.word	0x00000000

0800e148 <atan>:
 800e148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	ec55 4b10 	vmov	r4, r5, d0
 800e150:	4bc3      	ldr	r3, [pc, #780]	; (800e460 <atan+0x318>)
 800e152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e156:	429e      	cmp	r6, r3
 800e158:	46ab      	mov	fp, r5
 800e15a:	dd18      	ble.n	800e18e <atan+0x46>
 800e15c:	4bc1      	ldr	r3, [pc, #772]	; (800e464 <atan+0x31c>)
 800e15e:	429e      	cmp	r6, r3
 800e160:	dc01      	bgt.n	800e166 <atan+0x1e>
 800e162:	d109      	bne.n	800e178 <atan+0x30>
 800e164:	b144      	cbz	r4, 800e178 <atan+0x30>
 800e166:	4622      	mov	r2, r4
 800e168:	462b      	mov	r3, r5
 800e16a:	4620      	mov	r0, r4
 800e16c:	4629      	mov	r1, r5
 800e16e:	f7f2 f845 	bl	80001fc <__adddf3>
 800e172:	4604      	mov	r4, r0
 800e174:	460d      	mov	r5, r1
 800e176:	e006      	b.n	800e186 <atan+0x3e>
 800e178:	f1bb 0f00 	cmp.w	fp, #0
 800e17c:	f340 8131 	ble.w	800e3e2 <atan+0x29a>
 800e180:	a59b      	add	r5, pc, #620	; (adr r5, 800e3f0 <atan+0x2a8>)
 800e182:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e186:	ec45 4b10 	vmov	d0, r4, r5
 800e18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18e:	4bb6      	ldr	r3, [pc, #728]	; (800e468 <atan+0x320>)
 800e190:	429e      	cmp	r6, r3
 800e192:	dc14      	bgt.n	800e1be <atan+0x76>
 800e194:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e198:	429e      	cmp	r6, r3
 800e19a:	dc0d      	bgt.n	800e1b8 <atan+0x70>
 800e19c:	a396      	add	r3, pc, #600	; (adr r3, 800e3f8 <atan+0x2b0>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	ee10 0a10 	vmov	r0, s0
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	f7f2 f828 	bl	80001fc <__adddf3>
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4baf      	ldr	r3, [pc, #700]	; (800e46c <atan+0x324>)
 800e1b0:	f7f2 fc6a 	bl	8000a88 <__aeabi_dcmpgt>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d1e6      	bne.n	800e186 <atan+0x3e>
 800e1b8:	f04f 3aff 	mov.w	sl, #4294967295
 800e1bc:	e02b      	b.n	800e216 <atan+0xce>
 800e1be:	f000 f963 	bl	800e488 <fabs>
 800e1c2:	4bab      	ldr	r3, [pc, #684]	; (800e470 <atan+0x328>)
 800e1c4:	429e      	cmp	r6, r3
 800e1c6:	ec55 4b10 	vmov	r4, r5, d0
 800e1ca:	f300 80bf 	bgt.w	800e34c <atan+0x204>
 800e1ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e1d2:	429e      	cmp	r6, r3
 800e1d4:	f300 80a0 	bgt.w	800e318 <atan+0x1d0>
 800e1d8:	ee10 2a10 	vmov	r2, s0
 800e1dc:	ee10 0a10 	vmov	r0, s0
 800e1e0:	462b      	mov	r3, r5
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	f7f2 f80a 	bl	80001fc <__adddf3>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	4ba0      	ldr	r3, [pc, #640]	; (800e46c <atan+0x324>)
 800e1ec:	f7f2 f804 	bl	80001f8 <__aeabi_dsub>
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	460f      	mov	r7, r1
 800e1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7f1 fffd 	bl	80001fc <__adddf3>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4630      	mov	r0, r6
 800e208:	4639      	mov	r1, r7
 800e20a:	f7f2 fad7 	bl	80007bc <__aeabi_ddiv>
 800e20e:	f04f 0a00 	mov.w	sl, #0
 800e212:	4604      	mov	r4, r0
 800e214:	460d      	mov	r5, r1
 800e216:	4622      	mov	r2, r4
 800e218:	462b      	mov	r3, r5
 800e21a:	4620      	mov	r0, r4
 800e21c:	4629      	mov	r1, r5
 800e21e:	f7f2 f9a3 	bl	8000568 <__aeabi_dmul>
 800e222:	4602      	mov	r2, r0
 800e224:	460b      	mov	r3, r1
 800e226:	4680      	mov	r8, r0
 800e228:	4689      	mov	r9, r1
 800e22a:	f7f2 f99d 	bl	8000568 <__aeabi_dmul>
 800e22e:	a374      	add	r3, pc, #464	; (adr r3, 800e400 <atan+0x2b8>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	4606      	mov	r6, r0
 800e236:	460f      	mov	r7, r1
 800e238:	f7f2 f996 	bl	8000568 <__aeabi_dmul>
 800e23c:	a372      	add	r3, pc, #456	; (adr r3, 800e408 <atan+0x2c0>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	f7f1 ffdb 	bl	80001fc <__adddf3>
 800e246:	4632      	mov	r2, r6
 800e248:	463b      	mov	r3, r7
 800e24a:	f7f2 f98d 	bl	8000568 <__aeabi_dmul>
 800e24e:	a370      	add	r3, pc, #448	; (adr r3, 800e410 <atan+0x2c8>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f1 ffd2 	bl	80001fc <__adddf3>
 800e258:	4632      	mov	r2, r6
 800e25a:	463b      	mov	r3, r7
 800e25c:	f7f2 f984 	bl	8000568 <__aeabi_dmul>
 800e260:	a36d      	add	r3, pc, #436	; (adr r3, 800e418 <atan+0x2d0>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f7f1 ffc9 	bl	80001fc <__adddf3>
 800e26a:	4632      	mov	r2, r6
 800e26c:	463b      	mov	r3, r7
 800e26e:	f7f2 f97b 	bl	8000568 <__aeabi_dmul>
 800e272:	a36b      	add	r3, pc, #428	; (adr r3, 800e420 <atan+0x2d8>)
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	f7f1 ffc0 	bl	80001fc <__adddf3>
 800e27c:	4632      	mov	r2, r6
 800e27e:	463b      	mov	r3, r7
 800e280:	f7f2 f972 	bl	8000568 <__aeabi_dmul>
 800e284:	a368      	add	r3, pc, #416	; (adr r3, 800e428 <atan+0x2e0>)
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	f7f1 ffb7 	bl	80001fc <__adddf3>
 800e28e:	4642      	mov	r2, r8
 800e290:	464b      	mov	r3, r9
 800e292:	f7f2 f969 	bl	8000568 <__aeabi_dmul>
 800e296:	a366      	add	r3, pc, #408	; (adr r3, 800e430 <atan+0x2e8>)
 800e298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29c:	4680      	mov	r8, r0
 800e29e:	4689      	mov	r9, r1
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f7f2 f960 	bl	8000568 <__aeabi_dmul>
 800e2a8:	a363      	add	r3, pc, #396	; (adr r3, 800e438 <atan+0x2f0>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f7f1 ffa3 	bl	80001f8 <__aeabi_dsub>
 800e2b2:	4632      	mov	r2, r6
 800e2b4:	463b      	mov	r3, r7
 800e2b6:	f7f2 f957 	bl	8000568 <__aeabi_dmul>
 800e2ba:	a361      	add	r3, pc, #388	; (adr r3, 800e440 <atan+0x2f8>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	f7f1 ff9a 	bl	80001f8 <__aeabi_dsub>
 800e2c4:	4632      	mov	r2, r6
 800e2c6:	463b      	mov	r3, r7
 800e2c8:	f7f2 f94e 	bl	8000568 <__aeabi_dmul>
 800e2cc:	a35e      	add	r3, pc, #376	; (adr r3, 800e448 <atan+0x300>)
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	f7f1 ff91 	bl	80001f8 <__aeabi_dsub>
 800e2d6:	4632      	mov	r2, r6
 800e2d8:	463b      	mov	r3, r7
 800e2da:	f7f2 f945 	bl	8000568 <__aeabi_dmul>
 800e2de:	a35c      	add	r3, pc, #368	; (adr r3, 800e450 <atan+0x308>)
 800e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e4:	f7f1 ff88 	bl	80001f8 <__aeabi_dsub>
 800e2e8:	4632      	mov	r2, r6
 800e2ea:	463b      	mov	r3, r7
 800e2ec:	f7f2 f93c 	bl	8000568 <__aeabi_dmul>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	4649      	mov	r1, r9
 800e2f8:	f7f1 ff80 	bl	80001fc <__adddf3>
 800e2fc:	4622      	mov	r2, r4
 800e2fe:	462b      	mov	r3, r5
 800e300:	f7f2 f932 	bl	8000568 <__aeabi_dmul>
 800e304:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	d14b      	bne.n	800e3a6 <atan+0x25e>
 800e30e:	4620      	mov	r0, r4
 800e310:	4629      	mov	r1, r5
 800e312:	f7f1 ff71 	bl	80001f8 <__aeabi_dsub>
 800e316:	e72c      	b.n	800e172 <atan+0x2a>
 800e318:	ee10 0a10 	vmov	r0, s0
 800e31c:	2200      	movs	r2, #0
 800e31e:	4b53      	ldr	r3, [pc, #332]	; (800e46c <atan+0x324>)
 800e320:	4629      	mov	r1, r5
 800e322:	f7f1 ff69 	bl	80001f8 <__aeabi_dsub>
 800e326:	2200      	movs	r2, #0
 800e328:	4606      	mov	r6, r0
 800e32a:	460f      	mov	r7, r1
 800e32c:	4b4f      	ldr	r3, [pc, #316]	; (800e46c <atan+0x324>)
 800e32e:	4620      	mov	r0, r4
 800e330:	4629      	mov	r1, r5
 800e332:	f7f1 ff63 	bl	80001fc <__adddf3>
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f2 fa3d 	bl	80007bc <__aeabi_ddiv>
 800e342:	f04f 0a01 	mov.w	sl, #1
 800e346:	4604      	mov	r4, r0
 800e348:	460d      	mov	r5, r1
 800e34a:	e764      	b.n	800e216 <atan+0xce>
 800e34c:	4b49      	ldr	r3, [pc, #292]	; (800e474 <atan+0x32c>)
 800e34e:	429e      	cmp	r6, r3
 800e350:	dc1d      	bgt.n	800e38e <atan+0x246>
 800e352:	ee10 0a10 	vmov	r0, s0
 800e356:	2200      	movs	r2, #0
 800e358:	4b47      	ldr	r3, [pc, #284]	; (800e478 <atan+0x330>)
 800e35a:	4629      	mov	r1, r5
 800e35c:	f7f1 ff4c 	bl	80001f8 <__aeabi_dsub>
 800e360:	2200      	movs	r2, #0
 800e362:	4606      	mov	r6, r0
 800e364:	460f      	mov	r7, r1
 800e366:	4b44      	ldr	r3, [pc, #272]	; (800e478 <atan+0x330>)
 800e368:	4620      	mov	r0, r4
 800e36a:	4629      	mov	r1, r5
 800e36c:	f7f2 f8fc 	bl	8000568 <__aeabi_dmul>
 800e370:	2200      	movs	r2, #0
 800e372:	4b3e      	ldr	r3, [pc, #248]	; (800e46c <atan+0x324>)
 800e374:	f7f1 ff42 	bl	80001fc <__adddf3>
 800e378:	4602      	mov	r2, r0
 800e37a:	460b      	mov	r3, r1
 800e37c:	4630      	mov	r0, r6
 800e37e:	4639      	mov	r1, r7
 800e380:	f7f2 fa1c 	bl	80007bc <__aeabi_ddiv>
 800e384:	f04f 0a02 	mov.w	sl, #2
 800e388:	4604      	mov	r4, r0
 800e38a:	460d      	mov	r5, r1
 800e38c:	e743      	b.n	800e216 <atan+0xce>
 800e38e:	462b      	mov	r3, r5
 800e390:	ee10 2a10 	vmov	r2, s0
 800e394:	2000      	movs	r0, #0
 800e396:	4939      	ldr	r1, [pc, #228]	; (800e47c <atan+0x334>)
 800e398:	f7f2 fa10 	bl	80007bc <__aeabi_ddiv>
 800e39c:	f04f 0a03 	mov.w	sl, #3
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	460d      	mov	r5, r1
 800e3a4:	e737      	b.n	800e216 <atan+0xce>
 800e3a6:	4b36      	ldr	r3, [pc, #216]	; (800e480 <atan+0x338>)
 800e3a8:	4e36      	ldr	r6, [pc, #216]	; (800e484 <atan+0x33c>)
 800e3aa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800e3ae:	4456      	add	r6, sl
 800e3b0:	449a      	add	sl, r3
 800e3b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800e3b6:	f7f1 ff1f 	bl	80001f8 <__aeabi_dsub>
 800e3ba:	4622      	mov	r2, r4
 800e3bc:	462b      	mov	r3, r5
 800e3be:	f7f1 ff1b 	bl	80001f8 <__aeabi_dsub>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e3ca:	f7f1 ff15 	bl	80001f8 <__aeabi_dsub>
 800e3ce:	f1bb 0f00 	cmp.w	fp, #0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	460d      	mov	r5, r1
 800e3d6:	f6bf aed6 	bge.w	800e186 <atan+0x3e>
 800e3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3de:	461d      	mov	r5, r3
 800e3e0:	e6d1      	b.n	800e186 <atan+0x3e>
 800e3e2:	a51d      	add	r5, pc, #116	; (adr r5, 800e458 <atan+0x310>)
 800e3e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3e8:	e6cd      	b.n	800e186 <atan+0x3e>
 800e3ea:	bf00      	nop
 800e3ec:	f3af 8000 	nop.w
 800e3f0:	54442d18 	.word	0x54442d18
 800e3f4:	3ff921fb 	.word	0x3ff921fb
 800e3f8:	8800759c 	.word	0x8800759c
 800e3fc:	7e37e43c 	.word	0x7e37e43c
 800e400:	e322da11 	.word	0xe322da11
 800e404:	3f90ad3a 	.word	0x3f90ad3a
 800e408:	24760deb 	.word	0x24760deb
 800e40c:	3fa97b4b 	.word	0x3fa97b4b
 800e410:	a0d03d51 	.word	0xa0d03d51
 800e414:	3fb10d66 	.word	0x3fb10d66
 800e418:	c54c206e 	.word	0xc54c206e
 800e41c:	3fb745cd 	.word	0x3fb745cd
 800e420:	920083ff 	.word	0x920083ff
 800e424:	3fc24924 	.word	0x3fc24924
 800e428:	5555550d 	.word	0x5555550d
 800e42c:	3fd55555 	.word	0x3fd55555
 800e430:	2c6a6c2f 	.word	0x2c6a6c2f
 800e434:	bfa2b444 	.word	0xbfa2b444
 800e438:	52defd9a 	.word	0x52defd9a
 800e43c:	3fadde2d 	.word	0x3fadde2d
 800e440:	af749a6d 	.word	0xaf749a6d
 800e444:	3fb3b0f2 	.word	0x3fb3b0f2
 800e448:	fe231671 	.word	0xfe231671
 800e44c:	3fbc71c6 	.word	0x3fbc71c6
 800e450:	9998ebc4 	.word	0x9998ebc4
 800e454:	3fc99999 	.word	0x3fc99999
 800e458:	54442d18 	.word	0x54442d18
 800e45c:	bff921fb 	.word	0xbff921fb
 800e460:	440fffff 	.word	0x440fffff
 800e464:	7ff00000 	.word	0x7ff00000
 800e468:	3fdbffff 	.word	0x3fdbffff
 800e46c:	3ff00000 	.word	0x3ff00000
 800e470:	3ff2ffff 	.word	0x3ff2ffff
 800e474:	40037fff 	.word	0x40037fff
 800e478:	3ff80000 	.word	0x3ff80000
 800e47c:	bff00000 	.word	0xbff00000
 800e480:	0800ea20 	.word	0x0800ea20
 800e484:	0800ea00 	.word	0x0800ea00

0800e488 <fabs>:
 800e488:	ec51 0b10 	vmov	r0, r1, d0
 800e48c:	ee10 2a10 	vmov	r2, s0
 800e490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e494:	ec43 2b10 	vmov	d0, r2, r3
 800e498:	4770      	bx	lr
	...

0800e49c <_init>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr

0800e4a8 <_fini>:
 800e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4aa:	bf00      	nop
 800e4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ae:	bc08      	pop	{r3}
 800e4b0:	469e      	mov	lr, r3
 800e4b2:	4770      	bx	lr
